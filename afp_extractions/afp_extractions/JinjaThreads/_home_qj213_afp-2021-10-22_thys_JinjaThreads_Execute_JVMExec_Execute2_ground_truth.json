{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Execute/JVMExec_Execute2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma frame'_ok_frame'_of_frame [iff]: \n  \"frame'_ok P (frame'_of_frame P f)\"", "lemma frames'_ok_inverse [simp]:\n  \"\\<forall>x\\<in>set frs. frame'_ok P x \\<Longrightarrow> map (frame'_of_frame P \\<circ> frame_of_frame') frs = frs\"", "lemma jvm_state'_ok_jvm_state'_of_jvm_state [iff]:\n  \"jvm_state'_ok P (jvm_state'_of_jvm_state P s)\"", "lemma jvm_thread_state'_ok_jvm_thread_state'_of_jvm_thread_state [iff]:\n  \"jvm_thread_state'_ok P (jvm_thread_state'_of_jvm_thread_state P s)\"", "lemma jvm_thread_action'_ok_jvm_thread_action'_of_jvm_thread_action [iff]:\n  \"jvm_thread_action'_ok P (jvm_thread_action'_of_jvm_thread_action P ta)\"", "lemma jvm_thread_action'_ok_\\<epsilon> [simp]: \"jvm_thread_action'_ok P \\<epsilon>\"", "lemma jvm_ta_state'_ok_jvm_ta_state'_of_jvm_ta_state [iff]:\n  \"jvm_ta_state'_ok P (jvm_ta_state'_of_jvm_ta_state P tas)\"", "lemma frame_of_frame'_inverse [simp]: \"frame_of_frame' \\<circ> frame'_of_frame P = id\"", "lemma convert_new_thread_action_frame_of_frame'_inverse [simp]:\n  \"convert_new_thread_action (map_prod id (map frame_of_frame')) \\<circ> convert_new_thread_action (jvm_thread_state'_of_jvm_thread_state P) = id\"", "lemma jvm_state'_ok_extRet2JVM' [simp]:\n  assumes [simp]: \"ins = instrs_of P C M\" \"xt = ex_table_of P C M\" \"\\<forall>f \\<in> set frs. frame'_ok P f\"\n  shows \"jvm_state'_ok P (extRet2JVM' (drop pc ins) ins xt n h stk loc C M pc frs va)\"", "lemma jvm_state'_of_jvm_state_extRet2JVM [simp]:\n  assumes [simp]: \"ins = instrs_of P C M\" \"xt = ex_table_of P C M\" \"\\<forall>f \\<in> set frs. frame'_ok P f\"\n  shows \n  \"jvm_state'_of_jvm_state P (extRet2JVM n h' stk loc C M pc (map frame_of_frame' frs) va) =\n   extRet2JVM' (drop pc (instrs_of P C M)) ins xt n h' stk loc C M pc frs va\"", "lemma extRet2JVM'_extRet2JVM [simp]:\n  \"jvm_state_of_jvm_state' (extRet2JVM' ins' ins xt n h' stk loc C M pc frs va) =\n   extRet2JVM n h' stk loc C M pc (map frame_of_frame' frs) va\"", "lemma jvm_ta_state'_ok_inverse:\n  assumes \"jvm_ta_state'_ok P tas\" \n  shows \"jvm_ta_state_of_jvm_ta_state' tas \\<in> A \\<longleftrightarrow> tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` A\"", "lemma check_exec_instr_ok:\n  assumes wf: \"wf_prog wf_md P\"\n  and \"execute.check_instr i P h stk loc C M pc (map frame_of_frame' frs)\"\n  and \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\"\n  and \"jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\"\n  and \"tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\"\n  shows \"jvm_ta_state'_ok P tas\"", "lemma check_exec_instr_complete:\n  assumes wf: \"wf_prog wf_md P\"\n  and \"execute.check_instr i P h stk loc C M pc (map frame_of_frame' frs)\"\n  and \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\"\n  and \"jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\"\n  and \"tas \\<in> execute.exec_instr i P t h stk loc C M pc (map frame_of_frame' frs)\"\n  shows \"jvm_ta_state'_of_jvm_ta_state P tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\"", "lemma check_exec_instr_refine:\n  assumes wf: \"wf_prog wf_md P\"\n  and \"execute.check_instr i P h stk loc C M pc (map frame_of_frame' frs)\"\n  and \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\"\n  and \"jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\"\n  and \"tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\"\n  shows \"tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` execute.exec_instr i P t h stk loc C M pc (map frame_of_frame' frs)\"", "lemma exception_step_ok:\n  assumes \"frame'_ok P fr\" \"\\<forall>f\\<in>set frs. frame'_ok P f\"\n  shows \"jvm_state'_ok P (exception_step P a h fr frs)\"\n  and \"exception_step P a h fr frs = jvm_state'_of_jvm_state P (execute.exception_step P a h (snd fr) (map frame_of_frame' frs))\"", "lemma exec_step_conv:\n  assumes \"wf_prog wf_md P\"\n  and \"jvm_state'_ok P s\"\n  and \"execute.check P (jvm_state_of_jvm_state' s)\"\n  shows \"exec P t s = jvm_ta_state'_of_jvm_ta_state P ` execute.exec P t (jvm_state_of_jvm_state' s)\"", "lemma exec_step_ok:\n  assumes \"wf_prog wf_md P\"\n  and \"jvm_state'_ok P s\"\n  and \"execute.check P (jvm_state_of_jvm_state' s)\"\n  and \"tas \\<in> exec P t s\"\n  shows \"jvm_ta_state'_ok P tas\"", "lemma exec_correct_state:\n  assumes wt: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\"\n  and correct: \"execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s)\"\n  and ok: \"jvm_state'_ok P s\"\n  shows \"exec P t s = jvm_ta_state'_of_jvm_ta_state P ` execute.exec P t (jvm_state_of_jvm_state' s)\"\n  (is ?thesis1)\n  and \"(ta, s') \\<in> exec P t s \\<Longrightarrow> execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\" (is \"_ \\<Longrightarrow> ?thesis2\")\n  and \"tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas\"", "lemmas [code] = \n  JVM_heap_execute.exec_instr.simps\n  JVM_heap_execute.exception_step.simps\n  JVM_heap_execute.exec.simps\n  JVM_heap_execute.exec_1_def"], "translations": [["", "lemma frame'_ok_frame'_of_frame [iff]: \n  \"frame'_ok P (frame'_of_frame P f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frame'_ok P (frame'_of_frame P f)", "by(cases f)(simp)"], ["", "lemma frames'_ok_inverse [simp]:\n  \"\\<forall>x\\<in>set frs. frame'_ok P x \\<Longrightarrow> map (frame'_of_frame P \\<circ> frame_of_frame') frs = frs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set frs. frame'_ok P x \\<Longrightarrow>\n    map (frame'_of_frame P \\<circ> snd) frs = frs", "by(rule map_idI) auto"], ["", "fun jvm_state'_ok :: \"'addr jvm_prog \\<Rightarrow> ('addr, 'heap) jvm_state' \\<Rightarrow> bool\"\nwhere \"jvm_state'_ok P (xcp, h, frs) = (\\<forall>f \\<in> set frs. frame'_ok P f)\""], ["", "lemma jvm_state'_ok_jvm_state'_of_jvm_state [iff]:\n  \"jvm_state'_ok P (jvm_state'_of_jvm_state P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_state'_ok P (jvm_state'_of_jvm_state P s)", "by(cases s) simp"], ["", "fun jvm_thread_state'_ok :: \"'addr jvm_prog \\<Rightarrow> 'addr jvm_thread_state' \\<Rightarrow> bool\"\nwhere \"jvm_thread_state'_ok P (xcp, frs) \\<longleftrightarrow> (\\<forall>f \\<in> set frs. frame'_ok P f)\""], ["", "lemma jvm_thread_state'_ok_jvm_thread_state'_of_jvm_thread_state [iff]:\n  \"jvm_thread_state'_ok P (jvm_thread_state'_of_jvm_thread_state P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_thread_state'_ok P (jvm_thread_state'_of_jvm_thread_state P s)", "by(cases s) simp"], ["", "definition jvm_thread_action'_ok :: \"'addr jvm_prog \\<Rightarrow> ('addr, 'thread_id, 'heap) jvm_thread_action' \\<Rightarrow> bool\"\nwhere \"jvm_thread_action'_ok P ta \\<longleftrightarrow> (\\<forall>nt \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>. \\<forall>t x h. nt = NewThread t x h \\<longrightarrow> jvm_thread_state'_ok P x)\""], ["", "lemma jvm_thread_action'_ok_jvm_thread_action'_of_jvm_thread_action [iff]:\n  \"jvm_thread_action'_ok P (jvm_thread_action'_of_jvm_thread_action P ta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_thread_action'_ok P (jvm_thread_action'_of_jvm_thread_action P ta)", "by(cases ta)(fastforce dest: sym simp add: jvm_thread_action'_ok_def jvm_thread_action'_of_jvm_thread_action_def)"], ["", "lemma jvm_thread_action'_ok_\\<epsilon> [simp]: \"jvm_thread_action'_ok P \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_thread_action'_ok P \\<lbrace>\\<rbrace>", "by(simp add: jvm_thread_action'_ok_def)"], ["", "fun jvm_ta_state'_ok :: \"'addr jvm_prog \\<Rightarrow> ('addr, 'thread_id, 'heap) jvm_ta_state' \\<Rightarrow> bool\"\nwhere \"jvm_ta_state'_ok P (ta, s) \\<longleftrightarrow> jvm_thread_action'_ok P ta \\<and> jvm_state'_ok P s\""], ["", "lemma jvm_ta_state'_ok_jvm_ta_state'_of_jvm_ta_state [iff]:\n  \"jvm_ta_state'_ok P (jvm_ta_state'_of_jvm_ta_state P tas)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P (jvm_ta_state'_of_jvm_ta_state P tas)", "by(cases tas)(simp)"], ["", "lemma frame_of_frame'_inverse [simp]: \"frame_of_frame' \\<circ> frame'_of_frame P = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<circ> frame'_of_frame P = id", "by(clarsimp simp add: fun_eq_iff)"], ["", "lemma convert_new_thread_action_frame_of_frame'_inverse [simp]:\n  \"convert_new_thread_action (map_prod id (map frame_of_frame')) \\<circ> convert_new_thread_action (jvm_thread_state'_of_jvm_thread_state P) = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convert_new_thread_action (map_prod id (map snd)) \\<circ>\n    convert_new_thread_action (jvm_thread_state'_of_jvm_thread_state P) =\n    id", "by(auto intro!: convert_new_thread_action_eqI simp add: fun_eq_iff List.map.id)"], ["", "primrec extRet2JVM' :: \n  \"'addr instr list \\<Rightarrow> 'addr instr list \\<Rightarrow> ex_table \n  \\<Rightarrow> nat \\<Rightarrow> 'heap \\<Rightarrow> 'addr val list \\<Rightarrow> 'addr val list \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> pc \\<Rightarrow> 'addr frame' list \n  \\<Rightarrow> 'addr extCallRet \\<Rightarrow> ('addr, 'heap) jvm_state'\"\nwhere\n  \"extRet2JVM' ins' ins xt n h stk loc C M pc frs (RetVal v) = (None, h, ((tl ins', ins, xt), v # drop (Suc n) stk, loc, C, M, pc + 1) # frs)\"\n| \"extRet2JVM' ins' ins xt n h stk loc C M pc frs (RetExc a) = (\\<lfloor>a\\<rfloor>, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\"\n| \"extRet2JVM' ins' ins xt n h stk loc C M pc frs RetStaySame = (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\""], ["", "definition extNTA2JVM' :: \"'addr jvm_prog \\<Rightarrow> (cname \\<times> mname \\<times> 'addr) \\<Rightarrow> 'addr jvm_thread_state'\"\nwhere \"extNTA2JVM' P \\<equiv> (\\<lambda>(C, M, a). let (D,Ts,T,meth) = method P C M; (mxs,mxl0,ins,xt) = the meth\n                                   in (None, [((ins, ins, xt), [],Addr a # replicate mxl0 undefined_value, D, M, 0)]))\""], ["", "abbreviation extTA2JVM' :: \n  \"'addr jvm_prog \\<Rightarrow> ('addr, 'thread_id, 'heap) external_thread_action \\<Rightarrow> ('addr, 'thread_id, 'heap) jvm_thread_action'\"\nwhere \"extTA2JVM' P \\<equiv> convert_extTA (extNTA2JVM' P)\""], ["", "lemma jvm_state'_ok_extRet2JVM' [simp]:\n  assumes [simp]: \"ins = instrs_of P C M\" \"xt = ex_table_of P C M\" \"\\<forall>f \\<in> set frs. frame'_ok P f\"\n  shows \"jvm_state'_ok P (extRet2JVM' (drop pc ins) ins xt n h stk loc C M pc frs va)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_state'_ok P\n     (extRet2JVM' (drop pc ins) ins xt n h stk loc C M pc frs va)", "by(cases va)(simp_all add: drop_tl drop_Suc)"], ["", "lemma jvm_state'_of_jvm_state_extRet2JVM [simp]:\n  assumes [simp]: \"ins = instrs_of P C M\" \"xt = ex_table_of P C M\" \"\\<forall>f \\<in> set frs. frame'_ok P f\"\n  shows \n  \"jvm_state'_of_jvm_state P (extRet2JVM n h' stk loc C M pc (map frame_of_frame' frs) va) =\n   extRet2JVM' (drop pc (instrs_of P C M)) ins xt n h' stk loc C M pc frs va\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_state'_of_jvm_state P\n     (extRet2JVM n h' stk loc C M pc (map snd frs) va) =\n    extRet2JVM' (drop pc (instrs_of P C M)) ins xt n h' stk loc C M pc frs\n     va", "by(cases va)(simp_all add: drop_tl drop_Suc)"], ["", "lemma extRet2JVM'_extRet2JVM [simp]:\n  \"jvm_state_of_jvm_state' (extRet2JVM' ins' ins xt n h' stk loc C M pc frs va) =\n   extRet2JVM n h' stk loc C M pc (map frame_of_frame' frs) va\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_state_of_jvm_state'\n     (extRet2JVM' ins' ins xt n h' stk loc C M pc frs va) =\n    extRet2JVM n h' stk loc C M pc (map snd frs) va", "by(cases va) simp_all"], ["", "lemma jvm_ta_state'_ok_inverse:\n  assumes \"jvm_ta_state'_ok P tas\" \n  shows \"jvm_ta_state_of_jvm_ta_state' tas \\<in> A \\<longleftrightarrow> tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (jvm_ta_state_of_jvm_ta_state' tas \\<in> A) =\n    (tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` A)", "using assms"], ["proof (prove)\nusing this:\n  jvm_ta_state'_ok P tas\n\ngoal (1 subgoal):\n 1. (jvm_ta_state_of_jvm_ta_state' tas \\<in> A) =\n    (tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` A)", "apply(cases tas)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>jvm_ta_state'_ok P tas; tas = (a, b, c, d)\\<rbrakk>\n       \\<Longrightarrow> (jvm_ta_state_of_jvm_ta_state' tas \\<in> A) =\n                         (tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` A)", "apply(fastforce simp add: o_def jvm_thread_action'_of_jvm_thread_action_def jvm_thread_action'_ok_def intro!: map_idI[symmetric] map_idI convert_new_thread_action_eqI dest: bspec intro!: rev_image_eqI elim!: rev_iffD1[OF _ arg_cong[where f=\"\\<lambda>x. x : A\"]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context JVM_heap_execute begin"], ["", "primrec exec_instr ::\n  \"'addr instr list \\<Rightarrow> 'addr instr list \\<Rightarrow> ex_table \n  \\<Rightarrow> 'addr instr \\<Rightarrow> 'addr jvm_prog \\<Rightarrow> 'thread_id \\<Rightarrow> 'heap \\<Rightarrow> 'addr val list \\<Rightarrow> 'addr val list\n  \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> pc \\<Rightarrow> 'addr frame' list \n  \\<Rightarrow> (('addr, 'thread_id, 'heap) jvm_ta_state') set\"\nwhere\n  \"exec_instr ins' ins xt (Load n) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   {(\\<epsilon>, (None, h, ((tl ins', ins, xt), (loc ! n) # stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))}\"\n| \"exec_instr ins' ins xt (Store n) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   {(\\<epsilon>, (None, h, ((tl ins', ins, xt), tl stk, loc[n:=hd stk], C\\<^sub>0, M\\<^sub>0, pc+1)#frs))}\"\n| \"exec_instr ins' ins xt (Push v) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   {(\\<epsilon>, (None, h, ((tl ins', ins, xt), v # stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))}\"\n| \"exec_instr ins' ins xt (New C) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   (let HA = allocate h (Class_type C)\n    in if HA = {} then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt OutOfMemory\\<rfloor>, h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc) # frs)}\n       else do { (h', a) \\<leftarrow> HA;\n          {(\\<lbrace>NewHeapElem a (Class_type C)\\<rbrace>, None, h', ((tl ins', ins, xt), Addr a # stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1)#frs)}})\"\n| \"exec_instr ins' ins xt (NewArray T) P t h stk loc C0 M0 pc frs =\n   (let si = the_Intg (hd stk);\n        i = nat (sint si)\n     in if si <s 0\n        then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NegativeArraySize\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n        else let HA = allocate h (Array_type T i) in\n          if HA = {} then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt OutOfMemory\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n          else do { (h', a) \\<leftarrow> HA;\n                {(\\<lbrace>NewHeapElem a (Array_type T i) \\<rbrace>, None, h', ((tl ins', ins, xt), Addr a # tl stk, loc, C0, M0, pc + 1) # frs)}})\"\n| \"exec_instr ins' ins xt ALoad P t h stk loc C0 M0 pc frs =\n   (let va = hd (tl stk)\n    in (if va = Null then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n        else\n          let i = the_Intg (hd stk);\n              a = the_Addr va;\n              len = alen_of_htype (the (typeof_addr h a))\n          in if i <s 0 \\<or> int len \\<le> sint i then\n               {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt ArrayIndexOutOfBounds\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n             else do {\n               v \\<leftarrow> heap_read h a (ACell (nat (sint i)));\n               {(\\<lbrace>ReadMem a (ACell (nat (sint i))) v\\<rbrace>, None, h, ((tl ins', ins, xt), v # tl (tl stk), loc, C0, M0, pc + 1) # frs)}\n             }))\"\n| \"exec_instr ins' ins xt AStore P t h stk loc C0 M0 pc frs =\n  (let ve = hd stk;\n       vi = hd (tl stk);\n       va = hd (tl (tl stk))\n   in (if va = Null then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n       else (let i = the_Intg vi;\n                 idx = nat (sint i);\n                 a = the_Addr va;\n                 hT = the (typeof_addr h a);\n                 T = ty_of_htype hT;\n                 len = alen_of_htype hT;\n                 U = the (execute.typeof_h h ve)\n             in (if i <s 0 \\<or> int len \\<le> sint i then\n                      {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt ArrayIndexOutOfBounds\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n                 else if P \\<turnstile> U \\<le> the_Array T then \n                      do {\n                         h' \\<leftarrow> heap_write h a (ACell idx) ve;\n                         {(\\<lbrace>WriteMem a (ACell idx) ve\\<rbrace>, None, h', ((tl ins', ins, xt), tl (tl (tl stk)), loc, C0, M0, pc+1) # frs)}\n                      }\n                 else {(\\<epsilon>, (\\<lfloor>execute.addr_of_sys_xcpt ArrayStore\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs))}))))\"\n| \"exec_instr ins' ins xt ALength P t h stk loc C0 M0 pc frs =\n   {(\\<epsilon>, (let va = hd stk\n         in if va = Null\n            then (\\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)\n            else (None, h, ((tl ins', ins, xt), Intg (word_of_int (int (alen_of_htype (the (typeof_addr h (the_Addr va)))))) # tl stk, loc, C0, M0, pc+1) # frs)))}\"\n| \"exec_instr ins' ins xt (Getfield F C) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   (let v = hd stk\n    in if v = Null then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc) # frs)}\n       else let a = the_Addr v\n            in do {\n               v' \\<leftarrow> heap_read h a (CField C F);\n               {(\\<lbrace>ReadMem a (CField C F) v'\\<rbrace>, None, h, ((tl ins', ins, xt), v' # (tl stk), loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs)}\n            })\"\n| \"exec_instr ins' ins xt (Putfield F C) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n  (let v = hd stk;\n       r = hd (tl stk)\n   in if r = Null then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc) # frs)}\n      else let a = the_Addr r\n           in do {\n                h' \\<leftarrow> heap_write h a (CField C F) v;\n                {(\\<lbrace>WriteMem a (CField C F) v\\<rbrace>, None, h', ((tl ins', ins, xt), tl (tl stk), loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs)}\n              })\"\n| \"exec_instr ins' ins xt (CAS F C) P t h stk loc C0 M0 pc frs =\n  (let v'' = hd stk; v' = hd (tl stk); v = hd (tl (tl stk))\n   in if v = Null then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n      else let a = the_Addr v\n           in do {\n               v''' \\<leftarrow> heap_read h a (CField C F);\n               if v''' = v' then do {\n                 h' \\<leftarrow> heap_write h a (CField C F) v'';\n                 {(\\<lbrace>ReadMem a (CField C F) v', WriteMem a (CField C F) v''\\<rbrace>, None, h', ((tl ins', ins, xt), Bool True # tl (tl (tl stk)), loc, C0, M0, pc + 1) # frs)}\n               } else {(\\<lbrace>ReadMem a (CField C F) v'''\\<rbrace>, None, h, ((tl ins', ins, xt), Bool False # tl (tl (tl stk)), loc, C0, M0, pc + 1) # frs)}\n             })\"\n| \"exec_instr ins' ins xt (Checkcast T) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs =\n   {(\\<epsilon>, let U = the (typeof\\<^bsub>h\\<^esub> (hd stk))\n        in if P \\<turnstile> U \\<le> T then (None, h, ((tl ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs)\n           else (\\<lfloor>execute.addr_of_sys_xcpt ClassCast\\<rfloor>, h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc) # frs))}\"\n| \"exec_instr ins' ins xt (Instanceof T) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs =\n   {(\\<epsilon>, None, h, ((tl ins', ins, xt), Bool (hd stk \\<noteq> Null \\<and> P \\<turnstile> the (typeof\\<^bsub>h\\<^esub> (hd stk)) \\<le> T) # tl stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs)}\"\n| \"exec_instr ins' ins xt (Invoke M n) P t h stk loc C0 M0 pc frs =\n   (let r = stk ! n\n    in (if r = Null then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)}\n        else (let ps = rev (take n stk);\n                  a = the_Addr r;\n                  T = the (typeof_addr h a);\n                  (D,Ts,T,meth)= method P (class_type_of T) M\n              in case meth of\n                   Native \\<Rightarrow> \n                      do {\n                        (ta, va, h') \\<leftarrow> red_external_aggr P t a M ps h;\n                        {(extTA2JVM' P ta, extRet2JVM' ins' ins xt n h' stk loc C0 M0 pc frs va)}\n                      }\n                 | \\<lfloor>(mxs,mxl\\<^sub>0,ins'',xt'')\\<rfloor> \\<Rightarrow>\n                       let f' = ((ins'', ins'', xt''), [],[r]@ps@(replicate mxl\\<^sub>0 undefined_value),D,M,0)\n                       in {(\\<epsilon>, None, h, f' # ((ins', ins, xt), stk, loc, C0, M0, pc) # frs)})))\"\n| \"exec_instr ins' ins xt Return P t h stk\\<^sub>0 loc\\<^sub>0 C\\<^sub>0 M\\<^sub>0 pc frs =\n   {(\\<epsilon>, (if frs=[] then (None, h, []) \n         else \n           let v = hd stk\\<^sub>0; \n               ((ins', ins, xt), stk,loc,C,m,pc) = hd frs;\n                n = length (fst (snd (method P C\\<^sub>0 M\\<^sub>0)))\n           in (None, h, ((tl ins', ins, xt), v#(drop (n+1) stk),loc,C,m,pc+1)#tl frs)))}\"\n| \"exec_instr ins' ins xt Pop P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   {(\\<epsilon>, (None, h, ((tl ins', ins, xt), tl stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))}\"\n| \"exec_instr ins' ins xt Dup P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs =\n   {(\\<epsilon>, (None, h, ((tl ins', ins, xt), hd stk # stk, loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))}\"\n| \"exec_instr ins' ins xt Swap P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   {(\\<epsilon>, (None, h, ((tl ins', ins, xt), hd (tl stk) # hd stk # tl (tl stk), loc, C\\<^sub>0, M\\<^sub>0, pc+1)#frs))}\"\n| \"exec_instr ins' ins xt (BinOpInstr bop) P t h stk loc C0 M0 pc frs =\n   {(\\<epsilon>, \n     case the (execute.binop bop (hd (tl stk)) (hd stk)) of\n       Inl v \\<Rightarrow> (None, h, ((tl ins', ins, xt), v # tl (tl stk), loc, C0, M0, pc + 1) # frs)\n     | Inr a \\<Rightarrow> (Some a, h, ((ins', ins, xt), stk, loc, C0, M0, pc) # frs))}\"\n| \"exec_instr ins' ins xt (IfFalse i) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs =\n   {(\\<epsilon>, (let pc' = if hd stk = Bool False then nat(int pc+i) else pc+1\n         in (None, h, ((drop pc' ins, ins, xt), tl stk, loc, C\\<^sub>0, M\\<^sub>0, pc')#frs)))}\"\n| \"exec_instr ins' ins xt (Goto i) P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs = \n   {let pc' = nat(int pc+i) \n    in (\\<epsilon>, (None, h, ((drop pc' ins, ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc')#frs))}\"\n| \"exec_instr ins' ins xt ThrowExc P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs =\n   {(\\<epsilon>, (let xp' = if hd stk = Null then \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor> else \\<lfloor>the_Addr(hd stk)\\<rfloor>\n         in (xp', h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc)#frs)))}\"\n| \"exec_instr ins' ins xt MEnter P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs =\n   {let v = hd stk\n    in if v = Null\n       then (\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc) # frs)\n       else (\\<lbrace>Lock\\<rightarrow>the_Addr v, SyncLock (the_Addr v)\\<rbrace>, None, h, ((tl ins', ins, xt), tl stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs)}\"\n| \"exec_instr ins' ins xt MExit P t h stk loc C\\<^sub>0 M\\<^sub>0 pc frs =\n  (let v = hd stk\n   in if v = Null\n      then {(\\<epsilon>, \\<lfloor>execute.addr_of_sys_xcpt NullPointer\\<rfloor>, h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc)#frs)}\n      else {(\\<lbrace>Unlock\\<rightarrow>the_Addr v, SyncUnlock (the_Addr v)\\<rbrace>, None, h, ((tl ins', ins, xt), tl stk, loc, C\\<^sub>0, M\\<^sub>0, pc + 1) # frs),\n            (\\<lbrace>UnlockFail\\<rightarrow>the_Addr v\\<rbrace>, \\<lfloor>execute.addr_of_sys_xcpt IllegalMonitorState\\<rfloor>, h, ((ins', ins, xt), stk, loc, C\\<^sub>0, M\\<^sub>0, pc) # frs)})\""], ["", "fun exception_step :: \"'addr jvm_prog \\<Rightarrow> 'addr \\<Rightarrow> 'heap \\<Rightarrow> 'addr frame' \\<Rightarrow> 'addr frame' list \\<Rightarrow> ('addr, 'heap) jvm_state'\"\nwhere\n  \"exception_step P a h ((ins', ins, xt), stk, loc, C, M, pc) frs = \n   (case match_ex_table P (execute.cname_of h a) pc xt of\n          None \\<Rightarrow> (\\<lfloor>a\\<rfloor>, h, frs)\n        | Some (pc', d) \\<Rightarrow> (None, h, ((drop pc' ins, ins, xt), Addr a # drop (size stk - d) stk, loc, C, M, pc') # frs))\""], ["", "fun exec :: \"'addr jvm_prog \\<Rightarrow> 'thread_id \\<Rightarrow> ('addr, 'heap) jvm_state' \\<Rightarrow> ('addr, 'thread_id, 'heap) jvm_ta_state' set\"\n  where\n  \"exec P t (xcp, h, []) = {}\"\n| \"exec P t (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs) = \n   exec_instr ins' ins xt (hd ins') P t h stk loc C M pc frs\"\n| \"exec P t (\\<lfloor>a\\<rfloor>, h, fr # frs) = {(\\<epsilon>, exception_step P a h fr frs)}\""], ["", "definition exec_1 ::\n  \"'addr jvm_prog \\<Rightarrow> 'thread_id \\<Rightarrow> ('addr, 'heap) jvm_state'\n   \\<Rightarrow> (('addr, 'thread_id, 'heap) jvm_thread_action' \\<times> ('addr, 'heap) jvm_state') Predicate.pred\"\nwhere \"exec_1 P t \\<sigma> = pred_of_set (exec P t \\<sigma>)\""], ["", "lemma check_exec_instr_ok:\n  assumes wf: \"wf_prog wf_md P\"\n  and \"execute.check_instr i P h stk loc C M pc (map frame_of_frame' frs)\"\n  and \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\"\n  and \"jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\"\n  and \"tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\"\n  shows \"jvm_ta_state'_ok P tas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "note [simp] = drop_Suc drop_tl split_beta jvm_thread_action'_ok_def has_method_def"], ["proof (state)\nthis:\n  drop (Suc ?n) ?xs = drop ?n (tl ?xs)\n  drop ?n (tl ?xs) = tl (drop ?n ?xs)\n  (case ?prod of (x, xa) \\<Rightarrow> ?f x xa) = ?f (fst ?prod) (snd ?prod)\n  jvm_thread_action'_ok ?P ?ta =\n  (\\<forall>nt\\<in>set \\<lbrace>?ta\\<rbrace>\\<^bsub>t\\<^esub>.\n      \\<forall>t x h.\n         nt = NewThread t x h \\<longrightarrow> jvm_thread_state'_ok ?P x)\n  ?P \\<turnstile> ?C has ?M \\<equiv>\n  \\<exists>Ts T m D. ?P \\<turnstile> ?C sees ?M: Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "note [split] = if_split_asm sum.split"], ["proof (state)\nthis:\n  ?P (if ?Q then ?x else ?y) =\n  (\\<not> (?Q \\<and> \\<not> ?P ?x \\<or> \\<not> ?Q \\<and> \\<not> ?P ?y))\n  ?P (case ?sum of Inl x \\<Rightarrow> ?f1.0 x\n      | Inr x \\<Rightarrow> ?f2.0 x) =\n  ((\\<forall>x1. ?sum = Inl x1 \\<longrightarrow> ?P (?f1.0 x1)) \\<and>\n   (\\<forall>x2. ?sum = Inr x2 \\<longrightarrow> ?P (?f2.0 x2)))\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "from assms"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "proof(cases i)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 24 subgoals...", "case Return"], ["proof (state)\nthis:\n  i = Return\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 24 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Return\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "using assms"], ["proof (prove)\nusing this:\n  i = Return\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "by(cases frs) auto"], ["proof (state)\nthis:\n  jvm_ta_state'_ok P tas\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 23 subgoals...", "case Invoke"], ["proof (state)\nthis:\n  i = Invoke x141_ x142_\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 23 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Invoke x141_ x142_\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "using assms"], ["proof (prove)\nusing this:\n  i = Invoke x141_ x142_\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "apply(cases m)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>i = Invoke x141_ x142_; wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        m = (a, b, c, d)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(auto simp add: extNTA2JVM'_def dest: sees_method_idemp execute.red_external_aggr_new_thread_sub_thread sub_Thread_sees_run[OF wf])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb ta ai bd am ha an bf.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), af, bb)\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread ta (an, am, bf) ha \\<in> set ab;\n        (ai, bd) =\n        snd (snd (the (snd (snd (snd (method P an am))))))\\<rbrakk>\n       \\<Longrightarrow> instrs_of P an am =\n                         instrs_of P (fst (method P an am)) am\n 2. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb ta ai bd am ha an bf.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), af, bb)\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread ta (an, am, bf) ha \\<in> set ab;\n        (ai, bd) =\n        snd (snd (the (snd (snd (snd (method P an am))))))\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P an am)))))) =\n                         snd (snd (the (snd\n   (snd (snd (method P (fst (method P an am)) am))))))", "apply(drule execute.red_external_aggr_new_thread_sub_thread, clarsimp, clarsimp, assumption, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb t ai bd ha an bf.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread t (an, run, bf) ha \\<in> set ab;\n        (ai, bd) = snd (snd (the (snd (snd (snd (method P an run))))));\n        typeof_addr bb bf = \\<lfloor>Class_type an\\<rfloor>;\n        P \\<turnstile> an \\<preceq>\\<^sup>* Thread\\<rbrakk>\n       \\<Longrightarrow> instrs_of P an run =\n                         instrs_of P (fst (method P an run)) run\n 2. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb ta ai bd am ha an bf.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), af, bb)\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread ta (an, am, bf) ha \\<in> set ab;\n        (ai, bd) =\n        snd (snd (the (snd (snd (snd (method P an am))))))\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P an am)))))) =\n                         snd (snd (the (snd\n   (snd (snd (method P (fst (method P an am)) am))))))", "apply(drule sub_Thread_sees_run[OF wf], clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb t bd ha an bf Da ag ah aj.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread t (an, run, bf) ha \\<in> set ab;\n        typeof_addr bb bf = \\<lfloor>Class_type an\\<rfloor>;\n        P \\<turnstile> an sees run: []\\<rightarrow>Void = \\<lfloor>(ag, ah,\n                              aj, bd)\\<rfloor> in Da\\<rbrakk>\n       \\<Longrightarrow> aj = instrs_of P Da run\n 2. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb ta ai bd am ha an bf.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), af, bb)\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread ta (an, am, bf) ha \\<in> set ab;\n        (ai, bd) =\n        snd (snd (the (snd (snd (snd (method P an am))))))\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P an am)))))) =\n                         snd (snd (the (snd\n   (snd (snd (method P (fst (method P an am)) am))))))", "apply(fastforce dest: sees_method_idemp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb ta ai bd am ha an bf.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), af, bb)\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread ta (an, am, bf) ha \\<in> set ab;\n        (ai, bd) =\n        snd (snd (the (snd (snd (snd (method P an am))))))\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P an am)))))) =\n                         snd (snd (the (snd\n   (snd (snd (method P (fst (method P an am)) am))))))", "apply(drule execute.red_external_aggr_new_thread_sub_thread, clarsimp, clarsimp, assumption, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb t ai bd ha an bf.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread t (an, run, bf) ha \\<in> set ab;\n        (ai, bd) = snd (snd (the (snd (snd (snd (method P an run))))));\n        typeof_addr bb bf = \\<lfloor>Class_type an\\<rfloor>;\n        P \\<turnstile> an \\<preceq>\\<^sup>* Thread\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P an run)))))) =\n                         snd (snd (the (snd\n   (snd (snd (method P (fst (method P an run)) run))))))", "apply(drule sub_Thread_sees_run[OF wf], clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba af bb t bd ha an bf Da ag ah aj.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [((instrs_of P C M,\n                        snd (snd (the (snd (snd (snd (method P C M))))))),\n                       [],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM' (drop pc ins) ins xt x142_ bb stk loc C M pc frs af);\n        NewThread t (an, run, bf) ha \\<in> set ab;\n        typeof_addr bb bf = \\<lfloor>Class_type an\\<rfloor>;\n        P \\<turnstile> an sees run: []\\<rightarrow>Void = \\<lfloor>(ag, ah,\n                              aj, bd)\\<rfloor> in Da\\<rbrakk>\n       \\<Longrightarrow> (aj, bd) =\n                         snd (snd (the (snd (snd (snd (method P Da run))))))", "apply(fastforce dest: sees_method_idemp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  jvm_ta_state'_ok P tas\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 22 subgoals...", "case Goto"], ["proof (state)\nthis:\n  i = Goto x20_\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 22 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Goto x20_\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "using assms"], ["proof (prove)\nusing this:\n  i = Goto x20_\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "by(cases \"m\") simp"], ["proof (state)\nthis:\n  jvm_ta_state'_ok P tas\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 21 subgoals...", "case IfFalse"], ["proof (state)\nthis:\n  i = IfFalse x21_\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 21 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = IfFalse x21_\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "using assms"], ["proof (prove)\nusing this:\n  i = IfFalse x21_\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "by(cases \"m\") simp"], ["proof (state)\nthis:\n  jvm_ta_state'_ok P tas\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_ok P tas\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_ok P tas\nA total of 20 subgoals...", "qed(auto)"], ["proof (state)\nthis:\n  jvm_ta_state'_ok P tas\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma check_exec_instr_complete:\n  assumes wf: \"wf_prog wf_md P\"\n  and \"execute.check_instr i P h stk loc C M pc (map frame_of_frame' frs)\"\n  and \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\"\n  and \"jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\"\n  and \"tas \\<in> execute.exec_instr i P t h stk loc C M pc (map frame_of_frame' frs)\"\n  shows \"jvm_ta_state'_of_jvm_ta_state P tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "note [simp] =\n    drop_Suc drop_tl split_beta jvm_thread_action'_ok_def jvm_thread_action'_of_jvm_thread_action_def has_method_def\n    ta_upd_simps map_tl"], ["proof (state)\nthis:\n  drop (Suc ?n) ?xs = drop ?n (tl ?xs)\n  drop ?n (tl ?xs) = tl (drop ?n ?xs)\n  (case ?prod of (x, xa) \\<Rightarrow> ?f x xa) = ?f (fst ?prod) (snd ?prod)\n  jvm_thread_action'_ok ?P ?ta =\n  (\\<forall>nt\\<in>set \\<lbrace>?ta\\<rbrace>\\<^bsub>t\\<^esub>.\n      \\<forall>t x h.\n         nt = NewThread t x h \\<longrightarrow> jvm_thread_state'_ok ?P x)\n  jvm_thread_action'_of_jvm_thread_action ?P =\n  convert_extTA (jvm_thread_state'_of_jvm_thread_state ?P)\n  ?P \\<turnstile> ?C has ?M \\<equiv>\n  \\<exists>Ts T m D. ?P \\<turnstile> ?C sees ?M: Ts\\<rightarrow>T = m in D\n  ta_update_locks (?ls, ?nts, ?js, ?wss, ?obs) ?lta ?l =\n  (?ls(?l $:= ?ls $ ?l @ [?lta]), ?nts, ?js, ?wss, ?obs)\n  ta_update_NewThread (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?nt =\n  (?ls, ?nts @ [?nt], ?js, ?wss, ?is, ?obs)\n  ta_update_Conditional (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?j =\n  (?ls, ?nts, ?js @ [?j], ?wss, ?is, ?obs)\n  ta_update_wait_set (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?ws =\n  (?ls, ?nts, ?js, ?wss @ [?ws], ?is, ?obs)\n  ta_update_interrupt (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?i =\n  (?ls, ?nts, ?js, ?wss, ?is @ [?i], ?obs)\n  ta_update_obs (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?ob =\n  (?ls, ?nts, ?js, ?wss, ?is, ?obs @ [?ob])\n  FWState.thread_action'_to_thread_action (?la, ?l) ?ta =\n  ta_update_locks ?ta ?la ?l\n  FWState.thread_action'_to_thread_action ?nt ?ta =\n  ta_update_NewThread ?ta ?nt\n  FWState.thread_action'_to_thread_action ?ca ?ta =\n  ta_update_Conditional ?ta ?ca\n  FWState.thread_action'_to_thread_action ?wa ?ta =\n  ta_update_wait_set ?ta ?wa\n  FWState.thread_action'_to_thread_action ?ia ?ta =\n  ta_update_interrupt ?ta ?ia\n  FWState.thread_action'_to_thread_action ?ob ?ta = ta_update_obs ?ta ?ob\n  map ?f (tl ?xs) = tl (map ?f ?xs)\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "note [split] = if_split_asm sum.split"], ["proof (state)\nthis:\n  ?P (if ?Q then ?x else ?y) =\n  (\\<not> (?Q \\<and> \\<not> ?P ?x \\<or> \\<not> ?Q \\<and> \\<not> ?P ?y))\n  ?P (case ?sum of Inl x \\<Rightarrow> ?f1.0 x\n      | Inr x \\<Rightarrow> ?f2.0 x) =\n  ((\\<forall>x1. ?sum = Inl x1 \\<longrightarrow> ?P (?f1.0 x1)) \\<and>\n   (\\<forall>x2. ?sum = Inr x2 \\<longrightarrow> ?P (?f2.0 x2)))\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "from assms"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "proof(cases i)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 24 subgoals...", "case Return"], ["proof (state)\nthis:\n  i = Return\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 24 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Return\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "using assms"], ["proof (prove)\nusing this:\n  i = Return\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "by(cases frs) auto"], ["proof (state)\nthis:\n  jvm_ta_state'_of_jvm_ta_state P tas\n  \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 23 subgoals...", "case Goto"], ["proof (state)\nthis:\n  i = Goto x20_\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 23 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Goto x20_\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "using assms"], ["proof (prove)\nusing this:\n  i = Goto x20_\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "by(cases \"m\") simp"], ["proof (state)\nthis:\n  jvm_ta_state'_of_jvm_ta_state P tas\n  \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 22 subgoals...", "case IfFalse"], ["proof (state)\nthis:\n  i = IfFalse x21_\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 22 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = IfFalse x21_\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "using assms"], ["proof (prove)\nusing this:\n  i = IfFalse x21_\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "by(cases \"m\") simp"], ["proof (state)\nthis:\n  jvm_ta_state'_of_jvm_ta_state P tas\n  \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 21 subgoals...", "case Invoke"], ["proof (state)\nthis:\n  i = Invoke x141_ x142_\n\ngoal (21 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 21 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Invoke x141_ x142_\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "using assms"], ["proof (prove)\nusing this:\n  i = Invoke x141_ x142_\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_of_jvm_ta_state P tas\n    \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "apply(cases \"m\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>i = Invoke x141_ x142_; wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        m = (a, b, c, d)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs", "apply(auto intro!: rev_bexI convert_new_thread_action_eqI simp add: extNTA2JVM'_def extNTA2JVM_def dest: execute.red_external_aggr_new_thread_sub_thread sub_Thread_sees_run[OF wf] sees_method_idemp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah ai bc ma.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), va, h')\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, ai, bc) ma \\<in> set ab\\<rbrakk>\n       \\<Longrightarrow> instrs_of P (fst (method P ah ai)) ai =\n                         instrs_of P ah ai\n 2. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah ai bc ma.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), va, h')\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, ai, bc) ma \\<in> set ab\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P (fst (method P ah ai)) ai)))))) =\n                         snd (snd (the (snd (snd (snd (method P ah ai))))))", "apply(drule execute.red_external_aggr_new_thread_sub_thread, clarsimp, clarsimp, assumption, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah bc ma.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, run, bc) ma \\<in> set ab;\n        typeof_addr h' bc = \\<lfloor>Class_type ah\\<rfloor>;\n        P \\<turnstile> ah \\<preceq>\\<^sup>* Thread\\<rbrakk>\n       \\<Longrightarrow> instrs_of P (fst (method P ah run)) run =\n                         instrs_of P ah run\n 2. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah ai bc ma.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), va, h')\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, ai, bc) ma \\<in> set ab\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P (fst (method P ah ai)) ai)))))) =\n                         snd (snd (the (snd (snd (snd (method P ah ai))))))", "apply(drule sub_Thread_sees_run[OF wf], clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah bc ma Da af ag ai bb.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, run, bc) ma \\<in> set ab;\n        typeof_addr h' bc = \\<lfloor>Class_type ah\\<rfloor>;\n        P \\<turnstile> ah sees run: []\\<rightarrow>Void = \\<lfloor>(af, ag,\n                              ai, bb)\\<rfloor> in Da\\<rbrakk>\n       \\<Longrightarrow> instrs_of P Da run = ai\n 2. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah ai bc ma.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), va, h')\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, ai, bc) ma \\<in> set ab\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P (fst (method P ah ai)) ai)))))) =\n                         snd (snd (the (snd (snd (snd (method P ah ai))))))", "apply(fastforce dest: sees_method_idemp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah ai bc ma.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        ((aa, ab, ac, ad, ae, ba), va, h')\n        \\<in> execute.red_external_aggr P t (the_Addr (stk ! x142_)) x141_\n               (rev (take x142_ stk)) h;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, ai, bc) ma \\<in> set ab\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P (fst (method P ah ai)) ai)))))) =\n                         snd (snd (the (snd (snd (snd (method P ah ai))))))", "apply(drule execute.red_external_aggr_new_thread_sub_thread, clarsimp, clarsimp, assumption, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah bc ma.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, run, bc) ma \\<in> set ab;\n        typeof_addr h' bc = \\<lfloor>Class_type ah\\<rfloor>;\n        P \\<turnstile> ah \\<preceq>\\<^sup>* Thread\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P (fst (method P ah run)) run)))))) =\n                         snd (snd (the (snd (snd (snd (method P ah run))))))", "apply(drule sub_Thread_sees_run[OF wf], clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y Tsa Ta x aa ab ac ad ae ba va h' ta ah bc ma Da af ag ai bb.\n       \\<lbrakk>m = (a, b, ins, xt); i = Invoke x141_ x142_;\n        wf_prog wf_md P;\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>(a, b, ins,\n                        xt)\\<rfloor> in D;\n        stk ! x142_ \\<noteq> Null; x142_ < length stk; ins' = drop pc ins;\n        \\<forall>x\\<in>set frs. frame'_ok P x; is_Ref (stk ! x142_);\n        P,h \\<turnstile> rev (take x142_ stk) [:\\<le>] Tsa;\n        x\\<bullet>x141_(Tsa) :: Ta;\n        typeof_addr h (the_Addr (stk ! x142_)) = \\<lfloor>y\\<rfloor>;\n        P \\<turnstile> class_type_of\n                        y sees x141_: Tsa\\<rightarrow>Ta = Native in x;\n        tas =\n        ((aa,\n          map (convert_new_thread_action\n                (\\<lambda>(C, M, a).\n                    (None,\n                     [([],\n                       Addr a #\n                       replicate\n                        (fst (snd (the (snd (snd (snd (method P C M)))))))\n                        undefined_value,\n                       fst (method P C M), M, 0)])))\n           ab,\n          ac, ad, ae, ba),\n         extRet2JVM x142_ h' stk loc C M pc (map snd frs) va);\n        NewThread ta (ah, run, bc) ma \\<in> set ab;\n        typeof_addr h' bc = \\<lfloor>Class_type ah\\<rfloor>;\n        P \\<turnstile> ah sees run: []\\<rightarrow>Void = \\<lfloor>(af, ag,\n                              ai, bb)\\<rfloor> in Da\\<rbrakk>\n       \\<Longrightarrow> snd (snd (the (snd\n   (snd (snd (method P Da run)))))) =\n                         (ai, bb)", "apply(fastforce dest: sees_method_idemp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  jvm_ta_state'_of_jvm_ta_state P tas\n  \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (20 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                      \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                             frs\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                         \\<in> exec_instr ins' ins xt i P t h stk loc C M pc\n                                frs\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs);\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P tas\n                          \\<in> exec_instr ins' ins xt i P t h stk loc C M\n                                 pc frs\nA total of 20 subgoals...", "qed(auto 4 4)"], ["proof (state)\nthis:\n  jvm_ta_state'_of_jvm_ta_state P tas\n  \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma check_exec_instr_refine:\n  assumes wf: \"wf_prog wf_md P\"\n  and \"execute.check_instr i P h stk loc C M pc (map frame_of_frame' frs)\"\n  and \"P \\<turnstile> C sees M:Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\"\n  and \"jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\"\n  and \"tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\"\n  shows \"tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` execute.exec_instr i P t h stk loc C M pc (map frame_of_frame' frs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "note [simp] =\n    drop_Suc drop_tl split_beta jvm_thread_action'_ok_def jvm_thread_action'_of_jvm_thread_action_def has_method_def\n    ta_upd_simps map_tl o_def"], ["proof (state)\nthis:\n  drop (Suc ?n) ?xs = drop ?n (tl ?xs)\n  drop ?n (tl ?xs) = tl (drop ?n ?xs)\n  (case ?prod of (x, xa) \\<Rightarrow> ?f x xa) = ?f (fst ?prod) (snd ?prod)\n  jvm_thread_action'_ok ?P ?ta =\n  (\\<forall>nt\\<in>set \\<lbrace>?ta\\<rbrace>\\<^bsub>t\\<^esub>.\n      \\<forall>t x h.\n         nt = NewThread t x h \\<longrightarrow> jvm_thread_state'_ok ?P x)\n  jvm_thread_action'_of_jvm_thread_action ?P =\n  convert_extTA (jvm_thread_state'_of_jvm_thread_state ?P)\n  ?P \\<turnstile> ?C has ?M \\<equiv>\n  \\<exists>Ts T m D. ?P \\<turnstile> ?C sees ?M: Ts\\<rightarrow>T = m in D\n  ta_update_locks (?ls, ?nts, ?js, ?wss, ?obs) ?lta ?l =\n  (?ls(?l $:= ?ls $ ?l @ [?lta]), ?nts, ?js, ?wss, ?obs)\n  ta_update_NewThread (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?nt =\n  (?ls, ?nts @ [?nt], ?js, ?wss, ?is, ?obs)\n  ta_update_Conditional (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?j =\n  (?ls, ?nts, ?js @ [?j], ?wss, ?is, ?obs)\n  ta_update_wait_set (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?ws =\n  (?ls, ?nts, ?js, ?wss @ [?ws], ?is, ?obs)\n  ta_update_interrupt (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?i =\n  (?ls, ?nts, ?js, ?wss, ?is @ [?i], ?obs)\n  ta_update_obs (?ls, ?nts, ?js, ?wss, ?is, ?obs) ?ob =\n  (?ls, ?nts, ?js, ?wss, ?is, ?obs @ [?ob])\n  FWState.thread_action'_to_thread_action (?la, ?l) ?ta =\n  ta_update_locks ?ta ?la ?l\n  FWState.thread_action'_to_thread_action ?nt ?ta =\n  ta_update_NewThread ?ta ?nt\n  FWState.thread_action'_to_thread_action ?ca ?ta =\n  ta_update_Conditional ?ta ?ca\n  FWState.thread_action'_to_thread_action ?wa ?ta =\n  ta_update_wait_set ?ta ?wa\n  FWState.thread_action'_to_thread_action ?ia ?ta =\n  ta_update_interrupt ?ta ?ia\n  FWState.thread_action'_to_thread_action ?ob ?ta = ta_update_obs ?ta ?ob\n  map ?f (tl ?xs) = tl (map ?f ?xs)\n  ?f \\<circ> ?g = (\\<lambda>x. ?f (?g x))\n\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "note [split] = if_split_asm sum.split"], ["proof (state)\nthis:\n  ?P (if ?Q then ?x else ?y) =\n  (\\<not> (?Q \\<and> \\<not> ?P ?x \\<or> \\<not> ?Q \\<and> \\<not> ?P ?y))\n  ?P (case ?sum of Inl x \\<Rightarrow> ?f1.0 x\n      | Inr x \\<Rightarrow> ?f2.0 x) =\n  ((\\<forall>x1. ?sum = Inl x1 \\<longrightarrow> ?P (?f1.0 x1)) \\<and>\n   (\\<forall>x2. ?sum = Inr x2 \\<longrightarrow> ?P (?f2.0 x2)))\n\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "from assms"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "have \"jvm_ta_state_of_jvm_ta_state' tas \\<in> execute.exec_instr i P t h stk loc C M pc (map frame_of_frame' frs)\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state_of_jvm_ta_state' tas\n    \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)", "proof (cases i)"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                          \\<in> execute.exec_instr i P t h stk loc C M pc\n                                 (map snd frs)\nA total of 24 subgoals...", "case Invoke"], ["proof (state)\nthis:\n  i = Invoke x141_ x142_\n\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                          \\<in> execute.exec_instr i P t h stk loc C M pc\n                                 (map snd frs)\nA total of 24 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Invoke x141_ x142_\n\ngoal (1 subgoal):\n 1. jvm_ta_state_of_jvm_ta_state' tas\n    \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)", "using assms"], ["proof (prove)\nusing this:\n  i = Invoke x141_ x142_\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state_of_jvm_ta_state' tas\n    \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)", "by(fastforce simp add: extNTA2JVM'_def extNTA2JVM_def split_def extRet2JVM'_extRet2JVM[simplified])"], ["proof (state)\nthis:\n  jvm_ta_state_of_jvm_ta_state' tas\n  \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                          \\<in> execute.exec_instr i P t h stk loc C M pc\n                                 (map snd frs)\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                          \\<in> execute.exec_instr i P t h stk loc C M pc\n                                 (map snd frs)\nA total of 23 subgoals...", "case Return"], ["proof (state)\nthis:\n  i = Return\n\ngoal (23 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                          \\<in> execute.exec_instr i P t h stk loc C M pc\n                                 (map snd frs)\nA total of 23 subgoals...", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Return\n\ngoal (1 subgoal):\n 1. jvm_ta_state_of_jvm_ta_state' tas\n    \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)", "using assms"], ["proof (prove)\nusing this:\n  i = Return\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state_of_jvm_ta_state' tas\n    \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)", "by(auto simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  jvm_ta_state_of_jvm_ta_state' tas\n  \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (22 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 2. \\<And>x2.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 3. \\<And>x3.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 4. \\<And>x4.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 5. \\<And>x5.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 6. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 7. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 8. \\<lbrakk>wf_prog wf_md P;\n     execute.check_instr i P h stk loc C M pc (map snd frs);\n     P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n     jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n     tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                      \\<in> execute.exec_instr i P t h stk loc C M pc\n                             (map snd frs)\n 9. \\<And>x91 x92.\n       \\<lbrakk>wf_prog wf_md P;\n        execute.check_instr i P h stk loc C M pc (map snd frs);\n        P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n        jvm_state'_ok P\n         (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n        tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                         \\<in> execute.exec_instr i P t h stk loc C M pc\n                                (map snd frs)\n 10. \\<And>x101 x102.\n        \\<lbrakk>wf_prog wf_md P;\n         execute.check_instr i P h stk loc C M pc (map snd frs);\n         P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D;\n         jvm_state'_ok P\n          (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs);\n         tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> jvm_ta_state_of_jvm_ta_state' tas\n                          \\<in> execute.exec_instr i P t h stk loc C M pc\n                                 (map snd frs)\nA total of 22 subgoals...", "qed (auto cong del: image_cong_simp)"], ["proof (state)\nthis:\n  jvm_ta_state_of_jvm_ta_state' tas\n  \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "also"], ["proof (state)\nthis:\n  jvm_ta_state_of_jvm_ta_state' tas\n  \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "from assms"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs", "have ok': \"jvm_ta_state'_ok P tas\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  execute.check_instr i P h stk loc C M pc (map snd frs)\n  P \\<turnstile> C sees M: Ts\\<rightarrow>T = \\<lfloor>m\\<rfloor> in D\n  jvm_state'_ok P (None, h, ((ins', ins, xt), stk, loc, C, M, pc) # frs)\n  tas \\<in> exec_instr ins' ins xt i P t h stk loc C M pc frs\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "by(rule check_exec_instr_ok)"], ["proof (state)\nthis:\n  jvm_ta_state'_ok P tas\n\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "hence \"jvm_ta_state_of_jvm_ta_state' tas \\<in> execute.exec_instr i P t h stk loc C M pc (map frame_of_frame' frs) \\<longleftrightarrow>\n    tas \\<in> jvm_ta_state'_of_jvm_ta_state P ` execute.exec_instr i P t h stk loc C M pc (map frame_of_frame' frs)\""], ["proof (prove)\nusing this:\n  jvm_ta_state'_ok P tas\n\ngoal (1 subgoal):\n 1. (jvm_ta_state_of_jvm_ta_state' tas\n     \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)) =\n    (tas\n     \\<in> jvm_ta_state'_of_jvm_ta_state P `\n           execute.exec_instr i P t h stk loc C M pc (map snd frs))", "by(rule jvm_ta_state'_ok_inverse)"], ["proof (state)\nthis:\n  (jvm_ta_state_of_jvm_ta_state' tas\n   \\<in> execute.exec_instr i P t h stk loc C M pc (map snd frs)) =\n  (tas\n   \\<in> jvm_ta_state'_of_jvm_ta_state P `\n         execute.exec_instr i P t h stk loc C M pc (map snd frs))\n\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "finally"], ["proof (chain)\npicking this:\n  tas\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec_instr i P t h stk loc C M pc (map snd frs)", "show ?thesis"], ["proof (prove)\nusing this:\n  tas\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal (1 subgoal):\n 1. tas\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec_instr i P t h stk loc C M pc (map snd frs)", "."], ["proof (state)\nthis:\n  tas\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec_instr i P t h stk loc C M pc (map snd frs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exception_step_ok:\n  assumes \"frame'_ok P fr\" \"\\<forall>f\\<in>set frs. frame'_ok P f\"\n  shows \"jvm_state'_ok P (exception_step P a h fr frs)\"\n  and \"exception_step P a h fr frs = jvm_state'_of_jvm_state P (execute.exception_step P a h (snd fr) (map frame_of_frame' frs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_state'_ok P (exception_step P a h fr frs) &&&\n    exception_step P a h fr frs =\n    jvm_state'_of_jvm_state P\n     (execute.exception_step P a h (snd fr) (map snd frs))", "using assms"], ["proof (prove)\nusing this:\n  frame'_ok P fr\n  \\<forall>f\\<in>set frs. frame'_ok P f\n\ngoal (1 subgoal):\n 1. jvm_state'_ok P (exception_step P a h fr frs) &&&\n    exception_step P a h fr frs =\n    jvm_state'_of_jvm_state P\n     (execute.exception_step P a h (snd fr) (map snd frs))", "by(cases fr, case_tac \"the (snd (snd (snd (method P d e))))\", clarsimp)+"], ["", "lemma exec_step_conv:\n  assumes \"wf_prog wf_md P\"\n  and \"jvm_state'_ok P s\"\n  and \"execute.check P (jvm_state_of_jvm_state' s)\"\n  shows \"exec P t s = jvm_ta_state'_of_jvm_ta_state P ` execute.exec P t (jvm_state_of_jvm_state' s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec P t s =\n    jvm_ta_state'_of_jvm_ta_state P `\n    execute.exec P t (jvm_state_of_jvm_state' s)", "using assms"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  jvm_state'_ok P s\n  execute.check P (jvm_state_of_jvm_state' s)\n\ngoal (1 subgoal):\n 1. exec P t s =\n    jvm_ta_state'_of_jvm_ta_state P `\n    execute.exec P t (jvm_state_of_jvm_state' s)", "apply(cases s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)", "apply(rename_tac xcp h frs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s);\n        s = (xcp, h, frs)\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)", "apply(case_tac frs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xcp h frs.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = []\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)\n 2. \\<And>xcp h frs a list.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = a # list\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs a list.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = a # list\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)", "apply(case_tac xcp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xcp h frs a list.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = a # list; xcp = None\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)\n 2. \\<And>xcp h frs a list aa.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = a # list; xcp = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xcp h frs a list aa.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = a # list; xcp = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)\n 2. \\<And>xcp h frs a list.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = a # list; xcp = None\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)", "apply(simp add: jvm_thread_action'_of_jvm_thread_action_def exception_step_ok)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs a list.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); s = (xcp, h, frs);\n        frs = a # list; xcp = None\\<rbrakk>\n       \\<Longrightarrow> exec P t s =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec P t (jvm_state_of_jvm_state' s)", "apply(clarsimp simp add: execute.check_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; P \\<turnstile> ad has ae;\n        method P ad ae = (xa, ai, aj, \\<lfloor>(xb, ak, aa, b)\\<rfloor>);\n        ba < length aa; length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd list)\\<rbrakk>\n       \\<Longrightarrow> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t\n                          h x ac ad ae ba list =\n                         jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n                          (map snd list)", "apply(rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; P \\<turnstile> ad has ae;\n        method P ad ae = (xa, ai, aj, \\<lfloor>(xb, ak, aa, b)\\<rfloor>);\n        ba < length aa; length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd list)\\<rbrakk>\n       \\<Longrightarrow> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t\n                          h x ac ad ae ba list\n                         \\<subseteq> jvm_ta_state'_of_jvm_ta_state P `\n                                     execute.exec_instr (aa ! ba) P t h x ac\nad ae ba (map snd list)\n 2. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; P \\<turnstile> ad has ae;\n        method P ad ae = (xa, ai, aj, \\<lfloor>(xb, ak, aa, b)\\<rfloor>);\n        ba < length aa; length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd list)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n                          (map snd list)\n                         \\<subseteq> exec_instr (drop ba aa) aa b\n(hd (drop ba aa)) P t h x ac ad ae ba list", "apply(clarsimp simp add: has_method_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am\n       bc.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        ((a, ab, af, ag, ah, bb), al, am, bc)\n        \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x ac ad\n               ae ba list;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> ((a, ab, af, ag, ah, bb), al, am, bc)\n                         \\<in> jvm_ta_state'_of_jvm_ta_state P `\n                               execute.exec_instr (aa ! ba) P t h x ac ad ae\n                                ba (map snd list)\n 2. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; P \\<turnstile> ad has ae;\n        method P ad ae = (xa, ai, aj, \\<lfloor>(xb, ak, aa, b)\\<rfloor>);\n        ba < length aa; length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd list)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n                          (map snd list)\n                         \\<subseteq> exec_instr (drop ba aa) aa b\n(hd (drop ba aa)) P t h x ac ad ae ba list", "apply(erule (2) check_exec_instr_refine)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am\n       bc.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        ((a, ab, af, ag, ah, bb), al, am, bc)\n        \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x ac ad\n               ae ba list;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> jvm_state'_ok P\n                          (None, h,\n                           ((?ins'76 h aa b ac ad ae ba list x xa ai aj xb\n                              ak a ab af ag ah bb al am bc,\n                             ?ins76 h aa b ac ad ae ba list x xa ai aj xb ak\n                              a ab af ag ah bb al am bc,\n                             ?xt76 h aa b ac ad ae ba list x xa ai aj xb ak\n                              a ab af ag ah bb al am bc),\n                            x, ac, ad, ae, ba) #\n                           list)\n 2. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am\n       bc.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        ((a, ab, af, ag, ah, bb), al, am, bc)\n        \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x ac ad\n               ae ba list;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> ((a, ab, af, ag, ah, bb), al, am, bc)\n                         \\<in> exec_instr\n                                (?ins'76 h aa b ac ad ae ba list x xa ai aj\n                                  xb ak a ab af ag ah bb al am bc)\n                                (?ins76 h aa b ac ad ae ba list x xa ai aj\n                                  xb ak a ab af ag ah bb al am bc)\n                                (?xt76 h aa b ac ad ae ba list x xa ai aj xb\n                                  ak a ab af ag ah bb al am bc)\n                                (aa ! ba) P t h x ac ad ae ba list\n 3. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; P \\<turnstile> ad has ae;\n        method P ad ae = (xa, ai, aj, \\<lfloor>(xb, ak, aa, b)\\<rfloor>);\n        ba < length aa; length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd list)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n                          (map snd list)\n                         \\<subseteq> exec_instr (drop ba aa) aa b\n(hd (drop ba aa)) P t h x ac ad ae ba list", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am\n       bc.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        ((a, ab, af, ag, ah, bb), al, am, bc)\n        \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x ac ad\n               ae ba list;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> ((a, ab, af, ag, ah, bb), al, am, bc)\n                         \\<in> exec_instr (drop ba aa) aa b (aa ! ba) P t h\n                                x ac ad ae ba list\n 2. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; P \\<turnstile> ad has ae;\n        method P ad ae = (xa, ai, aj, \\<lfloor>(xb, ak, aa, b)\\<rfloor>);\n        ba < length aa; length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd list)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n                          (map snd list)\n                         \\<subseteq> exec_instr (drop ba aa) aa b\n(hd (drop ba aa)) P t h x ac ad ae ba list", "apply(simp add: hd_drop_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; P \\<turnstile> ad has ae;\n        method P ad ae = (xa, ai, aj, \\<lfloor>(xb, ak, aa, b)\\<rfloor>);\n        ba < length aa; length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd list)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_of_jvm_ta_state P `\n                         execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n                          (map snd list)\n                         \\<subseteq> exec_instr (drop ba aa) aa b\n(hd (drop ba aa)) P t h x ac ad ae ba list", "apply(clarsimp simp add: has_method_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am an\n       ao ap aq ar bd be.\n       \\<lbrakk>wf_prog wf_md P;\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        (a, ab, af, ag, ah, bb) =\n        jvm_thread_action'_of_jvm_thread_action P (an, ao, ap, aq, ar, bd);\n        ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n               (map snd list);\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> (jvm_thread_action'_of_jvm_thread_action P\n                           (an, ao, ap, aq, ar, bd),\n                          al, am, map (frame'_of_frame P) be)\n                         \\<in> exec_instr (drop ba aa) aa b\n                                (hd (drop ba aa)) P t h x ac ad ae ba list", "apply(drule (2) check_exec_instr_complete)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am an\n       ao ap aq ar bd be.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        (a, ab, af, ag, ah, bb) =\n        jvm_thread_action'_of_jvm_thread_action P (an, ao, ap, aq, ar, bd);\n        ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n               (map snd list);\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> jvm_state'_ok P\n                          (None, h,\n                           ((?ins'101 h aa b ac ad ae ba list x xa ai aj xb\n                              ak a ab af ag ah bb al am an ao ap aq ar bd\n                              be,\n                             ?ins101 h aa b ac ad ae ba list x xa ai aj xb\n                              ak a ab af ag ah bb al am an ao ap aq ar bd\n                              be,\n                             ?xt101 h aa b ac ad ae ba list x xa ai aj xb ak\n                              a ab af ag ah bb al am an ao ap aq ar bd be),\n                            x, ac, ad, ae, ba) #\n                           list)\n 2. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am an\n       ao ap aq ar bd be.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        (a, ab, af, ag, ah, bb) =\n        jvm_thread_action'_of_jvm_thread_action P (an, ao, ap, aq, ar, bd);\n        ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n               (map snd list);\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> ?tas101 h aa b ac ad ae ba list x xa ai aj xb ak a\n                          ab af ag ah bb al am an ao ap aq ar bd be\n                         \\<in> execute.exec_instr (aa ! ba) P\n                                (?t101 h aa b ac ad ae ba list x xa ai aj xb\n                                  ak a ab af ag ah bb al am an ao ap aq ar\n                                  bd be)\n                                h x ac ad ae ba (map snd list)\n 3. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am an\n       ao ap aq ar bd be.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        (a, ab, af, ag, ah, bb) =\n        jvm_thread_action'_of_jvm_thread_action P (an, ao, ap, aq, ar, bd);\n        ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n               (map snd list);\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa;\n        jvm_ta_state'_of_jvm_ta_state P\n         (?tas101 h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb\n           al am an ao ap aq ar bd be)\n        \\<in> exec_instr\n               (?ins'101 h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag\n                 ah bb al am an ao ap aq ar bd be)\n               (?ins101 h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag\n                 ah bb al am an ao ap aq ar bd be)\n               (?xt101 h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag\n                 ah bb al am an ao ap aq ar bd be)\n               (aa ! ba) P\n               (?t101 h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah\n                 bb al am an ao ap aq ar bd be)\n               h x ac ad ae ba list\\<rbrakk>\n       \\<Longrightarrow> (jvm_thread_action'_of_jvm_thread_action P\n                           (an, ao, ap, aq, ar, bd),\n                          al, am, map (frame'_of_frame P) be)\n                         \\<in> exec_instr (drop ba aa) aa b\n                                (hd (drop ba aa)) P t h x ac ad ae ba list", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am an\n       ao ap aq ar bd be.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        (a, ab, af, ag, ah, bb) =\n        jvm_thread_action'_of_jvm_thread_action P (an, ao, ap, aq, ar, bd);\n        ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n               (map snd list);\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa\\<rbrakk>\n       \\<Longrightarrow> ?tas101 h aa b ac ad ae ba list x xa ai aj xb ak a\n                          ab af ag ah bb al am an ao ap aq ar bd be\n                         \\<in> execute.exec_instr (aa ! ba) P\n                                (?t101 h aa b ac ad ae ba list x xa ai aj xb\n                                  ak a ab af ag ah bb al am an ao ap aq ar\n                                  bd be)\n                                h x ac ad ae ba (map snd list)\n 2. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am an\n       ao ap aq ar bd be.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        (a, ab, af, ag, ah, bb) =\n        jvm_thread_action'_of_jvm_thread_action P (an, ao, ap, aq, ar, bd);\n        ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n               (map snd list);\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa;\n        jvm_ta_state'_of_jvm_ta_state P\n         (?tas101 h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb\n           al am an ao ap aq ar bd be)\n        \\<in> exec_instr (drop ba aa) aa b (aa ! ba) P\n               (?t101 h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah\n                 bb al am an ao ap aq ar bd be)\n               h x ac ad ae ba list\\<rbrakk>\n       \\<Longrightarrow> (jvm_thread_action'_of_jvm_thread_action P\n                           (an, ao, ap, aq, ar, bd),\n                          al, am, map (frame'_of_frame P) be)\n                         \\<in> exec_instr (drop ba aa) aa b\n                                (hd (drop ba aa)) P t h x ac ad ae ba list", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h aa b ac ad ae ba list x xa ai aj xb ak a ab af ag ah bb al am an\n       ao ap aq ar bd be.\n       \\<lbrakk>s =\n                (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # list);\n        \\<forall>x\\<in>set list. frame'_ok P x; ba < length aa;\n        length x \\<le> xb;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba (map snd list);\n        (a, ab, af, ag, ah, bb) =\n        jvm_thread_action'_of_jvm_thread_action P (an, ao, ap, aq, ar, bd);\n        ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> execute.exec_instr (aa ! ba) P t h x ac ad ae ba\n               (map snd list);\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xb, ak, aa,\n                           b)\\<rfloor> in xa;\n        jvm_ta_state'_of_jvm_ta_state P\n         ((an, ao, ap, aq, ar, bd), al, am, be)\n        \\<in> exec_instr (drop ba aa) aa b (aa ! ba) P t h x ac ad ae ba\n               list\\<rbrakk>\n       \\<Longrightarrow> (jvm_thread_action'_of_jvm_thread_action P\n                           (an, ao, ap, aq, ar, bd),\n                          al, am, map (frame'_of_frame P) be)\n                         \\<in> exec_instr (drop ba aa) aa b\n                                (hd (drop ba aa)) P t h x ac ad ae ba list", "apply(simp add: hd_drop_conv_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec_step_ok:\n  assumes \"wf_prog wf_md P\"\n  and \"jvm_state'_ok P s\"\n  and \"execute.check P (jvm_state_of_jvm_state' s)\"\n  and \"tas \\<in> exec P t s\"\n  shows \"jvm_ta_state'_ok P tas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "using assms"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  jvm_state'_ok P s\n  execute.check P (jvm_state_of_jvm_state' s)\n  tas \\<in> exec P t s\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "apply(cases s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(rename_tac xcp h frs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(case_tac frs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xcp h frs.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = []\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>xcp h frs a list.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = a # list\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs a list.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = a # list\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(rename_tac fr frs')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs fr frs'.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs'\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(case_tac xcp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xcp h frs fr frs'.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs'; xcp = None\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>xcp h frs fr frs' a.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs';\n        xcp = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(clarsimp simp add: execute.check_def has_method_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h aa b ac ad ae ba frs' x xa ai aj xc ak.\n       \\<lbrakk>wf_prog wf_md P;\n        tas\n        \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x ac ad\n               ae ba frs';\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # frs');\n        \\<forall>x\\<in>set frs'. frame'_ok P x;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xc, ak, aa,\n                           b)\\<rfloor> in xa;\n        ba < length aa; length x \\<le> xc;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd frs')\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas\n 2. \\<And>xcp h frs fr frs' a.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs';\n        xcp = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(erule (2) check_exec_instr_ok)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>h aa b ac ad ae ba frs' x xa ai aj xc ak.\n       \\<lbrakk>tas\n                \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x\n                       ac ad ae ba frs';\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # frs');\n        \\<forall>x\\<in>set frs'. frame'_ok P x;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xc, ak, aa,\n                           b)\\<rfloor> in xa;\n        ba < length aa; length x \\<le> xc;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd frs')\\<rbrakk>\n       \\<Longrightarrow> jvm_state'_ok P\n                          (None, h,\n                           ((?ins'82 h aa b ac ad ae ba frs' x xa ai aj xc\n                              ak,\n                             ?ins82 h aa b ac ad ae ba frs' x xa ai aj xc\n                              ak,\n                             ?xt82 h aa b ac ad ae ba frs' x xa ai aj xc\n                              ak),\n                            x, ac, ad, ae, ba) #\n                           frs')\n 2. \\<And>h aa b ac ad ae ba frs' x xa ai aj xc ak.\n       \\<lbrakk>tas\n                \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x\n                       ac ad ae ba frs';\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # frs');\n        \\<forall>x\\<in>set frs'. frame'_ok P x;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xc, ak, aa,\n                           b)\\<rfloor> in xa;\n        ba < length aa; length x \\<le> xc;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd frs')\\<rbrakk>\n       \\<Longrightarrow> tas\n                         \\<in> exec_instr\n                                (?ins'82 h aa b ac ad ae ba frs' x xa ai aj\n                                  xc ak)\n                                (?ins82 h aa b ac ad ae ba frs' x xa ai aj\n                                  xc ak)\n                                (?xt82 h aa b ac ad ae ba frs' x xa ai aj xc\n                                  ak)\n                                (aa ! ba) P\n                                (?t82 h aa b ac ad ae ba frs' x xa ai aj xc\n                                  ak)\n                                h x ac ad ae ba frs'\n 3. \\<And>xcp h frs fr frs' a.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs';\n        xcp = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h aa b ac ad ae ba frs' x xa ai aj xc ak.\n       \\<lbrakk>tas\n                \\<in> exec_instr (drop ba aa) aa b (hd (drop ba aa)) P t h x\n                       ac ad ae ba frs';\n        s = (None, h, ((drop ba aa, aa, b), x, ac, ad, ae, ba) # frs');\n        \\<forall>x\\<in>set frs'. frame'_ok P x;\n        P \\<turnstile> ad sees ae: ai\\<rightarrow>aj = \\<lfloor>(xc, ak, aa,\n                           b)\\<rfloor> in xa;\n        ba < length aa; length x \\<le> xc;\n        execute.check_instr (aa ! ba) P h x ac ad ae ba\n         (map snd frs')\\<rbrakk>\n       \\<Longrightarrow> tas\n                         \\<in> exec_instr (drop ba aa) aa b (aa ! ba) P\n                                (?t82 h aa b ac ad ae ba frs' x xa ai aj xc\n                                  ak)\n                                h x ac ad ae ba frs'\n 2. \\<And>xcp h frs fr frs' a.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs';\n        xcp = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(simp add: hd_drop_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs fr frs' a.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs';\n        xcp = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(case_tac fr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs fr frs' a aa b c d e f.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs'; xcp = \\<lfloor>a\\<rfloor>;\n        fr = (aa, b, c, d, e, f)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(rename_tac cache stk loc C M pc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs fr frs' a cache stk loc C M pc.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs'; xcp = \\<lfloor>a\\<rfloor>;\n        fr = (cache, stk, loc, C, M, pc)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply(case_tac \"the (snd (snd (snd (method P C M))))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h frs fr frs' a cache stk loc C M pc aa b c d.\n       \\<lbrakk>wf_prog wf_md P; jvm_state'_ok P s;\n        execute.check P (jvm_state_of_jvm_state' s); tas \\<in> exec P t s;\n        s = (xcp, h, frs); frs = fr # frs'; xcp = \\<lfloor>a\\<rfloor>;\n        fr = (cache, stk, loc, C, M, pc);\n        the (snd (snd (snd (method P C M)))) = (aa, b, c, d)\\<rbrakk>\n       \\<Longrightarrow> jvm_ta_state'_ok P tas", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "locale JVM_heap_execute_conf_read = JVM_heap_execute +\n  execute: JVM_conf_read\n    addr2thread_id thread_id2addr \n    spurious_wakeups\n    empty_heap allocate typeof_addr \n    \"\\<lambda>h a ad v. v \\<in> heap_read h a ad\" \"\\<lambda>h a ad v h'. h' \\<in> heap_write h a ad v\"\n  +\n  constrains addr2thread_id :: \"('addr :: addr) \\<Rightarrow> 'thread_id\" \n  and thread_id2addr :: \"'thread_id \\<Rightarrow> 'addr\" \n  and spurious_wakeups :: bool\n  and empty_heap :: \"'heap\" \n  and allocate :: \"'heap \\<Rightarrow> htype \\<Rightarrow> ('heap \\<times> 'addr) set\" \n  and typeof_addr :: \"'heap \\<Rightarrow> 'addr \\<Rightarrow> htype option\" \n  and heap_read :: \"'heap \\<Rightarrow> 'addr \\<Rightarrow> addr_loc \\<Rightarrow> 'addr val set\" \n  and heap_write :: \"'heap \\<Rightarrow> 'addr \\<Rightarrow> addr_loc \\<Rightarrow> 'addr val \\<Rightarrow> 'heap set\"\n  and hconf :: \"'heap \\<Rightarrow> bool\"\n  and P :: \"'addr jvm_prog\"\nbegin"], ["", "lemma exec_correct_state:\n  assumes wt: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\"\n  and correct: \"execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s)\"\n  and ok: \"jvm_state'_ok P s\"\n  shows \"exec P t s = jvm_ta_state'_of_jvm_ta_state P ` execute.exec P t (jvm_state_of_jvm_state' s)\"\n  (is ?thesis1)\n  and \"(ta, s') \\<in> exec P t s \\<Longrightarrow> execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\" (is \"_ \\<Longrightarrow> ?thesis2\")\n  and \"tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec P t s =\n    jvm_ta_state'_of_jvm_ta_state P `\n    execute.exec P t (jvm_state_of_jvm_state' s) &&&\n    ((ta, s') \\<in> exec P t s \\<Longrightarrow>\n     execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')) &&&\n    (tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. exec P t s =\n    jvm_ta_state'_of_jvm_ta_state P `\n    execute.exec P t (jvm_state_of_jvm_state' s)\n 2. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n 3. tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas", "from wt"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P", "obtain wf_md where wf: \"wf_prog wf_md P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. (\\<And>wf_md.\n        wf_prog wf_md P \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: wt_jvm_progD)"], ["proof (state)\nthis:\n  wf_prog wf_md P\n\ngoal (3 subgoals):\n 1. exec P t s =\n    jvm_ta_state'_of_jvm_ta_state P `\n    execute.exec P t (jvm_state_of_jvm_state' s)\n 2. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n 3. tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas", "from execute.no_type_error[OF wt correct]"], ["proof (chain)\npicking this:\n  execute.exec_d P t (jvm_state_of_jvm_state' s) \\<noteq> TypeError", "have check: \"execute.check P (jvm_state_of_jvm_state' s)\""], ["proof (prove)\nusing this:\n  execute.exec_d P t (jvm_state_of_jvm_state' s) \\<noteq> TypeError\n\ngoal (1 subgoal):\n 1. execute.check P (jvm_state_of_jvm_state' s)", "by(simp add: execute.exec_d_def split: if_split_asm)"], ["proof (state)\nthis:\n  execute.check P (jvm_state_of_jvm_state' s)\n\ngoal (3 subgoals):\n 1. exec P t s =\n    jvm_ta_state'_of_jvm_ta_state P `\n    execute.exec P t (jvm_state_of_jvm_state' s)\n 2. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n 3. tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas", "with wf ok"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  jvm_state'_ok P s\n  execute.check P (jvm_state_of_jvm_state' s)", "show eq: ?thesis1"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  jvm_state'_ok P s\n  execute.check P (jvm_state_of_jvm_state' s)\n\ngoal (1 subgoal):\n 1. exec P t s =\n    jvm_ta_state'_of_jvm_ta_state P `\n    execute.exec P t (jvm_state_of_jvm_state' s)", "by(rule exec_step_conv)"], ["proof (state)\nthis:\n  exec P t s =\n  jvm_ta_state'_of_jvm_ta_state P `\n  execute.exec P t (jvm_state_of_jvm_state' s)\n\ngoal (2 subgoals):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n 2. tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas", "{"], ["proof (state)\nthis:\n  exec P t s =\n  jvm_ta_state'_of_jvm_ta_state P `\n  execute.exec P t (jvm_state_of_jvm_state' s)\n\ngoal (2 subgoals):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n 2. tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas", "fix tas"], ["proof (state)\ngoal (2 subgoals):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n 2. tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas", "assume \"tas \\<in> exec P t s\""], ["proof (state)\nthis:\n  tas \\<in> exec P t s\n\ngoal (2 subgoals):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n 2. tas \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P tas", "with wf ok check"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  jvm_state'_ok P s\n  execute.check P (jvm_state_of_jvm_state' s)\n  tas \\<in> exec P t s", "show \"jvm_ta_state'_ok P tas\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  jvm_state'_ok P s\n  execute.check P (jvm_state_of_jvm_state' s)\n  tas \\<in> exec P t s\n\ngoal (1 subgoal):\n 1. jvm_ta_state'_ok P tas", "by(rule exec_step_ok)"], ["proof (state)\nthis:\n  jvm_ta_state'_ok P tas\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "}"], ["proof (state)\nthis:\n  ?tasa5 \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P ?tasa5\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "note this[of \"(ta, s')\"]"], ["proof (state)\nthis:\n  (ta, s') \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P (ta, s')\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "moreover"], ["proof (state)\nthis:\n  (ta, s') \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P (ta, s')\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "assume \"(ta, s') \\<in> exec P t s\""], ["proof (state)\nthis:\n  (ta, s') \\<in> exec P t s\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "moreover"], ["proof (state)\nthis:\n  (ta, s') \\<in> exec P t s\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "hence \"(ta, s') \\<in> jvm_ta_state'_of_jvm_ta_state P ` execute.exec P t (jvm_state_of_jvm_state' s)\""], ["proof (prove)\nusing this:\n  (ta, s') \\<in> exec P t s\n\ngoal (1 subgoal):\n 1. (ta, s')\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec P t (jvm_state_of_jvm_state' s)", "unfolding eq"], ["proof (prove)\nusing this:\n  (ta, s')\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec P t (jvm_state_of_jvm_state' s)\n\ngoal (1 subgoal):\n 1. (ta, s')\n    \\<in> jvm_ta_state'_of_jvm_ta_state P `\n          execute.exec P t (jvm_state_of_jvm_state' s)", "by simp"], ["proof (state)\nthis:\n  (ta, s')\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec P t (jvm_state_of_jvm_state' s)\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "ultimately"], ["proof (chain)\npicking this:\n  (ta, s') \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P (ta, s')\n  (ta, s') \\<in> exec P t s\n  (ta, s')\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec P t (jvm_state_of_jvm_state' s)", "have \"jvm_ta_state_of_jvm_ta_state' (ta, s') \\<in> execute.exec P t (jvm_state_of_jvm_state' s)\""], ["proof (prove)\nusing this:\n  (ta, s') \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P (ta, s')\n  (ta, s') \\<in> exec P t s\n  (ta, s')\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec P t (jvm_state_of_jvm_state' s)\n\ngoal (1 subgoal):\n 1. jvm_ta_state_of_jvm_ta_state' (ta, s')\n    \\<in> execute.exec P t (jvm_state_of_jvm_state' s)", "using jvm_ta_state'_ok_inverse[of P \"(ta, s')\"]"], ["proof (prove)\nusing this:\n  (ta, s') \\<in> exec P t s \\<Longrightarrow> jvm_ta_state'_ok P (ta, s')\n  (ta, s') \\<in> exec P t s\n  (ta, s')\n  \\<in> jvm_ta_state'_of_jvm_ta_state P `\n        execute.exec P t (jvm_state_of_jvm_state' s)\n  jvm_ta_state'_ok P (ta, s') \\<Longrightarrow>\n  (jvm_ta_state_of_jvm_ta_state' (ta, s') \\<in> ?A) =\n  ((ta, s') \\<in> jvm_ta_state'_of_jvm_ta_state P ` ?A)\n\ngoal (1 subgoal):\n 1. jvm_ta_state_of_jvm_ta_state' (ta, s')\n    \\<in> execute.exec P t (jvm_state_of_jvm_state' s)", "by blast"], ["proof (state)\nthis:\n  jvm_ta_state_of_jvm_ta_state' (ta, s')\n  \\<in> execute.exec P t (jvm_state_of_jvm_state' s)\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "hence \"execute.exec_1 P t (jvm_state_of_jvm_state' s) (jvm_thread_action_of_jvm_thread_action' ta) (jvm_state_of_jvm_state' s')\""], ["proof (prove)\nusing this:\n  jvm_ta_state_of_jvm_ta_state' (ta, s')\n  \\<in> execute.exec P t (jvm_state_of_jvm_state' s)\n\ngoal (1 subgoal):\n 1. execute.exec_1 P t (jvm_state_of_jvm_state' s)\n     (jvm_thread_action_of_jvm_thread_action' ta)\n     (jvm_state_of_jvm_state' s')", "by(simp add: execute.exec_1_iff)"], ["proof (state)\nthis:\n  execute.exec_1 P t (jvm_state_of_jvm_state' s)\n   (jvm_thread_action_of_jvm_thread_action' ta) (jvm_state_of_jvm_state' s')\n\ngoal (1 subgoal):\n 1. (ta, s') \\<in> exec P t s \\<Longrightarrow>\n    execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "with wt correct"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s)\n  execute.exec_1 P t (jvm_state_of_jvm_state' s)\n   (jvm_thread_action_of_jvm_thread_action' ta) (jvm_state_of_jvm_state' s')", "show ?thesis2"], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s)\n  execute.exec_1 P t (jvm_state_of_jvm_state' s)\n   (jvm_thread_action_of_jvm_thread_action' ta) (jvm_state_of_jvm_state' s')\n\ngoal (1 subgoal):\n 1. execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')", "by(rule execute.BV_correct_1)"], ["proof (state)\nthis:\n  execute.correct_state \\<Phi> t (jvm_state_of_jvm_state' s')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemmas [code] = \n  JVM_heap_execute.exec_instr.simps\n  JVM_heap_execute.exception_step.simps\n  JVM_heap_execute.exec.simps\n  JVM_heap_execute.exec_1_def"], ["", "end"]]}