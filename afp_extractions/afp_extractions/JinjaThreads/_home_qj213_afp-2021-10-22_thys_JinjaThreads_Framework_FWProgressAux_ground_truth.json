{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWProgressAux.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma collect_waits_unfold:\n  \"collect_waits ta = {l. Lock \\<in> set (\\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> $ l)} <+> {t. Join t \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>} <+> collect_interrupts \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\"", "lemma must_sync_def2:\n  \"t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong> \\<longleftrightarrow> (\\<exists>ta x' m' s. t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> actions_ok s t ta)\"", "lemma must_syncI:\n  \"\\<exists>ta x' m' s. t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> actions_ok s t ta \\<Longrightarrow> t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong>\"", "lemma must_syncE:\n  \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong>; \\<And>ta x' m' s. \\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; actions_ok s t ta; m = shr s \\<rbrakk> \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\"", "lemma can_syncI:\n  \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n     LT = collect_waits ta \\<rbrakk>\n  \\<Longrightarrow> t \\<turnstile> \\<langle>x, m\\<rangle> LT \\<wrong>\"", "lemma can_syncE:\n  assumes \"t \\<turnstile> \\<langle>x, m\\<rangle> LT \\<wrong>\"\n  obtains ta x' m'\n  where \"t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\"\n  and \"LT = collect_waits ta\"", "lemma active_threads_iff:\n  \"active_threads s = \n  {t. \\<exists>x ln. thr s t = Some (x, ln) \\<and>\n             (if ln = no_wait_locks \n              then \\<exists>ta x' m'. t \\<turnstile> (x, shr s) -ta\\<rightarrow> (x', m') \\<and> actions_ok s t ta\n              else \\<not> waiting (wset s t) \\<and> may_acquire_all (locks s) t ln)}\"", "lemma active_thread_ex_red:\n  assumes \"t \\<in> active_threads s\"\n  shows \"\\<exists>ta s'. s -t\\<triangleright>ta\\<rightarrow> s'\"", "lemmas not_final_thread_cases = not_final_thread.cases [consumes 1, case_names final wait_locks wait_set]", "lemma not_final_thread_cases2 [consumes 2, case_names final wait_locks wait_set]:\n  \"\\<And>ln. \\<lbrakk> not_final_thread s t; thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n     \\<not> final x \\<Longrightarrow> thesis; ln \\<noteq> no_wait_locks \\<Longrightarrow> thesis; \\<And>w. wset s t = \\<lfloor>w\\<rfloor> \\<Longrightarrow> thesis \\<rbrakk>\n  \\<Longrightarrow> thesis\"", "lemma not_final_thread_iff:\n  \"not_final_thread s t \\<longleftrightarrow> (\\<exists>x ln. thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and> (\\<not> final x \\<or> ln \\<noteq> no_wait_locks \\<or> (\\<exists>w. wset s t = \\<lfloor>w\\<rfloor>)))\"", "lemma not_final_thread_conv:\n  \"not_final_thread s t \\<longleftrightarrow> thr s t \\<noteq> None \\<and> \\<not> final_thread s t\"", "lemma not_final_thread_existsE:\n  assumes \"not_final_thread s t\"\n  and \"\\<And>x ln. thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow> thesis\"\n  shows thesis", "lemma not_final_thread_final_thread_conv:\n  \"thr s t \\<noteq> None \\<Longrightarrow> \\<not> final_thread s t \\<longleftrightarrow> not_final_thread s t\"", "lemma may_join_cond_action_oks:\n  assumes \"\\<And>t'. Join t' \\<in> set cas \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\"\n  shows \"cond_action_oks s t cas\"", "lemma red_not_final_thread:\n  \"s -t\\<triangleright>ta\\<rightarrow> s' \\<Longrightarrow> not_final_thread s t\"", "lemma redT_preserves_final_thread:\n  \"\\<lbrakk> s -t'\\<triangleright>ta\\<rightarrow> s'; final_thread s t \\<rbrakk> \\<Longrightarrow> final_thread s' t\"", "lemma wset_Suspend_okI:\n  \"\\<lbrakk> s \\<in> I;\n     \\<And>t w. wset s t = \\<lfloor>w\\<rfloor> \\<Longrightarrow> \\<exists>s0\\<in>I. \\<exists>s1\\<in>I. \\<exists>ttas x x0 ta w' ln' ln''. s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and> s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and> \n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and> t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and> Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and> thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and> thr s t = \\<lfloor>(x, ln'')\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> s \\<in> wset_Suspend_ok I\"", "lemma wset_Suspend_okD1:\n  \"s \\<in> wset_Suspend_ok I \\<Longrightarrow> s \\<in> I\"", "lemma wset_Suspend_okD2:\n  \"\\<lbrakk> s \\<in> wset_Suspend_ok I; wset s t = \\<lfloor>w\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s0\\<in>I. \\<exists>s1\\<in>I. \\<exists>ttas x x0 ta w' ln' ln''. s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and> s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and> \n            thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and> t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and> Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n            actions_ok s0 t ta \\<and> thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and> thr s t = \\<lfloor>(x, ln'')\\<rfloor>\"", "lemma wset_Suspend_ok_imp_wset_thread_ok:\n  \"s \\<in> wset_Suspend_ok I \\<Longrightarrow> wset_thread_ok (wset s) (thr s)\"", "lemma invariant3p_wset_Suspend_ok:\n  assumes I: \"invariant3p redT I\"\n  shows \"invariant3p redT (wset_Suspend_ok I)\""], "translations": [["", "lemma collect_waits_unfold:\n  \"collect_waits ta = {l. Lock \\<in> set (\\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> $ l)} <+> {t. Join t \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>} <+> collect_interrupts \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. collect_waits ta =\n    {l. Lock \\<in> set (\\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> $ l)} <+>\n    {t. Join t \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>} <+>\n    collect_interrupts \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "by(simp add: collect_locks_def)"], ["", "context multithreaded_base begin"], ["", "definition must_sync :: \"'t \\<Rightarrow> 'x \\<Rightarrow> 'm \\<Rightarrow> bool\" (\"_ \\<turnstile> \\<langle>_,/ _\\<rangle>/ \\<wrong>\" [50, 0,0] 81) where\n  \"t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong> \\<longleftrightarrow> (\\<exists>ta x' m' s. t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> shr s = m \\<and> actions_ok s t ta)\""], ["", "lemma must_sync_def2:\n  \"t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong> \\<longleftrightarrow> (\\<exists>ta x' m' s. t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> actions_ok s t ta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong> =\n    (\\<exists>ta x' m' s.\n        t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n        actions_ok s t ta)", "by(fastforce simp add: must_sync_def intro: cond_action_oks_shr_change)"], ["", "lemma must_syncI:\n  \"\\<exists>ta x' m' s. t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> actions_ok s t ta \\<Longrightarrow> t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta x' m' s.\n       t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n       actions_ok s t ta \\<Longrightarrow>\n    t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong>", "by(fastforce simp add: must_sync_def2)"], ["", "lemma must_syncE:\n  \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong>; \\<And>ta x' m' s. \\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>; actions_ok s t ta; m = shr s \\<rbrakk> \\<Longrightarrow> thesis \\<rbrakk> \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> \\<langle>x, m\\<rangle> \\<wrong>;\n     \\<And>ta x' m' s.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n         actions_ok s t ta; m = shr s\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by(fastforce simp only: must_sync_def)"], ["", "definition can_sync :: \"'t \\<Rightarrow> 'x \\<Rightarrow> 'm \\<Rightarrow> ('l + 't + 't) set \\<Rightarrow> bool\" (\"_ \\<turnstile> \\<langle>_,/ _\\<rangle>/ _/ \\<wrong>\" [50,0,0,0] 81) where\n  \"t \\<turnstile> \\<langle>x, m\\<rangle> LT \\<wrong> \\<equiv> \\<exists>ta x' m'. t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and> (LT = collect_waits ta)\""], ["", "lemma can_syncI:\n  \"\\<lbrakk> t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n     LT = collect_waits ta \\<rbrakk>\n  \\<Longrightarrow> t \\<turnstile> \\<langle>x, m\\<rangle> LT \\<wrong>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n     LT = collect_waits ta\\<rbrakk>\n    \\<Longrightarrow> t \\<turnstile> \\<langle>x, m\\<rangle> LT \\<wrong>", "by(cases ta)(fastforce simp add: can_sync_def)"], ["", "lemma can_syncE:\n  assumes \"t \\<turnstile> \\<langle>x, m\\<rangle> LT \\<wrong>\"\n  obtains ta x' m'\n  where \"t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>\"\n  and \"LT = collect_waits ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ta x' m'.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n         LT = collect_waits ta\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  t \\<turnstile> \\<langle>x, m\\<rangle> LT \\<wrong>\n\ngoal (1 subgoal):\n 1. (\\<And>ta x' m'.\n        \\<lbrakk>t \\<turnstile> \\<langle>x, m\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n         LT = collect_waits ta\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp add: can_sync_def)"], ["", "inductive_set active_threads :: \"('l,'t,'x,'m,'w) state \\<Rightarrow> 't set\"\nfor s :: \"('l,'t,'x,'m,'w) state\"\nwhere\n  normal:\n  \"\\<And>ln. \\<lbrakk> thr s t = Some (x, ln);\n     ln = no_wait_locks;\n     t \\<turnstile> (x, shr s) -ta\\<rightarrow> x'm';\n     actions_ok s t ta \\<rbrakk>\n  \\<Longrightarrow> t \\<in> active_threads s\"\n| acquire: \n  \"\\<And>ln. \\<lbrakk> thr s t = Some (x, ln);\n     ln \\<noteq> no_wait_locks;\n     \\<not> waiting (wset s t);\n     may_acquire_all (locks s) t ln \\<rbrakk>\n  \\<Longrightarrow> t \\<in> active_threads s\""], ["", "lemma active_threads_iff:\n  \"active_threads s = \n  {t. \\<exists>x ln. thr s t = Some (x, ln) \\<and>\n             (if ln = no_wait_locks \n              then \\<exists>ta x' m'. t \\<turnstile> (x, shr s) -ta\\<rightarrow> (x', m') \\<and> actions_ok s t ta\n              else \\<not> waiting (wset s t) \\<and> may_acquire_all (locks s) t ln)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. active_threads s =\n    {t. \\<exists>x ln.\n           thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and>\n           (if ln = no_wait_locks\n            then \\<exists>ta x' m'.\n                    t \\<turnstile> \\<langle>x, shr\n          s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle> \\<and>\n                    actions_ok s t ta\n            else \\<not> waiting (wset s t) \\<and>\n                 may_acquire_all (locks s) t ln)}", "apply(auto elim!: active_threads.cases intro: active_threads.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t xa a aa ab ac ad b ae ba.\n       \\<lbrakk>thr s t = \\<lfloor>(xa, no_wait_locks)\\<rfloor>;\n        t \\<turnstile> \\<langle>xa, shr s\\<rangle> -(a, aa, ab, ac, ad,\n               b)\\<rightarrow> \\<langle>ae, ba\\<rangle>;\n        lock_ok_las (locks s) t a; thread_oks (thr s) aa;\n        cond_action_oks s t ab; wset_actions_ok (wset s) t ac;\n        interrupt_actions_ok (interrupts s) ad\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a aa ab ac ad.\n                            (\\<exists>b x' m'.\n                                t \\<turnstile> \\<langle>xa, shr\n                       s\\<rangle> -(a, aa, ab, ac, ad,\n                                    b)\\<rightarrow> \\<langle>x', m'\\<rangle>) \\<and>\n                            lock_ok_las (locks s) t a \\<and>\n                            thread_oks (thr s) aa \\<and>\n                            cond_action_oks s t ab \\<and>\n                            wset_actions_ok (wset s) t ac \\<and>\n                            interrupt_actions_ok (interrupts s) ad", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma active_thread_ex_red:\n  assumes \"t \\<in> active_threads s\"\n  shows \"\\<exists>ta s'. s -t\\<triangleright>ta\\<rightarrow> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta. Ex (redT_syntax1 s t ta)", "using assms"], ["proof (prove)\nusing this:\n  t \\<in> active_threads s\n\ngoal (1 subgoal):\n 1. \\<exists>ta. Ex (redT_syntax1 s t ta)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x ta x'm' ln.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>; ln = no_wait_locks;\n        t \\<turnstile> (x, shr s) -ta\\<rightarrow> x'm';\n        actions_ok s t ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta. Ex (redT_syntax1 s t ta)\n 2. \\<And>x ln.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        ln \\<noteq> no_wait_locks; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta. Ex (redT_syntax1 s t ta)", "case (normal x ta x'm' ln)"], ["proof (state)\nthis:\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  ln = no_wait_locks\n  t \\<turnstile> (x, shr s) -ta\\<rightarrow> x'm'\n  actions_ok s t ta\n\ngoal (2 subgoals):\n 1. \\<And>x ta x'm' ln.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>; ln = no_wait_locks;\n        t \\<turnstile> (x, shr s) -ta\\<rightarrow> x'm';\n        actions_ok s t ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta. Ex (redT_syntax1 s t ta)\n 2. \\<And>x ln.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        ln \\<noteq> no_wait_locks; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta. Ex (redT_syntax1 s t ta)", "with redT_updWs_total[of t \"wset s\" \"\\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\"]"], ["proof (chain)\npicking this:\n  \\<exists>ws'.\n     redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws'\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  ln = no_wait_locks\n  t \\<turnstile> (x, shr s) -ta\\<rightarrow> x'm'\n  actions_ok s t ta", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>ws'.\n     redT_updWs t (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws'\n  thr s t = \\<lfloor>(x, ln)\\<rfloor>\n  ln = no_wait_locks\n  t \\<turnstile> (x, shr s) -ta\\<rightarrow> x'm'\n  actions_ok s t ta\n\ngoal (1 subgoal):\n 1. \\<exists>ta. Ex (redT_syntax1 s t ta)", "by(cases x'm')(fastforce intro!: redT_normal simp del: split_paired_Ex)"], ["proof (state)\nthis:\n  \\<exists>ta. Ex (redT_syntax1 s t ta)\n\ngoal (1 subgoal):\n 1. \\<And>x ln.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        ln \\<noteq> no_wait_locks; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta. Ex (redT_syntax1 s t ta)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x ln.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        ln \\<noteq> no_wait_locks; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta. Ex (redT_syntax1 s t ta)", "case acquire"], ["proof (state)\nthis:\n  thr s t = \\<lfloor>(x_, ln_)\\<rfloor>\n  ln_ \\<noteq> no_wait_locks\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln_\n\ngoal (1 subgoal):\n 1. \\<And>x ln.\n       \\<lbrakk>thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        ln \\<noteq> no_wait_locks; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta. Ex (redT_syntax1 s t ta)", "thus ?thesis"], ["proof (prove)\nusing this:\n  thr s t = \\<lfloor>(x_, ln_)\\<rfloor>\n  ln_ \\<noteq> no_wait_locks\n  \\<not> waiting (wset s t)\n  may_acquire_all (locks s) t ln_\n\ngoal (1 subgoal):\n 1. \\<exists>ta. Ex (redT_syntax1 s t ta)", "by(fastforce intro: redT_acquire simp del: split_paired_Ex simp add: neq_no_wait_locks_conv)"], ["proof (state)\nthis:\n  \\<exists>ta. Ex (redT_syntax1 s t ta)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Well-formedness conditions for final\\<close>"], ["", "context final_thread begin"], ["", "inductive not_final_thread :: \"('l,'t,'x,'m,'w) state \\<Rightarrow> 't \\<Rightarrow> bool\"\nfor s :: \"('l,'t,'x,'m,'w) state\" and t :: \"'t\" where\n  not_final_thread_final: \"\\<And>ln. \\<lbrakk> thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> final x \\<rbrakk> \\<Longrightarrow> not_final_thread s t\"\n| not_final_thread_wait_locks: \"\\<And>ln. \\<lbrakk> thr s t = \\<lfloor>(x, ln)\\<rfloor>; ln \\<noteq> no_wait_locks \\<rbrakk> \\<Longrightarrow> not_final_thread s t\"\n| not_final_thread_wait_set: \"\\<And>ln. \\<lbrakk> thr s t = \\<lfloor>(x, ln)\\<rfloor>; wset s t = \\<lfloor>w\\<rfloor> \\<rbrakk> \\<Longrightarrow> not_final_thread s t\""], ["", "declare not_final_thread.cases [elim]"], ["", "lemmas not_final_thread_cases = not_final_thread.cases [consumes 1, case_names final wait_locks wait_set]"], ["", "lemma not_final_thread_cases2 [consumes 2, case_names final wait_locks wait_set]:\n  \"\\<And>ln. \\<lbrakk> not_final_thread s t; thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n     \\<not> final x \\<Longrightarrow> thesis; ln \\<noteq> no_wait_locks \\<Longrightarrow> thesis; \\<And>w. wset s t = \\<lfloor>w\\<rfloor> \\<Longrightarrow> thesis \\<rbrakk>\n  \\<Longrightarrow> thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ln.\n       \\<lbrakk>not_final_thread s t; thr s t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> final x \\<Longrightarrow> thesis;\n        ln \\<noteq> no_wait_locks \\<Longrightarrow> thesis;\n        \\<And>w.\n           wset s t = \\<lfloor>w\\<rfloor> \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "by(auto)"], ["", "lemma not_final_thread_iff:\n  \"not_final_thread s t \\<longleftrightarrow> (\\<exists>x ln. thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and> (\\<not> final x \\<or> ln \\<noteq> no_wait_locks \\<or> (\\<exists>w. wset s t = \\<lfloor>w\\<rfloor>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. not_final_thread s t =\n    (\\<exists>x ln.\n        thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<and>\n        (\\<not> final x \\<or>\n         ln \\<noteq> no_wait_locks \\<or>\n         (\\<exists>w. wset s t = \\<lfloor>w\\<rfloor>)))", "by(auto intro: not_final_thread.intros)"], ["", "lemma not_final_thread_conv:\n  \"not_final_thread s t \\<longleftrightarrow> thr s t \\<noteq> None \\<and> \\<not> final_thread s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. not_final_thread s t =\n    (thr s t \\<noteq> None \\<and> \\<not> final_thread s t)", "by(auto simp add: final_thread_def intro: not_final_thread.intros)"], ["", "lemma not_final_thread_existsE:\n  assumes \"not_final_thread s t\"\n  and \"\\<And>x ln. thr s t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  not_final_thread s t\n  thr s t = \\<lfloor>(?x12, ?ln12)\\<rfloor> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["", "lemma not_final_thread_final_thread_conv:\n  \"thr s t \\<noteq> None \\<Longrightarrow> \\<not> final_thread s t \\<longleftrightarrow> not_final_thread s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thr s t \\<noteq> None \\<Longrightarrow>\n    (\\<not> final_thread s t) = not_final_thread s t", "by(simp add: not_final_thread_iff final_thread_def)"], ["", "lemma may_join_cond_action_oks:\n  assumes \"\\<And>t'. Join t' \\<in> set cas \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\"\n  shows \"cond_action_oks s t cas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond_action_oks s t cas", "using assms"], ["proof (prove)\nusing this:\n  Join ?t'12 \\<in> set cas \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'12 \\<and> t \\<noteq> ?t'12\n\ngoal (1 subgoal):\n 1. cond_action_oks s t cas", "proof (induct cas)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>t'.\n        Join t' \\<in> set [] \\<Longrightarrow>\n        \\<not> not_final_thread s t' \\<and> t \\<noteq> t') \\<Longrightarrow>\n    cond_action_oks s t []\n 2. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "case Nil"], ["proof (state)\nthis:\n  Join ?t'12 \\<in> set [] \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'12 \\<and> t \\<noteq> ?t'12\n\ngoal (2 subgoals):\n 1. (\\<And>t'.\n        Join t' \\<in> set [] \\<Longrightarrow>\n        \\<not> not_final_thread s t' \\<and> t \\<noteq> t') \\<Longrightarrow>\n    cond_action_oks s t []\n 2. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "thus ?case"], ["proof (prove)\nusing this:\n  Join ?t'12 \\<in> set [] \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'12 \\<and> t \\<noteq> ?t'12\n\ngoal (1 subgoal):\n 1. cond_action_oks s t []", "by clarsimp"], ["proof (state)\nthis:\n  cond_action_oks s t []\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "case (Cons ca cas)"], ["proof (state)\nthis:\n  (\\<And>t'.\n      Join t' \\<in> set cas \\<Longrightarrow>\n      \\<not> not_final_thread s t' \\<and> t \\<noteq> t') \\<Longrightarrow>\n  cond_action_oks s t cas\n  Join ?t'12 \\<in> set (ca # cas) \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'12 \\<and> t \\<noteq> ?t'12\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "note IH = \\<open>\\<lbrakk> \\<And>t'. Join t' \\<in> set cas \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t \\<noteq> t' \\<rbrakk>\n             \\<Longrightarrow> cond_action_oks s t cas\\<close>"], ["proof (state)\nthis:\n  (\\<And>t'.\n      Join t' \\<in> set cas \\<Longrightarrow>\n      \\<not> not_final_thread s t' \\<and> t \\<noteq> t') \\<Longrightarrow>\n  cond_action_oks s t cas\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "note ass = \\<open>\\<And>t'. Join t' \\<in> set (ca # cas) \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<close>"], ["proof (state)\nthis:\n  Join ?t' \\<in> set (ca # cas) \\<Longrightarrow>\n  \\<not> not_final_thread s ?t' \\<and> t \\<noteq> ?t'\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "hence \"\\<And>t'. Join t' \\<in> set cas \\<Longrightarrow> \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\""], ["proof (prove)\nusing this:\n  Join ?t' \\<in> set (ca # cas) \\<Longrightarrow>\n  \\<not> not_final_thread s ?t' \\<and> t \\<noteq> ?t'\n\ngoal (1 subgoal):\n 1. \\<And>t'.\n       Join t' \\<in> set cas \\<Longrightarrow>\n       \\<not> not_final_thread s t' \\<and> t \\<noteq> t'", "by simp"], ["proof (state)\nthis:\n  Join ?t'12 \\<in> set cas \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'12 \\<and> t \\<noteq> ?t'12\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "hence \"cond_action_oks s t cas\""], ["proof (prove)\nusing this:\n  Join ?t'12 \\<in> set cas \\<Longrightarrow>\n  \\<not> not_final_thread s ?t'12 \\<and> t \\<noteq> ?t'12\n\ngoal (1 subgoal):\n 1. cond_action_oks s t cas", "by(rule IH)"], ["proof (state)\nthis:\n  cond_action_oks s t cas\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "moreover"], ["proof (state)\nthis:\n  cond_action_oks s t cas\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "have \"cond_action_ok s t ca\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond_action_ok s t ca", "proof(cases ca)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. ca = Join x1 \\<Longrightarrow> cond_action_ok s t ca\n 2. ca = Yield \\<Longrightarrow> cond_action_ok s t ca", "case (Join t')"], ["proof (state)\nthis:\n  ca = Join t'\n\ngoal (2 subgoals):\n 1. \\<And>x1. ca = Join x1 \\<Longrightarrow> cond_action_ok s t ca\n 2. ca = Yield \\<Longrightarrow> cond_action_ok s t ca", "with ass"], ["proof (chain)\npicking this:\n  Join ?t' \\<in> set (ca # cas) \\<Longrightarrow>\n  \\<not> not_final_thread s ?t' \\<and> t \\<noteq> ?t'\n  ca = Join t'", "have \"\\<not> not_final_thread s t'\" \"t \\<noteq> t'\""], ["proof (prove)\nusing this:\n  Join ?t' \\<in> set (ca # cas) \\<Longrightarrow>\n  \\<not> not_final_thread s ?t' \\<and> t \\<noteq> ?t'\n  ca = Join t'\n\ngoal (1 subgoal):\n 1. \\<not> not_final_thread s t' &&& t \\<noteq> t'", "by auto"], ["proof (state)\nthis:\n  \\<not> not_final_thread s t'\n  t \\<noteq> t'\n\ngoal (2 subgoals):\n 1. \\<And>x1. ca = Join x1 \\<Longrightarrow> cond_action_ok s t ca\n 2. ca = Yield \\<Longrightarrow> cond_action_ok s t ca", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> not_final_thread s t'\n  t \\<noteq> t'\n\ngoal (1 subgoal):\n 1. cond_action_ok s t ca", "using Join"], ["proof (prove)\nusing this:\n  \\<not> not_final_thread s t'\n  t \\<noteq> t'\n  ca = Join t'\n\ngoal (1 subgoal):\n 1. cond_action_ok s t ca", "by(auto simp add: not_final_thread_iff)"], ["proof (state)\nthis:\n  cond_action_ok s t ca\n\ngoal (1 subgoal):\n 1. ca = Yield \\<Longrightarrow> cond_action_ok s t ca", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ca = Yield \\<Longrightarrow> cond_action_ok s t ca", "case Yield"], ["proof (state)\nthis:\n  ca = Yield\n\ngoal (1 subgoal):\n 1. ca = Yield \\<Longrightarrow> cond_action_ok s t ca", "thus ?thesis"], ["proof (prove)\nusing this:\n  ca = Yield\n\ngoal (1 subgoal):\n 1. cond_action_ok s t ca", "by simp"], ["proof (state)\nthis:\n  cond_action_ok s t ca\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cond_action_ok s t ca\n\ngoal (1 subgoal):\n 1. \\<And>a cas.\n       \\<lbrakk>(\\<And>t'.\n                    Join t' \\<in> set cas \\<Longrightarrow>\n                    \\<not> not_final_thread s t' \\<and>\n                    t \\<noteq> t') \\<Longrightarrow>\n                cond_action_oks s t cas;\n        \\<And>t'.\n           Join t' \\<in> set (a # cas) \\<Longrightarrow>\n           \\<not> not_final_thread s t' \\<and> t \\<noteq> t'\\<rbrakk>\n       \\<Longrightarrow> cond_action_oks s t (a # cas)", "ultimately"], ["proof (chain)\npicking this:\n  cond_action_oks s t cas\n  cond_action_ok s t ca", "show ?case"], ["proof (prove)\nusing this:\n  cond_action_oks s t cas\n  cond_action_ok s t ca\n\ngoal (1 subgoal):\n 1. cond_action_oks s t (ca # cas)", "by simp"], ["proof (state)\nthis:\n  cond_action_oks s t (ca # cas)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context multithreaded begin"], ["", "lemma red_not_final_thread:\n  \"s -t\\<triangleright>ta\\<rightarrow> s' \\<Longrightarrow> not_final_thread s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s -t\\<triangleright>ta\\<rightarrow> s' \\<Longrightarrow>\n    not_final_thread s t", "by(fastforce elim: redT.cases intro: not_final_thread.intros dest: final_no_red)"], ["", "lemma redT_preserves_final_thread:\n  \"\\<lbrakk> s -t'\\<triangleright>ta\\<rightarrow> s'; final_thread s t \\<rbrakk> \\<Longrightarrow> final_thread s' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s -t'\\<triangleright>ta\\<rightarrow> s';\n     final_thread s t\\<rbrakk>\n    \\<Longrightarrow> final_thread s' t", "apply(erule redT.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>tb x sa taa x' m' s'a.\n       \\<lbrakk>final_thread s t; s = sa; (t', ta) = (tb, taa); s' = s'a;\n        tb \\<turnstile> \\<langle>x, shr sa\\<rangle> -taa\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr sa tb = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        actions_ok sa tb taa; redT_upd sa tb taa x' m' s'a\\<rbrakk>\n       \\<Longrightarrow> final_thread s' t\n 2. \\<And>sa tb x n s'a ln.\n       \\<lbrakk>final_thread s t; s = sa;\n        (t', ta) = (tb, K$ [], [], [], [], [], convert_RA ln); s' = s'a;\n        thr sa tb = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset sa tb);\n        may_acquire_all (locks sa) tb ln; 0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) tb ln,\n         (thr sa(tb \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> final_thread s' t", "apply(clarsimp simp add: final_thread_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a aa b ab ba x' m' af ws'.\n       \\<lbrakk>s = (a, (aa, b), ab, ba);\n        s' =\n        (redT_updLs a t' \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>,\n         (redT_updTs aa \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>(t' \\<mapsto>\n          (x',\n           redT_updLns a t' no_wait_locks\n            \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)),\n          m'),\n         ws', redT_updIs ba \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>);\n        t' \\<turnstile> \\<langle>x, b\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        aa t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        lock_ok_las a t' \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>;\n        thread_oks aa \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub>;\n        cond_action_oks (a, (aa, b), ab, ba) t'\n         \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub>;\n        wset_actions_ok ab t' \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>;\n        interrupt_actions_ok ba \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>;\n        aa t = \\<lfloor>(af, no_wait_locks)\\<rfloor>;\n        redT_updWs t' ab \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> ws';\n        final af; ab t = None\\<rbrakk>\n       \\<Longrightarrow> (t = t' \\<longrightarrow>\n                          final x' \\<and>\n                          redT_updLns a t' no_wait_locks\n                           \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> =\n                          no_wait_locks \\<and>\n                          ws' t' = None) \\<and>\n                         (t \\<noteq> t' \\<longrightarrow>\n                          (\\<exists>a b.\n                              redT_updTs aa\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t =\n                              \\<lfloor>(a, b)\\<rfloor>) \\<and>\n                          (\\<forall>a b.\n                              redT_updTs aa\n                               \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> t =\n                              \\<lfloor>(a, b)\\<rfloor> \\<longrightarrow>\n                              final a \\<and>\n                              b = no_wait_locks \\<and> ws' t = None))\n 2. \\<And>sa tb x n s'a ln.\n       \\<lbrakk>final_thread s t; s = sa;\n        (t', ta) = (tb, K$ [], [], [], [], [], convert_RA ln); s' = s'a;\n        thr sa tb = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset sa tb);\n        may_acquire_all (locks sa) tb ln; 0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) tb ln,\n         (thr sa(tb \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> final_thread s' t", "apply(auto simp add: final_thread_def dest: redT_updTs_None redT_updTs_Some final_no_red intro: redT_updWs_None_implies_None)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "context multithreaded_base begin"], ["", "definition wset_Suspend_ok :: \"('l,'t,'x,'m,'w) state set \\<Rightarrow> ('l,'t,'x,'m,'w) state set\"\nwhere\n  \"wset_Suspend_ok I = \n  {s. s \\<in> I \\<and> \n      (\\<forall>t \\<in> dom (wset s). \\<exists>s0\\<in>I. \\<exists>s1\\<in>I. \\<exists>ttas x x0 ta w' ln' ln''. s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and> s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and> \n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and> t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and> Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and> thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and> thr s t = \\<lfloor>(x, ln'')\\<rfloor>)}\""], ["", "lemma wset_Suspend_okI:\n  \"\\<lbrakk> s \\<in> I;\n     \\<And>t w. wset s t = \\<lfloor>w\\<rfloor> \\<Longrightarrow> \\<exists>s0\\<in>I. \\<exists>s1\\<in>I. \\<exists>ttas x x0 ta w' ln' ln''. s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and> s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and> \n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and> t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and> Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and> thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and> thr s t = \\<lfloor>(x, ln'')\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> s \\<in> wset_Suspend_ok I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> I;\n     \\<And>t w.\n        wset s t = \\<lfloor>w\\<rfloor> \\<Longrightarrow>\n        \\<exists>s0\\<in>I.\n           \\<exists>s1\\<in>I.\n              \\<exists>ttas x x0 ta w' ln' ln''.\n                 s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                 s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n                 thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                 t \\<turnstile> \\<langle>x0, shr\n        s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n                 Suspend w'\n                 \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                 actions_ok s0 t ta \\<and>\n                 thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                 thr s t = \\<lfloor>(x, ln'')\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> s \\<in> wset_Suspend_ok I", "unfolding wset_Suspend_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> I;\n     \\<And>t w.\n        wset s t = \\<lfloor>w\\<rfloor> \\<Longrightarrow>\n        \\<exists>s0\\<in>I.\n           \\<exists>s1\\<in>I.\n              \\<exists>ttas x x0 ta w' ln' ln''.\n                 s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                 s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n                 thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                 t \\<turnstile> \\<langle>x0, shr\n        s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n                 Suspend w'\n                 \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                 actions_ok s0 t ta \\<and>\n                 thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                 thr s t = \\<lfloor>(x, ln'')\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> s \\<in> {s \\<in> I.\n                               \\<forall>t\\<in>dom (wset s).\n                                  \\<exists>s0\\<in>I.\n                                     \\<exists>s1\\<in>I.\n  \\<exists>ttas x x0 ta w' ln' ln''.\n     s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n     s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n     thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n     t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n   s1\\<rangle> \\<and>\n     Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n     actions_ok s0 t ta \\<and>\n     thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n     thr s t = \\<lfloor>(x, ln'')\\<rfloor>}", "by blast"], ["", "lemma wset_Suspend_okD1:\n  \"s \\<in> wset_Suspend_ok I \\<Longrightarrow> s \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> wset_Suspend_ok I \\<Longrightarrow> s \\<in> I", "unfolding wset_Suspend_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {s \\<in> I.\n             \\<forall>t\\<in>dom (wset s).\n                \\<exists>s0\\<in>I.\n                   \\<exists>s1\\<in>I.\n                      \\<exists>ttas x x0 ta w' ln' ln''.\n                         s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                         s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n                         thr s0 t =\n                         \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                         t \\<turnstile> \\<langle>x0, shr\n                s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                    s1\\<rangle> \\<and>\n                         Suspend w'\n                         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         actions_ok s0 t ta \\<and>\n                         thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                         thr s t =\n                         \\<lfloor>(x, ln'')\\<rfloor>} \\<Longrightarrow>\n    s \\<in> I", "by blast"], ["", "lemma wset_Suspend_okD2:\n  \"\\<lbrakk> s \\<in> wset_Suspend_ok I; wset s t = \\<lfloor>w\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s0\\<in>I. \\<exists>s1\\<in>I. \\<exists>ttas x x0 ta w' ln' ln''. s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and> s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and> \n            thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and> t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and> Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n            actions_ok s0 t ta \\<and> thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and> thr s t = \\<lfloor>(x, ln'')\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> wset_Suspend_ok I;\n     wset s t = \\<lfloor>w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s0\\<in>I.\n                         \\<exists>s1\\<in>I.\n                            \\<exists>ttas x x0 ta w' ln' ln''.\n                               s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                               s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n                               thr s0 t =\n                               \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                               t \\<turnstile> \\<langle>x0, shr\n                      s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                          s1\\<rangle> \\<and>\n                               Suspend w'\n                               \\<in> set\n\\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                               actions_ok s0 t ta \\<and>\n                               thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                               thr s t = \\<lfloor>(x, ln'')\\<rfloor>", "unfolding wset_Suspend_ok_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {s \\<in> I.\n                      \\<forall>t\\<in>dom (wset s).\n                         \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s t = \\<lfloor>(x, ln'')\\<rfloor>};\n     wset s t = \\<lfloor>w\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s0\\<in>I.\n                         \\<exists>s1\\<in>I.\n                            \\<exists>ttas x x0 ta w' ln' ln''.\n                               s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                               s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n                               thr s0 t =\n                               \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                               t \\<turnstile> \\<langle>x0, shr\n                      s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                          s1\\<rangle> \\<and>\n                               Suspend w'\n                               \\<in> set\n\\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                               actions_ok s0 t ta \\<and>\n                               thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                               thr s t = \\<lfloor>(x, ln'')\\<rfloor>", "by blast"], ["", "lemma wset_Suspend_ok_imp_wset_thread_ok:\n  \"s \\<in> wset_Suspend_ok I \\<Longrightarrow> wset_thread_ok (wset s) (thr s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> wset_Suspend_ok I \\<Longrightarrow>\n    wset_thread_ok (wset s) (thr s)", "apply(rule wset_thread_okI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; thr s t = None\\<rbrakk>\n       \\<Longrightarrow> wset s t = None", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; thr s t = None;\n        wset s t \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> False", "apply(auto dest: wset_Suspend_okD2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invariant3p_wset_Suspend_ok:\n  assumes I: \"invariant3p redT I\"\n  shows \"invariant3p redT (wset_Suspend_ok I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invariant3p redT (wset_Suspend_ok I)", "proof(rule invariant3pI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "fix s tl s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "assume wso: \"s \\<in> wset_Suspend_ok I\" \n    and \"redT s tl s'\""], ["proof (state)\nthis:\n  s \\<in> wset_Suspend_ok I\n  redT s tl s'\n\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "moreover"], ["proof (state)\nthis:\n  s \\<in> wset_Suspend_ok I\n  redT s tl s'\n\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "obtain t' ta where tl: \"tl = (t', ta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t' ta. tl = (t', ta) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases tl)"], ["proof (state)\nthis:\n  tl = (t', ta)\n\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "ultimately"], ["proof (chain)\npicking this:\n  s \\<in> wset_Suspend_ok I\n  redT s tl s'\n  tl = (t', ta)", "have red: \"s -t'\\<triangleright>ta\\<rightarrow> s'\""], ["proof (prove)\nusing this:\n  s \\<in> wset_Suspend_ok I\n  redT s tl s'\n  tl = (t', ta)\n\ngoal (1 subgoal):\n 1. s -t'\\<triangleright>ta\\<rightarrow> s'", "by simp"], ["proof (state)\nthis:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "moreover"], ["proof (state)\nthis:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "from wso"], ["proof (chain)\npicking this:\n  s \\<in> wset_Suspend_ok I", "have \"s \\<in> I\""], ["proof (prove)\nusing this:\n  s \\<in> wset_Suspend_ok I\n\ngoal (1 subgoal):\n 1. s \\<in> I", "by(rule wset_Suspend_okD1)"], ["proof (state)\nthis:\n  s \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "ultimately"], ["proof (chain)\npicking this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  s \\<in> I", "have \"s' \\<in> I\""], ["proof (prove)\nusing this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  s \\<in> I\n\ngoal (1 subgoal):\n 1. s' \\<in> I", "by(rule invariant3pD[OF I])"], ["proof (state)\nthis:\n  s' \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>s tl s'.\n       \\<lbrakk>s \\<in> wset_Suspend_ok I; redT s tl s'\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> wset_Suspend_ok I", "thus \"s' \\<in> wset_Suspend_ok I\""], ["proof (prove)\nusing this:\n  s' \\<in> I\n\ngoal (1 subgoal):\n 1. s' \\<in> wset_Suspend_ok I", "proof(rule wset_Suspend_okI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t w.\n       wset s' t = \\<lfloor>w\\<rfloor> \\<Longrightarrow>\n       \\<exists>s0\\<in>I.\n          \\<exists>s1\\<in>I.\n             \\<exists>ttas x x0 ta w' ln' ln''.\n                s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                t \\<turnstile> \\<langle>x0, shr\n       s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n                Suspend w'\n                \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                actions_ok s0 t ta \\<and>\n                thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "fix t w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t w.\n       wset s' t = \\<lfloor>w\\<rfloor> \\<Longrightarrow>\n       \\<exists>s0\\<in>I.\n          \\<exists>s1\\<in>I.\n             \\<exists>ttas x x0 ta w' ln' ln''.\n                s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                t \\<turnstile> \\<langle>x0, shr\n       s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n                Suspend w'\n                \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                actions_ok s0 t ta \\<and>\n                thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "assume ws't: \"wset s' t = \\<lfloor>w\\<rfloor>\""], ["proof (state)\nthis:\n  wset s' t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>t w.\n       wset s' t = \\<lfloor>w\\<rfloor> \\<Longrightarrow>\n       \\<exists>s0\\<in>I.\n          \\<exists>s1\\<in>I.\n             \\<exists>ttas x x0 ta w' ln' ln''.\n                s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n                t \\<turnstile> \\<langle>x0, shr\n       s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n                Suspend w'\n                \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                actions_ok s0 t ta \\<and>\n                thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "show \"\\<exists>s0\\<in>I. \\<exists>s1\\<in>I. \\<exists>ttas x x0 ta w' ln' ln''. s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and> s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                   thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and> t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n                   Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and> actions_ok s0 t ta \\<and>\n                   thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and> thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "proof(cases \"t = t'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. t \\<noteq> t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "case False"], ["proof (state)\nthis:\n  t \\<noteq> t'\n\ngoal (2 subgoals):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. t \\<noteq> t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "with red ws't"], ["proof (chain)\npicking this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  wset s' t = \\<lfloor>w\\<rfloor>\n  t \\<noteq> t'", "obtain w' where wst: \"wset s t = \\<lfloor>w'\\<rfloor>\""], ["proof (prove)\nusing this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  wset s' t = \\<lfloor>w\\<rfloor>\n  t \\<noteq> t'\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        wset s t = \\<lfloor>w'\\<rfloor> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by cases(auto 4 4 dest: redT_updWs_Some_otherD split: wait_set_status.split_asm)"], ["proof (state)\nthis:\n  wset s t = \\<lfloor>w'\\<rfloor>\n\ngoal (2 subgoals):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. t \\<noteq> t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from wset_Suspend_okD2[OF wso this]"], ["proof (chain)\npicking this:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s t = \\<lfloor>(x, ln'')\\<rfloor>", "obtain s0 s1 ttas x x0 ta' w' ln' ln''\n        where reuse: \"s0 \\<in> I\" \"s1 \\<in> I\" \"s0 -t\\<triangleright>ta'\\<rightarrow> s1\" \"thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>\"\n          \"t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr s1\\<rangle>\" \"Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\" \"actions_ok s0 t ta'\" \"thr s1 t = \\<lfloor>(x, ln')\\<rfloor>\"\n        and step: \"s1 -\\<triangleright>ttas\\<rightarrow>* s\" and tst: \"thr s t = \\<lfloor>(x, ln'')\\<rfloor>\""], ["proof (prove)\nusing this:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>s0 s1 ta' x0 x w' ln' ttas ln''.\n        \\<lbrakk>s0 \\<in> I; s1 \\<in> I;\n         s0 -t\\<triangleright>ta'\\<rightarrow> s1;\n         thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>;\n         t \\<turnstile> \\<langle>x0, shr\ns0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr s1\\<rangle>;\n         Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>;\n         actions_ok s0 t ta'; thr s1 t = \\<lfloor>(x, ln')\\<rfloor>;\n         s1 -\\<triangleright>ttas\\<rightarrow>* s;\n         thr s t = \\<lfloor>(x, ln'')\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s0 \\<in> I\n  s1 \\<in> I\n  s0 -t\\<triangleright>ta'\\<rightarrow> s1\n  thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr\n s1\\<rangle>\n  Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n  actions_ok s0 t ta'\n  thr s1 t = \\<lfloor>(x, ln')\\<rfloor>\n  s1 -\\<triangleright>ttas\\<rightarrow>* s\n  thr s t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal (2 subgoals):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. t \\<noteq> t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from step red"], ["proof (chain)\npicking this:\n  s1 -\\<triangleright>ttas\\<rightarrow>* s\n  s -t'\\<triangleright>ta\\<rightarrow> s'", "have \"s1 -\\<triangleright>ttas@[(t', ta)]\\<rightarrow>* s'\""], ["proof (prove)\nusing this:\n  s1 -\\<triangleright>ttas\\<rightarrow>* s\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'", "unfolding RedT_def"], ["proof (prove)\nusing this:\n  rtrancl3p redT s1 ttas s\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. rtrancl3p redT s1 (ttas @ [(t', ta)]) s'", "by(rule rtrancl3p_step)"], ["proof (state)\nthis:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n\ngoal (2 subgoals):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. t \\<noteq> t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "moreover"], ["proof (state)\nthis:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n\ngoal (2 subgoals):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. t \\<noteq> t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from red tst False"], ["proof (chain)\npicking this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  thr s t = \\<lfloor>(x, ln'')\\<rfloor>\n  t \\<noteq> t'", "have \"thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\""], ["proof (prove)\nusing this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  thr s t = \\<lfloor>(x, ln'')\\<rfloor>\n  t \\<noteq> t'\n\ngoal (1 subgoal):\n 1. thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "by(cases)(auto intro: redT_updTs_Some)"], ["proof (state)\nthis:\n  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal (2 subgoals):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. t \\<noteq> t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "ultimately"], ["proof (chain)\npicking this:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "using reuse"], ["proof (prove)\nusing this:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n  s0 \\<in> I\n  s1 \\<in> I\n  s0 -t\\<triangleright>ta'\\<rightarrow> s1\n  thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr\n s1\\<rangle>\n  Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n  actions_ok s0 t ta'\n  thr s1 t = \\<lfloor>(x, ln')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "by blast"], ["proof (state)\nthis:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal (1 subgoal):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "case True"], ["proof (state)\nthis:\n  t = t'\n\ngoal (1 subgoal):\n 1. t = t' \\<Longrightarrow>\n    \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from red"], ["proof (chain)\npicking this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'", "show ?thesis"], ["proof (prove)\nusing this:\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t' \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t' ta;\n        redT_upd s t' ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "case (redT_normal x x' m)"], ["proof (state)\nthis:\n  t' \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m\\<rangle>\n  thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  actions_ok s t' ta\n  redT_upd s t' ta x' m s'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t' \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t' ta;\n        redT_upd s t' ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "note red' = \\<open>t' \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m\\<rangle>\\<close>\n          and tst' = \\<open>thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>\\<close>\n          and aok = \\<open>actions_ok s t' ta\\<close>\n          and s' = \\<open>redT_upd s t' ta x' m s'\\<close>"], ["proof (state)\nthis:\n  t' \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m\\<rangle>\n  thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  actions_ok s t' ta\n  redT_upd s t' ta x' m s'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t' \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t' ta;\n        redT_upd s t' ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from s'"], ["proof (chain)\npicking this:\n  redT_upd s t' ta x' m s'", "have ws': \"redT_updWs t' (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> (wset s')\"\n          and m: \"m = shr s'\" \n          and ts't: \"thr s' t' = \\<lfloor>(x', redT_updLns (locks s) t' (snd (the (thr s t'))) \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)\\<rfloor>\""], ["proof (prove)\nusing this:\n  redT_upd s t' ta x' m s'\n\ngoal (1 subgoal):\n 1. redT_updWs t' (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n     (wset s') &&&\n    m = shr s' &&&\n    thr s' t' =\n    \\<lfloor>(x',\n              redT_updLns (locks s) t' (snd (the (thr s t')))\n               \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  redT_updWs t' (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> (wset s')\n  m = shr s'\n  thr s' t' =\n  \\<lfloor>(x',\n            redT_updLns (locks s) t' (snd (the (thr s t')))\n             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t' \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t' ta;\n        redT_upd s t' ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from aok"], ["proof (chain)\npicking this:\n  actions_ok s t' ta", "have nwait: \"\\<not> waiting (wset s t')\""], ["proof (prove)\nusing this:\n  actions_ok s t' ta\n\ngoal (1 subgoal):\n 1. \\<not> waiting (wset s t')", "by(auto simp add: wset_actions_ok_def waiting_def split: if_split_asm)"], ["proof (state)\nthis:\n  \\<not> waiting (wset s t')\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t' \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t' ta;\n        redT_upd s t' ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "have \"\\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "proof(cases \"wset s t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. wset s t = None \\<Longrightarrow>\n    \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n 2. \\<And>a.\n       wset s t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>w'.\n          Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "case None"], ["proof (state)\nthis:\n  wset s t = None\n\ngoal (2 subgoals):\n 1. wset s t = None \\<Longrightarrow>\n    \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n 2. \\<And>a.\n       wset s t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>w'.\n          Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "from redT_updWs_None_SomeD[OF ws', OF ws't None]"], ["proof (chain)\npicking this:\n  t' = t \\<and>\n  (\\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>)", "show ?thesis"], ["proof (prove)\nusing this:\n  t' = t \\<and>\n  (\\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", ".."], ["proof (state)\nthis:\n  \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>w'.\n          Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>w'.\n          Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "case (Some w')"], ["proof (state)\nthis:\n  wset s t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>w'.\n          Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "with True aok"], ["proof (chain)\npicking this:\n  t = t'\n  actions_ok s t' ta\n  wset s t = \\<lfloor>w'\\<rfloor>", "have \"Notified \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  t = t'\n  actions_ok s t' ta\n  wset s t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. Notified \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n    WokenUp \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "by(auto simp add: wset_actions_ok_def split: if_split_asm)"], ["proof (state)\nthis:\n  Notified \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>w'.\n          Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "with ws'"], ["proof (chain)\npicking this:\n  redT_updWs t' (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> (wset s')\n  Notified \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  redT_updWs t' (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> (wset s')\n  Notified \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "using ws't"], ["proof (prove)\nusing this:\n  redT_updWs t' (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> (wset s')\n  Notified \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n  wset s' t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "unfolding True"], ["proof (prove)\nusing this:\n  redT_updWs t' (wset s) \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> (wset s')\n  Notified \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n  wset s' t' = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "by(rule redT_updWs_WokenUp_SuspendD)"], ["proof (state)\nthis:\n  \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>t' \\<turnstile> \\<langle>x, shr\n       s\\<rangle> -ta\\<rightarrow> \\<langle>x', m'\\<rangle>;\n        thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>; actions_ok s t' ta;\n        redT_upd s t' ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n 2. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "with tst' ts't aok \\<open>s \\<in> I\\<close> \\<open>s' \\<in> I\\<close> red red'"], ["proof (chain)\npicking this:\n  thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  thr s' t' =\n  \\<lfloor>(x',\n            redT_updLns (locks s) t' (snd (the (thr s t')))\n             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)\\<rfloor>\n  actions_ok s t' ta\n  s \\<in> I\n  s' \\<in> I\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  t' \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m\\<rangle>\n  \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>", "show ?thesis"], ["proof (prove)\nusing this:\n  thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  thr s' t' =\n  \\<lfloor>(x',\n            redT_updLns (locks s) t' (snd (the (thr s t')))\n             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)\\<rfloor>\n  actions_ok s t' ta\n  s \\<in> I\n  s' \\<in> I\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  t' \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', m\\<rangle>\n  \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "unfolding True m"], ["proof (prove)\nusing this:\n  thr s t' = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  thr s' t' =\n  \\<lfloor>(x',\n            redT_updLns (locks s) t' (snd (the (thr s t')))\n             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub>)\\<rfloor>\n  actions_ok s t' ta\n  s \\<in> I\n  s' \\<in> I\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n  t' \\<turnstile> \\<langle>x, shr s\\<rangle> -ta\\<rightarrow> \\<langle>x', shr\ns'\\<rangle>\n  \\<exists>w'. Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t'\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t' = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t' \\<turnstile> \\<langle>x0, shr\n     s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t' ta \\<and>\n             thr s1 t' = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t' = \\<lfloor>(x, ln'')\\<rfloor>", "by blast"], ["proof (state)\nthis:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "case (redT_acquire x n ln)"], ["proof (state)\nthis:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t' = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t')\n  may_acquire_all (locks s) t' ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t' ln,\n   (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "with ws't True"], ["proof (chain)\npicking this:\n  wset s' t = \\<lfloor>w\\<rfloor>\n  t = t'\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t' = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t')\n  may_acquire_all (locks s) t' ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t' ln,\n   (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)", "have \"wset s t = \\<lfloor>w\\<rfloor>\""], ["proof (prove)\nusing this:\n  wset s' t = \\<lfloor>w\\<rfloor>\n  t = t'\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t' = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t')\n  may_acquire_all (locks s) t' ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t' ln,\n   (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n\ngoal (1 subgoal):\n 1. wset s t = \\<lfloor>w\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  wset s t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from wset_Suspend_okD2[OF wso this] \\<open>thr s t' = \\<lfloor>(x, ln)\\<rfloor>\\<close> True"], ["proof (chain)\npicking this:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s t = \\<lfloor>(x, ln'')\\<rfloor>\n  thr s t' = \\<lfloor>(x, ln)\\<rfloor>\n  t = t'", "obtain s0 s1 ttas x0 ta' w' ln' ln''\n          where reuse: \"s0 \\<in> I\" \"s1 \\<in> I\" \"s0 -t\\<triangleright>ta'\\<rightarrow> s1\" \"thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>\"\n            \"t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr s1\\<rangle>\" \"Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\" \"actions_ok s0 t ta'\" \"thr s1 t = \\<lfloor>(x, ln')\\<rfloor>\"\n          and step: \"s1 -\\<triangleright>ttas\\<rightarrow>* s\""], ["proof (prove)\nusing this:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s t = \\<lfloor>(x, ln'')\\<rfloor>\n  thr s t' = \\<lfloor>(x, ln)\\<rfloor>\n  t = t'\n\ngoal (1 subgoal):\n 1. (\\<And>s0 s1 ta' x0 w' ln' ttas.\n        \\<lbrakk>s0 \\<in> I; s1 \\<in> I;\n         s0 -t\\<triangleright>ta'\\<rightarrow> s1;\n         thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>;\n         t \\<turnstile> \\<langle>x0, shr\ns0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr s1\\<rangle>;\n         Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>;\n         actions_ok s0 t ta'; thr s1 t = \\<lfloor>(x, ln')\\<rfloor>;\n         s1 -\\<triangleright>ttas\\<rightarrow>* s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  s0 \\<in> I\n  s1 \\<in> I\n  s0 -t\\<triangleright>ta'\\<rightarrow> s1\n  thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr\n s1\\<rangle>\n  Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n  actions_ok s0 t ta'\n  thr s1 t = \\<lfloor>(x, ln')\\<rfloor>\n  s1 -\\<triangleright>ttas\\<rightarrow>* s\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from step red"], ["proof (chain)\npicking this:\n  s1 -\\<triangleright>ttas\\<rightarrow>* s\n  s -t'\\<triangleright>ta\\<rightarrow> s'", "have \"s1 -\\<triangleright>ttas@[(t', ta)]\\<rightarrow>* s'\""], ["proof (prove)\nusing this:\n  s1 -\\<triangleright>ttas\\<rightarrow>* s\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'", "unfolding RedT_def"], ["proof (prove)\nusing this:\n  rtrancl3p redT s1 ttas s\n  s -t'\\<triangleright>ta\\<rightarrow> s'\n\ngoal (1 subgoal):\n 1. rtrancl3p redT s1 (ttas @ [(t', ta)]) s'", "by(rule rtrancl3p_step)"], ["proof (state)\nthis:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "moreover"], ["proof (state)\nthis:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "from redT_acquire True"], ["proof (chain)\npicking this:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t' = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t')\n  may_acquire_all (locks s) t' ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t' ln,\n   (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n  t = t'", "have \"thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  ta = (K$ [], [], [], [], [], convert_RA ln)\n  thr s t' = \\<lfloor>(x, ln)\\<rfloor>\n  \\<not> waiting (wset s t')\n  may_acquire_all (locks s) t' ln\n  0 < ln $ n\n  s' =\n  (acquire_all (locks s) t' ln,\n   (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s, interrupts s)\n  t = t'\n\ngoal (1 subgoal):\n 1. thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta = (K$ [], [], [], [], [], convert_RA ln);\n        thr s t' = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t');\n        may_acquire_all (locks s) t' ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t' ln,\n         (thr s(t' \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s0\\<in>I.\n                            \\<exists>s1\\<in>I.\n                               \\<exists>ttas x x0 ta w' ln' ln''.\n                                  s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n                                  s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n                                  thr s0 t =\n                                  \\<lfloor>(x0,\n      no_wait_locks)\\<rfloor> \\<and>\n                                  t \\<turnstile> \\<langle>x0, shr\n                         s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr\n                             s1\\<rangle> \\<and>\n                                  Suspend w'\n                                  \\<in> set\n   \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                                  actions_ok s0 t ta \\<and>\n                                  thr s1 t =\n                                  \\<lfloor>(x, ln')\\<rfloor> \\<and>\n                                  thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "ultimately"], ["proof (chain)\npicking this:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n  thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n  thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "using reuse"], ["proof (prove)\nusing this:\n  s1 -\\<triangleright>ttas @ [(t', ta)]\\<rightarrow>* s'\n  thr s' t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  s0 \\<in> I\n  s1 \\<in> I\n  s0 -t\\<triangleright>ta'\\<rightarrow> s1\n  thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor>\n  t \\<turnstile> \\<langle>x0, shr s0\\<rangle> -ta'\\<rightarrow> \\<langle>x, shr\n s1\\<rangle>\n  Suspend w' \\<in> set \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n  actions_ok s0 t ta'\n  thr s1 t = \\<lfloor>(x, ln')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>s0\\<in>I.\n       \\<exists>s1\\<in>I.\n          \\<exists>ttas x x0 ta w' ln' ln''.\n             s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n             s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n             thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n             t \\<turnstile> \\<langle>x0, shr\n    s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n             Suspend w'\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n             actions_ok s0 t ta \\<and>\n             thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n             thr s' t = \\<lfloor>(x, ln'')\\<rfloor>", "by blast"], ["proof (state)\nthis:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s0\\<in>I.\n     \\<exists>s1\\<in>I.\n        \\<exists>ttas x x0 ta w' ln' ln''.\n           s0 -t\\<triangleright>ta\\<rightarrow> s1 \\<and>\n           s1 -\\<triangleright>ttas\\<rightarrow>* s' \\<and>\n           thr s0 t = \\<lfloor>(x0, no_wait_locks)\\<rfloor> \\<and>\n           t \\<turnstile> \\<langle>x0, shr\n  s0\\<rangle> -ta\\<rightarrow> \\<langle>x, shr s1\\<rangle> \\<and>\n           Suspend w' \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n           actions_ok s0 t ta \\<and>\n           thr s1 t = \\<lfloor>(x, ln')\\<rfloor> \\<and>\n           thr s' t = \\<lfloor>(x, ln'')\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s' \\<in> wset_Suspend_ok I\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}