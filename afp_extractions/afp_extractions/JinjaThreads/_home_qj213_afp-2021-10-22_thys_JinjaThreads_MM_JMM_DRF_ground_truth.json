{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/JMM_DRF.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma drf_lemma:\n  assumes wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and E: \"E \\<in> \\<E>\"\n  and sync: \"correctly_synchronized P \\<E>\"\n  and read_before: \"\\<And>r. r \\<in> read_actions E \\<Longrightarrow> P,E \\<turnstile> ws r \\<le>hb r\"\n  shows \"sequentially_consistent P (E, ws)\"", "lemma justified_action_committedD:\n  assumes justified: \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n  and a: \"a \\<in> actions E\"\n  obtains n a' where \"a = action_translation (J n) a'\" \"a' \\<in> committed (J n)\"", "theorem drf_weak:\n  assumes sync: \"correctly_synchronized P \\<E>\"\n  and legal: \"weakly_legal_execution P \\<E> (E, ws)\"\n  shows \"sequentially_consistent P (E, ws)\""], "translations": [["", "lemma drf_lemma:\n  assumes wf: \"P \\<turnstile> (E, ws) \\<surd>\"\n  and E: \"E \\<in> \\<E>\"\n  and sync: \"correctly_synchronized P \\<E>\"\n  and read_before: \"\\<And>r. r \\<in> read_actions E \\<Longrightarrow> P,E \\<turnstile> ws r \\<le>hb r\"\n  shows \"sequentially_consistent P (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sequentially_consistent P (E, ws)", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "let ?Q = \"{r. r \\<in> read_actions E \\<and> \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> sequentially_consistent P (E, ws)", "obtain r where \"r \\<in> read_actions E\" \"\\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r\""], ["proof (prove)\nusing this:\n  \\<not> sequentially_consistent P (E, ws)\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<lbrakk>r \\<in> read_actions E;\n         \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: sequentially_consistent_def)"], ["proof (state)\nthis:\n  r \\<in> read_actions E\n  \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "hence \"r \\<in> ?Q\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n  \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r\n\ngoal (1 subgoal):\n 1. r \\<in> {r \\<in> read_actions E.\n             \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}", "by simp"], ["proof (state)\nthis:\n  r \\<in> {r \\<in> read_actions E.\n           \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "with wf_action_order[of E]"], ["proof (chain)\npicking this:\n  wfP (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>\n  r \\<in> {r \\<in> read_actions E.\n           \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}", "obtain r' \n    where \"r' \\<in> ?Q\"  \n    and \"(action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>^** r' r\"\n    and r'_min: \"\\<And>a. (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> a r' \\<Longrightarrow> a \\<notin> ?Q\""], ["proof (prove)\nusing this:\n  wfP (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>\n  r \\<in> {r \\<in> read_actions E.\n           \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<lbrakk>r' \\<in> {r \\<in> read_actions E.\n                           \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r};\n         (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>\\<^sup>*\\<^sup>* r'\n          r;\n         \\<And>a.\n            (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> a\n             r' \\<Longrightarrow>\n            a \\<notin> {r \\<in> read_actions E.\n                        \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws\n                           r}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule wfP_minimalE) blast"], ["proof (state)\nthis:\n  r' \\<in> {r \\<in> read_actions E.\n            \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq>\\<^sup>*\\<^sup>* r' r\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> ?a r' \\<Longrightarrow>\n  ?a \\<notin> {r \\<in> read_actions E.\n               \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from \\<open>r' \\<in> ?Q\\<close>"], ["proof (chain)\npicking this:\n  r' \\<in> {r \\<in> read_actions E.\n            \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}", "have r': \"r' \\<in> read_actions E\"\n    and not_mrw: \"\\<not> P,E \\<turnstile> r' \\<leadsto>mrw ws r'\""], ["proof (prove)\nusing this:\n  r' \\<in> {r \\<in> read_actions E.\n            \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions E &&&\n    \\<not> P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "by blast+"], ["proof (state)\nthis:\n  r' \\<in> read_actions E\n  \\<not> P,E \\<turnstile> r' \\<leadsto>mrw ws r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions E", "obtain ad al v where obs_r': \"action_obs E r' = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (\\<And>ad al v.\n        action_obs E r' = NormalAction (ReadMem ad al v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases) auto"], ["proof (state)\nthis:\n  action_obs E r' = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from wf"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) \\<surd>", "have ws: \"is_write_seen P E ws\" \n    and tsa_ok: \"thread_start_actions_ok E\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. is_write_seen P E ws &&& thread_start_actions_ok E", "by(rule wf_exec_is_write_seenD wf_exec_thread_start_actions_okD)+"], ["proof (state)\nthis:\n  is_write_seen P E ws\n  thread_start_actions_ok E\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from is_write_seenD[OF ws r' obs_r']"], ["proof (chain)\npicking this:\n  ws r' \\<in> write_actions E \\<and>\n  (ad, al) \\<in> action_loc P E (ws r') \\<and>\n  value_written P E (ws r') (ad, al) = v \\<and>\n  \\<not> P,E \\<turnstile> r' \\<le>hb ws r' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> r' \\<le>so ws r') \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws r' \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb r' \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws r' \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so r') \\<longrightarrow>\n      a' = ws r')", "have ws_r: \"ws r' \\<in> write_actions E\"\n    and adal: \"(ad, al) \\<in> action_loc P E (ws r')\"\n    and v: \"v = value_written P E (ws r') (ad, al)\"\n    and not_hb: \"\\<not> P,E \\<turnstile> r' \\<le>hb ws r'\""], ["proof (prove)\nusing this:\n  ws r' \\<in> write_actions E \\<and>\n  (ad, al) \\<in> action_loc P E (ws r') \\<and>\n  value_written P E (ws r') (ad, al) = v \\<and>\n  \\<not> P,E \\<turnstile> r' \\<le>hb ws r' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> r' \\<le>so ws r') \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws r' \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb r' \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws r' \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so r') \\<longrightarrow>\n      a' = ws r')\n\ngoal (1 subgoal):\n 1. (ws r' \\<in> write_actions E &&&\n     (ad, al) \\<in> action_loc P E (ws r')) &&&\n    v = value_written P E (ws r') (ad, al) &&&\n    \\<not> P,E \\<turnstile> r' \\<le>hb ws r'", "by auto"], ["proof (state)\nthis:\n  ws r' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws r')\n  v = value_written P E (ws r') (ad, al)\n  \\<not> P,E \\<turnstile> r' \\<le>hb ws r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions E", "have \"P,E \\<turnstile> ws r' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws r' \\<le>hb r'", "by(rule read_before)"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "hence \"E \\<turnstile> ws r' \\<le>a r'\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> ws r' \\<le>a r'", "by(rule happens_before_into_action_order)"], ["proof (state)\nthis:\n  E \\<turnstile> ws r' \\<le>a r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from not_mrw"], ["proof (chain)\npicking this:\n  \\<not> P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "have \"\\<exists>w'. w' \\<in> write_actions E \\<and> (ad, al) \\<in> action_loc P E w' \\<and> \n      \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and> \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and> \n      \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and> \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and> E \\<turnstile> w' \\<le>a r'\""], ["proof (prove)\nusing this:\n  \\<not> P,E \\<turnstile> r' \\<leadsto>mrw ws r'\n\ngoal (1 subgoal):\n 1. \\<exists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r'", "proof(rule contrapos_np)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "assume inbetween: \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<nexists>w'.\n     w' \\<in> write_actions E \\<and>\n     (ad, al) \\<in> action_loc P E w' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n     E \\<turnstile> w' \\<le>a r'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "note r'"], ["proof (state)\nthis:\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "moreover"], ["proof (state)\nthis:\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "from obs_r'"], ["proof (chain)\npicking this:\n  action_obs E r' = NormalAction (ReadMem ad al v)", "have \"(ad, al) \\<in> action_loc P E r'\""], ["proof (prove)\nusing this:\n  action_obs E r' = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (ad, al) \\<in> action_loc P E r'", "by simp"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E r'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "moreover"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E r'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "note \\<open>E \\<turnstile> ws r' \\<le>a r'\\<close> ws_r adal"], ["proof (state)\nthis:\n  E \\<turnstile> ws r' \\<le>a r'\n  ws r' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws r')\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "moreover"], ["proof (state)\nthis:\n  E \\<turnstile> ws r' \\<le>a r'\n  ws r' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws r')\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "{"], ["proof (state)\nthis:\n  E \\<turnstile> ws r' \\<le>a r'\n  ws r' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws r')\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "fix w'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "assume \"w' \\<in> write_actions E\" \"(ad, al) \\<in> action_loc P E w'\""], ["proof (state)\nthis:\n  w' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E w'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "with inbetween"], ["proof (chain)\npicking this:\n  \\<nexists>w'.\n     w' \\<in> write_actions E \\<and>\n     (ad, al) \\<in> action_loc P E w' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n     E \\<turnstile> w' \\<le>a r'\n  w' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E w'", "have \"P,E \\<turnstile> w' \\<le>hb ws r' \\<or> P,E \\<turnstile> w' \\<le>so ws r' \\<or> P,E \\<turnstile> r' \\<le>hb w' \\<or> P,E \\<turnstile> r' \\<le>so w' \\<or> \\<not> E \\<turnstile> w' \\<le>a r'\""], ["proof (prove)\nusing this:\n  \\<nexists>w'.\n     w' \\<in> write_actions E \\<and>\n     (ad, al) \\<in> action_loc P E w' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n     E \\<turnstile> w' \\<le>a r'\n  w' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E w'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>hb ws r' \\<or>\n    P,E \\<turnstile> w' \\<le>so ws r' \\<or>\n    P,E \\<turnstile> r' \\<le>hb w' \\<or>\n    P,E \\<turnstile> r' \\<le>so w' \\<or> \\<not> E \\<turnstile> w' \\<le>a r'", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>hb ws r' \\<or>\n  P,E \\<turnstile> w' \\<le>so ws r' \\<or>\n  P,E \\<turnstile> r' \\<le>hb w' \\<or>\n  P,E \\<turnstile> r' \\<le>so w' \\<or> \\<not> E \\<turnstile> w' \\<le>a r'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>hb ws r' \\<or>\n  P,E \\<turnstile> w' \\<le>so ws r' \\<or>\n  P,E \\<turnstile> r' \\<le>hb w' \\<or>\n  P,E \\<turnstile> r' \\<le>so w' \\<or> \\<not> E \\<turnstile> w' \\<le>a r'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "from total_onPD[OF total_action_order, of w' E r'] \\<open>w' \\<in> write_actions E\\<close> r'"], ["proof (chain)\npicking this:\n  \\<lbrakk>w' \\<in> actions E; r' \\<in> actions E\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> w' \\<le>a r' \\<or>\n                    w' = r' \\<or> E \\<turnstile> r' \\<le>a w'\n  w' \\<in> write_actions E\n  r' \\<in> read_actions E", "have \"E \\<turnstile> w' \\<le>a r' \\<or> E \\<turnstile> r' \\<le>a w'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>w' \\<in> actions E; r' \\<in> actions E\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> w' \\<le>a r' \\<or>\n                    w' = r' \\<or> E \\<turnstile> r' \\<le>a w'\n  w' \\<in> write_actions E\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. E \\<turnstile> w' \\<le>a r' \\<or> E \\<turnstile> r' \\<le>a w'", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  E \\<turnstile> w' \\<le>a r' \\<or> E \\<turnstile> r' \\<le>a w'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> w' \\<le>hb ws r' \\<or>\n  P,E \\<turnstile> w' \\<le>so ws r' \\<or>\n  P,E \\<turnstile> r' \\<le>hb w' \\<or>\n  P,E \\<turnstile> r' \\<le>so w' \\<or> \\<not> E \\<turnstile> w' \\<le>a r'\n  E \\<turnstile> w' \\<le>a r' \\<or> E \\<turnstile> r' \\<le>a w'", "have \"E \\<turnstile> w' \\<le>a ws r' \\<or> E \\<turnstile> r' \\<le>a w'\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> w' \\<le>hb ws r' \\<or>\n  P,E \\<turnstile> w' \\<le>so ws r' \\<or>\n  P,E \\<turnstile> r' \\<le>hb w' \\<or>\n  P,E \\<turnstile> r' \\<le>so w' \\<or> \\<not> E \\<turnstile> w' \\<le>a r'\n  E \\<turnstile> w' \\<le>a r' \\<or> E \\<turnstile> r' \\<le>a w'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> w' \\<le>a ws r' \\<or> E \\<turnstile> r' \\<le>a w'", "unfolding sync_order_def"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> w' \\<le>hb ws r' \\<or>\n  w' \\<in> sactions P E \\<and>\n  ws r' \\<in> sactions P E \\<and> E \\<turnstile> w' \\<le>a ws r' \\<or>\n  P,E \\<turnstile> r' \\<le>hb w' \\<or>\n  r' \\<in> sactions P E \\<and>\n  w' \\<in> sactions P E \\<and> E \\<turnstile> r' \\<le>a w' \\<or>\n  \\<not> E \\<turnstile> w' \\<le>a r'\n  E \\<turnstile> w' \\<le>a r' \\<or> E \\<turnstile> r' \\<le>a w'\n\ngoal (1 subgoal):\n 1. E \\<turnstile> w' \\<le>a ws r' \\<or> E \\<turnstile> r' \\<le>a w'", "by(blast intro: happens_before_into_action_order)"], ["proof (state)\nthis:\n  E \\<turnstile> w' \\<le>a ws r' \\<or> E \\<turnstile> r' \\<le>a w'\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?w'2 \\<in> write_actions E;\n   (ad, al) \\<in> action_loc P E ?w'2\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> ?w'2 \\<le>a ws r' \\<or>\n                    E \\<turnstile> r' \\<le>a ?w'2\n\ngoal (1 subgoal):\n 1. \\<nexists>w'.\n       w' \\<in> write_actions E \\<and>\n       (ad, al) \\<in> action_loc P E w' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n       \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n       \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n       E \\<turnstile> w' \\<le>a r' \\<Longrightarrow>\n    P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "ultimately"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions E\n  (ad, al) \\<in> action_loc P E r'\n  E \\<turnstile> ws r' \\<le>a r'\n  ws r' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws r')\n  \\<lbrakk>?w'2 \\<in> write_actions E;\n   (ad, al) \\<in> action_loc P E ?w'2\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> ?w'2 \\<le>a ws r' \\<or>\n                    E \\<turnstile> r' \\<le>a ?w'2", "show \"P,E \\<turnstile> r' \\<leadsto>mrw ws r'\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions E\n  (ad, al) \\<in> action_loc P E r'\n  E \\<turnstile> ws r' \\<le>a r'\n  ws r' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws r')\n  \\<lbrakk>?w'2 \\<in> write_actions E;\n   (ad, al) \\<in> action_loc P E ?w'2\\<rbrakk>\n  \\<Longrightarrow> E \\<turnstile> ?w'2 \\<le>a ws r' \\<or>\n                    E \\<turnstile> r' \\<le>a ?w'2\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> r' \\<leadsto>mrw ws r'", "by(rule most_recent_write_for.intros)"], ["proof (state)\nthis:\n  P,E \\<turnstile> r' \\<leadsto>mrw ws r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>w'.\n     w' \\<in> write_actions E \\<and>\n     (ad, al) \\<in> action_loc P E w' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n     E \\<turnstile> w' \\<le>a r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>w'.\n     w' \\<in> write_actions E \\<and>\n     (ad, al) \\<in> action_loc P E w' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n     E \\<turnstile> w' \\<le>a r'", "obtain w' where w': \"w' \\<in> write_actions E\"\n    and adal_w': \"(ad, al) \\<in> action_loc P E w'\"\n    and \"\\<not> P,E \\<turnstile> w' \\<le>hb ws r'\" \"\\<not> P,E \\<turnstile> r' \\<le>hb w'\" \"E \\<turnstile> w' \\<le>a r'\" \n    and so: \"\\<not> P,E \\<turnstile> w' \\<le>so ws r'\" \"\\<not> P,E \\<turnstile> r' \\<le>so w'\""], ["proof (prove)\nusing this:\n  \\<exists>w'.\n     w' \\<in> write_actions E \\<and>\n     (ad, al) \\<in> action_loc P E w' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>hb ws r' \\<and>\n     \\<not> P,E \\<turnstile> w' \\<le>so ws r' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>hb w' \\<and>\n     \\<not> P,E \\<turnstile> r' \\<le>so w' \\<and>\n     E \\<turnstile> w' \\<le>a r'\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        \\<lbrakk>w' \\<in> write_actions E; (ad, al) \\<in> action_loc P E w';\n         \\<not> P,E \\<turnstile> w' \\<le>hb ws r';\n         \\<not> P,E \\<turnstile> r' \\<le>hb w'; E \\<turnstile> w' \\<le>a r';\n         \\<not> P,E \\<turnstile> w' \\<le>so ws r';\n         \\<not> P,E \\<turnstile> r' \\<le>so w'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E w'\n  \\<not> P,E \\<turnstile> w' \\<le>hb ws r'\n  \\<not> P,E \\<turnstile> r' \\<le>hb w'\n  E \\<turnstile> w' \\<le>a r'\n  \\<not> P,E \\<turnstile> w' \\<le>so ws r'\n  \\<not> P,E \\<turnstile> r' \\<le>so w'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "have \"ws r' \\<noteq> w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ws r' \\<noteq> w'", "using \\<open>\\<not> P,E \\<turnstile> w' \\<le>hb ws r'\\<close> ws_r"], ["proof (prove)\nusing this:\n  \\<not> P,E \\<turnstile> w' \\<le>hb ws r'\n  ws r' \\<in> write_actions E\n\ngoal (1 subgoal):\n 1. ws r' \\<noteq> w'", "by(auto intro: happens_before_refl)"], ["proof (state)\nthis:\n  ws r' \\<noteq> w'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "have vol: \"\\<not> is_volatile P al\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_volatile P al", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "assume vol_al: \"is_volatile P al\""], ["proof (state)\nthis:\n  is_volatile P al\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "with r' obs_r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions E\n  action_obs E r' = NormalAction (ReadMem ad al v)\n  is_volatile P al", "have \"r' \\<in> sactions P E\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions E\n  action_obs E r' = NormalAction (ReadMem ad al v)\n  is_volatile P al\n\ngoal (1 subgoal):\n 1. r' \\<in> sactions P E", "by cases(rule sactionsI, simp_all)"], ["proof (state)\nthis:\n  r' \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  r' \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "from w' vol_al adal_w'"], ["proof (chain)\npicking this:\n  w' \\<in> write_actions E\n  is_volatile P al\n  (ad, al) \\<in> action_loc P E w'", "have \"w' \\<in> sactions P E\""], ["proof (prove)\nusing this:\n  w' \\<in> write_actions E\n  is_volatile P al\n  (ad, al) \\<in> action_loc P E w'\n\ngoal (1 subgoal):\n 1. w' \\<in> sactions P E", "by(cases)(auto intro: sactionsI elim!: is_write_action.cases)"], ["proof (state)\nthis:\n  w' \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  r' \\<in> sactions P E\n  w' \\<in> sactions P E", "have \"P,E \\<turnstile> w' \\<le>so r' \\<or> w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'\""], ["proof (prove)\nusing this:\n  r' \\<in> sactions P E\n  w' \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>so r' \\<or>\n    w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'", "using total_sync_order[of P E]"], ["proof (prove)\nusing this:\n  r' \\<in> sactions P E\n  w' \\<in> sactions P E\n  total_onP (sactions P E) (sync_order P E)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>so r' \\<or>\n    w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'", "by(blast dest: total_onPD)"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>so r' \\<or>\n  w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>so r' \\<or>\n  w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "have \"w' \\<noteq> r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w' \\<noteq> r'", "using w' r'"], ["proof (prove)\nusing this:\n  w' \\<in> write_actions E\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. w' \\<noteq> r'", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  w' \\<noteq> r'\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> w' \\<le>so r' \\<or>\n  w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'\n  w' \\<noteq> r'", "have \"P,E \\<turnstile> w' \\<le>so r'\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> w' \\<le>so r' \\<or>\n  w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'\n  w' \\<noteq> r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>so r'", "using \\<open>\\<not> P,E \\<turnstile> r' \\<le>so w'\\<close>"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> w' \\<le>so r' \\<or>\n  w' = r' \\<or> P,E \\<turnstile> r' \\<le>so w'\n  w' \\<noteq> r'\n  \\<not> P,E \\<turnstile> r' \\<le>so w'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>so r'", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>so r'\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>so r'\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "from ws_r vol_al adal"], ["proof (chain)\npicking this:\n  ws r' \\<in> write_actions E\n  is_volatile P al\n  (ad, al) \\<in> action_loc P E (ws r')", "have \"ws r' \\<in> sactions P E\""], ["proof (prove)\nusing this:\n  ws r' \\<in> write_actions E\n  is_volatile P al\n  (ad, al) \\<in> action_loc P E (ws r')\n\ngoal (1 subgoal):\n 1. ws r' \\<in> sactions P E", "by(cases)(auto intro: sactionsI elim!: is_write_action.cases)"], ["proof (state)\nthis:\n  ws r' \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "with total_sync_order[of P E] \\<open>w' \\<in> sactions P E\\<close> \\<open>\\<not> P,E \\<turnstile> w' \\<le>so ws r'\\<close> \\<open>ws r' \\<noteq> w'\\<close>"], ["proof (chain)\npicking this:\n  total_onP (sactions P E) (sync_order P E)\n  w' \\<in> sactions P E\n  \\<not> P,E \\<turnstile> w' \\<le>so ws r'\n  ws r' \\<noteq> w'\n  ws r' \\<in> sactions P E", "have \"P,E \\<turnstile> ws r' \\<le>so w'\""], ["proof (prove)\nusing this:\n  total_onP (sactions P E) (sync_order P E)\n  w' \\<in> sactions P E\n  \\<not> P,E \\<turnstile> w' \\<le>so ws r'\n  ws r' \\<noteq> w'\n  ws r' \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws r' \\<le>so w'", "by(blast dest: total_onPD)"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws r' \\<le>so w'\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> w' \\<le>so r'\n  P,E \\<turnstile> ws r' \\<le>so w'", "show False"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> w' \\<le>so r'\n  P,E \\<turnstile> ws r' \\<le>so w'\n\ngoal (1 subgoal):\n 1. False", "using is_write_seenD[OF ws r' obs_r'] w' adal_w' vol_al \\<open>ws r' \\<noteq> w'\\<close>"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> w' \\<le>so r'\n  P,E \\<turnstile> ws r' \\<le>so w'\n  ws r' \\<in> write_actions E \\<and>\n  (ad, al) \\<in> action_loc P E (ws r') \\<and>\n  value_written P E (ws r') (ad, al) = v \\<and>\n  \\<not> P,E \\<turnstile> r' \\<le>hb ws r' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> r' \\<le>so ws r') \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws r' \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb r' \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws r' \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so r') \\<longrightarrow>\n      a' = ws r')\n  w' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E w'\n  is_volatile P al\n  ws r' \\<noteq> w'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_volatile P al\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  \\<not> is_volatile P al\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "assume \"a < r'\" and \"a \\<in> read_actions E\""], ["proof (state)\nthis:\n  a < r'\n  a \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "hence \"(action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> a r'\""], ["proof (prove)\nusing this:\n  a < r'\n  a \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> a r'", "using r' obs_r'"], ["proof (prove)\nusing this:\n  a < r'\n  a \\<in> read_actions E\n  r' \\<in> read_actions E\n  action_obs E r' = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> a r'", "by(auto intro: action_orderI)"], ["proof (state)\nthis:\n  (action_order E)\\<^sup>\\<noteq>\\<^sup>\\<noteq> a r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from r'_min[OF this] \\<open>a \\<in> read_actions E\\<close>"], ["proof (chain)\npicking this:\n  a \\<notin> {r \\<in> read_actions E.\n              \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\n  a \\<in> read_actions E", "have \"P,E \\<turnstile> a \\<leadsto>mrw ws a\""], ["proof (prove)\nusing this:\n  a \\<notin> {r \\<in> read_actions E.\n              \\<not> P,E \\<turnstile> r \\<leadsto>mrw ws r}\n  a \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> a \\<leadsto>mrw ws a", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> a \\<leadsto>mrw ws a\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2 < r'; ?a2 \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> P,E \\<turnstile> ?a2 \\<leadsto>mrw ws ?a2\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from \\<E>_sequential_completion[OF E wf this, of r'] r'"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>a.\n              \\<lbrakk>a < r'; a \\<in> read_actions E\\<rbrakk>\n              \\<Longrightarrow> a < r';\n   \\<And>a.\n      \\<lbrakk>a < r'; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> \\<exists>E'\\<in>\\<E>.\n                       \\<exists>ws'.\n                          P \\<turnstile> (E', ws') \\<surd> \\<and>\n                          ltake (enat r') E = ltake (enat r') E' \\<and>\n                          sequentially_consistent P (E', ws') \\<and>\n                          action_tid E r' = action_tid E' r' \\<and>\n                          action_obs E r' \\<approx> action_obs E' r' \\<and>\n                          (r' \\<in> actions E \\<longrightarrow>\n                           r' \\<in> actions E')\n  r' \\<in> read_actions E", "obtain E' ws' where \"E' \\<in> \\<E>\" \"P \\<turnstile> (E', ws') \\<surd>\"\n    and eq: \"ltake (enat r') E = ltake (enat r') E'\"\n    and sc': \"sequentially_consistent P (E', ws')\" \n    and r'': \"action_tid E r' = action_tid E' r'\" \"action_obs E r' \\<approx> action_obs E' r'\"\n    and \"r' \\<in> actions E'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>a.\n              \\<lbrakk>a < r'; a \\<in> read_actions E\\<rbrakk>\n              \\<Longrightarrow> a < r';\n   \\<And>a.\n      \\<lbrakk>a < r'; a \\<in> read_actions E\\<rbrakk>\n      \\<Longrightarrow> a \\<in> read_actions E\\<rbrakk>\n  \\<Longrightarrow> \\<exists>E'\\<in>\\<E>.\n                       \\<exists>ws'.\n                          P \\<turnstile> (E', ws') \\<surd> \\<and>\n                          ltake (enat r') E = ltake (enat r') E' \\<and>\n                          sequentially_consistent P (E', ws') \\<and>\n                          action_tid E r' = action_tid E' r' \\<and>\n                          action_obs E r' \\<approx> action_obs E' r' \\<and>\n                          (r' \\<in> actions E \\<longrightarrow>\n                           r' \\<in> actions E')\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. (\\<And>E' ws'.\n        \\<lbrakk>E' \\<in> \\<E>; P \\<turnstile> (E', ws') \\<surd>;\n         ltake (enat r') E = ltake (enat r') E';\n         sequentially_consistent P (E', ws');\n         action_tid E r' = action_tid E' r';\n         action_obs E r' \\<approx> action_obs E' r';\n         r' \\<in> actions E'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  ltake (enat r') E = ltake (enat r') E'\n  sequentially_consistent P (E', ws')\n  action_tid E r' = action_tid E' r'\n  action_obs E r' \\<approx> action_obs E' r'\n  r' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from \\<open>P \\<turnstile> (E', ws') \\<surd>\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E', ws') \\<surd>", "have tsa_ok': \"thread_start_actions_ok E'\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E', ws') \\<surd>\n\ngoal (1 subgoal):\n 1. thread_start_actions_ok E'", "by(rule wf_exec_thread_start_actions_okD)"], ["proof (state)\nthis:\n  thread_start_actions_ok E'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from \\<open>r' \\<in> read_actions E\\<close>"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions E", "have \"enat r' < llength E\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. enat r' < llength E", "by(auto elim: read_actions.cases actionsE)"], ["proof (state)\nthis:\n  enat r' < llength E\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  enat r' < llength E\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from \\<open>r' \\<in> actions E'\\<close>"], ["proof (chain)\npicking this:\n  r' \\<in> actions E'", "have \"enat r' < llength E'\""], ["proof (prove)\nusing this:\n  r' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. enat r' < llength E'", "by(auto elim: actionsE)"], ["proof (state)\nthis:\n  enat r' < llength E'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  enat r' < llength E\n  enat r' < llength E'", "have eq': \"ltake (enat (Suc r')) E [\\<approx>] ltake (enat (Suc r')) E'\""], ["proof (prove)\nusing this:\n  enat r' < llength E\n  enat r' < llength E'\n\ngoal (1 subgoal):\n 1. ltake (enat (Suc r')) E [\\<approx>] ltake (enat (Suc r')) E'", "using eq[THEN eq_into_sim_actions] r''"], ["proof (prove)\nusing this:\n  enat r' < llength E\n  enat r' < llength E'\n  ltake (enat r') E [\\<approx>] ltake (enat r') E'\n  action_tid E r' = action_tid E' r'\n  action_obs E r' \\<approx> action_obs E' r'\n\ngoal (1 subgoal):\n 1. ltake (enat (Suc r')) E [\\<approx>] ltake (enat (Suc r')) E'", "by(auto simp add: ltake_Suc_conv_snoc_lnth sim_actions_def split_beta action_tid_def action_obs_def intro!: llist_all2_lappendI)"], ["proof (state)\nthis:\n  ltake (enat (Suc r')) E [\\<approx>] ltake (enat (Suc r')) E'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions E", "have r'': \"r' \\<in> read_actions E'\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions E'", "by(rule read_actions_change_prefix[OF _eq']) simp"], ["proof (state)\nthis:\n  r' \\<in> read_actions E'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from obs_r'"], ["proof (chain)\npicking this:\n  action_obs E r' = NormalAction (ReadMem ad al v)", "have \"(ad, al) \\<in> action_loc P E r'\""], ["proof (prove)\nusing this:\n  action_obs E r' = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (ad, al) \\<in> action_loc P E r'", "by simp"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "hence adal_r'': \"(ad, al) \\<in> action_loc P E' r'\""], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E r'\n\ngoal (1 subgoal):\n 1. (ad, al) \\<in> action_loc P E' r'", "by(subst (asm) action_loc_change_prefix[OF eq']) simp"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E' r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from \\<open>\\<not> P,E \\<turnstile> w' \\<le>hb ws r'\\<close>"], ["proof (chain)\npicking this:\n  \\<not> P,E \\<turnstile> w' \\<le>hb ws r'", "have \"\\<not> is_new_action (action_obs E w')\""], ["proof (prove)\nusing this:\n  \\<not> P,E \\<turnstile> w' \\<le>hb ws r'\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E w')", "proof(rule contrapos_nn)"], ["proof (state)\ngoal (1 subgoal):\n 1. is_new_action (action_obs E w') \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "assume new_w': \"is_new_action (action_obs E w')\""], ["proof (state)\nthis:\n  is_new_action (action_obs E w')\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E w') \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "show \"P,E \\<turnstile> w' \\<le>hb ws r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>hb ws r'", "proof(cases \"is_new_action (action_obs E (ws r'))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "case True"], ["proof (state)\nthis:\n  is_new_action (action_obs E (ws r'))\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "with adal new_w' adal_w' w' ws_r"], ["proof (chain)\npicking this:\n  (ad, al) \\<in> action_loc P E (ws r')\n  is_new_action (action_obs E w')\n  (ad, al) \\<in> action_loc P E w'\n  w' \\<in> write_actions E\n  ws r' \\<in> write_actions E\n  is_new_action (action_obs E (ws r'))", "have \"ws r' \\<in> new_actions_for P E (ad, al)\" \"w' \\<in> new_actions_for P E (ad, al)\""], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E (ws r')\n  is_new_action (action_obs E w')\n  (ad, al) \\<in> action_loc P E w'\n  w' \\<in> write_actions E\n  ws r' \\<in> write_actions E\n  is_new_action (action_obs E (ws r'))\n\ngoal (1 subgoal):\n 1. ws r' \\<in> new_actions_for P E (ad, al) &&&\n    w' \\<in> new_actions_for P E (ad, al)", "by(auto simp add: new_actions_for_def)"], ["proof (state)\nthis:\n  ws r' \\<in> new_actions_for P E (ad, al)\n  w' \\<in> new_actions_for P E (ad, al)\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "with \\<open>E \\<in> \\<E>\\<close>"], ["proof (chain)\npicking this:\n  E \\<in> \\<E>\n  ws r' \\<in> new_actions_for P E (ad, al)\n  w' \\<in> new_actions_for P E (ad, al)", "have \"ws r' = w'\""], ["proof (prove)\nusing this:\n  E \\<in> \\<E>\n  ws r' \\<in> new_actions_for P E (ad, al)\n  w' \\<in> new_actions_for P E (ad, al)\n\ngoal (1 subgoal):\n 1. ws r' = w'", "by(rule \\<E>_new_actions_for_fun)"], ["proof (state)\nthis:\n  ws r' = w'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ws r' = w'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>hb ws r'", "using w'"], ["proof (prove)\nusing this:\n  ws r' = w'\n  w' \\<in> write_actions E\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>hb ws r'", "by(auto intro: happens_before_refl)"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>hb ws r'\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "case False"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E (ws r'))\n\ngoal (1 subgoal):\n 1. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> w' \\<le>hb ws r'", "with tsa_ok w' ws_r new_w'"], ["proof (chain)\npicking this:\n  thread_start_actions_ok E\n  w' \\<in> write_actions E\n  ws r' \\<in> write_actions E\n  is_new_action (action_obs E w')\n  \\<not> is_new_action (action_obs E (ws r'))", "show ?thesis"], ["proof (prove)\nusing this:\n  thread_start_actions_ok E\n  w' \\<in> write_actions E\n  ws r' \\<in> write_actions E\n  is_new_action (action_obs E w')\n  \\<not> is_new_action (action_obs E (ws r'))\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>hb ws r'", "by(auto intro: happens_before_new_not_new)"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>hb ws r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>hb ws r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E w')\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "with \\<open>E \\<turnstile> w' \\<le>a r'\\<close>"], ["proof (chain)\npicking this:\n  E \\<turnstile> w' \\<le>a r'\n  \\<not> is_new_action (action_obs E w')", "have \"w' \\<le> r'\""], ["proof (prove)\nusing this:\n  E \\<turnstile> w' \\<le>a r'\n  \\<not> is_new_action (action_obs E w')\n\ngoal (1 subgoal):\n 1. w' \\<le> r'", "by(auto elim!: action_orderE)"], ["proof (state)\nthis:\n  w' \\<le> r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  w' \\<le> r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from w' r'"], ["proof (chain)\npicking this:\n  w' \\<in> write_actions E\n  r' \\<in> read_actions E", "have \"w' \\<noteq> r'\""], ["proof (prove)\nusing this:\n  w' \\<in> write_actions E\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. w' \\<noteq> r'", "by(auto intro: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  w' \\<noteq> r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  w' \\<le> r'\n  w' \\<noteq> r'", "have \"w' < r'\""], ["proof (prove)\nusing this:\n  w' \\<le> r'\n  w' \\<noteq> r'\n\ngoal (1 subgoal):\n 1. w' < r'", "by simp"], ["proof (state)\nthis:\n  w' < r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "with w'"], ["proof (chain)\npicking this:\n  w' \\<in> write_actions E\n  w' < r'", "have \"w' \\<in> write_actions E'\""], ["proof (prove)\nusing this:\n  w' \\<in> write_actions E\n  w' < r'\n\ngoal (1 subgoal):\n 1. w' \\<in> write_actions E'", "by(auto intro: write_actions_change_prefix[OF _ eq'])"], ["proof (state)\nthis:\n  w' \\<in> write_actions E'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "hence \"w' \\<in> actions E'\""], ["proof (prove)\nusing this:\n  w' \\<in> write_actions E'\n\ngoal (1 subgoal):\n 1. w' \\<in> actions E'", "by simp"], ["proof (state)\nthis:\n  w' \\<in> actions E'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from adal_w' \\<open>w' < r'\\<close>"], ["proof (chain)\npicking this:\n  (ad, al) \\<in> action_loc P E w'\n  w' < r'", "have \"(ad, al) \\<in> action_loc P E' w'\""], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E w'\n  w' < r'\n\ngoal (1 subgoal):\n 1. (ad, al) \\<in> action_loc P E' w'", "by(subst action_loc_change_prefix[symmetric, OF eq']) simp_all"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E' w'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from vol \\<open>r' \\<in> read_actions E'\\<close> \\<open>w' \\<in> write_actions E'\\<close> \\<open>(ad, al) \\<in> action_loc P E' w'\\<close> adal_r''"], ["proof (chain)\npicking this:\n  \\<not> is_volatile P al\n  r' \\<in> read_actions E'\n  w' \\<in> write_actions E'\n  (ad, al) \\<in> action_loc P E' w'\n  (ad, al) \\<in> action_loc P E' r'", "have \"P,E' \\<turnstile> r' \\<dagger> w'\""], ["proof (prove)\nusing this:\n  \\<not> is_volatile P al\n  r' \\<in> read_actions E'\n  w' \\<in> write_actions E'\n  (ad, al) \\<in> action_loc P E' w'\n  (ad, al) \\<in> action_loc P E' r'\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile>r'\\<dagger>w'", "unfolding non_volatile_conflict_def"], ["proof (prove)\nusing this:\n  \\<not> is_volatile P al\n  r' \\<in> read_actions E'\n  w' \\<in> write_actions E'\n  (ad, al) \\<in> action_loc P E' w'\n  (ad, al) \\<in> action_loc P E' r'\n\ngoal (1 subgoal):\n 1. (r' \\<in> read_actions E' \\<and> w' \\<in> write_actions E' \\<or>\n     r' \\<in> write_actions E' \\<and> w' \\<in> read_actions E' \\<or>\n     r' \\<in> write_actions E' \\<and> w' \\<in> write_actions E') \\<and>\n    (\\<exists>ad al.\n        (ad, al) \\<in> action_loc P E' r' \\<inter> action_loc P E' w' \\<and>\n        \\<not> is_volatile P al)", "by auto"], ["proof (state)\nthis:\n  P,E' \\<turnstile>r'\\<dagger>w'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "with sync \\<open>E' \\<in> \\<E>\\<close> \\<open>P \\<turnstile> (E', ws') \\<surd>\\<close> sc' \\<open>r' \\<in> actions E'\\<close> \\<open>w' \\<in> actions E'\\<close>"], ["proof (chain)\npicking this:\n  correctly_synchronized P \\<E>\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n  r' \\<in> actions E'\n  w' \\<in> actions E'\n  P,E' \\<turnstile>r'\\<dagger>w'", "have hb'_r'_w': \"P,E' \\<turnstile> r' \\<le>hb w' \\<or> P,E' \\<turnstile> w' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  correctly_synchronized P \\<E>\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n  r' \\<in> actions E'\n  w' \\<in> actions E'\n  P,E' \\<turnstile>r'\\<dagger>w'\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> r' \\<le>hb w' \\<or> P,E' \\<turnstile> w' \\<le>hb r'", "by(rule correctly_synchronizedD[rule_format])"], ["proof (state)\nthis:\n  P,E' \\<turnstile> r' \\<le>hb w' \\<or> P,E' \\<turnstile> w' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "hence \"P,E \\<turnstile> r' \\<le>hb w' \\<or> P,E \\<turnstile> w' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  P,E' \\<turnstile> r' \\<le>hb w' \\<or> P,E' \\<turnstile> w' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> r' \\<le>hb w' \\<or> P,E \\<turnstile> w' \\<le>hb r'", "using \\<open>w' < r'\\<close>"], ["proof (prove)\nusing this:\n  P,E' \\<turnstile> r' \\<le>hb w' \\<or> P,E' \\<turnstile> w' \\<le>hb r'\n  w' < r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> r' \\<le>hb w' \\<or> P,E \\<turnstile> w' \\<le>hb r'", "by(auto intro: happens_before_change_prefix[OF _ tsa_ok eq'[symmetric]])"], ["proof (state)\nthis:\n  P,E \\<turnstile> r' \\<le>hb w' \\<or> P,E \\<turnstile> w' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "with \\<open>\\<not> P,E \\<turnstile> r' \\<le>hb w'\\<close>"], ["proof (chain)\npicking this:\n  \\<not> P,E \\<turnstile> r' \\<le>hb w'\n  P,E \\<turnstile> r' \\<le>hb w' \\<or> P,E \\<turnstile> w' \\<le>hb r'", "have \"P,E \\<turnstile> w' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  \\<not> P,E \\<turnstile> r' \\<le>hb w'\n  P,E \\<turnstile> r' \\<le>hb w' \\<or> P,E \\<turnstile> w' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> w' \\<le>hb r'", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> w' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "have \"P,E \\<turnstile> ws r' \\<le>hb w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws r' \\<le>hb w'", "proof(cases \"is_new_action (action_obs E (ws r'))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "case False"], ["proof (state)\nthis:\n  \\<not> is_new_action (action_obs E (ws r'))\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "with \\<open>E \\<turnstile> ws r' \\<le>a r'\\<close>"], ["proof (chain)\npicking this:\n  E \\<turnstile> ws r' \\<le>a r'\n  \\<not> is_new_action (action_obs E (ws r'))", "have \"ws r' \\<le> r'\""], ["proof (prove)\nusing this:\n  E \\<turnstile> ws r' \\<le>a r'\n  \\<not> is_new_action (action_obs E (ws r'))\n\ngoal (1 subgoal):\n 1. ws r' \\<le> r'", "by(auto elim!: action_orderE)"], ["proof (state)\nthis:\n  ws r' \\<le> r'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "moreover"], ["proof (state)\nthis:\n  ws r' \\<le> r'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "from ws_r r'"], ["proof (chain)\npicking this:\n  ws r' \\<in> write_actions E\n  r' \\<in> read_actions E", "have \"ws r' \\<noteq> r'\""], ["proof (prove)\nusing this:\n  ws r' \\<in> write_actions E\n  r' \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. ws r' \\<noteq> r'", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  ws r' \\<noteq> r'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "ultimately"], ["proof (chain)\npicking this:\n  ws r' \\<le> r'\n  ws r' \\<noteq> r'", "have \"ws r' < r'\""], ["proof (prove)\nusing this:\n  ws r' \\<le> r'\n  ws r' \\<noteq> r'\n\ngoal (1 subgoal):\n 1. ws r' < r'", "by simp"], ["proof (state)\nthis:\n  ws r' < r'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "with ws_r"], ["proof (chain)\npicking this:\n  ws r' \\<in> write_actions E\n  ws r' < r'", "have \"ws r' \\<in> write_actions E'\""], ["proof (prove)\nusing this:\n  ws r' \\<in> write_actions E\n  ws r' < r'\n\ngoal (1 subgoal):\n 1. ws r' \\<in> write_actions E'", "by(auto intro: write_actions_change_prefix[OF _ eq'])"], ["proof (state)\nthis:\n  ws r' \\<in> write_actions E'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "hence \"ws r' \\<in> actions E'\""], ["proof (prove)\nusing this:\n  ws r' \\<in> write_actions E'\n\ngoal (1 subgoal):\n 1. ws r' \\<in> actions E'", "by simp"], ["proof (state)\nthis:\n  ws r' \\<in> actions E'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "from adal \\<open>ws r' < r'\\<close>"], ["proof (chain)\npicking this:\n  (ad, al) \\<in> action_loc P E (ws r')\n  ws r' < r'", "have \"(ad, al) \\<in> action_loc P E' (ws r')\""], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E (ws r')\n  ws r' < r'\n\ngoal (1 subgoal):\n 1. (ad, al) \\<in> action_loc P E' (ws r')", "by(subst action_loc_change_prefix[symmetric, OF eq']) simp_all"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P E' (ws r')\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "hence \"P,E' \\<turnstile> ws r' \\<dagger> w'\""], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E' (ws r')\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile>ws r'\\<dagger>w'", "using \\<open>ws r' \\<in> write_actions E'\\<close> \\<open>w' \\<in> write_actions E'\\<close> \\<open>(ad, al) \\<in> action_loc P E' w'\\<close> vol"], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E' (ws r')\n  ws r' \\<in> write_actions E'\n  w' \\<in> write_actions E'\n  (ad, al) \\<in> action_loc P E' w'\n  \\<not> is_volatile P al\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile>ws r'\\<dagger>w'", "unfolding non_volatile_conflict_def"], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E' (ws r')\n  ws r' \\<in> write_actions E'\n  w' \\<in> write_actions E'\n  (ad, al) \\<in> action_loc P E' w'\n  \\<not> is_volatile P al\n\ngoal (1 subgoal):\n 1. (ws r' \\<in> read_actions E' \\<and> w' \\<in> write_actions E' \\<or>\n     ws r' \\<in> write_actions E' \\<and> w' \\<in> read_actions E' \\<or>\n     ws r' \\<in> write_actions E' \\<and> w' \\<in> write_actions E') \\<and>\n    (\\<exists>ad al.\n        (ad, al)\n        \\<in> action_loc P E' (ws r') \\<inter> action_loc P E' w' \\<and>\n        \\<not> is_volatile P al)", "by auto"], ["proof (state)\nthis:\n  P,E' \\<turnstile>ws r'\\<dagger>w'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "with sync \\<open>E' \\<in> \\<E>\\<close> \\<open>P \\<turnstile> (E', ws') \\<surd>\\<close> sc' \\<open>ws r' \\<in> actions E'\\<close> \\<open>w' \\<in> actions E'\\<close>"], ["proof (chain)\npicking this:\n  correctly_synchronized P \\<E>\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n  ws r' \\<in> actions E'\n  w' \\<in> actions E'\n  P,E' \\<turnstile>ws r'\\<dagger>w'", "have \"P,E' \\<turnstile> ws r' \\<le>hb w' \\<or> P,E' \\<turnstile> w' \\<le>hb ws r'\""], ["proof (prove)\nusing this:\n  correctly_synchronized P \\<E>\n  E' \\<in> \\<E>\n  P \\<turnstile> (E', ws') \\<surd>\n  sequentially_consistent P (E', ws')\n  ws r' \\<in> actions E'\n  w' \\<in> actions E'\n  P,E' \\<turnstile>ws r'\\<dagger>w'\n\ngoal (1 subgoal):\n 1. P,E' \\<turnstile> ws r' \\<le>hb w' \\<or>\n    P,E' \\<turnstile> w' \\<le>hb ws r'", "by(rule correctly_synchronizedD[rule_format])"], ["proof (state)\nthis:\n  P,E' \\<turnstile> ws r' \\<le>hb w' \\<or>\n  P,E' \\<turnstile> w' \\<le>hb ws r'\n\ngoal (2 subgoals):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'\n 2. \\<not> is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "thus \"P,E \\<turnstile> ws r' \\<le>hb w'\""], ["proof (prove)\nusing this:\n  P,E' \\<turnstile> ws r' \\<le>hb w' \\<or>\n  P,E' \\<turnstile> w' \\<le>hb ws r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws r' \\<le>hb w'", "using \\<open>w' < r'\\<close> \\<open>ws r' < r'\\<close> \\<open>\\<not> P,E \\<turnstile> w' \\<le>hb ws r'\\<close>"], ["proof (prove)\nusing this:\n  P,E' \\<turnstile> ws r' \\<le>hb w' \\<or>\n  P,E' \\<turnstile> w' \\<le>hb ws r'\n  w' < r'\n  ws r' < r'\n  \\<not> P,E \\<turnstile> w' \\<le>hb ws r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws r' \\<le>hb w'", "by(auto dest: happens_before_change_prefix[OF _ tsa_ok eq'[symmetric]])"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws r' \\<le>hb w'\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "case True"], ["proof (state)\nthis:\n  is_new_action (action_obs E (ws r'))\n\ngoal (1 subgoal):\n 1. is_new_action (action_obs E (ws r')) \\<Longrightarrow>\n    P,E \\<turnstile> ws r' \\<le>hb w'", "with tsa_ok ws_r w' \\<open>\\<not> is_new_action (action_obs E w')\\<close>"], ["proof (chain)\npicking this:\n  thread_start_actions_ok E\n  ws r' \\<in> write_actions E\n  w' \\<in> write_actions E\n  \\<not> is_new_action (action_obs E w')\n  is_new_action (action_obs E (ws r'))", "show \"P,E \\<turnstile> ws r' \\<le>hb w'\""], ["proof (prove)\nusing this:\n  thread_start_actions_ok E\n  ws r' \\<in> write_actions E\n  w' \\<in> write_actions E\n  \\<not> is_new_action (action_obs E w')\n  is_new_action (action_obs E (ws r'))\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws r' \\<le>hb w'", "by(auto intro: happens_before_new_not_new)"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws r' \\<le>hb w'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws r' \\<le>hb w'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws r' \\<le>hb w'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "from wf"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) \\<surd>", "have \"is_write_seen P E ws\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. is_write_seen P E ws", "by(rule wf_exec_is_write_seenD)"], ["proof (state)\nthis:\n  is_write_seen P E ws\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> ws r' \\<le>hb w'\n  is_write_seen P E ws", "have \"w' = ws r'\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws r' \\<le>hb w'\n  is_write_seen P E ws\n\ngoal (1 subgoal):\n 1. w' = ws r'", "using is_write_seenD[OF \\<open>is_write_seen P E ws\\<close> \\<open>r' \\<in> read_actions E\\<close> obs_r']\n      \\<open>w' \\<in> write_actions E\\<close> \\<open>(ad, al) \\<in> action_loc P E w'\\<close> \\<open>P,E \\<turnstile> w' \\<le>hb r'\\<close>"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws r' \\<le>hb w'\n  is_write_seen P E ws\n  ws r' \\<in> write_actions E \\<and>\n  (ad, al) \\<in> action_loc P E (ws r') \\<and>\n  value_written P E (ws r') (ad, al) = v \\<and>\n  \\<not> P,E \\<turnstile> r' \\<le>hb ws r' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> r' \\<le>so ws r') \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws r' \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb r' \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws r' \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so r') \\<longrightarrow>\n      a' = ws r')\n  w' \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E w'\n  P,E \\<turnstile> w' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. w' = ws r'", "by auto"], ["proof (state)\nthis:\n  w' = ws r'\n\ngoal (1 subgoal):\n 1. \\<not> sequentially_consistent P (E, ws) \\<Longrightarrow> False", "with porder_happens_before[of E P] \\<open>\\<not> P,E \\<turnstile> w' \\<le>hb ws r'\\<close> ws_r"], ["proof (chain)\npicking this:\n  porder_on (actions E) (happens_before P E)\n  \\<not> P,E \\<turnstile> w' \\<le>hb ws r'\n  ws r' \\<in> write_actions E\n  w' = ws r'", "show False"], ["proof (prove)\nusing this:\n  porder_on (actions E) (happens_before P E)\n  \\<not> P,E \\<turnstile> w' \\<le>hb ws r'\n  ws r' \\<in> write_actions E\n  w' = ws r'\n\ngoal (1 subgoal):\n 1. False", "by(auto dest: refl_onPD[where a=\"ws r'\"] elim!: porder_onE)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma justified_action_committedD:\n  assumes justified: \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n  and a: \"a \\<in> actions E\"\n  obtains n a' where \"a = action_translation (J n) a'\" \"a' \\<in> committed (J n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n a'.\n        \\<lbrakk>a = action_translation (J n) a';\n         a' \\<in> committed (J n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n a'.\n       a = action_translation (J n) a' \\<and> a' \\<in> committed (J n)", "from justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have \"actions E = (\\<Union>n. action_translation (J n) ` committed (J n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. actions E = (\\<Union>n. action_translation (J n) ` committed (J n))", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  actions E = (\\<Union>n. action_translation (J n) ` committed (J n))\n\ngoal (1 subgoal):\n 1. \\<exists>n a'.\n       a = action_translation (J n) a' \\<and> a' \\<in> committed (J n)", "with a"], ["proof (chain)\npicking this:\n  a \\<in> actions E\n  actions E = (\\<Union>n. action_translation (J n) ` committed (J n))", "show \"\\<exists>n a'. a = action_translation (J n) a' \\<and> a' \\<in> committed (J n)\""], ["proof (prove)\nusing this:\n  a \\<in> actions E\n  actions E = (\\<Union>n. action_translation (J n) ` committed (J n))\n\ngoal (1 subgoal):\n 1. \\<exists>n a'.\n       a = action_translation (J n) a' \\<and> a' \\<in> committed (J n)", "by auto"], ["proof (state)\nthis:\n  \\<exists>n a'.\n     a = action_translation (J n) a' \\<and> a' \\<in> committed (J n)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem drf_weak:\n  assumes sync: \"correctly_synchronized P \\<E>\"\n  and legal: \"weakly_legal_execution P \\<E> (E, ws)\"\n  shows \"sequentially_consistent P (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sequentially_consistent P (E, ws)", "using legal_wf_execD[OF legal] legal_\\<E>D[OF legal] sync"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) \\<surd>\n  E \\<in> \\<E>\n  correctly_synchronized P \\<E>\n\ngoal (1 subgoal):\n 1. sequentially_consistent P (E, ws)", "proof(rule drf_lemma)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "assume \"r \\<in> read_actions E\""], ["proof (state)\nthis:\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "from legal"], ["proof (chain)\npicking this:\n  weakly_legal_execution P \\<E> (E, ws)", "obtain J where E: \"E \\<in> \\<E>\"\n    and wf_exec: \"P \\<turnstile> (E, ws) \\<surd>\"\n    and J: \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n    and range_J: \"range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\""], ["proof (prove)\nusing this:\n  weakly_legal_execution P \\<E> (E, ws)\n\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>E \\<in> \\<E>; P \\<turnstile> (E, ws) \\<surd>;\n         P \\<turnstile> (E, ws) weakly_justified_by J;\n         range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule legal_executionE)"], ["proof (state)\nthis:\n  E \\<in> \\<E>\n  P \\<turnstile> (E, ws) \\<surd>\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "let ?E = \"\\<lambda>n. justifying_exec (J n)\"\n    and ?ws = \"\\<lambda>n. justifying_ws (J n)\"\n    and ?C = \"\\<lambda>n. committed (J n)\"\n    and ?\\<phi> = \"\\<lambda>n. action_translation (J n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "from \\<open>r \\<in> read_actions E\\<close>"], ["proof (chain)\npicking this:\n  r \\<in> read_actions E", "have \"r \\<in> actions E\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. r \\<in> actions E", "by simp"], ["proof (state)\nthis:\n  r \\<in> actions E\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "with J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r \\<in> actions E", "obtain n r' where r: \"r = action_translation (J n) r'\"\n    and r': \"r' \\<in> ?C n\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r \\<in> actions E\n\ngoal (1 subgoal):\n 1. (\\<And>n r'.\n        \\<lbrakk>r = action_translation (J n) r';\n         r' \\<in> committed (J n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule justified_action_committedD)"], ["proof (state)\nthis:\n  r = action_translation (J n) r'\n  r' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "note \\<open>r \\<in> read_actions E\\<close>"], ["proof (state)\nthis:\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "moreover"], ["proof (state)\nthis:\n  r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have wfan: \"wf_action_translation_on (?E n) E (?C n) (?\\<phi> n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. wf_action_translation E (J n)", "by(simp add: wf_action_translations_def)"], ["proof (state)\nthis:\n  wf_action_translation E (J n)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "hence \"action_obs (?E n) r' \\<approx> action_obs E r\""], ["proof (prove)\nusing this:\n  wf_action_translation E (J n)\n\ngoal (1 subgoal):\n 1. action_obs (justifying_exec (J n)) r' \\<approx> action_obs E r", "using r'"], ["proof (prove)\nusing this:\n  wf_action_translation E (J n)\n  r' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. action_obs (justifying_exec (J n)) r' \\<approx> action_obs E r", "unfolding r"], ["proof (prove)\nusing this:\n  wf_action_translation E (J n)\n  r' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. action_obs (justifying_exec (J n))\n     r' \\<approx> action_obs E (action_translation (J n) r')", "by(blast dest: wf_action_translation_on_actionD)"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J n)) r' \\<approx> action_obs E r\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "moreover"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J n)) r' \\<approx> action_obs E r\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "from J r'"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> committed (J n)", "have \"r' \\<in> actions (?E n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. r' \\<in> actions (justifying_exec (J n))", "by(auto simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  r' \\<in> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "ultimately"], ["proof (chain)\npicking this:\n  r \\<in> read_actions E\n  action_obs (justifying_exec (J n)) r' \\<approx> action_obs E r\n  r' \\<in> actions (justifying_exec (J n))", "have \"r' \\<in> read_actions (?E n)\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions E\n  action_obs (justifying_exec (J n)) r' \\<approx> action_obs E r\n  r' \\<in> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J n))", "unfolding r"], ["proof (prove)\nusing this:\n  action_translation (J n) r' \\<in> read_actions E\n  action_obs (justifying_exec (J n))\n   r' \\<approx> action_obs E (action_translation (J n) r')\n  r' \\<in> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r' \\<in> read_actions (justifying_exec (J n))", "by cases(auto intro: read_actions.intros)"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "hence \"P,E \\<turnstile> ws (?\\<phi> n r') \\<le>hb ?\\<phi> n r'\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J n)\n                          r') \\<le>hb action_translation (J n) r'", "using \\<open>r' \\<in> ?C n\\<close>"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J n))\n  r' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J n)\n                          r') \\<le>hb action_translation (J n) r'", "proof(induct n arbitrary: r')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r'.\n       \\<lbrakk>r' \\<in> read_actions (justifying_exec (J 0));\n        r' \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J 0) r') \\<le>hb action_translation (J 0) r'\n 2. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "case 0"], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (J 0))\n  r' \\<in> committed (J 0)\n\ngoal (2 subgoals):\n 1. \\<And>r'.\n       \\<lbrakk>r' \\<in> read_actions (justifying_exec (J 0));\n        r' \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J 0) r') \\<le>hb action_translation (J 0) r'\n 2. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have \"?C 0 = {}\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. committed (J 0) = {}", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  committed (J 0) = {}\n\ngoal (2 subgoals):\n 1. \\<And>r'.\n       \\<lbrakk>r' \\<in> read_actions (justifying_exec (J 0));\n        r' \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J 0) r') \\<le>hb action_translation (J 0) r'\n 2. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "with 0"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions (justifying_exec (J 0))\n  r' \\<in> committed (J 0)\n  committed (J 0) = {}", "have False"], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J 0))\n  r' \\<in> committed (J 0)\n  committed (J 0) = {}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>r'.\n       \\<lbrakk>r' \\<in> read_actions (justifying_exec (J 0));\n        r' \\<in> committed (J 0)\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J 0) r') \\<le>hb action_translation (J 0) r'\n 2. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J 0)\n                          r') \\<le>hb action_translation (J 0) r'", ".."], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J 0)\n                        r') \\<le>hb action_translation (J 0) r'\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "case (Suc n r)"], ["proof (state)\nthis:\n  \\<lbrakk>?r' \\<in> read_actions (justifying_exec (J n));\n   ?r' \\<in> committed (J n)\\<rbrakk>\n  \\<Longrightarrow> P,E \\<turnstile> ws\n(action_translation (J n) ?r') \\<le>hb action_translation (J n) ?r'\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "note r = \\<open>r \\<in> read_actions (?E (Suc n))\\<close>"], ["proof (state)\nthis:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have wfan: \"wf_action_translation_on (?E n) E (?C n) (?\\<phi> n)\"\n      and wfaSn: \"wf_action_translation_on (?E (Suc n)) E (?C (Suc n)) (?\\<phi> (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. wf_action_translation E (J n) &&& wf_action_translation E (J (Suc n))", "by(simp_all add: wf_action_translations_def)"], ["proof (state)\nthis:\n  wf_action_translation E (J n)\n  wf_action_translation E (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from wfaSn"], ["proof (chain)\npicking this:\n  wf_action_translation E (J (Suc n))", "have injSn: \"inj_on (?\\<phi> (Suc n)) (actions (?E (Suc n)))\""], ["proof (prove)\nusing this:\n  wf_action_translation E (J (Suc n))\n\ngoal (1 subgoal):\n 1. inj_on (action_translation (J (Suc n)))\n     (actions (justifying_exec (J (Suc n))))", "by(rule wf_action_translation_on_inj_onD)"], ["proof (state)\nthis:\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have C_sub_A: \"?C (Suc n) \\<subseteq> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))", "by(simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have wf: \"P \\<turnstile> (?E (Suc n), ?ws (Suc n)) \\<surd>\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (justifying_exec (J (Suc n)),\n                    justifying_ws (J (Suc n))) \\<surd>", "by(simp add: justification_well_formed_def)"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (J (Suc n)),\n                  justifying_ws (J (Suc n))) \\<surd>\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "moreover"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (J (Suc n)),\n                  justifying_ws (J (Suc n))) \\<surd>\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from range_J"], ["proof (chain)\npicking this:\n  range (justifying_exec \\<circ> J) \\<subseteq> \\<E>", "have \"?E (Suc n) \\<in> \\<E>\""], ["proof (prove)\nusing this:\n  range (justifying_exec \\<circ> J) \\<subseteq> \\<E>\n\ngoal (1 subgoal):\n 1. justifying_exec (J (Suc n)) \\<in> \\<E>", "by auto"], ["proof (state)\nthis:\n  justifying_exec (J (Suc n)) \\<in> \\<E>\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "ultimately"], ["proof (chain)\npicking this:\n  P \\<turnstile> (justifying_exec (J (Suc n)),\n                  justifying_ws (J (Suc n))) \\<surd>\n  justifying_exec (J (Suc n)) \\<in> \\<E>", "have sc: \"sequentially_consistent P (?E (Suc n), ?ws (Suc n))\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (justifying_exec (J (Suc n)),\n                  justifying_ws (J (Suc n))) \\<surd>\n  justifying_exec (J (Suc n)) \\<in> \\<E>\n\ngoal (1 subgoal):\n 1. sequentially_consistent P\n     (justifying_exec (J (Suc n)), justifying_ws (J (Suc n)))", "using sync"], ["proof (prove)\nusing this:\n  P \\<turnstile> (justifying_exec (J (Suc n)),\n                  justifying_ws (J (Suc n))) \\<surd>\n  justifying_exec (J (Suc n)) \\<in> \\<E>\n  correctly_synchronized P \\<E>\n\ngoal (1 subgoal):\n 1. sequentially_consistent P\n     (justifying_exec (J (Suc n)), justifying_ws (J (Suc n)))", "proof(rule drf_lemma)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions (justifying_exec (J (Suc n))) \\<Longrightarrow>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r \\<le>hb r", "fix r'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions (justifying_exec (J (Suc n))) \\<Longrightarrow>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r \\<le>hb r", "assume r': \"r' \\<in> read_actions (?E (Suc n))\""], ["proof (state)\nthis:\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions (justifying_exec (J (Suc n))) \\<Longrightarrow>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r \\<le>hb r", "hence \"r' \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r' \\<in> actions (justifying_exec (J (Suc n)))", "by simp"], ["proof (state)\nthis:\n  r' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions (justifying_exec (J (Suc n))) \\<Longrightarrow>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r \\<le>hb r", "show \"P,?E (Suc n) \\<turnstile> ?ws (Suc n) r' \\<le>hb r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "proof(cases \"?\\<phi> (Suc n) r' \\<in> ?\\<phi> n ` ?C n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "case True"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r'\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "then"], ["proof (chain)\npicking this:\n  action_translation (J (Suc n)) r'\n  \\<in> action_translation (J n) ` committed (J n)", "obtain r'' where r'': \"r'' \\<in> ?C n\"\n          and r'_r'': \"?\\<phi> (Suc n) r' = ?\\<phi> n r''\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r'\n  \\<in> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. (\\<And>r''.\n        \\<lbrakk>r'' \\<in> committed (J n);\n         action_translation (J (Suc n)) r' =\n         action_translation (J n) r''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  r'' \\<in> committed (J n)\n  action_translation (J (Suc n)) r' = action_translation (J n) r''\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "from r'' wfan"], ["proof (chain)\npicking this:\n  r'' \\<in> committed (J n)\n  wf_action_translation E (J n)", "have \"action_tid (?E n) r'' = action_tid E (?\\<phi> n r'')\"\n          and \"action_obs (?E n) r'' \\<approx> action_obs E (?\\<phi> n r'')\""], ["proof (prove)\nusing this:\n  r'' \\<in> committed (J n)\n  wf_action_translation E (J n)\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r'' =\n    action_tid E (action_translation (J n) r'') &&&\n    action_obs (justifying_exec (J n))\n     r'' \\<approx> action_obs E (action_translation (J n) r'')", "by(blast dest: wf_action_translation_on_actionD)+"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r'' =\n  action_tid E (action_translation (J n) r'')\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs E (action_translation (J n) r'')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "moreover"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r'' =\n  action_tid E (action_translation (J n) r'')\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs E (action_translation (J n) r'')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have \"?\\<phi> n ` ?C n \\<subseteq> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. action_translation (J n) ` committed (J n)\n    \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "by(simp add: is_commit_sequence_def)"], ["proof (state)\nthis:\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with r''"], ["proof (chain)\npicking this:\n  r'' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))", "have \"?\\<phi> (Suc n) r' \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  r'' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "unfolding r'_r''"], ["proof (prove)\nusing this:\n  r'' \\<in> committed (J n)\n  action_translation (J n) ` committed (J n)\n  \\<subseteq> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_translation (J n) r''\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by auto"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r'\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "hence \"r' \\<in> ?C (Suc n)\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r'\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. r' \\<in> committed (J (Suc n))", "unfolding inj_on_image_mem_iff[OF injSn C_sub_A \\<open>r' \\<in> actions (?E (Suc n))\\<close>]"], ["proof (prove)\nusing this:\n  r' \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. r' \\<in> committed (J (Suc n))", "."], ["proof (state)\nthis:\n  r' \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with wfaSn"], ["proof (chain)\npicking this:\n  wf_action_translation E (J (Suc n))\n  r' \\<in> committed (J (Suc n))", "have \"action_tid (?E (Suc n)) r' = action_tid E (?\\<phi> (Suc n) r')\"\n          and \"action_obs (?E (Suc n)) r' \\<approx> action_obs E (?\\<phi> (Suc n) r')\""], ["proof (prove)\nusing this:\n  wf_action_translation E (J (Suc n))\n  r' \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J (Suc n))) r' =\n    action_tid E (action_translation (J (Suc n)) r') &&&\n    action_obs (justifying_exec (J (Suc n)))\n     r' \\<approx> action_obs E (action_translation (J (Suc n)) r')", "by(blast dest: wf_action_translation_on_actionD)+"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J (Suc n))) r' =\n  action_tid E (action_translation (J (Suc n)) r')\n  action_obs (justifying_exec (J (Suc n)))\n   r' \\<approx> action_obs E (action_translation (J (Suc n)) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "ultimately"], ["proof (chain)\npicking this:\n  action_tid (justifying_exec (J n)) r'' =\n  action_tid E (action_translation (J n) r'')\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs E (action_translation (J n) r'')\n  action_tid (justifying_exec (J (Suc n))) r' =\n  action_tid E (action_translation (J (Suc n)) r')\n  action_obs (justifying_exec (J (Suc n)))\n   r' \\<approx> action_obs E (action_translation (J (Suc n)) r')", "have tid: \"action_tid (?E n) r'' = action_tid (?E (Suc n)) r'\"\n          and obs: \"action_obs (?E n) r'' \\<approx> action_obs (?E (Suc n)) r'\""], ["proof (prove)\nusing this:\n  action_tid (justifying_exec (J n)) r'' =\n  action_tid E (action_translation (J n) r'')\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs E (action_translation (J n) r'')\n  action_tid (justifying_exec (J (Suc n))) r' =\n  action_tid E (action_translation (J (Suc n)) r')\n  action_obs (justifying_exec (J (Suc n)))\n   r' \\<approx> action_obs E (action_translation (J (Suc n)) r')\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r'' =\n    action_tid (justifying_exec (J (Suc n))) r' &&&\n    action_obs (justifying_exec (J n))\n     r'' \\<approx> action_obs (justifying_exec (J (Suc n))) r'", "unfolding r'_r''"], ["proof (prove)\nusing this:\n  action_tid (justifying_exec (J n)) r'' =\n  action_tid E (action_translation (J n) r'')\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs E (action_translation (J n) r'')\n  action_tid (justifying_exec (J (Suc n))) r' =\n  action_tid E (action_translation (J n) r'')\n  action_obs (justifying_exec (J (Suc n)))\n   r' \\<approx> action_obs E (action_translation (J n) r'')\n\ngoal (1 subgoal):\n 1. action_tid (justifying_exec (J n)) r'' =\n    action_tid (justifying_exec (J (Suc n))) r' &&&\n    action_obs (justifying_exec (J n))\n     r'' \\<approx> action_obs (justifying_exec (J (Suc n))) r'", "by(auto intro: sim_action_trans sim_action_sym)"], ["proof (state)\nthis:\n  action_tid (justifying_exec (J n)) r'' =\n  action_tid (justifying_exec (J (Suc n))) r'\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs (justifying_exec (J (Suc n))) r'\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "from J"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have \"?C n \\<subseteq> actions (?E n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. committed (J n) \\<subseteq> actions (justifying_exec (J n))", "by(simp add: committed_subset_actions_def)"], ["proof (state)\nthis:\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with r''"], ["proof (chain)\npicking this:\n  r'' \\<in> committed (J n)\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))", "have \"r'' \\<in> actions (?E n)\""], ["proof (prove)\nusing this:\n  r'' \\<in> committed (J n)\n  committed (J n) \\<subseteq> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r'' \\<in> actions (justifying_exec (J n))", "by blast"], ["proof (state)\nthis:\n  r'' \\<in> actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with r' obs"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs (justifying_exec (J (Suc n))) r'\n  r'' \\<in> actions (justifying_exec (J n))", "have \"r'' \\<in> read_actions (?E n)\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J n))\n   r'' \\<approx> action_obs (justifying_exec (J (Suc n))) r'\n  r'' \\<in> actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. r'' \\<in> read_actions (justifying_exec (J n))", "by cases(auto intro: read_actions.intros)"], ["proof (state)\nthis:\n  r'' \\<in> read_actions (justifying_exec (J n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "hence hb'': \"P,E \\<turnstile> ws (?\\<phi> n r'') \\<le>hb ?\\<phi> n r''\""], ["proof (prove)\nusing this:\n  r'' \\<in> read_actions (justifying_exec (J n))\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J n)\n                          r'') \\<le>hb action_translation (J n) r''", "using \\<open>r'' \\<in> ?C n\\<close>"], ["proof (prove)\nusing this:\n  r'' \\<in> read_actions (justifying_exec (J n))\n  r'' \\<in> committed (J n)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J n)\n                          r'') \\<le>hb action_translation (J n) r''", "by(rule Suc)"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J n)\n                        r'') \\<le>hb action_translation (J n) r''\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "have r_conv_inv: \"r' = inv_into (actions (?E (Suc n))) (?\\<phi> (Suc n)) (?\\<phi> n r'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J n) r'')", "using \\<open>r' \\<in> actions (?E (Suc n))\\<close>"], ["proof (prove)\nusing this:\n  r' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r' =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J n) r'')", "unfolding r'_r''[symmetric]"], ["proof (prove)\nusing this:\n  r' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r' =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J (Suc n)) r')", "by(simp add: inv_into_f_f[OF injSn])"], ["proof (state)\nthis:\n  r' =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r'')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with \\<open>r'' \\<in> ?C n\\<close> r' J \\<open>r'' \\<in> read_actions (?E n)\\<close>"], ["proof (chain)\npicking this:\n  r'' \\<in> committed (J n)\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r'' \\<in> read_actions (justifying_exec (J n))\n  r' =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r'')", "have ws_eq[symmetric]: \"?\\<phi> (Suc n) (?ws (Suc n) r') = ws (?\\<phi> n r'')\""], ["proof (prove)\nusing this:\n  r'' \\<in> committed (J n)\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r'' \\<in> read_actions (justifying_exec (J n))\n  r' =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (action_translation (J n) r'')\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r') =\n    ws (action_translation (J n) r'')", "by(simp add: write_seen_committed_def Let_def)"], ["proof (state)\nthis:\n  ws (action_translation (J n) r'') =\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with r'_r''[symmetric] hb''"], ["proof (chain)\npicking this:\n  action_translation (J n) r'' = action_translation (J (Suc n)) r'\n  P,E \\<turnstile> ws (action_translation (J n)\n                        r'') \\<le>hb action_translation (J n) r''\n  ws (action_translation (J n) r'') =\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r')", "have \"P,E \\<turnstile> ?\\<phi> (Suc n) (?ws (Suc n) r') \\<le>hb ?\\<phi> (Suc n) r'\""], ["proof (prove)\nusing this:\n  action_translation (J n) r'' = action_translation (J (Suc n)) r'\n  P,E \\<turnstile> ws (action_translation (J n)\n                        r'') \\<le>hb action_translation (J n) r''\n  ws (action_translation (J n) r'') =\n  action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r')\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> action_translation (J (Suc n))\n                      (justifying_ws (J (Suc n))\n                        r') \\<le>hb action_translation (J (Suc n)) r'", "by simp"], ["proof (state)\nthis:\n  P,E \\<turnstile> action_translation (J (Suc n))\n                    (justifying_ws (J (Suc n))\n                      r') \\<le>hb action_translation (J (Suc n)) r'\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> action_translation (J (Suc n))\n                    (justifying_ws (J (Suc n))\n                      r') \\<le>hb action_translation (J (Suc n)) r'\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "from J r' \\<open>r' \\<in> committed (J (Suc n))\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  r' \\<in> committed (J (Suc n))", "have \"ws (?\\<phi> (Suc n) r') \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  r' \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r')\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by(rule weakly_justified_write_seen_hb_read_committed)"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r')\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "then"], ["proof (chain)\npicking this:\n  ws (action_translation (J (Suc n)) r')\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "obtain w' where w': \"ws (?\\<phi> (Suc n) r') = ?\\<phi> (Suc n) w'\"\n          and committed_w': \"w' \\<in> ?C (Suc n)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r')\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        \\<lbrakk>ws (action_translation (J (Suc n)) r') =\n                 action_translation (J (Suc n)) w';\n         w' \\<in> committed (J (Suc n))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r') = action_translation (J (Suc n)) w'\n  w' \\<in> committed (J (Suc n))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with C_sub_A"], ["proof (chain)\npicking this:\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n  ws (action_translation (J (Suc n)) r') = action_translation (J (Suc n)) w'\n  w' \\<in> committed (J (Suc n))", "have w'_action: \"w' \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n  ws (action_translation (J (Suc n)) r') = action_translation (J (Suc n)) w'\n  w' \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. w' \\<in> actions (justifying_exec (J (Suc n)))", "by auto"], ["proof (state)\nthis:\n  w' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "hence w'_def: \"w' = inv_into (actions (?E (Suc n))) (?\\<phi> (Suc n)) (ws (?\\<phi> (Suc n) r'))\""], ["proof (prove)\nusing this:\n  w' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. w' =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r'))", "using injSn"], ["proof (prove)\nusing this:\n  w' \\<in> actions (justifying_exec (J (Suc n)))\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n\ngoal (1 subgoal):\n 1. w' =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r'))", "unfolding w'"], ["proof (prove)\nusing this:\n  w' \\<in> actions (justifying_exec (J (Suc n)))\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n\ngoal (1 subgoal):\n 1. w' =\n    inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n))) (action_translation (J (Suc n)) w')", "by simp"], ["proof (state)\nthis:\n  w' =\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r'))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "from J r'  \\<open>r' \\<in> committed (J (Suc n))\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  r' \\<in> committed (J (Suc n))", "have hb_eq: \"P,E \\<turnstile> ws (?\\<phi> (Suc n) r') \\<le>hb ?\\<phi> (Suc n) r' \\<longleftrightarrow> P,?E (Suc n) \\<turnstile> w' \\<le>hb r'\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  r' \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                           r') \\<le>hb action_translation (J (Suc n)) r') =\n    (P,justifying_exec (J (Suc n)) \\<turnstile> w' \\<le>hb r')", "unfolding w'_def"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  r' \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                           r') \\<le>hb action_translation (J (Suc n)) r') =\n    (P,justifying_exec\n        (J (Suc n)) \\<turnstile> inv_into\n                                  (actions (justifying_exec (J (Suc n))))\n                                  (action_translation (J (Suc n)))\n                                  (ws (action_translation (J (Suc n))\n  r')) \\<le>hb r')", "by(simp add: happens_before_committed_weak_def)"], ["proof (state)\nthis:\n  (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                         r') \\<le>hb action_translation (J (Suc n)) r') =\n  (P,justifying_exec (J (Suc n)) \\<turnstile> w' \\<le>hb r')\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "from r'"], ["proof (chain)\npicking this:\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))", "obtain ad al v where \"action_obs (?E (Suc n)) r' = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<And>ad al v.\n        action_obs (justifying_exec (J (Suc n))) r' =\n        NormalAction (ReadMem ad al v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases)"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J (Suc n))) r' =\n  NormalAction (ReadMem ad al v)\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "from is_write_seenD[OF wf_exec_is_write_seenD[OF wf] r' this]"], ["proof (chain)\npicking this:\n  justifying_ws (J (Suc n)) r'\n  \\<in> write_actions (justifying_exec (J (Suc n))) \\<and>\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (justifying_ws (J (Suc n)) r') \\<and>\n  value_written P (justifying_exec (J (Suc n)))\n   (justifying_ws (J (Suc n)) r') (ad, al) =\n  v \\<and>\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r' \\<le>hb justifying_ws (J (Suc n))\n           r' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,justifying_exec\n             (J (Suc n)) \\<turnstile> r' \\<le>so justifying_ws (J (Suc n))\n            r') \\<and>\n  (\\<forall>a'\\<in>write_actions (justifying_exec (J (Suc n))).\n      (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) a' \\<and>\n      (P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r' \\<le>hb a' \\<and>\n       P,justifying_exec (J (Suc n)) \\<turnstile> a' \\<le>hb r' \\<or>\n       is_volatile P al \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r' \\<le>so a' \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> a' \\<le>so r') \\<longrightarrow>\n      a' = justifying_ws (J (Suc n)) r')", "have \"?ws (Suc n) r' \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  justifying_ws (J (Suc n)) r'\n  \\<in> write_actions (justifying_exec (J (Suc n))) \\<and>\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (justifying_ws (J (Suc n)) r') \\<and>\n  value_written P (justifying_exec (J (Suc n)))\n   (justifying_ws (J (Suc n)) r') (ad, al) =\n  v \\<and>\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r' \\<le>hb justifying_ws (J (Suc n))\n           r' \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,justifying_exec\n             (J (Suc n)) \\<turnstile> r' \\<le>so justifying_ws (J (Suc n))\n            r') \\<and>\n  (\\<forall>a'\\<in>write_actions (justifying_exec (J (Suc n))).\n      (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) a' \\<and>\n      (P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r' \\<le>hb a' \\<and>\n       P,justifying_exec (J (Suc n)) \\<turnstile> a' \\<le>hb r' \\<or>\n       is_volatile P al \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n))\n                                    r' \\<le>so a' \\<and>\n       P,justifying_exec\n          (J (Suc n)) \\<turnstile> a' \\<le>so r') \\<longrightarrow>\n      a' = justifying_ws (J (Suc n)) r')\n\ngoal (1 subgoal):\n 1. justifying_ws (J (Suc n)) r' \\<in> actions (justifying_exec (J (Suc n)))", "by(auto)"], ["proof (state)\nthis:\n  justifying_ws (J (Suc n)) r' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with injSn"], ["proof (chain)\npicking this:\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n  justifying_ws (J (Suc n)) r' \\<in> actions (justifying_exec (J (Suc n)))", "have \"w' = ?ws (Suc n) r'\""], ["proof (prove)\nusing this:\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n  justifying_ws (J (Suc n)) r' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. w' = justifying_ws (J (Suc n)) r'", "unfolding w'_def ws_eq[folded r'_r'']"], ["proof (prove)\nusing this:\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n  justifying_ws (J (Suc n)) r' \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (action_translation (J (Suc n)) (justifying_ws (J (Suc n)) r')) =\n    justifying_ws (J (Suc n)) r'", "by(rule inv_into_f_f)"], ["proof (state)\nthis:\n  w' = justifying_ws (J (Suc n)) r'\n\ngoal (2 subgoals):\n 1. action_translation (J (Suc n)) r'\n    \\<in> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n 2. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "thus ?thesis"], ["proof (prove)\nusing this:\n  w' = justifying_ws (J (Suc n)) r'\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "using hb'' hb_eq w'_action r'_r''[symmetric] w' injSn"], ["proof (prove)\nusing this:\n  w' = justifying_ws (J (Suc n)) r'\n  P,E \\<turnstile> ws (action_translation (J n)\n                        r'') \\<le>hb action_translation (J n) r''\n  (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                         r') \\<le>hb action_translation (J (Suc n)) r') =\n  (P,justifying_exec (J (Suc n)) \\<turnstile> w' \\<le>hb r')\n  w' \\<in> actions (justifying_exec (J (Suc n)))\n  action_translation (J n) r'' = action_translation (J (Suc n)) r'\n  ws (action_translation (J (Suc n)) r') = action_translation (J (Suc n)) w'\n  inj_on (action_translation (J (Suc n)))\n   (actions (justifying_exec (J (Suc n))))\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "by simp"], ["proof (state)\nthis:\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "case False"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r'\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r'\n    \\<notin> action_translation (J n) ` committed (J n) \\<Longrightarrow>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "with J r'"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_translation (J (Suc n)) r'\n  \\<notin> action_translation (J n) ` committed (J n)", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r' \\<in> read_actions (justifying_exec (J (Suc n)))\n  action_translation (J (Suc n)) r'\n  \\<notin> action_translation (J n) ` committed (J n)\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'", "by(auto simp add: uncommitted_reads_see_hb_def)"], ["proof (state)\nthis:\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> justifying_ws (J (Suc n)) r' \\<le>hb r'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sequentially_consistent P\n   (justifying_exec (J (Suc n)), justifying_ws (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from r"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))", "have \"r \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. r \\<in> actions (justifying_exec (J (Suc n)))", "by simp"], ["proof (state)\nthis:\n  r \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "let ?w = \"inv_into (actions (?E (Suc n))) (?\\<phi> (Suc n)) (ws (?\\<phi> (Suc n) r))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from J r \\<open>r \\<in> ?C (Suc n)\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))", "have ws_rE_comm: \"ws (?\\<phi> (Suc n) r) \\<in> ?\\<phi> (Suc n) ` ?C (Suc n)\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r)\n    \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))", "by(rule weakly_justified_write_seen_hb_read_committed)"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "hence \"?w \\<in> ?C (Suc n)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))\n    \\<in> committed (J (Suc n))", "using C_sub_A"], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))\n    \\<in> committed (J (Suc n))", "by(auto simp add: inv_into_f_f[OF injSn])"], ["proof (state)\nthis:\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "with C_sub_A"], ["proof (chain)\npicking this:\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> committed (J (Suc n))", "have w: \"?w \\<in> actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))\n    \\<in> actions (justifying_exec (J (Suc n)))", "by blast"], ["proof (state)\nthis:\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from ws_rE_comm C_sub_A"], ["proof (chain)\npicking this:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))", "have w_eq: \"?\\<phi> (Suc n) ?w = ws (?\\<phi> (Suc n) r)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r)\n  \\<in> action_translation (J (Suc n)) ` committed (J (Suc n))\n  committed (J (Suc n)) \\<subseteq> actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n))\n     (inv_into (actions (justifying_exec (J (Suc n))))\n       (action_translation (J (Suc n)))\n       (ws (action_translation (J (Suc n)) r))) =\n    ws (action_translation (J (Suc n)) r)", "by(auto simp: f_inv_into_f[where f=\"?\\<phi> (Suc n)\"])"], ["proof (state)\nthis:\n  action_translation (J (Suc n))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))) =\n  ws (action_translation (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from r"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))", "obtain ad al v\n      where obsr: \"action_obs (?E (Suc n)) r = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n\ngoal (1 subgoal):\n 1. (\\<And>ad al v.\n        action_obs (justifying_exec (J (Suc n))) r =\n        NormalAction (ReadMem ad al v) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by cases"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "hence adal_r: \"(ad, al) \\<in> action_loc P (?E (Suc n)) r\""], ["proof (prove)\nusing this:\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) r", "by simp"], ["proof (state)\nthis:\n  (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) r\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from J wfaSn \\<open>r \\<in> ?C (Suc n)\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  wf_action_translation E (J (Suc n))\n  r \\<in> committed (J (Suc n))", "have obs_sim: \"action_obs (?E (Suc n)) r \\<approx> action_obs E (?\\<phi> (Suc n) r)\" \"?\\<phi> (Suc n) r \\<in> actions E\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  wf_action_translation E (J (Suc n))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. action_obs (justifying_exec (J (Suc n)))\n     r \\<approx> action_obs E (action_translation (J (Suc n)) r) &&&\n    action_translation (J (Suc n)) r \\<in> actions E", "by(auto dest: wf_action_translation_on_actionD simp add: committed_subset_actions_def is_commit_sequence_def)"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n  action_translation (J (Suc n)) r \\<in> actions E\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "with obsr"], ["proof (chain)\npicking this:\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n  action_translation (J (Suc n)) r \\<in> actions E", "have rE: \"?\\<phi> (Suc n) r \\<in> read_actions E\""], ["proof (prove)\nusing this:\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n  action_translation (J (Suc n)) r \\<in> actions E\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r \\<in> read_actions E", "by(fastforce intro: read_actions.intros)"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from obs_sim obsr"], ["proof (chain)\npicking this:\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n  action_translation (J (Suc n)) r \\<in> actions E\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)", "obtain v' \n      where obsrE: \"action_obs E (?\\<phi> (Suc n) r) = NormalAction (ReadMem ad al v')\""], ["proof (prove)\nusing this:\n  action_obs (justifying_exec (J (Suc n)))\n   r \\<approx> action_obs E (action_translation (J (Suc n)) r)\n  action_translation (J (Suc n)) r \\<in> actions E\n  action_obs (justifying_exec (J (Suc n))) r =\n  NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        action_obs E (action_translation (J (Suc n)) r) =\n        NormalAction (ReadMem ad al v') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  action_obs E (action_translation (J (Suc n)) r) =\n  NormalAction (ReadMem ad al v')\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from wf_exec"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) \\<surd>", "have \"is_write_seen P E ws\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. is_write_seen P E ws", "by(rule wf_exec_is_write_seenD)"], ["proof (state)\nthis:\n  is_write_seen P E ws\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "from is_write_seenD[OF this rE obsrE]"], ["proof (chain)\npicking this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E \\<and>\n  (ad, al)\n  \\<in> action_loc P E (ws (action_translation (J (Suc n)) r)) \\<and>\n  value_written P E (ws (action_translation (J (Suc n)) r)) (ad, al) =\n  v' \\<and>\n  \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                           r \\<le>hb ws\n(action_translation (J (Suc n)) r) \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                            r \\<le>so ws\n (action_translation (J (Suc n)) r)) \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                             r) \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb action_translation (J (Suc n)) r \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws (action_translation (J (Suc n))\n                             r) \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so action_translation (J (Suc n))\n                                    r) \\<longrightarrow>\n      a' = ws (action_translation (J (Suc n)) r))", "have \"ws (?\\<phi> (Suc n) r) \\<in> write_actions E\" \n      and \"(ad, al) \\<in> action_loc P E (ws (?\\<phi> (Suc n) r))\"\n      and nhb: \"\\<not> P,E \\<turnstile> ?\\<phi> (Suc n) r \\<le>hb ws (?\\<phi> (Suc n) r)\" \n      and vol: \"is_volatile P al \\<Longrightarrow> \\<not> P,E \\<turnstile> ?\\<phi> (Suc n) r \\<le>so ws (?\\<phi> (Suc n) r)\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E \\<and>\n  (ad, al)\n  \\<in> action_loc P E (ws (action_translation (J (Suc n)) r)) \\<and>\n  value_written P E (ws (action_translation (J (Suc n)) r)) (ad, al) =\n  v' \\<and>\n  \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                           r \\<le>hb ws\n(action_translation (J (Suc n)) r) \\<and>\n  (is_volatile P al \\<longrightarrow>\n   \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                            r \\<le>so ws\n (action_translation (J (Suc n)) r)) \\<and>\n  (\\<forall>a'\\<in>write_actions E.\n      (ad, al) \\<in> action_loc P E a' \\<and>\n      (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                             r) \\<le>hb a' \\<and>\n       P,E \\<turnstile> a' \\<le>hb action_translation (J (Suc n)) r \\<or>\n       is_volatile P al \\<and>\n       P,E \\<turnstile> ws (action_translation (J (Suc n))\n                             r) \\<le>so a' \\<and>\n       P,E \\<turnstile> a' \\<le>so action_translation (J (Suc n))\n                                    r) \\<longrightarrow>\n      a' = ws (action_translation (J (Suc n)) r))\n\ngoal (1 subgoal):\n 1. (ws (action_translation (J (Suc n)) r) \\<in> write_actions E &&&\n     (ad, al)\n     \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))) &&&\n    \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                             r \\<le>hb ws\n  (action_translation (J (Suc n)) r) &&&\n    (is_volatile P al \\<Longrightarrow>\n     \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                              r \\<le>so ws\n   (action_translation (J (Suc n)) r))", "by simp_all"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))\n  \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                           r \\<le>hb ws (action_translation (J (Suc n)) r)\n  is_volatile P al \\<Longrightarrow>\n  \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                           r \\<le>so ws (action_translation (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. \\<And>n r'.\n       \\<lbrakk>\\<And>r'.\n                   \\<lbrakk>r' \\<in> read_actions (justifying_exec (J n));\n                    r' \\<in> committed (J n)\\<rbrakk>\n                   \\<Longrightarrow> P,E \\<turnstile> ws\n                 (action_translation (J n)\n                   r') \\<le>hb action_translation (J n) r';\n        r' \\<in> read_actions (justifying_exec (J (Suc n)));\n        r' \\<in> committed (J (Suc n))\\<rbrakk>\n       \\<Longrightarrow> P,E \\<turnstile> ws\n     (action_translation (J (Suc n))\n       r') \\<le>hb action_translation (J (Suc n)) r'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "proof(cases \"is_volatile P al\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "case False"], ["proof (state)\nthis:\n  \\<not> is_volatile P al\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "from wf_action_translation_on_actionD[OF wfaSn \\<open>?w \\<in> ?C (Suc n)\\<close>]"], ["proof (chain)\npicking this:\n  action_tid (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))) =\n  action_tid E\n   (action_translation (J (Suc n))\n     (inv_into (actions (justifying_exec (J (Suc n))))\n       (action_translation (J (Suc n)))\n       (ws (action_translation (J (Suc n)) r)))) \\<and>\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (action_translation (J (Suc n))\n                             (inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n)) r))))", "have \"action_obs (?E (Suc n)) ?w \\<approx> action_obs E (?\\<phi> (Suc n) ?w)\""], ["proof (prove)\nusing this:\n  action_tid (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))) =\n  action_tid E\n   (action_translation (J (Suc n))\n     (inv_into (actions (justifying_exec (J (Suc n))))\n       (action_translation (J (Suc n)))\n       (ws (action_translation (J (Suc n)) r)))) \\<and>\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (action_translation (J (Suc n))\n                             (inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n)) r))))\n\ngoal (1 subgoal):\n 1. action_obs (justifying_exec (J (Suc n)))\n     (inv_into (actions (justifying_exec (J (Suc n))))\n       (action_translation (J (Suc n)))\n       (ws (action_translation (J (Suc n))\n             r))) \\<approx> action_obs E\n                             (action_translation (J (Suc n))\n                               (inv_into\n                                 (actions (justifying_exec (J (Suc n))))\n                                 (action_translation (J (Suc n)))\n                                 (ws (action_translation (J (Suc n)) r))))", "by simp"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (action_translation (J (Suc n))\n                             (inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n)) r))))\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "with w_eq"], ["proof (chain)\npicking this:\n  action_translation (J (Suc n))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))) =\n  ws (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (action_translation (J (Suc n))\n                             (inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n)) r))))", "have obs_sim_w: \"action_obs (?E (Suc n)) ?w \\<approx> action_obs E (ws (?\\<phi> (Suc n) r))\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))) =\n  ws (action_translation (J (Suc n)) r)\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (action_translation (J (Suc n))\n                             (inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n)) r))))\n\ngoal (1 subgoal):\n 1. action_obs (justifying_exec (J (Suc n)))\n     (inv_into (actions (justifying_exec (J (Suc n))))\n       (action_translation (J (Suc n)))\n       (ws (action_translation (J (Suc n))\n             r))) \\<approx> action_obs E\n                             (ws (action_translation (J (Suc n)) r))", "by simp"], ["proof (state)\nthis:\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (ws (action_translation (J (Suc n)) r))\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "with \\<open>ws (?\\<phi> (Suc n) r) \\<in> write_actions E\\<close> \\<open>?w \\<in> actions (?E (Suc n))\\<close>"], ["proof (chain)\npicking this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (ws (action_translation (J (Suc n)) r))", "have \"?w \\<in> write_actions (?E (Suc n))\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> actions (justifying_exec (J (Suc n)))\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (ws (action_translation (J (Suc n)) r))\n\ngoal (1 subgoal):\n 1. inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r))\n    \\<in> write_actions (justifying_exec (J (Suc n)))", "by cases(fastforce intro: write_actions.intros is_write_action.intros elim!: is_write_action.cases)"], ["proof (state)\nthis:\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> write_actions (justifying_exec (J (Suc n)))\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "from \\<open>(ad, al) \\<in> action_loc P E (ws (?\\<phi> (Suc n) r))\\<close> obs_sim_w"], ["proof (chain)\npicking this:\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (ws (action_translation (J (Suc n)) r))", "have \"(ad, al) \\<in> action_loc P (?E (Suc n)) ?w\""], ["proof (prove)\nusing this:\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))\n  action_obs (justifying_exec (J (Suc n)))\n   (inv_into (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n))\n           r))) \\<approx> action_obs E\n                           (ws (action_translation (J (Suc n)) r))\n\ngoal (1 subgoal):\n 1. (ad, al)\n    \\<in> action_loc P (justifying_exec (J (Suc n)))\n           (inv_into (actions (justifying_exec (J (Suc n))))\n             (action_translation (J (Suc n)))\n             (ws (action_translation (J (Suc n)) r)))", "by cases(auto intro: action_loc_aux_intros)"], ["proof (state)\nthis:\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (inv_into (actions (justifying_exec (J (Suc n))))\n           (action_translation (J (Suc n)))\n           (ws (action_translation (J (Suc n)) r)))\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "with r adal_r \\<open>?w \\<in> write_actions (?E (Suc n))\\<close> False"], ["proof (chain)\npicking this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) r\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> write_actions (justifying_exec (J (Suc n)))\n  \\<not> is_volatile P al\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (inv_into (actions (justifying_exec (J (Suc n))))\n           (action_translation (J (Suc n)))\n           (ws (action_translation (J (Suc n)) r)))", "have \"P,?E (Suc n) \\<turnstile> r \\<dagger> ?w\""], ["proof (prove)\nusing this:\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  (ad, al) \\<in> action_loc P (justifying_exec (J (Suc n))) r\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> write_actions (justifying_exec (J (Suc n)))\n  \\<not> is_volatile P al\n  (ad, al)\n  \\<in> action_loc P (justifying_exec (J (Suc n)))\n         (inv_into (actions (justifying_exec (J (Suc n))))\n           (action_translation (J (Suc n)))\n           (ws (action_translation (J (Suc n)) r)))\n\ngoal (1 subgoal):\n 1. P,justifying_exec (J (Suc n)) \\<turnstile>\n    r\\<dagger>inv_into (actions (justifying_exec (J (Suc n))))\n               (action_translation (J (Suc n)))\n               (ws (action_translation (J (Suc n)) r))", "by(auto simp add: non_volatile_conflict_def)"], ["proof (state)\nthis:\n  P,justifying_exec (J (Suc n)) \\<turnstile>\n  r\\<dagger>inv_into (actions (justifying_exec (J (Suc n))))\n             (action_translation (J (Suc n)))\n             (ws (action_translation (J (Suc n)) r))\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "with sc \\<open>r \\<in> actions (?E (Suc n))\\<close> w"], ["proof (chain)\npicking this:\n  sequentially_consistent P\n   (justifying_exec (J (Suc n)), justifying_ws (J (Suc n)))\n  r \\<in> actions (justifying_exec (J (Suc n)))\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> actions (justifying_exec (J (Suc n)))\n  P,justifying_exec (J (Suc n)) \\<turnstile>\n  r\\<dagger>inv_into (actions (justifying_exec (J (Suc n))))\n             (action_translation (J (Suc n)))\n             (ws (action_translation (J (Suc n)) r))", "have \"P,?E (Suc n) \\<turnstile> r \\<le>hb ?w \\<or> P,?E (Suc n) \\<turnstile> ?w \\<le>hb r\""], ["proof (prove)\nusing this:\n  sequentially_consistent P\n   (justifying_exec (J (Suc n)), justifying_ws (J (Suc n)))\n  r \\<in> actions (justifying_exec (J (Suc n)))\n  inv_into (actions (justifying_exec (J (Suc n))))\n   (action_translation (J (Suc n))) (ws (action_translation (J (Suc n)) r))\n  \\<in> actions (justifying_exec (J (Suc n)))\n  P,justifying_exec (J (Suc n)) \\<turnstile>\n  r\\<dagger>inv_into (actions (justifying_exec (J (Suc n))))\n             (action_translation (J (Suc n)))\n             (ws (action_translation (J (Suc n)) r))\n\ngoal (1 subgoal):\n 1. P,justifying_exec\n       (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n     (actions (justifying_exec (J (Suc n))))\n     (action_translation (J (Suc n)))\n     (ws (action_translation (J (Suc n)) r)) \\<or>\n    P,justifying_exec\n       (J (Suc n)) \\<turnstile> inv_into\n                                 (actions (justifying_exec (J (Suc n))))\n                                 (action_translation (J (Suc n)))\n                                 (ws (action_translation (J (Suc n))\n r)) \\<le>hb r", "by(rule correctly_synchronizedD[rule_format, OF sync \\<open>?E (Suc n) \\<in> \\<E>\\<close> wf])"], ["proof (state)\nthis:\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n   (actions (justifying_exec (J (Suc n)))) (action_translation (J (Suc n)))\n   (ws (action_translation (J (Suc n)) r)) \\<or>\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n))\n                                     r)) \\<le>hb r\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "moreover"], ["proof (state)\nthis:\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n   (actions (justifying_exec (J (Suc n)))) (action_translation (J (Suc n)))\n   (ws (action_translation (J (Suc n)) r)) \\<or>\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n))\n                                     r)) \\<le>hb r\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "from J r \\<open>r \\<in> ?C (Suc n)\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))", "have \"P,?E (Suc n) \\<turnstile> ?w \\<le>hb r \\<longleftrightarrow> P,E \\<turnstile> ws (?\\<phi> (Suc n) r) \\<le>hb ?\\<phi> (Suc n) r\"\n        and \"\\<not> P,?E (Suc n) \\<turnstile> r \\<le>hb ?w\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  r \\<in> read_actions (justifying_exec (J (Suc n)))\n  r \\<in> committed (J (Suc n))\n\ngoal (1 subgoal):\n 1. (P,justifying_exec\n        (J (Suc n)) \\<turnstile> inv_into\n                                  (actions (justifying_exec (J (Suc n))))\n                                  (action_translation (J (Suc n)))\n                                  (ws (action_translation (J (Suc n))\n  r)) \\<le>hb r) =\n    (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                           r) \\<le>hb action_translation (J (Suc n)) r) &&&\n    \\<not> P,justifying_exec\n              (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n            (actions (justifying_exec (J (Suc n))))\n            (action_translation (J (Suc n)))\n            (ws (action_translation (J (Suc n)) r))", "by(simp_all add: happens_before_committed_weak_def)"], ["proof (state)\nthis:\n  (P,justifying_exec\n      (J (Suc n)) \\<turnstile> inv_into\n                                (actions (justifying_exec (J (Suc n))))\n                                (action_translation (J (Suc n)))\n                                (ws (action_translation (J (Suc n))\nr)) \\<le>hb r) =\n  (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                         r) \\<le>hb action_translation (J (Suc n)) r)\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n          (actions (justifying_exec (J (Suc n))))\n          (action_translation (J (Suc n)))\n          (ws (action_translation (J (Suc n)) r))\n\ngoal (2 subgoals):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r\n 2. \\<not> is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "ultimately"], ["proof (chain)\npicking this:\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n   (actions (justifying_exec (J (Suc n)))) (action_translation (J (Suc n)))\n   (ws (action_translation (J (Suc n)) r)) \\<or>\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n))\n                                     r)) \\<le>hb r\n  (P,justifying_exec\n      (J (Suc n)) \\<turnstile> inv_into\n                                (actions (justifying_exec (J (Suc n))))\n                                (action_translation (J (Suc n)))\n                                (ws (action_translation (J (Suc n))\nr)) \\<le>hb r) =\n  (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                         r) \\<le>hb action_translation (J (Suc n)) r)\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n          (actions (justifying_exec (J (Suc n))))\n          (action_translation (J (Suc n)))\n          (ws (action_translation (J (Suc n)) r))", "show ?thesis"], ["proof (prove)\nusing this:\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n   (actions (justifying_exec (J (Suc n)))) (action_translation (J (Suc n)))\n   (ws (action_translation (J (Suc n)) r)) \\<or>\n  P,justifying_exec\n     (J (Suc n)) \\<turnstile> inv_into\n                               (actions (justifying_exec (J (Suc n))))\n                               (action_translation (J (Suc n)))\n                               (ws (action_translation (J (Suc n))\n                                     r)) \\<le>hb r\n  (P,justifying_exec\n      (J (Suc n)) \\<turnstile> inv_into\n                                (actions (justifying_exec (J (Suc n))))\n                                (action_translation (J (Suc n)))\n                                (ws (action_translation (J (Suc n))\nr)) \\<le>hb r) =\n  (P,E \\<turnstile> ws (action_translation (J (Suc n))\n                         r) \\<le>hb action_translation (J (Suc n)) r)\n  \\<not> P,justifying_exec\n            (J (Suc n)) \\<turnstile> r \\<le>hb inv_into\n          (actions (justifying_exec (J (Suc n))))\n          (action_translation (J (Suc n)))\n          (ws (action_translation (J (Suc n)) r))\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "by auto"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>hb action_translation (J (Suc n)) r\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "case True"], ["proof (state)\nthis:\n  is_volatile P al\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "with rE obsrE"], ["proof (chain)\npicking this:\n  action_translation (J (Suc n)) r \\<in> read_actions E\n  action_obs E (action_translation (J (Suc n)) r) =\n  NormalAction (ReadMem ad al v')\n  is_volatile P al", "have \"?\\<phi> (Suc n) r \\<in> sactions P E\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r \\<in> read_actions E\n  action_obs E (action_translation (J (Suc n)) r) =\n  NormalAction (ReadMem ad al v')\n  is_volatile P al\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r \\<in> sactions P E", "by cases (auto intro: sactionsI)"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "moreover"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "from \\<open>ws (?\\<phi> (Suc n) r) \\<in> write_actions E\\<close> \\<open>(ad, al) \\<in> action_loc P E (ws (?\\<phi> (Suc n) r))\\<close> True"], ["proof (chain)\npicking this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))\n  is_volatile P al", "have \"ws (?\\<phi> (Suc n) r) \\<in> sactions P E\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))\n  is_volatile P al\n\ngoal (1 subgoal):\n 1. ws (action_translation (J (Suc n)) r) \\<in> sactions P E", "by cases(auto intro!: sactionsI elim: is_write_action.cases)"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r) \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "moreover"], ["proof (state)\nthis:\n  ws (action_translation (J (Suc n)) r) \\<in> sactions P E\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "have \"?\\<phi> (Suc n) r \\<noteq> ws (?\\<phi> (Suc n) r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r \\<noteq>\n    ws (action_translation (J (Suc n)) r)", "using \\<open>ws (?\\<phi> (Suc n) r) \\<in> write_actions E\\<close> rE"], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  action_translation (J (Suc n)) r \\<in> read_actions E\n\ngoal (1 subgoal):\n 1. action_translation (J (Suc n)) r \\<noteq>\n    ws (action_translation (J (Suc n)) r)", "by(auto dest: read_actions_not_write_actions)"], ["proof (state)\nthis:\n  action_translation (J (Suc n)) r \\<noteq>\n  ws (action_translation (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "ultimately"], ["proof (chain)\npicking this:\n  action_translation (J (Suc n)) r \\<in> sactions P E\n  ws (action_translation (J (Suc n)) r) \\<in> sactions P E\n  action_translation (J (Suc n)) r \\<noteq>\n  ws (action_translation (J (Suc n)) r)", "have \"P,E \\<turnstile> ws (?\\<phi> (Suc n) r) \\<le>so ?\\<phi> (Suc n) r\""], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r \\<in> sactions P E\n  ws (action_translation (J (Suc n)) r) \\<in> sactions P E\n  action_translation (J (Suc n)) r \\<noteq>\n  ws (action_translation (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>so action_translation (J (Suc n)) r", "using total_sync_order[of P E] vol[OF True]"], ["proof (prove)\nusing this:\n  action_translation (J (Suc n)) r \\<in> sactions P E\n  ws (action_translation (J (Suc n)) r) \\<in> sactions P E\n  action_translation (J (Suc n)) r \\<noteq>\n  ws (action_translation (J (Suc n)) r)\n  total_onP (sactions P E) (sync_order P E)\n  \\<not> P,E \\<turnstile> action_translation (J (Suc n))\n                           r \\<le>so ws (action_translation (J (Suc n)) r)\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>so action_translation (J (Suc n)) r", "by(auto dest: total_onPD)"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>so action_translation (J (Suc n)) r\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "moreover"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>so action_translation (J (Suc n)) r\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "from \\<open>ws (?\\<phi> (Suc n) r) \\<in> write_actions E\\<close> \\<open>(ad, al) \\<in> action_loc P E (ws (?\\<phi> (Suc n) r))\\<close> True"], ["proof (chain)\npicking this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))\n  is_volatile P al", "have \"P \\<turnstile> (action_tid E (ws (?\\<phi> (Suc n) r)), action_obs E (ws (?\\<phi> (Suc n) r))) \\<leadsto>sw\n        (action_tid E (?\\<phi> (Suc n) r), action_obs E (?\\<phi> (Suc n) r))\""], ["proof (prove)\nusing this:\n  ws (action_translation (J (Suc n)) r) \\<in> write_actions E\n  (ad, al) \\<in> action_loc P E (ws (action_translation (J (Suc n)) r))\n  is_volatile P al\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (action_tid E (ws (action_translation (J (Suc n)) r)),\n                    action_obs E\n                     (ws (action_translation (J (Suc n))\n                           r))) \\<leadsto>sw (action_tid E\n         (action_translation (J (Suc n)) r),\n        action_obs E (action_translation (J (Suc n)) r))", "by cases(fastforce elim!: is_write_action.cases intro: synchronizes_with.intros addr_locsI simp add: obsrE)"], ["proof (state)\nthis:\n  P \\<turnstile> (action_tid E (ws (action_translation (J (Suc n)) r)),\n                  action_obs E\n                   (ws (action_translation (J (Suc n))\n                         r))) \\<leadsto>sw (action_tid E\n       (action_translation (J (Suc n)) r),\n      action_obs E (action_translation (J (Suc n)) r))\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "ultimately"], ["proof (chain)\npicking this:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>so action_translation (J (Suc n)) r\n  P \\<turnstile> (action_tid E (ws (action_translation (J (Suc n)) r)),\n                  action_obs E\n                   (ws (action_translation (J (Suc n))\n                         r))) \\<leadsto>sw (action_tid E\n       (action_translation (J (Suc n)) r),\n      action_obs E (action_translation (J (Suc n)) r))", "have \"P,E \\<turnstile> ws (?\\<phi> (Suc n) r) \\<le>sw ?\\<phi> (Suc n) r\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>so action_translation (J (Suc n)) r\n  P \\<turnstile> (action_tid E (ws (action_translation (J (Suc n)) r)),\n                  action_obs E\n                   (ws (action_translation (J (Suc n))\n                         r))) \\<leadsto>sw (action_tid E\n       (action_translation (J (Suc n)) r),\n      action_obs E (action_translation (J (Suc n)) r))\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>sw action_translation (J (Suc n)) r", "by(rule sync_withI)"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>sw action_translation (J (Suc n)) r\n\ngoal (1 subgoal):\n 1. is_volatile P al \\<Longrightarrow>\n    P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "thus ?thesis"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>sw action_translation (J (Suc n)) r\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J (Suc n))\n                          r) \\<le>hb action_translation (J (Suc n)) r", "unfolding po_sw_def"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>sw action_translation (J (Suc n)) r\n\ngoal (1 subgoal):\n 1. (\\<lambda>a b.\n        E \\<turnstile> a \\<le>po b \\<or>\n        P,E \\<turnstile> a \\<le>sw b)\\<^sup>+\\<^sup>+\n     (ws (action_translation (J (Suc n)) r))\n     (action_translation (J (Suc n)) r)", "by blast"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>hb action_translation (J (Suc n)) r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J (Suc n))\n                        r) \\<le>hb action_translation (J (Suc n)) r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P,E \\<turnstile> ws (action_translation (J n)\n                        r') \\<le>hb action_translation (J n) r'\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> read_actions E \\<Longrightarrow>\n       P,E \\<turnstile> ws r \\<le>hb r", "thus \"P,E \\<turnstile> ws r \\<le>hb r\""], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws (action_translation (J n)\n                        r') \\<le>hb action_translation (J n) r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws r \\<le>hb r", "unfolding r"], ["proof (prove)\nusing this:\n  P,E \\<turnstile> ws (action_translation (J n)\n                        r') \\<le>hb action_translation (J n) r'\n\ngoal (1 subgoal):\n 1. P,E \\<turnstile> ws (action_translation (J n)\n                          r') \\<le>hb action_translation (J n) r'", "."], ["proof (state)\nthis:\n  P,E \\<turnstile> ws r \\<le>hb r\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary drf:\n  \"\\<lbrakk> correctly_synchronized P \\<E>; legal_execution P \\<E> (E, ws) \\<rbrakk>\n  \\<Longrightarrow> sequentially_consistent P (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>correctly_synchronized P \\<E>;\n     legal_execution P \\<E> (E, ws)\\<rbrakk>\n    \\<Longrightarrow> sequentially_consistent P (E, ws)", "by(erule drf_weak)(rule legal_imp_weakly_legal_execution)"], ["", "end"], ["", "end"]]}