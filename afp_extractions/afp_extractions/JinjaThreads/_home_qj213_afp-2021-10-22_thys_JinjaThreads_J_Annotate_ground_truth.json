{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/J/Annotate.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma super_neq_this [simp]: \"super \\<noteq> this\" \"this \\<noteq> super\"", "lemma fixes is_lub :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile> lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes is_lub_unique: \"\\<And>T1 T2 T3 T4. \\<lbrakk> \\<turnstile> lub(T1, T2) = T3; \\<turnstile> lub(T1, T2) = T4 \\<rbrakk> \\<Longrightarrow> T3 = T4\"\n  shows Anno_fun: \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e'; is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<rbrakk> \\<Longrightarrow> e' = e''\"\n  and Annos_fun: \"\\<lbrakk> is_lub,P,E \\<turnstile> es [\\<leadsto>] es'; is_lub,P,E \\<turnstile> es [\\<leadsto>] es'' \\<rbrakk> \\<Longrightarrow> es' = es''\"", "lemma fixes is_lub1 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>1 lub'((_,/ _)') = _\" [51,51,51] 50)\n  and is_lub2 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>2 lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes wf: \"wf_prog wf_md P\"\n  and is_lub1_into_is_lub2: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>1 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> \\<turnstile>2 lub(T1, T2) = T3\"\n  and is_lub2_is_type: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>2 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> is_type P T3\"\n  shows Anno_change_is_lub:\n  \"\\<lbrakk> is_lub1,P,E \\<turnstile> e \\<leadsto> e'; ran E \\<union> set (block_types e) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> e \\<leadsto> e'\"\n  and Annos_change_is_lub:\n  \"\\<lbrakk> is_lub1,P,E \\<turnstile> es [\\<leadsto>] es'; ran E \\<union> set (blocks_types es) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> es [\\<leadsto>] es'\"", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows Anno_into_Anno_code: \"\\<lbrakk> P,E \\<turnstile> e \\<leadsto> e'; ran E \\<union> set (block_types e) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto>' e'\"\n  and Annos_into_Annos_code: \"\\<lbrakk> P,E \\<turnstile> es [\\<leadsto>] es'; ran E \\<union> set (blocks_types es) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es'\"", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows Anno_code_into_Anno: \"\\<lbrakk> P,E \\<turnstile> e \\<leadsto>' e'; ran E \\<union> set (block_types e) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto> e'\"\n  and Annos_code_into_Annos: \"\\<lbrakk> P,E \\<turnstile> es [\\<leadsto>'] es'; ran E \\<union> set (blocks_types es) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es'\"", "lemma fixes is_lub\n  assumes wf: \"wf_prog wf_md P\"\n  shows WT_block_types_is_type: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> set (block_types e) \\<subseteq> types P\"\n  and WTs_blocks_types_is_type: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> set (blocks_types es) \\<subseteq> types P\"", "lemma fixes is_lub\n  shows Anno_block_types: \"is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<Longrightarrow> block_types e = block_types e'\"\n  and Annos_blocks_types: \"is_lub,P,E \\<turnstile> es [\\<leadsto>] es' \\<Longrightarrow> blocks_types es = blocks_types es'\"", "lemma eval_Anno_i_i_i_o_conv:\n  \"Predicate.eval (Anno_code_i_i_i_o P E e) = (\\<lambda>e'. P,E \\<turnstile> e \\<leadsto>' e')\"", "lemma annotate_code [code]:\n  \"annotate_code P E e = Predicate.singleton (\\<lambda>_. Code.abort (STR ''annotate'') (\\<lambda>_. e)) (Anno_code_i_i_i_o P E e)\""], "translations": [["", "lemma super_neq_this [simp]: \"super \\<noteq> this\" \"this \\<noteq> super\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Annotate.super \\<noteq> this &&& this \\<noteq> Annotate.super", "by(simp_all add: this_def super_def)"], ["", "inductive Anno :: \"(ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool) \\<Rightarrow> 'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr \\<Rightarrow> 'addr expr \\<Rightarrow> bool\" \n  (\"_,_,_ \\<turnstile> _ \\<leadsto> _\"   [51,51,0,0,51]50)\n  and Annos :: \"(ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool) \\<Rightarrow> 'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr list \\<Rightarrow> 'addr expr list \\<Rightarrow> bool\"\n  (\"_,_,_ \\<turnstile> _ [\\<leadsto>] _\" [51,51,0,0,51]50)\nfor is_lub :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" and P :: \"'addr J_prog\"\nwhere\n  AnnoNew: \"is_lub,P,E \\<turnstile> new C \\<leadsto> new C\"\n| AnnoNewArray: \"is_lub,P,E \\<turnstile> i \\<leadsto> i' \\<Longrightarrow> is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\"\n| AnnoCast: \"is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<Longrightarrow> is_lub,P,E \\<turnstile> Cast C e \\<leadsto> Cast C e'\"\n| AnnoInstanceOf: \"is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<Longrightarrow> is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\"\n| AnnoVal: \"is_lub,P,E \\<turnstile> Val v \\<leadsto> Val v\"\n| AnnoVarVar: \"\\<lbrakk> E V = \\<lfloor>T\\<rfloor>; V \\<noteq> super \\<rbrakk> \\<Longrightarrow> is_lub,P,E \\<turnstile> Var V \\<leadsto> Var V\"\n| AnnoVarField:\n  \\<comment> \\<open>There is no need to handle access of array fields explicitly,\n    because arrays do not implement methods, i.e. @{term \"this\"} is\n    always of a @{term \"Class\"} type.\\<close>\n  \"\\<lbrakk> E V = None; V \\<noteq> super; E this = \\<lfloor>Class C\\<rfloor>; P \\<turnstile> C sees V:T (fm) in D \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> Var V \\<leadsto> Var this\\<bullet>V{D}\"\n| AnnoBinOp:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2' \\<rbrakk>\n   \\<Longrightarrow> is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\"\n| AnnoLAssVar:\n  \"\\<lbrakk> E V = \\<lfloor>T\\<rfloor>; V \\<noteq> super; is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<rbrakk> \\<Longrightarrow> is_lub,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\"\n| AnnoLAssField:\n  \"\\<lbrakk> E V = None; V \\<noteq> super; E this = \\<lfloor>Class C\\<rfloor>; P \\<turnstile> C sees V:T (fm) in D; is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<rbrakk>\n   \\<Longrightarrow> is_lub,P,E \\<turnstile> V:=e \\<leadsto> Var this\\<bullet>V{D} := e'\"\n| AnnoAAcc:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> a \\<leadsto> a'; is_lub,P,E \\<turnstile> i \\<leadsto> i' \\<rbrakk> \\<Longrightarrow> is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> \\<leadsto> a'\\<lfloor>i'\\<rceil>\"\n| AnnoAAss:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> a \\<leadsto> a'; is_lub,P,E \\<turnstile> i \\<leadsto> i'; is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<rbrakk> \\<Longrightarrow> is_lub,P,E \\<turnstile> a\\<lfloor>i\\<rceil> := e \\<leadsto> a'\\<lfloor>i'\\<rceil> := e'\"\n| AnnoALength:\n  \"is_lub,P,E \\<turnstile> a \\<leadsto> a' \\<Longrightarrow> is_lub,P,E \\<turnstile> a\\<bullet>length \\<leadsto> a'\\<bullet>length\"\n| \\<comment> \\<open>All arrays implicitly declare a final field called @{term \"array_length_field_name\"} to\n    store the array length, which hides a potential field of the same name in @{term \"Object\"} (cf. JLS 6.4.5).\n    The last premise implements the hiding because field lookup does does not model the implicit declaration.\\<close>\n  AnnoFAcc:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e';  is_lub,P,E \\<turnstile> e' :: U; class_type_of' U = \\<lfloor>C\\<rfloor>; P \\<turnstile> C sees F:T (fm) in D; \n     is_Array U \\<longrightarrow> F \\<noteq> array_length_field_name \\<rbrakk>\n   \\<Longrightarrow> is_lub,P,E \\<turnstile> e\\<bullet>F{STR ''''} \\<leadsto> e'\\<bullet>F{D}\"\n| AnnoFAccALength:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e'; is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil> \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> e\\<bullet>array_length_field_name{STR ''''} \\<leadsto> e'\\<bullet>length\"\n| AnnoFAccSuper:\n  \\<comment> \\<open>In class C with super class D, \"super\" is syntactic sugar for \"((D) this)\" (cf. JLS, 15.11.2)\\<close>\n  \"\\<lbrakk> E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object; class P C = \\<lfloor>(D, fs, ms)\\<rfloor>; \n     P \\<turnstile> D sees F:T (fm) in D' \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> Var super\\<bullet>F{STR ''''} \\<leadsto> (Cast (Class D) (Var this))\\<bullet>F{D'}\"\n|  AnnoFAss:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n     is_lub,P,E \\<turnstile> e1' :: U; class_type_of' U = \\<lfloor>C\\<rfloor>; P \\<turnstile> C sees F:T (fm) in D;\n     is_Array U \\<longrightarrow> F \\<noteq> array_length_field_name \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> e1\\<bullet>F{STR ''''} := e2 \\<leadsto> e1'\\<bullet>F{D} := e2'\"\n| AnnoFAssSuper:\n  \"\\<lbrakk> E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object; class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n     P \\<turnstile> D sees F:T (fm) in D'; is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> Var super\\<bullet>F{STR ''''} := e \\<leadsto> (Cast (Class D) (Var this))\\<bullet>F{D'} := e'\"\n| AnnoCAS:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'; is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'; is_lub,P,E \\<turnstile> e3 \\<leadsto> e3' \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) \\<leadsto> e1'\\<bullet>compareAndSwap(D\\<bullet>F, e2', e3')\"\n| AnnoCall:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e';  is_lub,P,E \\<turnstile> es [\\<leadsto>] es' \\<rbrakk>\n   \\<Longrightarrow> is_lub,P,E \\<turnstile> Call e M es \\<leadsto> Call e' M es'\"\n| AnnoBlock:\n  \"is_lub,P,E(V \\<mapsto> T) \\<turnstile> e \\<leadsto> e'  \\<Longrightarrow>  is_lub,P,E \\<turnstile> {V:T=vo; e} \\<leadsto> {V:T=vo; e'}\"\n| AnnoSync:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'; is_lub,P,E \\<turnstile> e2 \\<leadsto> e2' \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> sync(e1) e2 \\<leadsto> sync(e1') e2'\"\n| AnnoComp:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2' \\<rbrakk>\n  \\<Longrightarrow>  is_lub,P,E \\<turnstile> e1;;e2 \\<leadsto> e1';;e2'\"\n| AnnoCond:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e'; is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2' \\<rbrakk>\n   \\<Longrightarrow> is_lub,P,E \\<turnstile> if (e) e1 else e2 \\<leadsto> if (e') e1' else e2'\"\n| AnnoLoop:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e';  is_lub,P,E \\<turnstile> c \\<leadsto> c' \\<rbrakk>\n  \\<Longrightarrow> is_lub,P,E \\<turnstile> while (e) c \\<leadsto> while (e') c'\"\n| AnnoThrow:\n  \"is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<Longrightarrow> is_lub,P,E \\<turnstile> throw e \\<leadsto> throw e'\"\n| AnnoTry:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';  is_lub,P,E(V \\<mapsto> Class C) \\<turnstile> e2 \\<leadsto> e2' \\<rbrakk>\n   \\<Longrightarrow> is_lub,P,E \\<turnstile> try e1 catch(C V) e2 \\<leadsto> try e1' catch(C V) e2'\"\n\n| AnnoNil:\n  \"is_lub,P,E \\<turnstile> [] [\\<leadsto>] []\"\n| AnnoCons:\n  \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e';  is_lub,P,E \\<turnstile> es [\\<leadsto>] es' \\<rbrakk> \\<Longrightarrow>  is_lub,P,E \\<turnstile> e#es [\\<leadsto>] e'#es'\""], ["", "inductive_cases Anno_cases [elim!]:\n  \"is_lub',P,E \\<turnstile> new C \\<leadsto> e\"\n  \"is_lub',P,E \\<turnstile> newA T\\<lfloor>e\\<rceil> \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> Cast T e \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e instanceof T \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> Val v \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> Var V \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> V := e \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e1\\<lfloor>e2\\<rceil> \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e1\\<lfloor>e2\\<rceil> := e3 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e\\<bullet>length \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e\\<bullet>F{D} \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e1\\<bullet>F{D} := e2 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e1\\<bullet>compareAndSwap(D\\<bullet>F, e2, e3) \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e\\<bullet>M(es) \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> {V:T=vo; e} \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> sync(e1) e2 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> insync(a) e2 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> e1;; e2 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> if (e) e1 else e2 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> while(e1) e2 \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> throw e \\<leadsto> e'\"\n  \"is_lub',P,E \\<turnstile> try e1 catch(C V) e2 \\<leadsto> e'\""], ["", "inductive_cases Annos_cases [elim!]:\n  \"is_lub',P,E \\<turnstile> [] [\\<leadsto>] es'\"\n  \"is_lub',P,E \\<turnstile> e # es [\\<leadsto>] es'\""], ["", "abbreviation Anno' :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr \\<Rightarrow> 'addr expr \\<Rightarrow> bool\"  (\"_,_ \\<turnstile> _ \\<leadsto> _\"   [51,0,0,51]50)\nwhere \"Anno' P \\<equiv> Anno (TypeRel.is_lub P) P\""], ["", "abbreviation Annos' :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr list \\<Rightarrow> 'addr expr list \\<Rightarrow> bool\"  (\"_,_ \\<turnstile> _ [\\<leadsto>] _\" [51,0,0,51]50)\nwhere \"Annos' P \\<equiv> Annos (TypeRel.is_lub P) P\""], ["", "definition annotate :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr \\<Rightarrow> 'addr expr\"\nwhere \"annotate P E e = THE_default e (\\<lambda>e'. P,E \\<turnstile> e \\<leadsto> e')\""], ["", "lemma fixes is_lub :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile> lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes is_lub_unique: \"\\<And>T1 T2 T3 T4. \\<lbrakk> \\<turnstile> lub(T1, T2) = T3; \\<turnstile> lub(T1, T2) = T4 \\<rbrakk> \\<Longrightarrow> T3 = T4\"\n  shows Anno_fun: \"\\<lbrakk> is_lub,P,E \\<turnstile> e \\<leadsto> e'; is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<rbrakk> \\<Longrightarrow> e' = e''\"\n  and Annos_fun: \"\\<lbrakk> is_lub,P,E \\<turnstile> es [\\<leadsto>] es'; is_lub,P,E \\<turnstile> es [\\<leadsto>] es'' \\<rbrakk> \\<Longrightarrow> es' = es''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n      is_lub,P,E \\<turnstile> e \\<leadsto> e''\\<rbrakk>\n     \\<Longrightarrow> e' = e'') &&&\n    (\\<lbrakk>is_lub,P,E \\<turnstile> es [\\<leadsto>] es';\n      is_lub,P,E \\<turnstile> es [\\<leadsto>] es''\\<rbrakk>\n     \\<Longrightarrow> es' = es'')", "proof(induct arbitrary: e'' and es'' rule: Anno_Annos.inducts)"], ["proof (state)\ngoal (29 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 29 subgoals...", "case (AnnoFAcc E e e' U C F T fm D)"], ["proof (state)\nthis:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'\n  is_lub,P,E \\<turnstile> e \\<leadsto> ?e'' \\<Longrightarrow> e' = ?e''\n  is_lub,P,E \\<turnstile> e' :: U\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  P \\<turnstile> C sees F:T (fm) in D\n  is_Array U \\<longrightarrow> F \\<noteq> length\n  is_lub,P,E \\<turnstile> e\\<bullet>F \\<leadsto> e''\n\ngoal (29 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 29 subgoals...", "from \\<open>is_lub,P,E \\<turnstile> e\\<bullet>F{STR ''''} \\<leadsto> e''\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e\\<bullet>F \\<leadsto> e''", "show ?case"], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e\\<bullet>F \\<leadsto> e''\n\ngoal (1 subgoal):\n 1. e'\\<bullet>F{D} = e''", "proof(rule Anno_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e' U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e'\\<bullet>F{Da};\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 3. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "fix e''' U' C' T' fm' D'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e' U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e'\\<bullet>F{Da};\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 3. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "assume \"is_lub,P,E \\<turnstile> e \\<leadsto> e'''\" \"is_lub,P,E \\<turnstile> e''' :: U'\"\n      and \"class_type_of' U' = \\<lfloor>C'\\<rfloor>\"\n      and \"P \\<turnstile> C' sees F:T' (fm') in D'\" \"e'' = e'''\\<bullet>F{D'}\""], ["proof (state)\nthis:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'''\n  is_lub,P,E \\<turnstile> e''' :: U'\n  class_type_of' U' = \\<lfloor>C'\\<rfloor>\n  P \\<turnstile> C' sees F:T' (fm') in D'\n  e'' = e'''\\<bullet>F{D'}\n\ngoal (3 subgoals):\n 1. \\<And>e' U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e'\\<bullet>F{Da};\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 3. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "from \\<open>is_lub,P,E \\<turnstile> e \\<leadsto> e'''\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'''", "have \"e' = e'''\""], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'''\n\ngoal (1 subgoal):\n 1. e' = e'''", "by(rule AnnoFAcc)"], ["proof (state)\nthis:\n  e' = e'''\n\ngoal (3 subgoals):\n 1. \\<And>e' U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e'\\<bullet>F{Da};\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 3. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "with \\<open>is_lub,P,E \\<turnstile> e' :: U\\<close> \\<open>is_lub,P,E \\<turnstile> e''' :: U'\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e' :: U\n  is_lub,P,E \\<turnstile> e''' :: U'\n  e' = e'''", "have \"U = U'\""], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e' :: U\n  is_lub,P,E \\<turnstile> e''' :: U'\n  e' = e'''\n\ngoal (1 subgoal):\n 1. U = U'", "by(auto intro: WT_unique is_lub_unique)"], ["proof (state)\nthis:\n  U = U'\n\ngoal (3 subgoals):\n 1. \\<And>e' U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e'\\<bullet>F{Da};\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 3. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "with \\<open>class_type_of' U = \\<lfloor>C\\<rfloor>\\<close> \\<open>class_type_of' U' = \\<lfloor>C'\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  class_type_of' U' = \\<lfloor>C'\\<rfloor>\n  U = U'", "have \"C = C'\""], ["proof (prove)\nusing this:\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  class_type_of' U' = \\<lfloor>C'\\<rfloor>\n  U = U'\n\ngoal (1 subgoal):\n 1. C = C'", "by(auto)"], ["proof (state)\nthis:\n  C = C'\n\ngoal (3 subgoals):\n 1. \\<And>e' U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e'\\<bullet>F{Da};\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 3. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "with \\<open>P \\<turnstile> C' sees F:T' (fm') in D'\\<close> \\<open>P \\<turnstile> C sees F:T (fm) in D\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> C' sees F:T' (fm') in D'\n  P \\<turnstile> C sees F:T (fm) in D\n  C = C'", "have \"D' = D\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C' sees F:T' (fm') in D'\n  P \\<turnstile> C sees F:T (fm) in D\n  C = C'\n\ngoal (1 subgoal):\n 1. D' = D", "by(auto dest: sees_field_fun)"], ["proof (state)\nthis:\n  D' = D\n\ngoal (3 subgoals):\n 1. \\<And>e' U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e'\\<bullet>F{Da};\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 3. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "with \\<open>e'' = e'''\\<bullet>F{D'}\\<close> \\<open>e' = e'''\\<close>"], ["proof (chain)\npicking this:\n  e'' = e'''\\<bullet>F{D'}\n  e' = e'''\n  D' = D", "show ?thesis"], ["proof (prove)\nusing this:\n  e'' = e'''\\<bullet>F{D'}\n  e' = e'''\n  D' = D\n\ngoal (1 subgoal):\n 1. e'\\<bullet>F{D} = e''", "by simp"], ["proof (state)\nthis:\n  e'\\<bullet>F{D} = e''\n\ngoal (2 subgoals):\n 1. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "fix e''' T"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "assume \"e'' = e'''\\<bullet>length\"\n      and \"is_lub,P,E \\<turnstile> e''' :: T\\<lfloor>\\<rceil>\"\n      and \"is_lub,P,E \\<turnstile> e \\<leadsto> e'''\"\n      and \"F = array_length_field_name\""], ["proof (state)\nthis:\n  e'' = e'''\\<bullet>length\n  is_lub,P,E \\<turnstile> e''' :: T\\<lfloor>\\<rceil>\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'''\n  F = length\n\ngoal (2 subgoals):\n 1. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "from \\<open>is_lub,P,E \\<turnstile> e \\<leadsto> e'''\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'''", "have \"e' = e'''\""], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'''\n\ngoal (1 subgoal):\n 1. e' = e'''", "by(rule AnnoFAcc)"], ["proof (state)\nthis:\n  e' = e'''\n\ngoal (2 subgoals):\n 1. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "with \\<open>is_lub,P,E \\<turnstile> e' :: U\\<close> \\<open>is_lub,P,E \\<turnstile> e''' :: T\\<lfloor>\\<rceil>\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e' :: U\n  is_lub,P,E \\<turnstile> e''' :: T\\<lfloor>\\<rceil>\n  e' = e'''", "have \"U = T\\<lfloor>\\<rceil>\""], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e' :: U\n  is_lub,P,E \\<turnstile> e''' :: T\\<lfloor>\\<rceil>\n  e' = e'''\n\ngoal (1 subgoal):\n 1. U = T\\<lfloor>\\<rceil>", "by(auto intro: WT_unique is_lub_unique)"], ["proof (state)\nthis:\n  U = T\\<lfloor>\\<rceil>\n\ngoal (2 subgoals):\n 1. \\<And>e' T.\n       \\<lbrakk>e'' = e'\\<bullet>length;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        is_lub,P,E \\<turnstile> e' :: T\\<lfloor>\\<rceil>; F = length;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''\n 2. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "with \\<open>class_type_of' U = \\<lfloor>C\\<rfloor>\\<close> \\<open>is_Array U \\<longrightarrow> F \\<noteq> array_length_field_name\\<close>"], ["proof (chain)\npicking this:\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  is_Array U \\<longrightarrow> F \\<noteq> length\n  U = T\\<lfloor>\\<rceil>", "show ?thesis"], ["proof (prove)\nusing this:\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  is_Array U \\<longrightarrow> F \\<noteq> length\n  U = T\\<lfloor>\\<rceil>\n\ngoal (1 subgoal):\n 1. e'\\<bullet>F{D} = e''", "using \\<open>F = array_length_field_name\\<close>"], ["proof (prove)\nusing this:\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  is_Array U \\<longrightarrow> F \\<noteq> length\n  U = T\\<lfloor>\\<rceil>\n  F = length\n\ngoal (1 subgoal):\n 1. e'\\<bullet>F{D} = e''", "by simp"], ["proof (state)\nthis:\n  e'\\<bullet>F{D} = e''\n\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "fix C' D' fs ms T D''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "assume \"E this = \\<lfloor>Class C'\\<rfloor>\"\n      and \"class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\"\n      and \"e = Var super\"\n      and \"e'' = Cast (Class D') (Var this)\\<bullet>F{D''}\""], ["proof (state)\nthis:\n  E this = \\<lfloor>Class C'\\<rfloor>\n  class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\n  e = Var Annotate.super\n  e'' = Cast (Class D') (Var this)\\<bullet>F{D''}\n\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "with \\<open>is_lub,P,E \\<turnstile> e \\<leadsto> e'\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'\n  E this = \\<lfloor>Class C'\\<rfloor>\n  class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\n  e = Var Annotate.super\n  e'' = Cast (Class D') (Var this)\\<bullet>F{D''}", "have False"], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e \\<leadsto> e'\n  E this = \\<lfloor>Class C'\\<rfloor>\n  class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\n  e = Var Annotate.super\n  e'' = Cast (Class D') (Var this)\\<bullet>F{D''}\n\ngoal (1 subgoal):\n 1. False", "by(auto)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'};\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D'; e = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e'\\<bullet>F{D} = e''", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. e'\\<bullet>F{D} = e''", ".."], ["proof (state)\nthis:\n  e'\\<bullet>F{D} = e''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e'\\<bullet>F{D} = e''\n\ngoal (28 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 28 subgoals...", "next"], ["proof (state)\ngoal (28 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 28 subgoals...", "case AnnoFAccALength"], ["proof (state)\nthis:\n  is_lub,P,E_ \\<turnstile> e_ \\<leadsto> e'_\n  is_lub,P,E_ \\<turnstile> e_ \\<leadsto> ?e'' \\<Longrightarrow> e'_ = ?e''\n  is_lub,P,E_ \\<turnstile> e'_ :: T_\\<lfloor>\\<rceil>\n  is_lub,P,E_ \\<turnstile> e_\\<bullet>length \\<leadsto> e''\n\ngoal (28 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 28 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  is_lub,P,E_ \\<turnstile> e_ \\<leadsto> e'_\n  is_lub,P,E_ \\<turnstile> e_ \\<leadsto> ?e'' \\<Longrightarrow> e'_ = ?e''\n  is_lub,P,E_ \\<turnstile> e'_ :: T_\\<lfloor>\\<rceil>\n  is_lub,P,E_ \\<turnstile> e_\\<bullet>length \\<leadsto> e''\n\ngoal (1 subgoal):\n 1. e'_\\<bullet>length = e''", "by(fastforce intro: WT_unique[OF is_lub_unique])"], ["proof (state)\nthis:\n  e'_\\<bullet>length = e''\n\ngoal (27 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 27 subgoals...", "next"], ["proof (state)\ngoal (27 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 27 subgoals...", "case (AnnoFAss E e1 e1' e2 e2' U C F T fm D)"], ["proof (state)\nthis:\n  is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'\n  is_lub,P,E \\<turnstile> e1 \\<leadsto> ?e'' \\<Longrightarrow> e1' = ?e''\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> ?e'' \\<Longrightarrow> e2' = ?e''\n  is_lub,P,E \\<turnstile> e1' :: U\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  P \\<turnstile> C sees F:T (fm) in D\n  is_Array U \\<longrightarrow> F \\<noteq> length\n  is_lub,P,E \\<turnstile> e1\\<bullet>F := e2 \\<leadsto> e''\n\ngoal (27 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 27 subgoals...", "from \\<open>is_lub,P,E \\<turnstile> e1\\<bullet>F{STR ''''} := e2 \\<leadsto> e''\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e1\\<bullet>F := e2 \\<leadsto> e''", "show ?case"], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e1\\<bullet>F := e2 \\<leadsto> e''\n\ngoal (1 subgoal):\n 1. e1'\\<bullet>F{D} := e2' = e''", "proof(rule Anno_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "fix e1'' e2'' U' C' T' fm' D'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "assume \"is_lub,P,E \\<turnstile> e1 \\<leadsto> e1''\" \"is_lub,P,E \\<turnstile> e2 \\<leadsto> e2''\"\n      and \"is_lub,P,E \\<turnstile> e1'' :: U'\" and \"class_type_of' U' = \\<lfloor>C'\\<rfloor>\"\n      and \"P \\<turnstile> C' sees F:T' (fm') in D'\"\n      and \"e'' = e1''\\<bullet>F{D'} := e2''\""], ["proof (state)\nthis:\n  is_lub,P,E \\<turnstile> e1 \\<leadsto> e1''\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2''\n  is_lub,P,E \\<turnstile> e1'' :: U'\n  class_type_of' U' = \\<lfloor>C'\\<rfloor>\n  P \\<turnstile> C' sees F:T' (fm') in D'\n  e'' = e1''\\<bullet>F{D'} := e2''\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "from \\<open>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1''\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e1 \\<leadsto> e1''", "have \"e1' = e1''\""], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e1 \\<leadsto> e1''\n\ngoal (1 subgoal):\n 1. e1' = e1''", "by(rule AnnoFAss)"], ["proof (state)\nthis:\n  e1' = e1''\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "moreover"], ["proof (state)\nthis:\n  e1' = e1''\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "with \\<open>is_lub,P,E \\<turnstile> e1' :: U\\<close> \\<open>is_lub,P,E \\<turnstile> e1'' :: U'\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e1' :: U\n  is_lub,P,E \\<turnstile> e1'' :: U'\n  e1' = e1''", "have \"U = U'\""], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e1' :: U\n  is_lub,P,E \\<turnstile> e1'' :: U'\n  e1' = e1''\n\ngoal (1 subgoal):\n 1. U = U'", "by(auto intro: WT_unique is_lub_unique)"], ["proof (state)\nthis:\n  U = U'\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "with \\<open>class_type_of' U = \\<lfloor>C\\<rfloor>\\<close> \\<open>class_type_of' U' = \\<lfloor>C'\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  class_type_of' U' = \\<lfloor>C'\\<rfloor>\n  U = U'", "have \"C = C'\""], ["proof (prove)\nusing this:\n  class_type_of' U = \\<lfloor>C\\<rfloor>\n  class_type_of' U' = \\<lfloor>C'\\<rfloor>\n  U = U'\n\ngoal (1 subgoal):\n 1. C = C'", "by(auto)"], ["proof (state)\nthis:\n  C = C'\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "with \\<open>P \\<turnstile> C' sees F:T' (fm') in D'\\<close> \\<open>P \\<turnstile> C sees F:T (fm) in D\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> C' sees F:T' (fm') in D'\n  P \\<turnstile> C sees F:T (fm) in D\n  C = C'", "have \"D' = D\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C' sees F:T' (fm') in D'\n  P \\<turnstile> C sees F:T (fm) in D\n  C = C'\n\ngoal (1 subgoal):\n 1. D' = D", "by(auto dest: sees_field_fun)"], ["proof (state)\nthis:\n  D' = D\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "moreover"], ["proof (state)\nthis:\n  D' = D\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "from \\<open>is_lub,P,E \\<turnstile> e2 \\<leadsto> e2''\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2''", "have \"e2' = e2''\""], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> e2''\n\ngoal (1 subgoal):\n 1. e2' = e2''", "by(rule AnnoFAss)"], ["proof (state)\nthis:\n  e2' = e2''\n\ngoal (2 subgoals):\n 1. \\<And>e1'a e2'a U C T fm Da.\n       \\<lbrakk>STR '''' = STR ''''; e'' = e1'a\\<bullet>F{Da} := e2'a;\n        is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'a;\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2'a;\n        is_lub,P,E \\<turnstile> e1'a :: U;\n        class_type_of' U = \\<lfloor>C\\<rfloor>;\n        P \\<turnstile> C sees F:T (fm) in Da;\n        (\\<exists>Ua. U = Ua\\<lfloor>\\<rceil>) \\<longrightarrow>\n        F \\<noteq> length\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''\n 2. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "ultimately"], ["proof (chain)\npicking this:\n  e1' = e1''\n  D' = D\n  e2' = e2''", "show ?thesis"], ["proof (prove)\nusing this:\n  e1' = e1''\n  D' = D\n  e2' = e2''\n\ngoal (1 subgoal):\n 1. e1'\\<bullet>F{D} := e2' = e''", "using \\<open>e'' = e1''\\<bullet>F{D'} := e2''\\<close>"], ["proof (prove)\nusing this:\n  e1' = e1''\n  D' = D\n  e2' = e2''\n  e'' = e1''\\<bullet>F{D'} := e2''\n\ngoal (1 subgoal):\n 1. e1'\\<bullet>F{D} := e2' = e''", "by simp"], ["proof (state)\nthis:\n  e1'\\<bullet>F{D} := e2' = e''\n\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "fix C' D' fs ms T' fm' D'' e'''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "assume \"e'' = Cast (Class D') (Var this)\\<bullet>F{D''} := e'''\"\n      and \"E this = \\<lfloor>Class C'\\<rfloor>\"\n      and \"class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\"\n      and \"P \\<turnstile> D' sees F:T' (fm') in D''\"\n      and \"is_lub,P,E \\<turnstile> e2 \\<leadsto> e'''\"\n      and \"e1 = Var super\""], ["proof (state)\nthis:\n  e'' = Cast (Class D') (Var this)\\<bullet>F{D''} := e'''\n  E this = \\<lfloor>Class C'\\<rfloor>\n  class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\n  P \\<turnstile> D' sees F:T' (fm') in D''\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> e'''\n  e1 = Var Annotate.super\n\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "with \\<open>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'\\<close>"], ["proof (chain)\npicking this:\n  is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'\n  e'' = Cast (Class D') (Var this)\\<bullet>F{D''} := e'''\n  E this = \\<lfloor>Class C'\\<rfloor>\n  class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\n  P \\<turnstile> D' sees F:T' (fm') in D''\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> e'''\n  e1 = Var Annotate.super", "have False"], ["proof (prove)\nusing this:\n  is_lub,P,E \\<turnstile> e1 \\<leadsto> e1'\n  e'' = Cast (Class D') (Var this)\\<bullet>F{D''} := e'''\n  E this = \\<lfloor>Class C'\\<rfloor>\n  class P C' = \\<lfloor>(D', fs, ms)\\<rfloor>\n  P \\<turnstile> D' sees F:T' (fm') in D''\n  is_lub,P,E \\<turnstile> e2 \\<leadsto> e'''\n  e1 = Var Annotate.super\n\ngoal (1 subgoal):\n 1. False", "by(auto elim: Anno_cases)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>C Da fs ms T fm D' e'.\n       \\<lbrakk>e'' = Cast (Class Da) (Var this)\\<bullet>F{D'} := e';\n        E this = \\<lfloor>Class C\\<rfloor>; C \\<noteq> Object;\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>;\n        P \\<turnstile> Da sees F:T (fm) in D';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e'; e1 = Var Annotate.super;\n        STR '''' = STR ''''\\<rbrakk>\n       \\<Longrightarrow> e1'\\<bullet>F{D} := e2' = e''", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. e1'\\<bullet>F{D} := e2' = e''", ".."], ["proof (state)\nthis:\n  e1'\\<bullet>F{D} := e2' = e''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e1'\\<bullet>F{D} := e2' = e''\n\ngoal (26 subgoals):\n 1. \\<And>E C e''.\n       is_lub,P,E \\<turnstile> new C \\<leadsto> e'' \\<Longrightarrow>\n       new C = e''\n 2. \\<And>E i i' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> i \\<leadsto> i';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> i \\<leadsto> e'' \\<Longrightarrow>\n           i' = e'';\n        is_lub,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> newA T\\<lfloor>i'\\<rceil> = e''\n 3. \\<And>E e e' C e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> Cast C e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Cast C e' = e''\n 4. \\<And>E e e' T e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> e instanceof T \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e' instanceof T = e''\n 5. \\<And>E v e''.\n       is_lub,P,E \\<turnstile> Val v \\<leadsto> e'' \\<Longrightarrow>\n       Val v = e''\n 6. \\<And>E V T e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var V = e''\n 7. \\<And>E V C T fm D e''.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        is_lub,P,E \\<turnstile> Var V \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> Var this\\<bullet>V{D} = e''\n 8. \\<And>E e1 e1' e2 e2' bop e''.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 \\<leadsto> e1';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e1 \\<leadsto> e'' \\<Longrightarrow>\n           e1' = e'';\n        is_lub,P,E \\<turnstile> e2 \\<leadsto> e2';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e2 \\<leadsto> e'' \\<Longrightarrow>\n           e2' = e'';\n        is_lub,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> e1' \\<guillemotleft>bop\\<guillemotright> e2' = e''\n 9. \\<And>E V T e e' e''.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub,P,E \\<turnstile> e \\<leadsto> e';\n        \\<And>e''.\n           is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n           e' = e'';\n        is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n       \\<Longrightarrow> V:=e' = e''\n 10. \\<And>E V C T fm D e e' e''.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub,P,E \\<turnstile> e \\<leadsto> e';\n         \\<And>e''.\n            is_lub,P,E \\<turnstile> e \\<leadsto> e'' \\<Longrightarrow>\n            e' = e'';\n         is_lub,P,E \\<turnstile> V:=e \\<leadsto> e''\\<rbrakk>\n        \\<Longrightarrow> Var this\\<bullet>V{D} := e' = e''\nA total of 26 subgoals...", "qed(fastforce dest: sees_field_fun)+"], ["", "subsection \\<open>Code generation\\<close>"], ["", "definition Anno_code :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr \\<Rightarrow> 'addr expr \\<Rightarrow> bool\" (\"_,_ \\<turnstile> _ \\<leadsto>'' _\"   [51,0,0,51]50)\nwhere \"Anno_code P = Anno (is_lub_sup P) P\""], ["", "definition Annos_code :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr list \\<Rightarrow> 'addr expr list \\<Rightarrow> bool\" (\"_,_ \\<turnstile> _ [\\<leadsto>''] _\" [51,0,0,51]50)\nwhere \"Annos_code P = Annos (is_lub_sup P) P\""], ["", "primrec block_types :: \"('a, 'b, 'addr) exp \\<Rightarrow> ty list\" \n  and blocks_types :: \"('a, 'b, 'addr) exp list \\<Rightarrow> ty list\"\nwhere \n  \"block_types (new C) = []\"\n| \"block_types (newA T\\<lfloor>e\\<rceil>) = block_types e\"\n| \"block_types (Cast U e) = block_types e\"\n| \"block_types (e instanceof U) = block_types e\"\n| \"block_types (e1\\<guillemotleft>bop\\<guillemotright>e2) = block_types e1 @ block_types e2\"\n| \"block_types (Val v) = []\"\n| \"block_types (Var V) = []\"\n| \"block_types (V := e) = block_types e\"\n| \"block_types (a\\<lfloor>i\\<rceil>) = block_types a @ block_types i\"\n| \"block_types (a\\<lfloor>i\\<rceil> := e) = block_types a @ block_types i @ block_types e\"\n| \"block_types (a\\<bullet>length) = block_types a\"\n| \"block_types (e\\<bullet>F{D}) = block_types e\"\n| \"block_types (e\\<bullet>F{D} := e') = block_types e @ block_types e'\"\n| \"block_types (e\\<bullet>compareAndSwap(D\\<bullet>F, e', e'')) = block_types e @ block_types e' @ block_types e''\"\n| \"block_types (e\\<bullet>M(es)) = block_types e @ blocks_types es\"\n| \"block_types {V:T=vo; e} = T # block_types e\"\n| \"block_types (sync\\<^bsub>V\\<^esub>(e) e') = block_types e @ block_types e'\"\n| \"block_types (insync\\<^bsub>V\\<^esub>(a) e) = block_types e\"\n| \"block_types (e;;e') = block_types e @ block_types e'\"\n| \"block_types (if (e) e1 else e2) = block_types e @ block_types e1 @ block_types e2\"\n| \"block_types (while (b) c) = block_types b @ block_types c\"\n| \"block_types (throw e) = block_types e\"\n| \"block_types (try e catch(C V) e') = block_types e @ Class C # block_types e'\"\n\n| \"blocks_types [] = []\"\n| \"blocks_types (e#es) = block_types e @ blocks_types es\""], ["", "lemma fixes is_lub1 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>1 lub'((_,/ _)') = _\" [51,51,51] 50)\n  and is_lub2 :: \"ty \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool\" (\"\\<turnstile>2 lub'((_,/ _)') = _\" [51,51,51] 50)\n  assumes wf: \"wf_prog wf_md P\"\n  and is_lub1_into_is_lub2: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>1 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> \\<turnstile>2 lub(T1, T2) = T3\"\n  and is_lub2_is_type: \"\\<And>T1 T2 T3. \\<lbrakk> \\<turnstile>2 lub(T1, T2) = T3; is_type P T1; is_type P T2 \\<rbrakk> \\<Longrightarrow> is_type P T3\"\n  shows Anno_change_is_lub:\n  \"\\<lbrakk> is_lub1,P,E \\<turnstile> e \\<leadsto> e'; ran E \\<union> set (block_types e) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> e \\<leadsto> e'\"\n  and Annos_change_is_lub:\n  \"\\<lbrakk> is_lub1,P,E \\<turnstile> es [\\<leadsto>] es'; ran E \\<union> set (blocks_types es) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> is_lub2,P,E \\<turnstile> es [\\<leadsto>] es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n      ran E \\<union> set (block_types e) \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> is_lub2,P,E \\<turnstile> e \\<leadsto> e') &&&\n    (\\<lbrakk>is_lub1,P,E \\<turnstile> es [\\<leadsto>] es';\n      ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> is_lub2,P,E \\<turnstile> es [\\<leadsto>] es')", "proof(induct rule: Anno_Annos.inducts)"], ["proof (state)\ngoal (29 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 29 subgoals...", "case (AnnoBlock E V T e e' vo)"], ["proof (state)\nthis:\n  is_lub1,P,E(V \\<mapsto> T) \\<turnstile> e \\<leadsto> e'\n  ran (E(V \\<mapsto> T)) \\<union> set (block_types e)\n  \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E(V \\<mapsto> T) \\<turnstile> e \\<leadsto> e'\n  ran E \\<union> set (block_types {V:T=vo; e}) \\<subseteq> types P\n\ngoal (29 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 29 subgoals...", "from \\<open>ran E \\<union> set (block_types {V:T=vo; e}) \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  ran E \\<union> set (block_types {V:T=vo; e}) \\<subseteq> types P", "have \"ran (E(V \\<mapsto> T)) \\<union> set (block_types e) \\<subseteq> types P\""], ["proof (prove)\nusing this:\n  ran E \\<union> set (block_types {V:T=vo; e}) \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. ran (E(V \\<mapsto> T)) \\<union> set (block_types e) \\<subseteq> types P", "by(auto simp add: ran_def)"], ["proof (state)\nthis:\n  ran (E(V \\<mapsto> T)) \\<union> set (block_types e) \\<subseteq> types P\n\ngoal (29 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 29 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  ran (E(V \\<mapsto> T)) \\<union> set (block_types e) \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> {V:T=vo; e} \\<leadsto> {V:T=vo; e'}", "using AnnoBlock"], ["proof (prove)\nusing this:\n  ran (E(V \\<mapsto> T)) \\<union> set (block_types e) \\<subseteq> types P\n  is_lub1,P,E(V \\<mapsto> T) \\<turnstile> e \\<leadsto> e'\n  ran (E(V \\<mapsto> T)) \\<union> set (block_types e)\n  \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E(V \\<mapsto> T) \\<turnstile> e \\<leadsto> e'\n  ran E \\<union> set (block_types {V:T=vo; e}) \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> {V:T=vo; e} \\<leadsto> {V:T=vo; e'}", "by(blast intro: Anno_Annos.intros)"], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> {V:T=vo; e} \\<leadsto> {V:T=vo; e'}\n\ngoal (28 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 28 subgoals...", "next"], ["proof (state)\ngoal (28 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 28 subgoals...", "case (AnnoTry E e1 e1' V C e2 e2')"], ["proof (state)\nthis:\n  is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1'\n  ran E \\<union> set (block_types e1) \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1'\n  is_lub1,P,E(V \\<mapsto> Class C) \\<turnstile> e2 \\<leadsto> e2'\n  ran (E(V \\<mapsto> Class C)) \\<union> set (block_types e2)\n  \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 \\<leadsto> e2'\n  ran E \\<union> set (block_types (try e1 catch(C V) e2))\n  \\<subseteq> types P\n\ngoal (28 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 28 subgoals...", "from \\<open>ran E \\<union> set (block_types (try e1 catch(C V) e2)) \\<subseteq> types P\\<close>"], ["proof (chain)\npicking this:\n  ran E \\<union> set (block_types (try e1 catch(C V) e2))\n  \\<subseteq> types P", "have \"ran (E(V \\<mapsto> Class C)) \\<union> set (block_types e2) \\<subseteq> types P\""], ["proof (prove)\nusing this:\n  ran E \\<union> set (block_types (try e1 catch(C V) e2))\n  \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. ran (E(V \\<mapsto> Class C)) \\<union> set (block_types e2)\n    \\<subseteq> types P", "by(auto simp add: ran_def)"], ["proof (state)\nthis:\n  ran (E(V \\<mapsto> Class C)) \\<union> set (block_types e2)\n  \\<subseteq> types P\n\ngoal (28 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 28 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  ran (E(V \\<mapsto> Class C)) \\<union> set (block_types e2)\n  \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> try e1 catch(C V) e2 \\<leadsto> try e1'\n    catch(C V) e2'", "using AnnoTry"], ["proof (prove)\nusing this:\n  ran (E(V \\<mapsto> Class C)) \\<union> set (block_types e2)\n  \\<subseteq> types P\n  is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1'\n  ran E \\<union> set (block_types e1) \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1'\n  is_lub1,P,E(V \\<mapsto> Class C) \\<turnstile> e2 \\<leadsto> e2'\n  ran (E(V \\<mapsto> Class C)) \\<union> set (block_types e2)\n  \\<subseteq> types P \\<Longrightarrow>\n  is_lub2,P,E(V \\<mapsto> Class C) \\<turnstile> e2 \\<leadsto> e2'\n  ran E \\<union> set (block_types (try e1 catch(C V) e2))\n  \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. is_lub2,P,E \\<turnstile> try e1 catch(C V) e2 \\<leadsto> try e1'\n    catch(C V) e2'", "by(simp del: fun_upd_apply)(blast intro: Anno_Annos.intros)"], ["proof (state)\nthis:\n  is_lub2,P,E \\<turnstile> try e1 catch(C V) e2 \\<leadsto> try e1'\n  catch(C V) e2'\n\ngoal (27 subgoals):\n 1. \\<And>E C.\n       ran E \\<union> set (block_types (new C))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> new C \\<leadsto> new C\n 2. \\<And>E i i' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types i)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> i \\<leadsto> i';\n        ran E \\<union> set (block_types (newA T\\<lfloor>i\\<rceil>))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> newA T\\<lfloor>i\\<rceil> \\<leadsto> newA T\\<lfloor>i'\\<rceil>\n 3. \\<And>E e e' C.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (Cast C e))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Cast C\n             e \\<leadsto> Cast C e'\n 4. \\<And>E e e' T.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (e instanceof T))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e instanceof T \\<leadsto> e' instanceof T\n 5. \\<And>E v.\n       ran E \\<union> set (block_types (Val v))\n       \\<subseteq> types P \\<Longrightarrow>\n       is_lub2,P,E \\<turnstile> Val v \\<leadsto> Val v\n 6. \\<And>E V T.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var V \\<leadsto> Var V\n 7. \\<And>E V C T fm D.\n       \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n        E this = \\<lfloor>Class C\\<rfloor>;\n        P \\<turnstile> C sees V:T (fm) in D;\n        ran E \\<union> set (block_types (Var V))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> Var\n             V \\<leadsto> Var this\\<bullet>V{D}\n 8. \\<And>E e1 e1' e2 e2' bop.\n       \\<lbrakk>is_lub1,P,E \\<turnstile> e1 \\<leadsto> e1';\n        ran E \\<union> set (block_types e1)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e1 \\<leadsto> e1';\n        is_lub1,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union> set (block_types e2)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e2 \\<leadsto> e2';\n        ran E \\<union>\n        set (block_types (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n        \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> e1 \\<guillemotleft>bop\\<guillemotright> e2 \\<leadsto> e1' \\<guillemotleft>bop\\<guillemotright> e2'\n 9. \\<And>E V T e e'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; V \\<noteq> Annotate.super;\n        is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types e)\n        \\<subseteq> types P \\<Longrightarrow>\n        is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n        ran E \\<union> set (block_types (V:=e)) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> V:=e'\n 10. \\<And>E V C T fm D e e'.\n        \\<lbrakk>E V = None; V \\<noteq> Annotate.super;\n         E this = \\<lfloor>Class C\\<rfloor>;\n         P \\<turnstile> C sees V:T (fm) in D;\n         is_lub1,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types e)\n         \\<subseteq> types P \\<Longrightarrow>\n         is_lub2,P,E \\<turnstile> e \\<leadsto> e';\n         ran E \\<union> set (block_types (V:=e))\n         \\<subseteq> types P\\<rbrakk>\n        \\<Longrightarrow> is_lub2,P,E \\<turnstile> V:=e \\<leadsto> Var\n                              this\\<bullet>V{D} := e'\nA total of 27 subgoals...", "qed(simp_all del: is_Array.simps is_Array_conv, (blast intro: Anno_Annos.intros WT_change_is_lub[OF wf, where ?is_lub1.0=is_lub1 and ?is_lub2.0=is_lub2] is_lub1_into_is_lub2 is_lub2_is_type)+)"], ["", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows Anno_into_Anno_code: \"\\<lbrakk> P,E \\<turnstile> e \\<leadsto> e'; ran E \\<union> set (block_types e) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto>' e'\"\n  and Annos_into_Annos_code: \"\\<lbrakk> P,E \\<turnstile> es [\\<leadsto>] es'; ran E \\<union> set (blocks_types es) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,E \\<turnstile> e \\<leadsto> e';\n      ran E \\<union> set (block_types e) \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto>' e') &&&\n    (\\<lbrakk>P,E \\<turnstile> es [\\<leadsto>] es';\n      ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e \\<leadsto> e';\n     ran E \\<union> set (block_types e) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto>' e'\n 2. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es'", "assume anno: \"P,E \\<turnstile> e \\<leadsto> e'\" \n    and ran: \"ran E \\<union> set (block_types e) \\<subseteq> types P\""], ["proof (state)\nthis:\n  P,E \\<turnstile> e \\<leadsto> e'\n  ran E \\<union> set (block_types e) \\<subseteq> types P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e \\<leadsto> e';\n     ran E \\<union> set (block_types e) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto>' e'\n 2. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es'", "show \"P,E \\<turnstile> e \\<leadsto>' e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> e \\<leadsto>' e'", "unfolding Anno_code_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lub_sup P,P,E \\<turnstile> e \\<leadsto> e'", "by(rule Anno_change_is_lub[OF wf _ _ anno ran])(blast intro!: is_lub_sup.intros intro: is_lub_subD[OF wf] sup_is_type[OF wf] elim!: is_lub_sup.cases)+"], ["proof (state)\nthis:\n  P,E \\<turnstile> e \\<leadsto>' e'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es'", "assume annos: \"P,E \\<turnstile> es [\\<leadsto>] es'\"\n    and ran: \"ran E \\<union> set (blocks_types es) \\<subseteq> types P\""], ["proof (state)\nthis:\n  P,E \\<turnstile> es [\\<leadsto>] es'\n  ran E \\<union> set (blocks_types es) \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>'] es'", "show \"P,E \\<turnstile> es [\\<leadsto>'] es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> es [\\<leadsto>'] es'", "unfolding Annos_code_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_lub_sup P,P,E \\<turnstile> es [\\<leadsto>] es'", "by(rule Annos_change_is_lub[OF wf _ _ annos ran])(blast intro!: is_lub_sup.intros intro: is_lub_subD[OF wf] sup_is_type[OF wf] elim!: is_lub_sup.cases)+"], ["proof (state)\nthis:\n  P,E \\<turnstile> es [\\<leadsto>'] es'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes wf: \"wf_prog wf_md P\"\n  shows Anno_code_into_Anno: \"\\<lbrakk> P,E \\<turnstile> e \\<leadsto>' e'; ran E \\<union> set (block_types e) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto> e'\"\n  and Annos_code_into_Annos: \"\\<lbrakk> P,E \\<turnstile> es [\\<leadsto>'] es'; ran E \\<union> set (blocks_types es) \\<subseteq> types P \\<rbrakk> \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,E \\<turnstile> e \\<leadsto>' e';\n      ran E \\<union> set (block_types e) \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto> e') &&&\n    (\\<lbrakk>P,E \\<turnstile> es [\\<leadsto>'] es';\n      ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n     \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e \\<leadsto>' e';\n     ran E \\<union> set (block_types e) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto> e'\n 2. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>'] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es'", "assume anno: \"P,E \\<turnstile> e \\<leadsto>' e'\" \n    and ran: \"ran E \\<union> set (block_types e) \\<subseteq> types P\""], ["proof (state)\nthis:\n  P,E \\<turnstile> e \\<leadsto>' e'\n  ran E \\<union> set (block_types e) \\<subseteq> types P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P,E \\<turnstile> e \\<leadsto>' e';\n     ran E \\<union> set (block_types e) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> e \\<leadsto> e'\n 2. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>'] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es'", "show \"P,E \\<turnstile> e \\<leadsto> e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> e \\<leadsto> e'", "by(rule Anno_change_is_lub[OF wf _ _ anno[unfolded Anno_code_def] ran])(blast elim!: is_lub_sup.cases intro: sup_is_lubI[OF wf] is_lub_is_type[OF wf])+"], ["proof (state)\nthis:\n  P,E \\<turnstile> e \\<leadsto> e'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>'] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>'] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es'", "assume annos: \"P,E \\<turnstile> es [\\<leadsto>'] es'\"\n    and ran: \"ran E \\<union> set (blocks_types es) \\<subseteq> types P\""], ["proof (state)\nthis:\n  P,E \\<turnstile> es [\\<leadsto>'] es'\n  ran E \\<union> set (blocks_types es) \\<subseteq> types P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P,E \\<turnstile> es [\\<leadsto>'] es';\n     ran E \\<union> set (blocks_types es) \\<subseteq> types P\\<rbrakk>\n    \\<Longrightarrow> P,E \\<turnstile> es [\\<leadsto>] es'", "show \"P,E \\<turnstile> es [\\<leadsto>] es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,E \\<turnstile> es [\\<leadsto>] es'", "by(rule Annos_change_is_lub[OF wf _ _ annos[unfolded Annos_code_def] ran])(blast elim!: is_lub_sup.cases intro: sup_is_lubI[OF wf] is_lub_is_type[OF wf])+"], ["proof (state)\nthis:\n  P,E \\<turnstile> es [\\<leadsto>] es'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fixes is_lub\n  assumes wf: \"wf_prog wf_md P\"\n  shows WT_block_types_is_type: \"is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow> set (block_types e) \\<subseteq> types P\"\n  and WTs_blocks_types_is_type: \"is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow> set (blocks_types es) \\<subseteq> types P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lub,P,E \\<turnstile> e :: T \\<Longrightarrow>\n     set (block_types e) \\<subseteq> types P) &&&\n    (is_lub,P,E \\<turnstile> es [::] Ts \\<Longrightarrow>\n     set (blocks_types es) \\<subseteq> types P)", "apply(induct rule: WT_WTs.inducts)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>C E.\n       is_class P C \\<Longrightarrow>\n       set (block_types (new C)) \\<subseteq> types P\n 2. \\<And>E e T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: Integer;\n        set (block_types e) \\<subseteq> types P;\n        is_type P (T\\<lfloor>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> set (block_types (newA T\\<lfloor>e\\<rceil>))\n                         \\<subseteq> types P\n 3. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        set (block_types e) \\<subseteq> types P;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U\\<rbrakk>\n       \\<Longrightarrow> set (block_types (Cast U e)) \\<subseteq> types P\n 4. \\<And>E e T U.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e :: T;\n        set (block_types e) \\<subseteq> types P;\n        P \\<turnstile> U \\<le> T \\<or> P \\<turnstile> T \\<le> U;\n        is_type P U; is_refT U\\<rbrakk>\n       \\<Longrightarrow> set (block_types (e instanceof U))\n                         \\<subseteq> types P\n 5. \\<And>v T E.\n       typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n       set (block_types (Val v)) \\<subseteq> types P\n 6. \\<And>E V T.\n       E V = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n       set (block_types (Var V)) \\<subseteq> types P\n 7. \\<And>E e1 T1 e2 T2 bop T.\n       \\<lbrakk>is_lub,P,E \\<turnstile> e1 :: T1;\n        set (block_types e1) \\<subseteq> types P;\n        is_lub,P,E \\<turnstile> e2 :: T2;\n        set (block_types e2) \\<subseteq> types P;\n        P \\<turnstile> T1\\<guillemotleft>bop\\<guillemotright>T2 :: T\\<rbrakk>\n       \\<Longrightarrow> set (block_types\n                               (e1 \\<guillemotleft>bop\\<guillemotright> e2))\n                         \\<subseteq> types P\n 8. \\<And>E V T e T'.\n       \\<lbrakk>E V = \\<lfloor>T\\<rfloor>; is_lub,P,E \\<turnstile> e :: T';\n        set (block_types e) \\<subseteq> types P; P \\<turnstile> T' \\<le> T;\n        V \\<noteq> this\\<rbrakk>\n       \\<Longrightarrow> set (block_types (V:=e)) \\<subseteq> types P\n 9. \\<And>E a T i.\n       \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n        set (block_types a) \\<subseteq> types P;\n        is_lub,P,E \\<turnstile> i :: Integer;\n        set (block_types i) \\<subseteq> types P\\<rbrakk>\n       \\<Longrightarrow> set (block_types (a\\<lfloor>i\\<rceil>))\n                         \\<subseteq> types P\n 10. \\<And>E a T i e T'.\n        \\<lbrakk>is_lub,P,E \\<turnstile> a :: T\\<lfloor>\\<rceil>;\n         set (block_types a) \\<subseteq> types P;\n         is_lub,P,E \\<turnstile> i :: Integer;\n         set (block_types i) \\<subseteq> types P;\n         is_lub,P,E \\<turnstile> e :: T';\n         set (block_types e) \\<subseteq> types P;\n         P \\<turnstile> T' \\<le> T\\<rbrakk>\n        \\<Longrightarrow> set (block_types (a\\<lfloor>i\\<rceil> := e))\n                          \\<subseteq> types P\nA total of 24 subgoals...", "apply(auto intro: is_class_sub_Throwable[OF wf])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fixes is_lub\n  shows Anno_block_types: \"is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<Longrightarrow> block_types e = block_types e'\"\n  and Annos_blocks_types: \"is_lub,P,E \\<turnstile> es [\\<leadsto>] es' \\<Longrightarrow> blocks_types es = blocks_types es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_lub,P,E \\<turnstile> e \\<leadsto> e' \\<Longrightarrow>\n     block_types e = block_types e') &&&\n    (is_lub,P,E \\<turnstile> es [\\<leadsto>] es' \\<Longrightarrow>\n     blocks_types es = blocks_types es')", "by(induct rule: Anno_Annos.inducts) auto"], ["", "code_pred \n  (modes: (i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool) \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool)\n  [detect_switches, skip_proof]\n  Anno"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition annotate_code :: \"'addr J_prog \\<Rightarrow> env \\<Rightarrow> 'addr expr \\<Rightarrow> 'addr expr\"\nwhere \"annotate_code P E e = THE_default e (\\<lambda>e'. P,E \\<turnstile> e \\<leadsto>' e')\""], ["", "code_pred\n  (modes: i \\<Rightarrow> i \\<Rightarrow> i \\<Rightarrow> o \\<Rightarrow> bool)\n  [inductify]\n  Anno_code"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma eval_Anno_i_i_i_o_conv:\n  \"Predicate.eval (Anno_code_i_i_i_o P E e) = (\\<lambda>e'. P,E \\<turnstile> e \\<leadsto>' e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred.eval (Anno_code_i_i_i_o P E e) = Anno_code P E e", "by(auto intro!: ext intro: Anno_code_i_i_i_oI elim: Anno_code_i_i_i_oE)"], ["", "lemma annotate_code [code]:\n  \"annotate_code P E e = Predicate.singleton (\\<lambda>_. Code.abort (STR ''annotate'') (\\<lambda>_. e)) (Anno_code_i_i_i_o P E e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. annotate_code P E e =\n    Predicate.singleton\n     (\\<lambda>_. Code.abort STR ''annotate'' (\\<lambda>_. e))\n     (Anno_code_i_i_i_o P E e)", "by(simp add: THE_default_def Predicate.singleton_def annotate_code_def eval_Anno_i_i_i_o_conv)"], ["", "end"]]}