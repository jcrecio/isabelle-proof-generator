{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Compiler/Compiler1.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma fresh_var_fresh: \"fresh_var Vs \\<notin> set Vs\"", "lemmas compE1_compEs1_induct =\n  compE1_compEs1.induct[case_names New NewArray Cast InstanceOf Val Var BinOp LAss AAcc AAss ALen FAcc FAss CAS Call Block Synchronized InSynchronized Seq Cond While throw TryCatch Nil Cons]", "lemma compEs1_conv_map [simp]: \"compEs1 Vs es = map (compE1 Vs) es\"", "lemmas compEs1_map_Val = compEs1_conv_map", "lemma compE1_eq_Val [simp]: \"compE1 Vs e = Val v \\<longleftrightarrow> e = Val v\"", "lemma Val_eq_compE1 [simp]: \"Val v = compE1 Vs e \\<longleftrightarrow> e = Val v\"", "lemma compEs1_eq_map_Val [simp]: \"compEs1 Vs es = map Val vs \\<longleftrightarrow> es = map Val vs\"", "lemma compE1_eq_Var [simp]: \"compE1 Vs e = Var V \\<longleftrightarrow> (\\<exists>V'. e = Var V' \\<and> V = index Vs V')\"", "lemma compE1_eq_Call [simp]:\n  \"compE1 Vs e = obj\\<bullet>M(params) \\<longleftrightarrow> (\\<exists>obj' params'. e = obj'\\<bullet>M(params') \\<and> compE1 Vs obj' = obj \\<and> compEs1 Vs params' = params)\"", "lemma length_compEs2 [simp]:\n  \"length (compEs1 Vs es) = length es\"", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows expr_locks_compE1 [simp]: \"expr_locks (compE1 Vs e) = expr_locks e\"\n  and expr_lockss_compEs1 [simp]: \"expr_lockss (compEs1 Vs es) = expr_lockss es\"", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows contains_insync_compE1 [simp]: \"contains_insync (compE1 Vs e) = contains_insync e\"\n  and contains_insyncs_compEs1 [simp]: \"contains_insyncs (compEs1 Vs es) = contains_insyncs es\"", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows max_vars_compE1: \"max_vars (compE1 Vs e) = max_vars e\"\n  and max_varss_compEs1: \"max_varss (compEs1 Vs es) = max_varss es\"", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows \\<B>: \"size Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n\"\n  and \\<B>s: \"size Vs = n \\<Longrightarrow> \\<B>s (compEs1 Vs es) n\"", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows fv_compE1: \"fv e \\<subseteq> set Vs \\<Longrightarrow> fv (compE1 Vs e) = (index Vs) ` (fv e)\"\n  and fvs_compEs1: \"fvs es \\<subseteq> set Vs \\<Longrightarrow> fvs (compEs1 Vs es) = (index Vs) ` (fvs es)\"", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows syncvars_compE1: \"fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e)\"\n  and syncvarss_compEs1: \"fvs es \\<subseteq> set Vs \\<Longrightarrow> syncvarss (compEs1 Vs es)\"", "lemma (in heap_base) synthesized_call_compP [simp]:\n  \"synthesized_call (compP f P) h aMvs = synthesized_call P h aMvs\"", "lemma comp_final: \"final e \\<Longrightarrow> compE1 Vs e = fin1 e\"", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows [simp]: \"max_vars (compE1 Vs e) = max_vars e\"\n  and \"max_varss (compEs1 Vs es) = max_varss es\""], "translations": [["", "lemma fresh_var_fresh: \"fresh_var Vs \\<notin> set Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_var Vs \\<notin> set Vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fresh_var Vs \\<notin> set Vs", "have \"V \\<in> set Vs \\<Longrightarrow> length (String.explode V) < length (String.explode (fresh_var Vs))\" for V"], ["proof (prove)\ngoal (1 subgoal):\n 1. V \\<in> set Vs \\<Longrightarrow>\n    length (literal.explode V) < length (literal.explode (fresh_var Vs))", "by (induction Vs) (auto simp add: fresh_var_def Literal.rep_eq)"], ["proof (state)\nthis:\n  ?V \\<in> set Vs \\<Longrightarrow>\n  length (literal.explode ?V) < length (literal.explode (fresh_var Vs))\n\ngoal (1 subgoal):\n 1. fresh_var Vs \\<notin> set Vs", "then"], ["proof (chain)\npicking this:\n  ?V \\<in> set Vs \\<Longrightarrow>\n  length (literal.explode ?V) < length (literal.explode (fresh_var Vs))", "show ?thesis"], ["proof (prove)\nusing this:\n  ?V \\<in> set Vs \\<Longrightarrow>\n  length (literal.explode ?V) < length (literal.explode (fresh_var Vs))\n\ngoal (1 subgoal):\n 1. fresh_var Vs \\<notin> set Vs", "by auto"], ["proof (state)\nthis:\n  fresh_var Vs \\<notin> set Vs\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Replacing variable names by indices.\\<close>"], ["", "function compE1  :: \"vname list \\<Rightarrow> 'addr expr      \\<Rightarrow> 'addr expr1\"\n  and compEs1 :: \"vname list \\<Rightarrow> 'addr expr list \\<Rightarrow> 'addr expr1 list\"\nwhere\n  \"compE1 Vs (new C) = new C\"\n| \"compE1 Vs (newA T\\<lfloor>e\\<rceil>) = newA T\\<lfloor>compE1 Vs e\\<rceil>\"\n| \"compE1 Vs (Cast T e) = Cast T (compE1 Vs e)\"\n| \"compE1 Vs (e instanceof T) = (compE1 Vs e) instanceof T\"\n| \"compE1 Vs (Val v) = Val v\"\n| \"compE1 Vs (Var V) = Var(index Vs V)\"\n| \"compE1 Vs (e\\<guillemotleft>bop\\<guillemotright>e') = (compE1 Vs e)\\<guillemotleft>bop\\<guillemotright>(compE1 Vs e')\"\n| \"compE1 Vs (V:=e) = (index Vs V):= (compE1 Vs e)\"\n| \"compE1 Vs (a\\<lfloor>i\\<rceil>) = (compE1 Vs a)\\<lfloor>compE1 Vs i\\<rceil>\"\n| \"compE1 Vs (a\\<lfloor>i\\<rceil>:=e) = (compE1 Vs a)\\<lfloor>compE1 Vs i\\<rceil>:=compE1 Vs e\"\n| \"compE1 Vs (a\\<bullet>length) = compE1 Vs a\\<bullet>length\"\n| \"compE1 Vs (e\\<bullet>F{D}) = compE1 Vs e\\<bullet>F{D}\"\n| \"compE1 Vs (e\\<bullet>F{D}:=e') = compE1 Vs e\\<bullet>F{D}:=compE1 Vs e'\"\n| \"compE1 Vs (e\\<bullet>compareAndSwap(D\\<bullet>F, e', e'')) = compE1 Vs e\\<bullet>compareAndSwap(D\\<bullet>F, compE1 Vs e', compE1 Vs e'')\"\n| \"compE1 Vs (e\\<bullet>M(es)) = (compE1 Vs e)\\<bullet>M(compEs1 Vs es)\"\n| \"compE1 Vs {V:T=vo; e} = {(size Vs):T=vo; compE1 (Vs@[V]) e}\"\n| \"compE1 Vs (sync\\<^bsub>U\\<^esub> (o') e) = sync\\<^bsub>length Vs\\<^esub> (compE1 Vs o') (compE1 (Vs@[fresh_var Vs]) e)\"\n| \"compE1 Vs (insync\\<^bsub>U\\<^esub> (a) e) = insync\\<^bsub>length Vs\\<^esub> (a) (compE1 (Vs@[fresh_var Vs]) e)\"\n| \"compE1 Vs (e1;;e2) = (compE1 Vs e1);;(compE1 Vs e2)\"\n| \"compE1 Vs (if (b) e1 else e2) = (if (compE1 Vs b) (compE1 Vs e1) else (compE1 Vs e2))\"\n| \"compE1 Vs (while (b) e) = (while (compE1 Vs b) (compE1 Vs e))\"\n| \"compE1 Vs (throw e) = throw (compE1 Vs e)\"\n| \"compE1 Vs (try e1 catch(C V) e2) = try(compE1 Vs e1) catch(C (size Vs)) (compE1 (Vs@[V]) e2)\"\n\n| \"compEs1 Vs []     = []\"\n| \"compEs1 Vs (e#es) = compE1 Vs e # compEs1 Vs es\""], ["proof (prove)\ngoal (326 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>Vs C. x = Inl (Vs, new C) \\<Longrightarrow> P;\n        \\<And>Vs T e.\n           x = Inl (Vs, newA T\\<lfloor>e\\<rceil>) \\<Longrightarrow> P;\n        \\<And>Vs T e. x = Inl (Vs, Cast T e) \\<Longrightarrow> P;\n        \\<And>Vs e T. x = Inl (Vs, e instanceof T) \\<Longrightarrow> P;\n        \\<And>Vs v. x = Inl (Vs, Val v) \\<Longrightarrow> P;\n        \\<And>Vs V. x = Inl (Vs, Var V) \\<Longrightarrow> P;\n        \\<And>Vs e bop e'.\n           x =\n           Inl (Vs,\n                e \\<guillemotleft>bop\\<guillemotright> e') \\<Longrightarrow>\n           P;\n        \\<And>Vs V e. x = Inl (Vs, V:=e) \\<Longrightarrow> P;\n        \\<And>Vs a i. x = Inl (Vs, a\\<lfloor>i\\<rceil>) \\<Longrightarrow> P;\n        \\<And>Vs a i e.\n           x = Inl (Vs, a\\<lfloor>i\\<rceil> := e) \\<Longrightarrow> P;\n        \\<And>Vs a. x = Inl (Vs, a\\<bullet>length) \\<Longrightarrow> P;\n        \\<And>Vs e F D. x = Inl (Vs, e\\<bullet>F{D}) \\<Longrightarrow> P;\n        \\<And>Vs e F D e'.\n           x = Inl (Vs, e\\<bullet>F{D} := e') \\<Longrightarrow> P;\n        \\<And>Vs e D F e' e''.\n           x =\n           Inl (Vs,\n                e\\<bullet>compareAndSwap(D\\<bullet>F, e', e'')) \\<Longrightarrow>\n           P;\n        \\<And>Vs e M es. x = Inl (Vs, e\\<bullet>M(es)) \\<Longrightarrow> P;\n        \\<And>Vs V T vo e. x = Inl (Vs, {V:T=vo; e}) \\<Longrightarrow> P;\n        \\<And>Vs U o' e.\n           x = Inl (Vs, sync\\<^bsub>U\\<^esub> (o') e) \\<Longrightarrow> P;\n        \\<And>Vs U a e.\n           x = Inl (Vs, insync\\<^bsub>U\\<^esub> (a) e) \\<Longrightarrow> P;\n        \\<And>Vs e1 e2. x = Inl (Vs, e1;; e2) \\<Longrightarrow> P;\n        \\<And>Vs b e1 e2.\n           x = Inl (Vs, if (b) e1 else e2) \\<Longrightarrow> P;\n        \\<And>Vs b e. x = Inl (Vs, while (b) e) \\<Longrightarrow> P;\n        \\<And>Vs e. x = Inl (Vs, throw e) \\<Longrightarrow> P;\n        \\<And>Vs e1 C V e2.\n           x = Inl (Vs, try e1 catch(C V) e2) \\<Longrightarrow> P;\n        \\<And>Vs. x = Inr (Vs, []) \\<Longrightarrow> P;\n        \\<And>Vs e es. x = Inr (Vs, e # es) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>Vs C Vsa Ca.\n       Inl (Vs, new C) = Inl (Vsa, new Ca) \\<Longrightarrow>\n       Inl (new C) = Inl (new Ca)\n 3. \\<And>Vs C Vsa T e.\n       Inl (Vs, new C) =\n       Inl (Vsa, newA T\\<lfloor>e\\<rceil>) \\<Longrightarrow>\n       Inl (new C) =\n       Inl (newA T\\<lfloor>projl\n                            (compE1_compEs1_sumC (Inl (Vsa, e)))\\<rceil>)\n 4. \\<And>Vs C Vsa T e.\n       Inl (Vs, new C) = Inl (Vsa, Cast T e) \\<Longrightarrow>\n       Inl (new C) =\n       Inl (Cast T (projl (compE1_compEs1_sumC (Inl (Vsa, e)))))\n 5. \\<And>Vs C Vsa e T.\n       Inl (Vs, new C) = Inl (Vsa, e instanceof T) \\<Longrightarrow>\n       Inl (new C) =\n       Inl (projl (compE1_compEs1_sumC (Inl (Vsa, e))) instanceof T)\n 6. \\<And>Vs C Vsa v.\n       Inl (Vs, new C) = Inl (Vsa, Val v) \\<Longrightarrow>\n       Inl (new C) = Inl (Val v)\n 7. \\<And>Vs C Vsa V.\n       Inl (Vs, new C) = Inl (Vsa, Var V) \\<Longrightarrow>\n       Inl (new C) = Inl (Var (index Vsa V))\n 8. \\<And>Vs C Vsa e bop e'.\n       Inl (Vs, new C) =\n       Inl (Vsa,\n            e \\<guillemotleft>bop\\<guillemotright> e') \\<Longrightarrow>\n       Inl (new C) =\n       Inl (projl\n             (compE1_compEs1_sumC\n               (Inl (Vsa,\n                     e))) \\<guillemotleft>bop\\<guillemotright> projl\n                          (compE1_compEs1_sumC (Inl (Vsa, e'))))\n 9. \\<And>Vs C Vsa V e.\n       Inl (Vs, new C) = Inl (Vsa, V:=e) \\<Longrightarrow>\n       Inl (new C) =\n       Inl (index Vsa V:=projl (compE1_compEs1_sumC (Inl (Vsa, e))))\n 10. \\<And>Vs C Vsa a i.\n        Inl (Vs, new C) = Inl (Vsa, a\\<lfloor>i\\<rceil>) \\<Longrightarrow>\n        Inl (new C) =\n        Inl (projl\n              (compE1_compEs1_sumC\n                (Inl (Vsa,\n                      a)))\\<lfloor>projl\n                                    (compE1_compEs1_sumC\n(Inl (Vsa, i)))\\<rceil>)\nA total of 326 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All compE1_compEs1_dom", "apply(relation \"case_sum (\\<lambda>p. size (snd p)) (\\<lambda>p. size_list size (snd p)) <*mlex*> {}\")"], ["proof (prove)\ngoal (37 subgoals):\n 1. wf (case_sum (\\<lambda>p. size (snd p))\n         (\\<lambda>p. size_list size (snd p)) <*mlex*>\n        {})\n 2. \\<And>Vs T e.\n       (Inl (Vs, e), Inl (Vs, newA T\\<lfloor>e\\<rceil>))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 3. \\<And>Vs T e.\n       (Inl (Vs, e), Inl (Vs, Cast T e))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 4. \\<And>Vs e T.\n       (Inl (Vs, e), Inl (Vs, e instanceof T))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 5. \\<And>Vs e bop e'.\n       (Inl (Vs, e), Inl (Vs, e \\<guillemotleft>bop\\<guillemotright> e'))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 6. \\<And>Vs e bop e'.\n       (Inl (Vs, e'), Inl (Vs, e \\<guillemotleft>bop\\<guillemotright> e'))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 7. \\<And>Vs V e.\n       (Inl (Vs, e), Inl (Vs, V:=e))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 8. \\<And>Vs a i.\n       (Inl (Vs, a), Inl (Vs, a\\<lfloor>i\\<rceil>))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 9. \\<And>Vs a i.\n       (Inl (Vs, i), Inl (Vs, a\\<lfloor>i\\<rceil>))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 10. \\<And>Vs a i e.\n        (Inl (Vs, a), Inl (Vs, a\\<lfloor>i\\<rceil> := e))\n        \\<in> case_sum (\\<lambda>p. size (snd p))\n               (\\<lambda>p. size_list size (snd p)) <*mlex*>\n              {}\nA total of 37 subgoals...", "apply(rule wf_mlex[OF wf_empty])"], ["proof (prove)\ngoal (36 subgoals):\n 1. \\<And>Vs T e.\n       (Inl (Vs, e), Inl (Vs, newA T\\<lfloor>e\\<rceil>))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 2. \\<And>Vs T e.\n       (Inl (Vs, e), Inl (Vs, Cast T e))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 3. \\<And>Vs e T.\n       (Inl (Vs, e), Inl (Vs, e instanceof T))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 4. \\<And>Vs e bop e'.\n       (Inl (Vs, e), Inl (Vs, e \\<guillemotleft>bop\\<guillemotright> e'))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 5. \\<And>Vs e bop e'.\n       (Inl (Vs, e'), Inl (Vs, e \\<guillemotleft>bop\\<guillemotright> e'))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 6. \\<And>Vs V e.\n       (Inl (Vs, e), Inl (Vs, V:=e))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 7. \\<And>Vs a i.\n       (Inl (Vs, a), Inl (Vs, a\\<lfloor>i\\<rceil>))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 8. \\<And>Vs a i.\n       (Inl (Vs, i), Inl (Vs, a\\<lfloor>i\\<rceil>))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 9. \\<And>Vs a i e.\n       (Inl (Vs, a), Inl (Vs, a\\<lfloor>i\\<rceil> := e))\n       \\<in> case_sum (\\<lambda>p. size (snd p))\n              (\\<lambda>p. size_list size (snd p)) <*mlex*>\n             {}\n 10. \\<And>Vs a i e.\n        (Inl (Vs, i), Inl (Vs, a\\<lfloor>i\\<rceil> := e))\n        \\<in> case_sum (\\<lambda>p. size (snd p))\n               (\\<lambda>p. size_list size (snd p)) <*mlex*>\n              {}\nA total of 36 subgoals...", "apply(rule mlex_less, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas compE1_compEs1_induct =\n  compE1_compEs1.induct[case_names New NewArray Cast InstanceOf Val Var BinOp LAss AAcc AAss ALen FAcc FAss CAS Call Block Synchronized InSynchronized Seq Cond While throw TryCatch Nil Cons]"], ["", "lemma compEs1_conv_map [simp]: \"compEs1 Vs es = map (compE1 Vs) es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compEs1 Vs es = map (compE1 Vs) es", "by(induct es) simp_all"], ["", "lemmas compEs1_map_Val = compEs1_conv_map"], ["", "lemma compE1_eq_Val [simp]: \"compE1 Vs e = Val v \\<longleftrightarrow> e = Val v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (compE1 Vs e = Val v) = (e = Val v)", "apply(cases e, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Val_eq_compE1 [simp]: \"Val v = compE1 Vs e \\<longleftrightarrow> e = Val v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Val v = compE1 Vs e) = (e = Val v)", "apply(cases e, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compEs1_eq_map_Val [simp]: \"compEs1 Vs es = map Val vs \\<longleftrightarrow> es = map Val vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (compEs1 Vs es = map Val vs) = (es = map Val vs)", "apply(induct es arbitrary: vs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>vs. (compEs1 Vs [] = map Val vs) = ([] = map Val vs)\n 2. \\<And>a es vs.\n       (\\<And>vs.\n           (compEs1 Vs es = map Val vs) =\n           (es = map Val vs)) \\<Longrightarrow>\n       (compEs1 Vs (a # es) = map Val vs) = (a # es = map Val vs)", "apply(auto, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compE1_eq_Var [simp]: \"compE1 Vs e = Var V \\<longleftrightarrow> (\\<exists>V'. e = Var V' \\<and> V = index Vs V')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (compE1 Vs e = Var V) = (\\<exists>V'. e = Var V' \\<and> V = index Vs V')", "by(cases e, auto)"], ["", "lemma compE1_eq_Call [simp]:\n  \"compE1 Vs e = obj\\<bullet>M(params) \\<longleftrightarrow> (\\<exists>obj' params'. e = obj'\\<bullet>M(params') \\<and> compE1 Vs obj' = obj \\<and> compEs1 Vs params' = params)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (compE1 Vs e = obj\\<bullet>M(params)) =\n    (\\<exists>obj' params'.\n        e = obj'\\<bullet>M(params') \\<and>\n        compE1 Vs obj' = obj \\<and> compEs1 Vs params' = params)", "by(cases e, auto)"], ["", "lemma length_compEs2 [simp]:\n  \"length (compEs1 Vs es) = length es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (compEs1 Vs es) = length es", "by(simp add: compEs1_conv_map)"], ["", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows expr_locks_compE1 [simp]: \"expr_locks (compE1 Vs e) = expr_locks e\"\n  and expr_lockss_compEs1 [simp]: \"expr_lockss (compEs1 Vs es) = expr_lockss es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. expr_locks (compE1 Vs e) = expr_locks e &&&\n    expr_lockss (compEs1 Vs es) = expr_lockss es", "by(induct Vs e and Vs es rule: compE1_compEs1.induct)(auto intro: ext)"], ["", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows contains_insync_compE1 [simp]: \"contains_insync (compE1 Vs e) = contains_insync e\"\n  and contains_insyncs_compEs1 [simp]: \"contains_insyncs (compEs1 Vs es) = contains_insyncs es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. contains_insync (compE1 Vs e) = contains_insync e &&&\n    contains_insyncs (compEs1 Vs es) = contains_insyncs es", "by(induct Vs e and Vs es rule: compE1_compEs1.induct)simp_all"], ["", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows max_vars_compE1: \"max_vars (compE1 Vs e) = max_vars e\"\n  and max_varss_compEs1: \"max_varss (compEs1 Vs es) = max_varss es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_vars (compE1 Vs e) = max_vars e &&&\n    max_varss (compEs1 Vs es) = max_varss es", "apply(induct Vs e and Vs es rule: compE1_compEs1.induct)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>Vs C. max_vars (compE1 Vs (new C)) = max_vars (new C)\n 2. \\<And>Vs T e.\n       max_vars (compE1 Vs e) = max_vars e \\<Longrightarrow>\n       max_vars (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n       max_vars (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       max_vars (compE1 Vs e) = max_vars e \\<Longrightarrow>\n       max_vars (compE1 Vs (Cast T e)) = max_vars (Cast T e)\n 4. \\<And>Vs e T.\n       max_vars (compE1 Vs e) = max_vars e \\<Longrightarrow>\n       max_vars (compE1 Vs (e instanceof T)) = max_vars (e instanceof T)\n 5. \\<And>Vs v. max_vars (compE1 Vs (Val v)) = max_vars (Val v)\n 6. \\<And>Vs V. max_vars (compE1 Vs (Var V)) = max_vars (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>max_vars (compE1 Vs e) = max_vars e;\n        max_vars (compE1 Vs e') = max_vars e'\\<rbrakk>\n       \\<Longrightarrow> max_vars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         max_vars\n                          (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       max_vars (compE1 Vs e) = max_vars e \\<Longrightarrow>\n       max_vars (compE1 Vs (V:=e)) = max_vars (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>max_vars (compE1 Vs a) = max_vars a;\n        max_vars (compE1 Vs i) = max_vars i\\<rbrakk>\n       \\<Longrightarrow> max_vars (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         max_vars (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>max_vars (compE1 Vs a) = max_vars a;\n         max_vars (compE1 Vs i) = max_vars i;\n         max_vars (compE1 Vs e) = max_vars e\\<rbrakk>\n        \\<Longrightarrow> max_vars (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          max_vars (a\\<lfloor>i\\<rceil> := e)\nA total of 25 subgoals...", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows \\<B>: \"size Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n\"\n  and \\<B>s: \"size Vs = n \\<Longrightarrow> \\<B>s (compEs1 Vs es) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n) &&&\n    (length Vs = n \\<Longrightarrow> \\<B>s (compEs1 Vs es) n)", "apply(induct Vs e and Vs es arbitrary: n and n rule: compE1_compEs1.induct)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<And>Vs C n. length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs (new C)) n\n 2. \\<And>Vs T e n.\n       \\<lbrakk>\\<And>n.\n                   length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n;\n        length Vs = n\\<rbrakk>\n       \\<Longrightarrow> \\<B> (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) n\n 3. \\<And>Vs T e n.\n       \\<lbrakk>\\<And>n.\n                   length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n;\n        length Vs = n\\<rbrakk>\n       \\<Longrightarrow> \\<B> (compE1 Vs (Cast T e)) n\n 4. \\<And>Vs e T n.\n       \\<lbrakk>\\<And>n.\n                   length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n;\n        length Vs = n\\<rbrakk>\n       \\<Longrightarrow> \\<B> (compE1 Vs (e instanceof T)) n\n 5. \\<And>Vs v n. length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs (Val v)) n\n 6. \\<And>Vs V n. length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs (Var V)) n\n 7. \\<And>Vs e bop e' n.\n       \\<lbrakk>\\<And>n.\n                   length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n;\n        \\<And>n. length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e') n;\n        length Vs = n\\<rbrakk>\n       \\<Longrightarrow> \\<B>\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n                          n\n 8. \\<And>Vs V e n.\n       \\<lbrakk>\\<And>n.\n                   length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n;\n        length Vs = n\\<rbrakk>\n       \\<Longrightarrow> \\<B> (compE1 Vs (V:=e)) n\n 9. \\<And>Vs a i n.\n       \\<lbrakk>\\<And>n.\n                   length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs a) n;\n        \\<And>n. length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs i) n;\n        length Vs = n\\<rbrakk>\n       \\<Longrightarrow> \\<B> (compE1 Vs (a\\<lfloor>i\\<rceil>)) n\n 10. \\<And>Vs a i e n.\n        \\<lbrakk>\\<And>n.\n                    length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs a) n;\n         \\<And>n. length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs i) n;\n         \\<And>n. length Vs = n \\<Longrightarrow> \\<B> (compE1 Vs e) n;\n         length Vs = n\\<rbrakk>\n        \\<Longrightarrow> \\<B> (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) n\nA total of 25 subgoals...", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows fv_compE1: \"fv e \\<subseteq> set Vs \\<Longrightarrow> fv (compE1 Vs e) = (index Vs) ` (fv e)\"\n  and fvs_compEs1: \"fvs es \\<subseteq> set Vs \\<Longrightarrow> fvs (compEs1 Vs es) = (index Vs) ` (fvs es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fv e \\<subseteq> set Vs \\<Longrightarrow>\n     fv (compE1 Vs e) = index Vs ` fv e) &&&\n    (fvs es \\<subseteq> set Vs \\<Longrightarrow>\n     fvs (compEs1 Vs es) = index Vs ` fvs es)", "proof(induct Vs e and Vs es rule: compE1_compEs1_induct)"], ["proof (state)\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 25 subgoals...", "case (Block Vs V ty vo exp)"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\n  fv {V:ty=vo; exp} \\<subseteq> set Vs\n\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 25 subgoals...", "have IH: \"fv exp \\<subseteq> set (Vs @ [V]) \\<Longrightarrow> fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv exp \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n    fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp", "by fact"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\n\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 25 subgoals...", "from \\<open>fv {V:ty=vo; exp} \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv {V:ty=vo; exp} \\<subseteq> set Vs", "have fv': \"fv exp \\<subseteq> set (Vs @ [V])\""], ["proof (prove)\nusing this:\n  fv {V:ty=vo; exp} \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp \\<subseteq> set (Vs @ [V])", "by auto"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [V])\n\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 25 subgoals...", "from IH[OF this]"], ["proof (chain)\npicking this:\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp", "have IH': \"fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\""], ["proof (prove)\nusing this:\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\n\ngoal (1 subgoal):\n 1. fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp", "."], ["proof (state)\nthis:\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\n\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 25 subgoals...", "have \"fv (compE1 (Vs @ [V]) exp) - {length Vs} = index Vs ` (fv exp - {V})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (compE1 (Vs @ [V]) exp) - {length Vs} = index Vs ` (fv exp - {V})", "proof(rule equalityI[OF subsetI subsetI])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "assume x: \"x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\""], ["proof (state)\nthis:\n  x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "hence \"x \\<noteq> length Vs\""], ["proof (prove)\nusing this:\n  x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\n\ngoal (1 subgoal):\n 1. x \\<noteq> length Vs", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> length Vs\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "from x IH'"], ["proof (chain)\npicking this:\n  x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp", "have \"x \\<in> index (Vs @ [V]) ` fv exp\""], ["proof (prove)\nusing this:\n  x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [V]) ` fv exp", "by simp"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [V]) ` fv exp\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "thus \"x \\<in> index Vs ` (fv exp - {V})\""], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` (fv exp - {V})", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp - {V})", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp - {V})", "assume [simp]: \"x = index (Vs @ [V]) y\"\n        and y: \"y \\<in> fv exp\""], ["proof (state)\nthis:\n  x = index (Vs @ [V]) y\n  y \\<in> fv exp\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp - {V})", "have \"y \\<noteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> V", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y = V \\<Longrightarrow> False", "assume [simp]: \"y = V\""], ["proof (state)\nthis:\n  y = V\n\ngoal (1 subgoal):\n 1. y = V \\<Longrightarrow> False", "hence \"x = length Vs\""], ["proof (prove)\nusing this:\n  y = V\n\ngoal (1 subgoal):\n 1. x = length Vs", "by simp"], ["proof (state)\nthis:\n  x = length Vs\n\ngoal (1 subgoal):\n 1. y = V \\<Longrightarrow> False", "with \\<open>x \\<noteq> length Vs\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> length Vs\n  x = length Vs", "show False"], ["proof (prove)\nusing this:\n  x \\<noteq> length Vs\n  x = length Vs\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp - {V})", "moreover"], ["proof (state)\nthis:\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp - {V})", "with fv' y"], ["proof (chain)\npicking this:\n  fv exp \\<subseteq> set (Vs @ [V])\n  y \\<in> fv exp\n  y \\<noteq> V", "have \"y \\<in> set Vs\""], ["proof (prove)\nusing this:\n  fv exp \\<subseteq> set (Vs @ [V])\n  y \\<in> fv exp\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp - {V})", "ultimately"], ["proof (chain)\npicking this:\n  y \\<noteq> V\n  y \\<in> set Vs", "have \"index (Vs @ [V]) y = index Vs y\""], ["proof (prove)\nusing this:\n  y \\<noteq> V\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. index (Vs @ [V]) y = index Vs y", "by(simp)"], ["proof (state)\nthis:\n  index (Vs @ [V]) y = index Vs y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp - {V})", "thus ?thesis"], ["proof (prove)\nusing this:\n  index (Vs @ [V]) y = index Vs y\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` (fv exp - {V})", "using y \\<open>y \\<noteq> V\\<close>"], ["proof (prove)\nusing this:\n  index (Vs @ [V]) y = index Vs y\n  y \\<in> fv exp\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` (fv exp - {V})", "by auto"], ["proof (state)\nthis:\n  x \\<in> index Vs ` (fv exp - {V})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> index Vs ` (fv exp - {V})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "assume x: \"x \\<in> index Vs ` (fv exp - {V})\""], ["proof (state)\nthis:\n  x \\<in> index Vs ` (fv exp - {V})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp - {V}) \\<Longrightarrow>\n       x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "thus \"x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\""], ["proof (prove)\nusing this:\n  x \\<in> index Vs ` (fv exp - {V})\n\ngoal (1 subgoal):\n 1. x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "assume [simp]: \"x = index Vs y\"\n        and y: \"y \\<in> fv exp - {V}\""], ["proof (state)\nthis:\n  x = index Vs y\n  y \\<in> fv exp - {V}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "with fv'"], ["proof (chain)\npicking this:\n  fv exp \\<subseteq> set (Vs @ [V])\n  x = index Vs y\n  y \\<in> fv exp - {V}", "have \"y \\<in> set Vs\" \"y \\<noteq> V\""], ["proof (prove)\nusing this:\n  fv exp \\<subseteq> set (Vs @ [V])\n  x = index Vs y\n  y \\<in> fv exp - {V}\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs &&& y \\<noteq> V", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "hence \"index Vs y = index (Vs @ [V]) y\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. index Vs y = index (Vs @ [V]) y", "by simp"], ["proof (state)\nthis:\n  index Vs y = index (Vs @ [V]) y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "with y"], ["proof (chain)\npicking this:\n  y \\<in> fv exp - {V}\n  index Vs y = index (Vs @ [V]) y", "have \"x \\<in> index (Vs @ [V]) ` fv exp\""], ["proof (prove)\nusing this:\n  y \\<in> fv exp - {V}\n  index Vs y = index (Vs @ [V]) y\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [V]) ` fv exp", "by auto"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [V]) ` fv exp\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp\n\ngoal (1 subgoal):\n 1. x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "using IH' \\<open>y \\<in> set Vs\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp\n  fv (compE1 (Vs @ [V]) exp) = index (Vs @ [V]) ` fv exp\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}", "by simp"], ["proof (state)\nthis:\n  x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> fv (compE1 (Vs @ [V]) exp) - {length Vs}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fv (compE1 (Vs @ [V]) exp) - {length Vs} = index Vs ` (fv exp - {V})\n\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 25 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  fv (compE1 (Vs @ [V]) exp) - {length Vs} = index Vs ` (fv exp - {V})\n\ngoal (1 subgoal):\n 1. fv (compE1 Vs {V:ty=vo; exp}) = index Vs ` fv {V:ty=vo; exp}", "by simp"], ["proof (state)\nthis:\n  fv (compE1 Vs {V:ty=vo; exp}) = index Vs ` fv {V:ty=vo; exp}\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 24 subgoals...", "next"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 24 subgoals...", "case (Synchronized Vs V exp1 exp2)"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow>\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [fresh_var Vs]) exp2) =\n  index (Vs @ [fresh_var Vs]) ` fv exp2\n  fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 24 subgoals...", "have IH1: \"fv exp1 \\<subseteq> set Vs \\<Longrightarrow> fv (compE1 Vs exp1) = index Vs ` fv exp1\" \n    and IH2: \"fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow> fv (compE1 (Vs @ [fresh_var Vs]) exp2) = index (Vs @ [fresh_var Vs]) ` fv exp2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fv exp1 \\<subseteq> set Vs \\<Longrightarrow>\n     fv (compE1 Vs exp1) = index Vs ` fv exp1) &&&\n    (fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n     fv (compE1 (Vs @ [fresh_var Vs]) exp2) =\n     index (Vs @ [fresh_var Vs]) ` fv exp2)", "by fact+"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow>\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [fresh_var Vs]) exp2) =\n  index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 24 subgoals...", "from \\<open>fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs", "have fv1: \"fv exp1 \\<subseteq> set Vs\"\n    and fv2: \"fv exp2 \\<subseteq> set Vs\""], ["proof (prove)\nusing this:\n  fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp1 \\<subseteq> set Vs &&& fv exp2 \\<subseteq> set Vs", "by auto"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs\n  fv exp2 \\<subseteq> set Vs\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 24 subgoals...", "from fv2"], ["proof (chain)\npicking this:\n  fv exp2 \\<subseteq> set Vs", "have fv2': \"fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])\""], ["proof (prove)\nusing this:\n  fv exp2 \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])", "by auto"], ["proof (state)\nthis:\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 24 subgoals...", "have \"index (Vs @ [fresh_var Vs]) ` fv exp2 = index Vs ` fv exp2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (Vs @ [fresh_var Vs]) ` fv exp2 = index Vs ` fv exp2", "proof(rule equalityI[OF subsetI subsetI])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2 \\<Longrightarrow>\n       x \\<in> index Vs ` fv exp2\n 2. \\<And>x.\n       x \\<in> index Vs ` fv exp2 \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2 \\<Longrightarrow>\n       x \\<in> index Vs ` fv exp2\n 2. \\<And>x.\n       x \\<in> index Vs ` fv exp2 \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "assume x: \"x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\""], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2 \\<Longrightarrow>\n       x \\<in> index Vs ` fv exp2\n 2. \\<And>x.\n       x \\<in> index Vs ` fv exp2 \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "thus \"x \\<in> index Vs ` fv exp2\""], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` fv exp2", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa;\n        xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp2", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa;\n        xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp2", "assume [simp]: \"x = index (Vs @ [fresh_var Vs]) y\"\n        and y: \"y \\<in> fv exp2\""], ["proof (state)\nthis:\n  x = index (Vs @ [fresh_var Vs]) y\n  y \\<in> fv exp2\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa;\n        xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp2", "from y fv2"], ["proof (chain)\npicking this:\n  y \\<in> fv exp2\n  fv exp2 \\<subseteq> set Vs", "have \"y \\<in> set Vs\""], ["proof (prove)\nusing this:\n  y \\<in> fv exp2\n  fv exp2 \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa;\n        xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp2", "moreover"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa;\n        xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp2", "hence \"y \\<noteq> (fresh_var Vs)\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. y \\<noteq> fresh_var Vs", "by(auto simp add: fresh_var_fresh)"], ["proof (state)\nthis:\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa;\n        xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp2", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` fv exp2", "using y"], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs\n  y \\<in> fv exp2\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` fv exp2", "by(auto)"], ["proof (state)\nthis:\n  x \\<in> index Vs ` fv exp2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> index Vs ` fv exp2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp2 \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp2 \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp2 \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "assume x: \"x \\<in> index Vs ` fv exp2\""], ["proof (state)\nthis:\n  x \\<in> index Vs ` fv exp2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp2 \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "thus \"x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\""], ["proof (prove)\nusing this:\n  x \\<in> index Vs ` fv exp2\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "assume [simp]: \"x = index Vs y\"\n        and y: \"y \\<in> fv exp2\""], ["proof (state)\nthis:\n  x = index Vs y\n  y \\<in> fv exp2\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "from y fv2"], ["proof (chain)\npicking this:\n  y \\<in> fv exp2\n  fv exp2 \\<subseteq> set Vs", "have \"y \\<in> set Vs\""], ["proof (prove)\nusing this:\n  y \\<in> fv exp2\n  fv exp2 \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "moreover"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "hence \"y \\<noteq> (fresh_var Vs)\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. y \\<noteq> fresh_var Vs", "by(auto simp add: fresh_var_fresh)"], ["proof (state)\nthis:\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs", "have \"index Vs y = index (Vs @ [fresh_var Vs]) y\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. index Vs y = index (Vs @ [fresh_var Vs]) y", "by simp"], ["proof (state)\nthis:\n  index Vs y = index (Vs @ [fresh_var Vs]) y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "thus ?thesis"], ["proof (prove)\nusing this:\n  index Vs y = index (Vs @ [fresh_var Vs]) y\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "using y"], ["proof (prove)\nusing this:\n  index Vs y = index (Vs @ [fresh_var Vs]) y\n  y \\<in> fv exp2\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2", "by(auto)"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  index (Vs @ [fresh_var Vs]) ` fv exp2 = index Vs ` fv exp2\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 24 subgoals...", "with IH1[OF fv1] IH2[OF fv2']"], ["proof (chain)\npicking this:\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv (compE1 (Vs @ [fresh_var Vs]) exp2) =\n  index (Vs @ [fresh_var Vs]) ` fv exp2\n  index (Vs @ [fresh_var Vs]) ` fv exp2 = index Vs ` fv exp2", "show ?case"], ["proof (prove)\nusing this:\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv (compE1 (Vs @ [fresh_var Vs]) exp2) =\n  index (Vs @ [fresh_var Vs]) ` fv exp2\n  index (Vs @ [fresh_var Vs]) ` fv exp2 = index Vs ` fv exp2\n\ngoal (1 subgoal):\n 1. fv (compE1 Vs (sync\\<^bsub>V\\<^esub> (exp1) exp2)) =\n    index Vs ` fv (sync\\<^bsub>V\\<^esub> (exp1) exp2)", "by(auto)"], ["proof (state)\nthis:\n  fv (compE1 Vs (sync\\<^bsub>V\\<^esub> (exp1) exp2)) =\n  index Vs ` fv (sync\\<^bsub>V\\<^esub> (exp1) exp2)\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 23 subgoals...", "case (InSynchronized Vs V a exp)"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [fresh_var Vs]) exp) =\n  index (Vs @ [fresh_var Vs]) ` fv exp\n  fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 23 subgoals...", "have IH: \"fv exp \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow> fv (compE1 (Vs @ [fresh_var Vs]) exp) = index (Vs @ [fresh_var Vs]) ` fv exp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv exp \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n    fv (compE1 (Vs @ [fresh_var Vs]) exp) =\n    index (Vs @ [fresh_var Vs]) ` fv exp", "by fact"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [fresh_var Vs]) exp) =\n  index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 23 subgoals...", "from \\<open>fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs", "have fv: \"fv exp \\<subseteq> set Vs\""], ["proof (prove)\nusing this:\n  fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp \\<subseteq> set Vs", "by simp"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set Vs\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 23 subgoals...", "hence fv': \"fv exp \\<subseteq> set (Vs @ [fresh_var Vs])\""], ["proof (prove)\nusing this:\n  fv exp \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp \\<subseteq> set (Vs @ [fresh_var Vs])", "by auto"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs])\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 23 subgoals...", "have \"index (Vs @ [fresh_var Vs]) ` fv exp = index Vs ` fv exp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (Vs @ [fresh_var Vs]) ` fv exp = index Vs ` fv exp", "proof(rule equalityI[OF subsetI subsetI])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp \\<Longrightarrow>\n       x \\<in> index Vs ` fv exp\n 2. \\<And>x.\n       x \\<in> index Vs ` fv exp \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp \\<Longrightarrow>\n       x \\<in> index Vs ` fv exp\n 2. \\<And>x.\n       x \\<in> index Vs ` fv exp \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "assume \"x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\""], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp \\<Longrightarrow>\n       x \\<in> index Vs ` fv exp\n 2. \\<And>x.\n       x \\<in> index Vs ` fv exp \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "thus \"x \\<in> index Vs ` fv exp\""], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` fv exp", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp", "assume [simp]: \"x = index (Vs @ [fresh_var Vs]) y\"\n        and y: \"y \\<in> fv exp\""], ["proof (state)\nthis:\n  x = index (Vs @ [fresh_var Vs]) y\n  y \\<in> fv exp\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp", "from y fv"], ["proof (chain)\npicking this:\n  y \\<in> fv exp\n  fv exp \\<subseteq> set Vs", "have \"y \\<in> set Vs\""], ["proof (prove)\nusing this:\n  y \\<in> fv exp\n  fv exp \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp", "moreover"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp", "hence \"y \\<noteq> (fresh_var Vs)\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. y \\<noteq> fresh_var Vs", "by(auto simp add: fresh_var_fresh)"], ["proof (state)\nthis:\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs", "have \"index (Vs @ [fresh_var Vs]) y = index Vs y\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. index (Vs @ [fresh_var Vs]) y = index Vs y", "by simp"], ["proof (state)\nthis:\n  index (Vs @ [fresh_var Vs]) y = index Vs y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [fresh_var Vs]) xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` fv exp", "thus ?thesis"], ["proof (prove)\nusing this:\n  index (Vs @ [fresh_var Vs]) y = index Vs y\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` fv exp", "using y"], ["proof (prove)\nusing this:\n  index (Vs @ [fresh_var Vs]) y = index Vs y\n  y \\<in> fv exp\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` fv exp", "by simp"], ["proof (state)\nthis:\n  x \\<in> index Vs ` fv exp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> index Vs ` fv exp\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "assume \"x \\<in> index Vs ` fv exp\""], ["proof (state)\nthis:\n  x \\<in> index Vs ` fv exp\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` fv exp \\<Longrightarrow>\n       x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "thus \"x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\""], ["proof (prove)\nusing this:\n  x \\<in> index Vs ` fv exp\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "assume [simp]: \"x = index Vs y\"\n        and y: \"y \\<in> fv exp\""], ["proof (state)\nthis:\n  x = index Vs y\n  y \\<in> fv exp\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "from y fv"], ["proof (chain)\npicking this:\n  y \\<in> fv exp\n  fv exp \\<subseteq> set Vs", "have \"y \\<in> set Vs\""], ["proof (prove)\nusing this:\n  y \\<in> fv exp\n  fv exp \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "moreover"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "hence \"y \\<noteq> (fresh_var Vs)\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. y \\<noteq> fresh_var Vs", "by(auto simp add: fresh_var_fresh)"], ["proof (state)\nthis:\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs", "have \"index Vs y = index (Vs @ [fresh_var Vs]) y\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n  y \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. index Vs y = index (Vs @ [fresh_var Vs]) y", "by simp"], ["proof (state)\nthis:\n  index Vs y = index (Vs @ [fresh_var Vs]) y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "thus ?thesis"], ["proof (prove)\nusing this:\n  index Vs y = index (Vs @ [fresh_var Vs]) y\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "using y"], ["proof (prove)\nusing this:\n  index Vs y = index (Vs @ [fresh_var Vs]) y\n  y \\<in> fv exp\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp", "by auto"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  index (Vs @ [fresh_var Vs]) ` fv exp = index Vs ` fv exp\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 23 subgoals...", "with IH[OF fv']"], ["proof (chain)\npicking this:\n  fv (compE1 (Vs @ [fresh_var Vs]) exp) =\n  index (Vs @ [fresh_var Vs]) ` fv exp\n  index (Vs @ [fresh_var Vs]) ` fv exp = index Vs ` fv exp", "show ?case"], ["proof (prove)\nusing this:\n  fv (compE1 (Vs @ [fresh_var Vs]) exp) =\n  index (Vs @ [fresh_var Vs]) ` fv exp\n  index (Vs @ [fresh_var Vs]) ` fv exp = index Vs ` fv exp\n\ngoal (1 subgoal):\n 1. fv (compE1 Vs (insync\\<^bsub>V\\<^esub> (a) exp)) =\n    index Vs ` fv (insync\\<^bsub>V\\<^esub> (a) exp)", "by simp"], ["proof (state)\nthis:\n  fv (compE1 Vs (insync\\<^bsub>V\\<^esub> (a) exp)) =\n  index Vs ` fv (insync\\<^bsub>V\\<^esub> (a) exp)\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 22 subgoals...", "case (TryCatch Vs exp1 C V exp2)"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow>\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv exp2 \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [V]) exp2) = index (Vs @ [V]) ` fv exp2\n  fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 22 subgoals...", "have IH1: \"fv exp1 \\<subseteq> set Vs \\<Longrightarrow> fv (compE1 Vs exp1) = index Vs ` fv exp1\" \n    and IH2: \"fv exp2 \\<subseteq> set (Vs @ [V]) \\<Longrightarrow> fv (compE1 (Vs @ [V]) exp2) = index (Vs @ [V]) ` fv exp2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fv exp1 \\<subseteq> set Vs \\<Longrightarrow>\n     fv (compE1 Vs exp1) = index Vs ` fv exp1) &&&\n    (fv exp2 \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n     fv (compE1 (Vs @ [V]) exp2) = index (Vs @ [V]) ` fv exp2)", "by fact+"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow>\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv exp2 \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n  fv (compE1 (Vs @ [V]) exp2) = index (Vs @ [V]) ` fv exp2\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 22 subgoals...", "from \\<open>fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs", "have fv1: \"fv exp1 \\<subseteq> set Vs\"\n    and fv2: \"fv exp2 \\<subseteq> set (Vs @ [V])\""], ["proof (prove)\nusing this:\n  fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp1 \\<subseteq> set Vs &&& fv exp2 \\<subseteq> set (Vs @ [V])", "by auto"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs\n  fv exp2 \\<subseteq> set (Vs @ [V])\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 22 subgoals...", "have \"index (Vs @ [V]) ` fv exp2 - {length Vs} = index Vs ` (fv exp2 - {V})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. index (Vs @ [V]) ` fv exp2 - {length Vs} = index Vs ` (fv exp2 - {V})", "proof(rule equalityI[OF subsetI subsetI])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp2 - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp2 - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "assume x: \"x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}\""], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp2 - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "hence \"x \\<noteq> length Vs\""], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}\n\ngoal (1 subgoal):\n 1. x \\<noteq> length Vs", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> length Vs\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp2 - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "from x"], ["proof (chain)\npicking this:\n  x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "have \"x \\<in> index (Vs @ [V]) ` fv exp2\""], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [V]) ` fv exp2", "by auto"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [V]) ` fv exp2\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs} \\<Longrightarrow>\n       x \\<in> index Vs ` (fv exp2 - {V})\n 2. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "thus \"x \\<in> index Vs ` (fv exp2 - {V})\""], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp2\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` (fv exp2 - {V})", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp2 - {V})", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp2 - {V})", "assume [simp]: \"x = index (Vs @ [V]) y\"\n        and y: \"y \\<in> fv exp2\""], ["proof (state)\nthis:\n  x = index (Vs @ [V]) y\n  y \\<in> fv exp2\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp2 - {V})", "have \"y \\<noteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> V", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y = V \\<Longrightarrow> False", "assume [simp]: \"y = V\""], ["proof (state)\nthis:\n  y = V\n\ngoal (1 subgoal):\n 1. y = V \\<Longrightarrow> False", "hence \"x = length Vs\""], ["proof (prove)\nusing this:\n  y = V\n\ngoal (1 subgoal):\n 1. x = length Vs", "by simp"], ["proof (state)\nthis:\n  x = length Vs\n\ngoal (1 subgoal):\n 1. y = V \\<Longrightarrow> False", "with \\<open>x \\<noteq> length Vs\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> length Vs\n  x = length Vs", "show False"], ["proof (prove)\nusing this:\n  x \\<noteq> length Vs\n  x = length Vs\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp2 - {V})", "moreover"], ["proof (state)\nthis:\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp2 - {V})", "with fv2 y"], ["proof (chain)\npicking this:\n  fv exp2 \\<subseteq> set (Vs @ [V])\n  y \\<in> fv exp2\n  y \\<noteq> V", "have \"y \\<in> set Vs\""], ["proof (prove)\nusing this:\n  fv exp2 \\<subseteq> set (Vs @ [V])\n  y \\<in> fv exp2\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp2 - {V})", "ultimately"], ["proof (chain)\npicking this:\n  y \\<noteq> V\n  y \\<in> set Vs", "have \"index (Vs @ [V]) y = index Vs y\""], ["proof (prove)\nusing this:\n  y \\<noteq> V\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. index (Vs @ [V]) y = index Vs y", "by(simp)"], ["proof (state)\nthis:\n  index (Vs @ [V]) y = index Vs y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index (Vs @ [V]) xa; xa \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index Vs ` (fv exp2 - {V})", "thus ?thesis"], ["proof (prove)\nusing this:\n  index (Vs @ [V]) y = index Vs y\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` (fv exp2 - {V})", "using y \\<open>y \\<noteq> V\\<close>"], ["proof (prove)\nusing this:\n  index (Vs @ [V]) y = index Vs y\n  y \\<in> fv exp2\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. x \\<in> index Vs ` (fv exp2 - {V})", "by auto"], ["proof (state)\nthis:\n  x \\<in> index Vs ` (fv exp2 - {V})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> index Vs ` (fv exp2 - {V})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "assume x: \"x \\<in> index Vs ` (fv exp2 - {V})\""], ["proof (state)\nthis:\n  x \\<in> index Vs ` (fv exp2 - {V})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> index Vs ` (fv exp2 - {V}) \\<Longrightarrow>\n       x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "thus \"x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}\""], ["proof (prove)\nusing this:\n  x \\<in> index Vs ` (fv exp2 - {V})\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2 - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2 - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "assume [simp]: \"x = index Vs y\"\n        and y: \"y \\<in> fv exp2 - {V}\""], ["proof (state)\nthis:\n  x = index Vs y\n  y \\<in> fv exp2 - {V}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2 - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "with fv2"], ["proof (chain)\npicking this:\n  fv exp2 \\<subseteq> set (Vs @ [V])\n  x = index Vs y\n  y \\<in> fv exp2 - {V}", "have \"y \\<in> set Vs\" \"y \\<noteq> V\""], ["proof (prove)\nusing this:\n  fv exp2 \\<subseteq> set (Vs @ [V])\n  x = index Vs y\n  y \\<in> fv exp2 - {V}\n\ngoal (1 subgoal):\n 1. y \\<in> set Vs &&& y \\<noteq> V", "by auto"], ["proof (state)\nthis:\n  y \\<in> set Vs\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2 - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "hence \"index Vs y = index (Vs @ [V]) y\""], ["proof (prove)\nusing this:\n  y \\<in> set Vs\n  y \\<noteq> V\n\ngoal (1 subgoal):\n 1. index Vs y = index (Vs @ [V]) y", "by simp"], ["proof (state)\nthis:\n  index Vs y = index (Vs @ [V]) y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2 - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "with y"], ["proof (chain)\npicking this:\n  y \\<in> fv exp2 - {V}\n  index Vs y = index (Vs @ [V]) y", "have \"x \\<in> index (Vs @ [V]) ` fv exp2\""], ["proof (prove)\nusing this:\n  y \\<in> fv exp2 - {V}\n  index Vs y = index (Vs @ [V]) y\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [V]) ` fv exp2", "by auto"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [V]) ` fv exp2\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = index Vs xa; xa \\<in> fv exp2 - {V}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp2\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "using \\<open>y \\<in> set Vs\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> index (Vs @ [V]) ` fv exp2\n  y \\<in> set Vs\n\ngoal (1 subgoal):\n 1. x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}", "by simp"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> index (Vs @ [V]) ` fv exp2 - {length Vs}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  index (Vs @ [V]) ` fv exp2 - {length Vs} = index Vs ` (fv exp2 - {V})\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 22 subgoals...", "with IH1[OF fv1] IH2[OF fv2]"], ["proof (chain)\npicking this:\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv (compE1 (Vs @ [V]) exp2) = index (Vs @ [V]) ` fv exp2\n  index (Vs @ [V]) ` fv exp2 - {length Vs} = index Vs ` (fv exp2 - {V})", "show ?case"], ["proof (prove)\nusing this:\n  fv (compE1 Vs exp1) = index Vs ` fv exp1\n  fv (compE1 (Vs @ [V]) exp2) = index (Vs @ [V]) ` fv exp2\n  index (Vs @ [V]) ` fv exp2 - {length Vs} = index Vs ` (fv exp2 - {V})\n\ngoal (1 subgoal):\n 1. fv (compE1 Vs (try exp1 catch(C V) exp2)) =\n    index Vs ` fv (try exp1 catch(C V) exp2)", "by auto"], ["proof (state)\nthis:\n  fv (compE1 Vs (try exp1 catch(C V) exp2)) =\n  index Vs ` fv (try exp1 catch(C V) exp2)\n\ngoal (21 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (new C)) = index Vs ` fv (new C)\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (newA T\\<lfloor>e\\<rceil>)) =\n                         index Vs ` fv (newA T\\<lfloor>e\\<rceil>)\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (Cast T e)) =\n                         index Vs ` fv (Cast T e)\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (e instanceof T)) =\n                         index Vs ` fv (e instanceof T)\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Val v)) = index Vs ` fv (Val v)\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       fv (compE1 Vs (Var V)) = index Vs ` fv (Var V)\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv e' \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs e') = index Vs ` fv e';\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs\n                              (e \\<guillemotleft>bop\\<guillemotright> e')) =\n                         index Vs `\n                         fv (e \\<guillemotleft>bop\\<guillemotright> e')\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs e) = index Vs ` fv e;\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (V:=e)) = index Vs ` fv (V:=e)\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                fv (compE1 Vs a) = index Vs ` fv a;\n        fv i \\<subseteq> set Vs \\<Longrightarrow>\n        fv (compE1 Vs i) = index Vs ` fv i;\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil>)) =\n                         index Vs ` fv (a\\<lfloor>i\\<rceil>)\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 fv (compE1 Vs a) = index Vs ` fv a;\n         fv i \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs i) = index Vs ` fv i;\n         fv e \\<subseteq> set Vs \\<Longrightarrow>\n         fv (compE1 Vs e) = index Vs ` fv e;\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> fv (compE1 Vs (a\\<lfloor>i\\<rceil> := e)) =\n                          index Vs ` fv (a\\<lfloor>i\\<rceil> := e)\nA total of 21 subgoals...", "qed(auto)"], ["", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows syncvars_compE1: \"fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e)\"\n  and syncvarss_compEs1: \"fvs es \\<subseteq> set Vs \\<Longrightarrow> syncvarss (compEs1 Vs es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e)) &&&\n    (fvs es \\<subseteq> set Vs \\<Longrightarrow> syncvarss (compEs1 Vs es))", "proof(induct Vs e and Vs es rule: compE1_compEs1_induct)"], ["proof (state)\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 25 subgoals...", "case (Block Vs V ty vo exp)"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n  syncvars (compE1 (Vs @ [V]) exp)\n  fv {V:ty=vo; exp} \\<subseteq> set Vs\n\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 25 subgoals...", "from \\<open>fv {V:ty=vo; exp} \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv {V:ty=vo; exp} \\<subseteq> set Vs", "have \"fv exp \\<subseteq> set (Vs @ [V])\""], ["proof (prove)\nusing this:\n  fv {V:ty=vo; exp} \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp \\<subseteq> set (Vs @ [V])", "by auto"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [V])\n\ngoal (25 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 25 subgoals...", "from \\<open>fv exp \\<subseteq> set (Vs @ [V]) \\<Longrightarrow> syncvars (compE1 (Vs @ [V]) exp)\\<close>[OF this]"], ["proof (chain)\npicking this:\n  syncvars (compE1 (Vs @ [V]) exp)", "show ?case"], ["proof (prove)\nusing this:\n  syncvars (compE1 (Vs @ [V]) exp)\n\ngoal (1 subgoal):\n 1. syncvars (compE1 Vs {V:ty=vo; exp})", "by(simp)"], ["proof (state)\nthis:\n  syncvars (compE1 Vs {V:ty=vo; exp})\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 24 subgoals...", "next"], ["proof (state)\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 24 subgoals...", "case (Synchronized Vs V exp1 exp2)"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs exp1)\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp2)\n  fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 24 subgoals...", "note IH1 = \\<open>fv exp1 \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs exp1)\\<close>"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs exp1)\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 24 subgoals...", "note IH2 = \\<open>fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow> syncvars (compE1 (Vs @ [fresh_var Vs]) exp2)\\<close>"], ["proof (state)\nthis:\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp2)\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 24 subgoals...", "from \\<open>fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs", "have fv1: \"fv exp1 \\<subseteq> set Vs\"\n    and fv2: \"fv exp2 \\<subseteq> set Vs\" and fv2': \"fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])\""], ["proof (prove)\nusing this:\n  fv (sync\\<^bsub>V\\<^esub> (exp1) exp2) \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp1 \\<subseteq> set Vs &&&\n    fv exp2 \\<subseteq> set Vs &&&\n    fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])", "by auto"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs\n  fv exp2 \\<subseteq> set Vs\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 24 subgoals...", "have \"length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2 \\<Longrightarrow>\n    False", "assume \"length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\""], ["proof (state)\nthis:\n  length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal (1 subgoal):\n 1. length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2 \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal (1 subgoal):\n 1. False", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> False", "assume x: \"length Vs = index (Vs @ [fresh_var Vs]) x\"\n        and x': \"x \\<in> fv exp2\""], ["proof (state)\nthis:\n  length Vs = index (Vs @ [fresh_var Vs]) x\n  x \\<in> fv exp2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> False", "from x' fv2"], ["proof (chain)\npicking this:\n  x \\<in> fv exp2\n  fv exp2 \\<subseteq> set Vs", "have \"x \\<in> set Vs\" \"x \\<noteq> (fresh_var Vs)\""], ["proof (prove)\nusing this:\n  x \\<in> fv exp2\n  fv exp2 \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. x \\<in> set Vs &&& x \\<noteq> fresh_var Vs", "by(auto simp add: fresh_var_fresh)"], ["proof (state)\nthis:\n  x \\<in> set Vs\n  x \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp2\\<rbrakk>\n       \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  length Vs = index (Vs @ [fresh_var Vs]) x\n  x \\<in> set Vs\n  x \\<noteq> fresh_var Vs", "show ?thesis"], ["proof (prove)\nusing this:\n  length Vs = index (Vs @ [fresh_var Vs]) x\n  x \\<in> set Vs\n  x \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. False", "by(simp)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal (24 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 24 subgoals...", "with IH1[OF fv1] IH2[OF fv2'] fv2'"], ["proof (chain)\npicking this:\n  syncvars (compE1 Vs exp1)\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp2)\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])\n  length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp2", "show ?case"], ["proof (prove)\nusing this:\n  syncvars (compE1 Vs exp1)\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp2)\n  fv exp2 \\<subseteq> set (Vs @ [fresh_var Vs])\n  length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp2\n\ngoal (1 subgoal):\n 1. syncvars (compE1 Vs (sync\\<^bsub>V\\<^esub> (exp1) exp2))", "by(simp add: fv_compE1)"], ["proof (state)\nthis:\n  syncvars (compE1 Vs (sync\\<^bsub>V\\<^esub> (exp1) exp2))\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 23 subgoals...", "next"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 23 subgoals...", "case (InSynchronized Vs V a exp)"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp)\n  fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 23 subgoals...", "note IH = \\<open>fv exp \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow> syncvars (compE1 (Vs @ [fresh_var Vs]) exp)\\<close>"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs]) \\<Longrightarrow>\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp)\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 23 subgoals...", "from \\<open>fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs", "have fv: \"fv exp \\<subseteq> set Vs\"\n    and fv': \"fv exp \\<subseteq> set (Vs @ [fresh_var Vs])\""], ["proof (prove)\nusing this:\n  fv (insync\\<^bsub>V\\<^esub> (a) exp) \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp \\<subseteq> set Vs &&&\n    fv exp \\<subseteq> set (Vs @ [fresh_var Vs])", "by auto"], ["proof (state)\nthis:\n  fv exp \\<subseteq> set Vs\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs])\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 23 subgoals...", "have \"length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp \\<Longrightarrow>\n    False", "assume \"length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\""], ["proof (state)\nthis:\n  length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal (1 subgoal):\n 1. length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  length Vs \\<in> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal (1 subgoal):\n 1. False", "proof(rule imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> False", "assume x: \"length Vs = index (Vs @ [fresh_var Vs]) x\"\n        and x': \"x \\<in> fv exp\""], ["proof (state)\nthis:\n  length Vs = index (Vs @ [fresh_var Vs]) x\n  x \\<in> fv exp\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> False", "from x' fv"], ["proof (chain)\npicking this:\n  x \\<in> fv exp\n  fv exp \\<subseteq> set Vs", "have \"x \\<in> set Vs\" \"x \\<noteq> (fresh_var Vs)\""], ["proof (prove)\nusing this:\n  x \\<in> fv exp\n  fv exp \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. x \\<in> set Vs &&& x \\<noteq> fresh_var Vs", "by(auto simp add: fresh_var_fresh)"], ["proof (state)\nthis:\n  x \\<in> set Vs\n  x \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length Vs = index (Vs @ [fresh_var Vs]) x;\n        x \\<in> fv exp\\<rbrakk>\n       \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  length Vs = index (Vs @ [fresh_var Vs]) x\n  x \\<in> set Vs\n  x \\<noteq> fresh_var Vs", "show ?thesis"], ["proof (prove)\nusing this:\n  length Vs = index (Vs @ [fresh_var Vs]) x\n  x \\<in> set Vs\n  x \\<noteq> fresh_var Vs\n\ngoal (1 subgoal):\n 1. False", "by(simp)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal (23 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 23 subgoals...", "with IH[OF fv'] fv'"], ["proof (chain)\npicking this:\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp)\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs])\n  length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp", "show ?case"], ["proof (prove)\nusing this:\n  syncvars (compE1 (Vs @ [fresh_var Vs]) exp)\n  fv exp \\<subseteq> set (Vs @ [fresh_var Vs])\n  length Vs \\<notin> index (Vs @ [fresh_var Vs]) ` fv exp\n\ngoal (1 subgoal):\n 1. syncvars (compE1 Vs (insync\\<^bsub>V\\<^esub> (a) exp))", "by(simp add: fv_compE1)"], ["proof (state)\nthis:\n  syncvars (compE1 Vs (insync\\<^bsub>V\\<^esub> (a) exp))\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 22 subgoals...", "case (TryCatch Vs exp1 C V exp2)"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs exp1)\n  fv exp2 \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n  syncvars (compE1 (Vs @ [V]) exp2)\n  fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 22 subgoals...", "note IH1 = \\<open>fv exp1 \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs exp1)\\<close>"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs exp1)\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 22 subgoals...", "note IH2 = \\<open>fv exp2 \\<subseteq> set (Vs @ [V]) \\<Longrightarrow> syncvars (compE1 (Vs @ [V]) exp2)\\<close>"], ["proof (state)\nthis:\n  fv exp2 \\<subseteq> set (Vs @ [V]) \\<Longrightarrow>\n  syncvars (compE1 (Vs @ [V]) exp2)\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 22 subgoals...", "from \\<open>fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs\\<close>"], ["proof (chain)\npicking this:\n  fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs", "have fv1: \"fv exp1 \\<subseteq> set Vs\"\n    and fv2: \"fv exp2 \\<subseteq> set (Vs @ [V])\""], ["proof (prove)\nusing this:\n  fv (try exp1 catch(C V) exp2) \\<subseteq> set Vs\n\ngoal (1 subgoal):\n 1. fv exp1 \\<subseteq> set Vs &&& fv exp2 \\<subseteq> set (Vs @ [V])", "by auto"], ["proof (state)\nthis:\n  fv exp1 \\<subseteq> set Vs\n  fv exp2 \\<subseteq> set (Vs @ [V])\n\ngoal (22 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 22 subgoals...", "from IH1[OF fv1] IH2[OF fv2]"], ["proof (chain)\npicking this:\n  syncvars (compE1 Vs exp1)\n  syncvars (compE1 (Vs @ [V]) exp2)", "show ?case"], ["proof (prove)\nusing this:\n  syncvars (compE1 Vs exp1)\n  syncvars (compE1 (Vs @ [V]) exp2)\n\ngoal (1 subgoal):\n 1. syncvars (compE1 Vs (try exp1 catch(C V) exp2))", "by auto"], ["proof (state)\nthis:\n  syncvars (compE1 Vs (try exp1 catch(C V) exp2))\n\ngoal (21 subgoals):\n 1. \\<And>Vs C.\n       fv (new C) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (new C))\n 2. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (newA T\\<lfloor>e\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (newA T\\<lfloor>e\\<rceil>))\n 3. \\<And>Vs T e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (Cast T e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (Cast T e))\n 4. \\<And>Vs e T.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (e instanceof T) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (e instanceof T))\n 5. \\<And>Vs v.\n       fv (Val v) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Val v))\n 6. \\<And>Vs V.\n       fv (Var V) \\<subseteq> set Vs \\<Longrightarrow>\n       syncvars (compE1 Vs (Var V))\n 7. \\<And>Vs e bop e'.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv e' \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e');\n        fv (e \\<guillemotleft>bop\\<guillemotright> e')\n        \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars\n                          (compE1 Vs\n                            (e \\<guillemotleft>bop\\<guillemotright> e'))\n 8. \\<And>Vs V e.\n       \\<lbrakk>fv e \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs e);\n        fv (V:=e) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (V:=e))\n 9. \\<And>Vs a i.\n       \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                syncvars (compE1 Vs a);\n        fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n        fv (a\\<lfloor>i\\<rceil>) \\<subseteq> set Vs\\<rbrakk>\n       \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil>))\n 10. \\<And>Vs a i e.\n        \\<lbrakk>fv a \\<subseteq> set Vs \\<Longrightarrow>\n                 syncvars (compE1 Vs a);\n         fv i \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs i);\n         fv e \\<subseteq> set Vs \\<Longrightarrow> syncvars (compE1 Vs e);\n         fv (a\\<lfloor>i\\<rceil> := e) \\<subseteq> set Vs\\<rbrakk>\n        \\<Longrightarrow> syncvars (compE1 Vs (a\\<lfloor>i\\<rceil> := e))\nA total of 21 subgoals...", "qed auto"], ["", "lemma (in heap_base) synthesized_call_compP [simp]:\n  \"synthesized_call (compP f P) h aMvs = synthesized_call P h aMvs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. synthesized_call (compP f P) h aMvs = synthesized_call P h aMvs", "by(simp add: synthesized_call_def)"], ["", "primrec fin1 :: \"'addr expr \\<Rightarrow> 'addr expr1\"\nwhere\n  \"fin1 (Val v) = Val v\"\n| \"fin1 (throw e) = throw (fin1 e)\""], ["", "lemma comp_final: \"final e \\<Longrightarrow> compE1 Vs e = fin1 e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final e \\<Longrightarrow> compE1 Vs e = fin1 e", "by(erule finalE, simp_all)"], ["", "lemma fixes e :: \"'addr expr\" and es :: \"'addr expr list\"\n  shows [simp]: \"max_vars (compE1 Vs e) = max_vars e\"\n  and \"max_varss (compEs1 Vs es) = max_varss es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max_vars (compE1 Vs e) = max_vars e &&&\n    max_varss (compEs1 Vs es) = max_varss es", "by (induct Vs e and Vs es rule: compE1_compEs1_induct)(simp_all)"], ["", "text\\<open>Compiling programs:\\<close>"], ["", "definition compP1 :: \"'addr J_prog \\<Rightarrow> 'addr J1_prog\"\nwhere\n  \"compP1  \\<equiv>  compP (\\<lambda>C M Ts T (pns,body). compE1 (this#pns) body)\""], ["", "declare compP1_def[simp]"], ["", "end"]]}