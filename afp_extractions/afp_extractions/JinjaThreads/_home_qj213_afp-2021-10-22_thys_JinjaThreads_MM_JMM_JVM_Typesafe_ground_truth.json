{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/MM/JMM_JVM_Typesafe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma exec_instr_New_type_match:\n  \"\\<lbrakk> (ta, s') \\<in> h.exec_instr i P t h stk loc C M pc frs; NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>; typeof_addr ad \\<noteq> None \\<rbrakk>\n  \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>\"", "lemma mexecd_New_type_match:\n  \"\\<lbrakk> h.mexecd P t (xcpfrs, h) ta (xcpfrs', h'); NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>; typeof_addr ad \\<noteq> None \\<rbrakk>\n  \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>\"", "lemma mexecd_known_addrs_typing':\n  assumes wf: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\"\n  and ok: \"h.start_heap_ok\"\n  shows \"known_addrs_typing' addr2thread_id thread_id2addr empty_heap allocate typeof_addr heap_write allocated h.jvm_known_addrs JVM_final (h.mexecd P) (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P\"", "lemma JVM_weakly_legal_read_value_typeable:\n  assumes wf: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\"\n  and wf_start: \"h.wf_start_state P C M vs\"\n  and legal: \"weakly_legal_execution P (h.JVMd_\\<E> P C M vs status) (E, ws)\"\n  and a: \"enat a < llength E\"\n  and read: \"action_obs E a = NormalAction (ReadMem ad al v)\"\n  shows \"\\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T\"", "lemma jmm_JVM_heap_conf:\n  \"JVM_heap_conf addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) jmm_heap_write jmm_hconf P\"", "lemma jmm_JVMd_allocated_heap_conf':\n  \"JVM_allocated_heap_conf' addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr' P) jmm_heap_write jmm_hconf jmm_allocated P\"", "lemma exec_instr_heap_read_typed:\n  \"(ta, xcphfrs') \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write i P t h stk loc C M pc frs \\<longleftrightarrow>\n   (ta, xcphfrs') \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write i P t h stk loc C M pc frs \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\"", "lemma exec_heap_read_typed:\n  \"(ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P) heap_write P t xcphfrs \\<longleftrightarrow>\n   (ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P t xcphfrs \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\"", "lemma exec_1_d_heap_read_typed:\n  \"JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P) heap_write P t (Normal xcphfrs) ta (Normal xcphfrs') \\<longleftrightarrow>\n   JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P t (Normal xcphfrs) ta (Normal xcphfrs') \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\"", "lemma mexecd_heap_read_typed:\n  \"JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write P t xcpfrsh ta xcpfrsh' \\<longleftrightarrow>\n   JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P t xcpfrsh ta xcpfrsh' \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\"", "lemma if_mexecd_heap_read_typed:\n  \"multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write P) t xh ta x'h' \\<longleftrightarrow>\n   if_heap_read_typed JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P) typeof_addr P t xh ta x'h'\"", "lemma JVMd_\\<E>_heap_read_typedI:\n  \"\\<lbrakk> E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P C M vs status;\n     \\<And>ad al v T. \\<lbrakk> NormalAction (ReadMem ad al v) \\<in> snd ` lset E; heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<rbrakk> \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T \\<rbrakk>\n  \\<Longrightarrow> E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write P C M vs status\"", "lemma jmm'_exec_instrI:\n  \"\\<lbrakk> (ta, xcphfrs) \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write i P t h stk loc C M pc frs; \n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcphfrs. (ta, xcphfrs) \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write i P t h stk loc C M pc frs \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\"", "lemma jmm'_execI:\n  \"\\<lbrakk> (ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P t xcphfrs;\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcphfrs'. (ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P t xcphfrs \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\"", "lemma jmm'_execdI:\n  \"\\<lbrakk> JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P t (Normal xcphfrs) ta (Normal xcphfrs');\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcphfrs'. JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P t (Normal xcphfrs) ta (Normal xcphfrs') \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\"", "lemma jmm'_mexecdI:\n  \"\\<lbrakk> JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P t xcpfrsh ta xcpfrsh';\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcpfrsh'. JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P t xcpfrsh ta xcpfrsh' \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\"", "lemma if_mexecd_heap_read_not_stuck:\n  \"\\<lbrakk> multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P) t xh ta x'h';\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta x'h'. multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P) t xh ta x'h' \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\"", "lemma if_mExecd_heap_read_not_stuck:\n  \"multithreaded_base.redT (final_thread.init_fin_final JVM_final) (multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P)) convert_RA' s tta s'\n  \\<Longrightarrow> \\<exists>tta s'. multithreaded_base.redT (final_thread.init_fin_final JVM_final) (multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P)) convert_RA' s tta s'\"", "lemma JVM_legal_typesafe1:\n  assumes wfP: \"wf_jvm_prog P\"\n  and ok: \"jmm_wf_start_state P C M vs\"\n  and legal: \"legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\"", "lemma JVM_weakly_legal_typesafe1:\n  assumes wfP: \"wf_jvm_prog P\"\n  and ok: \"jmm_wf_start_state P C M vs\"\n  and legal: \"weakly_legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"weakly_legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\"", "lemma JVMd_\\<E>_heap_read_typedD:\n  \"E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) jmm_heap_read P) jmm_heap_write P C M vs status\n  \\<Longrightarrow> E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write P C M vs status\"", "lemma JVMd_\\<E>_typesafe_subset: \"jmm'_JVMd_\\<E> P C M vs status \\<subseteq> jmm_JVMd_\\<E> P C M vs status\"", "lemma JVMd_legal_typesafe2:\n  assumes legal: \"legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\"", "theorem JVMd_weakly_legal_typesafe2:\n  assumes legal: \"weakly_legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"weakly_legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\"", "theorem JVMd_weakly_legal_typesafe:\n  assumes \"wf_jvm_prog P\"\n  and \"jmm_wf_start_state P C M vs\"\n  shows \"weakly_legal_execution P (jmm_JVMd_\\<E> P C M vs status) = weakly_legal_execution P (jmm'_JVMd_\\<E> P C M vs status)\"", "theorem JVMd_legal_typesafe:\n  assumes \"wf_jvm_prog P\"\n  and \"jmm_wf_start_state P C M vs\"\n  shows \"legal_execution P (jmm_JVMd_\\<E> P C M vs status) = legal_execution P (jmm'_JVMd_\\<E> P C M vs status)\""], "translations": [["", "lemma exec_instr_New_type_match:\n  \"\\<lbrakk> (ta, s') \\<in> h.exec_instr i P t h stk loc C M pc frs; NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>; typeof_addr ad \\<noteq> None \\<rbrakk>\n  \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(ta, s') \\<in> h.exec_instr i P t h stk loc C M pc frs;\n     NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n     typeof_addr ad \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>", "by(cases i)(auto split: if_split_asm prod.split_asm dest: allocate_typeof_addr_SomeD red_external_aggr_New_type_match)"], ["", "lemma mexecd_New_type_match:\n  \"\\<lbrakk> h.mexecd P t (xcpfrs, h) ta (xcpfrs', h'); NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>; typeof_addr ad \\<noteq> None \\<rbrakk>\n  \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h.execd_mthr.r_syntax P t xcpfrs h ta xcpfrs' h';\n     NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n     typeof_addr ad \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>", "apply(cases xcpfrs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>h.execd_mthr.r_syntax P t xcpfrs h ta xcpfrs' h';\n        NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n        typeof_addr ad \\<noteq> None; xcpfrs = (a, b)\\<rbrakk>\n       \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>", "apply(cases xcpfrs')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h.execd_mthr.r_syntax P t xcpfrs h ta xcpfrs' h';\n        NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n        typeof_addr ad \\<noteq> None; xcpfrs = (a, b);\n        xcpfrs' = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>", "apply(simp add: split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h.exec_1_d P t (Normal (a, h, b)) ta (Normal (aa, h', ba));\n        NewHeapElem ad CTn \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n        \\<exists>y. typeof_addr ad = \\<lfloor>y\\<rfloor>; xcpfrs = (a, b);\n        xcpfrs' = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>", "apply(erule h.jvmd_NormalE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba xcp ha f frs.\n       \\<lbrakk>NewHeapElem ad CTn\n                \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n        \\<exists>y. typeof_addr ad = \\<lfloor>y\\<rfloor>; xcpfrs = (a, b);\n        xcpfrs' = (aa, ba); h.check P (a, h, b);\n        (ta, aa, h', ba) \\<in> h.exec P t (a, h, b);\n        (a, h, b) = (xcp, ha, f # frs)\\<rbrakk>\n       \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>", "apply(cases \"fst xcpfrs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba xcp ha f frs.\n       \\<lbrakk>NewHeapElem ad CTn\n                \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n        \\<exists>y. typeof_addr ad = \\<lfloor>y\\<rfloor>; xcpfrs = (a, b);\n        xcpfrs' = (aa, ba); h.check P (a, h, b);\n        (ta, aa, h', ba) \\<in> h.exec P t (a, h, b);\n        (a, h, b) = (xcp, ha, f # frs); fst xcpfrs = None\\<rbrakk>\n       \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>\n 2. \\<And>a b aa ba xcp ha f frs ab.\n       \\<lbrakk>NewHeapElem ad CTn\n                \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>;\n        \\<exists>y. typeof_addr ad = \\<lfloor>y\\<rfloor>; xcpfrs = (a, b);\n        xcpfrs' = (aa, ba); h.check P (a, h, b);\n        (ta, aa, h', ba) \\<in> h.exec P t (a, h, b);\n        (a, h, b) = (xcp, ha, f # frs);\n        fst xcpfrs = \\<lfloor>ab\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> typeof_addr ad = \\<lfloor>CTn\\<rfloor>", "apply(auto 4 3 dest: exec_instr_New_type_match)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mexecd_known_addrs_typing':\n  assumes wf: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\"\n  and ok: \"h.start_heap_ok\"\n  shows \"known_addrs_typing' addr2thread_id thread_id2addr empty_heap allocate typeof_addr heap_write allocated h.jvm_known_addrs JVM_final (h.mexecd P) (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. known_addrs_typing' addr2thread_id thread_id2addr empty_heap allocate\n     typeof_addr heap_write allocated h.jvm_known_addrs JVM_final\n     (h.mexecd P)\n     (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. known_addrs_typing' addr2thread_id thread_id2addr empty_heap allocate\n     typeof_addr heap_write allocated h.jvm_known_addrs JVM_final\n     (h.mexecd P)\n     (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P", "interpret known_addrs_typing\n    addr2thread_id thread_id2addr \n    spurious_wakeups\n    empty_heap allocate \"\\<lambda>_. typeof_addr\" heap_read heap_write\n    allocated h.jvm_known_addrs\n    JVM_final \"h.mexecd P\" \"\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)\"\n    P"], ["proof (prove)\ngoal (1 subgoal):\n 1. known_addrs_typing addr2thread_id thread_id2addr empty_heap allocate\n     (\\<lambda>_. typeof_addr) heap_write allocated h.jvm_known_addrs\n     JVM_final (h.mexecd P)\n     (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P", "using assms"], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  h.start_heap_ok\n\ngoal (1 subgoal):\n 1. known_addrs_typing addr2thread_id thread_id2addr empty_heap allocate\n     (\\<lambda>_. typeof_addr) heap_write allocated h.jvm_known_addrs\n     JVM_final (h.mexecd P)\n     (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P", "by(rule h.mexecd_known_addrs_typing)"], ["proof (state)\ngoal (1 subgoal):\n 1. known_addrs_typing' addr2thread_id thread_id2addr empty_heap allocate\n     typeof_addr heap_write allocated h.jvm_known_addrs JVM_final\n     (h.mexecd P)\n     (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. known_addrs_typing' addr2thread_id thread_id2addr empty_heap allocate\n     typeof_addr heap_write allocated h.jvm_known_addrs JVM_final\n     (h.mexecd P)\n     (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P", "by(unfold_locales)(erule mexecd_New_type_match)"], ["proof (state)\nthis:\n  known_addrs_typing' addr2thread_id thread_id2addr empty_heap allocate\n   typeof_addr heap_write allocated h.jvm_known_addrs JVM_final (h.mexecd P)\n   (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma JVM_weakly_legal_read_value_typeable:\n  assumes wf: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\"\n  and wf_start: \"h.wf_start_state P C M vs\"\n  and legal: \"weakly_legal_execution P (h.JVMd_\\<E> P C M vs status) (E, ws)\"\n  and a: \"enat a < llength E\"\n  and read: \"action_obs E a = NormalAction (ReadMem ad al v)\"\n  shows \"\\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "note wf"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "moreover"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "from wf_start"], ["proof (chain)\npicking this:\n  h.wf_start_state P C M vs", "have \"h.start_heap_ok\""], ["proof (prove)\nusing this:\n  h.wf_start_state P C M vs\n\ngoal (1 subgoal):\n 1. h.start_heap_ok", "by cases"], ["proof (state)\nthis:\n  h.start_heap_ok\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "moreover"], ["proof (state)\nthis:\n  h.start_heap_ok\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "from wf wf_start"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  h.wf_start_state P C M vs", "have \"ts_ok (\\<lambda>t (xcp, frs) h. h.correct_state \\<Phi> t (xcp, h, frs)) (thr (h.JVM_start_state P C M vs)) h.start_heap\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  h.wf_start_state P C M vs\n\ngoal (1 subgoal):\n 1. h.correct_state_ts \\<Phi> (thr (h.start_state JVM_local_start P C M vs))\n     h.start_heap", "using h.correct_jvm_state_initial[OF wf wf_start]"], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  h.wf_start_state P C M vs\n  h.start_state JVM_local_start P C M vs \\<in> h.correct_jvm_state \\<Phi>\n\ngoal (1 subgoal):\n 1. h.correct_state_ts \\<Phi> (thr (h.start_state JVM_local_start P C M vs))\n     h.start_heap", "by(simp add: h.correct_jvm_state_def h.start_state_def split_beta)"], ["proof (state)\nthis:\n  h.correct_state_ts \\<Phi> (thr (h.start_state JVM_local_start P C M vs))\n   h.start_heap\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "moreover"], ["proof (state)\nthis:\n  h.correct_state_ts \\<Phi> (thr (h.start_state JVM_local_start P C M vs))\n   h.start_heap\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "from wf"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P", "obtain wf_md where wf': \"wf_prog wf_md P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. (\\<And>wf_md.\n        wf_prog wf_md P \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: wt_jvm_progD)"], ["proof (state)\nthis:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "hence \"wf_syscls P\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. wf_syscls P", "by(rule wf_prog_wf_syscls)"], ["proof (state)\nthis:\n  wf_syscls P\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "ultimately"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  h.start_heap_ok\n  h.correct_state_ts \\<Phi> (thr (h.start_state JVM_local_start P C M vs))\n   h.start_heap\n  wf_syscls P", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  h.start_heap_ok\n  h.correct_state_ts \\<Phi> (thr (h.start_state JVM_local_start P C M vs))\n   h.start_heap\n  wf_syscls P\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "using legal a read"], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  h.start_heap_ok\n  h.correct_state_ts \\<Phi> (thr (h.start_state JVM_local_start P C M vs))\n   h.start_heap\n  wf_syscls P\n  weakly_legal_execution P\n   (h.execd_mthr.\\<E>_start P JVM_local_start P C M vs status) (E, ws)\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T", "by(rule known_addrs_typing'.weakly_legal_read_value_typeable[OF mexecd_known_addrs_typing'])"], ["proof (state)\nthis:\n  \\<exists>T. P \\<turnstile> ad@al : T \\<and> P \\<turnstile> v :\\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "abbreviation jmm_JVMd_\\<E>\n  :: \"addr jvm_prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> addr val list \\<Rightarrow> status \\<Rightarrow> (addr \\<times> (addr, addr) obs_event action) llist set\"\nwhere \n  \"jmm_JVMd_\\<E> P \\<equiv> \n  JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P\""], ["", "abbreviation jmm'_JVMd_\\<E>\n  :: \"addr jvm_prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> addr val list \\<Rightarrow> status \\<Rightarrow> (addr \\<times> (addr, addr) obs_event action) llist set\"\nwhere \n  \"jmm'_JVMd_\\<E> P \\<equiv> \n  JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P\""], ["", "abbreviation jmm_JVM_start_state\n  :: \"addr jvm_prog \\<Rightarrow> cname \\<Rightarrow> mname \\<Rightarrow> addr val list \\<Rightarrow> (addr,thread_id,addr jvm_thread_state,JMM_heap,addr) state\"\nwhere \"jmm_JVM_start_state \\<equiv> JVM_heap_base.JVM_start_state addr2thread_id jmm_empty jmm_allocate\""], ["", "lemma jmm_JVM_heap_conf:\n  \"JVM_heap_conf addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr P) jmm_heap_write jmm_hconf P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write jmm_hconf P", "by(unfold_locales)"], ["", "lemma jmm_JVMd_allocated_heap_conf':\n  \"JVM_allocated_heap_conf' addr2thread_id thread_id2addr jmm_empty jmm_allocate (jmm_typeof_addr' P) jmm_heap_write jmm_hconf jmm_allocated P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_allocated_heap_conf' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n     jmm_allocate (jmm_typeof_addr' P) jmm_heap_write jmm_hconf\n     jmm_allocated P", "apply(rule JVM_allocated_heap_conf'.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. JVM_heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (\\<lambda>_. jmm_typeof_addr' P) jmm_heap_write jmm_hconf P\n 2. JVM_allocated_heap (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n     jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_heap_write\n     jmm_allocated P\n 3. heap'' (\\<lambda>x. x) (\\<lambda>x. x) jmm_allocate (jmm_typeof_addr' P)\n     jmm_heap_write P", "apply(unfold jmm_typeof_addr'_conv_jmm_typeof_addr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. JVM_heap_conf (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n     (jmm_typeof_addr P) jmm_heap_write jmm_hconf P\n 2. JVM_allocated_heap (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n     jmm_allocate (jmm_typeof_addr P) jmm_heap_write jmm_allocated P\n 3. heap'' (\\<lambda>x. x) (\\<lambda>x. x) jmm_allocate (jmm_typeof_addr' P)\n     jmm_heap_write P", "apply(unfold_locales)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec_instr_heap_read_typed:\n  \"(ta, xcphfrs') \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write i P t h stk loc C M pc frs \\<longleftrightarrow>\n   (ta, xcphfrs') \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write i P t h stk loc C M pc frs \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read\n              P)\n            heap_write i P t h stk loc C M pc frs) =\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            heap_read heap_write i P t h stk loc C M pc frs \\<and>\n     (\\<forall>ad al v T.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))", "apply(cases i)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>x1.\n       i = Load x1 \\<Longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr)\n               (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                 heap_read P)\n               heap_write i P t h stk loc C M pc frs) =\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write i P t h stk\n               loc C M pc frs \\<and>\n        (\\<forall>ad al v T.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n             T \\<longrightarrow>\n            heap_base'.conf TYPE('heap) typeof_addr P v T))\n 2. \\<And>x2.\n       i = Store x2 \\<Longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr)\n               (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                 heap_read P)\n               heap_write i P t h stk loc C M pc frs) =\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write i P t h stk\n               loc C M pc frs \\<and>\n        (\\<forall>ad al v T.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n             T \\<longrightarrow>\n            heap_base'.conf TYPE('heap) typeof_addr P v T))\n 3. \\<And>x3.\n       i = Push x3 \\<Longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr)\n               (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                 heap_read P)\n               heap_write i P t h stk loc C M pc frs) =\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write i P t h stk\n               loc C M pc frs \\<and>\n        (\\<forall>ad al v T.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n             T \\<longrightarrow>\n            heap_base'.conf TYPE('heap) typeof_addr P v T))\n 4. \\<And>x4.\n       i = New x4 \\<Longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr)\n               (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                 heap_read P)\n               heap_write i P t h stk loc C M pc frs) =\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write i P t h stk\n               loc C M pc frs \\<and>\n        (\\<forall>ad al v T.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n             T \\<longrightarrow>\n            heap_base'.conf TYPE('heap) typeof_addr P v T))\n 5. \\<And>x5.\n       i = NewArray x5 \\<Longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr)\n               (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                 heap_read P)\n               heap_write i P t h stk loc C M pc frs) =\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write i P t h stk\n               loc C M pc frs \\<and>\n        (\\<forall>ad al v T.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n             T \\<longrightarrow>\n            heap_base'.conf TYPE('heap) typeof_addr P v T))\n 6. i = ALoad \\<Longrightarrow>\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read\n              P)\n            heap_write i P t h stk loc C M pc frs) =\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            heap_read heap_write i P t h stk loc C M pc frs \\<and>\n     (\\<forall>ad al v T.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))\n 7. i = AStore \\<Longrightarrow>\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read\n              P)\n            heap_write i P t h stk loc C M pc frs) =\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            heap_read heap_write i P t h stk loc C M pc frs \\<and>\n     (\\<forall>ad al v T.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))\n 8. i = ALength \\<Longrightarrow>\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read\n              P)\n            heap_write i P t h stk loc C M pc frs) =\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            heap_read heap_write i P t h stk loc C M pc frs \\<and>\n     (\\<forall>ad al v T.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))\n 9. \\<And>x91 x92.\n       i = Getfield x91 x92 \\<Longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr)\n               (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                 heap_read P)\n               heap_write i P t h stk loc C M pc frs) =\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write i P t h stk\n               loc C M pc frs \\<and>\n        (\\<forall>ad al v T.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n             T \\<longrightarrow>\n            heap_base'.conf TYPE('heap) typeof_addr P v T))\n 10. \\<And>x101 x102.\n        i = Putfield x101 x102 \\<Longrightarrow>\n        ((ta, xcphfrs')\n         \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n                spurious_wakeups empty_heap allocate\n                (\\<lambda>_. typeof_addr)\n                (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                  heap_read P)\n                heap_write i P t h stk loc C M pc frs) =\n        ((ta, xcphfrs')\n         \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n                spurious_wakeups empty_heap allocate\n                (\\<lambda>_. typeof_addr) heap_read heap_write i P t h stk\n                loc C M pc frs \\<and>\n         (\\<forall>ad al v T.\n             ReadMem ad al v\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T))\nA total of 24 subgoals...", "apply(simp_all add: JVM_heap_base.exec_instr.simps split_beta cong: conj_cong)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x4.\n       i = New x4 \\<Longrightarrow>\n       allocate h (Class_type x4) \\<noteq> {} \\<longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> (\\<lambda>x.\n                  (\\<lbrace>NewHeapElem (snd x) (Class_type x4)\\<rbrace>,\n                   None, fst x,\n                   (Addr (snd x) # stk, loc, C, M, Suc pc) # frs)) `\n              allocate h (Class_type x4)) =\n       ((ta, xcphfrs')\n        \\<in> (\\<lambda>x.\n                  (\\<lbrace>NewHeapElem (snd x) (Class_type x4)\\<rbrace>,\n                   None, fst x,\n                   (Addr (snd x) # stk, loc, C, M, Suc pc) # frs)) `\n              allocate h (Class_type x4) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 2. \\<And>x5.\n       i = NewArray x5 \\<Longrightarrow>\n       allocate h (Array_type x5 (nat (sint (the_Intg (hd stk))))) \\<noteq>\n       {} \\<longrightarrow>\n       \\<not> the_Intg (hd stk) <s 0 \\<longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> (\\<lambda>x.\n                  (\\<lbrace>NewHeapElem (snd x)\n                             (Array_type x5\n                               (nat (sint (the_Intg (hd stk)))))\\<rbrace>,\n                   None, fst x,\n                   (Addr (snd x) # tl stk, loc, C, M, Suc pc) # frs)) `\n              allocate h (Array_type x5 (nat (sint (the_Intg (hd stk)))))) =\n       ((ta, xcphfrs')\n        \\<in> (\\<lambda>x.\n                  (\\<lbrace>NewHeapElem (snd x)\n                             (Array_type x5\n                               (nat (sint (the_Intg (hd stk)))))\\<rbrace>,\n                   None, fst x,\n                   (Addr (snd x) # tl stk, loc, C, M, Suc pc) # frs)) `\n              allocate h\n               (Array_type x5 (nat (sint (the_Intg (hd stk))))) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 3. i = ALoad \\<Longrightarrow>\n    \\<not> the_Intg (hd stk) <s 0 \\<and>\n    \\<not> int (alen_of_htype (the (typeof_addr (the_Addr (hd (tl stk))))))\n           \\<le> sint (the_Intg (hd stk)) \\<longrightarrow>\n    hd (tl stk) \\<noteq> Null \\<longrightarrow>\n    (\\<exists>v.\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl stk)))\n                  (ACell (nat (sint (the_Intg (hd stk))))) v\\<rbrace> \\<and>\n        xcphfrs' =\n        (None, h, (v # tl (tl stk), loc, C, M, Suc pc) # frs) \\<and>\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl stk))) (ACell (nat (sint (the_Intg (hd stk)))))\n         v) =\n    ((\\<exists>v.\n         ta =\n         \\<lbrace>ReadMem (the_Addr (hd (tl stk)))\n                   (ACell (nat (sint (the_Intg (hd stk)))))\n                   v\\<rbrace> \\<and>\n         xcphfrs' =\n         (None, h, (v # tl (tl stk), loc, C, M, Suc pc) # frs) \\<and>\n         heap_read h (the_Addr (hd (tl stk)))\n          (ACell (nat (sint (the_Intg (hd stk))))) v) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 4. \\<And>x91 x92.\n       i = Getfield x91 x92 \\<Longrightarrow>\n       hd stk \\<noteq> Null \\<longrightarrow>\n       (\\<exists>v'.\n           ta =\n           \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91)\n                     v'\\<rbrace> \\<and>\n           xcphfrs' =\n           (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs) \\<and>\n           heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n            (the_Addr (hd stk)) (CField x92 x91) v') =\n       ((\\<exists>v'.\n            ta =\n            \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91)\n                      v'\\<rbrace> \\<and>\n            xcphfrs' =\n            (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs) \\<and>\n            heap_read h (the_Addr (hd stk)) (CField x92 x91) v') \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 5. \\<And>x111 x112.\n       i = CAS x111 x112 \\<Longrightarrow>\n       hd (tl (tl stk)) \\<noteq> Null \\<longrightarrow>\n       (ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace> \\<and>\n        (\\<exists>h'.\n            xcphfrs' =\n            (None, h',\n             (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs) \\<and>\n            heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P\n             h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n             (hd (tl stk)) \\<and>\n            heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n             (hd stk) h') \\<or>\n        (\\<exists>v''.\n            ta =\n            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n                      (CField x112 x111) v''\\<rbrace> \\<and>\n            xcphfrs' =\n            (None, h,\n             (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) #\n             frs) \\<and>\n            heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P\n             h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'' \\<and>\n            v'' \\<noteq> hd (tl stk))) =\n       ((ta =\n         \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                   (hd (tl stk)),\n         WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n          (hd stk)\\<rbrace> \\<and>\n         (\\<exists>h'.\n             xcphfrs' =\n             (None, h',\n              (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) #\n              frs) \\<and>\n             heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n              (hd (tl stk)) \\<and>\n             heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n              (hd stk) h') \\<or>\n         (\\<exists>v''.\n             ta =\n             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n                       (CField x112 x111) v''\\<rbrace> \\<and>\n             xcphfrs' =\n             (None, h,\n              (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) #\n              frs) \\<and>\n             heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n              v'' \\<and>\n             v'' \\<noteq> hd (tl stk))) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 6. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 7. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(auto dest: heap_base.heap_read_typed_into_heap_read del: disjCI)[5]"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>v T.\n       \\<lbrakk>i = ALoad; \\<not> the_Intg (hd stk) <s 0;\n        \\<not> int (alen_of_htype\n                     (the (typeof_addr (the_Addr (hd (tl stk))))))\n               \\<le> sint (the_Intg (hd stk));\n        hd (tl stk) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl stk)))\n                  (ACell (nat (sint (the_Intg (hd stk))))) v\\<rbrace>;\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl stk))) (ACell (nat (sint (the_Intg (hd stk)))))\n         v;\n        xcphfrs' = (None, h, (v # tl (tl stk), loc, C, M, Suc pc) # frs);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl stk))) (ACell (nat (sint (the_Intg (hd stk)))))\n         T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T\n 2. \\<And>v.\n       \\<lbrakk>i = ALoad; \\<not> the_Intg (hd stk) <s 0;\n        \\<not> int (alen_of_htype\n                     (the (typeof_addr (the_Addr (hd (tl stk))))))\n               \\<le> sint (the_Intg (hd stk));\n        hd (tl stk) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl stk)))\n            (ACell (nat (sint (the_Intg (hd stk))))) T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl stk)))\n                  (ACell (nat (sint (the_Intg (hd stk))))) v\\<rbrace>;\n        heap_read h (the_Addr (hd (tl stk)))\n         (ACell (nat (sint (the_Intg (hd stk))))) v;\n        xcphfrs' =\n        (None, h, (v # tl (tl stk), loc, C, M, Suc pc) # frs)\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl stk)))\n                          (ACell (nat (sint (the_Intg (hd stk))))) v\n 3. \\<And>x91 x92 v' T.\n       \\<lbrakk>i = Getfield x91 x92; hd stk \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91) v'\\<rbrace>;\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd stk)) (CField x92 x91) v';\n        xcphfrs' = (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd stk)) (CField x92 x91) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v' T\n 4. \\<And>x91 x92 v'.\n       \\<lbrakk>i = Getfield x91 x92; hd stk \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd stk)) (CField x92 x91) T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91) v'\\<rbrace>;\n        heap_read h (the_Addr (hd stk)) (CField x92 x91) v';\n        xcphfrs' =\n        (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs)\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd stk)) (CField x92 x91)\n                          v'\n 5. \\<And>x111 x112 h' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h';\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P\n                          (hd (tl stk)) T\n 6. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_read h (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 7. \\<And>x111 x112 v'' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v'' T\n 8. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 9. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 10. \\<And>x141 x142.\n        i = Invoke x141 x142 \\<Longrightarrow>\n        snd (snd (snd (method P\n                        (class_type_of\n                          (the (typeof_addr (the_Addr (stk ! x142)))))\n                        x141))) =\n        None \\<longrightarrow>\n        stk ! x142 \\<noteq> Null \\<longrightarrow>\n        (\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr)\n                       (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                         heap_read P)\n                       heap_write P t (the_Addr (stk ! x142)) x141\n                       (rev (take x142 stk)) h)) =\n        ((\\<exists>a aa ab ac ad b.\n             ta =\n             (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n              ad, b) \\<and>\n             (\\<exists>va h'.\n                 xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                 ((a, aa, ab, ac, ad, b), va, h')\n                 \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                        (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                        (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                        (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                        h)) \\<and>\n         (\\<forall>ad al v.\n             ReadMem ad al v\n             \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n             (\\<forall>T.\n                 heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                  T \\<longrightarrow>\n                 heap_base'.conf TYPE('heap) typeof_addr P v T)))\nA total of 11 subgoals...", "apply(blast dest:  heap_base.heap_read_typed_typed heap_base'.addr_loc_type_conv_addr_loc_type[THEN fun_cong, THEN fun_cong, THEN fun_cong, THEN iffD2] heap_base'.conf_conv_conf[THEN fun_cong, THEN fun_cong, THEN iffD1])"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>i = ALoad; \\<not> the_Intg (hd stk) <s 0;\n        \\<not> int (alen_of_htype\n                     (the (typeof_addr (the_Addr (hd (tl stk))))))\n               \\<le> sint (the_Intg (hd stk));\n        hd (tl stk) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl stk)))\n            (ACell (nat (sint (the_Intg (hd stk))))) T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl stk)))\n                  (ACell (nat (sint (the_Intg (hd stk))))) v\\<rbrace>;\n        heap_read h (the_Addr (hd (tl stk)))\n         (ACell (nat (sint (the_Intg (hd stk))))) v;\n        xcphfrs' =\n        (None, h, (v # tl (tl stk), loc, C, M, Suc pc) # frs)\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl stk)))\n                          (ACell (nat (sint (the_Intg (hd stk))))) v\n 2. \\<And>x91 x92 v' T.\n       \\<lbrakk>i = Getfield x91 x92; hd stk \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91) v'\\<rbrace>;\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd stk)) (CField x92 x91) v';\n        xcphfrs' = (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd stk)) (CField x92 x91) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v' T\n 3. \\<And>x91 x92 v'.\n       \\<lbrakk>i = Getfield x91 x92; hd stk \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd stk)) (CField x92 x91) T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91) v'\\<rbrace>;\n        heap_read h (the_Addr (hd stk)) (CField x92 x91) v';\n        xcphfrs' =\n        (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs)\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd stk)) (CField x92 x91)\n                          v'\n 4. \\<And>x111 x112 h' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h';\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P\n                          (hd (tl stk)) T\n 5. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_read h (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 6. \\<And>x111 x112 v'' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v'' T\n 7. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 8. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 9. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 10. i = MExit \\<Longrightarrow>\n     hd stk \\<noteq> Null \\<longrightarrow>\n     (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) =\n     ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n       SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n       xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n       ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n       xcphfrs' =\n       (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                  IllegalMonitorState\\<rfloor>,\n        h, (stk, loc, C, M, pc) # frs)) \\<and>\n      (\\<forall>ad al v.\n          ReadMem ad al v\n          \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n          (\\<forall>T.\n              heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n               T \\<longrightarrow>\n              heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(auto dest: heap_base'.addr_loc_type_conv_addr_loc_type[THEN fun_cong, THEN fun_cong, THEN fun_cong, THEN iffD1] intro: heap_base'.conf_conv_conf[THEN fun_cong, THEN fun_cong, THEN iffD2] heap_base.heap_read_typedI)[1]"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x91 x92 v' T.\n       \\<lbrakk>i = Getfield x91 x92; hd stk \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91) v'\\<rbrace>;\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd stk)) (CField x92 x91) v';\n        xcphfrs' = (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd stk)) (CField x92 x91) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v' T\n 2. \\<And>x91 x92 v'.\n       \\<lbrakk>i = Getfield x91 x92; hd stk \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd stk)) (CField x92 x91) T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91) v'\\<rbrace>;\n        heap_read h (the_Addr (hd stk)) (CField x92 x91) v';\n        xcphfrs' =\n        (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs)\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd stk)) (CField x92 x91)\n                          v'\n 3. \\<And>x111 x112 h' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h';\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P\n                          (hd (tl stk)) T\n 4. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_read h (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 5. \\<And>x111 x112 v'' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v'' T\n 6. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 7. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 8. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 9. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(blast dest:  heap_base.heap_read_typed_typed heap_base'.addr_loc_type_conv_addr_loc_type[THEN fun_cong, THEN fun_cong, THEN fun_cong, THEN iffD2] heap_base'.conf_conv_conf[THEN fun_cong, THEN fun_cong, THEN iffD1])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x91 x92 v'.\n       \\<lbrakk>i = Getfield x91 x92; hd stk \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd stk)) (CField x92 x91) T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd stk)) (CField x92 x91) v'\\<rbrace>;\n        heap_read h (the_Addr (hd stk)) (CField x92 x91) v';\n        xcphfrs' =\n        (None, h, (v' # tl stk, loc, C, M, Suc pc) # frs)\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd stk)) (CField x92 x91)\n                          v'\n 2. \\<And>x111 x112 h' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h';\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P\n                          (hd (tl stk)) T\n 3. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_read h (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 4. \\<And>x111 x112 v'' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v'' T\n 5. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 6. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 7. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 8. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(auto dest: heap_base'.addr_loc_type_conv_addr_loc_type[THEN fun_cong, THEN fun_cong, THEN fun_cong, THEN iffD1] intro: heap_base'.conf_conv_conf[THEN fun_cong, THEN fun_cong, THEN iffD2] heap_base.heap_read_typedI)[1]"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x111 x112 h' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h';\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P\n                          (hd (tl stk)) T\n 2. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_read h (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 3. \\<And>x111 x112 v'' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v'' T\n 4. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 5. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 6. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 7. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(blast dest:  heap_base.heap_read_typed_typed heap_base'.addr_loc_type_conv_addr_loc_type[THEN fun_cong, THEN fun_cong, THEN fun_cong, THEN iffD2] heap_base'.conf_conv_conf[THEN fun_cong, THEN fun_cong, THEN iffD1])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_read h (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 2. \\<And>x111 x112 v'' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v'' T\n 3. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 4. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 5. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 6. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS x111_ x112_; hd (tl (tl stk)) \\<noteq> Null;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n               v''_\\<rbrace>;\n     xcphfrs' =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n      (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_) v''_;\n     v''_ \\<noteq> hd (tl stk)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v''a.\n                         \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n                                   (CField x112_ x111_) v''_\\<rbrace> =\n                         \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n                                   (CField x112_ x111_) v''a\\<rbrace> \\<and>\n                         heap_read h (the_Addr (hd (tl (tl stk))))\n                          (CField x112_ x111_) v''a \\<and>\n                         v''a \\<noteq> hd (tl stk)", "by(auto dest: heap_base.heap_read_typed_into_heap_read)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x111 x112 v'' T.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P h\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk);\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112 x111) T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v'' T\n 2. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 3. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 4. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 5. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(blast dest:  heap_base.heap_read_typed_typed heap_base'.addr_loc_type_conv_addr_loc_type[THEN fun_cong, THEN fun_cong, THEN fun_cong, THEN iffD2] heap_base'.conf_conv_conf[THEN fun_cong, THEN fun_cong, THEN iffD1])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs' =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112 x111) (hd (tl stk))\n 2. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 3. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 4. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS x111_ x112_; hd (tl (tl stk)) \\<noteq> Null;\n     \\<forall>T.\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n         T \\<longrightarrow>\n        heap_base'.conf TYPE('heap) typeof_addr P (hd (tl stk)) T;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n               (hd (tl stk)),\n     WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n      (hd stk)\\<rbrace>;\n     xcphfrs' =\n     (None, h'_, (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n      (hd (tl stk));\n     heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n      (hd stk) h'_\\<rbrakk>\n    \\<Longrightarrow> heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                       heap_read P h (the_Addr (hd (tl (tl stk))))\n                       (CField x112_ x111_) (hd (tl stk))", "by(auto dest: heap_base'.addr_loc_type_conv_addr_loc_type[THEN fun_cong, THEN fun_cong, THEN fun_cong, THEN iffD1] intro: heap_base'.conf_conv_conf[THEN fun_cong, THEN fun_cong, THEN iffD2] heap_base.heap_read_typedI)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        \\<forall>T.\n           heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n            (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n            T \\<longrightarrow>\n           heap_base'.conf TYPE('heap) typeof_addr P v'' T;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs' =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v''a.\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''\\<rbrace> =\n                            \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n(CField x112 x111) v''a\\<rbrace> \\<and>\n                            heap_base.heap_read_typed\n                             (\\<lambda>_. typeof_addr) heap_read P h\n                             (the_Addr (hd (tl (tl stk))))\n                             (CField x112 x111) v''a \\<and>\n                            v''a \\<noteq> hd (tl stk)\n 2. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 3. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS x111_ x112_; hd (tl (tl stk)) \\<noteq> Null;\n     \\<forall>T.\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P\n         (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n         T \\<longrightarrow>\n        heap_base'.conf TYPE('heap) typeof_addr P v''_ T;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_)\n               v''_\\<rbrace>;\n     xcphfrs' =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112_ x111_) v''_;\n     v''_ \\<noteq> hd (tl stk)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v''a.\n                         \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n                                   (CField x112_ x111_) v''_\\<rbrace> =\n                         \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n                                   (CField x112_ x111_) v''a\\<rbrace> \\<and>\n                         heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                          heap_read P h (the_Addr (hd (tl (tl stk))))\n                          (CField x112_ x111_) v''a \\<and>\n                         v''a \\<noteq> hd (tl stk)", "by(auto 4 3 dest: heap_base.heap_read_typed_into_heap_read intro: heap_base.heap_read_typedI simp add: heap_base'.conf_conv_conf heap_base'.addr_loc_type_conv_addr_loc_type)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr)\n                      (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                        heap_read P)\n                      heap_write P t (the_Addr (stk ! x142)) x141\n                      (rev (take x142 stk)) h)) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 2. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(subst red_external_aggr_heap_read_typed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x141 x142.\n       i = Invoke x141 x142 \\<Longrightarrow>\n       snd (snd (snd (method P\n                       (class_type_of\n                         (the (typeof_addr (the_Addr (stk ! x142)))))\n                       x141))) =\n       None \\<longrightarrow>\n       stk ! x142 \\<noteq> Null \\<longrightarrow>\n       (\\<exists>a aa ab ac ad b.\n           ta =\n           (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n            ad, b) \\<and>\n           (\\<exists>va h'.\n               xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n               ((a, aa, ab, ac, ad, b), va, h')\n               \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                      (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                      (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                      (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                      h \\<and>\n               (\\<forall>ada al v T obs' a'.\n                   ReadMem ada al v\n                   \\<in> set \\<lbrace>(a, aa, ab, ac, ad,\n b)\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                   heap_base'.addr_loc_type TYPE('heap) typeof_addr P ada al\n                    T \\<longrightarrow>\n                   heap_base'.conf TYPE('heap) typeof_addr P v T))) =\n       ((\\<exists>a aa ab ac ad b.\n            ta =\n            (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac,\n             ad, b) \\<and>\n            (\\<exists>va h'.\n                xcphfrs' = extRet2JVM x142 h' stk loc C M pc frs va \\<and>\n                ((a, aa, ab, ac, ad, b), va, h')\n                \\<in> heap_base.red_external_aggr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                       (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n                       h)) \\<and>\n        (\\<forall>ad al v.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            (\\<forall>T.\n                heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                 T \\<longrightarrow>\n                heap_base'.conf TYPE('heap) typeof_addr P v T)))\n 2. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply(fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = MExit \\<Longrightarrow>\n    hd stk \\<noteq> Null \\<longrightarrow>\n    (ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n     SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n     ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n     xcphfrs' =\n     (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                IllegalMonitorState\\<rfloor>,\n      h, (stk, loc, C, M, pc) # frs)) =\n    ((ta = \\<lbrace>(Unlock, the_Addr (hd stk)),\n      SyncUnlock (the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' = (None, h, (tl stk, loc, C, M, Suc pc) # frs) \\<or>\n      ta = \\<lbrace>(UnlockFail, the_Addr (hd stk))\\<rbrace> \\<and>\n      xcphfrs' =\n      (\\<lfloor>heap_base.addr_of_sys_xcpt empty_heap allocate\n                 IllegalMonitorState\\<rfloor>,\n       h, (stk, loc, C, M, pc) # frs)) \\<and>\n     (\\<forall>ad al v.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         (\\<forall>T.\n             heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n              T \\<longrightarrow>\n             heap_base'.conf TYPE('heap) typeof_addr P v T)))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec_heap_read_typed:\n  \"(ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P) heap_write P t xcphfrs \\<longleftrightarrow>\n   (ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P t xcphfrs \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read\n              P)\n            heap_write P t xcphfrs) =\n    ((ta, xcphfrs')\n     \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n            heap_read heap_write P t xcphfrs \\<and>\n     (\\<forall>ad al v T.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))", "apply(cases xcphfrs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       xcphfrs = (a, b, c) \\<Longrightarrow>\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr)\n               (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                 heap_read P)\n               heap_write P t xcphfrs) =\n       ((ta, xcphfrs')\n        \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write P t\n               xcphfrs \\<and>\n        (\\<forall>ad al v T.\n            ReadMem ad al v\n            \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n            heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n             T \\<longrightarrow>\n            heap_base'.conf TYPE('heap) typeof_addr P v T))", "apply(cases \"fst xcphfrs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>xcphfrs = (a, b, c); fst xcphfrs = None\\<rbrakk>\n       \\<Longrightarrow> ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 (heap_base.heap_read_typed\n                                   (\\<lambda>_. typeof_addr) heap_read P)\n                                 heap_write P t xcphfrs) =\n                         ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 heap_read heap_write P t xcphfrs \\<and>\n                          (\\<forall>ad al v T.\n                              ReadMem ad al v\n                              \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              heap_base'.addr_loc_type TYPE('heap)\n                               typeof_addr P ad al T \\<longrightarrow>\n                              heap_base'.conf TYPE('heap) typeof_addr P v\n                               T))\n 2. \\<And>a b c aa.\n       \\<lbrakk>xcphfrs = (a, b, c);\n        fst xcphfrs = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 (heap_base.heap_read_typed\n                                   (\\<lambda>_. typeof_addr) heap_read P)\n                                 heap_write P t xcphfrs) =\n                         ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 heap_read heap_write P t xcphfrs \\<and>\n                          (\\<forall>ad al v T.\n                              ReadMem ad al v\n                              \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              heap_base'.addr_loc_type TYPE('heap)\n                               typeof_addr P ad al T \\<longrightarrow>\n                              heap_base'.conf TYPE('heap) typeof_addr P v\n                               T))", "apply(case_tac [!] \"snd (snd xcphfrs)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>xcphfrs = (a, b, c); fst xcphfrs = None;\n        snd (snd xcphfrs) = []\\<rbrakk>\n       \\<Longrightarrow> ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 (heap_base.heap_read_typed\n                                   (\\<lambda>_. typeof_addr) heap_read P)\n                                 heap_write P t xcphfrs) =\n                         ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 heap_read heap_write P t xcphfrs \\<and>\n                          (\\<forall>ad al v T.\n                              ReadMem ad al v\n                              \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              heap_base'.addr_loc_type TYPE('heap)\n                               typeof_addr P ad al T \\<longrightarrow>\n                              heap_base'.conf TYPE('heap) typeof_addr P v\n                               T))\n 2. \\<And>a b c aa list.\n       \\<lbrakk>xcphfrs = (a, b, c); fst xcphfrs = None;\n        snd (snd xcphfrs) = aa # list\\<rbrakk>\n       \\<Longrightarrow> ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 (heap_base.heap_read_typed\n                                   (\\<lambda>_. typeof_addr) heap_read P)\n                                 heap_write P t xcphfrs) =\n                         ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 heap_read heap_write P t xcphfrs \\<and>\n                          (\\<forall>ad al v T.\n                              ReadMem ad al v\n                              \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              heap_base'.addr_loc_type TYPE('heap)\n                               typeof_addr P ad al T \\<longrightarrow>\n                              heap_base'.conf TYPE('heap) typeof_addr P v\n                               T))\n 3. \\<And>a b c aa.\n       \\<lbrakk>xcphfrs = (a, b, c); fst xcphfrs = \\<lfloor>aa\\<rfloor>;\n        snd (snd xcphfrs) = []\\<rbrakk>\n       \\<Longrightarrow> ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 (heap_base.heap_read_typed\n                                   (\\<lambda>_. typeof_addr) heap_read P)\n                                 heap_write P t xcphfrs) =\n                         ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 heap_read heap_write P t xcphfrs \\<and>\n                          (\\<forall>ad al v T.\n                              ReadMem ad al v\n                              \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              heap_base'.addr_loc_type TYPE('heap)\n                               typeof_addr P ad al T \\<longrightarrow>\n                              heap_base'.conf TYPE('heap) typeof_addr P v\n                               T))\n 4. \\<And>a b c aa ab list.\n       \\<lbrakk>xcphfrs = (a, b, c); fst xcphfrs = \\<lfloor>aa\\<rfloor>;\n        snd (snd xcphfrs) = ab # list\\<rbrakk>\n       \\<Longrightarrow> ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 (heap_base.heap_read_typed\n                                   (\\<lambda>_. typeof_addr) heap_read P)\n                                 heap_write P t xcphfrs) =\n                         ((ta, xcphfrs')\n                          \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate (\\<lambda>_. typeof_addr)\n                                 heap_read heap_write P t xcphfrs \\<and>\n                          (\\<forall>ad al v T.\n                              ReadMem ad al v\n                              \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n                              heap_base'.addr_loc_type TYPE('heap)\n                               typeof_addr P ad al T \\<longrightarrow>\n                              heap_base'.conf TYPE('heap) typeof_addr P v\n                               T))", "apply(auto simp add: JVM_heap_base.exec.simps exec_instr_heap_read_typed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec_1_d_heap_read_typed:\n  \"JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P) heap_write P t (Normal xcphfrs) ta (Normal xcphfrs') \\<longleftrightarrow>\n   JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P t (Normal xcphfrs) ta (Normal xcphfrs') \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n     empty_heap allocate (\\<lambda>_. typeof_addr)\n     (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P)\n     heap_write P t (Normal xcphfrs) ta (Normal xcphfrs') =\n    (JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n      empty_heap allocate (\\<lambda>_. typeof_addr) heap_read heap_write P t\n      (Normal xcphfrs) ta (Normal xcphfrs') \\<and>\n     (\\<forall>ad al v T.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))", "by(auto elim!: JVM_heap_base.jvmd_NormalE intro: JVM_heap_base.exec_1_d_NormalI simp add: exec_heap_read_typed JVM_heap_base.exec_d_def)"], ["", "lemma mexecd_heap_read_typed:\n  \"JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write P t xcpfrsh ta xcpfrsh' \\<longleftrightarrow>\n   JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P t xcpfrsh ta xcpfrsh' \\<and>\n   (\\<forall>ad al v T. ReadMem ad al v \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow> heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case xcpfrsh of\n     (x, xa) \\<Rightarrow>\n       (case x of\n        (xcp, frstls) \\<Rightarrow>\n          \\<lambda>h ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n              (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read\n                P)\n              heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n        xa)\n     ta xcpfrsh' =\n    ((case xcpfrsh of\n      (x, xa) \\<Rightarrow>\n        (case x of\n         (xcp, frstls) \\<Rightarrow>\n           \\<lambda>h ta ((xcp', frstls'), h').\n              JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate\n               (\\<lambda>_. typeof_addr) heap_read heap_write P t\n               (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n         xa)\n      ta xcpfrsh' \\<and>\n     (\\<forall>ad al v T.\n         ReadMem ad al v\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))", "by(simp add: split_beta exec_1_d_heap_read_typed)"], ["", "lemma if_mexecd_heap_read_typed:\n  \"multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write P) t xh ta x'h' \\<longleftrightarrow>\n   if_heap_read_typed JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P) typeof_addr P t xh ta x'h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multithreaded_base.init_fin JVM_final\n     (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n         JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n          spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n          (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P)\n          heap_write P t (Normal (xcp, h, frstls)) ta\n          (Normal (xcp', h', frstls')))\n     t xh ta x'h' =\n    if_heap_read_typed JVM_final\n     (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n         JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n          spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr)\n          heap_read heap_write P t (Normal (xcp, h, frstls)) ta\n          (Normal (xcp', h', frstls')))\n     typeof_addr P t xh ta x'h'", "unfolding multithreaded_base.init_fin.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>taa x m taaa x' m'.\n         t = taa \\<and>\n         xh = ((Running, x), m) \\<and>\n         ta = convert_TA_initial (convert_obs_initial taaa) \\<and>\n         x'h' = ((Running, x'), m') \\<and>\n         (case (x, m) of\n          (x, xa) \\<Rightarrow>\n            (case x of\n             (xcp, frstls) \\<Rightarrow>\n               \\<lambda>h ta ((xcp', frstls'), h').\n                  JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                   spurious_wakeups empty_heap allocate\n                   (\\<lambda>_. typeof_addr)\n                   (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                     heap_read P)\n                   heap_write P taa (Normal (xcp, h, frstls)) ta\n                   (Normal (xcp', h', frstls')))\n             xa)\n          taaa (x', m')) \\<or>\n     (\\<exists>taa x m.\n         t = taa \\<and>\n         xh = ((PreStart, x), m) \\<and>\n         ta = \\<lbrace>InitialThreadAction\\<rbrace> \\<and>\n         x'h' = ((Running, x), m)) \\<or>\n     (\\<exists>x taa m.\n         t = taa \\<and>\n         xh = ((Running, x), m) \\<and>\n         ta = \\<lbrace>ThreadFinishAction\\<rbrace> \\<and>\n         x'h' = ((Finished, x), m) \\<and> JVM_final x)) =\n    (((\\<exists>taa x m taaa x' m'.\n          t = taa \\<and>\n          xh = ((Running, x), m) \\<and>\n          ta = convert_TA_initial (convert_obs_initial taaa) \\<and>\n          x'h' = ((Running, x'), m') \\<and>\n          (case (x, m) of\n           (x, xa) \\<Rightarrow>\n             (case x of\n              (xcp, frstls) \\<Rightarrow>\n                \\<lambda>h ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate\n                    (\\<lambda>_. typeof_addr) heap_read heap_write P taa\n                    (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls')))\n              xa)\n           taaa (x', m')) \\<or>\n      (\\<exists>taa x m.\n          t = taa \\<and>\n          xh = ((PreStart, x), m) \\<and>\n          ta = \\<lbrace>InitialThreadAction\\<rbrace> \\<and>\n          x'h' = ((Running, x), m)) \\<or>\n      (\\<exists>x taa m.\n          t = taa \\<and>\n          xh = ((Running, x), m) \\<and>\n          ta = \\<lbrace>ThreadFinishAction\\<rbrace> \\<and>\n          x'h' = ((Finished, x), m) \\<and> JVM_final x)) \\<and>\n     (\\<forall>ad al v T.\n         NormalAction (ReadMem ad al v)\n         \\<in> set \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub> \\<longrightarrow>\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n          T \\<longrightarrow>\n         heap_base'.conf TYPE('heap) typeof_addr P v T))", "by(subst mexecd_heap_read_typed) fastforce"], ["", "lemma JVMd_\\<E>_heap_read_typedI:\n  \"\\<lbrakk> E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) heap_read heap_write P C M vs status;\n     \\<And>ad al v T. \\<lbrakk> NormalAction (ReadMem ad al v) \\<in> snd ` lset E; heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T \\<rbrakk> \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T \\<rbrakk>\n  \\<Longrightarrow> E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_ :: 'heap. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_ :: 'heap. typeof_addr) heap_read P) heap_write P C M vs status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E \\<in> lappend\n                      (llist_of\n                        (lift_start_obs\n                          (heap_base.start_tid (\\<lambda>x. x) empty_heap\n                            allocate)\n                          (heap_base.start_heap_obs empty_heap allocate))) `\n                     multithreaded_base.\\<E>\n                      (final_thread.init_fin_final JVM_final)\n                      (multithreaded_base.init_fin JVM_final\n                        (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                            h').\n                            JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                             (\\<lambda>x. x) spurious_wakeups empty_heap\n                             allocate (\\<lambda>_. typeof_addr) heap_read\n                             heap_write P t (Normal (xcp, h, frstls)) ta\n                             (Normal (xcp', h', frstls'))))\n                      (map NormalAction \\<circ> convert_RA)\n                      (init_fin_lift_state status\n                        (heap_base.start_state (\\<lambda>x. x) empty_heap\n                          allocate JVM_local_start P C M vs));\n     \\<And>ad al v T.\n        \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n         heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T\\<rbrakk>\n        \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v\n                           T\\<rbrakk>\n    \\<Longrightarrow> E \\<in> lappend\n                               (llist_of\n                                 (lift_start_obs\n                                   (heap_base.start_tid (\\<lambda>x. x)\n                                     empty_heap allocate)\n                                   (heap_base.start_heap_obs empty_heap\n                                     allocate))) `\n                              multithreaded_base.\\<E>\n                               (final_thread.init_fin_final JVM_final)\n                               (multithreaded_base.init_fin JVM_final\n                                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                     frstls'), h').\n                                     JVM_heap_base.exec_1_d (\\<lambda>x. x)\n(\\<lambda>x. x) spurious_wakeups empty_heap allocate\n(\\<lambda>_. typeof_addr)\n(heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P) heap_write\nP t (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n                               (map NormalAction \\<circ> convert_RA)\n                               (init_fin_lift_state status\n                                 (heap_base.start_state (\\<lambda>x. x)\n                                   empty_heap allocate JVM_local_start P C M\n                                   vs))", "apply(erule imageE, hypsubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>ad al v T.\n                   \\<lbrakk>NormalAction (ReadMem ad al v)\n                            \\<in> snd `\n                                  lset\n                                   (lappend\n                                     (llist_of\n (lift_start_obs (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n   (heap_base.start_heap_obs empty_heap allocate)))\n                                     x);\n                    heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                     T\\<rbrakk>\n                   \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr\nP v T;\n        x \\<in> multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                        (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                        (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (heap_base.start_state (\\<lambda>x. x) empty_heap\n                     allocate JVM_local_start P C M vs));\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         x\\<rbrakk>\n       \\<Longrightarrow> lappend\n                          (llist_of\n                            (lift_start_obs\n                              (heap_base.start_tid (\\<lambda>x. x)\n                                empty_heap allocate)\n                              (heap_base.start_heap_obs empty_heap\n                                allocate)))\n                          x\n                         \\<in> lappend\n                                (llist_of\n                                  (lift_start_obs\n                                    (heap_base.start_tid (\\<lambda>x. x)\nempty_heap allocate)\n                                    (heap_base.start_heap_obs empty_heap\nallocate))) `\n                               multithreaded_base.\\<E>\n                                (final_thread.init_fin_final JVM_final)\n                                (multithreaded_base.init_fin JVM_final\n                                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\nfrstls'), h').\nJVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n empty_heap allocate (\\<lambda>_. typeof_addr)\n (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P)\n heap_write P t (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n                                (map NormalAction \\<circ> convert_RA)\n                                (init_fin_lift_state status\n                                  (heap_base.start_state (\\<lambda>x. x)\n                                    empty_heap allocate JVM_local_start P C\n                                    M vs))", "apply(rule imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>ad al v T.\n                   \\<lbrakk>NormalAction (ReadMem ad al v)\n                            \\<in> snd `\n                                  lset\n                                   (lappend\n                                     (llist_of\n (lift_start_obs (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n   (heap_base.start_heap_obs empty_heap allocate)))\n                                     x);\n                    heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                     T\\<rbrakk>\n                   \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr\nP v T;\n        x \\<in> multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                        (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                        (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (heap_base.start_state (\\<lambda>x. x) empty_heap\n                     allocate JVM_local_start P C M vs));\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> multithreaded_base.\\<E>\n                                  (final_thread.init_fin_final JVM_final)\n                                  (multithreaded_base.init_fin JVM_final\n                                    (\\<lambda>t ((xcp, frstls), h) ta\n  ((xcp', frstls'), h').\n  JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n   empty_heap allocate (\\<lambda>_. typeof_addr)\n   (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P)\n   heap_write P t (Normal (xcp, h, frstls)) ta\n   (Normal (xcp', h', frstls'))))\n                                  (map NormalAction \\<circ> convert_RA)\n                                  (init_fin_lift_state status\n                                    (heap_base.start_state (\\<lambda>x. x)\nempty_heap allocate JVM_local_start P C M vs))", "apply(erule multithreaded_base.\\<E>.cases, hypsubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E'.\n       \\<lbrakk>\\<And>ad al v T.\n                   \\<lbrakk>NormalAction (ReadMem ad al v)\n                            \\<in> snd `\n                                  lset\n                                   (lappend\n                                     (llist_of\n (lift_start_obs (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n   (heap_base.start_heap_obs empty_heap allocate)))\n                                     (lconcat\n (lmap\n   (\\<lambda>(t, ta).\n       llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n   E')));\n                    heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                     T\\<rbrakk>\n                   \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr\nP v T;\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         (lconcat\n           (lmap\n             (\\<lambda>(t, ta).\n                 llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             E'));\n        trsys.Runs\n         (multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate\n                  (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA))\n         (init_fin_lift_state status\n           (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n             JVM_local_start P C M vs))\n         E'\\<rbrakk>\n       \\<Longrightarrow> lconcat\n                          (lmap\n                            (\\<lambda>(t, ta).\n                                llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                            E')\n                         \\<in> multithreaded_base.\\<E>\n                                (final_thread.init_fin_final JVM_final)\n                                (multithreaded_base.init_fin JVM_final\n                                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\nfrstls'), h').\nJVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n empty_heap allocate (\\<lambda>_. typeof_addr)\n (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) heap_read P)\n heap_write P t (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n                                (map NormalAction \\<circ> convert_RA)\n                                (init_fin_lift_state status\n                                  (heap_base.start_state (\\<lambda>x. x)\n                                    empty_heap allocate JVM_local_start P C\n                                    M vs))", "apply(rule multithreaded_base.\\<E>.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E'.\n       \\<lbrakk>\\<And>ad al v T.\n                   \\<lbrakk>NormalAction (ReadMem ad al v)\n                            \\<in> snd `\n                                  lset\n                                   (lappend\n                                     (llist_of\n (lift_start_obs (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n   (heap_base.start_heap_obs empty_heap allocate)))\n                                     (lconcat\n (lmap\n   (\\<lambda>(t, ta).\n       llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n   E')));\n                    heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                     T\\<rbrakk>\n                   \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr\nP v T;\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         (lconcat\n           (lmap\n             (\\<lambda>(t, ta).\n                 llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             E'));\n        trsys.Runs\n         (multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate\n                  (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA))\n         (init_fin_lift_state status\n           (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n             JVM_local_start P C M vs))\n         E'\\<rbrakk>\n       \\<Longrightarrow> trsys.Runs\n                          (multithreaded_base.redT\n                            (final_thread.init_fin_final JVM_final)\n                            (multithreaded_base.init_fin JVM_final\n                              (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                  frstls'), h').\n                                  JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate\n                                   (\\<lambda>_. typeof_addr)\n                                   (heap_base.heap_read_typed\n                                     (\\<lambda>_. typeof_addr) heap_read P)\n                                   heap_write P t (Normal (xcp, h, frstls))\n                                   ta (Normal (xcp', h', frstls'))))\n                            (map NormalAction \\<circ> convert_RA))\n                          (init_fin_lift_state status\n                            (heap_base.start_state (\\<lambda>x. x)\n                              empty_heap allocate JVM_local_start P C M vs))\n                          E'", "apply(subst if_mexecd_heap_read_typed[abs_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E'.\n       \\<lbrakk>\\<And>ad al v T.\n                   \\<lbrakk>NormalAction (ReadMem ad al v)\n                            \\<in> snd `\n                                  lset\n                                   (lappend\n                                     (llist_of\n (lift_start_obs (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n   (heap_base.start_heap_obs empty_heap allocate)))\n                                     (lconcat\n (lmap\n   (\\<lambda>(t, ta).\n       llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n   E')));\n                    heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                     T\\<rbrakk>\n                   \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr\nP v T;\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         (lconcat\n           (lmap\n             (\\<lambda>(t, ta).\n                 llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             E'));\n        trsys.Runs\n         (multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate\n                  (\\<lambda>_. typeof_addr) heap_read heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA))\n         (init_fin_lift_state status\n           (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n             JVM_local_start P C M vs))\n         E'\\<rbrakk>\n       \\<Longrightarrow> trsys.Runs\n                          (multithreaded_base.redT\n                            (final_thread.init_fin_final JVM_final)\n                            (if_heap_read_typed JVM_final\n                              (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                  frstls'), h').\n                                  JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate\n                                   (\\<lambda>_. typeof_addr) heap_read\n                                   heap_write P t (Normal (xcp, h, frstls))\n                                   ta (Normal (xcp', h', frstls')))\n                              typeof_addr P)\n                            (map NormalAction \\<circ> convert_RA))\n                          (init_fin_lift_state status\n                            (heap_base.start_state (\\<lambda>x. x)\n                              empty_heap allocate JVM_local_start P C M vs))\n                          E'", "apply(erule if_mthr_Runs_heap_read_typedI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E' ad al v T.\n       \\<lbrakk>\\<And>ad al v T.\n                   \\<lbrakk>NormalAction (ReadMem ad al v)\n                            \\<in> snd `\n                                  lset\n                                   (lappend\n                                     (llist_of\n (lift_start_obs (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n   (heap_base.start_heap_obs empty_heap allocate)))\n                                     (lconcat\n (lmap\n   (\\<lambda>(t, ta).\n       llist_of (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n   E')));\n                    heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al\n                     T\\<rbrakk>\n                   \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr\nP v T;\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         (lconcat\n           (lmap\n             (\\<lambda>(t, ta).\n                 llist_of\n                  (map (Pair t) \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n             E'));\n        NormalAction (ReadMem ad al v)\n        \\<in> lset (lconcat (lmap (llist_of \\<circ> obs_a \\<circ> snd) E'));\n        heap_base'.addr_loc_type TYPE('heap) typeof_addr P ad al T\\<rbrakk>\n       \\<Longrightarrow> heap_base'.conf TYPE('heap) typeof_addr P v T", "apply(auto simp add: image_Un lset_lmap[symmetric] lmap_lconcat llist.map_comp o_def split_def simp del: lset_lmap)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jmm'_exec_instrI:\n  \"\\<lbrakk> (ta, xcphfrs) \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write i P t h stk loc C M pc frs; \n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcphfrs. (ta, xcphfrs) \\<in> JVM_heap_base.exec_instr addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write i P t h stk loc C M pc frs \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(ta, xcphfrs)\n             \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate typeof_addr\n                    jmm_heap_read jmm_heap_write i P t h stk loc C M pc frs;\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n      ta\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta xcphfrs.\n                         (ta, xcphfrs)\n                         \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                (\\<lambda>x. x) spurious_wakeups empty_heap\n                                allocate typeof_addr\n                                (heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P)\n                                jmm_heap_write i P t h stk loc C M pc\n                                frs \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta", "apply(cases i)"], ["proof (prove)\ngoal (24 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>(ta, xcphfrs)\n                \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       typeof_addr jmm_heap_read jmm_heap_write i P t h stk\n                       loc C M pc frs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs.\n                            (ta, xcphfrs)\n                            \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write i P t h stk loc C M pc\n                                   frs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>x2.\n       \\<lbrakk>(ta, xcphfrs)\n                \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       typeof_addr jmm_heap_read jmm_heap_write i P t h stk\n                       loc C M pc frs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs.\n                            (ta, xcphfrs)\n                            \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write i P t h stk loc C M pc\n                                   frs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x3.\n       \\<lbrakk>(ta, xcphfrs)\n                \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       typeof_addr jmm_heap_read jmm_heap_write i P t h stk\n                       loc C M pc frs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs.\n                            (ta, xcphfrs)\n                            \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write i P t h stk loc C M pc\n                                   frs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 4. \\<And>x4.\n       \\<lbrakk>(ta, xcphfrs)\n                \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       typeof_addr jmm_heap_read jmm_heap_write i P t h stk\n                       loc C M pc frs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs.\n                            (ta, xcphfrs)\n                            \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write i P t h stk loc C M pc\n                                   frs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 5. \\<And>x5.\n       \\<lbrakk>(ta, xcphfrs)\n                \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       typeof_addr jmm_heap_read jmm_heap_write i P t h stk\n                       loc C M pc frs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        i = NewArray x5\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs.\n                            (ta, xcphfrs)\n                            \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write i P t h stk loc C M pc\n                                   frs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 6. \\<lbrakk>(ta, xcphfrs)\n             \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate typeof_addr\n                    jmm_heap_read jmm_heap_write i P t h stk loc C M pc frs;\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta;\n     i = ALoad\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta xcphfrs.\n                         (ta, xcphfrs)\n                         \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                (\\<lambda>x. x) spurious_wakeups empty_heap\n                                allocate typeof_addr\n                                (heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P)\n                                jmm_heap_write i P t h stk loc C M pc\n                                frs \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta\n 7. \\<lbrakk>(ta, xcphfrs)\n             \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate typeof_addr\n                    jmm_heap_read jmm_heap_write i P t h stk loc C M pc frs;\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta;\n     i = AStore\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta xcphfrs.\n                         (ta, xcphfrs)\n                         \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                (\\<lambda>x. x) spurious_wakeups empty_heap\n                                allocate typeof_addr\n                                (heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P)\n                                jmm_heap_write i P t h stk loc C M pc\n                                frs \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta\n 8. \\<lbrakk>(ta, xcphfrs)\n             \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate typeof_addr\n                    jmm_heap_read jmm_heap_write i P t h stk loc C M pc frs;\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta;\n     i = ALength\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta xcphfrs.\n                         (ta, xcphfrs)\n                         \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                (\\<lambda>x. x) spurious_wakeups empty_heap\n                                allocate typeof_addr\n                                (heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P)\n                                jmm_heap_write i P t h stk loc C M pc\n                                frs \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta\n 9. \\<And>x91 x92.\n       \\<lbrakk>(ta, xcphfrs)\n                \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                       (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                       typeof_addr jmm_heap_read jmm_heap_write i P t h stk\n                       loc C M pc frs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        i = Getfield x91 x92\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs.\n                            (ta, xcphfrs)\n                            \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write i P t h stk loc C M pc\n                                   frs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 10. \\<And>x101 x102.\n        \\<lbrakk>(ta, xcphfrs)\n                 \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                        (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n                        typeof_addr jmm_heap_read jmm_heap_write i P t h stk\n                        loc C M pc frs;\n         final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n          ta;\n         i = Putfield x101 x102\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ta xcphfrs.\n                             (ta, xcphfrs)\n                             \\<in> JVM_heap_base.exec_instr (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write i P t h stk loc C M pc\n                                    frs \\<and>\n                             final_thread.actions_ok\n                              (final_thread.init_fin_final JVM_final) s t ta\nA total of 24 subgoals...", "apply(auto simp add: JVM_heap_base.exec_instr.simps split_beta final_thread.actions_ok_iff intro!: jmm_heap_read_typed_default_val rev_image_eqI simp del: split_paired_Ex split: if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x111 x112 h'.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        lock_ok_las (locks s) t (K$ []);\n        final_thread.cond_action_oks (final_thread.init_fin_final JVM_final)\n         s t [];\n        wset s t = None;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  (hd (tl stk)),\n        WriteMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk)\\<rbrace>;\n        xcphfrs =\n        (None, h', (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd (tl stk));\n        jmm_heap_write h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         (hd stk) h'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta.\n                            (\\<exists>xcphfrs.\n                                ta =\n                                \\<lbrace>ReadMem\n    (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk)),\n                                WriteMem (the_Addr (hd (tl (tl stk))))\n                                 (CField x112 x111) (hd stk)\\<rbrace> \\<and>\n                                (\\<exists>h'.\n                                    xcphfrs =\n                                    (None, h',\n                                     (Bool True # tl (tl (tl stk)), loc, C,\nM, Suc pc) #\n                                     frs) \\<and>\n                                    heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) (hd (tl stk)) \\<and>\n                                    jmm_heap_write h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) (hd stk) h') \\<or>\n                                (\\<exists>v''.\n                                    ta =\n                                    \\<lbrace>ReadMem\n        (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v''\\<rbrace> \\<and>\n                                    xcphfrs =\n                                    (None, h,\n                                     (Bool False # tl (tl (tl stk)), loc, C,\nM, Suc pc) #\n                                     frs) \\<and>\n                                    heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) v'' \\<and>\n                                    v'' \\<noteq> hd (tl stk))) \\<and>\n                            lock_ok_las (locks s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                            thread_oks (thr s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                            final_thread.cond_action_oks\n                             (final_thread.init_fin_final JVM_final) s t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                            wset_actions_ok (wset s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                            interrupt_actions_ok (interrupts s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n 2. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        lock_ok_las (locks s) t (K$ []);\n        final_thread.cond_action_oks (final_thread.init_fin_final JVM_final)\n         s t [];\n        wset s t = None;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta.\n                            (\\<exists>xcphfrs.\n                                ta =\n                                \\<lbrace>ReadMem\n    (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk)),\n                                WriteMem (the_Addr (hd (tl (tl stk))))\n                                 (CField x112 x111) (hd stk)\\<rbrace> \\<and>\n                                (\\<exists>h'.\n                                    xcphfrs =\n                                    (None, h',\n                                     (Bool True # tl (tl (tl stk)), loc, C,\nM, Suc pc) #\n                                     frs) \\<and>\n                                    heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) (hd (tl stk)) \\<and>\n                                    jmm_heap_write h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) (hd stk) h') \\<or>\n                                (\\<exists>v''.\n                                    ta =\n                                    \\<lbrace>ReadMem\n        (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v''\\<rbrace> \\<and>\n                                    xcphfrs =\n                                    (None, h,\n                                     (Bool False # tl (tl (tl stk)), loc, C,\nM, Suc pc) #\n                                     frs) \\<and>\n                                    heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) v'' \\<and>\n                                    v'' \\<noteq> hd (tl stk))) \\<and>\n                            lock_ok_las (locks s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                            thread_oks (thr s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                            final_thread.cond_action_oks\n                             (final_thread.init_fin_final JVM_final) s t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                            wset_actions_ok (wset s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                            interrupt_actions_ok (interrupts s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n 3. \\<And>x141 x142 a aa ab ac ad b va h'.\n       \\<lbrakk>i = Invoke x141 x142; stk ! x142 \\<noteq> Null;\n        lock_ok_las (locks s) t a; thread_oks (thr s) aa;\n        final_thread.cond_action_oks (final_thread.init_fin_final JVM_final)\n         s t ab;\n        wset_actions_ok (wset s) t ac;\n        interrupt_actions_ok (interrupts s) ad;\n        snd (snd (snd (method P\n                        (class_type_of\n                          (the (typeof_addr h (the_Addr (stk ! x142)))))\n                        x141))) =\n        None;\n        ta =\n        (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac, ad,\n         b);\n        xcphfrs = extRet2JVM x142 h' stk loc C M pc frs va;\n        ((a, aa, ab, ac, ad, b), va, h')\n        \\<in> heap_base.red_external_aggr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate typeof_addr\n               jmm_heap_read jmm_heap_write P t (the_Addr (stk ! x142)) x141\n               (rev (take x142 stk)) h\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta.\n                            (\\<exists>xcphfrs taa.\n                                ta = extTA2JVM P taa \\<and>\n                                (\\<exists>va h'.\n                                    xcphfrs =\n                                    extRet2JVM x142 h' stk loc C M pc frs\n                                     va \\<and>\n                                    (taa, va, h')\n                                    \\<in> heap_base.red_external_aggr\n     (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n     typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n     jmm_heap_write P t (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n     h)) \\<and>\n                            lock_ok_las (locks s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                            thread_oks (thr s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                            final_thread.cond_action_oks\n                             (final_thread.init_fin_final JVM_final) s t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                            wset_actions_ok (wset s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                            interrupt_actions_ok (interrupts s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "subgoal for F D"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               (hd (tl stk)),\n     WriteMem (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\\<rbrace>;\n     xcphfrs =\n     (None, h'_, (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F)\n      (hd (tl stk));\n     jmm_heap_write h (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\n      h'_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "apply(cases \"hd (tl stk) = (default_val (THE T. heap_base.addr_loc_type typeof_addr P h (the_Addr (hd (tl (tl stk)))) (CField D F) T))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               (hd (tl stk)),\n     WriteMem (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\\<rbrace>;\n     xcphfrs =\n     (None, h'_, (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F)\n      (hd (tl stk));\n     jmm_heap_write h (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\n      h'_;\n     hd (tl stk) =\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n 2. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               (hd (tl stk)),\n     WriteMem (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\\<rbrace>;\n     xcphfrs =\n     (None, h'_, (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F)\n      (hd (tl stk));\n     jmm_heap_write h (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\n      h'_;\n     hd (tl stk) \\<noteq>\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               (hd (tl stk)),\n     WriteMem (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\\<rbrace>;\n     xcphfrs =\n     (None, h'_, (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F)\n      (hd (tl stk));\n     jmm_heap_write h (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\n      h'_;\n     hd (tl stk) =\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "by(auto simp add: JVM_heap_base.exec_instr.simps split_beta final_thread.actions_ok_iff intro!: jmm_heap_read_typed_default_val rev_image_eqI simp del: split_paired_Ex split: if_split_asm del: disjCI intro!: disjI1 exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               (hd (tl stk)),\n     WriteMem (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\\<rbrace>;\n     xcphfrs =\n     (None, h'_, (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F)\n      (hd (tl stk));\n     jmm_heap_write h (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\n      h'_;\n     hd (tl stk) \\<noteq>\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               (hd (tl stk)),\n     WriteMem (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\\<rbrace>;\n     xcphfrs =\n     (None, h'_, (Bool True # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F)\n      (hd (tl stk));\n     jmm_heap_write h (the_Addr (hd (tl (tl stk)))) (CField D F) (hd stk)\n      h'_;\n     hd (tl stk) \\<noteq>\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "by(auto simp add: JVM_heap_base.exec_instr.simps split_beta final_thread.actions_ok_iff intro!: jmm_heap_read_typed_default_val rev_image_eqI simp del: split_paired_Ex split: if_split_asm del: disjCI intro!: disjI2 exI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x111 x112 v''.\n       \\<lbrakk>i = CAS x111 x112; hd (tl (tl stk)) \\<noteq> Null;\n        lock_ok_las (locks s) t (K$ []);\n        final_thread.cond_action_oks (final_thread.init_fin_final JVM_final)\n         s t [];\n        wset s t = None;\n        ta =\n        \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n                  v''\\<rbrace>;\n        xcphfrs =\n        (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n        jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField x112 x111)\n         v'';\n        v'' \\<noteq> hd (tl stk)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta.\n                            (\\<exists>xcphfrs.\n                                ta =\n                                \\<lbrace>ReadMem\n    (the_Addr (hd (tl (tl stk)))) (CField x112 x111) (hd (tl stk)),\n                                WriteMem (the_Addr (hd (tl (tl stk))))\n                                 (CField x112 x111) (hd stk)\\<rbrace> \\<and>\n                                (\\<exists>h'.\n                                    xcphfrs =\n                                    (None, h',\n                                     (Bool True # tl (tl (tl stk)), loc, C,\nM, Suc pc) #\n                                     frs) \\<and>\n                                    heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) (hd (tl stk)) \\<and>\n                                    jmm_heap_write h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) (hd stk) h') \\<or>\n                                (\\<exists>v''.\n                                    ta =\n                                    \\<lbrace>ReadMem\n        (the_Addr (hd (tl (tl stk)))) (CField x112 x111) v''\\<rbrace> \\<and>\n                                    xcphfrs =\n                                    (None, h,\n                                     (Bool False # tl (tl (tl stk)), loc, C,\nM, Suc pc) #\n                                     frs) \\<and>\n                                    heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P h\n                                     (the_Addr (hd (tl (tl stk))))\n                                     (CField x112 x111) v'' \\<and>\n                                    v'' \\<noteq> hd (tl stk))) \\<and>\n                            lock_ok_las (locks s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                            thread_oks (thr s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                            final_thread.cond_action_oks\n                             (final_thread.init_fin_final JVM_final) s t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                            wset_actions_ok (wset s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                            interrupt_actions_ok (interrupts s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n 2. \\<And>x141 x142 a aa ab ac ad b va h'.\n       \\<lbrakk>i = Invoke x141 x142; stk ! x142 \\<noteq> Null;\n        lock_ok_las (locks s) t a; thread_oks (thr s) aa;\n        final_thread.cond_action_oks (final_thread.init_fin_final JVM_final)\n         s t ab;\n        wset_actions_ok (wset s) t ac;\n        interrupt_actions_ok (interrupts s) ad;\n        snd (snd (snd (method P\n                        (class_type_of\n                          (the (typeof_addr h (the_Addr (stk ! x142)))))\n                        x141))) =\n        None;\n        ta =\n        (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac, ad,\n         b);\n        xcphfrs = extRet2JVM x142 h' stk loc C M pc frs va;\n        ((a, aa, ab, ac, ad, b), va, h')\n        \\<in> heap_base.red_external_aggr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate typeof_addr\n               jmm_heap_read jmm_heap_write P t (the_Addr (stk ! x142)) x141\n               (rev (take x142 stk)) h\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta.\n                            (\\<exists>xcphfrs taa.\n                                ta = extTA2JVM P taa \\<and>\n                                (\\<exists>va h'.\n                                    xcphfrs =\n                                    extRet2JVM x142 h' stk loc C M pc frs\n                                     va \\<and>\n                                    (taa, va, h')\n                                    \\<in> heap_base.red_external_aggr\n     (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n     typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n     jmm_heap_write P t (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n     h)) \\<and>\n                            lock_ok_las (locks s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                            thread_oks (thr s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                            final_thread.cond_action_oks\n                             (final_thread.init_fin_final JVM_final) s t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                            wset_actions_ok (wset s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                            interrupt_actions_ok (interrupts s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "subgoal for F D"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               v''_\\<rbrace>;\n     xcphfrs =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F) v''_;\n     v''_ \\<noteq> hd (tl stk)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "apply(cases \"hd (tl stk) = (default_val (THE T. heap_base.addr_loc_type typeof_addr P h (the_Addr (hd (tl (tl stk)))) (CField D F) T))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               v''_\\<rbrace>;\n     xcphfrs =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F) v''_;\n     v''_ \\<noteq> hd (tl stk);\n     hd (tl stk) =\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>\n 2. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               v''_\\<rbrace>;\n     xcphfrs =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F) v''_;\n     v''_ \\<noteq> hd (tl stk);\n     hd (tl stk) \\<noteq>\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               v''_\\<rbrace>;\n     xcphfrs =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F) v''_;\n     v''_ \\<noteq> hd (tl stk);\n     hd (tl stk) =\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "by(auto simp add: JVM_heap_base.exec_instr.simps split_beta final_thread.actions_ok_iff intro!: jmm_heap_read_typed_default_val rev_image_eqI simp del: split_paired_Ex split: if_split_asm del: disjCI intro!: disjI1 exI jmm_heap_write.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               v''_\\<rbrace>;\n     xcphfrs =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F) v''_;\n     v''_ \\<noteq> hd (tl stk);\n     hd (tl stk) \\<noteq>\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = CAS F D; hd (tl (tl stk)) \\<noteq> Null;\n     lock_ok_las (locks s) t (K$ []);\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t [];\n     wset s t = None;\n     ta =\n     \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk)))) (CField D F)\n               v''_\\<rbrace>;\n     xcphfrs =\n     (None, h, (Bool False # tl (tl (tl stk)), loc, C, M, Suc pc) # frs);\n     jmm_heap_read h (the_Addr (hd (tl (tl stk)))) (CField D F) v''_;\n     v''_ \\<noteq> hd (tl stk);\n     hd (tl stk) \\<noteq>\n     default_val\n      (THE T.\n          heap_base.addr_loc_type typeof_addr P h\n           (the_Addr (hd (tl (tl stk)))) (CField D F) T)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs.\n                             ta =\n                             \\<lbrace>ReadMem (the_Addr (hd (tl (tl stk))))\n (CField D F) (hd (tl stk)),\n                             WriteMem (the_Addr (hd (tl (tl stk))))\n                              (CField D F) (hd stk)\\<rbrace> \\<and>\n                             (\\<exists>h'.\n                                 xcphfrs =\n                                 (None, h',\n                                  (Bool True # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd (tl stk)) \\<and>\n                                 jmm_heap_write h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  (hd stk) h') \\<or>\n                             (\\<exists>v''.\n                                 ta =\n                                 \\<lbrace>ReadMem\n     (the_Addr (hd (tl (tl stk)))) (CField D F) v''\\<rbrace> \\<and>\n                                 xcphfrs =\n                                 (None, h,\n                                  (Bool False # tl (tl (tl stk)), loc, C, M,\n                                   Suc pc) #\n                                  frs) \\<and>\n                                 heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P h\n                                  (the_Addr (hd (tl (tl stk)))) (CField D F)\n                                  v'' \\<and>\n                                 v'' \\<noteq> hd (tl stk))) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "by(rule exI conjI disjI2 refl jmm_heap_read_typed_default_val|assumption)+ auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x141 x142 a aa ab ac ad b va h'.\n       \\<lbrakk>i = Invoke x141 x142; stk ! x142 \\<noteq> Null;\n        lock_ok_las (locks s) t a; thread_oks (thr s) aa;\n        final_thread.cond_action_oks (final_thread.init_fin_final JVM_final)\n         s t ab;\n        wset_actions_ok (wset s) t ac;\n        interrupt_actions_ok (interrupts s) ad;\n        snd (snd (snd (method P\n                        (class_type_of\n                          (the (typeof_addr h (the_Addr (stk ! x142)))))\n                        x141))) =\n        None;\n        ta =\n        (a, map (convert_new_thread_action (extNTA2JVM P)) aa, ab, ac, ad,\n         b);\n        xcphfrs = extRet2JVM x142 h' stk loc C M pc frs va;\n        ((a, aa, ab, ac, ad, b), va, h')\n        \\<in> heap_base.red_external_aggr (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate typeof_addr\n               jmm_heap_read jmm_heap_write P t (the_Addr (stk ! x142)) x141\n               (rev (take x142 stk)) h\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta.\n                            (\\<exists>xcphfrs taa.\n                                ta = extTA2JVM P taa \\<and>\n                                (\\<exists>va h'.\n                                    xcphfrs =\n                                    extRet2JVM x142 h' stk loc C M pc frs\n                                     va \\<and>\n                                    (taa, va, h')\n                                    \\<in> heap_base.red_external_aggr\n     (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n     typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n     jmm_heap_write P t (the_Addr (stk ! x142)) x141 (rev (take x142 stk))\n     h)) \\<and>\n                            lock_ok_las (locks s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                            thread_oks (thr s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                            final_thread.cond_action_oks\n                             (final_thread.init_fin_final JVM_final) s t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                            wset_actions_ok (wset s) t\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                            interrupt_actions_ok (interrupts s)\n                             \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = Invoke x141_ x142_; stk ! x142_ \\<noteq> Null;\n     lock_ok_las (locks s) t a_; thread_oks (thr s) aa_;\n     final_thread.cond_action_oks (final_thread.init_fin_final JVM_final) s\n      t ab_;\n     wset_actions_ok (wset s) t ac_;\n     interrupt_actions_ok (interrupts s) ad_;\n     snd (snd (snd (method P\n                     (class_type_of\n                       (the (typeof_addr h (the_Addr (stk ! x142_)))))\n                     x141_))) =\n     None;\n     ta =\n     (a_, map (convert_new_thread_action (extNTA2JVM P)) aa_, ab_, ac_, ad_,\n      b_);\n     xcphfrs = extRet2JVM x142_ h'_ stk loc C M pc frs va_;\n     ((a_, aa_, ab_, ac_, ad_, b_), va_, h'_)\n     \\<in> heap_base.red_external_aggr (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read\n            jmm_heap_write P t (the_Addr (stk ! x142_)) x141_\n            (rev (take x142_ stk)) h\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta.\n                         (\\<exists>xcphfrs taa.\n                             ta = extTA2JVM P taa \\<and>\n                             (\\<exists>va h'.\n                                 xcphfrs =\n                                 extRet2JVM x142_ h' stk loc C M pc frs\n                                  va \\<and>\n                                 (taa, va, h')\n                                 \\<in> heap_base.red_external_aggr\n  (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups empty_heap allocate\n  typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n  jmm_heap_write P t (the_Addr (stk ! x142_)) x141_ (rev (take x142_ stk))\n  h)) \\<and>\n                         lock_ok_las (locks s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>l\\<^esub> \\<and>\n                         thread_oks (thr s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>t\\<^esub> \\<and>\n                         final_thread.cond_action_oks\n                          (final_thread.init_fin_final JVM_final) s t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>c\\<^esub> \\<and>\n                         wset_actions_ok (wset s) t\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>w\\<^esub> \\<and>\n                         interrupt_actions_ok (interrupts s)\n                          \\<lbrace>ta\\<rbrace>\\<^bsub>i\\<^esub>", "by(drule red_external_aggr_heap_read_typedI)(fastforce simp add: final_thread.actions_ok_iff simp del: split_paired_Ex)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jmm'_execI:\n  \"\\<lbrakk> (ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P t xcphfrs;\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcphfrs'. (ta, xcphfrs') \\<in> JVM_heap_base.exec addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P t xcphfrs \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(ta, xcphfrs')\n             \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate typeof_addr\n                    jmm_heap_read jmm_heap_write P t xcphfrs;\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n      ta\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                         (ta, xcphfrs')\n                         \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                (\\<lambda>x. x) spurious_wakeups empty_heap\n                                allocate typeof_addr\n                                (heap_base.heap_read_typed typeof_addr\n                                  jmm_heap_read P)\n                                jmm_heap_write P t xcphfrs \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta", "apply(cases xcphfrs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>(ta, xcphfrs')\n                \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                       spurious_wakeups empty_heap allocate typeof_addr\n                       jmm_heap_read jmm_heap_write P t xcphfrs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        xcphfrs = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            (ta, xcphfrs')\n                            \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t xcphfrs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(cases \"snd (snd xcphfrs)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>(ta, xcphfrs')\n                \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                       spurious_wakeups empty_heap allocate typeof_addr\n                       jmm_heap_read jmm_heap_write P t xcphfrs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        xcphfrs = (a, b, c); snd (snd xcphfrs) = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            (ta, xcphfrs')\n                            \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t xcphfrs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>a b c aa list.\n       \\<lbrakk>(ta, xcphfrs')\n                \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                       spurious_wakeups empty_heap allocate typeof_addr\n                       jmm_heap_read jmm_heap_write P t xcphfrs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        xcphfrs = (a, b, c); snd (snd xcphfrs) = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            (ta, xcphfrs')\n                            \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t xcphfrs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(simp add: JVM_heap_base.exec.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c aa list.\n       \\<lbrakk>(ta, xcphfrs')\n                \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                       spurious_wakeups empty_heap allocate typeof_addr\n                       jmm_heap_read jmm_heap_write P t xcphfrs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        xcphfrs = (a, b, c); snd (snd xcphfrs) = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            (ta, xcphfrs')\n                            \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t xcphfrs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(cases \"fst xcphfrs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c aa list.\n       \\<lbrakk>(ta, xcphfrs')\n                \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                       spurious_wakeups empty_heap allocate typeof_addr\n                       jmm_heap_read jmm_heap_write P t xcphfrs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        xcphfrs = (a, b, c); snd (snd xcphfrs) = aa # list;\n        fst xcphfrs = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            (ta, xcphfrs')\n                            \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t xcphfrs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>a b c aa list ab.\n       \\<lbrakk>(ta, xcphfrs')\n                \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                       spurious_wakeups empty_heap allocate typeof_addr\n                       jmm_heap_read jmm_heap_write P t xcphfrs;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        xcphfrs = (a, b, c); snd (snd xcphfrs) = aa # list;\n        fst xcphfrs = \\<lfloor>ab\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            (ta, xcphfrs')\n                            \\<in> JVM_heap_base.exec (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t xcphfrs \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(fastforce simp add: JVM_heap_base.exec.simps dest!: jmm'_exec_instrI)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jmm'_execdI:\n  \"\\<lbrakk> JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P t (Normal xcphfrs) ta (Normal xcphfrs');\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcphfrs'. JVM_heap_base.exec_1_d addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P t (Normal xcphfrs) ta (Normal xcphfrs') \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read\n              jmm_heap_write P t (Normal xcphfrs) ta (Normal xcphfrs');\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n      ta\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                         JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                          (\\<lambda>x. x) spurious_wakeups empty_heap\n                          allocate typeof_addr\n                          (heap_base.heap_read_typed typeof_addr\n                            jmm_heap_read P)\n                          jmm_heap_write P t (Normal xcphfrs) ta\n                          (Normal xcphfrs') \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta", "apply(erule JVM_heap_base.jvmd_NormalE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h f frs.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        JVM_heap_base.check typeof_addr P xcphfrs;\n        (ta, xcphfrs')\n        \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate typeof_addr\n               jmm_heap_read jmm_heap_write P t xcphfrs;\n        xcphfrs = (xcp, h, f # frs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                             (\\<lambda>x. x) spurious_wakeups empty_heap\n                             allocate typeof_addr\n                             (heap_base.heap_read_typed typeof_addr\n                               jmm_heap_read P)\n                             jmm_heap_write P t (Normal xcphfrs) ta\n                             (Normal xcphfrs') \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(drule (1) jmm'_execI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xcp h f frs.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        JVM_heap_base.check typeof_addr P xcphfrs;\n        xcphfrs = (xcp, h, f # frs);\n        \\<exists>ta xcphfrs'.\n           (ta, xcphfrs')\n           \\<in> JVM_heap_base.exec (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate typeof_addr\n                  (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n                  jmm_heap_write P t xcphfrs \\<and>\n           final_thread.actions_ok (final_thread.init_fin_final JVM_final) s\n            t ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta xcphfrs'.\n                            JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                             (\\<lambda>x. x) spurious_wakeups empty_heap\n                             allocate typeof_addr\n                             (heap_base.heap_read_typed typeof_addr\n                               jmm_heap_read P)\n                             jmm_heap_write P t (Normal xcphfrs) ta\n                             (Normal xcphfrs') \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(force intro: JVM_heap_base.exec_1_d_NormalI simp add: JVM_heap_base.exec_d_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jmm'_mexecdI:\n  \"\\<lbrakk> JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P t xcpfrsh ta xcpfrsh';\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta xcpfrsh'. JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P t xcpfrsh ta xcpfrsh' \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(case xcpfrsh of\n              (x, xa) \\<Rightarrow>\n                (case x of\n                 (xcp, frstls) \\<Rightarrow>\n                   \\<lambda>h ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       spurious_wakeups empty_heap allocate typeof_addr\n                       jmm_heap_read jmm_heap_write P t\n                       (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls')))\n                 xa)\n              ta xcpfrsh';\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n      ta\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta xcpfrsh'.\n                         (case xcpfrsh of\n                          (x, xa) \\<Rightarrow>\n                            (case x of\n                             (xcp, frstls) \\<Rightarrow>\n                               \\<lambda>h ta ((xcp', frstls'), h').\n                                  JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t\n                                   (Normal (xcp, h, frstls)) ta\n                                   (Normal (xcp', h', frstls')))\n                             xa)\n                          ta xcpfrsh' \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta", "by(simp add: split_beta)(drule (1) jmm'_execdI, auto 4 10)"], ["", "lemma if_mexecd_heap_read_not_stuck:\n  \"\\<lbrakk> multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P) t xh ta x'h';\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta \\<rbrakk>\n  \\<Longrightarrow> \\<exists>ta x'h'. multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P) t xh ta x'h' \\<and> final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>multithreaded_base.init_fin JVM_final\n              (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                  JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                   spurious_wakeups empty_heap allocate typeof_addr\n                   jmm_heap_read jmm_heap_write P t\n                   (Normal (xcp, h, frstls)) ta\n                   (Normal (xcp', h', frstls')))\n              t xh ta x'h';\n     final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n      ta\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta x'h'.\n                         multithreaded_base.init_fin JVM_final\n                          (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                              frstls'), h').\n                              JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                               (\\<lambda>x. x) spurious_wakeups empty_heap\n                               allocate typeof_addr\n                               (heap_base.heap_read_typed typeof_addr\n                                 jmm_heap_read P)\n                               jmm_heap_write P t (Normal (xcp, h, frstls))\n                               ta (Normal (xcp', h', frstls')))\n                          t xh ta x'h' \\<and>\n                         final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t ta", "apply(erule multithreaded_base.init_fin.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>taa x m taaa x' m'.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = taa; xh = ((Running, x), m);\n        ta = convert_TA_initial (convert_obs_initial taaa);\n        x'h' = ((Running, x'), m');\n        (case (x, m) of\n         (x, xa) \\<Rightarrow>\n           (case x of\n            (xcp, frstls) \\<Rightarrow>\n              \\<lambda>h ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate typeof_addr\n                  jmm_heap_read jmm_heap_write P taa\n                  (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n            xa)\n         taaa (x', m')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply hypsubst"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>taa x m taaa x' m'.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial (convert_obs_initial taaa));\n        xh = ((Running, x), m);\n        ta = convert_TA_initial (convert_obs_initial taaa);\n        x'h' = ((Running, x'), m');\n        (case (x, m) of\n         (x, xa) \\<Rightarrow>\n           (case x of\n            (xcp, frstls) \\<Rightarrow>\n              \\<lambda>h ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate typeof_addr\n                  jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls))\n                  ta (Normal (xcp', h', frstls')))\n            xa)\n         taaa (x', m')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t ((Running, x), m) ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(drule jmm'_mexecdI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>tb x m taa x' m'.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial (convert_obs_initial taa));\n        xh = ((Running, x), m);\n        ta = convert_TA_initial (convert_obs_initial taa);\n        x'h' = ((Running, x'), m')\\<rbrakk>\n       \\<Longrightarrow> final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final)\n                          (?s5 tb x m taa x' m') t taa\n 2. \\<And>taa x m taaa x' m'.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial (convert_obs_initial taaa));\n        xh = ((Running, x), m);\n        ta = convert_TA_initial (convert_obs_initial taaa);\n        x'h' = ((Running, x'), m');\n        \\<exists>ta xcpfrsh'.\n           (case (x, m) of\n            (x, xa) \\<Rightarrow>\n              (case x of\n               (xcp, frstls) \\<Rightarrow>\n                 \\<lambda>h ta ((xcp', frstls'), h').\n                    JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                     spurious_wakeups empty_heap allocate typeof_addr\n                     (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n                     jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                     (Normal (xcp', h', frstls')))\n               xa)\n            ta xcpfrsh' \\<and>\n           final_thread.actions_ok (final_thread.init_fin_final JVM_final)\n            (?s5 taa x m taaa x' m') t ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t ((Running, x), m) ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 4. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(simp add: final_thread.actions_ok_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>taa x m taaa x' m'.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial (convert_obs_initial taaa));\n        xh = ((Running, x), m);\n        ta = convert_TA_initial (convert_obs_initial taaa);\n        x'h' = ((Running, x'), m');\n        \\<exists>ta xcpfrsh'.\n           (case (x, m) of\n            (x, xa) \\<Rightarrow>\n              (case x of\n               (xcp, frstls) \\<Rightarrow>\n                 \\<lambda>h ta ((xcp', frstls'), h').\n                    JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                     spurious_wakeups empty_heap allocate typeof_addr\n                     (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n                     jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                     (Normal (xcp', h', frstls')))\n               xa)\n            ta xcpfrsh' \\<and>\n           final_thread.actions_ok (final_thread.init_fin_final JVM_final) s\n            t ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t ((Running, x), m) ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t ((Running, a, b), m) ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(subst (2) split_paired_Ex)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta aa ba.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t ((Running, a, b), m) ta (aa, ba) \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(subst (2) split_paired_Ex)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta aa ba bb.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t ((Running, a, b), m) ta ((aa, ba), bb) \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(subst (2) split_paired_Ex)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta aa ab ba bb.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t ((Running, a, b), m) ta\n                             ((aa, ab, ba), bb) \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(rule exI conjI)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> multithreaded_base.init_fin JVM_final\n                          (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                              frstls'), h').\n                              JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                               (\\<lambda>x. x) spurious_wakeups empty_heap\n                               allocate typeof_addr\n                               (heap_base.heap_read_typed typeof_addr\n                                 jmm_heap_read P)\n                               jmm_heap_write P t (Normal (xcp, h, frstls))\n                               ta (Normal (xcp', h', frstls')))\n                          t ((Running, a, b), m)\n                          (?ta22 tb a b m aa ab ac ad ae ba af bb m' ag ah\n                            ai aj ak bc al bd be)\n                          ((?a24 tb a b m aa ab ac ad ae ba af bb m' ag ah\n                             ai aj ak bc al bd be,\n                            ?a26 tb a b m aa ab ac ad ae ba af bb m' ag ah\n                             ai aj ak bc al bd be,\n                            ?b28 tb a b m aa ab ac ad ae ba af bb m' ag ah\n                             ai aj ak bc al bd be),\n                           ?b30 tb a b m aa ab ac ad ae ba af bb m' ag ah ai\n                            aj ak bc al bd be)\n 2. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t\n                          (?ta22 tb a b m aa ab ac ad ae ba af bb m' ag ah\n                            ai aj ak bc al bd be)\n 3. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 4. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(rule multithreaded_base.init_fin.intros)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>taa a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> (case ((a, b), m) of\n                          (x, xa) \\<Rightarrow>\n                            (case x of\n                             (xcp, frstls) \\<Rightarrow>\n                               \\<lambda>h ta ((xcp', frstls'), h').\n                                  JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate typeof_addr\n                                   (heap_base.heap_read_typed typeof_addr\n                                     jmm_heap_read P)\n                                   jmm_heap_write P t\n                                   (Normal (xcp, h, frstls)) ta\n                                   (Normal (xcp', h', frstls')))\n                             xa)\n                          (?ta35 taa a b m aa ab ac ad ae ba af bb m' ag ah\n                            ai aj ak bc al bd be)\n                          ((?a26 taa a b m aa ab ac ad ae ba af bb m' ag ah\n                             ai aj ak bc al bd be,\n                            ?b28 taa a b m aa ab ac ad ae ba af bb m' ag ah\n                             ai aj ak bc al bd be),\n                           ?b30 taa a b m aa ab ac ad ae ba af bb m' ag ah\n                            ai aj ak bc al bd be)\n 2. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t\n                          (convert_TA_initial\n                            (convert_obs_initial\n                              (?ta35 tb a b m aa ab ac ad ae ba af bb m' ag\n                                ah ai aj ak bc al bd be)))\n 3. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 4. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>tb a b m aa ab ac ad ae ba af bb m' ag ah ai aj ak bc al bd be.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t\n                 (convert_TA_initial\n                   (convert_obs_initial (aa, ab, ac, ad, ae, ba)));\n        xh = ((Running, a, b), m);\n        ta =\n        convert_TA_initial (convert_obs_initial (aa, ab, ac, ad, ae, ba));\n        x'h' = ((Running, af, bb), m');\n        JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n         spurious_wakeups empty_heap allocate typeof_addr\n         (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n         jmm_heap_write P t (Normal (a, m, b)) (ag, ah, ai, aj, ak, bc)\n         (Normal (al, be, bd));\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ag, ah, ai, aj, ak, bc)\\<rbrakk>\n       \\<Longrightarrow> final_thread.actions_ok\n                          (final_thread.init_fin_final JVM_final) s t\n                          (convert_TA_initial\n                            (convert_obs_initial (ag, ah, ai, aj, ak, bc)))\n 2. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 3. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(simp add: final_thread.actions_ok_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>tb x m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((PreStart, x), m);\n        ta = \\<lbrace>InitialThreadAction\\<rbrace>;\n        x'h' = ((Running, x), m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta\n 2. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(blast intro: multithreaded_base.init_fin.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x tb m.\n       \\<lbrakk>final_thread.actions_ok\n                 (final_thread.init_fin_final JVM_final) s t ta;\n        t = tb; xh = ((Running, x), m);\n        ta = \\<lbrace>ThreadFinishAction\\<rbrace>;\n        x'h' = ((Finished, x), m); JVM_final x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta x'h'.\n                            multithreaded_base.init_fin JVM_final\n                             (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                 frstls'), h').\n                                 JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                  (\\<lambda>x. x) spurious_wakeups\n                                  empty_heap allocate typeof_addr\n                                  (heap_base.heap_read_typed typeof_addr\n                                    jmm_heap_read P)\n                                  jmm_heap_write P t\n                                  (Normal (xcp, h, frstls)) ta\n                                  (Normal (xcp', h', frstls')))\n                             t xh ta x'h' \\<and>\n                            final_thread.actions_ok\n                             (final_thread.init_fin_final JVM_final) s t ta", "apply(blast intro: multithreaded_base.init_fin.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma if_mExecd_heap_read_not_stuck:\n  \"multithreaded_base.redT (final_thread.init_fin_final JVM_final) (multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read jmm_heap_write P)) convert_RA' s tta s'\n  \\<Longrightarrow> \\<exists>tta s'. multithreaded_base.redT (final_thread.init_fin_final JVM_final) (multithreaded_base.init_fin JVM_final (JVM_heap_base.mexecd addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate typeof_addr (heap_base.heap_read_typed typeof_addr jmm_heap_read P) jmm_heap_write P)) convert_RA' s tta s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read\n            jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     convert_RA' s tta s' \\<Longrightarrow>\n    \\<exists>tta s'.\n       multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n        (multithreaded_base.init_fin JVM_final\n          (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n              JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n               spurious_wakeups empty_heap allocate typeof_addr\n               (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n               jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n               (Normal (xcp', h', frstls'))))\n        convert_RA' s tta s'", "apply(erule multithreaded_base.redT.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a.\n       \\<lbrakk>s = sa; tta = (t, ta); s' = s'a;\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr sa) ta (x', m');\n        thr sa t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) sa t\n         ta;\n        redT_upd sa t ta x' m' s'a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply hypsubst"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a.\n       \\<lbrakk>tta = (t, ta);\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) ta (x', m');\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "thm if_mexecd_heap_read_not_stuck"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a.\n       \\<lbrakk>tta = (t, ta);\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr jmm_heap_read\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) ta (x', m');\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(drule (1) if_mexecd_heap_read_not_stuck)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a.\n       \\<lbrakk>tta = (t, ta);\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s';\n        \\<exists>ta x'h'.\n           multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 spurious_wakeups empty_heap allocate typeof_addr\n                 (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n                 jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                 (Normal (xcp', h', frstls')))\n            t (x, shr s) ta x'h' \\<and>\n           final_thread.actions_ok (final_thread.init_fin_final JVM_final) s\n            t ta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(erule exE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a taa x'h'.\n       \\<lbrakk>tta = (t, ta);\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s';\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) taa x'h' \\<and>\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         taa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(rename_tac ta' x'h')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a ta' x'h'.\n       \\<lbrakk>tta = (t, ta);\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s';\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) ta' x'h' \\<and>\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(insert redT_updWs_total)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a ta' x'h'.\n       \\<lbrakk>tta = (t, ta);\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s';\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) ta' x'h' \\<and>\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta';\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(erule_tac x=\"t\" in meta_allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a ta' x'h'.\n       \\<lbrakk>tta = (t, ta);\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s';\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) ta' x'h' \\<and>\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta';\n        \\<And>ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(erule_tac x=\"wset s\" in meta_allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a ta' x'h'.\n       \\<lbrakk>tta = (t, ta);\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s';\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) ta' x'h' \\<and>\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta';\n        \\<And>was. \\<exists>ws'. redT_updWs t (wset s) was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(erule_tac x=\"\\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\" in meta_allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x sa ta x' m' s'a ta' x'h'.\n       \\<lbrakk>tta = (t, ta);\n        thr s t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta;\n        redT_upd s t ta x' m' s';\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t (x, shr s) ta' x'h' \\<and>\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         ta';\n        \\<exists>ws'.\n           redT_updWs t (wset s) \\<lbrace>ta'\\<rbrace>\\<^bsub>w\\<^esub>\n            ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t a aa b ab ac ad ae af ba ag ah bb m' ai aj ak al am bc an ao bd\n       be ws' x.\n       \\<lbrakk>tta = (t, ab, ac, ad, ae, af, ba);\n        thr s t = \\<lfloor>((a, aa, b), no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ab, ac, ad, ae, af, ba);\n        redT_updWs t (wset s) al x;\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t ((a, aa, b), shr s) (ai, aj, ak, al, am, bc) ((an, ao, bd), be);\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ai, aj, ak, al, am, bc);\n        s' =\n        (redT_updLs (locks s) t ab,\n         (redT_updTs (thr s) ac(t \\<mapsto>\n          ((ag, ah, bb), redT_updLns (locks s) t no_wait_locks ab)), m'),\n         ws', redT_updIs (interrupts s) af);\n        redT_updWs t (wset s) ae ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a aa ab ac ad ae b af ag ba ah bb.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s (a, aa, ab, ac, ad, ae, b)\n                             (af, (ag, ba), ah, bb)\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(rule exI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t a aa b ab ac ad ae af ba ag ah bb m' ai aj ak al am bc an ao bd\n       be ws' x.\n       \\<lbrakk>tta = (t, ab, ac, ad, ae, af, ba);\n        thr s t = \\<lfloor>((a, aa, b), no_wait_locks)\\<rfloor>;\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ab, ac, ad, ae, af, ba);\n        redT_updWs t (wset s) al x;\n        multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              spurious_wakeups empty_heap allocate typeof_addr\n              (heap_base.heap_read_typed typeof_addr jmm_heap_read P)\n              jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n              (Normal (xcp', h', frstls')))\n         t ((a, aa, b), shr s) (ai, aj, ak, al, am, bc) ((an, ao, bd), be);\n        final_thread.actions_ok (final_thread.init_fin_final JVM_final) s t\n         (ai, aj, ak, al, am, bc);\n        s' =\n        (redT_updLs (locks s) t ab,\n         (redT_updTs (thr s) ac(t \\<mapsto>\n          ((ag, ah, bb), redT_updLns (locks s) t no_wait_locks ab)), m'),\n         ws', redT_updIs (interrupts s) af);\n        redT_updWs t (wset s) ae ws'\\<rbrakk>\n       \\<Longrightarrow> multithreaded_base.redT\n                          (final_thread.init_fin_final JVM_final)\n                          (multithreaded_base.init_fin JVM_final\n                            (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                frstls'), h').\n                                JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate typeof_addr\n                                 (heap_base.heap_read_typed typeof_addr\n                                   jmm_heap_read P)\n                                 jmm_heap_write P t\n                                 (Normal (xcp, h, frstls)) ta\n                                 (Normal (xcp', h', frstls'))))\n                          convert_RA' s\n                          (?a25 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           ?a27 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           ?a29 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           ?a31 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           ?a33 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           ?a35 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           ?b37 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x)\n                          (?a39 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           (?a41 t a aa b ab ac ad ae af ba ag ah bb m' ai\n                             aj ak al am bc an ao bd be ws' x,\n                            ?b43 t a aa b ab ac ad ae af ba ag ah bb m' ai\n                             aj ak al am bc an ao bd be ws' x),\n                           ?a45 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x,\n                           ?b47 t a aa b ab ac ad ae af ba ag ah bb m' ai aj\n                            ak al am bc an ao bd be ws' x)\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(auto intro!: multithreaded_base.redT.intros)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa t x n s'a ln.\n       \\<lbrakk>s = sa; tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        s' = s'a; thr sa t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset sa t); may_acquire_all (locks sa) t ln;\n        0 < ln $ n;\n        s'a =\n        (acquire_all (locks sa) t ln,\n         (thr sa(t \\<mapsto> (x, no_wait_locks)), shr sa), wset sa,\n         interrupts sa);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply hypsubst"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa t x n s'a ln.\n       \\<lbrakk>tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s'.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (multithreaded_base.init_fin JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate typeof_addr\n                                    (heap_base.heap_read_typed typeof_addr\njmm_heap_read P)\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls'))))\n                             convert_RA' s tta s'", "apply(rule exI conjI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa t x n s'a ln.\n       \\<lbrakk>tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> multithreaded_base.redT\n                          (final_thread.init_fin_final JVM_final)\n                          (multithreaded_base.init_fin JVM_final\n                            (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                frstls'), h').\n                                JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                 (\\<lambda>x. x) spurious_wakeups empty_heap\n                                 allocate typeof_addr\n                                 (heap_base.heap_read_typed typeof_addr\n                                   jmm_heap_read P)\n                                 jmm_heap_write P t\n                                 (Normal (xcp, h, frstls)) ta\n                                 (Normal (xcp', h', frstls'))))\n                          convert_RA' s (?tta68 sa t x n s'a ln)\n                          (?s'70 sa t x n s'a ln)", "apply(rule multithreaded_base.redT.redT_acquire)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>sa t x n s'a ln.\n       \\<lbrakk>tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> thr s (?t72 sa t x n s'a ln) =\n                         \\<lfloor>(?x72 sa t x n s'a ln,\n                                   ?ln72 sa t x n s'a ln)\\<rfloor>\n 2. \\<And>sa t x n s'a ln.\n       \\<lbrakk>tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> \\<not> waiting (wset s (?t72 sa t x n s'a ln))\n 3. \\<And>sa t x n s'a ln.\n       \\<lbrakk>tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> may_acquire_all (locks s) (?t72 sa t x n s'a ln)\n                          (?ln72 sa t x n s'a ln)\n 4. \\<And>sa t x n s'a ln.\n       \\<lbrakk>tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> 0 < ?ln72 sa t x n s'a ln $ (?n72 sa t x n s'a ln)\n 5. \\<And>sa t x n s'a ln.\n       \\<lbrakk>tta = (t, K$ [], [], [], [], [], convert_RA' ln);\n        thr s t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s t);\n        may_acquire_all (locks s) t ln; 0 < ln $ n;\n        s' =\n        (acquire_all (locks s) t ln,\n         (thr s(t \\<mapsto> (x, no_wait_locks)), shr s), wset s,\n         interrupts s);\n        \\<And>t ws was. \\<exists>ws'. redT_updWs t ws was ws'\\<rbrakk>\n       \\<Longrightarrow> ?s'70 sa t x n s'a ln =\n                         (acquire_all (locks s) (?t72 sa t x n s'a ln)\n                           (?ln72 sa t x n s'a ln),\n                          (thr s(?t72 sa t x n s'a ln \\<mapsto>\n                           (?x72 sa t x n s'a ln, no_wait_locks)), shr s),\n                          wset s, interrupts s)", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma JVM_legal_typesafe1:\n  assumes wfP: \"wf_jvm_prog P\"\n  and ok: \"jmm_wf_start_state P C M vs\"\n  and legal: \"legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E> = \"jmm_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E>' = \"jmm'_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from legal"], ["proof (chain)\npicking this:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)", "obtain J \n    where justified: \"P \\<turnstile> (E, ws) justified_by J\"\n    and range: \"range (justifying_exec \\<circ> J) \\<subseteq> ?\\<E>\"\n    and E: \"E \\<in> ?\\<E>\" and wf: \"P \\<turnstile> (E, ws) \\<surd>\""], ["proof (prove)\nusing this:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>P \\<turnstile> (E, ws) justified_by J;\n         range (justifying_exec \\<circ> J)\n         \\<subseteq> lappend\n                      (llist_of\n                        (lift_start_obs jmm'.h.start_tid\n                          jmm'.h.start_heap_obs)) `\n                     multithreaded_base.\\<E>\n                      (final_thread.init_fin_final JVM_final)\n                      (multithreaded_base.init_fin JVM_final\n                        (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                            h').\n                            JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                             (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                             jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                             jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                             (Normal (xcp', h', frstls'))))\n                      (map NormalAction \\<circ> convert_RA)\n                      (init_fin_lift_state status\n                        (jmm'.h.start_state JVM_local_start P C M vs));\n         E \\<in> lappend\n                  (llist_of\n                    (lift_start_obs jmm'.h.start_tid\n                      jmm'.h.start_heap_obs)) `\n                 multithreaded_base.\\<E>\n                  (final_thread.init_fin_final JVM_final)\n                  (multithreaded_base.init_fin JVM_final\n                    (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                        JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                         (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                         jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                         jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                         (Normal (xcp', h', frstls'))))\n                  (map NormalAction \\<circ> convert_RA)\n                  (init_fin_lift_state status\n                    (jmm'.h.start_state JVM_local_start P C M vs));\n         P \\<turnstile> (E, ws) \\<surd>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?J = \"J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1), justifying_ws = justifying_ws (J 1), action_translation = id\\<rparr>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from wfP"], ["proof (chain)\npicking this:\n  wf_jvm_prog P", "obtain \\<Phi> where \\<Phi>: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog P\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>.\n        wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wf_jvm_prog_def)"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "hence wf_sys: \"wf_syscls P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. wf_syscls P", "by(auto dest: wt_jvm_progD intro: wf_prog_wf_syscls)"], ["proof (state)\nthis:\n  wf_syscls P\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J", "have \"P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>", "by(simp add: justification_well_formed_def)"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "with justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>", "have \"P \\<turnstile> (E, ws) justified_by ?J\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) justified_by J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>)", "by(rule drop_0th_justifying_exec)"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "moreover"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "have \"range (justifying_exec \\<circ> ?J) \\<subseteq> ?\\<E>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range\n     (justifying_exec \\<circ> J\n      (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate (jmm_typeof_addr P)\n                        (jmm_heap_read_typed P) jmm_heap_write P t\n                        (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "fix \\<xi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "assume \"\\<xi> \\<in> range (justifying_exec \\<circ> ?J)\""], ["proof (state)\nthis:\n  \\<xi>\n  \\<in> range\n         (justifying_exec \\<circ> J\n          (0 := \\<lparr>committed = {},\n                   justifying_exec = justifying_exec (J 1),\n                   justifying_ws = justifying_ws (J 1),\n                   action_translation = id\\<rparr>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "then"], ["proof (chain)\npicking this:\n  \\<xi>\n  \\<in> range\n         (justifying_exec \\<circ> J\n          (0 := \\<lparr>committed = {},\n                   justifying_exec = justifying_exec (J 1),\n                   justifying_ws = justifying_ws (J 1),\n                   action_translation = id\\<rparr>))", "obtain n where \"\\<xi> = justifying_exec (?J n)\""], ["proof (prove)\nusing this:\n  \\<xi>\n  \\<in> range\n         (justifying_exec \\<circ> J\n          (0 := \\<lparr>committed = {},\n                   justifying_exec = justifying_exec (J 1),\n                   justifying_ws = justifying_ws (J 1),\n                   action_translation = id\\<rparr>))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<xi> =\n        justifying_exec\n         ((J(0 := \\<lparr>committed = {},\n                     justifying_exec = justifying_exec (J 1),\n                     justifying_ws = justifying_ws (J 1),\n                     action_translation = id\\<rparr>))\n           n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<xi> =\n  justifying_exec\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n     n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "then"], ["proof (chain)\npicking this:\n  \\<xi> =\n  justifying_exec\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n     n)", "obtain n where \\<xi>: \"\\<xi> = justifying_exec (J n)\" and n: \"n > 0\""], ["proof (prove)\nusing this:\n  \\<xi> =\n  justifying_exec\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n     n)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>\\<xi> = justifying_exec (J n); 0 < n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto split: if_split_asm)"], ["proof (state)\nthis:\n  \\<xi> = justifying_exec (J n)\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "from range \\<xi>"], ["proof (chain)\npicking this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  \\<xi> = justifying_exec (J n)", "have \"\\<xi> \\<in> ?\\<E>\""], ["proof (prove)\nusing this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  \\<xi> = justifying_exec (J n)\n\ngoal (1 subgoal):\n 1. \\<xi>\n    \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "by auto"], ["proof (state)\nthis:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "thus \"\\<xi> \\<in> ?\\<E>'\""], ["proof (prove)\nusing this:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. \\<xi>\n    \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "unfolding jmm_typeof_addr'_conv_jmm_type_addr[symmetric, abs_def]"], ["proof (prove)\nusing this:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read\n                jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. \\<xi>\n    \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (\\<lambda>h. jmm_typeof_addr' P)\n                  (heap_base.heap_read_typed\n                    (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read P)\n                  jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "proof(rule JVMd_\\<E>_heap_read_typedI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "fix ad al v T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "assume read: \"NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>\"\n        and adal: \"P \\<turnstile>jmm ad@al : T\""], ["proof (state)\nthis:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "from read"], ["proof (chain)\npicking this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>", "obtain a where a: \"enat a < llength \\<xi>\" \"action_obs \\<xi> a = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength \\<xi>;\n         action_obs \\<xi> a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lset_conv_lnth"], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v)\n  \\<in> snd ` {lnth \\<xi> n |n. enat n < llength \\<xi>}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength \\<xi>;\n         action_obs \\<xi> a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: action_obs_def)"], ["proof (state)\nthis:\n  enat a < llength \\<xi>\n  action_obs \\<xi> a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "have \"ts_ok (\\<lambda>t (xcp, frs) h. JVM_heap_conf_base.correct_state addr2thread_id jmm_empty jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t (xcp, h, frs)) (thr (jmm_JVM_start_state P C M vs)) jmm.start_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_ok\n     (\\<lambda>t (xcp, frs) h.\n         JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n          jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n          (xcp, h, frs))\n     (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap", "using JVM_heap_conf.correct_jvm_state_initial[OF jmm_JVM_heap_conf \\<Phi> ok]"], ["proof (prove)\nusing this:\n  jmm'.h.start_state JVM_local_start P C M vs\n  \\<in> JVM_heap_conf_base.correct_jvm_state (\\<lambda>x. x) jmm_empty\n         jmm_allocate (jmm_typeof_addr P) jmm_hconf P \\<Phi>\n\ngoal (1 subgoal):\n 1. ts_ok\n     (\\<lambda>t (xcp, frs) h.\n         JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n          jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n          (xcp, h, frs))\n     (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap", "by(simp add: JVM_heap_conf_base.correct_jvm_state_def jmm_typeof_addr'_conv_jmm_typeof_addr heap_base.start_state_def split_beta)"], ["proof (state)\nthis:\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "with JVM_allocated_heap_conf'.mexecd_known_addrs_typing'[OF jmm_JVMd_allocated_heap_conf' \\<Phi> jmm_start_heap_ok]"], ["proof (chain)\npicking this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap", "have \"\\<exists>T. P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "using wf_sys is_justified_by_imp_is_weakly_justified_by[OF justified wf] range n a"], ["proof (prove)\nusing this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n  wf_syscls P\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  0 < n\n  enat a < llength \\<xi>\n  action_obs \\<xi> a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "unfolding jmm_typeof_addr'_conv_jmm_type_addr[symmetric, abs_def] \\<xi>"], ["proof (prove)\nusing this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n  wf_syscls P\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  0 < n\n  enat a < llength (justifying_exec (J n))\n  action_obs (justifying_exec (J n)) a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "by(rule known_addrs_typing'.read_value_typeable_justifying)"], ["proof (state)\nthis:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "thus \"P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "using adal"], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "by(auto dest: jmm.addr_loc_type_fun[unfolded jmm_typeof_addr_conv_jmm_typeof_addr', unfolded heap_base'.addr_loc_type_conv_addr_loc_type])"], ["proof (state)\nthis:\n  P \\<turnstile>jmm v :\\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P\n                t (Normal (xcp, h, frstls)) ta\n                (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "moreover"], ["proof (state)\nthis:\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from E"], ["proof (chain)\npicking this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "have \"E \\<in> ?\\<E>'\""], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                    jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "unfolding jmm_typeof_addr'_conv_jmm_type_addr[symmetric, abs_def]"], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read\n                  jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (\\<lambda>h. jmm_typeof_addr' P)\n                    (heap_base.heap_read_typed\n                      (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read P)\n                    jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "proof(rule JVMd_\\<E>_heap_read_typedI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "fix ad al v T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "assume read: \"NormalAction (ReadMem ad al v) \\<in> snd ` lset E\"\n      and adal: \"P \\<turnstile>jmm ad@al : T\""], ["proof (state)\nthis:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset E\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "from read"], ["proof (chain)\npicking this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset E", "obtain a where a: \"enat a < llength E\" \"action_obs E a = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset E\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lset_conv_lnth"], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v)\n  \\<in> snd ` {lnth E n |n. enat n < llength E}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: action_obs_def)"], ["proof (state)\nthis:\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "with jmm_JVMd_allocated_heap_conf' \\<Phi> ok legal_imp_weakly_legal_execution[OF legal]"], ["proof (chain)\npicking this:\n  JVM_allocated_heap_conf' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n   jmm_allocate (jmm_typeof_addr' ?P) jmm_heap_write jmm_hconf jmm_allocated\n   ?P\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  jmm_wf_start_state P C M vs\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)", "have \"\\<exists>T. P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  JVM_allocated_heap_conf' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n   jmm_allocate (jmm_typeof_addr' ?P) jmm_heap_write jmm_hconf jmm_allocated\n   ?P\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  jmm_wf_start_state P C M vs\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "unfolding jmm_typeof_addr'_conv_jmm_typeof_addr[symmetric, abs_def]"], ["proof (prove)\nusing this:\n  JVM_allocated_heap_conf' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n   jmm_allocate (jmm_typeof_addr' ?P) jmm_heap_write jmm_hconf jmm_allocated\n   ?P\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  heap_base.wf_start_state jmm_empty jmm_allocate\n   (\\<lambda>_. jmm_typeof_addr' P) P C M vs\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (\\<lambda>_. jmm_typeof_addr' P) jmm_heap_read jmm_heap_write P\n            t (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "by(rule JVM_allocated_heap_conf'.JVM_weakly_legal_read_value_typeable)"], ["proof (state)\nthis:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "thus \"P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "using adal"], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "by(auto dest: jmm.addr_loc_type_fun[unfolded jmm_typeof_addr_conv_jmm_typeof_addr', unfolded heap_base'.addr_loc_type_conv_addr_loc_type])"], ["proof (state)\nthis:\n  P \\<turnstile>jmm v :\\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "ultimately"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "using wf"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "unfolding gen_legal_execution.simps"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                    jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs)) \\<and>\n    P \\<turnstile> (E, ws) \\<surd> \\<and>\n    (\\<exists>J.\n        P \\<turnstile> (E, ws) justified_by J \\<and>\n        range (justifying_exec \\<circ> J)\n        \\<subseteq> lappend\n                     (llist_of\n                       (lift_start_obs jmm'.h.start_tid\n                         jmm'.h.start_heap_obs)) `\n                    multithreaded_base.\\<E>\n                     (final_thread.init_fin_final JVM_final)\n                     (multithreaded_base.init_fin JVM_final\n                       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                           h').\n                           JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                            (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                            jmm_allocate (jmm_typeof_addr P)\n                            (jmm_heap_read_typed P) jmm_heap_write P t\n                            (Normal (xcp, h, frstls)) ta\n                            (Normal (xcp', h', frstls'))))\n                     (map NormalAction \\<circ> convert_RA)\n                     (init_fin_lift_state status\n                       (jmm'.h.start_state JVM_local_start P C M vs)))", "by blast"], ["proof (state)\nthis:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            (jmm_heap_read_typed P) jmm_heap_write P t\n            (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma JVM_weakly_legal_typesafe1:\n  assumes wfP: \"wf_jvm_prog P\"\n  and ok: \"jmm_wf_start_state P C M vs\"\n  and legal: \"weakly_legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"weakly_legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E> = \"jmm_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E>' = \"jmm'_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from legal"], ["proof (chain)\npicking this:\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)", "obtain J \n    where justified: \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n    and range: \"range (justifying_exec \\<circ> J) \\<subseteq> ?\\<E>\"\n    and E: \"E \\<in> ?\\<E>\" and wf: \"P \\<turnstile> (E, ws) \\<surd>\""], ["proof (prove)\nusing this:\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>P \\<turnstile> (E, ws) weakly_justified_by J;\n         range (justifying_exec \\<circ> J)\n         \\<subseteq> lappend\n                      (llist_of\n                        (lift_start_obs jmm'.h.start_tid\n                          jmm'.h.start_heap_obs)) `\n                     multithreaded_base.\\<E>\n                      (final_thread.init_fin_final JVM_final)\n                      (multithreaded_base.init_fin JVM_final\n                        (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                            h').\n                            JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                             (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                             jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                             jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                             (Normal (xcp', h', frstls'))))\n                      (map NormalAction \\<circ> convert_RA)\n                      (init_fin_lift_state status\n                        (jmm'.h.start_state JVM_local_start P C M vs));\n         E \\<in> lappend\n                  (llist_of\n                    (lift_start_obs jmm'.h.start_tid\n                      jmm'.h.start_heap_obs)) `\n                 multithreaded_base.\\<E>\n                  (final_thread.init_fin_final JVM_final)\n                  (multithreaded_base.init_fin JVM_final\n                    (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                        JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                         (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                         jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                         jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                         (Normal (xcp', h', frstls'))))\n                  (map NormalAction \\<circ> convert_RA)\n                  (init_fin_lift_state status\n                    (jmm'.h.start_state JVM_local_start P C M vs));\n         P \\<turnstile> (E, ws) \\<surd>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?J = \"J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1), justifying_ws = justifying_ws (J 1), action_translation = id\\<rparr>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from wfP"], ["proof (chain)\npicking this:\n  wf_jvm_prog P", "obtain \\<Phi> where \\<Phi>: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog P\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>.\n        wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wf_jvm_prog_def)"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "hence wf_sys: \"wf_syscls P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. wf_syscls P", "by(auto dest: wt_jvm_progD intro: wf_prog_wf_syscls)"], ["proof (state)\nthis:\n  wf_syscls P\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J", "have \"P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>", "by(simp add: justification_well_formed_def)"], ["proof (state)\nthis:\n  P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "with justified"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>", "have \"P \\<turnstile> (E, ws) weakly_justified_by ?J\""], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (justifying_exec (J 1), justifying_ws (J 1)) \\<surd>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> (E, ws) weakly_justified_by J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>)", "by(rule drop_0th_weakly_justifying_exec)"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "moreover"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "have \"range (justifying_exec \\<circ> ?J) \\<subseteq> ?\\<E>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range\n     (justifying_exec \\<circ> J\n      (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate (jmm_typeof_addr P)\n                        (jmm_heap_read_typed P) jmm_heap_write P t\n                        (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "fix \\<xi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "assume \"\\<xi> \\<in> range (justifying_exec \\<circ> ?J)\""], ["proof (state)\nthis:\n  \\<xi>\n  \\<in> range\n         (justifying_exec \\<circ> J\n          (0 := \\<lparr>committed = {},\n                   justifying_exec = justifying_exec (J 1),\n                   justifying_ws = justifying_ws (J 1),\n                   action_translation = id\\<rparr>))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "then"], ["proof (chain)\npicking this:\n  \\<xi>\n  \\<in> range\n         (justifying_exec \\<circ> J\n          (0 := \\<lparr>committed = {},\n                   justifying_exec = justifying_exec (J 1),\n                   justifying_ws = justifying_ws (J 1),\n                   action_translation = id\\<rparr>))", "obtain n where \"\\<xi> = justifying_exec (?J n)\""], ["proof (prove)\nusing this:\n  \\<xi>\n  \\<in> range\n         (justifying_exec \\<circ> J\n          (0 := \\<lparr>committed = {},\n                   justifying_exec = justifying_exec (J 1),\n                   justifying_ws = justifying_ws (J 1),\n                   action_translation = id\\<rparr>))\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<xi> =\n        justifying_exec\n         ((J(0 := \\<lparr>committed = {},\n                     justifying_exec = justifying_exec (J 1),\n                     justifying_ws = justifying_ws (J 1),\n                     action_translation = id\\<rparr>))\n           n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<xi> =\n  justifying_exec\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n     n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "then"], ["proof (chain)\npicking this:\n  \\<xi> =\n  justifying_exec\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n     n)", "obtain n where \\<xi>: \"\\<xi> = justifying_exec (J n)\" and n: \"n > 0\""], ["proof (prove)\nusing this:\n  \\<xi> =\n  justifying_exec\n   ((J(0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n               justifying_ws = justifying_ws (J 1),\n               action_translation = id\\<rparr>))\n     n)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>\\<xi> = justifying_exec (J n); 0 < n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto split: if_split_asm)"], ["proof (state)\nthis:\n  \\<xi> = justifying_exec (J n)\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "from range \\<xi>"], ["proof (chain)\npicking this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  \\<xi> = justifying_exec (J n)", "have \"\\<xi> \\<in> ?\\<E>\""], ["proof (prove)\nusing this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  \\<xi> = justifying_exec (J n)\n\ngoal (1 subgoal):\n 1. \\<xi>\n    \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "by auto"], ["proof (state)\nthis:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range\n                (justifying_exec \\<circ> J\n                 (0 := \\<lparr>committed = {},\n                          justifying_exec = justifying_exec (J 1),\n                          justifying_ws = justifying_ws (J 1),\n                          action_translation =\n                            id\\<rparr>)) \\<Longrightarrow>\n       x \\<in> lappend\n                (llist_of\n                  (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n               multithreaded_base.\\<E>\n                (final_thread.init_fin_final JVM_final)\n                (multithreaded_base.init_fin JVM_final\n                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                      JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                       jmm_spurious_wakeups jmm_empty jmm_allocate\n                       (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                       jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                       (Normal (xcp', h', frstls'))))\n                (map NormalAction \\<circ> convert_RA)\n                (init_fin_lift_state status\n                  (jmm'.h.start_state JVM_local_start P C M vs))", "thus \"\\<xi> \\<in> ?\\<E>'\""], ["proof (prove)\nusing this:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. \\<xi>\n    \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "unfolding jmm_typeof_addr'_conv_jmm_type_addr[symmetric, abs_def]"], ["proof (prove)\nusing this:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read\n                jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. \\<xi>\n    \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (\\<lambda>h. jmm_typeof_addr' P)\n                  (heap_base.heap_read_typed\n                    (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read P)\n                  jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "proof(rule JVMd_\\<E>_heap_read_typedI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "fix ad al v T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "assume read: \"NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>\"\n        and adal: \"P \\<turnstile>jmm ad@al : T\""], ["proof (state)\nthis:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "from read"], ["proof (chain)\npicking this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>", "obtain a where a: \"enat a < llength \\<xi>\" \"action_obs \\<xi> a = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength \\<xi>;\n         action_obs \\<xi> a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lset_conv_lnth"], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v)\n  \\<in> snd ` {lnth \\<xi> n |n. enat n < llength \\<xi>}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength \\<xi>;\n         action_obs \\<xi> a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: action_obs_def)"], ["proof (state)\nthis:\n  enat a < llength \\<xi>\n  action_obs \\<xi> a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "have \"ts_ok (\\<lambda>t (xcp, frs) h. JVM_heap_conf_base.correct_state addr2thread_id jmm_empty jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t (xcp, h, frs)) (thr (jmm_JVM_start_state P C M vs)) jmm.start_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts_ok\n     (\\<lambda>t (xcp, frs) h.\n         JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n          jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n          (xcp, h, frs))\n     (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap", "using JVM_heap_conf.correct_jvm_state_initial[OF jmm_JVM_heap_conf \\<Phi> ok]"], ["proof (prove)\nusing this:\n  jmm'.h.start_state JVM_local_start P C M vs\n  \\<in> JVM_heap_conf_base.correct_jvm_state (\\<lambda>x. x) jmm_empty\n         jmm_allocate (jmm_typeof_addr P) jmm_hconf P \\<Phi>\n\ngoal (1 subgoal):\n 1. ts_ok\n     (\\<lambda>t (xcp, frs) h.\n         JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n          jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n          (xcp, h, frs))\n     (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap", "by(simp add: JVM_heap_conf_base.correct_jvm_state_def jmm_typeof_addr'_conv_jmm_typeof_addr heap_base.start_state_def split_beta)"], ["proof (state)\nthis:\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "with JVM_allocated_heap_conf'.mexecd_known_addrs_typing'[OF jmm_JVMd_allocated_heap_conf' \\<Phi> jmm_start_heap_ok]"], ["proof (chain)\npicking this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap", "have \"\\<exists>T. P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "using wf_sys justified range n a"], ["proof (prove)\nusing this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n  wf_syscls P\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  0 < n\n  enat a < llength \\<xi>\n  action_obs \\<xi> a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "unfolding jmm_typeof_addr'_conv_jmm_type_addr[symmetric, abs_def] \\<xi>"], ["proof (prove)\nusing this:\n  known_addrs_typing' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty jmm_allocate\n   (jmm_typeof_addr' P) jmm_heap_write jmm_allocated\n   (JVM_heap_base.jvm_known_addrs (\\<lambda>x. x) jmm_empty jmm_allocate)\n   JVM_final\n   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n       JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n        ?spurious_wakeups jmm_empty jmm_allocate\n        (\\<lambda>_. jmm_typeof_addr' P) ?heap_read jmm_heap_write P t\n        (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   P\n  ts_ok\n   (\\<lambda>t (xcp, frs) h.\n       JVM_heap_conf_base.correct_state (\\<lambda>x. x) jmm_empty\n        jmm_allocate (\\<lambda>_. jmm_typeof_addr' P) jmm_hconf P \\<Phi> t\n        (xcp, h, frs))\n   (thr (jmm'.h.start_state JVM_local_start P C M vs)) jmm'.h.start_heap\n  wf_syscls P\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  0 < n\n  enat a < llength (justifying_exec (J n))\n  action_obs (justifying_exec (J n)) a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "by(rule known_addrs_typing'.read_value_typeable_justifying)"], ["proof (state)\nthis:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset \\<xi>;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "thus \"P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "using adal"], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "by(auto dest: jmm.addr_loc_type_fun[unfolded jmm_typeof_addr_conv_jmm_typeof_addr', unfolded heap_base'.addr_loc_type_conv_addr_loc_type])"], ["proof (state)\nthis:\n  P \\<turnstile>jmm v :\\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<xi>\n  \\<in> lappend\n         (llist_of\n           (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n        multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                jmm_spurious_wakeups jmm_empty jmm_allocate\n                (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P\n                t (Normal (xcp, h, frstls)) ta\n                (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "moreover"], ["proof (state)\nthis:\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from E"], ["proof (chain)\npicking this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "have \"E \\<in> ?\\<E>'\""], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                    jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "unfolding jmm_typeof_addr'_conv_jmm_type_addr[symmetric, abs_def]"], ["proof (prove)\nusing this:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read\n                  jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (\\<lambda>h. jmm_typeof_addr' P)\n                    (heap_base.heap_read_typed\n                      (\\<lambda>h. jmm_typeof_addr' P) jmm_heap_read P)\n                    jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "proof(rule JVMd_\\<E>_heap_read_typedI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "fix ad al v T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "assume read: \"NormalAction (ReadMem ad al v) \\<in> snd ` lset E\"\n      and adal: \"P \\<turnstile>jmm ad@al : T\""], ["proof (state)\nthis:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset E\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "from read"], ["proof (chain)\npicking this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset E", "obtain a where a: \"enat a < llength E\" \"action_obs E a = NormalAction (ReadMem ad al v)\""], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v) \\<in> snd ` lset E\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lset_conv_lnth"], ["proof (prove)\nusing this:\n  NormalAction (ReadMem ad al v)\n  \\<in> snd ` {lnth E n |n. enat n < llength E}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>enat a < llength E;\n         action_obs E a = NormalAction (ReadMem ad al v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: action_obs_def)"], ["proof (state)\nthis:\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "with jmm_JVMd_allocated_heap_conf' \\<Phi> ok legal"], ["proof (chain)\npicking this:\n  JVM_allocated_heap_conf' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n   jmm_allocate (jmm_typeof_addr' ?P) jmm_heap_write jmm_hconf jmm_allocated\n   ?P\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  jmm_wf_start_state P C M vs\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)", "have \"\\<exists>T. P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  JVM_allocated_heap_conf' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n   jmm_allocate (jmm_typeof_addr' ?P) jmm_heap_write jmm_hconf jmm_allocated\n   ?P\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  jmm_wf_start_state P C M vs\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "unfolding jmm_typeof_addr'_conv_jmm_typeof_addr[symmetric, abs_def]"], ["proof (prove)\nusing this:\n  JVM_allocated_heap_conf' (\\<lambda>x. x) (\\<lambda>x. x) jmm_empty\n   jmm_allocate (jmm_typeof_addr' ?P) jmm_heap_write jmm_hconf jmm_allocated\n   ?P\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  heap_base.wf_start_state jmm_empty jmm_allocate\n   (\\<lambda>_. jmm_typeof_addr' P) P C M vs\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (\\<lambda>_. jmm_typeof_addr' P) jmm_heap_read jmm_heap_write P\n            t (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n  enat a < llength E\n  action_obs E a = NormalAction (ReadMem ad al v)\n\ngoal (1 subgoal):\n 1. \\<exists>T.\n       P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T", "by(rule JVM_allocated_heap_conf'.JVM_weakly_legal_read_value_typeable)"], ["proof (state)\nthis:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. \\<And>ad al v T.\n       \\<lbrakk>NormalAction (ReadMem ad al v) \\<in> snd ` lset E;\n        P \\<turnstile>jmm ad@al : T\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile>jmm v :\\<le> T", "thus \"P \\<turnstile>jmm v :\\<le> T\""], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "using adal"], ["proof (prove)\nusing this:\n  \\<exists>T.\n     P \\<turnstile>jmm ad@al : T \\<and> P \\<turnstile>jmm v :\\<le> T\n  P \\<turnstile>jmm ad@al : T\n\ngoal (1 subgoal):\n 1. P \\<turnstile>jmm v :\\<le> T", "by(auto dest: jmm.addr_loc_type_fun[unfolded jmm_typeof_addr_conv_jmm_typeof_addr', unfolded heap_base'.addr_loc_type_conv_addr_loc_type])"], ["proof (state)\nthis:\n  P \\<turnstile>jmm v :\\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "ultimately"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "using wf"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "unfolding gen_legal_execution.simps"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n           justifying_ws = justifying_ws (J 1),\n           action_translation = id\\<rparr>)\n  range\n   (justifying_exec \\<circ> J\n    (0 := \\<lparr>committed = {}, justifying_exec = justifying_exec (J 1),\n             justifying_ws = justifying_ws (J 1),\n             action_translation = id\\<rparr>))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                    jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs)) \\<and>\n    P \\<turnstile> (E, ws) \\<surd> \\<and>\n    (\\<exists>J.\n        P \\<turnstile> (E, ws) weakly_justified_by J \\<and>\n        range (justifying_exec \\<circ> J)\n        \\<subseteq> lappend\n                     (llist_of\n                       (lift_start_obs jmm'.h.start_tid\n                         jmm'.h.start_heap_obs)) `\n                    multithreaded_base.\\<E>\n                     (final_thread.init_fin_final JVM_final)\n                     (multithreaded_base.init_fin JVM_final\n                       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                           h').\n                           JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                            (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                            jmm_allocate (jmm_typeof_addr P)\n                            (jmm_heap_read_typed P) jmm_heap_write P t\n                            (Normal (xcp, h, frstls)) ta\n                            (Normal (xcp', h', frstls'))))\n                     (map NormalAction \\<circ> convert_RA)\n                     (init_fin_lift_state status\n                       (jmm'.h.start_state JVM_local_start P C M vs)))", "by blast"], ["proof (state)\nthis:\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            (jmm_heap_read_typed P) jmm_heap_write P t\n            (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma JVMd_\\<E>_heap_read_typedD:\n  \"E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr) (heap_base.heap_read_typed (\\<lambda>_. typeof_addr) jmm_heap_read P) jmm_heap_write P C M vs status\n  \\<Longrightarrow> E \\<in> JVM_heap_base.JVMd_\\<E> addr2thread_id thread_id2addr spurious_wakeups empty_heap allocate (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write P C M vs status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> lappend\n             (llist_of\n               (lift_start_obs\n                 (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n                 (heap_base.start_heap_obs empty_heap allocate))) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate\n                    (\\<lambda>_. typeof_addr)\n                    (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                      jmm_heap_read P)\n                    jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n                 JVM_local_start P C M vs)) \\<Longrightarrow>\n    E \\<in> lappend\n             (llist_of\n               (lift_start_obs\n                 (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n                 (heap_base.start_heap_obs empty_heap allocate))) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    spurious_wakeups empty_heap allocate\n                    (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write P\n                    t (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n                 JVM_local_start P C M vs))", "apply(erule imageE, hypsubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) spurious_wakeups empty_heap\n                                allocate (\\<lambda>_. typeof_addr)\n                                (heap_base.heap_read_typed\n                                  (\\<lambda>_. typeof_addr) jmm_heap_read P)\n                                jmm_heap_write P t (Normal (xcp, h, frstls))\n                                ta (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state status\n                           (heap_base.start_state (\\<lambda>x. x) empty_heap\n                             allocate JVM_local_start P C M vs));\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         x\\<rbrakk>\n       \\<Longrightarrow> lappend\n                          (llist_of\n                            (lift_start_obs\n                              (heap_base.start_tid (\\<lambda>x. x)\n                                empty_heap allocate)\n                              (heap_base.start_heap_obs empty_heap\n                                allocate)))\n                          x\n                         \\<in> lappend\n                                (llist_of\n                                  (lift_start_obs\n                                    (heap_base.start_tid (\\<lambda>x. x)\nempty_heap allocate)\n                                    (heap_base.start_heap_obs empty_heap\nallocate))) `\n                               multithreaded_base.\\<E>\n                                (final_thread.init_fin_final JVM_final)\n                                (multithreaded_base.init_fin JVM_final\n                                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\nfrstls'), h').\nJVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n empty_heap allocate (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write\n P t (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n                                (map NormalAction \\<circ> convert_RA)\n                                (init_fin_lift_state status\n                                  (heap_base.start_state (\\<lambda>x. x)\n                                    empty_heap allocate JVM_local_start P C\n                                    M vs))", "apply(rule imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> multithreaded_base.\\<E>\n                         (final_thread.init_fin_final JVM_final)\n                         (multithreaded_base.init_fin JVM_final\n                           (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                               frstls'), h').\n                               JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                (\\<lambda>x. x) spurious_wakeups empty_heap\n                                allocate (\\<lambda>_. typeof_addr)\n                                (heap_base.heap_read_typed\n                                  (\\<lambda>_. typeof_addr) jmm_heap_read P)\n                                jmm_heap_write P t (Normal (xcp, h, frstls))\n                                ta (Normal (xcp', h', frstls'))))\n                         (map NormalAction \\<circ> convert_RA)\n                         (init_fin_lift_state status\n                           (heap_base.start_state (\\<lambda>x. x) empty_heap\n                             allocate JVM_local_start P C M vs));\n        E =\n        lappend\n         (llist_of\n           (lift_start_obs\n             (heap_base.start_tid (\\<lambda>x. x) empty_heap allocate)\n             (heap_base.start_heap_obs empty_heap allocate)))\n         x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> multithreaded_base.\\<E>\n                                  (final_thread.init_fin_final JVM_final)\n                                  (multithreaded_base.init_fin JVM_final\n                                    (\\<lambda>t ((xcp, frstls), h) ta\n  ((xcp', frstls'), h').\n  JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n   empty_heap allocate (\\<lambda>_. typeof_addr) jmm_heap_read\n   jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n   (Normal (xcp', h', frstls'))))\n                                  (map NormalAction \\<circ> convert_RA)\n                                  (init_fin_lift_state status\n                                    (heap_base.start_state (\\<lambda>x. x)\nempty_heap allocate JVM_local_start P C M vs))", "apply(erule multithreaded_base.\\<E>.cases, hypsubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E'.\n       \\<lbrakk>E =\n                lappend\n                 (llist_of\n                   (lift_start_obs\n                     (heap_base.start_tid (\\<lambda>x. x) empty_heap\n                       allocate)\n                     (heap_base.start_heap_obs empty_heap allocate)))\n                 (lconcat\n                   (lmap\n                     (\\<lambda>(t, ta).\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                     E'));\n        trsys.Runs\n         (multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate\n                  (\\<lambda>_. typeof_addr)\n                  (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                    jmm_heap_read P)\n                  jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA))\n         (init_fin_lift_state status\n           (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n             JVM_local_start P C M vs))\n         E'\\<rbrakk>\n       \\<Longrightarrow> lconcat\n                          (lmap\n                            (\\<lambda>(t, ta).\n                                llist_of\n                                 (map (Pair t)\n                                   \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                            E')\n                         \\<in> multithreaded_base.\\<E>\n                                (final_thread.init_fin_final JVM_final)\n                                (multithreaded_base.init_fin JVM_final\n                                  (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\nfrstls'), h').\nJVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x) spurious_wakeups\n empty_heap allocate (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write\n P t (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n                                (map NormalAction \\<circ> convert_RA)\n                                (init_fin_lift_state status\n                                  (heap_base.start_state (\\<lambda>x. x)\n                                    empty_heap allocate JVM_local_start P C\n                                    M vs))", "apply(rule multithreaded_base.\\<E>.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E'.\n       \\<lbrakk>E =\n                lappend\n                 (llist_of\n                   (lift_start_obs\n                     (heap_base.start_tid (\\<lambda>x. x) empty_heap\n                       allocate)\n                     (heap_base.start_heap_obs empty_heap allocate)))\n                 (lconcat\n                   (lmap\n                     (\\<lambda>(t, ta).\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                     E'));\n        trsys.Runs\n         (multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate\n                  (\\<lambda>_. typeof_addr)\n                  (heap_base.heap_read_typed (\\<lambda>_. typeof_addr)\n                    jmm_heap_read P)\n                  jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA))\n         (init_fin_lift_state status\n           (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n             JVM_local_start P C M vs))\n         E'\\<rbrakk>\n       \\<Longrightarrow> trsys.Runs\n                          (multithreaded_base.redT\n                            (final_thread.init_fin_final JVM_final)\n                            (multithreaded_base.init_fin JVM_final\n                              (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                  frstls'), h').\n                                  JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate\n                                   (\\<lambda>_. typeof_addr) jmm_heap_read\n                                   jmm_heap_write P t\n                                   (Normal (xcp, h, frstls)) ta\n                                   (Normal (xcp', h', frstls'))))\n                            (map NormalAction \\<circ> convert_RA))\n                          (init_fin_lift_state status\n                            (heap_base.start_state (\\<lambda>x. x)\n                              empty_heap allocate JVM_local_start P C M vs))\n                          E'", "apply(subst (asm) if_mexecd_heap_read_typed[abs_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E'.\n       \\<lbrakk>E =\n                lappend\n                 (llist_of\n                   (lift_start_obs\n                     (heap_base.start_tid (\\<lambda>x. x) empty_heap\n                       allocate)\n                     (heap_base.start_heap_obs empty_heap allocate)))\n                 (lconcat\n                   (lmap\n                     (\\<lambda>(t, ta).\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                     E'));\n        trsys.Runs\n         (multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n           (if_heap_read_typed JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  spurious_wakeups empty_heap allocate\n                  (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n             typeof_addr P)\n           (map NormalAction \\<circ> convert_RA))\n         (init_fin_lift_state status\n           (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n             JVM_local_start P C M vs))\n         E'\\<rbrakk>\n       \\<Longrightarrow> trsys.Runs\n                          (multithreaded_base.redT\n                            (final_thread.init_fin_final JVM_final)\n                            (multithreaded_base.init_fin JVM_final\n                              (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                  frstls'), h').\n                                  JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                   (\\<lambda>x. x) spurious_wakeups\n                                   empty_heap allocate\n                                   (\\<lambda>_. typeof_addr) jmm_heap_read\n                                   jmm_heap_write P t\n                                   (Normal (xcp, h, frstls)) ta\n                                   (Normal (xcp', h', frstls'))))\n                            (map NormalAction \\<circ> convert_RA))\n                          (init_fin_lift_state status\n                            (heap_base.start_state (\\<lambda>x. x)\n                              empty_heap allocate JVM_local_start P C M vs))\n                          E'", "apply(erule if_mthr_Runs_heap_read_typedD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x E' ttas s' tta s''.\n       \\<lbrakk>E =\n                lappend\n                 (llist_of\n                   (lift_start_obs\n                     (heap_base.start_tid (\\<lambda>x. x) empty_heap\n                       allocate)\n                     (heap_base.start_heap_obs empty_heap allocate)))\n                 (lconcat\n                   (lmap\n                     (\\<lambda>(t, ta).\n                         llist_of\n                          (map (Pair t)\n                            \\<lbrace>ta\\<rbrace>\\<^bsub>o\\<^esub>))\n                     E'));\n        multithreaded_base.RedT (final_thread.init_fin_final JVM_final)\n         (if_heap_read_typed JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                spurious_wakeups empty_heap allocate\n                (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write P t\n                (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls')))\n           typeof_addr P)\n         (map NormalAction \\<circ> convert_RA)\n         (init_fin_lift_state status\n           (heap_base.start_state (\\<lambda>x. x) empty_heap allocate\n             JVM_local_start P C M vs))\n         ttas s';\n        multithreaded_base.redT (final_thread.init_fin_final JVM_final)\n         (multithreaded_base.init_fin JVM_final\n           (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n               JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                spurious_wakeups empty_heap allocate\n                (\\<lambda>_. typeof_addr) jmm_heap_read jmm_heap_write P t\n                (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n         (map NormalAction \\<circ> convert_RA) s' tta s''\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tta s''.\n                            multithreaded_base.redT\n                             (final_thread.init_fin_final JVM_final)\n                             (if_heap_read_typed JVM_final\n                               (\\<lambda>t ((xcp, frstls), h) ta ((xcp',\n                                   frstls'), h').\n                                   JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                                    (\\<lambda>x. x) spurious_wakeups\n                                    empty_heap allocate\n                                    (\\<lambda>_. typeof_addr) jmm_heap_read\n                                    jmm_heap_write P t\n                                    (Normal (xcp, h, frstls)) ta\n                                    (Normal (xcp', h', frstls')))\n                               typeof_addr P)\n                             (map NormalAction \\<circ> convert_RA) s' tta\n                             s''", "apply(erule if_mExecd_heap_read_not_stuck[where typeof_addr=\"\\<lambda>_. typeof_addr\", unfolded if_mexecd_heap_read_typed[abs_def]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma JVMd_\\<E>_typesafe_subset: \"jmm'_JVMd_\\<E> P C M vs status \\<subseteq> jmm_JVMd_\\<E> P C M vs status\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            (jmm_heap_read_typed P) jmm_heap_write P t\n            (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs))\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                        jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs))", "unfolding jmm_typeof_addr_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate\n            (\\<lambda>h.\n                (\\<lambda>hT.\n                    if is_htype P hT then \\<lfloor>hT\\<rfloor>\n                    else None) \\<circ>\n                fst \\<circ>\n                the_Address)\n            (heap_base.heap_read_typed\n              (\\<lambda>h.\n                  (\\<lambda>hT.\n                      if is_htype P hT then \\<lfloor>hT\\<rfloor>\n                      else None) \\<circ>\n                  fst \\<circ>\n                  the_Address)\n              jmm_heap_read P)\n            jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs))\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate\n                        (\\<lambda>h.\n                            (\\<lambda>hT.\n                                if is_htype P hT then \\<lfloor>hT\\<rfloor>\n                                else None) \\<circ>\n                            fst \\<circ>\n                            the_Address)\n                        jmm_heap_read jmm_heap_write P t\n                        (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs))", "by(rule subsetI)(erule JVMd_\\<E>_heap_read_typedD)"], ["", "lemma JVMd_legal_typesafe2:\n  assumes legal: \"legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E> = \"jmm_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E>' = \"jmm'_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from legal"], ["proof (chain)\npicking this:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            (jmm_heap_read_typed P) jmm_heap_write P t\n            (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)", "obtain J \n    where justified: \"P \\<turnstile> (E, ws) justified_by J\"\n    and range: \"range (justifying_exec \\<circ> J) \\<subseteq> ?\\<E>'\"\n    and E: \"E \\<in> ?\\<E>'\" and wf: \"P \\<turnstile> (E, ws) \\<surd>\""], ["proof (prove)\nusing this:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            (jmm_heap_read_typed P) jmm_heap_write P t\n            (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>P \\<turnstile> (E, ws) justified_by J;\n         range (justifying_exec \\<circ> J)\n         \\<subseteq> lappend\n                      (llist_of\n                        (lift_start_obs jmm'.h.start_tid\n                          jmm'.h.start_heap_obs)) `\n                     multithreaded_base.\\<E>\n                      (final_thread.init_fin_final JVM_final)\n                      (multithreaded_base.init_fin JVM_final\n                        (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                            h').\n                            JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                             (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                             jmm_allocate (jmm_typeof_addr P)\n                             (jmm_heap_read_typed P) jmm_heap_write P t\n                             (Normal (xcp, h, frstls)) ta\n                             (Normal (xcp', h', frstls'))))\n                      (map NormalAction \\<circ> convert_RA)\n                      (init_fin_lift_state status\n                        (jmm'.h.start_state JVM_local_start P C M vs));\n         E \\<in> lappend\n                  (llist_of\n                    (lift_start_obs jmm'.h.start_tid\n                      jmm'.h.start_heap_obs)) `\n                 multithreaded_base.\\<E>\n                  (final_thread.init_fin_final JVM_final)\n                  (multithreaded_base.init_fin JVM_final\n                    (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                        JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                         (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                         jmm_allocate (jmm_typeof_addr P)\n                         (jmm_heap_read_typed P) jmm_heap_write P t\n                         (Normal (xcp, h, frstls)) ta\n                         (Normal (xcp', h', frstls'))))\n                  (map NormalAction \\<circ> convert_RA)\n                  (init_fin_lift_state status\n                    (jmm'.h.start_state JVM_local_start P C M vs));\n         P \\<turnstile> (E, ws) \\<surd>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from range E"], ["proof (chain)\npicking this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "have \"range (justifying_exec \\<circ> J) \\<subseteq> ?\\<E>\" \"E \\<in> ?\\<E>\""], ["proof (prove)\nusing this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. range (justifying_exec \\<circ> J)\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                        jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs)) &&&\n    E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                    (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "using JVMd_\\<E>_typesafe_subset[of P status C M vs]"], ["proof (prove)\nusing this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  lappend\n   (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n  multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n   (multithreaded_base.init_fin JVM_final\n     (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n         JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n          jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n          (jmm_heap_read_typed P) jmm_heap_write P t\n          (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n   (map NormalAction \\<circ> convert_RA)\n   (init_fin_lift_state status\n     (jmm'.h.start_state JVM_local_start P C M vs))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. range (justifying_exec \\<circ> J)\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                        jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs)) &&&\n    E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                    (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "by blast+"], ["proof (state)\nthis:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "with justified wf"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E, ws) \\<surd>\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) justified_by J\n  P \\<turnstile> (E, ws) \\<surd>\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "by(auto simp add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem JVMd_weakly_legal_typesafe2:\n  assumes legal: \"weakly_legal_execution P (jmm'_JVMd_\\<E> P C M vs status) (E, ws)\"\n  shows \"weakly_legal_execution P (jmm_JVMd_\\<E> P C M vs status) (E, ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E> = \"jmm_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "let ?\\<E>' = \"jmm'_JVMd_\\<E> P C M vs status\""], ["proof (state)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from legal"], ["proof (chain)\npicking this:\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            (jmm_heap_read_typed P) jmm_heap_write P t\n            (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)", "obtain J \n    where justified: \"P \\<turnstile> (E, ws) weakly_justified_by J\"\n    and range: \"range (justifying_exec \\<circ> J) \\<subseteq> ?\\<E>'\"\n    and E: \"E \\<in> ?\\<E>'\" and wf: \"P \\<turnstile> (E, ws) \\<surd>\""], ["proof (prove)\nusing this:\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            (jmm_heap_read_typed P) jmm_heap_write P t\n            (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal (1 subgoal):\n 1. (\\<And>J.\n        \\<lbrakk>P \\<turnstile> (E, ws) weakly_justified_by J;\n         range (justifying_exec \\<circ> J)\n         \\<subseteq> lappend\n                      (llist_of\n                        (lift_start_obs jmm'.h.start_tid\n                          jmm'.h.start_heap_obs)) `\n                     multithreaded_base.\\<E>\n                      (final_thread.init_fin_final JVM_final)\n                      (multithreaded_base.init_fin JVM_final\n                        (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'),\n                            h').\n                            JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                             (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                             jmm_allocate (jmm_typeof_addr P)\n                             (jmm_heap_read_typed P) jmm_heap_write P t\n                             (Normal (xcp, h, frstls)) ta\n                             (Normal (xcp', h', frstls'))))\n                      (map NormalAction \\<circ> convert_RA)\n                      (init_fin_lift_state status\n                        (jmm'.h.start_state JVM_local_start P C M vs));\n         E \\<in> lappend\n                  (llist_of\n                    (lift_start_obs jmm'.h.start_tid\n                      jmm'.h.start_heap_obs)) `\n                 multithreaded_base.\\<E>\n                  (final_thread.init_fin_final JVM_final)\n                  (multithreaded_base.init_fin JVM_final\n                    (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                        JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                         (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                         jmm_allocate (jmm_typeof_addr P)\n                         (jmm_heap_read_typed P) jmm_heap_write P t\n                         (Normal (xcp, h, frstls)) ta\n                         (Normal (xcp', h', frstls'))))\n                  (map NormalAction \\<circ> convert_RA)\n                  (init_fin_lift_state status\n                    (jmm'.h.start_state JVM_local_start P C M vs));\n         P \\<turnstile> (E, ws) \\<surd>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  P \\<turnstile> (E, ws) \\<surd>\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "from range E"], ["proof (chain)\npicking this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "have \"range (justifying_exec \\<circ> J) \\<subseteq> ?\\<E>\" \"E \\<in> ?\\<E>\""], ["proof (prove)\nusing this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. range (justifying_exec \\<circ> J)\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                        jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs)) &&&\n    E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                    (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "using JVMd_\\<E>_typesafe_subset[of P status C M vs]"], ["proof (prove)\nusing this:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) (jmm_heap_read_typed P)\n                      jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                  P t (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n  lappend\n   (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n  multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n   (multithreaded_base.init_fin JVM_final\n     (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n         JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n          jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n          (jmm_heap_read_typed P) jmm_heap_write P t\n          (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n   (map NormalAction \\<circ> convert_RA)\n   (init_fin_lift_state status\n     (jmm'.h.start_state JVM_local_start P C M vs))\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. range (justifying_exec \\<circ> J)\n    \\<subseteq> lappend\n                 (llist_of\n                   (lift_start_obs jmm'.h.start_tid\n                     jmm'.h.start_heap_obs)) `\n                multithreaded_base.\\<E>\n                 (final_thread.init_fin_final JVM_final)\n                 (multithreaded_base.init_fin JVM_final\n                   (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                       JVM_heap_base.exec_1_d (\\<lambda>x. x)\n                        (\\<lambda>x. x) jmm_spurious_wakeups jmm_empty\n                        jmm_allocate (jmm_typeof_addr P) jmm_heap_read\n                        jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n                        (Normal (xcp', h', frstls'))))\n                 (map NormalAction \\<circ> convert_RA)\n                 (init_fin_lift_state status\n                   (jmm'.h.start_state JVM_local_start P C M vs)) &&&\n    E \\<in> lappend\n             (llist_of\n               (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n            multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n             (multithreaded_base.init_fin JVM_final\n               (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                   JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                    jmm_spurious_wakeups jmm_empty jmm_allocate\n                    (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                    (Normal (xcp, h, frstls)) ta\n                    (Normal (xcp', h', frstls'))))\n             (map NormalAction \\<circ> convert_RA)\n             (init_fin_lift_state status\n               (jmm'.h.start_state JVM_local_start P C M vs))", "by blast+"], ["proof (state)\nthis:\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "with justified wf"], ["proof (chain)\npicking this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E, ws) \\<surd>\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> (E, ws) weakly_justified_by J\n  P \\<turnstile> (E, ws) \\<surd>\n  range (justifying_exec \\<circ> J)\n  \\<subseteq> lappend\n               (llist_of\n                 (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n              multithreaded_base.\\<E>\n               (final_thread.init_fin_final JVM_final)\n               (multithreaded_base.init_fin JVM_final\n                 (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                     JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                      jmm_spurious_wakeups jmm_empty jmm_allocate\n                      (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                      (Normal (xcp, h, frstls)) ta\n                      (Normal (xcp', h', frstls'))))\n               (map NormalAction \\<circ> convert_RA)\n               (init_fin_lift_state status\n                 (jmm'.h.start_state JVM_local_start P C M vs))\n  E \\<in> lappend\n           (llist_of\n             (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n          multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n           (multithreaded_base.init_fin JVM_final\n             (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                 JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                  jmm_spurious_wakeups jmm_empty jmm_allocate\n                  (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                  (Normal (xcp, h, frstls)) ta\n                  (Normal (xcp', h', frstls'))))\n           (map NormalAction \\<circ> convert_RA)\n           (init_fin_lift_state status\n             (jmm'.h.start_state JVM_local_start P C M vs))\n\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))\n     (E, ws)", "by(auto simp add: gen_legal_execution.simps)"], ["proof (state)\nthis:\n  weakly_legal_execution P\n   (lappend\n     (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n    multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n     (multithreaded_base.init_fin JVM_final\n       (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n           JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n            jmm_spurious_wakeups jmm_empty jmm_allocate (jmm_typeof_addr P)\n            jmm_heap_read jmm_heap_write P t (Normal (xcp, h, frstls)) ta\n            (Normal (xcp', h', frstls'))))\n     (map NormalAction \\<circ> convert_RA)\n     (init_fin_lift_state status\n       (jmm'.h.start_state JVM_local_start P C M vs)))\n   (E, ws)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem JVMd_weakly_legal_typesafe:\n  assumes \"wf_jvm_prog P\"\n  and \"jmm_wf_start_state P C M vs\"\n  shows \"weakly_legal_execution P (jmm_JVMd_\\<E> P C M vs status) = weakly_legal_execution P (jmm'_JVMd_\\<E> P C M vs status)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs))) =\n    weakly_legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))", "apply(rule ext iffI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       weakly_legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                 (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x \\<Longrightarrow>\n       weakly_legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                 P t (Normal (xcp, h, frstls)) ta\n                 (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x\n 2. \\<And>x.\n       weakly_legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                 P t (Normal (xcp, h, frstls)) ta\n                 (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x \\<Longrightarrow>\n       weakly_legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                 (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x", "apply(clarify, erule JVM_weakly_legal_typesafe1[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       weakly_legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                 P t (Normal (xcp, h, frstls)) ta\n                 (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x \\<Longrightarrow>\n       weakly_legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                 (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x", "apply(clarify, erule JVMd_weakly_legal_typesafe2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem JVMd_legal_typesafe:\n  assumes \"wf_jvm_prog P\"\n  and \"jmm_wf_start_state P C M vs\"\n  shows \"legal_execution P (jmm_JVMd_\\<E> P C M vs status) = legal_execution P (jmm'_JVMd_\\<E> P C M vs status)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs))) =\n    legal_execution P\n     (lappend\n       (llist_of (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n      multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n       (multithreaded_base.init_fin JVM_final\n         (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n             JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n              jmm_spurious_wakeups jmm_empty jmm_allocate\n              (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write P t\n              (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n       (map NormalAction \\<circ> convert_RA)\n       (init_fin_lift_state status\n         (jmm'.h.start_state JVM_local_start P C M vs)))", "apply(rule ext iffI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                 (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x \\<Longrightarrow>\n       legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                 P t (Normal (xcp, h, frstls)) ta\n                 (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x\n 2. \\<And>x.\n       legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                 P t (Normal (xcp, h, frstls)) ta\n                 (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x \\<Longrightarrow>\n       legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                 (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x", "apply(clarify, erule JVM_legal_typesafe1[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) (jmm_heap_read_typed P) jmm_heap_write\n                 P t (Normal (xcp, h, frstls)) ta\n                 (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x \\<Longrightarrow>\n       legal_execution P\n        (lappend\n          (llist_of\n            (lift_start_obs jmm'.h.start_tid jmm'.h.start_heap_obs)) `\n         multithreaded_base.\\<E> (final_thread.init_fin_final JVM_final)\n          (multithreaded_base.init_fin JVM_final\n            (\\<lambda>t ((xcp, frstls), h) ta ((xcp', frstls'), h').\n                JVM_heap_base.exec_1_d (\\<lambda>x. x) (\\<lambda>x. x)\n                 jmm_spurious_wakeups jmm_empty jmm_allocate\n                 (jmm_typeof_addr P) jmm_heap_read jmm_heap_write P t\n                 (Normal (xcp, h, frstls)) ta (Normal (xcp', h', frstls'))))\n          (map NormalAction \\<circ> convert_RA)\n          (init_fin_lift_state status\n            (jmm'.h.start_state JVM_local_start P C M vs)))\n        x", "apply(clarify, erule JVMd_legal_typesafe2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}