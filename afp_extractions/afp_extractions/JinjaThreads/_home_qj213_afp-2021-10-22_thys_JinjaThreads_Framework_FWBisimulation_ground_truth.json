{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/Framework/FWBisimulation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma nta_bisim_1_code [code]:\n  \"nta_bisim bisim (NewThread t x m) ta = (case ta of NewThread t' x' m' \\<Rightarrow> t = t' \\<and> bisim t (x, m) (x', m') | _ \\<Rightarrow> False)\"", "lemma nta_bisim_simps_sym [simp]:\n  \"nta_bisim bisim ta (NewThread t x m) = (\\<exists>x' m'. ta = NewThread t x' m' \\<and> bisim t (x', m') (x, m))\"\n  \"nta_bisim bisim ta (ThreadExists t b) = (ta = ThreadExists t b)\"", "lemma ta_bisim_empty [iff]: \"ta_bisim bisim \\<epsilon> \\<epsilon>\"", "lemma ta_bisim_\\<epsilon> [simp]:\n  \"ta_bisim b \\<epsilon> ta' \\<longleftrightarrow> ta' = \\<epsilon>\" \"ta_bisim b ta \\<epsilon> \\<longleftrightarrow> ta = \\<epsilon>\"", "lemma nta_bisim_mono:\n  assumes major: \"nta_bisim bisim ta ta'\"\n  and mono: \"\\<And>t s1 s2. bisim t s1 s2 \\<Longrightarrow> bisim' t s1 s2\"\n  shows \"nta_bisim bisim' ta ta'\"", "lemma ta_bisim_mono:\n  assumes major: \"ta_bisim bisim ta1 ta2\"\n  and mono: \"\\<And>t s1 s2. bisim t s1 s2 \\<Longrightarrow> bisim' t s1 s2\"\n  shows \"ta_bisim bisim' ta1 ta2\"", "lemma nta_bisim_flip [flip_simps]:\n  \"nta_bisim (\\<lambda>t. flip (bisim t)) = flip (nta_bisim bisim)\"", "lemma ta_bisim_flip [flip_simps]:\n  \"ta_bisim (\\<lambda>t. flip (bisim t)) = flip (ta_bisim bisim)\"", "lemma tbisim_NoneI: \"tbisim w t None m None m'\"", "lemma tbisim_SomeI:\n  \"\\<And>ln. \\<lbrakk> t \\<turnstile> (x, m) \\<approx> (x', m'); nw \\<or> x \\<approx>w x' \\<rbrakk> \\<Longrightarrow> tbisim nw t (Some (x, ln)) m (Some (x', ln)) m'\"", "lemma tbisim_cases[consumes 1, case_names None Some]:\n  assumes major: \"tbisim nw t ts1 m1 ts2 m2\"\n  and \"\\<lbrakk> ts1 = None; ts2 = None \\<rbrakk> \\<Longrightarrow> thesis\"\n  and \"\\<And>x ln x'. \\<lbrakk> ts1 = \\<lfloor>(x, ln)\\<rfloor>; ts2 = \\<lfloor>(x', ln)\\<rfloor>; t \\<turnstile> (x, m1) \\<approx> (x', m2); nw \\<or> x \\<approx>w x' \\<rbrakk> \\<Longrightarrow> thesis\"\n  shows thesis", "lemma mbisim_thrNone_eq: \"s1 \\<approx>m s2 \\<Longrightarrow> thr s1 t = None \\<longleftrightarrow> thr s2 t = None\"", "lemma mbisim_thrD1:\n  \"\\<And>ln. \\<lbrakk> s1 \\<approx>m s2; thr s1 t = \\<lfloor>(x, ln)\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>x'. thr s2 t = \\<lfloor>(x', ln)\\<rfloor> \\<and> t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2) \\<and> (wset s1 t = None \\<or> x \\<approx>w x')\"", "lemma mbisim_thrD2:\n  \"\\<And>ln. \\<lbrakk> s1 \\<approx>m s2; thr s2 t = \\<lfloor>(x, ln)\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>x'. thr s1 t = \\<lfloor>(x', ln)\\<rfloor> \\<and> t \\<turnstile> (x', shr s1) \\<approx> (x, shr s2) \\<and> (wset s2 t = None \\<or> x' \\<approx>w x)\"", "lemma mbisim_dom_eq: \"s1 \\<approx>m s2 \\<Longrightarrow> dom (thr s1) = dom (thr s2)\"", "lemma mbisim_wset_thread_ok1:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> wset_thread_ok (wset s1) (thr s1)\"", "lemma mbisim_wset_thread_ok2:\n  assumes \"s1 \\<approx>m s2\"\n  shows \"wset_thread_ok (wset s2) (thr s2)\"", "lemma mbisimI:\n  \"\\<lbrakk> finite (dom (thr s1)); locks s1 = locks s2; wset s1 = wset s2; interrupts s1 = interrupts s2; \n     wset_thread_ok (wset s1) (thr s1);\n     \\<And>t. thr s1 t = None \\<Longrightarrow> thr s2 t = None;\n     \\<And>t x1 ln. thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow> \\<exists>x2. thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<and> t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and> (wset s2 t = None \\<or> x1 \\<approx>w x2) \\<rbrakk>\n  \\<Longrightarrow> s1 \\<approx>m s2\"", "lemma mbisimI2:\n  \"\\<lbrakk> finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2; interrupts s1 = interrupts s2;\n     wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln. thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow> \\<exists>x1. thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and> t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and> (wset s2 t = None \\<or> x1 \\<approx>w x2) \\<rbrakk>\n  \\<Longrightarrow> s1 \\<approx>m s2\"", "lemma mbisim_finite1:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> finite (dom (thr s1))\"", "lemma mbisim_finite2:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> finite (dom (thr s2))\"", "lemma mta_bisim_conv [simp]: \"(t, ta1) \\<sim>T (t', ta2) \\<longleftrightarrow> t = t' \\<and> ta1 \\<sim>m ta2\"", "lemma bisim_invI:\n  \"\\<lbrakk> \\<And>s1 ta1 s1' s2 t. \\<lbrakk> t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s1 -1-ta1\\<rightarrow> s1' \\<rbrakk> \\<Longrightarrow> \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2';\n     \\<And>s2 ta2 s2' s1 t. \\<lbrakk> t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s2 -2-ta2\\<rightarrow> s2' \\<rbrakk> \\<Longrightarrow> \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2' \\<rbrakk>\n  \\<Longrightarrow> bisim_inv\"", "lemma bisim_invD1:\n  \"\\<lbrakk> bisim_inv; t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s1 -1-ta1\\<rightarrow> s1' \\<rbrakk> \\<Longrightarrow> \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\"", "lemma bisim_invD2:\n  \"\\<lbrakk> bisim_inv; t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s2 -2-ta2\\<rightarrow> s2' \\<rbrakk> \\<Longrightarrow> \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'\"", "lemma thread_oks_bisim_inv:\n  \"\\<lbrakk> \\<forall>t. ts1 t = None \\<longleftrightarrow> ts2 t = None; list_all2 (nta_bisim bisim) tas1 tas2 \\<rbrakk>\n  \\<Longrightarrow> thread_oks ts1 tas1 \\<longleftrightarrow> thread_oks ts2 tas2\"", "lemma redT_updT_nta_bisim_inv:\n  \"\\<lbrakk> nta_bisim bisim ta1 ta2; ts1 T = None \\<longleftrightarrow> ts2 T = None \\<rbrakk> \\<Longrightarrow> redT_updT ts1 ta1 T = None \\<longleftrightarrow> redT_updT ts2 ta2 T = None\"", "lemma redT_updTs_nta_bisim_inv:\n  \"\\<lbrakk> list_all2 (nta_bisim bisim) tas1 tas2; ts1 T = None \\<longleftrightarrow> ts2 T = None \\<rbrakk>\n  \\<Longrightarrow> redT_updTs ts1 tas1 T = None \\<longleftrightarrow> redT_updTs ts2 tas2 T = None\"", "lemma tbisim_flip [flip_simps]:\n  \"FWbisimulation_base.tbisim (\\<lambda>t. flip (bisim t)) (flip bisim_wait) w t ts2 m2 ts1 m1 =\n   FWbisimulation_base.tbisim bisim bisim_wait w t ts1 m1 ts2 m2\"", "lemma mbisim_flip [flip_simps]:\n  \"FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t)) (flip bisim_wait) s2 s1 =\n   FWbisimulation_base.mbisim bisim bisim_wait s1 s2\"", "lemma mta_bisim_flip [flip_simps]:\n  \"FWbisimulation_base.mta_bisim (\\<lambda>t. flip (bisim t)) = flip (FWbisimulation_base.mta_bisim bisim)\"", "lemma flip_const [simp]: \"flip (\\<lambda>a b. c) = (\\<lambda>a b. c)\"", "lemma mbisim_K_flip [flip_simps]:\n  \"FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t)) (\\<lambda>x1 x2. c) s1 s2 = \n   FWbisimulation_base.mbisim bisim (\\<lambda>x1 x2. c) s2 s1\"", "lemma mbisim_actions_ok_bisim_no_join_12:\n  assumes mbisim: \"mbisim s1 s2\"\n  and \"collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {}\"\n  and \"ta_bisim bisim ta1 ta2\"\n  and \"r1.actions_ok s1 t ta1\"\n  shows \"r2.actions_ok s2 t ta2\"", "lemma mbisim_actions_ok_bisim_no_join_21:\n  \"\\<lbrakk> mbisim s1 s2; collect_cond_actions \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> = {}; ta_bisim bisim ta1 ta2; r2.actions_ok s2 t ta2 \\<rbrakk>\n  \\<Longrightarrow> r1.actions_ok s1 t ta1\"", "lemma mbisim_actions_ok_bisim_no_join:\n  \"\\<lbrakk> mbisim s1 s2; collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {}; ta_bisim bisim ta1 ta2 \\<rbrakk> \n  \\<Longrightarrow> r1.actions_ok s1 t ta1 = r2.actions_ok s2 t ta2\"", "lemma FWbisimulation_base_aux_flip:\n  \"FWbisimulation_base_aux final2 r2 final1 r1\"", "lemma FWbisimulation_base_aux_flip_simps [flip_simps]:\n  \"FWbisimulation_base_aux final2 r2 final1 r1 = FWbisimulation_base_aux final1 r1 final2 r2\"", "lemma bisim_inv_\\<tau>s1_inv:\n  assumes inv: \"bisim_inv\"\n  and bisim: \"t \\<turnstile> s1 \\<approx> s2\"\n  and red: \"r1.silent_moves t s1 s1'\"\n  obtains s2' where \"t \\<turnstile> s1' \\<approx> s2'\"", "lemma bisim_inv_\\<tau>s2_inv:\n  assumes inv: \"bisim_inv\"\n  and bisim: \"t \\<turnstile> s1 \\<approx> s2\"\n  and red: \"r2.silent_moves t s2 s2'\"\n  obtains s1' where \"t \\<turnstile> s1' \\<approx> s2'\"", "lemma activate_cond_action1_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_action1 final2 r2 final1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_action2 final1 final2 r2 bisim \\<tau>move2 s1 s2\"", "lemma activate_cond_actions1_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_actions1 final2 r2 final1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_actions2 final1 final2 r2 bisim \\<tau>move2 s1 s2\"\n  (is \"?lhs = ?rhs\")", "lemma activate_cond_action2_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_action2 final2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_action1 final1 r1 final2 bisim \\<tau>move1 s1 s2\"", "lemma activate_cond_actions2_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_actions2 final2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_actions1 final1 r1 final2 bisim \\<tau>move1 s1 s2\"\n  (is \"?lhs = ?rhs\")", "lemma shr_activate_cond_action1 [simp]: \"shr (activate_cond_action1 s1 s2 ct) = shr s1\"", "lemma shr_activate_cond_actions1 [simp]: \"shr (activate_cond_actions1 s1 s2 cts) = shr s1\"", "lemma shr_activate_cond_action2 [simp]: \"shr (activate_cond_action2 s1 s2 ct) = shr s2\"", "lemma shr_activate_cond_actions2 [simp]: \"shr (activate_cond_actions2 s1 s2 cts) = shr s2\"", "lemma locks_activate_cond_action1 [simp]: \"locks (activate_cond_action1 s1 s2 ct) = locks s1\"", "lemma locks_activate_cond_actions1 [simp]: \"locks (activate_cond_actions1 s1 s2 cts) = locks s1\"", "lemma locks_activate_cond_action2 [simp]: \"locks (activate_cond_action2 s1 s2 ct) = locks s2\"", "lemma locks_activate_cond_actions2 [simp]: \"locks (activate_cond_actions2 s1 s2 cts) = locks s2\"", "lemma wset_activate_cond_action1 [simp]: \"wset (activate_cond_action1 s1 s2 ct) = wset s1\"", "lemma wset_activate_cond_actions1 [simp]: \"wset (activate_cond_actions1 s1 s2 cts) = wset s1\"", "lemma wset_activate_cond_action2 [simp]: \"wset (activate_cond_action2 s1 s2 ct) = wset s2\"", "lemma wset_activate_cond_actions2 [simp]: \"wset (activate_cond_actions2 s1 s2 cts) = wset s2\"", "lemma interrupts_activate_cond_action1 [simp]: \"interrupts (activate_cond_action1 s1 s2 ct) = interrupts s1\"", "lemma interrupts_activate_cond_actions1 [simp]: \"interrupts (activate_cond_actions1 s1 s2 cts) = interrupts s1\"", "lemma interrupts_activate_cond_action2 [simp]: \"interrupts (activate_cond_action2 s1 s2 ct) = interrupts s2\"", "lemma interrupts_activate_cond_actions2 [simp]: \"interrupts (activate_cond_actions2 s1 s2 cts) = interrupts s2\"", "lemma FWdelay_bisimulation_lift_aux_flip:\n  \"FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2 \\<tau>move1\"", "lemma FWdelay_bisimulation_lift_aux_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2 \\<tau>move1 =\n   FWdelay_bisimulation_lift_aux final1 r1 final2 r2 \\<tau>move1 \\<tau>move2\"", "lemma cond_actions_ok_\\<tau>mred1_inv:\n  assumes red: \"\\<tau>mred1 s1 s1'\"\n  and ct: \"r1.cond_action_ok s1 t ct\"\n  shows \"r1.cond_action_ok s1' t ct\"", "lemma cond_actions_ok_\\<tau>mred2_inv:\n  \"\\<lbrakk> \\<tau>mred2 s2 s2'; r2.cond_action_ok s2 t ct \\<rbrakk> \\<Longrightarrow> r2.cond_action_ok s2' t ct\"", "lemma cond_actions_ok_\\<tau>mRed1_inv:\n  \"\\<lbrakk> \\<tau>mRed1 s1 s1'; r1.cond_action_ok s1 t ct \\<rbrakk> \\<Longrightarrow> r1.cond_action_ok s1' t ct\"", "lemma cond_actions_ok_\\<tau>mRed2_inv:\n  \"\\<lbrakk> \\<tau>mRed2 s2 s2'; r2.cond_action_ok s2 t ct \\<rbrakk> \\<Longrightarrow> r2.cond_action_ok s2' t ct\"", "lemma FWdelay_bisimulation_lift_flip:\n  \"FWdelay_bisimulation_lift final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1\"", "lemma FWdelay_bisimulation_lift_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_lift final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1 =\n   FWdelay_bisimulation_lift final1 r1 final2 r2 bisim \\<tau>move1 \\<tau>move2\"", "lemma \\<tau>inv_lift: \"\\<tau>inv r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2\"", "lemma FWdelay_bisimulation_final_base_flip:\n  \"FWdelay_bisimulation_final_base final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1\"", "lemma FWdelay_bisimulation_final_base_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_final_base final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1 =\n   FWdelay_bisimulation_final_base final1 r1 final2 r2 bisim \\<tau>move1 \\<tau>move2\"", "lemma cond_actions_ok_bisim_ex_\\<tau>1_inv:\n  fixes ls ts1 m1 ws \"is\" ts2 m2 ct\n  defines \"s1' \\<equiv> activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\"\n  assumes mbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\"\n  shows \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\"\n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2\"\n  and \"r1.cond_action_ok s1' t ct\"\n  and \"thr s1' t = Some xln\"", "lemma cond_actions_oks_bisim_ex_\\<tau>1_inv:\n  fixes ls ts1 m1 ws \"is\" ts2 m2 cts\n  defines \"s1' \\<equiv> activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts\"\n  assumes tbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\"\n  shows \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\" \n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2\"\n  and \"r1.cond_action_oks s1' t cts\"\n  and \"thr s1' t = Some xln\"", "lemma cond_actions_ok_bisim_ex_\\<tau>2_inv:\n  fixes ls ts1 m1 \"is\" ws ts2 m2 ct\n  defines \"s2' \\<equiv> activate_cond_action2 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\"\n  assumes mbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r1.cond_action_ok (ls, (ts1, m1), ws, is) t ct\"\n  shows \"\\<tau>mRed2 (ls, (ts2, m2), ws, is) s2'\"\n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (thr s2' t') m2\"\n  and \"r2.cond_action_ok s2' t ct\"\n  and \"thr s2' t = Some xln'\"", "lemma cond_actions_oks_bisim_ex_\\<tau>2_inv:\n  fixes ls ts1 m1 ws \"is\" ts2 m2 cts\n  defines \"s2' \\<equiv> activate_cond_actions2 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts\"\n  assumes tbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r1.cond_action_oks (ls, (ts1, m1), ws, is) t cts\"\n  shows \"\\<tau>mRed2 (ls, (ts2, m2), ws, is) s2'\"\n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (thr s2' t') m2\"\n  and \"r2.cond_action_oks s2' t cts\"\n  and \"thr s2' t = Some xln'\"", "lemma mfinal1_inv_simulation:\n  assumes \"s1 \\<approx>m s2\" \n  shows \"\\<exists>s2'. r2.mthr.silent_moves s2 s2' \\<and> s1 \\<approx>m s2' \\<and> r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and> shr s2' = shr s2\"", "lemma mfinal2_inv_simulation:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> \\<exists>s1'. r1.mthr.silent_moves s1 s1' \\<and> s1' \\<approx>m s2 \\<and> r2.final_threads s2 \\<subseteq> r1.final_threads s1' \\<and> shr s1' = shr s1\"", "lemma mfinal1_simulation:\n  assumes \"s1 \\<approx>m s2\" and \"r1.mfinal s1\"\n  shows \"\\<exists>s2'. r2.mthr.silent_moves s2 s2' \\<and> s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2\"", "lemma mfinal2_simulation:\n  \"\\<lbrakk> s1 \\<approx>m s2; r2.mfinal s2 \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1'. r1.mthr.silent_moves s1 s1' \\<and> s1' \\<approx>m s2 \\<and> r1.mfinal s1' \\<and> shr s1' = shr s1\"", "lemma FWdelay_bisimulation_obs_flip:\n  \"FWdelay_bisimulation_obs final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1\"", "lemma FWdelay_bisimulation_obs_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_obs final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1 = \n   FWdelay_bisimulation_obs final1 r1 final2 r2 bisim bisim_wait \\<tau>move1 \\<tau>move2\"", "lemma mbisim_redT_upd:\n  fixes s1 t ta1 x1' m1' s2 ta2 x2' m2' ln\n  assumes s1': \"redT_upd s1 t ta1 x1' m1' s1'\"\n  and s2': \"redT_upd s2 t ta2 x2' m2' s2'\"\n  and [simp]: \"wset s1 = wset s2\" \"locks s1 = locks s2\" \n  and wset: \"wset s1' = wset s2'\"\n  and interrupts: \"interrupts s1' = interrupts s2'\"\n  and fin1: \"finite (dom (thr s1))\"\n  and wsts: \"wset_thread_ok (wset s1) (thr s1)\"\n  and tst: \"thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\"\n  and tst': \"thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\"\n  and aoe1: \"r1.actions_ok s1 t ta1\"\n  and aoe2: \"r2.actions_ok s2 t ta2\"\n  and tasim: \"ta_bisim bisim ta1 ta2\"\n  and bisim': \"t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\"\n  and bisimw: \"wset s1' t = None \\<or> x1' \\<approx>w x2'\"\n  and \\<tau>red1: \"r1.silent_moves t (x1'', shr s1) (x1, shr s1)\"\n  and red1: \"t \\<turnstile> (x1, shr s1) -1-ta1\\<rightarrow> (x1', m1')\"\n  and \\<tau>red2: \"r2.silent_moves t (x2'', shr s2) (x2, shr s2)\"\n  and red2: \"t \\<turnstile> (x2, shr s2) -2-ta2\\<rightarrow> (x2', m2')\"\n  and bisim: \"t \\<turnstile> (x1'', shr s1) \\<approx> (x2'', shr s2)\"\n  and \\<tau>1: \"\\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', m1')\"\n  and \\<tau>2: \"\\<not> \\<tau>move2 (x2, shr s2) ta2 (x2', m2')\"\n  and tbisim: \"\\<And>t'. t \\<noteq> t' \\<Longrightarrow> tbisim (wset s1 t' = None) t' (thr s1 t') (shr s1) (thr s2 t') (shr s2)\"\n  shows \"s1' \\<approx>m s2'\"", "theorem mbisim_simulation1:\n  assumes mbisim: \"mbisim s1 s2\" and \"\\<not> m\\<tau>move1 s1 tl1 s1'\" \"r1.redT s1 tl1 s1'\"\n  shows \"\\<exists>s2' s2'' tl2. r2.mthr.silent_moves s2 s2' \\<and> r2.redT s2' tl2 s2'' \\<and>\n                        \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and> mbisim s1' s2'' \\<and> mta_bisim tl1 tl2\"", "theorem mbisim_simulation2:\n  \"\\<lbrakk> mbisim s1 s2; r2.redT s2 tl2 s2'; \\<not> m\\<tau>move2 s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' s1'' tl1. r1.mthr.silent_moves s1 s1' \\<and> r1.redT s1' tl1 s1'' \\<and> \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                    mbisim s1'' s2' \\<and> mta_bisim tl1 tl2\"", "lemma FWdelay_bisimulation_diverge_flip:\n  \"FWdelay_bisimulation_diverge final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1\"", "lemma FWdelay_bisimulation_diverge_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_diverge final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1 = \n   FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim bisim_wait \\<tau>move1 \\<tau>move2\"", "lemma bisim_inv1:\n  assumes bisim: \"t \\<turnstile> s1 \\<approx> s2\"\n  and red: \"t \\<turnstile> s1 -1-ta1\\<rightarrow> s1'\"\n  obtains s2' where \"t \\<turnstile> s1' \\<approx> s2'\"", "lemma bisim_inv2:\n  assumes \"t \\<turnstile> s1 \\<approx> s2\" \"t \\<turnstile> s2 -2-ta2\\<rightarrow> s2'\"\n  obtains s1' where \"t \\<turnstile> s1' \\<approx> s2'\"", "lemma bisim_inv: \"bisim_inv\"", "lemma bisim_inv_\\<tau>s1:\n  assumes \"t \\<turnstile> s1 \\<approx> s2\" and \"r1.silent_moves t s1 s1'\"\n  obtains s2' where \"t \\<turnstile> s1' \\<approx> s2'\"", "lemma bisim_inv_\\<tau>s2:\n  assumes \"t \\<turnstile> s1 \\<approx> s2\" and \"r2.silent_moves t s2 s2'\"\n  obtains s1' where \"t \\<turnstile> s1' \\<approx> s2'\"", "lemma red1_rtrancl_\\<tau>_into_RedT_\\<tau>:\n  assumes \"r1.silent_moves t (x1, shr s1) (x1', m1')\" \"t \\<turnstile> (x1, shr s1) \\<approx> (x2, m2)\"\n  and \"thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\" \"wset s1 t = None\"\n  shows \"\\<tau>mRed1 s1 (redT_upd_\\<epsilon> s1 t x1' m1')\"", "lemma red2_rtrancl_\\<tau>_into_RedT_\\<tau>:\n  assumes \"r2.silent_moves t (x2, shr s2) (x2', m2')\"\n  and \"t \\<turnstile> (x1, m1) \\<approx> (x2, shr s2)\" \"thr s2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\" \"wset s2 t = None\"\n  shows \"\\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')\"", "lemma red1_rtrancl_\\<tau>_heapD:\n  \"\\<lbrakk> r1.silent_moves t s1 s1'; t \\<turnstile> s1 \\<approx> s2 \\<rbrakk> \\<Longrightarrow> snd s1' = snd s1\"", "lemma red2_rtrancl_\\<tau>_heapD:\n  \"\\<lbrakk> r2.silent_moves t s2 s2'; t \\<turnstile> s1 \\<approx> s2 \\<rbrakk> \\<Longrightarrow> snd s2' = snd s2\"", "lemma mbisim_simulation_silent1:\n  assumes m\\<tau>': \"r1.mthr.silent_move s1 s1'\" and mbisim: \"s1 \\<approx>m s2\"\n  shows \"\\<exists>s2'. r2.mthr.silent_moves s2 s2' \\<and> s1' \\<approx>m s2'\"", "lemma mbisim_simulation_silent2:\n  \"\\<lbrakk> mbisim s1 s2; r2.mthr.silent_move s2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1'. r1.mthr.silent_moves s1 s1' \\<and> mbisim s1' s2'\"", "lemma mbisim_simulation1':\n  assumes mbisim: \"mbisim s1 s2\" and \"\\<not> m\\<tau>move1 s1 tl1 s1'\" \"r1.redT s1 tl1 s1'\"\n  shows \"\\<exists>s2' s2'' tl2. r2.mthr.silent_moves s2 s2' \\<and> r2.redT s2' tl2 s2'' \\<and>\n                        \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and> mbisim s1' s2'' \\<and> mta_bisim tl1 tl2\"", "lemma mbisim_simulation2':\n  \"\\<lbrakk> mbisim s1 s2; r2.redT s2 tl2 s2'; \\<not> m\\<tau>move2 s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' s1'' tl1. r1.mthr.silent_moves s1 s1' \\<and> r1.redT s1' tl1 s1'' \\<and> \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                    mbisim s1'' s2' \\<and> mta_bisim tl1 tl2\"", "lemma m\\<tau>diverge_simulation1:\n  assumes \"s1 \\<approx>m s2\"\n  and \"r1.mthr.\\<tau>diverge s1\"\n  shows \"r2.mthr.\\<tau>diverge s2\"", "lemma \\<tau>diverge_mbisim_inv:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> r1.mthr.\\<tau>diverge s1 \\<longleftrightarrow> r2.mthr.\\<tau>diverge s2\"", "lemma mbisim_delay_bisimulation:\n  \"delay_bisimulation_diverge r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2\"", "theorem mdelay_bisimulation_final_base:\n  \"delay_bisimulation_final_base r1.redT r2.redT mbisim m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal\"", "lemma mthr_delay_bisimulation_diverge_final:\n  \"delay_bisimulation_diverge_final r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal\"", "lemma FWbisimulation_flip: \"FWbisimulation final2 r2 final1 r1 (\\<lambda>t. flip (bisim t))\"", "lemma FWbisimulation_flip_simps [flip_simps]:\n  \"FWbisimulation final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) = FWbisimulation final1 r1 final2 r2 bisim\"", "theorem mbisim_bisimulation:\n  \"bisimulation r1.redT r2.redT mbisim mta_bisim\"", "lemma mbisim_wset_eq:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> wset s1 = wset s2\"", "lemma mbisim_mfinal:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> r1.mfinal s1 \\<longleftrightarrow> r2.mfinal s2\""], "translations": [["", "lemma nta_bisim_1_code [code]:\n  \"nta_bisim bisim (NewThread t x m) ta = (case ta of NewThread t' x' m' \\<Rightarrow> t = t' \\<and> bisim t (x, m) (x', m') | _ \\<Rightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nta_bisim bisim (NewThread t x m) ta =\n    (case ta of\n     NewThread t' x' m' \\<Rightarrow> t = t' \\<and> bisim t (x, m) (x', m')\n     | ThreadExists ta bool \\<Rightarrow> False)", "by(auto split: new_thread_action.split)"], ["", "lemma nta_bisim_simps_sym [simp]:\n  \"nta_bisim bisim ta (NewThread t x m) = (\\<exists>x' m'. ta = NewThread t x' m' \\<and> bisim t (x', m') (x, m))\"\n  \"nta_bisim bisim ta (ThreadExists t b) = (ta = ThreadExists t b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nta_bisim bisim ta (NewThread t x m) =\n    (\\<exists>x' m'.\n        ta = NewThread t x' m' \\<and> bisim t (x', m') (x, m)) &&&\n    nta_bisim bisim ta (ThreadExists t b) = (ta = ThreadExists t b)", "by(cases ta, auto)+"], ["", "definition ta_bisim :: \"('t \\<Rightarrow> ('x1 \\<times> 'm1, 'x2 \\<times> 'm2) bisim) \\<Rightarrow> (('l,'t,'x1,'m1,'w,'o) thread_action, ('l,'t,'x2,'m2,'w,'o) thread_action) bisim\"\nwhere\n  \"ta_bisim bisim ta1 ta2 \\<equiv>\n  \\<lbrace> ta1 \\<rbrace>\\<^bsub>l\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>l\\<^esub> \\<and> \\<lbrace> ta1 \\<rbrace>\\<^bsub>w\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>w\\<^esub> \\<and> \\<lbrace> ta1 \\<rbrace>\\<^bsub>c\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>c\\<^esub> \\<and> \\<lbrace> ta1 \\<rbrace>\\<^bsub>o\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>o\\<^esub> \\<and> \\<lbrace> ta1 \\<rbrace>\\<^bsub>i\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>i\\<^esub> \\<and>\n  list_all2 (nta_bisim bisim) \\<lbrace> ta1 \\<rbrace>\\<^bsub>t\\<^esub> \\<lbrace> ta2 \\<rbrace>\\<^bsub>t\\<^esub>\""], ["", "lemma ta_bisim_empty [iff]: \"ta_bisim bisim \\<epsilon> \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim bisim \\<lbrace>\\<rbrace> \\<lbrace>\\<rbrace>", "by(auto simp add: ta_bisim_def)"], ["", "lemma ta_bisim_\\<epsilon> [simp]:\n  \"ta_bisim b \\<epsilon> ta' \\<longleftrightarrow> ta' = \\<epsilon>\" \"ta_bisim b ta \\<epsilon> \\<longleftrightarrow> ta = \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim b \\<lbrace>\\<rbrace> ta' = (ta' = \\<lbrace>\\<rbrace>) &&&\n    ta_bisim b ta \\<lbrace>\\<rbrace> = (ta = \\<lbrace>\\<rbrace>)", "apply(cases ta', fastforce simp add: ta_bisim_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim b ta \\<lbrace>\\<rbrace> = (ta = \\<lbrace>\\<rbrace>)", "apply(cases ta, fastforce simp add: ta_bisim_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nta_bisim_mono:\n  assumes major: \"nta_bisim bisim ta ta'\"\n  and mono: \"\\<And>t s1 s2. bisim t s1 s2 \\<Longrightarrow> bisim' t s1 s2\"\n  shows \"nta_bisim bisim' ta ta'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nta_bisim bisim' ta ta'", "using major"], ["proof (prove)\nusing this:\n  nta_bisim bisim ta ta'\n\ngoal (1 subgoal):\n 1. nta_bisim bisim' ta ta'", "by(cases ta)(auto intro: mono)"], ["", "lemma ta_bisim_mono:\n  assumes major: \"ta_bisim bisim ta1 ta2\"\n  and mono: \"\\<And>t s1 s2. bisim t s1 s2 \\<Longrightarrow> bisim' t s1 s2\"\n  shows \"ta_bisim bisim' ta1 ta2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim bisim' ta1 ta2", "using major"], ["proof (prove)\nusing this:\n  ta_bisim bisim ta1 ta2\n\ngoal (1 subgoal):\n 1. ta_bisim bisim' ta1 ta2", "by(auto simp add: ta_bisim_def elim!: List.list_all2_mono nta_bisim_mono intro: mono)"], ["", "lemma nta_bisim_flip [flip_simps]:\n  \"nta_bisim (\\<lambda>t. flip (bisim t)) = flip (nta_bisim bisim)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nta_bisim (\\<lambda>t. flip (bisim t)) = flip (nta_bisim bisim)", "by(rule ext)(case_tac x, auto simp add: flip_simps)"], ["", "lemma ta_bisim_flip [flip_simps]:\n  \"ta_bisim (\\<lambda>t. flip (bisim t)) = flip (ta_bisim bisim)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ta_bisim (\\<lambda>t. flip (bisim t)) = flip (ta_bisim bisim)", "by(auto simp add: fun_eq_iff flip_simps ta_bisim_def)"], ["", "locale FWbisimulation_base =\n  r1: multithreaded_base final1 r1 convert_RA +\n  r2: multithreaded_base final2 r2 convert_RA \n  for final1 :: \"'x1 \\<Rightarrow> bool\"\n  and r1 :: \"('l,'t,'x1,'m1,'w,'o) semantics\" (\"_ \\<turnstile> _ -1-_\\<rightarrow> _\" [50, 0, 0, 50] 80)\n  and final2 :: \"'x2 \\<Rightarrow> bool\"\n  and r2 :: \"('l,'t,'x2,'m2,'w,'o) semantics\" (\"_ \\<turnstile> _ -2-_\\<rightarrow> _\" [50, 0, 0, 50] 80) \n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  +\n  fixes bisim :: \"'t \\<Rightarrow> ('x1 \\<times> 'm1, 'x2 \\<times> 'm2) bisim\" (\"_ \\<turnstile> _/ \\<approx> _\" [50, 50, 50] 60)\n  and bisim_wait :: \"('x1, 'x2) bisim\" (\"_/ \\<approx>w _\" [50, 50] 60)\nbegin"], ["", "notation r1.redT_syntax1 (\"_ -1-_\\<triangleright>_\\<rightarrow> _\" [50,0,0,50] 80)"], ["", "notation r2.redT_syntax1 (\"_ -2-_\\<triangleright>_\\<rightarrow> _\" [50,0,0,50] 80)"], ["", "notation r1.RedT (\"_ -1-\\<triangleright>_\\<rightarrow>* _\" [50,0,50] 80)"], ["", "notation r2.RedT (\"_ -2-\\<triangleright>_\\<rightarrow>* _\" [50,0,50] 80)"], ["", "notation r1.must_sync (\"_ \\<turnstile> \\<langle>_,/ _\\<rangle>/ \\<wrong>1\" [50,0,0] 81)"], ["", "notation r2.must_sync (\"_ \\<turnstile> \\<langle>_,/ _\\<rangle>/ \\<wrong>2\" [50,0,0] 81)"], ["", "notation r1.can_sync  (\"_ \\<turnstile> \\<langle>_,/ _\\<rangle>/ _/ \\<wrong>1\" [50,0,0,0] 81)"], ["", "notation r2.can_sync  (\"_ \\<turnstile> \\<langle>_,/ _\\<rangle>/ _/ \\<wrong>2\" [50,0,0,0] 81)"], ["", "abbreviation ta_bisim_bisim_syntax (\"_/ \\<sim>m _\" [50, 50] 60)\nwhere \"ta1 \\<sim>m ta2 \\<equiv> ta_bisim bisim ta1 ta2\""], ["", "definition tbisim :: \"bool \\<Rightarrow> 't \\<Rightarrow> ('x1 \\<times> 'l released_locks) option \\<Rightarrow> 'm1 \\<Rightarrow> ('x2 \\<times> 'l released_locks) option \\<Rightarrow> 'm2 \\<Rightarrow> bool\" where\n  \"\\<And>ln. tbisim nw t ts1 m1 ts2 m2 \\<longleftrightarrow>\n  (case ts1 of None \\<Rightarrow> ts2 = None\n       | \\<lfloor>(x1, ln)\\<rfloor> \\<Rightarrow> (\\<exists>x2. ts2 = \\<lfloor>(x2, ln)\\<rfloor> \\<and> t \\<turnstile> (x1, m1) \\<approx> (x2, m2) \\<and> (nw \\<or> x1 \\<approx>w x2)))\""], ["", "lemma tbisim_NoneI: \"tbisim w t None m None m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tbisim w t None m None m'", "by(simp add: tbisim_def)"], ["", "lemma tbisim_SomeI:\n  \"\\<And>ln. \\<lbrakk> t \\<turnstile> (x, m) \\<approx> (x', m'); nw \\<or> x \\<approx>w x' \\<rbrakk> \\<Longrightarrow> tbisim nw t (Some (x, ln)) m (Some (x', ln)) m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ln.\n       \\<lbrakk>t \\<turnstile> (x, m) \\<approx> (x', m');\n        nw \\<or> x \\<approx>w x'\\<rbrakk>\n       \\<Longrightarrow> tbisim nw t \\<lfloor>(x, ln)\\<rfloor> m\n                          \\<lfloor>(x', ln)\\<rfloor> m'", "by(simp add: tbisim_def)"], ["", "lemma tbisim_cases[consumes 1, case_names None Some]:\n  assumes major: \"tbisim nw t ts1 m1 ts2 m2\"\n  and \"\\<lbrakk> ts1 = None; ts2 = None \\<rbrakk> \\<Longrightarrow> thesis\"\n  and \"\\<And>x ln x'. \\<lbrakk> ts1 = \\<lfloor>(x, ln)\\<rfloor>; ts2 = \\<lfloor>(x', ln)\\<rfloor>; t \\<turnstile> (x, m1) \\<approx> (x', m2); nw \\<or> x \\<approx>w x' \\<rbrakk> \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using assms"], ["proof (prove)\nusing this:\n  tbisim nw t ts1 m1 ts2 m2\n  \\<lbrakk>ts1 = None; ts2 = None\\<rbrakk> \\<Longrightarrow> thesis\n  \\<lbrakk>ts1 = \\<lfloor>(?x13, ?ln13)\\<rfloor>;\n   ts2 = \\<lfloor>(?x'13, ?ln13)\\<rfloor>;\n   t \\<turnstile> (?x13, m1) \\<approx> (?x'13, m2);\n   nw \\<or> ?x13 \\<approx>w ?x'13\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by(auto simp add: tbisim_def)"], ["", "definition mbisim :: \"(('l,'t,'x1,'m1,'w) state, ('l,'t,'x2,'m2,'w) state) bisim\" (\"_ \\<approx>m _\" [50, 50] 60)\nwhere\n  \"s1 \\<approx>m s2 \\<equiv> \n  finite (dom (thr s1)) \\<and> locks s1 = locks s2 \\<and> wset s1 = wset s2 \\<and> wset_thread_ok (wset s1) (thr s1) \\<and>\n  interrupts s1 = interrupts s2 \\<and>\n  (\\<forall>t. tbisim (wset s2 t = None) t (thr s1 t) (shr s1) (thr s2 t) (shr s2))\""], ["", "lemma mbisim_thrNone_eq: \"s1 \\<approx>m s2 \\<Longrightarrow> thr s1 t = None \\<longleftrightarrow> thr s2 t = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow> (thr s1 t = None) = (thr s2 t = None)", "unfolding mbisim_def tbisim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom (thr s1)) \\<and>\n    locks s1 = locks s2 \\<and>\n    wset s1 = wset s2 \\<and>\n    wset_thread_ok (wset s1) (thr s1) \\<and>\n    interrupts s1 = interrupts s2 \\<and>\n    (\\<forall>t.\n        case thr s1 t of None \\<Rightarrow> thr s2 t = None\n        | \\<lfloor>(x1, ln)\\<rfloor> \\<Rightarrow>\n            \\<exists>x2.\n               thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n               t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n               (wset s2 t = None \\<or> x1 \\<approx>w x2)) \\<Longrightarrow>\n    (thr s1 t = None) = (thr s2 t = None)", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom (thr s1)); locks s1 = locks s2; wset s1 = wset s2;\n     wset_thread_ok (wset s1) (thr s1); interrupts s1 = interrupts s2;\n     \\<forall>t.\n        case thr s1 t of None \\<Rightarrow> thr s2 t = None\n        | \\<lfloor>(x1, ln)\\<rfloor> \\<Rightarrow>\n            \\<exists>x2.\n               thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n               t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n               (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> (thr s1 t = None) = (thr s2 t = None)", "apply(erule allE[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom (thr s1)); locks s1 = locks s2; wset s1 = wset s2;\n     wset_thread_ok (wset s1) (thr s1); interrupts s1 = interrupts s2;\n     case thr s1 t of None \\<Rightarrow> thr s2 t = None\n     | \\<lfloor>(x1, ln)\\<rfloor> \\<Rightarrow>\n         \\<exists>x2.\n            thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n            t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n            (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> (thr s1 t = None) = (thr s2 t = None)", "apply(clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mbisim_thrD1:\n  \"\\<And>ln. \\<lbrakk> s1 \\<approx>m s2; thr s1 t = \\<lfloor>(x, ln)\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>x'. thr s2 t = \\<lfloor>(x', ln)\\<rfloor> \\<and> t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2) \\<and> (wset s1 t = None \\<or> x \\<approx>w x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ln.\n       \\<lbrakk>s1 \\<approx>m s2;\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x'.\n                            thr s2 t = \\<lfloor>(x', ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x, shr s1)\n                            \\<approx> (x', shr s2) \\<and>\n                            (wset s1 t = None \\<or> x \\<approx>w x')", "by(fastforce simp add: mbisim_def tbisim_def)"], ["", "lemma mbisim_thrD2:\n  \"\\<And>ln. \\<lbrakk> s1 \\<approx>m s2; thr s2 t = \\<lfloor>(x, ln)\\<rfloor> \\<rbrakk>\n  \\<Longrightarrow> \\<exists>x'. thr s1 t = \\<lfloor>(x', ln)\\<rfloor> \\<and> t \\<turnstile> (x', shr s1) \\<approx> (x, shr s2) \\<and> (wset s2 t = None \\<or> x' \\<approx>w x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ln.\n       \\<lbrakk>s1 \\<approx>m s2;\n        thr s2 t = \\<lfloor>(x, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x'.\n                            thr s1 t = \\<lfloor>(x', ln)\\<rfloor> \\<and>\n                            t \\<turnstile> (x', shr s1)\n                            \\<approx> (x, shr s2) \\<and>\n                            (wset s2 t = None \\<or> x' \\<approx>w x)", "by(frule mbisim_thrNone_eq[where t=t])(cases \"thr s1 t\",(fastforce simp add: mbisim_def tbisim_def)+)"], ["", "lemma mbisim_dom_eq: \"s1 \\<approx>m s2 \\<Longrightarrow> dom (thr s1) = dom (thr s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow> dom (thr s1) = dom (thr s2)", "apply(clarsimp simp add: dom_def fun_eq_iff simp del: not_None_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow>\n    {a. thr s1 a \\<noteq> None} = {a. thr s2 a \\<noteq> None}", "apply(rule Collect_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       s1 \\<approx>m s2 \\<Longrightarrow>\n       (thr s1 a \\<noteq> None) = (thr s2 a \\<noteq> None)", "apply(drule mbisim_thrNone_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       (thr s1 (?t2 a) = None) = (thr s2 (?t2 a) = None) \\<Longrightarrow>\n       (thr s1 a \\<noteq> None) = (thr s2 a \\<noteq> None)", "apply(simp del: not_None_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mbisim_wset_thread_ok1:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> wset_thread_ok (wset s1) (thr s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow> wset_thread_ok (wset s1) (thr s1)", "by(clarsimp simp add: mbisim_def)"], ["", "lemma mbisim_wset_thread_ok2:\n  assumes \"s1 \\<approx>m s2\"\n  shows \"wset_thread_ok (wset s2) (thr s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s2) (thr s2)", "using assms"], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s2) (thr s2)", "apply(clarsimp simp add: mbisim_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom (thr s1)); locks s1 = locks s2; wset s1 = wset s2;\n     wset_thread_ok (wset s2) (thr s1); interrupts s1 = interrupts s2;\n     \\<forall>t.\n        tbisim (wset s2 t = None) t (thr s1 t) (shr s1) (thr s2 t)\n         (shr s2)\\<rbrakk>\n    \\<Longrightarrow> wset_thread_ok (wset s2) (thr s2)", "apply(auto intro!: wset_thread_okI simp add: mbisim_thrNone_eq[OF assms, THEN sym] dest: wset_thread_okD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mbisimI:\n  \"\\<lbrakk> finite (dom (thr s1)); locks s1 = locks s2; wset s1 = wset s2; interrupts s1 = interrupts s2; \n     wset_thread_ok (wset s1) (thr s1);\n     \\<And>t. thr s1 t = None \\<Longrightarrow> thr s2 t = None;\n     \\<And>t x1 ln. thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow> \\<exists>x2. thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<and> t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and> (wset s2 t = None \\<or> x1 \\<approx>w x2) \\<rbrakk>\n  \\<Longrightarrow> s1 \\<approx>m s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom (thr s1)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s1) (thr s1);\n     \\<And>t. thr s1 t = None \\<Longrightarrow> thr s2 t = None;\n     \\<And>t x1 ln.\n        thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x2.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> s1 \\<approx>m s2", "by(fastforce simp add: mbisim_def tbisim_def)"], ["", "lemma mbisimI2:\n  \"\\<lbrakk> finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2; interrupts s1 = interrupts s2;\n     wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln. thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow> \\<exists>x1. thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and> t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and> (wset s2 t = None \\<or> x1 \\<approx>w x2) \\<rbrakk>\n  \\<Longrightarrow> s1 \\<approx>m s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> s1 \\<approx>m s2", "apply(auto simp add: mbisim_def tbisim_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> finite (dom (thr s1))\n 2. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> wset_thread_ok (wset s2) (thr s1)\n 3. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 4. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> wset_thread_ok (wset s2) (thr s1)\n 2. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> finite (dom (thr s1))\n 3. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 4. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "apply(rule wset_thread_okI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> wset s2 t = None\n 2. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> finite (dom (thr s1))\n 3. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 4. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "apply(case_tac \"thr s2 t\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None; thr s2 t = None\\<rbrakk>\n       \\<Longrightarrow> wset s2 t = None\n 2. \\<And>t a.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None; thr s2 t = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> wset s2 t = None\n 3. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> finite (dom (thr s1))\n 4. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 5. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "apply(auto dest!: wset_thread_okD)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t a.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None; thr s2 t = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> wset s2 t = None\n 2. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> finite (dom (thr s1))\n 3. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 4. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> finite (dom (thr s1))\n 2. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 3. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "apply(erule back_subst[where P=finite])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>locks s1 = locks s2; wset s1 = wset s2;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> dom (thr s2) = dom (thr s1)\n 2. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 3. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "apply(clarsimp simp add: dom_def fun_eq_iff simp del: not_None_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>locks s1 = locks s2; \\<forall>x. wset s1 x = wset s2 x;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> {a. thr s2 a \\<noteq> None} =\n                      {a. thr s1 a \\<noteq> None}\n 2. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 3. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 2. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)\n 3. \\<lbrakk>locks s1 = locks s2; \\<forall>x. wset s1 x = wset s2 x;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> {a. thr s2 a \\<noteq> None} =\n                      {a. thr s1 a \\<noteq> None}", "apply(rename_tac t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 2. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)\n 3. \\<lbrakk>locks s1 = locks s2; \\<forall>x. wset s1 x = wset s2 x;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2)\\<rbrakk>\n    \\<Longrightarrow> {a. thr s2 a \\<noteq> None} =\n                      {a. thr s1 a \\<noteq> None}", "apply(case_tac [!] \"thr s2 t\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None; thr s2 t = None\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 2. \\<And>t a.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = None; thr s2 t = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> thr s2 t = None\n 3. \\<And>t a b.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>; thr s2 t = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)\n 4. \\<And>t a b aa.\n       \\<lbrakk>finite (dom (thr s2)); locks s1 = locks s2;\n        wset s1 = wset s2; interrupts s1 = interrupts s2;\n        wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s1 t = \\<lfloor>(a, b)\\<rfloor>;\n        thr s2 t = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x2.\n                            thr s2 t = \\<lfloor>(x2, b)\\<rfloor> \\<and>\n                            t \\<turnstile> (a, shr s1)\n                            \\<approx> (x2, shr s2) \\<and>\n                            (wset s2 t = None \\<or> a \\<approx>w x2)\n 5. \\<lbrakk>locks s1 = locks s2; \\<forall>x. wset s1 x = wset s2 x;\n     interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n     \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n     \\<And>t x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        \\<exists>x1.\n           thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n           t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n           (wset s2 t = None \\<or> x1 \\<approx>w x2);\n     thr s2 t = None\\<rbrakk>\n    \\<Longrightarrow> {a. thr s2 a \\<noteq> None} =\n                      {a. thr s1 a \\<noteq> None}\n 6. \\<And>a.\n       \\<lbrakk>locks s1 = locks s2; \\<forall>x. wset s1 x = wset s2 x;\n        interrupts s1 = interrupts s2; wset_thread_ok (wset s2) (thr s2);\n        \\<And>t. thr s2 t = None \\<Longrightarrow> thr s1 t = None;\n        \\<And>t x2 ln.\n           thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n           \\<exists>x1.\n              thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> \\<and>\n              t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2) \\<and>\n              (wset s2 t = None \\<or> x1 \\<approx>w x2);\n        thr s2 t = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> {a. thr s2 a \\<noteq> None} =\n                         {a. thr s1 a \\<noteq> None}", "by fastforce+"], ["", "lemma mbisim_finite1:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> finite (dom (thr s1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow> finite (dom (thr s1))", "by(simp add: mbisim_def)"], ["", "lemma mbisim_finite2:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> finite (dom (thr s2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow> finite (dom (thr s2))", "by(frule mbisim_finite1)(simp add: mbisim_dom_eq)"], ["", "definition mta_bisim :: \"('t \\<times> ('l,'t,'x1,'m1,'w,'o) thread_action,\n                       't \\<times> ('l,'t,'x2,'m2,'w,'o) thread_action) bisim\"\n  (\"_/ \\<sim>T _\" [50, 50] 60)\nwhere \"tta1 \\<sim>T tta2 \\<equiv> fst tta1 = fst tta2 \\<and> snd tta1 \\<sim>m snd tta2\""], ["", "lemma mta_bisim_conv [simp]: \"(t, ta1) \\<sim>T (t', ta2) \\<longleftrightarrow> t = t' \\<and> ta1 \\<sim>m ta2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, ta1) \\<sim>T (t', ta2) = (t = t' \\<and> ta1 \\<sim>m ta2)", "by(simp add: mta_bisim_def)"], ["", "definition bisim_inv :: \"bool\" where\n  \"bisim_inv \\<equiv> (\\<forall>s1 ta1 s1' s2 t. t \\<turnstile> s1 \\<approx> s2 \\<longrightarrow> t \\<turnstile> s1 -1-ta1\\<rightarrow> s1' \\<longrightarrow> (\\<exists>s2'. t \\<turnstile> s1' \\<approx> s2')) \\<and>\n               (\\<forall>s2 ta2 s2' s1 t. t \\<turnstile> s1 \\<approx> s2 \\<longrightarrow> t \\<turnstile> s2 -2-ta2\\<rightarrow> s2' \\<longrightarrow> (\\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'))\""], ["", "lemma bisim_invI:\n  \"\\<lbrakk> \\<And>s1 ta1 s1' s2 t. \\<lbrakk> t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s1 -1-ta1\\<rightarrow> s1' \\<rbrakk> \\<Longrightarrow> \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2';\n     \\<And>s2 ta2 s2' s1 t. \\<lbrakk> t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s2 -2-ta2\\<rightarrow> s2' \\<rbrakk> \\<Longrightarrow> \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2' \\<rbrakk>\n  \\<Longrightarrow> bisim_inv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s1 ta1 s1' s2 t.\n                \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n                 t \\<turnstile> s1 -1-ta1\\<rightarrow> s1'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>s2'. t \\<turnstile> s1'\n                                     \\<approx> s2';\n     \\<And>s2 ta2 s2' s1 t.\n        \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n         t \\<turnstile> s2 -2-ta2\\<rightarrow> s2'\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s1'. t \\<turnstile> s1'\n                             \\<approx> s2'\\<rbrakk>\n    \\<Longrightarrow> bisim_inv", "by(auto simp add: bisim_inv_def)"], ["", "lemma bisim_invD1:\n  \"\\<lbrakk> bisim_inv; t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s1 -1-ta1\\<rightarrow> s1' \\<rbrakk> \\<Longrightarrow> \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bisim_inv; t \\<turnstile> s1 \\<approx> s2;\n     t \\<turnstile> s1 -1-ta1\\<rightarrow> s1'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "unfolding bisim_inv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>s1 ta1 s1' s2 t.\n                 t \\<turnstile> s1 \\<approx> s2 \\<longrightarrow>\n                 t \\<turnstile> s1 -1-ta1\\<rightarrow> s1' \\<longrightarrow>\n                 (\\<exists>s2'. t \\<turnstile> s1' \\<approx> s2')) \\<and>\n             (\\<forall>s2 ta2 s2' s1 t.\n                 t \\<turnstile> s1 \\<approx> s2 \\<longrightarrow>\n                 t \\<turnstile> s2 -2-ta2\\<rightarrow> s2' \\<longrightarrow>\n                 (\\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'));\n     t \\<turnstile> s1 \\<approx> s2;\n     t \\<turnstile> s1 -1-ta1\\<rightarrow> s1'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "by blast"], ["", "lemma bisim_invD2:\n  \"\\<lbrakk> bisim_inv; t \\<turnstile> s1 \\<approx> s2; t \\<turnstile> s2 -2-ta2\\<rightarrow> s2' \\<rbrakk> \\<Longrightarrow> \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bisim_inv; t \\<turnstile> s1 \\<approx> s2;\n     t \\<turnstile> s2 -2-ta2\\<rightarrow> s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'", "unfolding bisim_inv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>s1 ta1 s1' s2 t.\n                 t \\<turnstile> s1 \\<approx> s2 \\<longrightarrow>\n                 t \\<turnstile> s1 -1-ta1\\<rightarrow> s1' \\<longrightarrow>\n                 (\\<exists>s2'. t \\<turnstile> s1' \\<approx> s2')) \\<and>\n             (\\<forall>s2 ta2 s2' s1 t.\n                 t \\<turnstile> s1 \\<approx> s2 \\<longrightarrow>\n                 t \\<turnstile> s2 -2-ta2\\<rightarrow> s2' \\<longrightarrow>\n                 (\\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'));\n     t \\<turnstile> s1 \\<approx> s2;\n     t \\<turnstile> s2 -2-ta2\\<rightarrow> s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'", "by blast"], ["", "lemma thread_oks_bisim_inv:\n  \"\\<lbrakk> \\<forall>t. ts1 t = None \\<longleftrightarrow> ts2 t = None; list_all2 (nta_bisim bisim) tas1 tas2 \\<rbrakk>\n  \\<Longrightarrow> thread_oks ts1 tas1 \\<longleftrightarrow> thread_oks ts2 tas2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n     list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n    \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 tas2", "proof(induct tas2 arbitrary: tas1 ts1 ts2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>tas1 ts1 ts2.\n       \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 []\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 []\n 2. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>t. (ts1 t = None) = (ts2 t = None)\n  list_all2 (nta_bisim bisim) tas1 []\n\ngoal (2 subgoals):\n 1. \\<And>tas1 ts1 ts2.\n       \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 []\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 []\n 2. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>t. (ts1 t = None) = (ts2 t = None)\n  list_all2 (nta_bisim bisim) tas1 []\n\ngoal (1 subgoal):\n 1. thread_oks ts1 tas1 = thread_oks ts2 []", "by(simp)"], ["proof (state)\nthis:\n  thread_oks ts1 tas1 = thread_oks ts2 []\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "case (Cons ta2 TAS2 tas1 TS1 TS2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>t. (?ts1.13 t = None) = (?ts2.13 t = None);\n   list_all2 (nta_bisim bisim) ?tas1.13 TAS2\\<rbrakk>\n  \\<Longrightarrow> thread_oks ?ts1.13 ?tas1.13 = thread_oks ?ts2.13 TAS2\n  \\<forall>t. (TS1 t = None) = (TS2 t = None)\n  list_all2 (nta_bisim bisim) tas1 (ta2 # TAS2)\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "note IH = \\<open>\\<And>ts1 tas1 ts2. \\<lbrakk> \\<forall>t. ts1 t = None \\<longleftrightarrow> ts2 t = None; list_all2 (nta_bisim bisim) tas1 TAS2 \\<rbrakk>\n             \\<Longrightarrow> thread_oks ts1 tas1 \\<longleftrightarrow> thread_oks ts2 TAS2\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>t. (?ts1.0 t = None) = (?ts2.0 t = None);\n   list_all2 (nta_bisim bisim) ?tas1.0 TAS2\\<rbrakk>\n  \\<Longrightarrow> thread_oks ?ts1.0 ?tas1.0 = thread_oks ?ts2.0 TAS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "note eqNone = \\<open>\\<forall>t. TS1 t = None \\<longleftrightarrow> TS2 t = None\\<close>[rule_format]"], ["proof (state)\nthis:\n  (TS1 ?t = None) = (TS2 ?t = None)\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "hence fti: \"free_thread_id TS1 = free_thread_id TS2\""], ["proof (prove)\nusing this:\n  (TS1 ?t = None) = (TS2 ?t = None)\n\ngoal (1 subgoal):\n 1. free_thread_id TS1 = free_thread_id TS2", "by(auto simp add: free_thread_id_def)"], ["proof (state)\nthis:\n  free_thread_id TS1 = free_thread_id TS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "from \\<open>list_all2 (nta_bisim bisim) tas1 (ta2 # TAS2)\\<close>"], ["proof (chain)\npicking this:\n  list_all2 (nta_bisim bisim) tas1 (ta2 # TAS2)", "obtain ta1 TAS1 where \"tas1 = ta1 # TAS1\" \"nta_bisim bisim ta1 ta2\" \"list_all2 (nta_bisim bisim) TAS1 TAS2\""], ["proof (prove)\nusing this:\n  list_all2 (nta_bisim bisim) tas1 (ta2 # TAS2)\n\ngoal (1 subgoal):\n 1. (\\<And>ta1 TAS1.\n        \\<lbrakk>tas1 = ta1 # TAS1; nta_bisim bisim ta1 ta2;\n         list_all2 (nta_bisim bisim) TAS1 TAS2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: list_all2_Cons2)"], ["proof (state)\nthis:\n  tas1 = ta1 # TAS1\n  nta_bisim bisim ta1 ta2\n  list_all2 (nta_bisim bisim) TAS1 TAS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "moreover"], ["proof (state)\nthis:\n  tas1 = ta1 # TAS1\n  nta_bisim bisim ta1 ta2\n  list_all2 (nta_bisim bisim) TAS1 TAS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "{"], ["proof (state)\nthis:\n  tas1 = ta1 # TAS1\n  nta_bisim bisim ta1 ta2\n  list_all2 (nta_bisim bisim) TAS1 TAS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "from \\<open>nta_bisim bisim ta1 ta2\\<close>"], ["proof (chain)\npicking this:\n  nta_bisim bisim ta1 ta2", "have \"redT_updT' TS1 ta1 t = None \\<longleftrightarrow> redT_updT' TS2 ta2 t = None\""], ["proof (prove)\nusing this:\n  nta_bisim bisim ta1 ta2\n\ngoal (1 subgoal):\n 1. (redT_updT' TS1 ta1 t = None) = (redT_updT' TS2 ta2 t = None)", "by(cases ta1, auto split: if_split_asm simp add: eqNone)"], ["proof (state)\nthis:\n  (redT_updT' TS1 ta1 t = None) = (redT_updT' TS2 ta2 t = None)\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "}"], ["proof (state)\nthis:\n  (redT_updT' TS1 ta1 ?t15 = None) = (redT_updT' TS2 ta2 ?t15 = None)\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "ultimately"], ["proof (chain)\npicking this:\n  tas1 = ta1 # TAS1\n  nta_bisim bisim ta1 ta2\n  list_all2 (nta_bisim bisim) TAS1 TAS2\n  (redT_updT' TS1 ta1 ?t15 = None) = (redT_updT' TS2 ta2 ?t15 = None)", "have \"thread_oks (redT_updT' TS1 ta1) TAS1 \\<longleftrightarrow> thread_oks (redT_updT' TS2 ta2) TAS2\""], ["proof (prove)\nusing this:\n  tas1 = ta1 # TAS1\n  nta_bisim bisim ta1 ta2\n  list_all2 (nta_bisim bisim) TAS1 TAS2\n  (redT_updT' TS1 ta1 ?t15 = None) = (redT_updT' TS2 ta2 ?t15 = None)\n\ngoal (1 subgoal):\n 1. thread_oks (redT_updT' TS1 ta1) TAS1 =\n    thread_oks (redT_updT' TS2 ta2) TAS2", "by -(rule IH, auto)"], ["proof (state)\nthis:\n  thread_oks (redT_updT' TS1 ta1) TAS1 =\n  thread_oks (redT_updT' TS2 ta2) TAS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "moreover"], ["proof (state)\nthis:\n  thread_oks (redT_updT' TS1 ta1) TAS1 =\n  thread_oks (redT_updT' TS2 ta2) TAS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "from \\<open>nta_bisim bisim ta1 ta2\\<close> fti"], ["proof (chain)\npicking this:\n  nta_bisim bisim ta1 ta2\n  free_thread_id TS1 = free_thread_id TS2", "have \"thread_ok TS1 ta1 = thread_ok TS2 ta2\""], ["proof (prove)\nusing this:\n  nta_bisim bisim ta1 ta2\n  free_thread_id TS1 = free_thread_id TS2\n\ngoal (1 subgoal):\n 1. thread_ok TS1 ta1 = thread_ok TS2 ta2", "by(cases ta1, auto)"], ["proof (state)\nthis:\n  thread_ok TS1 ta1 = thread_ok TS2 ta2\n\ngoal (1 subgoal):\n 1. \\<And>a tas2 tas1 ts1 ts2.\n       \\<lbrakk>\\<And>tas1 ts1 ts2.\n                   \\<lbrakk>\\<forall>t. (ts1 t = None) = (ts2 t = None);\n                    list_all2 (nta_bisim bisim) tas1 tas2\\<rbrakk>\n                   \\<Longrightarrow> thread_oks ts1 tas1 =\n                                     thread_oks ts2 tas2;\n        \\<forall>t. (ts1 t = None) = (ts2 t = None);\n        list_all2 (nta_bisim bisim) tas1 (a # tas2)\\<rbrakk>\n       \\<Longrightarrow> thread_oks ts1 tas1 = thread_oks ts2 (a # tas2)", "ultimately"], ["proof (chain)\npicking this:\n  thread_oks (redT_updT' TS1 ta1) TAS1 =\n  thread_oks (redT_updT' TS2 ta2) TAS2\n  thread_ok TS1 ta1 = thread_ok TS2 ta2", "show ?case"], ["proof (prove)\nusing this:\n  thread_oks (redT_updT' TS1 ta1) TAS1 =\n  thread_oks (redT_updT' TS2 ta2) TAS2\n  thread_ok TS1 ta1 = thread_ok TS2 ta2\n\ngoal (1 subgoal):\n 1. thread_oks TS1 tas1 = thread_oks TS2 (ta2 # TAS2)", "using \\<open>tas1 = ta1 # TAS1\\<close>"], ["proof (prove)\nusing this:\n  thread_oks (redT_updT' TS1 ta1) TAS1 =\n  thread_oks (redT_updT' TS2 ta2) TAS2\n  thread_ok TS1 ta1 = thread_ok TS2 ta2\n  tas1 = ta1 # TAS1\n\ngoal (1 subgoal):\n 1. thread_oks TS1 tas1 = thread_oks TS2 (ta2 # TAS2)", "by auto"], ["proof (state)\nthis:\n  thread_oks TS1 tas1 = thread_oks TS2 (ta2 # TAS2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma redT_updT_nta_bisim_inv:\n  \"\\<lbrakk> nta_bisim bisim ta1 ta2; ts1 T = None \\<longleftrightarrow> ts2 T = None \\<rbrakk> \\<Longrightarrow> redT_updT ts1 ta1 T = None \\<longleftrightarrow> redT_updT ts2 ta2 T = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nta_bisim bisim ta1 ta2;\n     (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n    \\<Longrightarrow> (redT_updT ts1 ta1 T = None) =\n                      (redT_updT ts2 ta2 T = None)", "by(cases ta1, auto)"], ["", "lemma redT_updTs_nta_bisim_inv:\n  \"\\<lbrakk> list_all2 (nta_bisim bisim) tas1 tas2; ts1 T = None \\<longleftrightarrow> ts2 T = None \\<rbrakk>\n  \\<Longrightarrow> redT_updTs ts1 tas1 T = None \\<longleftrightarrow> redT_updTs ts2 tas2 T = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n     (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n    \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                      (redT_updTs ts2 tas2 T = None)", "proof(induct tas1 arbitrary: tas2 ts1 ts2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>tas2 ts1 ts2.\n       \\<lbrakk>list_all2 (nta_bisim bisim) [] tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 [] T = None) =\n                         (redT_updTs ts2 tas2 T = None)\n 2. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "case Nil"], ["proof (state)\nthis:\n  list_all2 (nta_bisim bisim) [] tas2\n  (ts1 T = None) = (ts2 T = None)\n\ngoal (2 subgoals):\n 1. \\<And>tas2 ts1 ts2.\n       \\<lbrakk>list_all2 (nta_bisim bisim) [] tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 [] T = None) =\n                         (redT_updTs ts2 tas2 T = None)\n 2. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "thus ?case"], ["proof (prove)\nusing this:\n  list_all2 (nta_bisim bisim) [] tas2\n  (ts1 T = None) = (ts2 T = None)\n\ngoal (1 subgoal):\n 1. (redT_updTs ts1 [] T = None) = (redT_updTs ts2 tas2 T = None)", "by(simp)"], ["proof (state)\nthis:\n  (redT_updTs ts1 [] T = None) = (redT_updTs ts2 tas2 T = None)\n\ngoal (1 subgoal):\n 1. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "case (Cons TA1 TAS1 tas2 TS1 TS2)"], ["proof (state)\nthis:\n  \\<lbrakk>list_all2 (nta_bisim bisim) TAS1 ?tas2.13;\n   (?ts1.13 T = None) = (?ts2.13 T = None)\\<rbrakk>\n  \\<Longrightarrow> (redT_updTs ?ts1.13 TAS1 T = None) =\n                    (redT_updTs ?ts2.13 ?tas2.13 T = None)\n  list_all2 (nta_bisim bisim) (TA1 # TAS1) tas2\n  (TS1 T = None) = (TS2 T = None)\n\ngoal (1 subgoal):\n 1. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "note IH = \\<open>\\<And>tas2 ts1 ts2. \\<lbrakk>list_all2 (nta_bisim bisim) TAS1 tas2; (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n            \\<Longrightarrow> (redT_updTs ts1 TAS1 T = None) = (redT_updTs ts2 tas2 T = None)\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>list_all2 (nta_bisim bisim) TAS1 ?tas2.0;\n   (?ts1.0 T = None) = (?ts2.0 T = None)\\<rbrakk>\n  \\<Longrightarrow> (redT_updTs ?ts1.0 TAS1 T = None) =\n                    (redT_updTs ?ts2.0 ?tas2.0 T = None)\n\ngoal (1 subgoal):\n 1. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "from \\<open>list_all2 (nta_bisim bisim) (TA1 # TAS1) tas2\\<close>"], ["proof (chain)\npicking this:\n  list_all2 (nta_bisim bisim) (TA1 # TAS1) tas2", "obtain TA2 TAS2 where \"tas2 = TA2 # TAS2\" \"nta_bisim bisim TA1 TA2\" \"list_all2 (nta_bisim bisim) TAS1 TAS2\""], ["proof (prove)\nusing this:\n  list_all2 (nta_bisim bisim) (TA1 # TAS1) tas2\n\ngoal (1 subgoal):\n 1. (\\<And>TA2 TAS2.\n        \\<lbrakk>tas2 = TA2 # TAS2; nta_bisim bisim TA1 TA2;\n         list_all2 (nta_bisim bisim) TAS1 TAS2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: list_all2_Cons1)"], ["proof (state)\nthis:\n  tas2 = TA2 # TAS2\n  nta_bisim bisim TA1 TA2\n  list_all2 (nta_bisim bisim) TAS1 TAS2\n\ngoal (1 subgoal):\n 1. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "from \\<open>nta_bisim bisim TA1 TA2\\<close> \\<open>(TS1 T = None) = (TS2 T = None)\\<close>"], ["proof (chain)\npicking this:\n  nta_bisim bisim TA1 TA2\n  (TS1 T = None) = (TS2 T = None)", "have \"redT_updT TS1 TA1 T = None \\<longleftrightarrow> redT_updT TS2 TA2 T = None\""], ["proof (prove)\nusing this:\n  nta_bisim bisim TA1 TA2\n  (TS1 T = None) = (TS2 T = None)\n\ngoal (1 subgoal):\n 1. (redT_updT TS1 TA1 T = None) = (redT_updT TS2 TA2 T = None)", "by(rule redT_updT_nta_bisim_inv)"], ["proof (state)\nthis:\n  (redT_updT TS1 TA1 T = None) = (redT_updT TS2 TA2 T = None)\n\ngoal (1 subgoal):\n 1. \\<And>a tas1 tas2 ts1 ts2.\n       \\<lbrakk>\\<And>tas2 ts1 ts2.\n                   \\<lbrakk>list_all2 (nta_bisim bisim) tas1 tas2;\n                    (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n                   \\<Longrightarrow> (redT_updTs ts1 tas1 T = None) =\n                                     (redT_updTs ts2 tas2 T = None);\n        list_all2 (nta_bisim bisim) (a # tas1) tas2;\n        (ts1 T = None) = (ts2 T = None)\\<rbrakk>\n       \\<Longrightarrow> (redT_updTs ts1 (a # tas1) T = None) =\n                         (redT_updTs ts2 tas2 T = None)", "with IH[OF \\<open>list_all2 (nta_bisim bisim) TAS1 TAS2\\<close>, of \"redT_updT TS1 TA1\" \"redT_updT TS2 TA2\"] \\<open>tas2 = TA2 # TAS2\\<close>"], ["proof (chain)\npicking this:\n  (redT_updT TS1 TA1 T = None) =\n  (redT_updT TS2 TA2 T = None) \\<Longrightarrow>\n  (redT_updTs (redT_updT TS1 TA1) TAS1 T = None) =\n  (redT_updTs (redT_updT TS2 TA2) TAS2 T = None)\n  tas2 = TA2 # TAS2\n  (redT_updT TS1 TA1 T = None) = (redT_updT TS2 TA2 T = None)", "show ?case"], ["proof (prove)\nusing this:\n  (redT_updT TS1 TA1 T = None) =\n  (redT_updT TS2 TA2 T = None) \\<Longrightarrow>\n  (redT_updTs (redT_updT TS1 TA1) TAS1 T = None) =\n  (redT_updTs (redT_updT TS2 TA2) TAS2 T = None)\n  tas2 = TA2 # TAS2\n  (redT_updT TS1 TA1 T = None) = (redT_updT TS2 TA2 T = None)\n\ngoal (1 subgoal):\n 1. (redT_updTs TS1 (TA1 # TAS1) T = None) = (redT_updTs TS2 tas2 T = None)", "by simp"], ["proof (state)\nthis:\n  (redT_updTs TS1 (TA1 # TAS1) T = None) = (redT_updTs TS2 tas2 T = None)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma tbisim_flip [flip_simps]:\n  \"FWbisimulation_base.tbisim (\\<lambda>t. flip (bisim t)) (flip bisim_wait) w t ts2 m2 ts1 m1 =\n   FWbisimulation_base.tbisim bisim bisim_wait w t ts1 m1 ts2 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base.tbisim (\\<lambda>t. flip (bisim t))\n     (flip bisim_wait) w t ts2 m2 ts1 m1 =\n    FWbisimulation_base.tbisim bisim bisim_wait w t ts1 m1 ts2 m2", "unfolding FWbisimulation_base.tbisim_def flip_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case ts2 of None \\<Rightarrow> ts1 = None\n     | \\<lfloor>(x1, ln)\\<rfloor> \\<Rightarrow>\n         \\<exists>x2.\n            ts1 = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n            bisim t (x2, m1) (x1, m2) \\<and> (w \\<or> bisim_wait x2 x1)) =\n    (case ts1 of None \\<Rightarrow> ts2 = None\n     | \\<lfloor>(x1, ln)\\<rfloor> \\<Rightarrow>\n         \\<exists>x2.\n            ts2 = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n            bisim t (x1, m1) (x2, m2) \\<and> (w \\<or> bisim_wait x1 x2))", "by auto"], ["", "lemma mbisim_flip [flip_simps]:\n  \"FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t)) (flip bisim_wait) s2 s1 =\n   FWbisimulation_base.mbisim bisim bisim_wait s1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (flip bisim_wait) s2 s1 =\n    FWbisimulation_base.mbisim bisim bisim_wait s1 s2", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (flip bisim_wait) s2 s1 \\<Longrightarrow>\n    FWbisimulation_base.mbisim bisim bisim_wait s1 s2\n 2. FWbisimulation_base.mbisim bisim bisim_wait s1 s2 \\<Longrightarrow>\n    FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (flip bisim_wait) s2 s1", "apply(frule FWbisimulation_base.mbisim_dom_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n              (flip bisim_wait) s2 s1;\n     dom (thr s2) = dom (thr s1)\\<rbrakk>\n    \\<Longrightarrow> FWbisimulation_base.mbisim bisim bisim_wait s1 s2\n 2. FWbisimulation_base.mbisim bisim bisim_wait s1 s2 \\<Longrightarrow>\n    FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (flip bisim_wait) s2 s1", "apply(frule FWbisimulation_base.mbisim_wset_thread_ok2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n              (flip bisim_wait) s2 s1;\n     dom (thr s2) = dom (thr s1); wset_thread_ok (wset s1) (thr s1)\\<rbrakk>\n    \\<Longrightarrow> FWbisimulation_base.mbisim bisim bisim_wait s1 s2\n 2. FWbisimulation_base.mbisim bisim bisim_wait s1 s2 \\<Longrightarrow>\n    FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (flip bisim_wait) s2 s1", "apply(fastforce simp add: FWbisimulation_base.mbisim_def flip_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base.mbisim bisim bisim_wait s1 s2 \\<Longrightarrow>\n    FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (flip bisim_wait) s2 s1", "apply(frule FWbisimulation_base.mbisim_dom_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>FWbisimulation_base.mbisim bisim bisim_wait s1 s2;\n     dom (thr s1) = dom (thr s2)\\<rbrakk>\n    \\<Longrightarrow> FWbisimulation_base.mbisim\n                       (\\<lambda>t. flip (bisim t)) (flip bisim_wait) s2 s1", "apply(frule FWbisimulation_base.mbisim_wset_thread_ok2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>FWbisimulation_base.mbisim bisim bisim_wait s1 s2;\n     dom (thr s1) = dom (thr s2); wset_thread_ok (wset s2) (thr s2)\\<rbrakk>\n    \\<Longrightarrow> FWbisimulation_base.mbisim\n                       (\\<lambda>t. flip (bisim t)) (flip bisim_wait) s2 s1", "apply(fastforce simp add: FWbisimulation_base.mbisim_def flip_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mta_bisim_flip [flip_simps]:\n  \"FWbisimulation_base.mta_bisim (\\<lambda>t. flip (bisim t)) = flip (FWbisimulation_base.mta_bisim bisim)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base.mta_bisim (\\<lambda>t. flip (bisim t)) =\n    flip (FWbisimulation_base.mta_bisim bisim)", "by(auto simp add: fun_eq_iff flip_simps FWbisimulation_base.mta_bisim_def)"], ["", "lemma flip_const [simp]: \"flip (\\<lambda>a b. c) = (\\<lambda>a b. c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. flip (\\<lambda>a b. c) = (\\<lambda>a b. c)", "by(rule flip_def)"], ["", "lemma mbisim_K_flip [flip_simps]:\n  \"FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t)) (\\<lambda>x1 x2. c) s1 s2 = \n   FWbisimulation_base.mbisim bisim (\\<lambda>x1 x2. c) s2 s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (\\<lambda>x1 x2. c) s1 s2 =\n    FWbisimulation_base.mbisim bisim (\\<lambda>x1 x2. c) s2 s1", "using mbisim_flip[of bisim \"\\<lambda>x1 x2. c\" s1 s2]"], ["proof (prove)\nusing this:\n  FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n   (flip (\\<lambda>x1 x2. c)) s1 s2 =\n  FWbisimulation_base.mbisim bisim (\\<lambda>x1 x2. c) s2 s1\n\ngoal (1 subgoal):\n 1. FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (\\<lambda>x1 x2. c) s1 s2 =\n    FWbisimulation_base.mbisim bisim (\\<lambda>x1 x2. c) s2 s1", "unfolding flip_const"], ["proof (prove)\nusing this:\n  FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n   (\\<lambda>x1 x2. c) s1 s2 =\n  FWbisimulation_base.mbisim bisim (\\<lambda>x1 x2. c) s2 s1\n\ngoal (1 subgoal):\n 1. FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n     (\\<lambda>x1 x2. c) s1 s2 =\n    FWbisimulation_base.mbisim bisim (\\<lambda>x1 x2. c) s2 s1", "."], ["", "context FWbisimulation_base begin"], ["", "lemma mbisim_actions_ok_bisim_no_join_12:\n  assumes mbisim: \"mbisim s1 s2\"\n  and \"collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {}\"\n  and \"ta_bisim bisim ta1 ta2\"\n  and \"r1.actions_ok s1 t ta1\"\n  shows \"r2.actions_ok s2 t ta2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r2.actions_ok s2 t ta2", "using assms mbisim_thrNone_eq[OF mbisim]"], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {}\n  ta1 \\<sim>m ta2\n  r1.actions_ok s1 t ta1\n  (thr s1 ?t = None) = (thr s2 ?t = None)\n\ngoal (1 subgoal):\n 1. r2.actions_ok s2 t ta2", "by(auto simp add: ta_bisim_def mbisim_def intro: thread_oks_bisim_inv[THEN iffD1] r2.may_join_cond_action_oks)"], ["", "lemma mbisim_actions_ok_bisim_no_join_21:\n  \"\\<lbrakk> mbisim s1 s2; collect_cond_actions \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> = {}; ta_bisim bisim ta1 ta2; r2.actions_ok s2 t ta2 \\<rbrakk>\n  \\<Longrightarrow> r1.actions_ok s1 t ta1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2;\n     collect_cond_actions \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> = {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> r1.actions_ok s1 t ta1", "using FWbisimulation_base.mbisim_actions_ok_bisim_no_join_12[where bisim=\"\\<lambda>t. flip (bisim t)\" and bisim_wait=\"flip bisim_wait\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n            (flip bisim_wait) ?s1.0 ?s2.0;\n   collect_cond_actions \\<lbrace>?ta1.0\\<rbrace>\\<^bsub>c\\<^esub> = {};\n   ta_bisim (\\<lambda>t. flip (bisim t)) ?ta1.0 ?ta2.0;\n   final_thread.actions_ok ?final1.0 ?s1.0 ?t ?ta1.0\\<rbrakk>\n  \\<Longrightarrow> final_thread.actions_ok ?final2.0 ?s2.0 ?t ?ta2.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2;\n     collect_cond_actions \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> = {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> r1.actions_ok s1 t ta1", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.mbisim bisim bisim_wait ?s2.0 ?s1.0;\n   collect_cond_actions \\<lbrace>?ta1.0\\<rbrace>\\<^bsub>c\\<^esub> = {};\n   ?ta2.0 \\<sim>m ?ta1.0;\n   final_thread.actions_ok ?final1.0 ?s1.0 ?t ?ta1.0\\<rbrakk>\n  \\<Longrightarrow> final_thread.actions_ok ?final2.0 ?s2.0 ?t ?ta2.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2;\n     collect_cond_actions \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> = {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> r1.actions_ok s1 t ta1", "."], ["", "lemma mbisim_actions_ok_bisim_no_join:\n  \"\\<lbrakk> mbisim s1 s2; collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {}; ta_bisim bisim ta1 ta2 \\<rbrakk> \n  \\<Longrightarrow> r1.actions_ok s1 t ta1 = r2.actions_ok s2 t ta2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2;\n     collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {};\n     ta1 \\<sim>m ta2\\<rbrakk>\n    \\<Longrightarrow> r1.actions_ok s1 t ta1 = r2.actions_ok s2 t ta2", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 \\<approx>m s2;\n     collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {};\n     ta1 \\<sim>m ta2; r1.actions_ok s1 t ta1\\<rbrakk>\n    \\<Longrightarrow> r2.actions_ok s2 t ta2\n 2. \\<lbrakk>s1 \\<approx>m s2;\n     collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> r1.actions_ok s1 t ta1", "apply(erule (3) mbisim_actions_ok_bisim_no_join_12)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2;\n     collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> = {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> r1.actions_ok s1 t ta1", "apply(erule mbisim_actions_ok_bisim_no_join_21[where ?ta2.0 = ta2])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n             {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> collect_cond_actions\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> =\n                      {}\n 2. \\<lbrakk>collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n             {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> ta1 \\<sim>m ta2\n 3. \\<lbrakk>collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n             {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> r2.actions_ok s2 t ta2", "apply(simp add: ta_bisim_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n             {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> ta1 \\<sim>m ta2\n 2. \\<lbrakk>collect_cond_actions \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n             {};\n     ta1 \\<sim>m ta2; r2.actions_ok s2 t ta2\\<rbrakk>\n    \\<Longrightarrow> r2.actions_ok s2 t ta2", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "locale FWbisimulation_base_aux = FWbisimulation_base +\n  r1: multithreaded final1 r1 convert_RA +\n  r2: multithreaded final2 r2 convert_RA +\n  constrains final1 :: \"'x1 \\<Rightarrow> bool\"\n  and r1 :: \"('l,'t,'x1,'m1,'w, 'o) semantics\"\n  and final2 :: \"'x2 \\<Rightarrow> bool\"\n  and r2 :: \"('l,'t,'x2,'m2,'w, 'o) semantics\"\n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  and bisim :: \"'t \\<Rightarrow> ('x1 \\<times> 'm1, 'x2 \\<times> 'm2) bisim\"\n  and bisim_wait :: \"('x1, 'x2) bisim\"\nbegin"], ["", "lemma FWbisimulation_base_aux_flip:\n  \"FWbisimulation_base_aux final2 r2 final1 r1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base_aux final2 r2 final1 r1", "by(unfold_locales)"], ["", "end"], ["", "lemma FWbisimulation_base_aux_flip_simps [flip_simps]:\n  \"FWbisimulation_base_aux final2 r2 final1 r1 = FWbisimulation_base_aux final1 r1 final2 r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_base_aux final2 r2 final1 r1 =\n    FWbisimulation_base_aux final1 r1 final2 r2", "by(blast intro: FWbisimulation_base_aux.FWbisimulation_base_aux_flip)"], ["", "sublocale FWbisimulation_base_aux < mthr:\n  bisimulation_final_base \n    r1.redT\n    r2.redT\n    mbisim\n    mta_bisim\n    r1.mfinal\n    r2.mfinal"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "declare split_paired_Ex [simp del]"], ["", "subsection \\<open>Lifting for delay bisimulations\\<close>"], ["", "locale FWdelay_bisimulation_base =\n  FWbisimulation_base _ _ _ r2 convert_RA bisim bisim_wait +\n  r1: \\<tau>multithreaded final1 r1 convert_RA \\<tau>move1 +\n  r2: \\<tau>multithreaded final2 r2 convert_RA \\<tau>move2 \n  for r2 :: \"('l,'t,'x2,'m2,'w,'o) semantics\" (\"_ \\<turnstile> _ -2-_\\<rightarrow> _\" [50,0,0,50] 80)\n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  and bisim :: \"'t \\<Rightarrow> ('x1 \\<times> 'm1, 'x2 \\<times> 'm2) bisim\" (\"_ \\<turnstile> _/ \\<approx> _\" [50, 50, 50] 60)\n  and bisim_wait :: \"('x1, 'x2) bisim\" (\"_/ \\<approx>w _\" [50, 50] 60)\n  and \\<tau>move1 :: \"('l,'t,'x1,'m1,'w,'o) \\<tau>moves\"\n  and \\<tau>move2 :: \"('l,'t,'x2,'m2,'w,'o) \\<tau>moves\"\nbegin"], ["", "abbreviation \\<tau>mred1 :: \"('l,'t,'x1,'m1,'w) state \\<Rightarrow> ('l,'t,'x1,'m1,'w) state \\<Rightarrow> bool\"\nwhere \"\\<tau>mred1 \\<equiv> r1.\\<tau>mredT\""], ["", "abbreviation \\<tau>mred2 :: \"('l,'t,'x2,'m2,'w) state \\<Rightarrow> ('l,'t,'x2,'m2,'w) state \\<Rightarrow> bool\"\nwhere \"\\<tau>mred2 \\<equiv> r2.\\<tau>mredT\""], ["", "abbreviation m\\<tau>move1 :: \"(('l,'t,'x1,'m1,'w) state, 't \\<times> ('l,'t,'x1,'m1,'w,'o) thread_action) trsys\"\nwhere \"m\\<tau>move1 \\<equiv> r1.m\\<tau>move\""], ["", "abbreviation m\\<tau>move2 :: \"(('l,'t,'x2,'m2,'w) state, 't \\<times> ('l,'t,'x2,'m2,'w,'o) thread_action) trsys\"\nwhere \"m\\<tau>move2 \\<equiv> r2.m\\<tau>move\""], ["", "abbreviation \\<tau>mRed1 :: \"('l,'t,'x1,'m1,'w) state \\<Rightarrow> ('l,'t,'x1,'m1,'w) state \\<Rightarrow> bool\"\nwhere \"\\<tau>mRed1 \\<equiv> \\<tau>mred1^**\""], ["", "abbreviation \\<tau>mRed2 :: \"('l,'t,'x2,'m2,'w) state \\<Rightarrow> ('l,'t,'x2,'m2,'w) state \\<Rightarrow> bool\"\nwhere \"\\<tau>mRed2 \\<equiv> \\<tau>mred2^**\""], ["", "abbreviation \\<tau>mtRed1 :: \"('l,'t,'x1,'m1,'w) state \\<Rightarrow> ('l,'t,'x1,'m1,'w) state \\<Rightarrow> bool\"\nwhere \"\\<tau>mtRed1 \\<equiv> \\<tau>mred1^++\""], ["", "abbreviation \\<tau>mtRed2 :: \"('l,'t,'x2,'m2,'w) state \\<Rightarrow> ('l,'t,'x2,'m2,'w) state \\<Rightarrow> bool\"\nwhere \"\\<tau>mtRed2 \\<equiv> \\<tau>mred2^++\""], ["", "lemma bisim_inv_\\<tau>s1_inv:\n  assumes inv: \"bisim_inv\"\n  and bisim: \"t \\<turnstile> s1 \\<approx> s2\"\n  and red: \"r1.silent_moves t s1 s1'\"\n  obtains s2' where \"t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (bisim t s1')", "from red bisim"], ["proof (chain)\npicking this:\n  r1.silent_moves t s1 s1'\n  t \\<turnstile> s1 \\<approx> s2", "show \"\\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\nusing this:\n  r1.silent_moves t s1 s1'\n  t \\<turnstile> s1 \\<approx> s2\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "by(induct rule: rtranclp_induct)(fastforce elim: bisim_invD1[OF inv])+"], ["proof (state)\nthis:\n  \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bisim_inv_\\<tau>s2_inv:\n  assumes inv: \"bisim_inv\"\n  and bisim: \"t \\<turnstile> s1 \\<approx> s2\"\n  and red: \"r2.silent_moves t s2 s2'\"\n  obtains s1' where \"t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'", "from red bisim"], ["proof (chain)\npicking this:\n  r2.silent_moves t s2 s2'\n  t \\<turnstile> s1 \\<approx> s2", "show \"\\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\nusing this:\n  r2.silent_moves t s2 s2'\n  t \\<turnstile> s1 \\<approx> s2\n\ngoal (1 subgoal):\n 1. \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'", "by(induct rule: rtranclp_induct)(fastforce elim: bisim_invD2[OF inv])+"], ["proof (state)\nthis:\n  \\<exists>s1'. t \\<turnstile> s1' \\<approx> s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec activate_cond_action1 :: \"('l,'t,'x1,'m1,'w) state \\<Rightarrow> ('l,'t,'x2,'m2,'w) state \\<Rightarrow> \n                                 't conditional_action \\<Rightarrow> ('l,'t,'x1,'m1,'w) state\"\nwhere\n  \"activate_cond_action1 s1 s2 (Join t) =\n   (case thr s1 t of None \\<Rightarrow> s1\n            | \\<lfloor>(x1, ln1)\\<rfloor> \\<Rightarrow> (case thr s2 t of None \\<Rightarrow> s1\n                                     | \\<lfloor>(x2, ln2)\\<rfloor> \\<Rightarrow> \n  if final2 x2 \\<and> ln2 = no_wait_locks\n  then redT_upd_\\<epsilon> s1 t\n                  (SOME x1'. r1.silent_moves t (x1, shr s1) (x1', shr s1) \\<and> final1 x1' \\<and> \n                             t \\<turnstile> (x1', shr s1) \\<approx> (x2, shr s2))\n                  (shr s1)\n  else s1))\"\n| \"activate_cond_action1 s1 s2 Yield = s1\""], ["", "primrec activate_cond_actions1 :: \"('l,'t,'x1,'m1,'w) state \\<Rightarrow> ('l,'t,'x2,'m2,'w) state\n                                  \\<Rightarrow> ('t conditional_action) list \\<Rightarrow> ('l,'t,'x1,'m1,'w) state\"\nwhere\n  \"activate_cond_actions1 s1 s2 [] = s1\"\n| \"activate_cond_actions1 s1 s2 (ct # cts) = activate_cond_actions1 (activate_cond_action1 s1 s2 ct) s2 cts\""], ["", "primrec activate_cond_action2 :: \"('l,'t,'x1,'m1,'w) state \\<Rightarrow> ('l,'t,'x2,'m2,'w) state \\<Rightarrow> \n                                 't conditional_action \\<Rightarrow> ('l,'t,'x2,'m2,'w) state\"\nwhere\n \"activate_cond_action2 s1 s2 (Join t) =\n   (case thr s2 t of None \\<Rightarrow> s2\n            | \\<lfloor>(x2, ln2)\\<rfloor> \\<Rightarrow> (case thr s1 t of None \\<Rightarrow> s2\n                                     | \\<lfloor>(x1, ln1)\\<rfloor> \\<Rightarrow> \n  if final1 x1 \\<and> ln1 = no_wait_locks\n  then redT_upd_\\<epsilon> s2 t\n                  (SOME x2'. r2.silent_moves t (x2, shr s2) (x2', shr s2) \\<and> final2 x2' \\<and>\n                             t \\<turnstile> (x1, shr s1) \\<approx> (x2', shr s2))\n                  (shr s2)\n  else s2))\"\n| \"activate_cond_action2 s1 s2 Yield = s2\""], ["", "primrec activate_cond_actions2 :: \"('l,'t,'x1,'m1,'w) state \\<Rightarrow> ('l,'t,'x2,'m2,'w) state \\<Rightarrow>\n                                  ('t conditional_action) list \\<Rightarrow> ('l,'t,'x2,'m2,'w) state\"\nwhere\n  \"activate_cond_actions2 s1 s2 [] = s2\"\n| \"activate_cond_actions2 s1 s2 (ct # cts) = activate_cond_actions2 s1 (activate_cond_action2 s1 s2 ct) cts\""], ["", "end"], ["", "lemma activate_cond_action1_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_action1 final2 r2 final1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_action2 final1 final2 r2 bisim \\<tau>move2 s1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_base.activate_cond_action1 final2 r2 final1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 =\n    FWdelay_bisimulation_base.activate_cond_action2 final1 final2 r2 bisim\n     \\<tau>move2 s1 s2", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       FWdelay_bisimulation_base.activate_cond_action1 final2 r2 final1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_action2 final1 final2 r2\n        bisim \\<tau>move2 s1 s2 x", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x x1.\n       x = Join x1 \\<Longrightarrow>\n       FWdelay_bisimulation_base.activate_cond_action1 final2 r2 final1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_action2 final1 final2 r2\n        bisim \\<tau>move2 s1 s2 x\n 2. \\<And>x.\n       x = Yield \\<Longrightarrow>\n       FWdelay_bisimulation_base.activate_cond_action1 final2 r2 final1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_action2 final1 final2 r2\n        bisim \\<tau>move2 s1 s2 x", "apply(simp_all only: FWdelay_bisimulation_base.activate_cond_action1.simps \n                     FWdelay_bisimulation_base.activate_cond_action2.simps flip_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma activate_cond_actions1_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_actions1 final2 r2 final1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_actions2 final1 final2 r2 bisim \\<tau>move2 s1 s2\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_base.activate_cond_actions1 final2 r2 final1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 =\n    FWdelay_bisimulation_base.activate_cond_actions2 final1 final2 r2 bisim\n     \\<tau>move2 s1 s2", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       FWdelay_bisimulation_base.activate_cond_actions1 final2 r2 final1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_actions2 final1 final2 r2\n        bisim \\<tau>move2 s1 s2 x", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       FWdelay_bisimulation_base.activate_cond_actions1 final2 r2 final1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_actions2 final1 final2 r2\n        bisim \\<tau>move2 s1 s2 x", "show \"?lhs xs = ?rhs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_base.activate_cond_actions1 final2 r2 final1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 xs =\n    FWdelay_bisimulation_base.activate_cond_actions2 final1 final2 r2 bisim\n     \\<tau>move2 s1 s2 xs", "by(induct xs arbitrary: s2)\n      (simp_all only: FWdelay_bisimulation_base.activate_cond_actions1.simps\n                      FWdelay_bisimulation_base.activate_cond_actions2.simps flip_simps)"], ["proof (state)\nthis:\n  FWdelay_bisimulation_base.activate_cond_actions1 final2 r2 final1\n   (\\<lambda>t. flip (bisim t)) \\<tau>move2 s2 s1 xs =\n  FWdelay_bisimulation_base.activate_cond_actions2 final1 final2 r2 bisim\n   \\<tau>move2 s1 s2 xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma activate_cond_action2_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_action2 final2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_action1 final1 r1 final2 bisim \\<tau>move1 s1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_base.activate_cond_action2 final2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 =\n    FWdelay_bisimulation_base.activate_cond_action1 final1 r1 final2 bisim\n     \\<tau>move1 s1 s2", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       FWdelay_bisimulation_base.activate_cond_action2 final2 final1 r1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_action1 final1 r1 final2\n        bisim \\<tau>move1 s1 s2 x", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x x1.\n       x = Join x1 \\<Longrightarrow>\n       FWdelay_bisimulation_base.activate_cond_action2 final2 final1 r1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_action1 final1 r1 final2\n        bisim \\<tau>move1 s1 s2 x\n 2. \\<And>x.\n       x = Yield \\<Longrightarrow>\n       FWdelay_bisimulation_base.activate_cond_action2 final2 final1 r1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_action1 final1 r1 final2\n        bisim \\<tau>move1 s1 s2 x", "apply(simp_all only: FWdelay_bisimulation_base.activate_cond_action1.simps \n                     FWdelay_bisimulation_base.activate_cond_action2.simps flip_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma activate_cond_actions2_flip [flip_simps]:\n  \"FWdelay_bisimulation_base.activate_cond_actions2 final2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 =\n   FWdelay_bisimulation_base.activate_cond_actions1 final1 r1 final2 bisim \\<tau>move1 s1 s2\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_base.activate_cond_actions2 final2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 =\n    FWdelay_bisimulation_base.activate_cond_actions1 final1 r1 final2 bisim\n     \\<tau>move1 s1 s2", "proof(rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       FWdelay_bisimulation_base.activate_cond_actions2 final2 final1 r1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_actions1 final1 r1 final2\n        bisim \\<tau>move1 s1 s2 x", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       FWdelay_bisimulation_base.activate_cond_actions2 final2 final1 r1\n        (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 x =\n       FWdelay_bisimulation_base.activate_cond_actions1 final1 r1 final2\n        bisim \\<tau>move1 s1 s2 x", "show \"?lhs xs = ?rhs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_base.activate_cond_actions2 final2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 xs =\n    FWdelay_bisimulation_base.activate_cond_actions1 final1 r1 final2 bisim\n     \\<tau>move1 s1 s2 xs", "by(induct xs arbitrary: s1)\n      (simp_all only: FWdelay_bisimulation_base.activate_cond_actions1.simps \n                      FWdelay_bisimulation_base.activate_cond_actions2.simps flip_simps)"], ["proof (state)\nthis:\n  FWdelay_bisimulation_base.activate_cond_actions2 final2 final1 r1\n   (\\<lambda>t. flip (bisim t)) \\<tau>move1 s2 s1 xs =\n  FWdelay_bisimulation_base.activate_cond_actions1 final1 r1 final2 bisim\n   \\<tau>move1 s1 s2 xs\n\ngoal:\nNo subgoals!", "qed"], ["", "context FWdelay_bisimulation_base begin"], ["", "lemma shr_activate_cond_action1 [simp]: \"shr (activate_cond_action1 s1 s2 ct) = shr s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shr (activate_cond_action1 s1 s2 ct) = shr s1", "by(cases ct) simp_all"], ["", "lemma shr_activate_cond_actions1 [simp]: \"shr (activate_cond_actions1 s1 s2 cts) = shr s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shr (activate_cond_actions1 s1 s2 cts) = shr s1", "by(induct cts arbitrary: s1) auto"], ["", "lemma shr_activate_cond_action2 [simp]: \"shr (activate_cond_action2 s1 s2 ct) = shr s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shr (activate_cond_action2 s1 s2 ct) = shr s2", "by(cases ct) simp_all"], ["", "lemma shr_activate_cond_actions2 [simp]: \"shr (activate_cond_actions2 s1 s2 cts) = shr s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shr (activate_cond_actions2 s1 s2 cts) = shr s2", "by(induct cts arbitrary: s2) auto"], ["", "lemma locks_activate_cond_action1 [simp]: \"locks (activate_cond_action1 s1 s2 ct) = locks s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locks (activate_cond_action1 s1 s2 ct) = locks s1", "by(cases ct) simp_all"], ["", "lemma locks_activate_cond_actions1 [simp]: \"locks (activate_cond_actions1 s1 s2 cts) = locks s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locks (activate_cond_actions1 s1 s2 cts) = locks s1", "by(induct cts arbitrary: s1) auto"], ["", "lemma locks_activate_cond_action2 [simp]: \"locks (activate_cond_action2 s1 s2 ct) = locks s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locks (activate_cond_action2 s1 s2 ct) = locks s2", "by(cases ct) simp_all"], ["", "lemma locks_activate_cond_actions2 [simp]: \"locks (activate_cond_actions2 s1 s2 cts) = locks s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locks (activate_cond_actions2 s1 s2 cts) = locks s2", "by(induct cts arbitrary: s2) auto"], ["", "lemma wset_activate_cond_action1 [simp]: \"wset (activate_cond_action1 s1 s2 ct) = wset s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset (activate_cond_action1 s1 s2 ct) = wset s1", "by(cases ct) simp_all"], ["", "lemma wset_activate_cond_actions1 [simp]: \"wset (activate_cond_actions1 s1 s2 cts) = wset s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset (activate_cond_actions1 s1 s2 cts) = wset s1", "by(induct cts arbitrary: s1) auto"], ["", "lemma wset_activate_cond_action2 [simp]: \"wset (activate_cond_action2 s1 s2 ct) = wset s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset (activate_cond_action2 s1 s2 ct) = wset s2", "by(cases ct) simp_all"], ["", "lemma wset_activate_cond_actions2 [simp]: \"wset (activate_cond_actions2 s1 s2 cts) = wset s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset (activate_cond_actions2 s1 s2 cts) = wset s2", "by(induct cts arbitrary: s2) auto"], ["", "lemma interrupts_activate_cond_action1 [simp]: \"interrupts (activate_cond_action1 s1 s2 ct) = interrupts s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupts (activate_cond_action1 s1 s2 ct) = interrupts s1", "by(cases ct) simp_all"], ["", "lemma interrupts_activate_cond_actions1 [simp]: \"interrupts (activate_cond_actions1 s1 s2 cts) = interrupts s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupts (activate_cond_actions1 s1 s2 cts) = interrupts s1", "by(induct cts arbitrary: s1) auto"], ["", "lemma interrupts_activate_cond_action2 [simp]: \"interrupts (activate_cond_action2 s1 s2 ct) = interrupts s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupts (activate_cond_action2 s1 s2 ct) = interrupts s2", "by(cases ct) simp_all"], ["", "lemma interrupts_activate_cond_actions2 [simp]: \"interrupts (activate_cond_actions2 s1 s2 cts) = interrupts s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupts (activate_cond_actions2 s1 s2 cts) = interrupts s2", "by(induct cts arbitrary: s2) auto"], ["", "end"], ["", "locale FWdelay_bisimulation_lift_aux =\n  FWdelay_bisimulation_base _ _ _ _ _ _ _ \\<tau>move1 \\<tau>move2 +\n  r1: \\<tau>multithreaded_wf final1 r1 convert_RA \\<tau>move1 +\n  r2: \\<tau>multithreaded_wf final2 r2 convert_RA \\<tau>move2 \n  for \\<tau>move1 :: \"('l,'t,'x1,'m1,'w,'o) \\<tau>moves\"\n  and \\<tau>move2 :: \"('l,'t,'x2,'m2,'w,'o) \\<tau>moves\"\nbegin"], ["", "lemma FWdelay_bisimulation_lift_aux_flip:\n  \"FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2 \\<tau>move1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2\n     \\<tau>move1", "by unfold_locales"], ["", "end"], ["", "lemma FWdelay_bisimulation_lift_aux_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2 \\<tau>move1 =\n   FWdelay_bisimulation_lift_aux final1 r1 final2 r2 \\<tau>move1 \\<tau>move2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2\n     \\<tau>move1 =\n    FWdelay_bisimulation_lift_aux final1 r1 final2 r2 \\<tau>move1\n     \\<tau>move2", "by(auto dest: FWdelay_bisimulation_lift_aux.FWdelay_bisimulation_lift_aux_flip simp only: flip_flip)"], ["", "context FWdelay_bisimulation_lift_aux begin"], ["", "lemma cond_actions_ok_\\<tau>mred1_inv:\n  assumes red: \"\\<tau>mred1 s1 s1'\"\n  and ct: \"r1.cond_action_ok s1 t ct\"\n  shows \"r1.cond_action_ok s1' t ct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r1.cond_action_ok s1' t ct", "using ct"], ["proof (prove)\nusing this:\n  r1.cond_action_ok s1 t ct\n\ngoal (1 subgoal):\n 1. r1.cond_action_ok s1' t ct", "proof(cases ct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>r1.cond_action_ok s1 t ct; ct = Join x1\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_ok s1' t ct\n 2. \\<lbrakk>r1.cond_action_ok s1 t ct; ct = Yield\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct", "case (Join t')"], ["proof (state)\nthis:\n  ct = Join t'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>r1.cond_action_ok s1 t ct; ct = Join x1\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_ok s1' t ct\n 2. \\<lbrakk>r1.cond_action_ok s1 t ct; ct = Yield\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. r1.cond_action_ok s1' t ct", "using red ct"], ["proof (prove)\nusing this:\n  \\<tau>mred1 s1 s1'\n  r1.cond_action_ok s1 t ct\n\ngoal (1 subgoal):\n 1. r1.cond_action_ok s1' t ct", "proof(cases \"thr s1 t'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau>mred1 s1 s1'; r1.cond_action_ok s1 t ct;\n     thr s1 t' = None\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct\n 2. \\<And>a.\n       \\<lbrakk>\\<tau>mred1 s1 s1'; r1.cond_action_ok s1 t ct;\n        thr s1 t' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_ok s1' t ct", "case None"], ["proof (state)\nthis:\n  thr s1 t' = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau>mred1 s1 s1'; r1.cond_action_ok s1 t ct;\n     thr s1 t' = None\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct\n 2. \\<And>a.\n       \\<lbrakk>\\<tau>mred1 s1 s1'; r1.cond_action_ok s1 t ct;\n        thr s1 t' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_ok s1' t ct", "with red ct Join"], ["proof (chain)\npicking this:\n  \\<tau>mred1 s1 s1'\n  r1.cond_action_ok s1 t ct\n  ct = Join t'\n  thr s1 t' = None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>mred1 s1 s1'\n  r1.cond_action_ok s1 t ct\n  ct = Join t'\n  thr s1 t' = None\n\ngoal (1 subgoal):\n 1. r1.cond_action_ok s1' t ct", "by(fastforce elim!: r1.mthr.silent_move.cases r1.redT.cases r1.m\\<tau>move.cases rtrancl3p_cases \n                  dest: r1.silent_tl split: if_split_asm)"], ["proof (state)\nthis:\n  r1.cond_action_ok s1' t ct\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<tau>mred1 s1 s1'; r1.cond_action_ok s1 t ct;\n        thr s1 t' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_ok s1' t ct", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<tau>mred1 s1 s1'; r1.cond_action_ok s1 t ct;\n        thr s1 t' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_ok s1' t ct", "case (Some a)"], ["proof (state)\nthis:\n  thr s1 t' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<tau>mred1 s1 s1'; r1.cond_action_ok s1 t ct;\n        thr s1 t' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_ok s1' t ct", "with red ct Join"], ["proof (chain)\npicking this:\n  \\<tau>mred1 s1 s1'\n  r1.cond_action_ok s1 t ct\n  ct = Join t'\n  thr s1 t' = \\<lfloor>a\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>mred1 s1 s1'\n  r1.cond_action_ok s1 t ct\n  ct = Join t'\n  thr s1 t' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. r1.cond_action_ok s1' t ct", "by(fastforce elim!: r1.mthr.silent_move.cases r1.redT.cases r1.m\\<tau>move.cases rtrancl3p_cases\n                  dest: r1.silent_tl r1.final_no_red split: if_split_asm simp add: redT_updWs_def)"], ["proof (state)\nthis:\n  r1.cond_action_ok s1' t ct\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r1.cond_action_ok s1' t ct\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r1.cond_action_ok s1 t ct; ct = Yield\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r1.cond_action_ok s1 t ct; ct = Yield\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct", "case Yield"], ["proof (state)\nthis:\n  ct = Yield\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r1.cond_action_ok s1 t ct; ct = Yield\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct", "thus ?thesis"], ["proof (prove)\nusing this:\n  ct = Yield\n\ngoal (1 subgoal):\n 1. r1.cond_action_ok s1' t ct", "by simp"], ["proof (state)\nthis:\n  r1.cond_action_ok s1' t ct\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cond_actions_ok_\\<tau>mred2_inv:\n  \"\\<lbrakk> \\<tau>mred2 s2 s2'; r2.cond_action_ok s2 t ct \\<rbrakk> \\<Longrightarrow> r2.cond_action_ok s2' t ct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau>mred2 s2 s2'; r2.cond_action_ok s2 t ct\\<rbrakk>\n    \\<Longrightarrow> r2.cond_action_ok s2' t ct", "using FWdelay_bisimulation_lift_aux.cond_actions_ok_\\<tau>mred1_inv[OF FWdelay_bisimulation_lift_aux_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<tau>trsys.silent_move\n            (multithreaded_base.redT final2 r2 ?convert_RA) m\\<tau>move2\n            ?s1.0 ?s1';\n   r2.cond_action_ok ?s1.0 ?t ?ct\\<rbrakk>\n  \\<Longrightarrow> r2.cond_action_ok ?s1' ?t ?ct\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau>mred2 s2 s2'; r2.cond_action_ok s2 t ct\\<rbrakk>\n    \\<Longrightarrow> r2.cond_action_ok s2' t ct", "."], ["", "lemma cond_actions_ok_\\<tau>mRed1_inv:\n  \"\\<lbrakk> \\<tau>mRed1 s1 s1'; r1.cond_action_ok s1 t ct \\<rbrakk> \\<Longrightarrow> r1.cond_action_ok s1' t ct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau>mRed1 s1 s1'; r1.cond_action_ok s1 t ct\\<rbrakk>\n    \\<Longrightarrow> r1.cond_action_ok s1' t ct", "by(induct rule: rtranclp_induct)(blast intro: cond_actions_ok_\\<tau>mred1_inv)+"], ["", "lemma cond_actions_ok_\\<tau>mRed2_inv:\n  \"\\<lbrakk> \\<tau>mRed2 s2 s2'; r2.cond_action_ok s2 t ct \\<rbrakk> \\<Longrightarrow> r2.cond_action_ok s2' t ct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau>mRed2 s2 s2'; r2.cond_action_ok s2 t ct\\<rbrakk>\n    \\<Longrightarrow> r2.cond_action_ok s2' t ct", "by(rule FWdelay_bisimulation_lift_aux.cond_actions_ok_\\<tau>mRed1_inv[OF FWdelay_bisimulation_lift_aux_flip])"], ["", "end"], ["", "locale FWdelay_bisimulation_lift =\n  FWdelay_bisimulation_lift_aux +\n  constrains final1 :: \"'x1 \\<Rightarrow> bool\"\n  and r1 :: \"('l, 't, 'x1, 'm1, 'w, 'o) semantics\"\n  and final2 :: \"'x2 \\<Rightarrow> bool\"\n  and r2 :: \"('l, 't, 'x2, 'm2, 'w, 'o) semantics\"\n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  and bisim :: \"'t \\<Rightarrow> ('x1 \\<times> 'm1, 'x2 \\<times> 'm2) bisim\"\n  and bisim_wait :: \"('x1, 'x2) bisim\"\n  and \\<tau>move1 :: \"('l, 't, 'x1, 'm1, 'w, 'o) \\<tau>moves\" \n  and \\<tau>move2 :: \"('l, 't, 'x2, 'm2, 'w, 'o) \\<tau>moves\"\n  assumes \\<tau>inv_locale: \"\\<tau>inv (r1 t) (r2 t) (bisim t) (ta_bisim bisim) \\<tau>move1 \\<tau>move2\""], ["", "sublocale FWdelay_bisimulation_lift < \\<tau>inv \"r1 t\" \"r2 t\" \"bisim t\" \"ta_bisim bisim\" \\<tau>move1 \\<tau>move2 for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>inv (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax \\<tau>move1\n     \\<tau>move2", "by(rule \\<tau>inv_locale)"], ["", "context FWdelay_bisimulation_lift begin"], ["", "lemma FWdelay_bisimulation_lift_flip:\n  \"FWdelay_bisimulation_lift final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_lift final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_lift.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2\n     \\<tau>move1\n 2. FWdelay_bisimulation_lift_axioms r2 r1 (\\<lambda>t. flip (bisim t))\n     \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_lift_aux_flip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_lift_axioms r2 r1 (\\<lambda>t. flip (bisim t))\n     \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_lift_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<tau>inv (r2 t) (r1 t) (flip (bisim t))\n        (ta_bisim (\\<lambda>t. flip (bisim t))) \\<tau>move2 \\<tau>move1", "apply(unfold flip_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<tau>inv (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax \\<tau>move1\n        \\<tau>move2", "apply(unfold_locales)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma FWdelay_bisimulation_lift_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_lift final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1 =\n   FWdelay_bisimulation_lift final1 r1 final2 r2 bisim \\<tau>move1 \\<tau>move2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_lift final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1 =\n    FWdelay_bisimulation_lift final1 r1 final2 r2 bisim \\<tau>move1\n     \\<tau>move2", "by(auto dest: FWdelay_bisimulation_lift.FWdelay_bisimulation_lift_flip simp only: flip_flip)"], ["", "context FWdelay_bisimulation_lift begin"], ["", "lemma \\<tau>inv_lift: \"\\<tau>inv r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>inv r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "fix s1 s2 tl1 s1' tl2 s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "assume \"s1 \\<approx>m s2\" \"s1' \\<approx>m s2'\" \"tl1 \\<sim>T tl2\" \"r1.redT s1 tl1 s1'\" \"r2.redT s2 tl2 s2'\""], ["proof (state)\nthis:\n  s1 \\<approx>m s2\n  s1' \\<approx>m s2'\n  tl1 \\<sim>T tl2\n  r1.redT s1 tl1 s1'\n  r2.redT s2 tl2 s2'\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "moreover"], ["proof (state)\nthis:\n  s1 \\<approx>m s2\n  s1' \\<approx>m s2'\n  tl1 \\<sim>T tl2\n  r1.redT s1 tl1 s1'\n  r2.redT s2 tl2 s2'\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "obtain t ta1 where tl1: \"tl1 = (t, ta1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t ta1. tl1 = (t, ta1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases tl1)"], ["proof (state)\nthis:\n  tl1 = (t, ta1)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "moreover"], ["proof (state)\nthis:\n  tl1 = (t, ta1)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "obtain t' ta2 where tl2: \"tl2 = (t', ta2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t' ta2.\n        tl2 = (t', ta2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases tl2)"], ["proof (state)\nthis:\n  tl2 = (t', ta2)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "moreover"], ["proof (state)\nthis:\n  tl2 = (t', ta2)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "obtain ls1 ts1 ws1 m1 is1 where s1: \"s1 = (ls1, (ts1, m1), ws1, is1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls1 ts1 m1 ws1 is1.\n        s1 = (ls1, (ts1, m1), ws1, is1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s1) fastforce"], ["proof (state)\nthis:\n  s1 = (ls1, (ts1, m1), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "moreover"], ["proof (state)\nthis:\n  s1 = (ls1, (ts1, m1), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "obtain ls2 ts2 ws2 m2 is2 where s2: \"s2 = (ls2, (ts2, m2), ws2, is2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls2 ts2 m2 ws2 is2.\n        s2 = (ls2, (ts2, m2), ws2, is2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s2) fastforce"], ["proof (state)\nthis:\n  s2 = (ls2, (ts2, m2), ws2, is2)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "moreover"], ["proof (state)\nthis:\n  s2 = (ls2, (ts2, m2), ws2, is2)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "obtain ls1' ts1' ws1' m1' is1' where s1': \"s1' = (ls1', (ts1', m1'), ws1', is1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls1' ts1' m1' ws1' is1'.\n        s1' = (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s1') fastforce"], ["proof (state)\nthis:\n  s1' = (ls1', (ts1', m1'), ws1', is1')\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "moreover"], ["proof (state)\nthis:\n  s1' = (ls1', (ts1', m1'), ws1', is1')\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "obtain ls2' ts2' ws2' m2' is2' where s2': \"s2' = (ls2', (ts2', m2'), ws2', is2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls2' ts2' m2' ws2' is2'.\n        s2' = (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s2') fastforce"], ["proof (state)\nthis:\n  s2' = (ls2', (ts2', m2'), ws2', is2')\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "ultimately"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  s1' \\<approx>m s2'\n  tl1 \\<sim>T tl2\n  r1.redT s1 tl1 s1'\n  r2.redT s2 tl2 s2'\n  tl1 = (t, ta1)\n  tl2 = (t', ta2)\n  s1 = (ls1, (ts1, m1), ws1, is1)\n  s2 = (ls2, (ts2, m2), ws2, is2)\n  s1' = (ls1', (ts1', m1'), ws1', is1')\n  s2' = (ls2', (ts2', m2'), ws2', is2')", "have mbisim: \"(ls1, (ts1, m1), ws1, is1) \\<approx>m (ls2, (ts2, m2), ws2, is2)\"\n    and mbisim': \"(ls1', (ts1', m1'), ws1', is1') \\<approx>m (ls2', (ts2', m2'), ws2', is2')\"\n    and mred1: \"(ls1, (ts1, m1), ws1, is1) -1-t\\<triangleright>ta1\\<rightarrow> (ls1', (ts1', m1'), ws1', is1')\"\n    and mred2: \"(ls2, (ts2, m2), ws2, is2) -2-t\\<triangleright>ta2\\<rightarrow> (ls2', (ts2', m2'), ws2', is2')\"\n    and tasim: \"ta1 \\<sim>m ta2\" and tt': \"t' = t\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  s1' \\<approx>m s2'\n  tl1 \\<sim>T tl2\n  r1.redT s1 tl1 s1'\n  r2.redT s2 tl2 s2'\n  tl1 = (t, ta1)\n  tl2 = (t', ta2)\n  s1 = (ls1, (ts1, m1), ws1, is1)\n  s2 = (ls2, (ts2, m2), ws2, is2)\n  s1' = (ls1', (ts1', m1'), ws1', is1')\n  s2' = (ls2', (ts2', m2'), ws2', is2')\n\ngoal (1 subgoal):\n 1. ((ls1, (ts1, m1), ws1, is1) \\<approx>m (ls2, (ts2, m2), ws2, is2) &&&\n     (ls1', (ts1', m1'), ws1',\n      is1') \\<approx>m (ls2', (ts2', m2'), ws2', is2') &&&\n     r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1'\n      is1') &&&\n    r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2'\n     is2' &&&\n    ta1 \\<sim>m ta2 &&& t' = t", "by simp_all"], ["proof (state)\nthis:\n  (ls1, (ts1, m1), ws1, is1) \\<approx>m (ls2, (ts2, m2), ws2, is2)\n  (ls1', (ts1', m1'), ws1', is1') \\<approx>m (ls2', (ts2', m2'), ws2', is2')\n  r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1' is1'\n  r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2' is2'\n  ta1 \\<sim>m ta2\n  t' = t\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "from mbisim"], ["proof (chain)\npicking this:\n  (ls1, (ts1, m1), ws1, is1) \\<approx>m (ls2, (ts2, m2), ws2, is2)", "have ls: \"ls1 = ls2\" and ws: \"ws1 = ws2\" and \"is\": \"is1 = is2\"\n    and tbisim: \"\\<And>t. tbisim (ws2 t = None) t (ts1 t) m1 (ts2 t) m2\""], ["proof (prove)\nusing this:\n  (ls1, (ts1, m1), ws1, is1) \\<approx>m (ls2, (ts2, m2), ws2, is2)\n\ngoal (1 subgoal):\n 1. (ls1 = ls2 &&& ws1 = ws2) &&&\n    is1 = is2 &&& (\\<And>t. tbisim (ws2 t = None) t (ts1 t) m1 (ts2 t) m2)", "by(simp_all add: mbisim_def)"], ["proof (state)\nthis:\n  ls1 = ls2\n  ws1 = ws2\n  is1 = is2\n  tbisim (ws2 ?t13 = None) ?t13 (ts1 ?t13) m1 (ts2 ?t13) m2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "from mbisim'"], ["proof (chain)\npicking this:\n  (ls1', (ts1', m1'), ws1', is1') \\<approx>m (ls2', (ts2', m2'), ws2', is2')", "have ls': \"ls1' = ls2'\" and ws': \"ws1' = ws2'\" and is': \"is1' = is2'\"\n    and tbisim': \"\\<And>t. tbisim (ws2' t = None) t (ts1' t) m1' (ts2' t) m2'\""], ["proof (prove)\nusing this:\n  (ls1', (ts1', m1'), ws1', is1') \\<approx>m (ls2', (ts2', m2'), ws2', is2')\n\ngoal (1 subgoal):\n 1. (ls1' = ls2' &&& ws1' = ws2') &&&\n    is1' = is2' &&&\n    (\\<And>t. tbisim (ws2' t = None) t (ts1' t) m1' (ts2' t) m2')", "by(simp_all add: mbisim_def)"], ["proof (state)\nthis:\n  ls1' = ls2'\n  ws1' = ws2'\n  is1' = is2'\n  tbisim (ws2' ?t13 = None) ?t13 (ts1' ?t13) m1' (ts2' ?t13) m2'\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "from mred1 r1.redT_thread_not_disappear[OF mred1]"], ["proof (chain)\npicking this:\n  r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1' is1'\n  thr (ls1', (ts1', m1'), ws1', is1') ?t' = None \\<Longrightarrow>\n  thr (ls1, (ts1, m1), ws1, is1) ?t' = None", "obtain x1 ln1 x1' ln1' where tst1: \"ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\"\n    and tst1': \"ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\""], ["proof (prove)\nusing this:\n  r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1' is1'\n  thr (ls1', (ts1', m1'), ws1', is1') ?t' = None \\<Longrightarrow>\n  thr (ls1, (ts1, m1), ws1, is1) ?t' = None\n\ngoal (1 subgoal):\n 1. (\\<And>x1 ln1 x1' ln1'.\n        \\<lbrakk>ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>;\n         ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!: r1.redT.cases)"], ["proof (state)\nthis:\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "from mred2 r2.redT_thread_not_disappear[OF mred2]"], ["proof (chain)\npicking this:\n  r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2' is2'\n  thr (ls2', (ts2', m2'), ws2', is2') ?t' = None \\<Longrightarrow>\n  thr (ls2, (ts2, m2), ws2, is2) ?t' = None", "obtain x2 ln2 x2' ln2' where tst2: \"ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\"\n    and tst2': \"ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\""], ["proof (prove)\nusing this:\n  r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2' is2'\n  thr (ls2', (ts2', m2'), ws2', is2') ?t' = None \\<Longrightarrow>\n  thr (ls2, (ts2, m2), ws2, is2) ?t' = None\n\ngoal (1 subgoal):\n 1. (\\<And>x2 ln2 x2' ln2'.\n        \\<lbrakk>ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>;\n         ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!: r2.redT.cases)"], ["proof (state)\nthis:\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "from tbisim[of t] tst1 tst2 ws"], ["proof (chain)\npicking this:\n  tbisim (ws2 t = None) t (ts1 t) m1 (ts2 t) m2\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ws1 = ws2", "have bisim: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\"\n    and ln: \"ln1 = ln2\""], ["proof (prove)\nusing this:\n  tbisim (ws2 t = None) t (ts1 t) m1 (ts2 t) m2\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ws1 = ws2\n\ngoal (1 subgoal):\n 1. t \\<turnstile> (x1, m1) \\<approx> (x2, m2) &&& ln1 = ln2", "by(auto simp add: tbisim_def)"], ["proof (state)\nthis:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  ln1 = ln2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "from tbisim'[of t] tst1' tst2'"], ["proof (chain)\npicking this:\n  tbisim (ws2' t = None) t (ts1' t) m1' (ts2' t) m2'\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>", "have bisim': \"t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\"\n    and ln': \"ln1' = ln2'\""], ["proof (prove)\nusing this:\n  tbisim (ws2' t = None) t (ts1' t) m1' (ts2' t) m2'\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n\ngoal (1 subgoal):\n 1. t \\<turnstile> (x1', m1') \\<approx> (x2', m2') &&& ln1' = ln2'", "by(auto simp add: tbisim_def)"], ["proof (state)\nthis:\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ln1' = ln2'\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl1 s1' tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'; r2.redT s2 tl2 s2';\n        s1' \\<approx>m s2'; tl1 \\<sim>T tl2\\<rbrakk>\n       \\<Longrightarrow> m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "show \"m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'", "unfolding s1 s2 s1' s2' tt' tl1 tl2"], ["proof (prove)\ngoal (1 subgoal):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') =\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') =\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')", "show \"m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1) (ls1', (ts1', m1'), ws1', is1') =\n          m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2) (ls2', (ts2', m2'), ws2', is2')\"\n      (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') =\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "assume m\\<tau>: ?lhs"], ["proof (state)\nthis:\n  m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n   (ls1', (ts1', m1'), ws1', is1')\n\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with tst1 tst1'"], ["proof (chain)\npicking this:\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n   (ls1', (ts1', m1'), ws1', is1')", "obtain \\<tau>1: \"\\<tau>move1 (x1, m1) ta1 (x1', m1')\" \n        and ln1: \"ln1 = no_wait_locks\""], ["proof (prove)\nusing this:\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n   (ls1', (ts1', m1'), ws1', is1')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<tau>move1 (x1, m1) ta1 (x1', m1');\n      ln1 = no_wait_locks\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!: r1.m\\<tau>move.cases)"], ["proof (state)\nthis:\n  \\<tau>move1 (x1, m1) ta1 (x1', m1')\n  ln1 = no_wait_locks\n\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "from \\<tau>1"], ["proof (chain)\npicking this:\n  \\<tau>move1 (x1, m1) ta1 (x1', m1')", "have \"ta1 = \\<epsilon>\""], ["proof (prove)\nusing this:\n  \\<tau>move1 (x1, m1) ta1 (x1', m1')\n\ngoal (1 subgoal):\n 1. ta1 = \\<lbrace>\\<rbrace>", "by(rule r1.silent_tl)"], ["proof (state)\nthis:\n  ta1 = \\<lbrace>\\<rbrace>\n\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with mred1 \\<tau>1 tst1 tst1' ln1"], ["proof (chain)\npicking this:\n  r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1' is1'\n  \\<tau>move1 (x1, m1) ta1 (x1', m1')\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ln1 = no_wait_locks\n  ta1 = \\<lbrace>\\<rbrace>", "have red1: \"t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', m1')\""], ["proof (prove)\nusing this:\n  r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1' is1'\n  \\<tau>move1 (x1, m1) ta1 (x1', m1')\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ln1 = no_wait_locks\n  ta1 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. r1.r_syntax t x1 m1 ta1 x1' m1'", "by(auto elim!: r1.redT.cases rtrancl3p_cases)"], ["proof (state)\nthis:\n  r1.r_syntax t x1 m1 ta1 x1' m1'\n\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "from tasim \\<open>ta1 = \\<epsilon>\\<close>"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2\n  ta1 = \\<lbrace>\\<rbrace>", "have [simp]: \"ta2 = \\<epsilon>\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n  ta1 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. ta2 = \\<lbrace>\\<rbrace>", "by(simp)"], ["proof (state)\nthis:\n  ta2 = \\<lbrace>\\<rbrace>\n\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with mred2 ln1 ln tst2 tst2'"], ["proof (chain)\npicking this:\n  r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2' is2'\n  ln1 = no_wait_locks\n  ln1 = ln2\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  ta2 = \\<lbrace>\\<rbrace>", "have red2: \"t \\<turnstile> (x2, m2) -2-\\<epsilon>\\<rightarrow> (x2', m2')\""], ["proof (prove)\nusing this:\n  r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2' is2'\n  ln1 = no_wait_locks\n  ln1 = ln2\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  ta2 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. r2.r_syntax t x2 m2 \\<lbrace>\\<rbrace> x2' m2'", "by(fastforce elim!: r2.redT.cases rtrancl3p_cases)"], ["proof (state)\nthis:\n  r2.r_syntax t x2 m2 \\<lbrace>\\<rbrace> x2' m2'\n\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "from \\<tau>1 \\<tau>inv[OF bisim red1 red2] bisim' tasim"], ["proof (chain)\npicking this:\n  \\<tau>move1 (x1, m1) ta1 (x1', m1')\n  \\<lbrakk>t \\<turnstile> (x1', m1') \\<approx> (x2', m2');\n   ta1 \\<sim>m \\<lbrace>\\<rbrace>\\<rbrakk>\n  \\<Longrightarrow> \\<tau>move1 (x1, m1) ta1 (x1', m1') =\n                    \\<tau>move2 (x2, m2) \\<lbrace>\\<rbrace> (x2', m2')\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2", "have \\<tau>2: \"\\<tau>move2 (x2, m2) \\<epsilon> (x2', m2')\""], ["proof (prove)\nusing this:\n  \\<tau>move1 (x1, m1) ta1 (x1', m1')\n  \\<lbrakk>t \\<turnstile> (x1', m1') \\<approx> (x2', m2');\n   ta1 \\<sim>m \\<lbrace>\\<rbrace>\\<rbrakk>\n  \\<Longrightarrow> \\<tau>move1 (x1, m1) ta1 (x1', m1') =\n                    \\<tau>move2 (x2, m2) \\<lbrace>\\<rbrace> (x2', m2')\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. \\<tau>move2 (x2, m2) \\<lbrace>\\<rbrace> (x2', m2')", "by simp"], ["proof (state)\nthis:\n  \\<tau>move2 (x2, m2) \\<lbrace>\\<rbrace> (x2', m2')\n\ngoal (2 subgoals):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n    m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')\n 2. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with tst2 tst2' ln ln1"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  ln1 = ln2\n  ln1 = no_wait_locks\n  \\<tau>move2 (x2, m2) \\<lbrace>\\<rbrace> (x2', m2')", "show ?rhs"], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  ln1 = ln2\n  ln1 = no_wait_locks\n  \\<tau>move2 (x2, m2) \\<lbrace>\\<rbrace> (x2', m2')\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2')", "by -(rule r2.m\\<tau>move.intros, auto)"], ["proof (state)\nthis:\n  m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n   (ls2', (ts2', m2'), ws2', is2')\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "assume m\\<tau>: ?rhs"], ["proof (state)\nthis:\n  m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n   (ls2', (ts2', m2'), ws2', is2')\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with tst2 tst2'"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n   (ls2', (ts2', m2'), ws2', is2')", "obtain \\<tau>2: \"\\<tau>move2 (x2, m2) ta2 (x2', m2')\" \n        and ln2: \"ln2 = no_wait_locks\""], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n   (ls2', (ts2', m2'), ws2', is2')\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<tau>move2 (x2, m2) ta2 (x2', m2');\n      ln2 = no_wait_locks\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!: r2.m\\<tau>move.cases)"], ["proof (state)\nthis:\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  ln2 = no_wait_locks\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "from \\<tau>2"], ["proof (chain)\npicking this:\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')", "have \"ta2 = \\<epsilon>\""], ["proof (prove)\nusing this:\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')\n\ngoal (1 subgoal):\n 1. ta2 = \\<lbrace>\\<rbrace>", "by(rule r2.silent_tl)"], ["proof (state)\nthis:\n  ta2 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with mred2 \\<tau>2 tst2 tst2' ln2"], ["proof (chain)\npicking this:\n  r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2' is2'\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  ln2 = no_wait_locks\n  ta2 = \\<lbrace>\\<rbrace>", "have red2: \"t \\<turnstile> (x2, m2) -2-ta2\\<rightarrow> (x2', m2')\""], ["proof (prove)\nusing this:\n  r2.redT_syntax2 ls2 (ts2, m2) ws2 is2 t ta2 ls2' (ts2', m2') ws2' is2'\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  ts2 t = \\<lfloor>(x2, ln2)\\<rfloor>\n  ts2' t = \\<lfloor>(x2', ln2')\\<rfloor>\n  ln2 = no_wait_locks\n  ta2 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. r2.r_syntax t x2 m2 ta2 x2' m2'", "by(auto elim!: r2.redT.cases rtrancl3p_cases)"], ["proof (state)\nthis:\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "from tasim \\<open>ta2 = \\<epsilon>\\<close>"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2\n  ta2 = \\<lbrace>\\<rbrace>", "have [simp]: \"ta1 = \\<epsilon>\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n  ta2 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. ta1 = \\<lbrace>\\<rbrace>", "by simp"], ["proof (state)\nthis:\n  ta1 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with mred1 ln2 ln tst1 tst1'"], ["proof (chain)\npicking this:\n  r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1' is1'\n  ln2 = no_wait_locks\n  ln1 = ln2\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ta1 = \\<lbrace>\\<rbrace>", "have red1: \"t \\<turnstile> (x1, m1) -1-\\<epsilon>\\<rightarrow> (x1', m1')\""], ["proof (prove)\nusing this:\n  r1.redT_syntax2 ls1 (ts1, m1) ws1 is1 t ta1 ls1' (ts1', m1') ws1' is1'\n  ln2 = no_wait_locks\n  ln1 = ln2\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ta1 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. r1.r_syntax t x1 m1 \\<lbrace>\\<rbrace> x1' m1'", "by(fastforce elim!: r1.redT.cases rtrancl3p_cases)"], ["proof (state)\nthis:\n  r1.r_syntax t x1 m1 \\<lbrace>\\<rbrace> x1' m1'\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "from \\<tau>2 \\<tau>inv[OF bisim red1 red2] bisim' tasim"], ["proof (chain)\npicking this:\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  \\<lbrakk>t \\<turnstile> (x1', m1') \\<approx> (x2', m2');\n   \\<lbrace>\\<rbrace> \\<sim>m ta2\\<rbrakk>\n  \\<Longrightarrow> \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', m1') =\n                    \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2", "have \\<tau>1: \"\\<tau>move1 (x1, m1) \\<epsilon> (x1', m1')\""], ["proof (prove)\nusing this:\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  \\<lbrakk>t \\<turnstile> (x1', m1') \\<approx> (x2', m2');\n   \\<lbrace>\\<rbrace> \\<sim>m ta2\\<rbrakk>\n  \\<Longrightarrow> \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', m1') =\n                    \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', m1')", "by auto"], ["proof (state)\nthis:\n  \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', m1')\n\ngoal (1 subgoal):\n 1. m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n     (ls2', (ts2', m2'), ws2', is2') \\<Longrightarrow>\n    m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "with tst1 tst1' ln ln2"], ["proof (chain)\npicking this:\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ln1 = ln2\n  ln2 = no_wait_locks\n  \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', m1')", "show ?lhs"], ["proof (prove)\nusing this:\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ln1 = ln2\n  ln2 = no_wait_locks\n  \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', m1')\n\ngoal (1 subgoal):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n     (ls1', (ts1', m1'), ws1', is1')", "unfolding \\<open>ta1 = \\<epsilon>\\<close>"], ["proof (prove)\nusing this:\n  ts1 t = \\<lfloor>(x1, ln1)\\<rfloor>\n  ts1' t = \\<lfloor>(x1', ln1')\\<rfloor>\n  ln1 = ln2\n  ln2 = no_wait_locks\n  \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', m1')\n\ngoal (1 subgoal):\n 1. m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, \\<lbrace>\\<rbrace>)\n     (ls1', (ts1', m1'), ws1', is1')", "by-(rule r1.m\\<tau>move.intros, auto)"], ["proof (state)\nthis:\n  m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n   (ls1', (ts1', m1'), ws1', is1')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m\\<tau>move1 (ls1, (ts1, m1), ws1, is1) (t, ta1)\n   (ls1', (ts1', m1'), ws1', is1') =\n  m\\<tau>move2 (ls2, (ts2, m2), ws2, is2) (t, ta2)\n   (ls2', (ts2', m2'), ws2', is2')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m\\<tau>move1 s1 tl1 s1' = m\\<tau>move2 s2 tl2 s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "sublocale FWdelay_bisimulation_lift < mthr: \\<tau>inv r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>inv r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2", "by(rule \\<tau>inv_lift)"], ["", "locale FWdelay_bisimulation_final_base =\n  FWdelay_bisimulation_lift_aux +\n  constrains final1 :: \"'x1 \\<Rightarrow> bool\"\n  and r1 :: \"('l,'t,'x1,'m1,'w, 'o) semantics\"\n  and final2 :: \"'x2 \\<Rightarrow> bool\"\n  and r2 :: \"('l,'t,'x2,'m2,'w, 'o) semantics\"\n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  and bisim :: \"'t \\<Rightarrow> ('x1 \\<times> 'm1, 'x2 \\<times> 'm2) bisim\"\n  and bisim_wait :: \"('x1, 'x2) bisim\"\n  and \\<tau>move1 :: \"('l,'t,'x1,'m1,'w, 'o) \\<tau>moves\"\n  and \\<tau>move2 :: \"('l,'t,'x2,'m2,'w, 'o) \\<tau>moves\"\n  assumes delay_bisim_locale:\n  \"delay_bisimulation_final_base (r1 t) (r2 t) (bisim t) \\<tau>move1 \\<tau>move2 (\\<lambda>(x1, m). final1 x1) (\\<lambda>(x2, m). final2 x2)\""], ["", "sublocale FWdelay_bisimulation_final_base <\n  delay_bisimulation_final_base \"r1 t\" \"r2 t\" \"bisim t\" \"ta_bisim bisim\" \\<tau>move1 \\<tau>move2\n                                \"\\<lambda>(x1, m). final1 x1\" \"\\<lambda>(x2, m). final2 x2\" \n  for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_final_base (r1 t) (r2 t) (bisim t) \\<tau>move1\n     \\<tau>move2 (\\<lambda>(x1, m). final1 x1) (\\<lambda>(x2, m). final2 x2)", "by(rule delay_bisim_locale)"], ["", "context FWdelay_bisimulation_final_base begin"], ["", "lemma FWdelay_bisimulation_final_base_flip:\n  \"FWdelay_bisimulation_final_base final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_final_base final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_final_base.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. FWdelay_bisimulation_lift_aux final2 r2 final1 r1 \\<tau>move2\n     \\<tau>move1\n 2. FWdelay_bisimulation_final_base_axioms final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_lift_aux_flip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_final_base_axioms final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_final_base_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       delay_bisimulation_final_base (r2 t) (r1 t) (flip (bisim t))\n        \\<tau>move2 \\<tau>move1 (\\<lambda>(x1, m). final2 x1)\n        (\\<lambda>(x2, m). final1 x2)", "apply(rule delay_bisimulation_final_base_flip)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma FWdelay_bisimulation_final_base_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_final_base final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1 =\n   FWdelay_bisimulation_final_base final1 r1 final2 r2 bisim \\<tau>move1 \\<tau>move2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_final_base final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1 =\n    FWdelay_bisimulation_final_base final1 r1 final2 r2 bisim \\<tau>move1\n     \\<tau>move2", "by(auto dest: FWdelay_bisimulation_final_base.FWdelay_bisimulation_final_base_flip simp only: flip_flip)"], ["", "context FWdelay_bisimulation_final_base begin"], ["", "lemma cond_actions_ok_bisim_ex_\\<tau>1_inv:\n  fixes ls ts1 m1 ws \"is\" ts2 m2 ct\n  defines \"s1' \\<equiv> activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\"\n  assumes mbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\"\n  shows \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\"\n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2\"\n  and \"r1.cond_action_ok s1' t ct\"\n  and \"thr s1' t = Some xln\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2)) &&&\n    r1.cond_action_ok s1' t ct &&& thr s1' t = \\<lfloor>xln\\<rfloor>", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\n 2. \\<And>t'.\n       t' \\<noteq> t \\<Longrightarrow>\n       tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2\n 3. r1.cond_action_ok s1' t ct\n 4. thr s1' t = \\<lfloor>xln\\<rfloor>", "have \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n        (\\<forall>t'. t' \\<noteq> t \\<longrightarrow> tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n        r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "using ct"], ["proof (prove)\nusing this:\n  r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "proof(cases ct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct;\n        ct = Join x1\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n                         (\\<forall>t'.\n                             t' \\<noteq> t \\<longrightarrow>\n                             tbisim (ws t' = None) t' (thr s1' t') m1\n                              (ts2 t') m2) \\<and>\n                         r1.cond_action_ok s1' t ct \\<and>\n                         thr s1' t = \\<lfloor>xln\\<rfloor>\n 2. \\<lbrakk>r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct;\n     ct = Yield\\<rbrakk>\n    \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n                      (\\<forall>t'.\n                          t' \\<noteq> t \\<longrightarrow>\n                          tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t')\n                           m2) \\<and>\n                      r1.cond_action_ok s1' t ct \\<and>\n                      thr s1' t = \\<lfloor>xln\\<rfloor>", "case (Join t')"], ["proof (state)\nthis:\n  ct = Join t'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct;\n        ct = Join x1\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n                         (\\<forall>t'.\n                             t' \\<noteq> t \\<longrightarrow>\n                             tbisim (ws t' = None) t' (thr s1' t') m1\n                              (ts2 t') m2) \\<and>\n                         r1.cond_action_ok s1' t ct \\<and>\n                         thr s1' t = \\<lfloor>xln\\<rfloor>\n 2. \\<lbrakk>r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct;\n     ct = Yield\\<rbrakk>\n    \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n                      (\\<forall>t'.\n                          t' \\<noteq> t \\<longrightarrow>\n                          tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t')\n                           m2) \\<and>\n                      r1.cond_action_ok s1' t ct \\<and>\n                      thr s1' t = \\<lfloor>xln\\<rfloor>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "proof(cases \"ts1 t'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ts1 t' = None \\<Longrightarrow>\n    \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n 2. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "case None"], ["proof (state)\nthis:\n  ts1 t' = None\n\ngoal (2 subgoals):\n 1. ts1 t' = None \\<Longrightarrow>\n    \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n 2. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "with mbisim ts1t"], ["proof (chain)\npicking this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (ts2 ?t'13) m2\n  ts1 t = \\<lfloor>xln\\<rfloor>\n  ts1 t' = None", "have \"t \\<noteq> t'\""], ["proof (prove)\nusing this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (ts2 ?t'13) m2\n  ts1 t = \\<lfloor>xln\\<rfloor>\n  ts1 t' = None\n\ngoal (1 subgoal):\n 1. t \\<noteq> t'", "by auto"], ["proof (state)\nthis:\n  t \\<noteq> t'\n\ngoal (2 subgoals):\n 1. ts1 t' = None \\<Longrightarrow>\n    \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n 2. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "moreover"], ["proof (state)\nthis:\n  t \\<noteq> t'\n\ngoal (2 subgoals):\n 1. ts1 t' = None \\<Longrightarrow>\n    \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n 2. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from None Join"], ["proof (chain)\npicking this:\n  ts1 t' = None\n  ct = Join t'", "have \"s1' = (ls, (ts1, m1), ws, is)\""], ["proof (prove)\nusing this:\n  ts1 t' = None\n  ct = Join t'\n\ngoal (1 subgoal):\n 1. s1' = (ls, (ts1, m1), ws, is)", "by(simp add: s1'_def)"], ["proof (state)\nthis:\n  s1' = (ls, (ts1, m1), ws, is)\n\ngoal (2 subgoals):\n 1. ts1 t' = None \\<Longrightarrow>\n    \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n 2. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "ultimately"], ["proof (chain)\npicking this:\n  t \\<noteq> t'\n  s1' = (ls, (ts1, m1), ws, is)", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<noteq> t'\n  s1' = (ls, (ts1, m1), ws, is)\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "using mbisim Join ct None ts1t"], ["proof (prove)\nusing this:\n  t \\<noteq> t'\n  s1' = (ls, (ts1, m1), ws, is)\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (ts2 ?t'13) m2\n  ct = Join t'\n  r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\n  ts1 t' = None\n  ts1 t = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "by(simp add: tbisim_def)"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n  (\\<forall>t'.\n      t' \\<noteq> t \\<longrightarrow>\n      tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n  r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "case (Some xln)"], ["proof (state)\nthis:\n  ts1 t' = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "moreover"], ["proof (state)\nthis:\n  ts1 t' = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "obtain x1 ln where \"xln = (x1, ln)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x1 ln. xln = (x1, ln) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases xln)"], ["proof (state)\nthis:\n  xln = (x1, ln)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "ultimately"], ["proof (chain)\npicking this:\n  ts1 t' = \\<lfloor>xln\\<rfloor>\n  xln = (x1, ln)", "have ts1t': \"ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\""], ["proof (prove)\nusing this:\n  ts1 t' = \\<lfloor>xln\\<rfloor>\n  xln = (x1, ln)\n\ngoal (1 subgoal):\n 1. ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from Join ct Some ts2t"], ["proof (chain)\npicking this:\n  ct = Join t'\n  r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\n  ts1 t' = \\<lfloor>xln\\<rfloor>\n  ts2 t = \\<lfloor>xln'\\<rfloor>", "have tt': \"t' \\<noteq> t\""], ["proof (prove)\nusing this:\n  ct = Join t'\n  r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\n  ts1 t' = \\<lfloor>xln\\<rfloor>\n  ts2 t = \\<lfloor>xln'\\<rfloor>\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t", "by auto"], ["proof (state)\nthis:\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from mbisim[OF tt'] ts1t'"], ["proof (chain)\npicking this:\n  tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>", "obtain x2 where ts2t': \"ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>\" \n        and bisim: \"t' \\<turnstile> (x1, m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        \\<lbrakk>ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>;\n         t' \\<turnstile> (x1, m1) \\<approx> (x2, m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: tbisim_def)"], ["proof (state)\nthis:\n  ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>\n  t' \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from ct Join ts2t'"], ["proof (chain)\npicking this:\n  r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\n  ct = Join t'\n  ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>", "have final2: \"final2 x2\" and ln: \"ln = no_wait_locks\"\n      and wst': \"ws t' = None\""], ["proof (prove)\nusing this:\n  r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\n  ct = Join t'\n  ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. final2 x2 &&& ln = no_wait_locks &&& ws t' = None", "by simp_all"], ["proof (state)\nthis:\n  final2 x2\n  ln = no_wait_locks\n  ws t' = None\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "let ?x1' = \"SOME x. r1.silent_moves t' (x1, m1) (x, m1) \\<and> final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from final2_simulation[OF bisim] final2"], ["proof (chain)\npicking this:\n  case (x2, m2) of (x2, m) \\<Rightarrow> final2 x2 \\<Longrightarrow>\n  \\<exists>s1'.\n     r1.silent_moves t' (x1, m1) s1' \\<and>\n     t' \\<turnstile> s1' \\<approx> (x2, m2) \\<and>\n     (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n  final2 x2", "obtain x1' m1' \n          where \"r1.silent_moves t' (x1, m1) (x1', m1')\" and \"t' \\<turnstile> (x1', m1') \\<approx> (x2, m2)\"\n          and \"final1 x1'\""], ["proof (prove)\nusing this:\n  case (x2, m2) of (x2, m) \\<Rightarrow> final2 x2 \\<Longrightarrow>\n  \\<exists>s1'.\n     r1.silent_moves t' (x1, m1) s1' \\<and>\n     t' \\<turnstile> s1' \\<approx> (x2, m2) \\<and>\n     (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n  final2 x2\n\ngoal (1 subgoal):\n 1. (\\<And>x1' m1'.\n        \\<lbrakk>r1.silent_moves t' (x1, m1) (x1', m1');\n         t' \\<turnstile> (x1', m1') \\<approx> (x2, m2); final1 x1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r1.silent_moves t' (x1, m1) (x1', m1')\n  t' \\<turnstile> (x1', m1') \\<approx> (x2, m2)\n  final1 x1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "moreover"], ["proof (state)\nthis:\n  r1.silent_moves t' (x1, m1) (x1', m1')\n  t' \\<turnstile> (x1', m1') \\<approx> (x2, m2)\n  final1 x1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "hence \"m1' = m1\""], ["proof (prove)\nusing this:\n  r1.silent_moves t' (x1, m1) (x1', m1')\n  t' \\<turnstile> (x1', m1') \\<approx> (x2, m2)\n  final1 x1'\n\ngoal (1 subgoal):\n 1. m1' = m1", "using bisim"], ["proof (prove)\nusing this:\n  r1.silent_moves t' (x1, m1) (x1', m1')\n  t' \\<turnstile> (x1', m1') \\<approx> (x2, m2)\n  final1 x1'\n  t' \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. m1' = m1", "by(auto dest: r1.red_rtrancl_\\<tau>_heapD_inv)"], ["proof (state)\nthis:\n  m1' = m1\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "ultimately"], ["proof (chain)\npicking this:\n  r1.silent_moves t' (x1, m1) (x1', m1')\n  t' \\<turnstile> (x1', m1') \\<approx> (x2, m2)\n  final1 x1'\n  m1' = m1", "have \"\\<exists>x. r1.silent_moves t' (x1, m1) (x, m1) \\<and> final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  r1.silent_moves t' (x1, m1) (x1', m1')\n  t' \\<turnstile> (x1', m1') \\<approx> (x2, m2)\n  final1 x1'\n  m1' = m1\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>x.\n     r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n     final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "}"], ["proof (state)\nthis:\n  \\<exists>x.\n     r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n     final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from someI_ex[OF this]"], ["proof (chain)\npicking this:\n  r1.silent_moves t' (x1, m1)\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2),\n    m1) \\<and>\n  final1\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)) \\<and>\n  t' \\<turnstile> (SOME x.\n                      r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                      final1 x \\<and> t' \\<turnstile> (x, m1)\n                      \\<approx> (x2, m2),\n                   m1)\n  \\<approx> (x2, m2)", "have red1: \"r1.silent_moves t' (x1, m1) (?x1', m1)\"\n        and final1: \"final1 ?x1'\" and bisim': \"t' \\<turnstile> (?x1', m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  r1.silent_moves t' (x1, m1)\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2),\n    m1) \\<and>\n  final1\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)) \\<and>\n  t' \\<turnstile> (SOME x.\n                      r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                      final1 x \\<and> t' \\<turnstile> (x, m1)\n                      \\<approx> (x2, m2),\n                   m1)\n  \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. r1.silent_moves t' (x1, m1)\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2),\n      m1) &&&\n    final1\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2)) &&&\n    t' \\<turnstile> (SOME x.\n                        r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                        final1 x \\<and> t' \\<turnstile> (x, m1)\n                        \\<approx> (x2, m2),\n                     m1)\n    \\<approx> (x2, m2)", "by blast+"], ["proof (state)\nthis:\n  r1.silent_moves t' (x1, m1)\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2),\n    m1)\n  final1\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n  t' \\<turnstile> (SOME x.\n                      r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                      final1 x \\<and> t' \\<turnstile> (x, m1)\n                      \\<approx> (x2, m2),\n                   m1)\n  \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "let ?S1' = \"redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t' ?x1' m1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from r1.silent_moves_into_RedT_\\<tau>_inv[where ?s=\"(ls, (ts1, m1), ws, is)\" and t=t', simplified, OF red1]\n        bisim ts1t' ln wst'"], ["proof (chain)\npicking this:\n  \\<lbrakk>ts1 t' = \\<lfloor>(x1, no_wait_locks)\\<rfloor>;\n   ws t' = None\\<rbrakk>\n  \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                     (ls,\n                      (ts1(t' \\<mapsto>\n                       (SOME x.\n                           r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                           final1 x \\<and> t' \\<turnstile> (x, m1)\n                           \\<approx> (x2, m2),\n                        snd (the (ts1 t')))),\n                       m1),\n                      ws, is)\n  t' \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  ln = no_wait_locks\n  ws t' = None", "have Red1: \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) ?S1'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ts1 t' = \\<lfloor>(x1, no_wait_locks)\\<rfloor>;\n   ws t' = None\\<rbrakk>\n  \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                     (ls,\n                      (ts1(t' \\<mapsto>\n                       (SOME x.\n                           r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                           final1 x \\<and> t' \\<turnstile> (x, m1)\n                           \\<approx> (x2, m2),\n                        snd (the (ts1 t')))),\n                       m1),\n                      ws, is)\n  t' \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  ln = no_wait_locks\n  ws t' = None\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n     (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n       (SOME x.\n           r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n           final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n       m1)", "by auto"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "moreover"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from Join ln ts1t' final1 wst' tt'"], ["proof (chain)\npicking this:\n  ct = Join t'\n  ln = no_wait_locks\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  final1\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n  ws t' = None\n  t' \\<noteq> t", "have ct': \"r1.cond_action_ok ?S1' t ct\""], ["proof (prove)\nusing this:\n  ct = Join t'\n  ln = no_wait_locks\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  final1\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n  ws t' = None\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. r1.cond_action_ok\n     (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n       (SOME x.\n           r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n           final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n       m1)\n     t ct", "by(auto intro: finfun_ext)"], ["proof (state)\nthis:\n  r1.cond_action_ok\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n   t ct\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "{"], ["proof (state)\nthis:\n  r1.cond_action_ok\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n   t ct\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "fix t''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "assume \"t \\<noteq> t''\""], ["proof (state)\nthis:\n  t \\<noteq> t''\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "with Join mbisim[OF this[symmetric]] bisim' ts1t' ts2t' wst' s1'_def"], ["proof (chain)\npicking this:\n  ct = Join t'\n  tbisim (ws t'' = None) t'' (ts1 t'') m1 (ts2 t'') m2\n  t' \\<turnstile> (SOME x.\n                      r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                      final1 x \\<and> t' \\<turnstile> (x, m1)\n                      \\<approx> (x2, m2),\n                   m1)\n  \\<approx> (x2, m2)\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>\n  ws t' = None\n  s1' \\<equiv>\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n  t \\<noteq> t''", "have \"tbisim (ws t'' = None) t'' (thr s1' t'') m1 (ts2 t'') m2\""], ["proof (prove)\nusing this:\n  ct = Join t'\n  tbisim (ws t'' = None) t'' (ts1 t'') m1 (ts2 t'') m2\n  t' \\<turnstile> (SOME x.\n                      r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n                      final1 x \\<and> t' \\<turnstile> (x, m1)\n                      \\<approx> (x2, m2),\n                   m1)\n  \\<approx> (x2, m2)\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>\n  ws t' = None\n  s1' \\<equiv>\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n  t \\<noteq> t''\n\ngoal (1 subgoal):\n 1. tbisim (ws t'' = None) t'' (thr s1' t'') m1 (ts2 t'') m2", "by(auto simp add: tbisim_def redT_updLns_def o_def finfun_Diag_const2)"], ["proof (state)\nthis:\n  tbisim (ws t'' = None) t'' (thr s1' t'') m1 (ts2 t'') m2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "}"], ["proof (state)\nthis:\n  t \\<noteq> ?t''15 \\<Longrightarrow>\n  tbisim (ws ?t''15 = None) ?t''15 (thr s1' ?t''15) m1 (ts2 ?t''15) m2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "moreover"], ["proof (state)\nthis:\n  t \\<noteq> ?t''15 \\<Longrightarrow>\n  tbisim (ws ?t''15 = None) ?t''15 (thr s1' ?t''15) m1 (ts2 ?t''15) m2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "from Join ts1t' ts2t' final2 ln"], ["proof (chain)\npicking this:\n  ct = Join t'\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>\n  final2 x2\n  ln = no_wait_locks", "have \"s1' = ?S1'\""], ["proof (prove)\nusing this:\n  ct = Join t'\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  ts2 t' = \\<lfloor>(x2, ln)\\<rfloor>\n  final2 x2\n  ln = no_wait_locks\n\ngoal (1 subgoal):\n 1. s1' =\n    redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1", "by(simp add: s1'_def)"], ["proof (state)\nthis:\n  s1' =\n  redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n   m1\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ts1 t' = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n       (\\<forall>t'.\n           t' \\<noteq> t \\<longrightarrow>\n           tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n       r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n  t \\<noteq> ?t''15 \\<Longrightarrow>\n  tbisim (ws ?t''15 = None) ?t''15 (thr s1' ?t''15) m1 (ts2 ?t''15) m2\n  s1' =\n  redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n   m1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n  t \\<noteq> ?t''15 \\<Longrightarrow>\n  tbisim (ws ?t''15 = None) ?t''15 (thr s1' ?t''15) m1 (ts2 ?t''15) m2\n  s1' =\n  redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n   m1\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "using Red1 ct' ts1t' tt' ts1t"], ["proof (prove)\nusing this:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n  t \\<noteq> ?t''15 \\<Longrightarrow>\n  tbisim (ws ?t''15 = None) ?t''15 (thr s1' ?t''15) m1 (ts2 ?t''15) m2\n  s1' =\n  redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n   (SOME x.\n       r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n       final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n   m1\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n  r1.cond_action_ok\n   (redT_upd_\\<epsilon> (ls, (ts1, m1), ws, is) t'\n     (SOME x.\n         r1.silent_moves t' (x1, m1) (x, m1) \\<and>\n         final1 x \\<and> t' \\<turnstile> (x, m1) \\<approx> (x2, m2))\n     m1)\n   t ct\n  ts1 t' = \\<lfloor>(x1, ln)\\<rfloor>\n  t' \\<noteq> t\n  ts1 t = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "by(auto)"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n  (\\<forall>t'.\n      t' \\<noteq> t \\<longrightarrow>\n      tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n  r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n  (\\<forall>t'.\n      t' \\<noteq> t \\<longrightarrow>\n      tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n  r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct;\n     ct = Yield\\<rbrakk>\n    \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n                      (\\<forall>t'.\n                          t' \\<noteq> t \\<longrightarrow>\n                          tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t')\n                           m2) \\<and>\n                      r1.cond_action_ok s1' t ct \\<and>\n                      thr s1' t = \\<lfloor>xln\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct;\n     ct = Yield\\<rbrakk>\n    \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n                      (\\<forall>t'.\n                          t' \\<noteq> t \\<longrightarrow>\n                          tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t')\n                           m2) \\<and>\n                      r1.cond_action_ok s1' t ct \\<and>\n                      thr s1' t = \\<lfloor>xln\\<rfloor>", "case Yield"], ["proof (state)\nthis:\n  ct = Yield\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct;\n     ct = Yield\\<rbrakk>\n    \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n                      (\\<forall>t'.\n                          t' \\<noteq> t \\<longrightarrow>\n                          tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t')\n                           m2) \\<and>\n                      r1.cond_action_ok s1' t ct \\<and>\n                      thr s1' t = \\<lfloor>xln\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  ct = Yield\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "using mbisim ts1t"], ["proof (prove)\nusing this:\n  ct = Yield\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (ts2 ?t'13) m2\n  ts1 t = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n    (\\<forall>t'.\n        t' \\<noteq> t \\<longrightarrow>\n        tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n    r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>", "by(simp add: s1'_def)"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n  (\\<forall>t'.\n      t' \\<noteq> t \\<longrightarrow>\n      tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n  r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n  (\\<forall>t'.\n      t' \\<noteq> t \\<longrightarrow>\n      tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n  r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n\ngoal (4 subgoals):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\n 2. \\<And>t'.\n       t' \\<noteq> t \\<Longrightarrow>\n       tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2\n 3. r1.cond_action_ok s1' t ct\n 4. thr s1' t = \\<lfloor>xln\\<rfloor>", "thus \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\"\n    and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2\"\n    and \"r1.cond_action_ok s1' t ct\"\n    and \"thr s1' t = \\<lfloor>xln\\<rfloor>\""], ["proof (prove)\nusing this:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' \\<and>\n  (\\<forall>t'.\n      t' \\<noteq> t \\<longrightarrow>\n      tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2) \\<and>\n  r1.cond_action_ok s1' t ct \\<and> thr s1' t = \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2)) &&&\n    r1.cond_action_ok s1' t ct &&& thr s1' t = \\<lfloor>xln\\<rfloor>", "by blast+"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (thr s1' ?t'13) m1 (ts2 ?t'13) m2\n  r1.cond_action_ok s1' t ct\n  thr s1' t = \\<lfloor>xln\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cond_actions_oks_bisim_ex_\\<tau>1_inv:\n  fixes ls ts1 m1 ws \"is\" ts2 m2 cts\n  defines \"s1' \\<equiv> activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts\"\n  assumes tbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\"\n  shows \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1'\" \n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2\"\n  and \"r1.cond_action_oks s1' t cts\"\n  and \"thr s1' t = Some xln\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2)) &&&\n    r1.cond_action_oks s1' t cts &&& thr s1' t = \\<lfloor>xln\\<rfloor>", "using tbisim ts1t ct"], ["proof (prove)\nusing this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (ts2 ?t'13) m2\n  ts1 t = \\<lfloor>xln\\<rfloor>\n  r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\n\ngoal (1 subgoal):\n 1. (\\<tau>mRed1 (ls, (ts1, m1), ws, is) s1' &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (thr s1' t') m1 (ts2 t') m2)) &&&\n    r1.cond_action_oks s1' t cts &&& thr s1' t = \\<lfloor>xln\\<rfloor>", "unfolding s1'_def"], ["proof (prove)\nusing this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (ts2 ?t'13) m2\n  ts1 t = \\<lfloor>xln\\<rfloor>\n  r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\n\ngoal (1 subgoal):\n 1. (\\<tau>mRed1 (ls, (ts1, m1), ws, is)\n      (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n        (ls, (ts2, m2), ws, is) cts) &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t'\n          (thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                 (ls, (ts2, m2), ws, is) cts)\n            t')\n          m1 (ts2 t') m2)) &&&\n    r1.cond_action_oks\n     (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       cts)\n     t cts &&&\n    thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) cts)\n     t =\n    \\<lfloor>xln\\<rfloor>", "proof(induct cts arbitrary: ts1)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "case (Cons ct cts)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1.13 t') m1 (ts2 t') m2;\n   ?ts1.13 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> \\<tau>mRed1 (ls, (?ts1.13, m1), ws, is)\n                     (activate_cond_actions1 (ls, (?ts1.13, m1), ws, is)\n                       (ls, (ts2, m2), ws, is) cts)\n  \\<lbrakk>?t'13 \\<noteq> t;\n   \\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow>\n      tbisim (ws t' = None) t' (?ts1.13 t') m1 (ts2 t') m2;\n   ?ts1.13 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws ?t'13 = None) ?t'13\n                     (thr (activate_cond_actions1\n                            (ls, (?ts1.13, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) cts)\n                       ?t'13)\n                     m1 (ts2 ?t'13) m2\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1.13 t') m1 (ts2 t') m2;\n   ?ts1.13 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> r1.cond_action_oks\n                     (activate_cond_actions1 (ls, (?ts1.13, m1), ws, is)\n                       (ls, (ts2, m2), ws, is) cts)\n                     t cts\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1.13 t') m1 (ts2 t') m2;\n   ?ts1.13 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> thr (activate_cond_actions1 (ls, (?ts1.13, m1), ws, is)\n                          (ls, (ts2, m2), ws, is) cts)\n                     t =\n                    \\<lfloor>xln\\<rfloor>\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "note IH1 = \\<open>\\<And>ts1. \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2; ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n              \\<Longrightarrow> \\<tau>mred1\\<^sup>*\\<^sup>* (ls, (ts1, m1), ws, is) (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts)\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1.0 t') m1 (ts2 t') m2;\n   ?ts1.0 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> \\<tau>mRed1 (ls, (?ts1.0, m1), ws, is)\n                     (activate_cond_actions1 (ls, (?ts1.0, m1), ws, is)\n                       (ls, (ts2, m2), ws, is) cts)\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "note IH2 = \\<open>\\<And>t' ts1. \\<lbrakk>t' \\<noteq> t; \\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2; ts1 t = \\<lfloor>xln\\<rfloor>;\n                        r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t' (thr (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts) t') m1 (ts2 t') m2\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?t' \\<noteq> t;\n   \\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow>\n      tbisim (ws t' = None) t' (?ts1.0 t') m1 (ts2 t') m2;\n   ?ts1.0 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws ?t' = None) ?t'\n                     (thr (activate_cond_actions1 (ls, (?ts1.0, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) cts)\n                       ?t')\n                     m1 (ts2 ?t') m2\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "note IH3 = \\<open>\\<And>ts1. \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2; ts1 t = \\<lfloor>xln\\<rfloor>;\n                     r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n              \\<Longrightarrow> r1.cond_action_oks (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts) t cts\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1.0 t') m1 (ts2 t') m2;\n   ?ts1.0 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> r1.cond_action_oks\n                     (activate_cond_actions1 (ls, (?ts1.0, m1), ws, is)\n                       (ls, (ts2, m2), ws, is) cts)\n                     t cts\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "note IH4 = \\<open>\\<And>ts1. \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2; ts1 t = \\<lfloor>xln\\<rfloor>;\n                     r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n              \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts) t = \\<lfloor>xln\\<rfloor>\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1.0 t') m1 (ts2 t') m2;\n   ?ts1.0 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> thr (activate_cond_actions1 (ls, (?ts1.0, m1), ws, is)\n                          (ls, (ts2, m2), ws, is) cts)\n                     t =\n                    \\<lfloor>xln\\<rfloor>\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1.0 t') m1 (ts2 t') m2;\n   ?ts1.0 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n  \\<Longrightarrow> thr (activate_cond_actions1 (ls, (?ts1.0, m1), ws, is)\n                          (ls, (ts2, m2), ws, is) cts)\n                     t =\n                    \\<lfloor>xln\\<rfloor>\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "fix ts1"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "assume tbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n      and ts1t: \"ts1 t = \\<lfloor>xln\\<rfloor>\"\n      and ct: \"r2.cond_action_oks (ls, (ts2, m2), ws, is) t (ct # cts)\""], ["proof (state)\nthis:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (ts2 ?t'13) m2\n  ts1 t = \\<lfloor>xln\\<rfloor>\n  r2.cond_action_oks (ls, (ts2, m2), ws, is) t (ct # cts)\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "from ct"], ["proof (chain)\npicking this:\n  r2.cond_action_oks (ls, (ts2, m2), ws, is) t (ct # cts)", "have 1: \"r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\"\n      and 2: \"r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\""], ["proof (prove)\nusing this:\n  r2.cond_action_oks (ls, (ts2, m2), ws, is) t (ct # cts)\n\ngoal (1 subgoal):\n 1. r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct &&&\n    r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts", "by auto"], ["proof (state)\nthis:\n  r2.cond_action_ok (ls, (ts2, m2), ws, is) t ct\n  r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "let ?s1' = \"activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\""], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "from cond_actions_ok_bisim_ex_\\<tau>1_inv[OF tbisim, OF _ ts1t ts2t 1]"], ["proof (chain)\npicking this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n  \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t;\n   ?t' \\<noteq> t\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws ?t' = None) ?t'\n                     (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) ct)\n                       ?t')\n                     m1 (ts2 ?t') m2\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r1.cond_action_ok\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   t ct\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct)\n   t =\n  \\<lfloor>xln\\<rfloor>", "have tbisim': \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (thr ?s1' t') m1 (ts2 t') m2\"\n      and red: \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) ?s1'\" and ct': \"r1.cond_action_ok ?s1' t ct\" \n      and ts1't: \"thr ?s1' t = \\<lfloor>xln\\<rfloor>\""], ["proof (prove)\nusing this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n  \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t;\n   ?t' \\<noteq> t\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws ?t' = None) ?t'\n                     (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) ct)\n                       ?t')\n                     m1 (ts2 ?t') m2\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r1.cond_action_ok\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   t ct\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct)\n   t =\n  \\<lfloor>xln\\<rfloor>\n\ngoal (1 subgoal):\n 1. ((\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t'\n          (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n                 (ls, (ts2, m2), ws, is) ct)\n            t')\n          m1 (ts2 t') m2) &&&\n     \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n      (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct)) &&&\n    r1.cond_action_ok\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     t ct &&&\n    thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct)\n     t =\n    \\<lfloor>xln\\<rfloor>", "by blast+"], ["proof (state)\nthis:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'13 = None) ?t'13\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct)\n     ?t'13)\n   m1 (ts2 ?t'13) m2\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n  r1.cond_action_ok\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   t ct\n  thr (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct)\n   t =\n  \\<lfloor>xln\\<rfloor>\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "let ?s1'' = \"activate_cond_actions1 ?s1' (ls, (ts2, m2), ws, is) cts\""], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "have \"locks ?s1' = ls\" \"shr ?s1' = m1\" \"wset ?s1' = ws\" \"interrupts ?s1' = is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (locks\n      (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct) =\n     ls &&&\n     shr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n           (ls, (ts2, m2), ws, is) ct) =\n     m1) &&&\n    wset\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct) =\n    ws &&&\n    interrupts\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct) =\n    is", "by simp_all"], ["proof (state)\nthis:\n  locks\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct) =\n  ls\n  shr (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct) =\n  m1\n  wset\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct) =\n  ws\n  interrupts\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct) =\n  is\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "hence s1': \"(ls, (thr ?s1', m1), ws, is) = ?s1'\""], ["proof (prove)\nusing this:\n  locks\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct) =\n  ls\n  shr (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct) =\n  m1\n  wset\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct) =\n  ws\n  interrupts\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct) =\n  is\n\ngoal (1 subgoal):\n 1. (ls,\n     (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n            (ls, (ts2, m2), ws, is) ct),\n      m1),\n     ws, is) =\n    activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct", "by(cases \"?s1'\") auto"], ["proof (state)\nthis:\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "from IH1[OF tbisim', OF _ ts1't 2] s1'"], ["proof (chain)\npicking this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed1\n   (ls,\n    (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n           (ls, (ts2, m2), ws, is) ct),\n     m1),\n    ws, is)\n   (activate_cond_actions1\n     (ls,\n      (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n             (ls, (ts2, m2), ws, is) ct),\n       m1),\n      ws, is)\n     (ls, (ts2, m2), ws, is) cts)\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct", "have red': \"\\<tau>mRed1 ?s1' ?s1''\""], ["proof (prove)\nusing this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed1\n   (ls,\n    (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n           (ls, (ts2, m2), ws, is) ct),\n     m1),\n    ws, is)\n   (activate_cond_actions1\n     (ls,\n      (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n             (ls, (ts2, m2), ws, is) ct),\n       m1),\n      ws, is)\n     (ls, (ts2, m2), ws, is) cts)\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (activate_cond_actions1\n       (activate_cond_action1 (ls, (ts1, m1), ws, is)\n         (ls, (ts2, m2), ws, is) ct)\n       (ls, (ts2, m2), ws, is) cts)", "by simp"], ["proof (state)\nthis:\n  \\<tau>mRed1\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)\n\ngoal (8 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n 6. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 8. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "with red"], ["proof (chain)\npicking this:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n  \\<tau>mRed1\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)", "show \"\\<tau>mRed1 (ls, (ts1, m1), ws, is) (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) (ct # cts))\""], ["proof (prove)\nusing this:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n  \\<tau>mRed1\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n     (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       (ct # cts))", "by auto"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     (ct # cts))\n\ngoal (7 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 6. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "{"], ["proof (state)\nthis:\n  \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n   (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     (ct # cts))\n\ngoal (7 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 6. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "fix t'"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 6. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "assume t't: \"t' \\<noteq> t\""], ["proof (state)\nthis:\n  t' \\<noteq> t\n\ngoal (7 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts t' ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) (a # cts))\n                            t')\n                          m1 (ts2 t') m2\n 6. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 7. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "from IH2[OF t't tbisim', OF _ ts1't 2] s1'"], ["proof (chain)\npicking this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  tbisim (ws t' = None) t'\n   (thr (activate_cond_actions1\n          (ls,\n           (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n                  (ls, (ts2, m2), ws, is) ct),\n            m1),\n           ws, is)\n          (ls, (ts2, m2), ws, is) cts)\n     t')\n   m1 (ts2 t') m2\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct", "show \"tbisim (ws t' = None) t' (thr (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) (ct # cts)) t') m1 (ts2 t') m2\""], ["proof (prove)\nusing this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  tbisim (ws t' = None) t'\n   (thr (activate_cond_actions1\n          (ls,\n           (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n                  (ls, (ts2, m2), ws, is) ct),\n            m1),\n           ws, is)\n          (ls, (ts2, m2), ws, is) cts)\n     t')\n   m1 (ts2 t') m2\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n\ngoal (1 subgoal):\n 1. tbisim (ws t' = None) t'\n     (thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n            (ls, (ts2, m2), ws, is) (ct # cts))\n       t')\n     m1 (ts2 t') m2", "by auto"], ["proof (state)\nthis:\n  tbisim (ws t' = None) t'\n   (thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) (ct # cts))\n     t')\n   m1 (ts2 t') m2\n\ngoal (6 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 6. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "}"], ["proof (state)\nthis:\n  ?t'15 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws ?t'15 = None) ?t'15\n   (thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) (ct # cts))\n     ?t'15)\n   m1 (ts2 ?t'15) m2\n\ngoal (6 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 6. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "from red' ct'"], ["proof (chain)\npicking this:\n  \\<tau>mRed1\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)\n  r1.cond_action_ok\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   t ct", "have \"r1.cond_action_ok ?s1'' t ct\""], ["proof (prove)\nusing this:\n  \\<tau>mRed1\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)\n  r1.cond_action_ok\n   (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     ct)\n   t ct\n\ngoal (1 subgoal):\n 1. r1.cond_action_ok\n     (activate_cond_actions1\n       (activate_cond_action1 (ls, (ts1, m1), ws, is)\n         (ls, (ts2, m2), ws, is) ct)\n       (ls, (ts2, m2), ws, is) cts)\n     t ct", "by(rule cond_actions_ok_\\<tau>mRed1_inv)"], ["proof (state)\nthis:\n  r1.cond_action_ok\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)\n   t ct\n\ngoal (6 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) (a # cts))\n                          t (a # cts)\n 6. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "with IH3[OF tbisim', OF _ ts1't 2] s1'"], ["proof (chain)\npicking this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r1.cond_action_oks\n   (activate_cond_actions1\n     (ls,\n      (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n             (ls, (ts2, m2), ws, is) ct),\n       m1),\n      ws, is)\n     (ls, (ts2, m2), ws, is) cts)\n   t cts\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n  r1.cond_action_ok\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)\n   t ct", "show \"r1.cond_action_oks (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) (ct # cts)) t (ct # cts)\""], ["proof (prove)\nusing this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r1.cond_action_oks\n   (activate_cond_actions1\n     (ls,\n      (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n             (ls, (ts2, m2), ws, is) ct),\n       m1),\n      ws, is)\n     (ls, (ts2, m2), ws, is) cts)\n   t cts\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n  r1.cond_action_ok\n   (activate_cond_actions1\n     (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     (ls, (ts2, m2), ws, is) cts)\n   t ct\n\ngoal (1 subgoal):\n 1. r1.cond_action_oks\n     (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       (ct # cts))\n     t (ct # cts)", "by auto"], ["proof (state)\nthis:\n  r1.cond_action_oks\n   (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n     (ct # cts))\n   t (ct # cts)\n\ngoal (5 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>\n 5. \\<And>a cts ts1.\n       \\<lbrakk>\\<And>ts1.\n                   \\<lbrakk>\\<And>t'.\n                               t' \\<noteq> t \\<Longrightarrow>\n                               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t')\n                                m2;\n                    ts1 t = \\<lfloor>xln\\<rfloor>;\n                    r2.cond_action_oks (ls, (ts2, m2), ws, is) t\n                     cts\\<rbrakk>\n                   \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n(activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n  cts);\n        \\<And>t' ts1.\n           \\<lbrakk>t' \\<noteq> t;\n            \\<And>t'.\n               t' \\<noteq> t \\<Longrightarrow>\n               tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> tbisim (ws t' = None) t'\n                              (thr (activate_cond_actions1\n                                     (ls, (ts1, m1), ws, is)\n                                     (ls, (ts2, m2), ws, is) cts)\n                                t')\n                              m1 (ts2 t') m2;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> r1.cond_action_oks\n                              (activate_cond_actions1\n                                (ls, (ts1, m1), ws, is)\n                                (ls, (ts2, m2), ws, is) cts)\n                              t cts;\n        \\<And>ts1.\n           \\<lbrakk>\\<And>t'.\n                       t' \\<noteq> t \\<Longrightarrow>\n                       tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n            ts1 t = \\<lfloor>xln\\<rfloor>;\n            r2.cond_action_oks (ls, (ts2, m2), ws, is) t cts\\<rbrakk>\n           \\<Longrightarrow> thr (activate_cond_actions1\n                                   (ls, (ts1, m1), ws, is)\n                                   (ls, (ts2, m2), ws, is) cts)\n                              t =\n                             \\<lfloor>xln\\<rfloor>;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t (a # cts)\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) (a # cts))\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "from ts1't IH4[OF tbisim', OF _ ts1't 2] s1'"], ["proof (chain)\npicking this:\n  thr (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct)\n   t =\n  \\<lfloor>xln\\<rfloor>\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_actions1\n        (ls,\n         (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n                (ls, (ts2, m2), ws, is) ct),\n          m1),\n         ws, is)\n        (ls, (ts2, m2), ws, is) cts)\n   t =\n  \\<lfloor>xln\\<rfloor>\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct", "show \"thr (activate_cond_actions1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) (ct # cts)) t = \\<lfloor>xln\\<rfloor>\""], ["proof (prove)\nusing this:\n  thr (activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct)\n   t =\n  \\<lfloor>xln\\<rfloor>\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_actions1\n        (ls,\n         (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n                (ls, (ts2, m2), ws, is) ct),\n          m1),\n         ws, is)\n        (ls, (ts2, m2), ws, is) cts)\n   t =\n  \\<lfloor>xln\\<rfloor>\n  (ls,\n   (thr (activate_cond_action1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct),\n    m1),\n   ws, is) =\n  activate_cond_action1 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\n\ngoal (1 subgoal):\n 1. thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) (ct # cts))\n     t =\n    \\<lfloor>xln\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n        (ls, (ts2, m2), ws, is) (ct # cts))\n   t =\n  \\<lfloor>xln\\<rfloor>\n\ngoal (4 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>t'.\n              t' \\<noteq> t \\<Longrightarrow>\n              tbisim (ws t' = None) t' (?ts1a15 t') m1 (ts2 t') m2;\n   ?ts1a15 t = \\<lfloor>xln\\<rfloor>;\n   r2.cond_action_oks (ls, (ts2, m2), ws, is) t (ct # cts)\\<rbrakk>\n  \\<Longrightarrow> thr (activate_cond_actions1 (ls, (?ts1a15, m1), ws, is)\n                          (ls, (ts2, m2), ws, is) (ct # cts))\n                     t =\n                    \\<lfloor>xln\\<rfloor>\n\ngoal (4 subgoals):\n 1. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> \\<tau>mRed1 (ls, (ts1, m1), ws, is)\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n 2. \\<And>t' ts1.\n       \\<lbrakk>t' \\<noteq> t;\n        \\<And>t'.\n           t' \\<noteq> t \\<Longrightarrow>\n           tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> tbisim (ws t' = None) t'\n                          (thr (activate_cond_actions1\n                                 (ls, (ts1, m1), ws, is)\n                                 (ls, (ts2, m2), ws, is) [])\n                            t')\n                          m1 (ts2 t') m2\n 3. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> r1.cond_action_oks\n                          (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                            (ls, (ts2, m2), ws, is) [])\n                          t []\n 4. \\<And>ts1.\n       \\<lbrakk>\\<And>t'.\n                   t' \\<noteq> t \\<Longrightarrow>\n                   tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2;\n        ts1 t = \\<lfloor>xln\\<rfloor>;\n        r2.cond_action_oks (ls, (ts2, m2), ws, is) t []\\<rbrakk>\n       \\<Longrightarrow> thr (activate_cond_actions1 (ls, (ts1, m1), ws, is)\n                               (ls, (ts2, m2), ws, is) [])\n                          t =\n                         \\<lfloor>xln\\<rfloor>", "qed(auto)"], ["", "lemma cond_actions_ok_bisim_ex_\\<tau>2_inv:\n  fixes ls ts1 m1 \"is\" ws ts2 m2 ct\n  defines \"s2' \\<equiv> activate_cond_action2 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) ct\"\n  assumes mbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r1.cond_action_ok (ls, (ts1, m1), ws, is) t ct\"\n  shows \"\\<tau>mRed2 (ls, (ts2, m2), ws, is) s2'\"\n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (thr s2' t') m2\"\n  and \"r2.cond_action_ok s2' t ct\"\n  and \"thr s2' t = Some xln'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>mRed2 (ls, (ts2, m2), ws, is) s2' &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (ts1 t') m1 (thr s2' t') m2)) &&&\n    r2.cond_action_ok s2' t ct &&& thr s2' t = \\<lfloor>xln'\\<rfloor>", "unfolding s2'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>mRed2 (ls, (ts2, m2), ws, is)\n      (activate_cond_action2 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n        ct) &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (ts1 t') m1\n          (thr (activate_cond_action2 (ls, (ts1, m1), ws, is)\n                 (ls, (ts2, m2), ws, is) ct)\n            t')\n          m2)) &&&\n    r2.cond_action_ok\n     (activate_cond_action2 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       ct)\n     t ct &&&\n    thr (activate_cond_action2 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) ct)\n     t =\n    \\<lfloor>xln'\\<rfloor>", "by(blast intro: FWdelay_bisimulation_final_base.cond_actions_ok_bisim_ex_\\<tau>1_inv[OF FWdelay_bisimulation_final_base_flip, where bisim_wait = \"flip bisim_wait\", unfolded flip_simps, OF mbisim _ _ ct, OF _ ts2t ts1t])+"], ["", "lemma cond_actions_oks_bisim_ex_\\<tau>2_inv:\n  fixes ls ts1 m1 ws \"is\" ts2 m2 cts\n  defines \"s2' \\<equiv> activate_cond_actions2 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is) cts\"\n  assumes tbisim: \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (ts2 t') m2\"\n  and ts1t: \"ts1 t = Some xln\"\n  and ts2t: \"ts2 t = Some xln'\"\n  and ct: \"r1.cond_action_oks (ls, (ts1, m1), ws, is) t cts\"\n  shows \"\\<tau>mRed2 (ls, (ts2, m2), ws, is) s2'\"\n  and \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws t' = None) t' (ts1 t') m1 (thr s2' t') m2\"\n  and \"r2.cond_action_oks s2' t cts\"\n  and \"thr s2' t = Some xln'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>mRed2 (ls, (ts2, m2), ws, is) s2' &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (ts1 t') m1 (thr s2' t') m2)) &&&\n    r2.cond_action_oks s2' t cts &&& thr s2' t = \\<lfloor>xln'\\<rfloor>", "unfolding s2'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>mRed2 (ls, (ts2, m2), ws, is)\n      (activate_cond_actions2 (ls, (ts1, m1), ws, is)\n        (ls, (ts2, m2), ws, is) cts) &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws t' = None) t' (ts1 t') m1\n          (thr (activate_cond_actions2 (ls, (ts1, m1), ws, is)\n                 (ls, (ts2, m2), ws, is) cts)\n            t')\n          m2)) &&&\n    r2.cond_action_oks\n     (activate_cond_actions2 (ls, (ts1, m1), ws, is) (ls, (ts2, m2), ws, is)\n       cts)\n     t cts &&&\n    thr (activate_cond_actions2 (ls, (ts1, m1), ws, is)\n          (ls, (ts2, m2), ws, is) cts)\n     t =\n    \\<lfloor>xln'\\<rfloor>", "by(blast intro: FWdelay_bisimulation_final_base.cond_actions_oks_bisim_ex_\\<tau>1_inv[OF FWdelay_bisimulation_final_base_flip, where bisim_wait = \"flip bisim_wait\", unfolded flip_simps, OF tbisim _ _ ct, OF _ ts2t ts1t])+"], ["", "lemma mfinal1_inv_simulation:\n  assumes \"s1 \\<approx>m s2\" \n  shows \"\\<exists>s2'. r2.mthr.silent_moves s2 s2' \\<and> s1 \\<approx>m s2' \\<and> r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and> shr s2' = shr s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "from \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have \"finite (dom (thr s1))\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. finite (dom (thr s1))", "by(auto dest: mbisim_finite1)"], ["proof (state)\nthis:\n  finite (dom (thr s1))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "moreover"], ["proof (state)\nthis:\n  finite (dom (thr s1))\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "have \"r1.final_threads s1 \\<subseteq> dom (thr s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r1.final_threads s1 \\<subseteq> dom (thr s1)", "by(auto simp add: r1.final_thread_def)"], ["proof (state)\nthis:\n  r1.final_threads s1 \\<subseteq> dom (thr s1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "ultimately"], ["proof (chain)\npicking this:\n  finite (dom (thr s1))\n  r1.final_threads s1 \\<subseteq> dom (thr s1)", "have \"finite (r1.final_threads s1)\""], ["proof (prove)\nusing this:\n  finite (dom (thr s1))\n  r1.final_threads s1 \\<subseteq> dom (thr s1)\n\ngoal (1 subgoal):\n 1. finite (r1.final_threads s1)", "by(blast intro: finite_subset)"], ["proof (state)\nthis:\n  finite (r1.final_threads s1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite (r1.final_threads s1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "using \\<open>s1 \\<approx>m s2\\<close>"], ["proof (prove)\nusing this:\n  finite (r1.final_threads s1)\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "proof(induct A\\<equiv>\"r1.final_threads s1\" arbitrary: s1 s2 rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>{} = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2\n 2. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "case empty"], ["proof (state)\nthis:\n  {} = r1.final_threads s1\n  s1 \\<approx>m s2\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>{} = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2\n 2. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>{} = r1.final_threads s1\\<close>[symmetric]"], ["proof (chain)\npicking this:\n  r1.final_threads s1 = {}", "have \"\\<forall>t. \\<not> r1.final_thread s1 t\""], ["proof (prove)\nusing this:\n  r1.final_threads s1 = {}\n\ngoal (1 subgoal):\n 1. \\<forall>t. \\<not> r1.final_thread s1 t", "by(auto)"], ["proof (state)\nthis:\n  \\<forall>t. \\<not> r1.final_thread s1 t\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>{} = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2\n 2. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "with \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  \\<forall>t. \\<not> r1.final_thread s1 t", "show ?case"], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  \\<forall>t. \\<not> r1.final_thread s1 t\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     \\<tau>mRed2 s2 s2' \\<and>\n     s1 \\<approx>m s2' \\<and>\n     r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n     shr s2' = shr s2\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "case (insert t A)"], ["proof (state)\nthis:\n  finite A\n  t \\<notin> A\n  \\<lbrakk>A = r1.final_threads ?s1.13; ?s1.13 \\<approx>m ?s2.13\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2'.\n                       \\<tau>mRed2 ?s2.13 s2' \\<and>\n                       ?s1.13 \\<approx>m s2' \\<and>\n                       r1.final_threads ?s1.13\n                       \\<subseteq> r2.final_threads s2' \\<and>\n                       shr s2' = shr ?s2.13\n  insert t A = r1.final_threads s1\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "define s1' where \"s1' = (locks s1, ((thr s1)(t := None), shr s1), wset s1, interrupts s1)\""], ["proof (state)\nthis:\n  s1' = (locks s1, ((thr s1)(t := None), shr s1), wset s1, interrupts s1)\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "define s2' where \"s2' = (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2)\""], ["proof (state)\nthis:\n  s2' = (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2)\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>t \\<notin> A\\<close> \\<open>insert t A = r1.final_threads s1\\<close>"], ["proof (chain)\npicking this:\n  t \\<notin> A\n  insert t A = r1.final_threads s1", "have \"A = r1.final_threads s1'\""], ["proof (prove)\nusing this:\n  t \\<notin> A\n  insert t A = r1.final_threads s1\n\ngoal (1 subgoal):\n 1. A = r1.final_threads s1'", "unfolding s1'_def"], ["proof (prove)\nusing this:\n  t \\<notin> A\n  insert t A = r1.final_threads s1\n\ngoal (1 subgoal):\n 1. A =\n    r1.final_threads\n     (locks s1, ((thr s1)(t := None), shr s1), wset s1, interrupts s1)", "by(auto simp add: r1.final_thread_def r1.final_threads_def)"], ["proof (state)\nthis:\n  A = r1.final_threads s1'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "moreover"], ["proof (state)\nthis:\n  A = r1.final_threads s1'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>insert t A = r1.final_threads s1\\<close>"], ["proof (chain)\npicking this:\n  insert t A = r1.final_threads s1", "have \"r1.final_thread s1 t\""], ["proof (prove)\nusing this:\n  insert t A = r1.final_threads s1\n\ngoal (1 subgoal):\n 1. r1.final_thread s1 t", "by auto"], ["proof (state)\nthis:\n  r1.final_thread s1 t\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "hence \"wset s1 t = None\""], ["proof (prove)\nusing this:\n  r1.final_thread s1 t\n\ngoal (1 subgoal):\n 1. wset s1 t = None", "by(auto simp add: r1.final_thread_def)"], ["proof (state)\nthis:\n  wset s1 t = None\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "with \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  wset s1 t = None", "have \"s1' \\<approx>m s2'\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  wset s1 t = None\n\ngoal (1 subgoal):\n 1. s1' \\<approx>m s2'", "unfolding s1'_def s2'_def"], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  wset s1 t = None\n\ngoal (1 subgoal):\n 1. (locks s1, ((thr s1)(t := None), shr s1), wset s1,\n     interrupts\n      s1) \\<approx>m (locks s2, ((thr s2)(t := None), shr s2), wset s2,\n                      interrupts s2)", "by(auto simp add: mbisim_def intro: tbisim_NoneI intro!: wset_thread_okI dest: wset_thread_okD split: if_split_asm)"], ["proof (state)\nthis:\n  s1' \\<approx>m s2'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "ultimately"], ["proof (chain)\npicking this:\n  A = r1.final_threads s1'\n  s1' \\<approx>m s2'", "have \"\\<exists>s2''. r2.mthr.silent_moves s2' s2'' \\<and> s1' \\<approx>m s2'' \\<and> r1.final_threads s1' \\<subseteq> r2.final_threads s2'' \\<and> shr s2'' = shr s2'\""], ["proof (prove)\nusing this:\n  A = r1.final_threads s1'\n  s1' \\<approx>m s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s2''.\n       \\<tau>mRed2 s2' s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and>\n       r1.final_threads s1' \\<subseteq> r2.final_threads s2'' \\<and>\n       shr s2'' = shr s2'", "by(rule insert)"], ["proof (state)\nthis:\n  \\<exists>s2''.\n     \\<tau>mRed2 s2' s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and>\n     r1.final_threads s1' \\<subseteq> r2.final_threads s2'' \\<and>\n     shr s2'' = shr s2'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "then"], ["proof (chain)\npicking this:\n  \\<exists>s2''.\n     \\<tau>mRed2 s2' s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and>\n     r1.final_threads s1' \\<subseteq> r2.final_threads s2'' \\<and>\n     shr s2'' = shr s2'", "obtain s2'' where reds: \"r2.mthr.silent_moves s2' s2''\" \n      and \"s1' \\<approx>m s2''\" and fin: \"\\<And>t. r1.final_thread s1' t \\<Longrightarrow> r2.final_thread s2'' t\" and \"shr s2'' = shr s2'\""], ["proof (prove)\nusing this:\n  \\<exists>s2''.\n     \\<tau>mRed2 s2' s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and>\n     r1.final_threads s1' \\<subseteq> r2.final_threads s2'' \\<and>\n     shr s2'' = shr s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s2''.\n        \\<lbrakk>\\<tau>mRed2 s2' s2''; s1' \\<approx>m s2'';\n         \\<And>t.\n            r1.final_thread s1' t \\<Longrightarrow> r2.final_thread s2'' t;\n         shr s2'' = shr s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2' s2''\n  s1' \\<approx>m s2''\n  r1.final_thread s1' ?t13 \\<Longrightarrow> r2.final_thread s2'' ?t13\n  shr s2'' = shr s2'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "have \"thr s2' t = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thr s2' t = None", "unfolding s2'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. thr (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2)\n     t =\n    None", "by simp"], ["proof (state)\nthis:\n  thr s2' t = None\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "with \\<open>r2.mthr.silent_moves s2' s2''\\<close>"], ["proof (chain)\npicking this:\n  \\<tau>mRed2 s2' s2''\n  thr s2' t = None", "have \"r2.mthr.silent_moves (locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2', interrupts s2')\n      (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''), wset s2'', interrupts s2'')\""], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2' s2''\n  thr s2' t = None\n\ngoal (1 subgoal):\n 1. \\<tau>mRed2\n     (locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2',\n      interrupts s2')\n     (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''),\n      wset s2'', interrupts s2'')", "by(rule r2.\\<tau>mRedT_add_thread_inv)"], ["proof (state)\nthis:\n  \\<tau>mRed2\n   (locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2',\n    interrupts s2')\n   (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''), wset s2'',\n    interrupts s2'')\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "also"], ["proof (state)\nthis:\n  \\<tau>mRed2\n   (locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2',\n    interrupts s2')\n   (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''), wset s2'',\n    interrupts s2'')\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "let ?s2'' = \"(locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2, interrupts s2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>shr s2'' = shr s2'\\<close> \\<open>s1' \\<approx>m s2''\\<close> \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  shr s2'' = shr s2'\n  s1' \\<approx>m s2''\n  s1 \\<approx>m s2", "have \"(locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''), wset s2'', interrupts s2'') = ?s2''\""], ["proof (prove)\nusing this:\n  shr s2'' = shr s2'\n  s1' \\<approx>m s2''\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''),\n     wset s2'', interrupts s2'') =\n    (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n     interrupts s2)", "unfolding s2'_def s1'_def"], ["proof (prove)\nusing this:\n  shr s2'' =\n  shr (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2)\n  (locks s1, ((thr s1)(t := None), shr s1), wset s1,\n   interrupts s1) \\<approx>m s2''\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''),\n     wset s2'', interrupts s2'') =\n    (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n     interrupts s2)", "by(simp add: mbisim_def)"], ["proof (state)\nthis:\n  (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''), wset s2'',\n   interrupts s2'') =\n  (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n   interrupts s2)\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "also (back_subst)"], ["proof (state)\nthis:\n  (locks s2'', (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2''), wset s2'',\n   interrupts s2'') =\n  (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n   interrupts s2)\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have \"dom (thr s1) = dom (thr s2)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. dom (thr s1) = dom (thr s2)", "by(rule mbisim_dom_eq)"], ["proof (state)\nthis:\n  dom (thr s1) = dom (thr s2)\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "with \\<open>r1.final_thread s1 t\\<close>"], ["proof (chain)\npicking this:\n  r1.final_thread s1 t\n  dom (thr s1) = dom (thr s2)", "have \"t \\<in> dom (thr s2)\""], ["proof (prove)\nusing this:\n  r1.final_thread s1 t\n  dom (thr s1) = dom (thr s2)\n\ngoal (1 subgoal):\n 1. t \\<in> dom (thr s2)", "by(auto simp add: r1.final_thread_def)"], ["proof (state)\nthis:\n  t \\<in> dom (thr s2)\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "then"], ["proof (chain)\npicking this:\n  t \\<in> dom (thr s2)", "obtain x2 ln where tst2: \"thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\""], ["proof (prove)\nusing this:\n  t \\<in> dom (thr s2)\n\ngoal (1 subgoal):\n 1. (\\<And>x2 ln.\n        thr s2 t = \\<lfloor>(x2, ln)\\<rfloor> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "hence \"(locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2', interrupts s2') = s2\""], ["proof (prove)\nusing this:\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2',\n     interrupts s2') =\n    s2", "unfolding s2'_def"], ["proof (prove)\nusing this:\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (locks\n      (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2),\n     (thr (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2)\n      (t \\<mapsto> the (thr s2 t)),\n      shr (locks s2, ((thr s2)(t := None), shr s2), wset s2,\n           interrupts s2)),\n     wset (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2),\n     interrupts\n      (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2)) =\n    s2", "by(cases s2)(auto intro!: ext)"], ["proof (state)\nthis:\n  (locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2',\n   interrupts s2') =\n  s2\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "also"], ["proof (state)\nthis:\n  (locks s2', (thr s2'(t \\<mapsto> the (thr s2 t)), shr s2'), wset s2',\n   interrupts s2') =\n  s2\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>s1 \\<approx>m s2\\<close> tst2"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>", "obtain x1\n      where tst1: \"thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\"\n      and bisim: \"t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>x1.\n        \\<lbrakk>thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>;\n         t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD2)"], ["proof (state)\nthis:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>shr s2'' = shr s2'\\<close>"], ["proof (chain)\npicking this:\n  shr s2'' = shr s2'", "have \"shr ?s2'' = shr s2\""], ["proof (prove)\nusing this:\n  shr s2'' = shr s2'\n\ngoal (1 subgoal):\n 1. shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n         interrupts s2) =\n    shr s2", "by(simp add: s2'_def)"], ["proof (state)\nthis:\n  shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n       interrupts s2) =\n  shr s2\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>r1.final_thread s1 t\\<close> tst1"], ["proof (chain)\npicking this:\n  r1.final_thread s1 t\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>", "have final: \"final1 x1\" \"ln = no_wait_locks\" \"wset s1 t = None\""], ["proof (prove)\nusing this:\n  r1.final_thread s1 t\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. final1 x1 &&& ln = no_wait_locks &&& wset s1 t = None", "by(auto simp add: r1.final_thread_def)"], ["proof (state)\nthis:\n  final1 x1\n  ln = no_wait_locks\n  wset s1 t = None\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "with final1_simulation[OF bisim] \\<open>shr ?s2'' = shr s2\\<close>"], ["proof (chain)\npicking this:\n  case (x1, shr s1) of (x1, m) \\<Rightarrow> final1 x1 \\<Longrightarrow>\n  \\<exists>s2'.\n     r2.silent_moves t (x2, shr s2) s2' \\<and>\n     t \\<turnstile> (x1, shr s1) \\<approx> s2' \\<and>\n     (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n  shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n       interrupts s2) =\n  shr s2\n  final1 x1\n  ln = no_wait_locks\n  wset s1 t = None", "obtain x2' m2'\n      where red: \"r2.silent_moves t (x2, shr ?s2'') (x2', m2')\"\n      and bisim': \"t \\<turnstile> (x1, shr s1) \\<approx> (x2', m2')\" and \"final2 x2'\""], ["proof (prove)\nusing this:\n  case (x1, shr s1) of (x1, m) \\<Rightarrow> final1 x1 \\<Longrightarrow>\n  \\<exists>s2'.\n     r2.silent_moves t (x2, shr s2) s2' \\<and>\n     t \\<turnstile> (x1, shr s1) \\<approx> s2' \\<and>\n     (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n  shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n       interrupts s2) =\n  shr s2\n  final1 x1\n  ln = no_wait_locks\n  wset s1 t = None\n\ngoal (1 subgoal):\n 1. (\\<And>x2' m2'.\n        \\<lbrakk>r2.silent_moves t\n                  (x2,\n                   shr (locks s2,\n                        (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                        wset s2, interrupts s2))\n                  (x2', m2');\n         t \\<turnstile> (x1, shr s1) \\<approx> (x2', m2');\n         final2 x2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r2.silent_moves t\n   (x2,\n    shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n         interrupts s2))\n   (x2', m2')\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2', m2')\n  final2 x2'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from \\<open>wset s1 t = None\\<close> \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  wset s1 t = None\n  s1 \\<approx>m s2", "have \"wset s2 t = None\""], ["proof (prove)\nusing this:\n  wset s1 t = None\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. wset s2 t = None", "by(simp add: mbisim_def)"], ["proof (state)\nthis:\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "with bisim r2.silent_moves_into_RedT_\\<tau>_inv[OF red] tst2 \\<open>ln = no_wait_locks\\<close>"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\n  \\<lbrakk>thr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                wset s2, interrupts s2)\n            t =\n           \\<lfloor>(x2, no_wait_locks)\\<rfloor>;\n   wset\n    (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n     interrupts s2)\n    t =\n   None\\<rbrakk>\n  \\<Longrightarrow> \\<tau>mRed2\n                     (locks s2,\n                      (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                      wset s2, interrupts s2)\n                     (redT_upd_\\<epsilon>\n                       (locks s2,\n                        (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                        wset s2, interrupts s2)\n                       t x2' m2')\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s2 t = None", "have \"r2.mthr.silent_moves ?s2'' (redT_upd_\\<epsilon> ?s2'' t x2' m2')\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\n  \\<lbrakk>thr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                wset s2, interrupts s2)\n            t =\n           \\<lfloor>(x2, no_wait_locks)\\<rfloor>;\n   wset\n    (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n     interrupts s2)\n    t =\n   None\\<rbrakk>\n  \\<Longrightarrow> \\<tau>mRed2\n                     (locks s2,\n                      (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                      wset s2, interrupts s2)\n                     (redT_upd_\\<epsilon>\n                       (locks s2,\n                        (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                        wset s2, interrupts s2)\n                       t x2' m2')\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. \\<tau>mRed2\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     (redT_upd_\\<epsilon>\n       (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n        interrupts s2)\n       t x2' m2')", "unfolding s2'_def"], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\n  \\<lbrakk>thr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                wset s2, interrupts s2)\n            t =\n           \\<lfloor>(x2, no_wait_locks)\\<rfloor>;\n   wset\n    (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n     interrupts s2)\n    t =\n   None\\<rbrakk>\n  \\<Longrightarrow> \\<tau>mRed2\n                     (locks s2,\n                      (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                      wset s2, interrupts s2)\n                     (redT_upd_\\<epsilon>\n                       (locks s2,\n                        (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                        wset s2, interrupts s2)\n                       t x2' m2')\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. \\<tau>mRed2\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     (redT_upd_\\<epsilon>\n       (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n        interrupts s2)\n       t x2' m2')", "by auto"], ["proof (state)\nthis:\n  \\<tau>mRed2\n   (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n    interrupts s2)\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "also (rtranclp_trans)"], ["proof (state)\nthis:\n  \\<tau>mRed2\n   (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n    interrupts s2)\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "from bisim r2.red_rtrancl_\\<tau>_heapD_inv[OF red]"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\n  ?wfs t\n   (x2,\n    shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n         interrupts s2)) \\<Longrightarrow>\n  snd (x2', m2') =\n  snd (x2,\n       shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n            wset s2, interrupts s2))", "have \"m2' = shr s2\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2)\n  ?wfs t\n   (x2,\n    shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n         interrupts s2)) \\<Longrightarrow>\n  snd (x2', m2') =\n  snd (x2,\n       shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n            wset s2, interrupts s2))\n\ngoal (1 subgoal):\n 1. m2' = shr s2", "by auto"], ["proof (state)\nthis:\n  m2' = shr s2\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "hence \"s1 \\<approx>m (redT_upd_\\<epsilon> ?s2'' t x2' m2')\""], ["proof (prove)\nusing this:\n  m2' = shr s2\n\ngoal (1 subgoal):\n 1. s1 \\<approx>m redT_upd_\\<epsilon>\n                   (locks s2,\n                    (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n                    interrupts s2)\n                   t x2' m2'", "using \\<open>s1' \\<approx>m s2''\\<close> \\<open>s1 \\<approx>m s2\\<close> tst1 tst2 \\<open>shr ?s2'' = shr s2\\<close> bisim' \\<open>shr s2'' = shr s2'\\<close> \\<open>wset s2 t = None\\<close>"], ["proof (prove)\nusing this:\n  m2' = shr s2\n  s1' \\<approx>m s2''\n  s1 \\<approx>m s2\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n       interrupts s2) =\n  shr s2\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2', m2')\n  shr s2'' = shr s2'\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. s1 \\<approx>m redT_upd_\\<epsilon>\n                   (locks s2,\n                    (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n                    interrupts s2)\n                   t x2' m2'", "unfolding s1'_def s2'_def"], ["proof (prove)\nusing this:\n  m2' = shr s2\n  (locks s1, ((thr s1)(t := None), shr s1), wset s1,\n   interrupts s1) \\<approx>m s2''\n  s1 \\<approx>m s2\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  shr (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n       interrupts s2) =\n  shr s2\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2', m2')\n  shr s2'' =\n  shr (locks s2, ((thr s2)(t := None), shr s2), wset s2, interrupts s2)\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. s1 \\<approx>m redT_upd_\\<epsilon>\n                   (locks s2,\n                    (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n                    interrupts s2)\n                   t x2' m2'", "by(auto simp add: mbisim_def redT_updLns_def split: if_split_asm intro: tbisim_SomeI)"], ["proof (state)\nthis:\n  s1 \\<approx>m redT_upd_\\<epsilon>\n                 (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                  wset s2, interrupts s2)\n                 t x2' m2'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "moreover"], ["proof (state)\nthis:\n  s1 \\<approx>m redT_upd_\\<epsilon>\n                 (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                  wset s2, interrupts s2)\n                 t x2' m2'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "{"], ["proof (state)\nthis:\n  s1 \\<approx>m redT_upd_\\<epsilon>\n                 (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                  wset s2, interrupts s2)\n                 t x2' m2'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "fix t'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "assume \"r1.final_thread s1 t'\""], ["proof (state)\nthis:\n  r1.final_thread s1 t'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "with fin[of t'] \\<open>final2 x2'\\<close> tst2 \\<open>ln = no_wait_locks\\<close> \\<open>wset s2 t = None\\<close> \\<open>s1' \\<approx>m s2''\\<close> \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  r1.final_thread s1' t' \\<Longrightarrow> r2.final_thread s2'' t'\n  final2 x2'\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s2 t = None\n  s1' \\<approx>m s2''\n  s1 \\<approx>m s2\n  r1.final_thread s1 t'", "have \"r2.final_thread (redT_upd_\\<epsilon> ?s2'' t x2' m2') t'\""], ["proof (prove)\nusing this:\n  r1.final_thread s1' t' \\<Longrightarrow> r2.final_thread s2'' t'\n  final2 x2'\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s2 t = None\n  s1' \\<approx>m s2''\n  s1 \\<approx>m s2\n  r1.final_thread s1 t'\n\ngoal (1 subgoal):\n 1. r2.final_thread\n     (redT_upd_\\<epsilon>\n       (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n        interrupts s2)\n       t x2' m2')\n     t'", "unfolding s1'_def"], ["proof (prove)\nusing this:\n  r1.final_thread\n   (locks s1, ((thr s1)(t := None), shr s1), wset s1, interrupts s1)\n   t' \\<Longrightarrow>\n  r2.final_thread s2'' t'\n  final2 x2'\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ln = no_wait_locks\n  wset s2 t = None\n  (locks s1, ((thr s1)(t := None), shr s1), wset s1,\n   interrupts s1) \\<approx>m s2''\n  s1 \\<approx>m s2\n  r1.final_thread s1 t'\n\ngoal (1 subgoal):\n 1. r2.final_thread\n     (redT_upd_\\<epsilon>\n       (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n        interrupts s2)\n       t x2' m2')\n     t'", "by(fastforce split: if_split_asm simp add: r2.final_thread_def r1.final_thread_def redT_updLns_def finfun_Diag_const2 o_def mbisim_def)"], ["proof (state)\nthis:\n  r2.final_thread\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n   t'\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "}"], ["proof (state)\nthis:\n  r1.final_thread s1 ?t'15 \\<Longrightarrow>\n  r2.final_thread\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n   ?t'15\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "moreover"], ["proof (state)\nthis:\n  r1.final_thread s1 ?t'15 \\<Longrightarrow>\n  r2.final_thread\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n   ?t'15\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "have \"shr (redT_upd_\\<epsilon> ?s2'' t x2' m2') = shr s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shr (redT_upd_\\<epsilon>\n          (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n           wset s2, interrupts s2)\n          t x2' m2') =\n    shr s2", "using \\<open>m2' = shr s2\\<close>"], ["proof (prove)\nusing this:\n  m2' = shr s2\n\ngoal (1 subgoal):\n 1. shr (redT_upd_\\<epsilon>\n          (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n           wset s2, interrupts s2)\n          t x2' m2') =\n    shr s2", "by simp"], ["proof (state)\nthis:\n  shr (redT_upd_\\<epsilon>\n        (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n         interrupts s2)\n        t x2' m2') =\n  shr s2\n\ngoal (1 subgoal):\n 1. \\<And>x F s1 s2.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>s1 s2.\n           \\<lbrakk>F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s2'.\n                                \\<tau>mRed2 s2 s2' \\<and>\n                                s1 \\<approx>m s2' \\<and>\n                                r1.final_threads s1\n                                \\<subseteq> r2.final_threads s2' \\<and>\n                                shr s2' = shr s2;\n        insert x F = r1.final_threads s1; s1 \\<approx>m s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and>\n                            r1.final_threads s1\n                            \\<subseteq> r2.final_threads s2' \\<and>\n                            shr s2' = shr s2", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau>mRed2 s2\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n  s1 \\<approx>m redT_upd_\\<epsilon>\n                 (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                  wset s2, interrupts s2)\n                 t x2' m2'\n  r1.final_thread s1 ?t'15 \\<Longrightarrow>\n  r2.final_thread\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n   ?t'15\n  shr (redT_upd_\\<epsilon>\n        (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n         interrupts s2)\n        t x2' m2') =\n  shr s2", "show ?case"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n  s1 \\<approx>m redT_upd_\\<epsilon>\n                 (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2),\n                  wset s2, interrupts s2)\n                 t x2' m2'\n  r1.final_thread s1 ?t'15 \\<Longrightarrow>\n  r2.final_thread\n   (redT_upd_\\<epsilon>\n     (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n      interrupts s2)\n     t x2' m2')\n   ?t'15\n  shr (redT_upd_\\<epsilon>\n        (locks s2, (thr s2''(t \\<mapsto> the (thr s2 t)), shr s2), wset s2,\n         interrupts s2)\n        t x2' m2') =\n  shr s2\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and>\n       r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n       shr s2' = shr s2", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     \\<tau>mRed2 s2 s2' \\<and>\n     s1 \\<approx>m s2' \\<and>\n     r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n     shr s2' = shr s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     \\<tau>mRed2 s2 s2' \\<and>\n     s1 \\<approx>m s2' \\<and>\n     r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n     shr s2' = shr s2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mfinal2_inv_simulation:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> \\<exists>s1'. r1.mthr.silent_moves s1 s1' \\<and> s1' \\<approx>m s2 \\<and> r2.final_threads s2 \\<subseteq> r1.final_threads s1' \\<and> shr s1' = shr s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow>\n    \\<exists>s1'.\n       \\<tau>mRed1 s1 s1' \\<and>\n       s1' \\<approx>m s2 \\<and>\n       r2.final_threads s2 \\<subseteq> r1.final_threads s1' \\<and>\n       shr s1' = shr s1", "using FWdelay_bisimulation_final_base.mfinal1_inv_simulation[OF FWdelay_bisimulation_final_base_flip, where bisim_wait=\"flip bisim_wait\"]"], ["proof (prove)\nusing this:\n  FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t)) (flip bisim_wait)\n   ?s1.0 ?s2.0 \\<Longrightarrow>\n  \\<exists>s2'.\n     (\\<tau>trsys.silent_move\n       (multithreaded_base.redT final1 r1 ?convert_RA)\n       m\\<tau>move1)\\<^sup>*\\<^sup>*\n      ?s2.0 s2' \\<and>\n     FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n      (flip bisim_wait) ?s1.0 s2' \\<and>\n     r2.final_threads ?s1.0 \\<subseteq> r1.final_threads s2' \\<and>\n     shr s2' = shr ?s2.0\n\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow>\n    \\<exists>s1'.\n       \\<tau>mRed1 s1 s1' \\<and>\n       s1' \\<approx>m s2 \\<and>\n       r2.final_threads s2 \\<subseteq> r1.final_threads s1' \\<and>\n       shr s1' = shr s1", "by(unfold flip_simps)"], ["", "lemma mfinal1_simulation:\n  assumes \"s1 \\<approx>m s2\" and \"r1.mfinal s1\"\n  shows \"\\<exists>s2'. r2.mthr.silent_moves s2 s2' \\<and> s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2", "from mfinal1_inv_simulation[OF \\<open>s1 \\<approx>m s2\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>s2'.\n     \\<tau>mRed2 s2 s2' \\<and>\n     s1 \\<approx>m s2' \\<and>\n     r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n     shr s2' = shr s2", "obtain s2' where 1: \"r2.mthr.silent_moves s2 s2'\" \"s1 \\<approx>m s2'\" \"shr s2' = shr s2\"\n    and fin: \"\\<And>t. r1.final_thread s1 t \\<Longrightarrow> r2.final_thread s2' t\""], ["proof (prove)\nusing this:\n  \\<exists>s2'.\n     \\<tau>mRed2 s2 s2' \\<and>\n     s1 \\<approx>m s2' \\<and>\n     r1.final_threads s1 \\<subseteq> r2.final_threads s2' \\<and>\n     shr s2' = shr s2\n\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        \\<lbrakk>\\<tau>mRed2 s2 s2'; s1 \\<approx>m s2'; shr s2' = shr s2;\n         \\<And>t.\n            r1.final_thread s1 t \\<Longrightarrow>\n            r2.final_thread s2' t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2 s2'\n  s1 \\<approx>m s2'\n  shr s2' = shr s2\n  r1.final_thread s1 ?t13 \\<Longrightarrow> r2.final_thread s2' ?t13\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2", "have \"r2.mfinal s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r2.mfinal s2'", "proof(rule r2.mfinalI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t x ln.\n       thr s2' t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       final2 x \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "fix t x2 ln"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t x ln.\n       thr s2' t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       final2 x \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "assume \"thr s2' t = \\<lfloor>(x2, ln)\\<rfloor>\""], ["proof (state)\nthis:\n  thr s2' t = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>t x ln.\n       thr s2' t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       final2 x \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "with \\<open>s1 \\<approx>m s2'\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2'\n  thr s2' t = \\<lfloor>(x2, ln)\\<rfloor>", "obtain x1 where \"thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\" \"t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2')\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2'\n  thr s2' t = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>x1.\n        \\<lbrakk>thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>;\n         t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD2)"], ["proof (state)\nthis:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr s2')\n\ngoal (1 subgoal):\n 1. \\<And>t x ln.\n       thr s2' t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       final2 x \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "from \\<open>thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\\<close> \\<open>r1.mfinal s1\\<close>"], ["proof (chain)\npicking this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  r1.mfinal s1", "have \"r1.final_thread s1 t\""], ["proof (prove)\nusing this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  r1.mfinal s1\n\ngoal (1 subgoal):\n 1. r1.final_thread s1 t", "by(auto elim!: r1.mfinalE simp add: r1.final_thread_def)"], ["proof (state)\nthis:\n  r1.final_thread s1 t\n\ngoal (1 subgoal):\n 1. \\<And>t x ln.\n       thr s2' t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       final2 x \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "hence \"r2.final_thread s2' t\""], ["proof (prove)\nusing this:\n  r1.final_thread s1 t\n\ngoal (1 subgoal):\n 1. r2.final_thread s2' t", "by(rule fin)"], ["proof (state)\nthis:\n  r2.final_thread s2' t\n\ngoal (1 subgoal):\n 1. \\<And>t x ln.\n       thr s2' t = \\<lfloor>(x, ln)\\<rfloor> \\<Longrightarrow>\n       final2 x \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "thus \"final2 x2 \\<and> ln = no_wait_locks \\<and> wset s2' t = None\""], ["proof (prove)\nusing this:\n  r2.final_thread s2' t\n\ngoal (1 subgoal):\n 1. final2 x2 \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "using \\<open>thr s2' t = \\<lfloor>(x2, ln)\\<rfloor>\\<close>"], ["proof (prove)\nusing this:\n  r2.final_thread s2' t\n  thr s2' t = \\<lfloor>(x2, ln)\\<rfloor>\n\ngoal (1 subgoal):\n 1. final2 x2 \\<and> ln = no_wait_locks \\<and> wset s2' t = None", "by(auto simp add: r2.final_thread_def)"], ["proof (state)\nthis:\n  final2 x2 \\<and> ln = no_wait_locks \\<and> wset s2' t = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r2.mfinal s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2", "with 1"], ["proof (chain)\npicking this:\n  \\<tau>mRed2 s2 s2'\n  s1 \\<approx>m s2'\n  shr s2' = shr s2\n  r2.mfinal s2'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2 s2'\n  s1 \\<approx>m s2'\n  shr s2' = shr s2\n  r2.mfinal s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'.\n       \\<tau>mRed2 s2 s2' \\<and>\n       s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2'.\n     \\<tau>mRed2 s2 s2' \\<and>\n     s1 \\<approx>m s2' \\<and> r2.mfinal s2' \\<and> shr s2' = shr s2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mfinal2_simulation:\n  \"\\<lbrakk> s1 \\<approx>m s2; r2.mfinal s2 \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1'. r1.mthr.silent_moves s1 s1' \\<and> s1' \\<approx>m s2 \\<and> r1.mfinal s1' \\<and> shr s1' = shr s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.mfinal s2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1'.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         s1' \\<approx>m s2 \\<and>\n                         r1.mfinal s1' \\<and> shr s1' = shr s1", "using FWdelay_bisimulation_final_base.mfinal1_simulation[OF FWdelay_bisimulation_final_base_flip, where bisim_wait = \"flip bisim_wait\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n            (flip bisim_wait) ?s1.0 ?s2.0;\n   r2.mfinal ?s1.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2'.\n                       (\\<tau>trsys.silent_move\n                         (multithreaded_base.redT final1 r1 ?convert_RA)\n                         m\\<tau>move1)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       FWbisimulation_base.mbisim\n                        (\\<lambda>t. flip (bisim t)) (flip bisim_wait) ?s1.0\n                        s2' \\<and>\n                       r1.mfinal s2' \\<and> shr s2' = shr ?s2.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.mfinal s2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1'.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         s1' \\<approx>m s2 \\<and>\n                         r1.mfinal s1' \\<and> shr s1' = shr s1", "by(unfold flip_simps)"], ["", "end"], ["", "locale FWdelay_bisimulation_obs =\n  FWdelay_bisimulation_final_base _ _ _ _ _ _ _ \\<tau>move1 \\<tau>move2\n  for \\<tau>move1 :: \"('l,'t,'x1,'m1,'w, 'o) \\<tau>moves\"\n  and \\<tau>move2 :: \"('l,'t,'x2,'m2,'w, 'o) \\<tau>moves\" +\n  assumes delay_bisimulation_obs_locale: \"delay_bisimulation_obs (r1 t) (r2 t) (bisim t) (ta_bisim bisim) \\<tau>move1 \\<tau>move2\"\n  and bisim_inv_red_other:\n   \"\\<lbrakk> t' \\<turnstile> (x, m1) \\<approx> (xx, m2); t \\<turnstile> (x1, m1) \\<approx> (x2, m2); \n      r1.silent_moves t (x1, m1) (x1', m1);\n      t \\<turnstile> (x1', m1) -1-ta1\\<rightarrow> (x1'', m1'); \\<not> \\<tau>move1 (x1', m1) ta1 (x1'', m1');\n      r2.silent_moves t (x2, m2) (x2', m2);\n      t \\<turnstile> (x2', m2) -2-ta2\\<rightarrow> (x2'', m2'); \\<not> \\<tau>move2 (x2', m2) ta2 (x2'', m2');\n      t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta_bisim bisim ta1 ta2 \\<rbrakk>\n   \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\"\n  and bisim_waitI:\n   \"\\<lbrakk> t \\<turnstile> (x1, m1) \\<approx> (x2, m2); r1.silent_moves t (x1, m1) (x1', m1);\n      t \\<turnstile> (x1', m1) -1-ta1\\<rightarrow> (x1'', m1'); \\<not> \\<tau>move1 (x1', m1) ta1 (x1'', m1');\n      r2.silent_moves t (x2, m2) (x2', m2);\n      t \\<turnstile> (x2', m2) -2-ta2\\<rightarrow> (x2'', m2'); \\<not> \\<tau>move2 (x2', m2) ta2 (x2'', m2');\n      t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta_bisim bisim ta1 ta2;\n      Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>; Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n   \\<Longrightarrow> x1'' \\<approx>w x2''\"\n  and simulation_Wakeup1:\n    \"\\<lbrakk> t \\<turnstile> (x1, m1) \\<approx> (x2, m2); x1 \\<approx>w x2; t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', m1'); Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta2 x2' m2'. t \\<turnstile> (x2, m2) -2-ta2\\<rightarrow> (x2', m2') \\<and> t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta_bisim bisim ta1 ta2\"\n  and simulation_Wakeup2:\n    \"\\<lbrakk> t \\<turnstile> (x1, m1) \\<approx> (x2, m2); x1 \\<approx>w x2; t \\<turnstile> (x2, m2) -2-ta2\\<rightarrow> (x2', m2'); Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<rbrakk>\n    \\<Longrightarrow> \\<exists>ta1 x1' m1'. t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', m1') \\<and> t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta_bisim bisim ta1 ta2\"\n  and ex_final1_conv_ex_final2:\n    \"(\\<exists>x1. final1 x1) \\<longleftrightarrow> (\\<exists>x2. final2 x2)\""], ["", "sublocale FWdelay_bisimulation_obs <\n  delay_bisimulation_obs \"r1 t\" \"r2 t\" \"bisim t\" \"ta_bisim bisim\" \\<tau>move1 \\<tau>move2 for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_obs (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax\n     \\<tau>move1 \\<tau>move2", "by(rule delay_bisimulation_obs_locale)"], ["", "context FWdelay_bisimulation_obs begin"], ["", "lemma FWdelay_bisimulation_obs_flip:\n  \"FWdelay_bisimulation_obs final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_obs final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_obs.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. FWdelay_bisimulation_final_base final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) \\<tau>move2 \\<tau>move1\n 2. FWdelay_bisimulation_obs_axioms final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_final_base_flip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_obs_axioms final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_obs_axioms.intro)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t.\n       delay_bisimulation_obs (r2 t) (r1 t) (flip (bisim t))\n        (ta_bisim (\\<lambda>t. flip (bisim t))) \\<tau>move2 \\<tau>move1\n 2. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>flip (bisim t') (x, m1) (xx, m2);\n        flip (bisim t) (x1, m1) (x2, m2);\n        r2.silent_moves t (x1, m1) (x1', m1);\n        r2.r_syntax t x1' m1 ta1 x1'' m1';\n        \\<not> \\<tau>move2 (x1', m1) ta1 (x1'', m1');\n        r1.silent_moves t (x2, m2) (x2', m2);\n        r1.r_syntax t x2' m2 ta2 x2'' m2';\n        \\<not> \\<tau>move1 (x2', m2) ta2 (x2'', m2');\n        flip (bisim t) (x1'', m1') (x2'', m2');\n        ta_bisim (\\<lambda>t. flip (bisim t)) ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> flip (bisim t') (x, m1') (xx, m2')\n 3. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>flip (bisim t) (x1, m1) (x2, m2);\n        r2.silent_moves t (x1, m1) (x1', m1);\n        r2.r_syntax t x1' m1 ta1 x1'' m1';\n        \\<not> \\<tau>move2 (x1', m1) ta1 (x1'', m1');\n        r1.silent_moves t (x2, m2) (x2', m2);\n        r1.r_syntax t x2' m2 ta2 x2'' m2';\n        \\<not> \\<tau>move1 (x2', m2) ta2 (x2'', m2');\n        flip (bisim t) (x1'', m1') (x2'', m2');\n        ta_bisim (\\<lambda>t. flip (bisim t)) ta1 ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> flip bisim_wait x1'' x2''\n 4. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>flip (bisim t) (x1, m1) (x2, m2); flip bisim_wait x1 x2;\n        r2.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r1.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            flip (bisim t) (x1', m1') (x2', m2') \\<and>\n                            ta_bisim (\\<lambda>t. flip (bisim t)) ta1 ta2\n 5. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>flip (bisim t) (x1, m1) (x2, m2); flip bisim_wait x1 x2;\n        r1.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r2.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            flip (bisim t) (x1', m1') (x2', m2') \\<and>\n                            ta_bisim (\\<lambda>t. flip (bisim t)) ta1 ta2\n 6. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(unfold flip_simps)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t.\n       delay_bisimulation_obs (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax\n        \\<tau>move1 \\<tau>move2\n 2. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (xx, m2) \\<approx> (x, m1);\n        t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.silent_moves t (x1, m1) (x1', m1);\n        r2.r_syntax t x1' m1 ta1 x1'' m1';\n        \\<not> \\<tau>move2 (x1', m1) ta1 (x1'', m1');\n        r1.silent_moves t (x2, m2) (x2', m2);\n        r1.r_syntax t x2' m2 ta2 x2'' m2';\n        \\<not> \\<tau>move1 (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x2'', m2') \\<approx> (x1'', m1');\n        ta2 \\<sim>m ta1\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (xx, m2') \\<approx> (x, m1')\n 3. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.silent_moves t (x1, m1) (x1', m1);\n        r2.r_syntax t x1' m1 ta1 x1'' m1';\n        \\<not> \\<tau>move2 (x1', m1) ta1 (x1'', m1');\n        r1.silent_moves t (x2, m2) (x2', m2);\n        r1.r_syntax t x2' m2 ta2 x2'' m2';\n        \\<not> \\<tau>move1 (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x2'', m2') \\<approx> (x1'', m1'); ta2 \\<sim>m ta1;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x2'' \\<approx>w x1''\n 4. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r2.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r1.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 5. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r1.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r2.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 6. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(rule delay_bisimulation_obs_axioms)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (xx, m2) \\<approx> (x, m1);\n        t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.silent_moves t (x1, m1) (x1', m1);\n        r2.r_syntax t x1' m1 ta1 x1'' m1';\n        \\<not> \\<tau>move2 (x1', m1) ta1 (x1'', m1');\n        r1.silent_moves t (x2, m2) (x2', m2);\n        r1.r_syntax t x2' m2 ta2 x2'' m2';\n        \\<not> \\<tau>move1 (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x2'', m2') \\<approx> (x1'', m1');\n        ta2 \\<sim>m ta1\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (xx, m2') \\<approx> (x, m1')\n 2. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.silent_moves t (x1, m1) (x1', m1);\n        r2.r_syntax t x1' m1 ta1 x1'' m1';\n        \\<not> \\<tau>move2 (x1', m1) ta1 (x1'', m1');\n        r1.silent_moves t (x2, m2) (x2', m2);\n        r1.r_syntax t x2' m2 ta2 x2'' m2';\n        \\<not> \\<tau>move1 (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x2'', m2') \\<approx> (x1'', m1'); ta2 \\<sim>m ta1;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x2'' \\<approx>w x1''\n 3. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r2.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r1.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 4. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r1.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r2.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 5. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(erule (9) bisim_inv_red_other)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.silent_moves t (x1, m1) (x1', m1);\n        r2.r_syntax t x1' m1 ta1 x1'' m1';\n        \\<not> \\<tau>move2 (x1', m1) ta1 (x1'', m1');\n        r1.silent_moves t (x2, m2) (x2', m2);\n        r1.r_syntax t x2' m2 ta2 x2'' m2';\n        \\<not> \\<tau>move1 (x2', m2) ta2 (x2'', m2');\n        t \\<turnstile> (x2'', m2') \\<approx> (x1'', m1'); ta2 \\<sim>m ta1;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> x2'' \\<approx>w x1''\n 2. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r2.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r1.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 3. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r1.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r2.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 4. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(erule (10) bisim_waitI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r2.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r1.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 2. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r1.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r2.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 3. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(erule (3) simulation_Wakeup2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        x2 \\<approx>w x1; r1.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r2.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x2', m2')\n                            \\<approx> (x1', m1') \\<and> ta2 \\<sim>m ta1\n 2. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(erule (3) simulation_Wakeup1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(rule ex_final1_conv_ex_final2[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma FWdelay_bisimulation_obs_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_obs final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1 = \n   FWdelay_bisimulation_obs final1 r1 final2 r2 bisim bisim_wait \\<tau>move1 \\<tau>move2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_obs final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2\n     \\<tau>move1 =\n    FWdelay_bisimulation_obs final1 r1 final2 r2 bisim bisim_wait\n     \\<tau>move1 \\<tau>move2", "by(auto dest: FWdelay_bisimulation_obs.FWdelay_bisimulation_obs_flip simp only: flip_flip)"], ["", "context FWdelay_bisimulation_obs begin"], ["", "lemma mbisim_redT_upd:\n  fixes s1 t ta1 x1' m1' s2 ta2 x2' m2' ln\n  assumes s1': \"redT_upd s1 t ta1 x1' m1' s1'\"\n  and s2': \"redT_upd s2 t ta2 x2' m2' s2'\"\n  and [simp]: \"wset s1 = wset s2\" \"locks s1 = locks s2\" \n  and wset: \"wset s1' = wset s2'\"\n  and interrupts: \"interrupts s1' = interrupts s2'\"\n  and fin1: \"finite (dom (thr s1))\"\n  and wsts: \"wset_thread_ok (wset s1) (thr s1)\"\n  and tst: \"thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\"\n  and tst': \"thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\"\n  and aoe1: \"r1.actions_ok s1 t ta1\"\n  and aoe2: \"r2.actions_ok s2 t ta2\"\n  and tasim: \"ta_bisim bisim ta1 ta2\"\n  and bisim': \"t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\"\n  and bisimw: \"wset s1' t = None \\<or> x1' \\<approx>w x2'\"\n  and \\<tau>red1: \"r1.silent_moves t (x1'', shr s1) (x1, shr s1)\"\n  and red1: \"t \\<turnstile> (x1, shr s1) -1-ta1\\<rightarrow> (x1', m1')\"\n  and \\<tau>red2: \"r2.silent_moves t (x2'', shr s2) (x2, shr s2)\"\n  and red2: \"t \\<turnstile> (x2, shr s2) -2-ta2\\<rightarrow> (x2', m2')\"\n  and bisim: \"t \\<turnstile> (x1'', shr s1) \\<approx> (x2'', shr s2)\"\n  and \\<tau>1: \"\\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', m1')\"\n  and \\<tau>2: \"\\<not> \\<tau>move2 (x2, shr s2) ta2 (x2', m2')\"\n  and tbisim: \"\\<And>t'. t \\<noteq> t' \\<Longrightarrow> tbisim (wset s1 t' = None) t' (thr s1 t') (shr s1) (thr s2 t') (shr s2)\"\n  shows \"s1' \\<approx>m s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1' \\<approx>m s2'", "proof(rule mbisimI)"], ["proof (state)\ngoal (7 subgoals):\n 1. finite (dom (thr s1'))\n 2. locks s1' = locks s2'\n 3. wset s1' = wset s2'\n 4. interrupts s1' = interrupts s2'\n 5. wset_thread_ok (wset s1') (thr s1')\n 6. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 7. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "from fin1 s1'"], ["proof (chain)\npicking this:\n  finite (dom (thr s1))\n  redT_upd s1 t ta1 x1' m1' s1'", "show \"finite (dom (thr s1'))\""], ["proof (prove)\nusing this:\n  finite (dom (thr s1))\n  redT_upd s1 t ta1 x1' m1' s1'\n\ngoal (1 subgoal):\n 1. finite (dom (thr s1'))", "by(auto simp add: redT_updTs_finite_dom_inv)"], ["proof (state)\nthis:\n  finite (dom (thr s1'))\n\ngoal (6 subgoals):\n 1. locks s1' = locks s2'\n 2. wset s1' = wset s2'\n 3. interrupts s1' = interrupts s2'\n 4. wset_thread_ok (wset s1') (thr s1')\n 5. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 6. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. locks s1' = locks s2'\n 2. wset s1' = wset s2'\n 3. interrupts s1' = interrupts s2'\n 4. wset_thread_ok (wset s1') (thr s1')\n 5. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 6. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "from tasim s1' s2'"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2\n  redT_upd s1 t ta1 x1' m1' s1'\n  redT_upd s2 t ta2 x2' m2' s2'", "show \"locks s1' = locks s2'\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n  redT_upd s1 t ta1 x1' m1' s1'\n  redT_upd s2 t ta2 x2' m2' s2'\n\ngoal (1 subgoal):\n 1. locks s1' = locks s2'", "by(auto simp add: redT_updLs_def o_def ta_bisim_def)"], ["proof (state)\nthis:\n  locks s1' = locks s2'\n\ngoal (5 subgoals):\n 1. wset s1' = wset s2'\n 2. interrupts s1' = interrupts s2'\n 3. wset_thread_ok (wset s1') (thr s1')\n 4. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 5. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. wset s1' = wset s2'\n 2. interrupts s1' = interrupts s2'\n 3. wset_thread_ok (wset s1') (thr s1')\n 4. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 5. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "from wset"], ["proof (chain)\npicking this:\n  wset s1' = wset s2'", "show \"wset s1' = wset s2'\""], ["proof (prove)\nusing this:\n  wset s1' = wset s2'\n\ngoal (1 subgoal):\n 1. wset s1' = wset s2'", "."], ["proof (state)\nthis:\n  wset s1' = wset s2'\n\ngoal (4 subgoals):\n 1. interrupts s1' = interrupts s2'\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 4. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. interrupts s1' = interrupts s2'\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 4. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "from interrupts"], ["proof (chain)\npicking this:\n  interrupts s1' = interrupts s2'", "show \"interrupts s1' = interrupts s2'\""], ["proof (prove)\nusing this:\n  interrupts s1' = interrupts s2'\n\ngoal (1 subgoal):\n 1. interrupts s1' = interrupts s2'", "."], ["proof (state)\nthis:\n  interrupts s1' = interrupts s2'\n\ngoal (3 subgoals):\n 1. wset_thread_ok (wset s1') (thr s1')\n 2. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 3. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. wset_thread_ok (wset s1') (thr s1')\n 2. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 3. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "from wsts s1' s2' wset"], ["proof (chain)\npicking this:\n  wset_thread_ok (wset s1) (thr s1)\n  redT_upd s1 t ta1 x1' m1' s1'\n  redT_upd s2 t ta2 x2' m2' s2'\n  wset s1' = wset s2'", "show \"wset_thread_ok (wset s1') (thr s1')\""], ["proof (prove)\nusing this:\n  wset_thread_ok (wset s1) (thr s1)\n  redT_upd s1 t ta1 x1' m1' s1'\n  redT_upd s2 t ta2 x2' m2' s2'\n  wset s1' = wset s2'\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "by(fastforce intro!: wset_thread_okI split: if_split_asm dest: redT_updTs_None wset_thread_okD redT_updWs_None_implies_None)"], ["proof (state)\nthis:\n  wset_thread_ok (wset s1') (thr s1')\n\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "fix T"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "assume \"thr s1' T = None\""], ["proof (state)\nthis:\n  thr s1' T = None\n\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "moreover"], ["proof (state)\nthis:\n  thr s1' T = None\n\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "with tst s1'"], ["proof (chain)\npicking this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  redT_upd s1 t ta1 x1' m1' s1'\n  thr s1' T = None", "have [simp]: \"t \\<noteq> T\""], ["proof (prove)\nusing this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  redT_upd s1 t ta1 x1' m1' s1'\n  thr s1' T = None\n\ngoal (1 subgoal):\n 1. t \\<noteq> T", "by auto"], ["proof (state)\nthis:\n  t \\<noteq> T\n\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "from tbisim[OF this]"], ["proof (chain)\npicking this:\n  tbisim (wset s1 T = None) T (thr s1 T) (shr s1) (thr s2 T) (shr s2)", "have \"(thr s1 T = None) = (thr s2 T = None)\""], ["proof (prove)\nusing this:\n  tbisim (wset s1 T = None) T (thr s1 T) (shr s1) (thr s2 T) (shr s2)\n\ngoal (1 subgoal):\n 1. (thr s1 T = None) = (thr s2 T = None)", "by(auto simp add: tbisim_def)"], ["proof (state)\nthis:\n  (thr s1 T = None) = (thr s2 T = None)\n\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "hence \"(redT_updTs (thr s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> T = None) = (redT_updTs (thr s2) \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> T = None)\""], ["proof (prove)\nusing this:\n  (thr s1 T = None) = (thr s2 T = None)\n\ngoal (1 subgoal):\n 1. (redT_updTs (thr s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> T = None) =\n    (redT_updTs (thr s2) \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> T = None)", "using tasim"], ["proof (prove)\nusing this:\n  (thr s1 T = None) = (thr s2 T = None)\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. (redT_updTs (thr s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> T = None) =\n    (redT_updTs (thr s2) \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> T = None)", "by -(rule redT_updTs_nta_bisim_inv, simp_all add: ta_bisim_def)"], ["proof (state)\nthis:\n  (redT_updTs (thr s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> T = None) =\n  (redT_updTs (thr s2) \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> T = None)\n\ngoal (2 subgoals):\n 1. \\<And>t. thr s1' t = None \\<Longrightarrow> thr s2' t = None\n 2. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "ultimately"], ["proof (chain)\npicking this:\n  thr s1' T = None\n  (redT_updTs (thr s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> T = None) =\n  (redT_updTs (thr s2) \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> T = None)", "show \"thr s2' T = None\""], ["proof (prove)\nusing this:\n  thr s1' T = None\n  (redT_updTs (thr s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> T = None) =\n  (redT_updTs (thr s2) \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> T = None)\n\ngoal (1 subgoal):\n 1. thr s2' T = None", "using s2' s1'"], ["proof (prove)\nusing this:\n  thr s1' T = None\n  (redT_updTs (thr s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> T = None) =\n  (redT_updTs (thr s2) \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> T = None)\n  redT_upd s2 t ta2 x2' m2' s2'\n  redT_upd s1 t ta1 x1' m1' s1'\n\ngoal (1 subgoal):\n 1. thr s2' T = None", "by(auto split: if_split_asm)"], ["proof (state)\nthis:\n  thr s2' T = None\n\ngoal (1 subgoal):\n 1. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "fix T X1 LN"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "assume tsT: \"thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\""], ["proof (state)\nthis:\n  thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>t x1 ln.\n       thr s1' t = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' t = \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          t \\<turnstile> (x1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' t = None \\<or> x1 \\<approx>w x2)", "show \"\\<exists>x2. thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and> T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and> (wset s2' T = None \\<or> X1 \\<approx>w x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "proof(cases \"thr s1 T\")"], ["proof (state)\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "case None"], ["proof (state)\nthis:\n  thr s1 T = None\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with tst"], ["proof (chain)\npicking this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s1 T = None", "have \"t \\<noteq> T\""], ["proof (prove)\nusing this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s1 T = None\n\ngoal (1 subgoal):\n 1. t \\<noteq> T", "by auto"], ["proof (state)\nthis:\n  t \\<noteq> T\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with tbisim[OF this] None"], ["proof (chain)\npicking this:\n  tbisim (wset s1 T = None) T (thr s1 T) (shr s1) (thr s2 T) (shr s2)\n  thr s1 T = None\n  t \\<noteq> T", "have tsT': \"thr s2 T = None\""], ["proof (prove)\nusing this:\n  tbisim (wset s1 T = None) T (thr s1 T) (shr s1) (thr s2 T) (shr s2)\n  thr s1 T = None\n  t \\<noteq> T\n\ngoal (1 subgoal):\n 1. thr s2 T = None", "by(simp add: tbisim_def)"], ["proof (state)\nthis:\n  thr s2 T = None\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "from None \\<open>t \\<noteq> T\\<close> tsT aoe1 s1'"], ["proof (chain)\npicking this:\n  thr s1 T = None\n  t \\<noteq> T\n  thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  redT_upd s1 t ta1 x1' m1' s1'", "obtain M1\n      where ntset: \"NewThread T X1 M1 \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\" and [simp]: \"LN = no_wait_locks\""], ["proof (prove)\nusing this:\n  thr s1 T = None\n  t \\<noteq> T\n  thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  redT_upd s1 t ta1 x1' m1' s1'\n\ngoal (1 subgoal):\n 1. (\\<And>M1.\n        \\<lbrakk>NewThread T X1 M1\n                 \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>;\n         LN = no_wait_locks\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest!: redT_updTs_new_thread)"], ["proof (state)\nthis:\n  NewThread T X1 M1 \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n  LN = no_wait_locks\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "from ntset"], ["proof (chain)\npicking this:\n  NewThread T X1 M1 \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>", "obtain tas1 tas1' where \"\\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> = tas1 @ NewThread T X1 M1 # tas1'\""], ["proof (prove)\nusing this:\n  NewThread T X1 M1 \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. (\\<And>tas1 tas1'.\n        \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> =\n        tas1 @ NewThread T X1 M1 # tas1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: in_set_conv_decomp)"], ["proof (state)\nthis:\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> = tas1 @ NewThread T X1 M1 # tas1'\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with tasim"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> = tas1 @ NewThread T X1 M1 # tas1'", "obtain tas2 X2 M2 tas2' where \"\\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> = tas2 @ NewThread T X2 M2 # tas2'\"\n      \"length tas2 = length tas2\" \"length tas1' = length tas2'\" and Bisim: \"T \\<turnstile> (X1, M1) \\<approx> (X2, M2)\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> = tas1 @ NewThread T X1 M1 # tas1'\n\ngoal (1 subgoal):\n 1. (\\<And>tas2 X2 M2 tas2'.\n        \\<lbrakk>\\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> =\n                 tas2 @ NewThread T X2 M2 # tas2';\n         length tas2 = length tas2; length tas1' = length tas2';\n         T \\<turnstile> (X1, M1) \\<approx> (X2, M2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: list_all2_append1 list_all2_Cons1 ta_bisim_def)"], ["proof (state)\nthis:\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> = tas2 @ NewThread T X2 M2 # tas2'\n  length tas2 = length tas2\n  length tas1' = length tas2'\n  T \\<turnstile> (X1, M1) \\<approx> (X2, M2)\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "hence ntset': \"NewThread T X2 M2 \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub> = tas2 @ NewThread T X2 M2 # tas2'\n  length tas2 = length tas2\n  length tas1' = length tas2'\n  T \\<turnstile> (X1, M1) \\<approx> (X2, M2)\n\ngoal (1 subgoal):\n 1. NewThread T X2 M2 \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "by auto"], ["proof (state)\nthis:\n  NewThread T X2 M2 \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with tsT' \\<open>t \\<noteq> T\\<close> aoe2 s2'"], ["proof (chain)\npicking this:\n  thr s2 T = None\n  t \\<noteq> T\n  r2.actions_ok s2 t ta2\n  redT_upd s2 t ta2 x2' m2' s2'\n  NewThread T X2 M2 \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "have \"thr s2' T = \\<lfloor>(X2, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  thr s2 T = None\n  t \\<noteq> T\n  r2.actions_ok s2 t ta2\n  redT_upd s2 t ta2 x2' m2' s2'\n  NewThread T X2 M2 \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. thr s2' T = \\<lfloor>(X2, no_wait_locks)\\<rfloor>", "by(auto intro: redT_updTs_new_thread_ts)"], ["proof (state)\nthis:\n  thr s2' T = \\<lfloor>(X2, no_wait_locks)\\<rfloor>\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "moreover"], ["proof (state)\nthis:\n  thr s2' T = \\<lfloor>(X2, no_wait_locks)\\<rfloor>\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "from ntset' red2"], ["proof (chain)\npicking this:\n  NewThread T X2 M2 \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n  r2.r_syntax t x2 (shr s2) ta2 x2' m2'", "have \"m2' = M2\""], ["proof (prove)\nusing this:\n  NewThread T X2 M2 \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n  r2.r_syntax t x2 (shr s2) ta2 x2' m2'\n\ngoal (1 subgoal):\n 1. m2' = M2", "by(auto dest: r2.new_thread_memory)"], ["proof (state)\nthis:\n  m2' = M2\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "moreover"], ["proof (state)\nthis:\n  m2' = M2\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "from ntset red1"], ["proof (chain)\npicking this:\n  NewThread T X1 M1 \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n  r1.r_syntax t x1 (shr s1) ta1 x1' m1'", "have \"m1' = M1\""], ["proof (prove)\nusing this:\n  NewThread T X1 M1 \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n  r1.r_syntax t x1 (shr s1) ta1 x1' m1'\n\ngoal (1 subgoal):\n 1. m1' = M1", "by(auto dest: r1.new_thread_memory)"], ["proof (state)\nthis:\n  m1' = M1\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "moreover"], ["proof (state)\nthis:\n  m1' = M1\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "from wsts None"], ["proof (chain)\npicking this:\n  wset_thread_ok (wset s1) (thr s1)\n  thr s1 T = None", "have \"wset s1 T = None\""], ["proof (prove)\nusing this:\n  wset_thread_ok (wset s1) (thr s1)\n  thr s1 T = None\n\ngoal (1 subgoal):\n 1. wset s1 T = None", "by(rule wset_thread_okD)"], ["proof (state)\nthis:\n  wset s1 T = None\n\ngoal (2 subgoals):\n 1. thr s1 T = None \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "ultimately"], ["proof (chain)\npicking this:\n  thr s2' T = \\<lfloor>(X2, no_wait_locks)\\<rfloor>\n  m2' = M2\n  m1' = M1\n  wset s1 T = None", "show ?thesis"], ["proof (prove)\nusing this:\n  thr s2' T = \\<lfloor>(X2, no_wait_locks)\\<rfloor>\n  m2' = M2\n  m1' = M1\n  wset s1 T = None\n\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "using Bisim \\<open>t \\<noteq> T\\<close> s1' s2'"], ["proof (prove)\nusing this:\n  thr s2' T = \\<lfloor>(X2, no_wait_locks)\\<rfloor>\n  m2' = M2\n  m1' = M1\n  wset s1 T = None\n  T \\<turnstile> (X1, M1) \\<approx> (X2, M2)\n  t \\<noteq> T\n  redT_upd s1 t ta1 x1' m1' s1'\n  redT_upd s2 t ta2 x2' m2' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "by(auto simp add: redT_updWs_None_implies_None)"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n     (wset s2' T = None \\<or> X1 \\<approx>w x2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "case (Some a)"], ["proof (state)\nthis:\n  thr s1 T = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       thr s1 T = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n          T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n          (wset s2' T = None \\<or> X1 \\<approx>w x2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "proof(cases \"t = T\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t = T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "case True"], ["proof (state)\nthis:\n  t = T\n\ngoal (2 subgoals):\n 1. t = T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with tst tsT s1'"], ["proof (chain)\npicking this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\n  redT_upd s1 t ta1 x1' m1' s1'\n  t = T", "have [simp]: \"X1 = x1'\" \"LN = redT_updLns (locks s1) t ln \\<lbrace>ta1\\<rbrace>\\<^bsub>l\\<^esub>\""], ["proof (prove)\nusing this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\n  redT_upd s1 t ta1 x1' m1' s1'\n  t = T\n\ngoal (1 subgoal):\n 1. X1 = x1' &&&\n    LN = redT_updLns (locks s1) t ln \\<lbrace>ta1\\<rbrace>\\<^bsub>l\\<^esub>", "by(auto)"], ["proof (state)\nthis:\n  X1 = x1'\n  LN = redT_updLns (locks s1) t ln \\<lbrace>ta1\\<rbrace>\\<^bsub>l\\<^esub>\n\ngoal (2 subgoals):\n 1. t = T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)\n 2. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "using True bisim' bisimw tasim tst tst' s1' s2' wset"], ["proof (prove)\nusing this:\n  t = T\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  wset s1' t = None \\<or> x1' \\<approx>w x2'\n  ta1 \\<sim>m ta2\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  redT_upd s1 t ta1 x1' m1' s1'\n  redT_upd s2 t ta2 x2' m2' s2'\n  wset s1' = wset s2'\n\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "by(auto simp add: redT_updLns_def ta_bisim_def)"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n     (wset s2' T = None \\<or> X1 \\<approx>w x2)\n\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "case False"], ["proof (state)\nthis:\n  t \\<noteq> T\n\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with Some aoe1 tsT s1'"], ["proof (chain)\npicking this:\n  thr s1 T = \\<lfloor>a\\<rfloor>\n  r1.actions_ok s1 t ta1\n  thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\n  redT_upd s1 t ta1 x1' m1' s1'\n  t \\<noteq> T", "have \"thr s1 T = \\<lfloor>(X1, LN)\\<rfloor>\""], ["proof (prove)\nusing this:\n  thr s1 T = \\<lfloor>a\\<rfloor>\n  r1.actions_ok s1 t ta1\n  thr s1' T = \\<lfloor>(X1, LN)\\<rfloor>\n  redT_upd s1 t ta1 x1' m1' s1'\n  t \\<noteq> T\n\ngoal (1 subgoal):\n 1. thr s1 T = \\<lfloor>(X1, LN)\\<rfloor>", "by(auto dest: redT_updTs_Some)"], ["proof (state)\nthis:\n  thr s1 T = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with tbisim[OF False]"], ["proof (chain)\npicking this:\n  tbisim (wset s1 T = None) T (thr s1 T) (shr s1) (thr s2 T) (shr s2)\n  thr s1 T = \\<lfloor>(X1, LN)\\<rfloor>", "obtain X2 \n        where tsT': \"thr s2 T = \\<lfloor>(X2, LN)\\<rfloor>\" and Bisim: \"T \\<turnstile> (X1, shr s1) \\<approx> (X2, shr s2)\"\n        and bisimw: \"wset s1 T = None \\<or> X1 \\<approx>w X2\""], ["proof (prove)\nusing this:\n  tbisim (wset s1 T = None) T (thr s1 T) (shr s1) (thr s2 T) (shr s2)\n  thr s1 T = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>X2.\n        \\<lbrakk>thr s2 T = \\<lfloor>(X2, LN)\\<rfloor>;\n         T \\<turnstile> (X1, shr s1) \\<approx> (X2, shr s2);\n         wset s1 T = None \\<or> X1 \\<approx>w X2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: tbisim_def)"], ["proof (state)\nthis:\n  thr s2 T = \\<lfloor>(X2, LN)\\<rfloor>\n  T \\<turnstile> (X1, shr s1) \\<approx> (X2, shr s2)\n  wset s1 T = None \\<or> X1 \\<approx>w X2\n\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "with aoe2 False s2'"], ["proof (chain)\npicking this:\n  r2.actions_ok s2 t ta2\n  t \\<noteq> T\n  redT_upd s2 t ta2 x2' m2' s2'\n  thr s2 T = \\<lfloor>(X2, LN)\\<rfloor>\n  T \\<turnstile> (X1, shr s1) \\<approx> (X2, shr s2)\n  wset s1 T = None \\<or> X1 \\<approx>w X2", "have tsT': \"thr s2' T = \\<lfloor>(X2, LN)\\<rfloor>\""], ["proof (prove)\nusing this:\n  r2.actions_ok s2 t ta2\n  t \\<noteq> T\n  redT_upd s2 t ta2 x2' m2' s2'\n  thr s2 T = \\<lfloor>(X2, LN)\\<rfloor>\n  T \\<turnstile> (X1, shr s1) \\<approx> (X2, shr s2)\n  wset s1 T = None \\<or> X1 \\<approx>w X2\n\ngoal (1 subgoal):\n 1. thr s2' T = \\<lfloor>(X2, LN)\\<rfloor>", "by(auto simp add: redT_updTs_Some)"], ["proof (state)\nthis:\n  thr s2' T = \\<lfloor>(X2, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "moreover"], ["proof (state)\nthis:\n  thr s2' T = \\<lfloor>(X2, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "from Bisim bisim \\<tau>red1 red1 \\<tau>1 \\<tau>red2 red2 \\<tau>2 bisim' tasim"], ["proof (chain)\npicking this:\n  T \\<turnstile> (X1, shr s1) \\<approx> (X2, shr s2)\n  t \\<turnstile> (x1'', shr s1) \\<approx> (x2'', shr s2)\n  r1.silent_moves t (x1'', shr s1) (x1, shr s1)\n  r1.r_syntax t x1 (shr s1) ta1 x1' m1'\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', m1')\n  r2.silent_moves t (x2'', shr s2) (x2, shr s2)\n  r2.r_syntax t x2 (shr s2) ta2 x2' m2'\n  \\<not> \\<tau>move2 (x2, shr s2) ta2 (x2', m2')\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2", "have \"T \\<turnstile> (X1, m1') \\<approx> (X2, m2')\""], ["proof (prove)\nusing this:\n  T \\<turnstile> (X1, shr s1) \\<approx> (X2, shr s2)\n  t \\<turnstile> (x1'', shr s1) \\<approx> (x2'', shr s2)\n  r1.silent_moves t (x1'', shr s1) (x1, shr s1)\n  r1.r_syntax t x1 (shr s1) ta1 x1' m1'\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', m1')\n  r2.silent_moves t (x2'', shr s2) (x2, shr s2)\n  r2.r_syntax t x2 (shr s2) ta2 x2' m2'\n  \\<not> \\<tau>move2 (x2, shr s2) ta2 (x2', m2')\n  t \\<turnstile> (x1', m1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. T \\<turnstile> (X1, m1') \\<approx> (X2, m2')", "by(rule bisim_inv_red_other)"], ["proof (state)\nthis:\n  T \\<turnstile> (X1, m1') \\<approx> (X2, m2')\n\ngoal (1 subgoal):\n 1. t \\<noteq> T \\<Longrightarrow>\n    \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "ultimately"], ["proof (chain)\npicking this:\n  thr s2' T = \\<lfloor>(X2, LN)\\<rfloor>\n  T \\<turnstile> (X1, m1') \\<approx> (X2, m2')", "show ?thesis"], ["proof (prove)\nusing this:\n  thr s2' T = \\<lfloor>(X2, LN)\\<rfloor>\n  T \\<turnstile> (X1, m1') \\<approx> (X2, m2')\n\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "using False bisimw s1' s2'"], ["proof (prove)\nusing this:\n  thr s2' T = \\<lfloor>(X2, LN)\\<rfloor>\n  T \\<turnstile> (X1, m1') \\<approx> (X2, m2')\n  t \\<noteq> T\n  wset s1 T = None \\<or> X1 \\<approx>w X2\n  redT_upd s1 t ta1 x1' m1' s1'\n  redT_upd s2 t ta2 x2' m2' s2'\n\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n       (wset s2' T = None \\<or> X1 \\<approx>w x2)", "by(auto simp add: redT_updWs_None_implies_None)"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n     (wset s2' T = None \\<or> X1 \\<approx>w x2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n     (wset s2' T = None \\<or> X1 \\<approx>w x2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr s2' T = \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     T \\<turnstile> (X1, shr s1') \\<approx> (x2, shr s2') \\<and>\n     (wset s2' T = None \\<or> X1 \\<approx>w x2)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem mbisim_simulation1:\n  assumes mbisim: \"mbisim s1 s2\" and \"\\<not> m\\<tau>move1 s1 tl1 s1'\" \"r1.redT s1 tl1 s1'\"\n  shows \"\\<exists>s2' s2'' tl2. r2.mthr.silent_moves s2 s2' \\<and> r2.redT s2' tl2 s2'' \\<and>\n                        \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and> mbisim s1' s2'' \\<and> mta_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from assms"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  \\<not> m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'", "obtain t ta1 where tl1 [simp]: \"tl1 = (t, ta1)\" and redT: \"s1 -1-t\\<triangleright>ta1\\<rightarrow> s1'\"\n    and m\\<tau>: \"\\<not> m\\<tau>move1 s1 (t, ta1) s1'\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  \\<not> m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'\n\ngoal (1 subgoal):\n 1. (\\<And>t ta1.\n        \\<lbrakk>tl1 = (t, ta1);\n         s1 -1-t\\<triangleright>ta1\\<rightarrow> s1';\n         \\<not> m\\<tau>move1 s1 (t, ta1) s1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases tl1) fastforce"], ["proof (state)\nthis:\n  tl1 = (t, ta1)\n  s1 -1-t\\<triangleright>ta1\\<rightarrow> s1'\n  \\<not> m\\<tau>move1 s1 (t, ta1) s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "obtain ls1 ts1 m1 ws1 is1 where [simp]: \"s1 = (ls1, (ts1, m1), ws1, is1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls1 ts1 m1 ws1 is1.\n        s1 = (ls1, (ts1, m1), ws1, is1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s1) fastforce"], ["proof (state)\nthis:\n  s1 = (ls1, (ts1, m1), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "obtain ls1' ts1' m1' ws1' is1' where [simp]: \"s1' = (ls1', (ts1', m1'), ws1', is1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls1' ts1' m1' ws1' is1'.\n        s1' = (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s1') fastforce"], ["proof (state)\nthis:\n  s1' = (ls1', (ts1', m1'), ws1', is1')\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "obtain ls2 ts2 m2 ws2 is2 where [simp]: \"s2 = (ls2, (ts2, m2), ws2, is2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls2 ts2 m2 ws2 is2.\n        s2 = (ls2, (ts2, m2), ws2, is2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s2) fastforce"], ["proof (state)\nthis:\n  s2 = (ls2, (ts2, m2), ws2, is2)\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have [simp]: \"ls2 = ls1\" \"ws2 = ws1\" \"is2 = is1\" \"finite (dom ts1)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. (ls2 = ls1 &&& ws2 = ws1) &&& is2 = is1 &&& finite (dom ts1)", "by(auto simp add: mbisim_def)"], ["proof (state)\nthis:\n  ls2 = ls1\n  ws2 = ws1\n  is2 = is1\n  finite (dom ts1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from redT"], ["proof (chain)\npicking this:\n  s1 -1-t\\<triangleright>ta1\\<rightarrow> s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 -1-t\\<triangleright>ta1\\<rightarrow> s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) ta1 x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t ta1; redT_upd s1 t ta1 x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "case (redT_normal x1 x1' M1')"], ["proof (state)\nthis:\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) ta1 x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t ta1; redT_upd s1 t ta1 x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "hence red: \"t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', M1')\" \n      and tst: \"ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\"\n      and aoe: \"r1.actions_ok s1 t ta1\"\n      and s1': \"redT_upd s1 t ta1 x1' M1' s1'\""], ["proof (prove)\nusing this:\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (1 subgoal):\n 1. (r1.r_syntax t x1 m1 ta1 x1' M1' &&&\n     ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>) &&&\n    r1.actions_ok s1 t ta1 &&& redT_upd s1 t ta1 x1' M1' s1'", "by auto"], ["proof (state)\nthis:\n  r1.r_syntax t x1 m1 ta1 x1' M1'\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) ta1 x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t ta1; redT_upd s1 t ta1 x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from mbisim tst"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "obtain x2 where tst': \"ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\"\n      and bisim: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        \\<lbrakk>ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>;\n         t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD1)"], ["proof (state)\nthis:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) ta1 x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t ta1; redT_upd s1 t ta1 x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from m\\<tau>"], ["proof (chain)\npicking this:\n  \\<not> m\\<tau>move1 s1 (t, ta1) s1'", "have \\<tau>: \"\\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')\""], ["proof (prove)\nusing this:\n  \\<not> m\\<tau>move1 s1 (t, ta1) s1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')", "proof(rule contrapos_nn)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>move1 (x1, m1) ta1 (x1', M1') \\<Longrightarrow>\n    m\\<tau>move1 s1 (t, ta1) s1'", "assume \\<tau>: \"\\<tau>move1 (x1, m1) ta1 (x1', M1')\""], ["proof (state)\nthis:\n  \\<tau>move1 (x1, m1) ta1 (x1', M1')\n\ngoal (1 subgoal):\n 1. \\<tau>move1 (x1, m1) ta1 (x1', M1') \\<Longrightarrow>\n    m\\<tau>move1 s1 (t, ta1) s1'", "moreover"], ["proof (state)\nthis:\n  \\<tau>move1 (x1, m1) ta1 (x1', M1')\n\ngoal (1 subgoal):\n 1. \\<tau>move1 (x1, m1) ta1 (x1', M1') \\<Longrightarrow>\n    m\\<tau>move1 s1 (t, ta1) s1'", "hence [simp]: \"ta1 = \\<epsilon>\""], ["proof (prove)\nusing this:\n  \\<tau>move1 (x1, m1) ta1 (x1', M1')\n\ngoal (1 subgoal):\n 1. ta1 = \\<lbrace>\\<rbrace>", "by(rule r1.silent_tl)"], ["proof (state)\nthis:\n  ta1 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<tau>move1 (x1, m1) ta1 (x1', M1') \\<Longrightarrow>\n    m\\<tau>move1 s1 (t, ta1) s1'", "moreover"], ["proof (state)\nthis:\n  ta1 = \\<lbrace>\\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<tau>move1 (x1, m1) ta1 (x1', M1') \\<Longrightarrow>\n    m\\<tau>move1 s1 (t, ta1) s1'", "have [simp]: \"M1' = m1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M1' = m1", "by(rule r1.\\<tau>move_heap[OF red \\<tau>, symmetric])"], ["proof (state)\nthis:\n  M1' = m1\n\ngoal (1 subgoal):\n 1. \\<tau>move1 (x1, m1) ta1 (x1', M1') \\<Longrightarrow>\n    m\\<tau>move1 s1 (t, ta1) s1'", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau>move1 (x1, m1) ta1 (x1', M1')\n  ta1 = \\<lbrace>\\<rbrace>\n  M1' = m1", "show \"m\\<tau>move1 s1 (t, ta1) s1'\""], ["proof (prove)\nusing this:\n  \\<tau>move1 (x1, m1) ta1 (x1', M1')\n  ta1 = \\<lbrace>\\<rbrace>\n  M1' = m1\n\ngoal (1 subgoal):\n 1. m\\<tau>move1 s1 (t, ta1) s1'", "using s1' tst s1'"], ["proof (prove)\nusing this:\n  \\<tau>move1 (x1, m1) ta1 (x1', M1')\n  ta1 = \\<lbrace>\\<rbrace>\n  M1' = m1\n  redT_upd s1 t ta1 x1' M1' s1'\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (1 subgoal):\n 1. m\\<tau>move1 s1 (t, ta1) s1'", "by(auto simp add: redT_updLs_def o_def intro: r1.m\\<tau>move.intros elim: rtrancl3p_cases)"], ["proof (state)\nthis:\n  m\\<tau>move1 s1 (t, ta1) s1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) ta1 x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t ta1; redT_upd s1 t ta1 x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "proof(cases \"ws1 t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "case None"], ["proof (state)\nthis:\n  ws1 t = None\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note wst = this"], ["proof (state)\nthis:\n  ws1 t = None\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from simulation1[OF bisim red \\<tau>]"], ["proof (chain)\npicking this:\n  \\<exists>s2' s2'' tl2.\n     r2.silent_moves t (x2, m2) s2' \\<and>\n     t \\<turnstile> s2' -2-tl2\\<rightarrow> s2'' \\<and>\n     \\<not> \\<tau>move2 s2' tl2 s2'' \\<and>\n     t \\<turnstile> (x1', M1') \\<approx> s2'' \\<and> ta1 \\<sim>m tl2", "obtain x2' M2' x2'' M2'' ta2\n        where red21: \"r2.silent_moves t (x2, m2) (x2', M2')\"\n        and red22: \"t \\<turnstile> (x2', M2') -2-ta2\\<rightarrow> (x2'', M2'')\" and \\<tau>2: \"\\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')\"\n        and bisim': \"t \\<turnstile> (x1', M1') \\<approx> (x2'', M2'')\"\n        and tasim: \"ta_bisim bisim ta1 ta2\""], ["proof (prove)\nusing this:\n  \\<exists>s2' s2'' tl2.\n     r2.silent_moves t (x2, m2) s2' \\<and>\n     t \\<turnstile> s2' -2-tl2\\<rightarrow> s2'' \\<and>\n     \\<not> \\<tau>move2 s2' tl2 s2'' \\<and>\n     t \\<turnstile> (x1', M1') \\<approx> s2'' \\<and> ta1 \\<sim>m tl2\n\ngoal (1 subgoal):\n 1. (\\<And>x2' M2' ta2 x2'' M2''.\n        \\<lbrakk>r2.silent_moves t (x2, m2) (x2', M2');\n         r2.r_syntax t x2' M2' ta2 x2'' M2'';\n         \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'');\n         t \\<turnstile> (x1', M1') \\<approx> (x2'', M2'');\n         ta1 \\<sim>m ta2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r2.silent_moves t (x2, m2) (x2', M2')\n  r2.r_syntax t x2' M2' ta2 x2'' M2''\n  \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')\n  t \\<turnstile> (x1', M1') \\<approx> (x2'', M2'')\n  ta1 \\<sim>m ta2\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "let ?s2' = \"redT_upd_\\<epsilon> s2 t x2' M2'\""], ["proof (state)\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "let ?S2' = \"activate_cond_actions2 s1 ?s2' \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\""], ["proof (state)\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "let ?s2'' = \"(redT_updLs (locks ?S2') t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>, ((redT_updTs (thr ?S2') \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>)(t \\<mapsto> (x2'', redT_updLns (locks ?S2') t (snd (the (thr ?S2' t))) \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)), M2''), wset s1', interrupts s1')\""], ["proof (state)\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from red21 tst' wst bisim"], ["proof (chain)\npicking this:\n  r2.silent_moves t (x2, m2) (x2', M2')\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ws1 t = None\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)", "have \"\\<tau>mRed2 s2 ?s2'\""], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', M2')\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ws1 t = None\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' M2')", "by -(rule r2.silent_moves_into_RedT_\\<tau>_inv, auto)"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' M2')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' M2')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from red21 bisim"], ["proof (chain)\npicking this:\n  r2.silent_moves t (x2, m2) (x2', M2')\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)", "have [simp]: \"M2' = m2\""], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', M2')\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. M2' = m2", "by(auto dest: r2.red_rtrancl_\\<tau>_heapD_inv)"], ["proof (state)\nthis:\n  M2' = m2\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tasim"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2", "have [simp]: \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>l\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>l\\<^esub>\" \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>w\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>w\\<^esub>\" \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>c\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>c\\<^esub>\" \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>i\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>i\\<^esub>\"\n        and nta: \"list_all2 (nta_bisim bisim) \\<lbrace> ta1 \\<rbrace>\\<^bsub>t\\<^esub> \\<lbrace> ta2 \\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. ((\\<lbrace>ta1\\<rbrace>\\<^bsub>l\\<^esub> =\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub> &&&\n      \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> =\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>) &&&\n     \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> &&&\n     \\<lbrace>ta1\\<rbrace>\\<^bsub>i\\<^esub> =\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>i\\<^esub>) &&&\n    list_all2 (nta_bisim bisim) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "by(auto simp add: ta_bisim_def)"], ["proof (state)\nthis:\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>l\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>i\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>i\\<^esub>\n  list_all2 (nta_bisim bisim) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have tbisim: \"\\<And>t. tbisim (ws1 t = None) t (ts1 t) m1 (ts2 t) m2\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. \\<And>t. tbisim (ws1 t = None) t (ts1 t) m1 (ts2 t) m2", "by(simp add: mbisim_def)"], ["proof (state)\nthis:\n  tbisim (ws1 ?t13 = None) ?t13 (ts1 ?t13) m1 (ts2 ?t13) m2\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "hence tbisim': \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws1 t' = None) t' (ts1 t') m1 (thr ?s2' t') m2\""], ["proof (prove)\nusing this:\n  tbisim (ws1 ?t13 = None) ?t13 (ts1 ?t13) m1 (ts2 ?t13) m2\n\ngoal (1 subgoal):\n 1. \\<And>t'.\n       t' \\<noteq> t \\<Longrightarrow>\n       tbisim (ws1 t' = None) t' (ts1 t') m1\n        (thr (redT_upd_\\<epsilon> s2 t x2' M2') t') m2", "by(auto)"], ["proof (state)\nthis:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (redT_upd_\\<epsilon> s2 t x2' M2') ?t'13) m2\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from aoe"], ["proof (chain)\npicking this:\n  r1.actions_ok s1 t ta1", "have cao1: \"r1.cond_action_oks (ls1, (ts1, m1), ws1, is1) t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\""], ["proof (prove)\nusing this:\n  r1.actions_ok s1 t ta1\n\ngoal (1 subgoal):\n 1. r1.cond_action_oks (ls1, (ts1, m1), ws1, is1) t\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>", "by auto"], ["proof (state)\nthis:\n  r1.cond_action_oks (ls1, (ts1, m1), ws1, is1) t\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst'"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>", "have \"thr ?s2' t = \\<lfloor>(x2', no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. thr (redT_upd_\\<epsilon> s2 t x2' M2') t =\n    \\<lfloor>(x2', no_wait_locks)\\<rfloor>", "by(auto simp add: redT_updLns_def o_def finfun_Diag_const2)"], ["proof (state)\nthis:\n  thr (redT_upd_\\<epsilon> s2 t x2' M2') t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from cond_actions_oks_bisim_ex_\\<tau>2_inv[OF tbisim', OF _ tst this cao1]"], ["proof (chain)\npicking this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed2 (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t;\n   ?t' \\<noteq> t\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws1 ?t' = None) ?t' (ts1 ?t') m1\n                     (thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n                            (ls1,\n                             (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2),\n                             ws1, is1)\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       ?t')\n                     m2\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r2.cond_action_oks\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n        (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>", "have red21': \"\\<tau>mRed2 ?s2' ?S2'\" and tbisim'': \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws1 t' = None) t' (ts1 t') m1 (thr ?S2' t') m2\"\n        and cao2: \"r2.cond_action_oks ?S2' t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\" and tst'': \"thr ?S2' t = \\<lfloor>(x2', no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed2 (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t;\n   ?t' \\<noteq> t\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws1 ?t' = None) ?t' (ts1 ?t') m1\n                     (thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n                            (ls1,\n                             (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2),\n                             ws1, is1)\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       ?t')\n                     m2\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r2.cond_action_oks\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n        (ls1, (thr (redT_upd_\\<epsilon> s2 t x2' M2'), m2), ws1, is1)\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<tau>mRed2 (redT_upd_\\<epsilon> s2 t x2' M2')\n      (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws1 t' = None) t' (ts1 t') m1\n          (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n            t')\n          m2)) &&&\n    r2.cond_action_oks\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> &&&\n    thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     t =\n    \\<lfloor>(x2', no_wait_locks)\\<rfloor>", "by(auto simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  \\<tau>mRed2 (redT_upd_\\<epsilon> s2 t x2' M2')\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n  r2.cond_action_oks\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note red21'"], ["proof (state)\nthis:\n  \\<tau>mRed2 (redT_upd_\\<epsilon> s2 t x2' M2')\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "also (rtranclp_trans)"], ["proof (state)\nthis:\n  \\<tau>mRed2 (redT_upd_\\<epsilon> s2 t x2' M2')\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tbisim'' tst'' tst"], ["proof (chain)\npicking this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "have \"\\<forall>t'. ts1 t' = None \\<longleftrightarrow> thr ?S2' t' = None\""], ["proof (prove)\nusing this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<forall>t'.\n       (ts1 t' = None) =\n       (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n         t' =\n        None)", "by(force simp add: tbisim_def)"], ["proof (state)\nthis:\n  \\<forall>t'.\n     (ts1 t' = None) =\n     (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n       t' =\n      None)\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from aoe thread_oks_bisim_inv[OF this nta]"], ["proof (chain)\npicking this:\n  r1.actions_ok s1 t ta1\n  thread_oks ts1 \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> =\n  thread_oks\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "have \"thread_oks (thr ?S2') \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  r1.actions_ok s1 t ta1\n  thread_oks ts1 \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> =\n  thread_oks\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. thread_oks\n     (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "by simp"], ["proof (state)\nthis:\n  thread_oks\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "with cao2 aoe"], ["proof (chain)\npicking this:\n  r2.cond_action_oks\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  r1.actions_ok s1 t ta1\n  thread_oks\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "have aoe': \"r2.actions_ok ?S2' t ta2\""], ["proof (prove)\nusing this:\n  r2.cond_action_oks\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  r1.actions_ok s1 t ta1\n  thread_oks\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. r2.actions_ok\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     t ta2", "by auto"], ["proof (state)\nthis:\n  r2.actions_ok\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "with red22 tst'' s1'"], ["proof (chain)\npicking this:\n  r2.r_syntax t x2' M2' ta2 x2'' M2''\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  redT_upd s1 t ta1 x1' M1' s1'\n  r2.actions_ok\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2", "have \"?S2' -2-t\\<triangleright>ta2\\<rightarrow> ?s2''\""], ["proof (prove)\nusing this:\n  r2.r_syntax t x2' M2' ta2 x2'' M2''\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  redT_upd s1 t ta1 x1' M1' s1'\n  r2.actions_ok\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2\n\ngoal (1 subgoal):\n 1. activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2'',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1\n                            (redT_upd_\\<epsilon> s2 t x2' M2')\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       M2''),\n      wset s1', interrupts s1')", "by -(rule r2.redT.redT_normal, auto)"], ["proof (state)\nthis:\n  activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from \\<tau>2"], ["proof (chain)\npicking this:\n  \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')", "have \"\\<not> m\\<tau>move2 ?S2' (t, ta2) ?s2''\""], ["proof (prove)\nusing this:\n  \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')\n\ngoal (1 subgoal):\n 1. \\<not> m\\<tau>move2\n            (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n            (t, ta2)\n            (redT_updLs\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n             (redT_updTs\n               (thr (activate_cond_actions2 s1\n                      (redT_upd_\\<epsilon> s2 t x2' M2')\n                      \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n              (t \\<mapsto>\n              (x2'',\n               redT_updLns\n                (locks\n                  (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                t (snd (the (thr (activate_cond_actions2 s1\n                                   (redT_upd_\\<epsilon> s2 t x2' M2')\n                                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                              t)))\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n              M2''),\n             wset s1', interrupts s1')", "proof(rule contrapos_nn)"], ["proof (state)\ngoal (1 subgoal):\n 1. m\\<tau>move2\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     (t, ta2)\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2'',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1\n                            (redT_upd_\\<epsilon> s2 t x2' M2')\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       M2''),\n      wset s1', interrupts s1') \\<Longrightarrow>\n    \\<tau>move2 (x2', M2') ta2 (x2'', M2'')", "assume m\\<tau>: \"m\\<tau>move2 ?S2' (t, ta2) ?s2''\""], ["proof (state)\nthis:\n  m\\<tau>move2\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   (t, ta2)\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. m\\<tau>move2\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     (t, ta2)\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2'',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1\n                            (redT_upd_\\<epsilon> s2 t x2' M2')\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       M2''),\n      wset s1', interrupts s1') \\<Longrightarrow>\n    \\<tau>move2 (x2', M2') ta2 (x2'', M2'')", "thus \"\\<tau>move2 (x2', M2') ta2 (x2'', M2'')\""], ["proof (prove)\nusing this:\n  m\\<tau>move2\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   (t, ta2)\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<tau>move2 (x2', M2') ta2 (x2'', M2'')", "using tst'' tst'"], ["proof (prove)\nusing this:\n  m\\<tau>move2\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   (t, ta2)\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>move2 (x2', M2') ta2 (x2'', M2'')", "by cases auto"], ["proof (state)\nthis:\n  \\<tau>move2 (x2', M2') ta2 (x2'', M2'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2'',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1\n                                 (redT_upd_\\<epsilon> s2 t x2' M2')\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            M2''),\n           wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2'',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1\n                                 (redT_upd_\\<epsilon> s2 t x2' M2')\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            M2''),\n           wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "{"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2'',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1\n                                 (redT_upd_\\<epsilon> s2 t x2' M2')\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            M2''),\n           wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note s1'"], ["proof (state)\nthis:\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"redT_upd ?S2' t ta2 x2'' M2'' ?s2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redT_upd\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     t ta2 x2'' M2''\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2'',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1\n                            (redT_upd_\\<epsilon> s2 t x2' M2')\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       M2''),\n      wset s1', interrupts s1')", "using s1'"], ["proof (prove)\nusing this:\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (1 subgoal):\n 1. redT_upd\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     t ta2 x2'' M2''\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2'',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1\n                            (redT_upd_\\<epsilon> s2 t x2' M2')\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       M2''),\n      wset s1', interrupts s1')", "by auto"], ["proof (state)\nthis:\n  redT_upd\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2 x2'' M2''\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  redT_upd\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2 x2'' M2''\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"wset s1 = wset ?S2'\" \"locks s1 = locks ?S2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset s1 =\n    wset\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) &&&\n    locks s1 =\n    locks\n     (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)", "by simp_all"], ["proof (state)\nthis:\n  wset s1 =\n  wset\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset s1 =\n  wset\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"wset s1' = wset ?s2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset s1' =\n    wset\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2'',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1\n                            (redT_upd_\\<epsilon> s2 t x2' M2')\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       M2''),\n      wset s1', interrupts s1')", "by simp"], ["proof (state)\nthis:\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"interrupts s1' = interrupts ?s2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupts s1' =\n    interrupts\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2'',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1\n                            (redT_upd_\\<epsilon> s2 t x2' M2')\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       M2''),\n      wset s1', interrupts s1')", "by simp"], ["proof (state)\nthis:\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"finite (dom (thr s1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom (thr s1))", "by simp"], ["proof (state)\nthis:\n  finite (dom (thr s1))\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  finite (dom (thr s1))\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have \"wset_thread_ok (wset s1) (thr s1)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1) (thr s1)", "by(simp add: mbisim_def)"], ["proof (state)\nthis:\n  wset_thread_ok (wset s1) (thr s1)\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset_thread_ok (wset s1) (thr s1)\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst"], ["proof (chain)\npicking this:\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "have \"thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note tst'' aoe aoe' tasim bisim'"], ["proof (state)\nthis:\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2'', M2'')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2'', M2'')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"wset s1' t = None \\<or> x1' \\<approx>w x2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset s1' t = None \\<or> x1' \\<approx>w x2''", "proof(cases \"wset s1' t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. wset s1' t = None \\<Longrightarrow>\n    wset s1' t = None \\<or> x1' \\<approx>w x2''\n 2. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "case None"], ["proof (state)\nthis:\n  wset s1' t = None\n\ngoal (2 subgoals):\n 1. wset s1' t = None \\<Longrightarrow>\n    wset s1' t = None \\<or> x1' \\<approx>w x2''\n 2. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "thus ?thesis"], ["proof (prove)\nusing this:\n  wset s1' t = None\n\ngoal (1 subgoal):\n 1. wset s1' t = None \\<or> x1' \\<approx>w x2''", ".."], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2''\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "case (Some w)"], ["proof (state)\nthis:\n  wset s1' t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "with wst s1'"], ["proof (chain)\npicking this:\n  ws1 t = None\n  redT_upd s1 t ta1 x1' M1' s1'\n  wset s1' t = \\<lfloor>w\\<rfloor>", "obtain w' where Suspend1: \"Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  ws1 t = None\n  redT_upd s1 t ta1 x1' M1' s1'\n  wset s1' t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        Suspend w'\n        \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: redT_updWs_None_SomeD)"], ["proof (state)\nthis:\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "with tasim"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>", "have Suspend2: \"Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>", "by(simp add: ta_bisim_def)"], ["proof (state)\nthis:\n  Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "from bisim_waitI[OF bisim rtranclp.rtrancl_refl red \\<tau> _ _ _ bisim' tasim Suspend1 this, of x2'] red21 red22 \\<tau>2"], ["proof (chain)\npicking this:\n  \\<lbrakk>r2.silent_moves t (x2, m2) (x2', m2);\n   r2.r_syntax t x2' m2 ta2 x2'' M2'';\n   \\<not> \\<tau>move2 (x2', m2) ta2 (x2'', M2'')\\<rbrakk>\n  \\<Longrightarrow> x1' \\<approx>w x2''\n  r2.silent_moves t (x2, m2) (x2', M2')\n  r2.r_syntax t x2' M2' ta2 x2'' M2''\n  \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')", "have \"x1' \\<approx>w x2''\""], ["proof (prove)\nusing this:\n  \\<lbrakk>r2.silent_moves t (x2, m2) (x2', m2);\n   r2.r_syntax t x2' m2 ta2 x2'' M2'';\n   \\<not> \\<tau>move2 (x2', m2) ta2 (x2'', M2'')\\<rbrakk>\n  \\<Longrightarrow> x1' \\<approx>w x2''\n  r2.silent_moves t (x2, m2) (x2', M2')\n  r2.r_syntax t x2' M2' ta2 x2'' M2''\n  \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')\n\ngoal (1 subgoal):\n 1. x1' \\<approx>w x2''", "by auto"], ["proof (state)\nthis:\n  x1' \\<approx>w x2''\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2''", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1' \\<approx>w x2''\n\ngoal (1 subgoal):\n 1. wset s1' t = None \\<or> x1' \\<approx>w x2''", ".."], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2''\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2''\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note rtranclp.rtrancl_refl"], ["proof (state)\nthis:\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from red"], ["proof (chain)\npicking this:\n  r1.r_syntax t x1 m1 ta1 x1' M1'", "have \"t \\<turnstile> (x1, shr s1) -1-ta1\\<rightarrow> (x1', M1')\""], ["proof (prove)\nusing this:\n  r1.r_syntax t x1 m1 ta1 x1' M1'\n\ngoal (1 subgoal):\n 1. r1.r_syntax t x1 (shr s1) ta1 x1' M1'", "by simp"], ["proof (state)\nthis:\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from red21"], ["proof (chain)\npicking this:\n  r2.silent_moves t (x2, m2) (x2', M2')", "have \"r2.silent_moves t (x2, shr ?S2') (x2', shr ?S2')\""], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', M2')\n\ngoal (1 subgoal):\n 1. r2.silent_moves t\n     (x2,\n      shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     (x2',\n      shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  r2.silent_moves t\n   (x2,\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   (x2',\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  r2.silent_moves t\n   (x2,\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   (x2',\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from red22"], ["proof (chain)\npicking this:\n  r2.r_syntax t x2' M2' ta2 x2'' M2''", "have \"t \\<turnstile> (x2', shr ?S2') -2-ta2\\<rightarrow> (x2'', M2'')\""], ["proof (prove)\nusing this:\n  r2.r_syntax t x2' M2' ta2 x2'' M2''\n\ngoal (1 subgoal):\n 1. r2.r_syntax t x2'\n     (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     ta2 x2'' M2''", "by simp"], ["proof (state)\nthis:\n  r2.r_syntax t x2'\n   (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2'' M2''\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  r2.r_syntax t x2'\n   (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2'' M2''\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from bisim"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)", "have \"t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr ?S2')\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. t \\<turnstile> (x1, shr s1)\n    \\<approx> (x2,\n               shr (activate_cond_actions2 s1\n                     (redT_upd_\\<epsilon> s2 t x2' M2')\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1\n                   (redT_upd_\\<epsilon> s2 t x2' M2')\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1\n                   (redT_upd_\\<epsilon> s2 t x2' M2')\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from \\<tau>"], ["proof (chain)\npicking this:\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')", "have \"\\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\""], ["proof (prove)\nusing this:\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from \\<tau>2"], ["proof (chain)\npicking this:\n  \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')", "have \"\\<not> \\<tau>move2 (x2', shr ?S2') ta2 (x2'', M2'')\""], ["proof (prove)\nusing this:\n  \\<not> \\<tau>move2 (x2', M2') ta2 (x2'', M2'')\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move2\n            (x2',\n             shr (activate_cond_actions2 s1\n                   (redT_upd_\\<epsilon> s2 t x2' M2')\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            ta2 (x2'', M2'')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move2\n          (x2',\n           shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2'', M2'')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<tau>move2\n          (x2',\n           shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2'', M2'')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tbisim''"], ["proof (chain)\npicking this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2", "have \"\\<And>t'. t \\<noteq> t' \\<Longrightarrow> tbisim (wset s1 t' = None) t' (thr s1 t') (shr s1) (thr ?S2' t') (shr ?S2')\""], ["proof (prove)\nusing this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n\ngoal (1 subgoal):\n 1. \\<And>t'.\n       t \\<noteq> t' \\<Longrightarrow>\n       tbisim (wset s1 t' = None) t' (thr s1 t') (shr s1)\n        (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          t')\n        (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  t \\<noteq> ?t'13 \\<Longrightarrow>\n  tbisim (wset s1 ?t'13 = None) ?t'13 (thr s1 ?t'13) (shr s1)\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "ultimately"], ["proof (chain)\npicking this:\n  redT_upd s1 t ta1 x1' M1' s1'\n  redT_upd\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2 x2'' M2''\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  wset s1 =\n  wset\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  finite (dom (thr s1))\n  wset_thread_ok (wset s1) (thr s1)\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2'', M2'')\n  wset s1' t = None \\<or> x1' \\<approx>w x2''\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n  r2.silent_moves t\n   (x2,\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   (x2',\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n  r2.r_syntax t x2'\n   (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2'' M2''\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1\n                   (redT_upd_\\<epsilon> s2 t x2' M2')\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n  \\<not> \\<tau>move2\n          (x2',\n           shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2'', M2'')\n  t \\<noteq> ?t'13 \\<Longrightarrow>\n  tbisim (wset s1 ?t'13 = None) ?t'13 (thr s1 ?t'13) (shr s1)\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))", "have \"mbisim s1' ?s2''\""], ["proof (prove)\nusing this:\n  redT_upd s1 t ta1 x1' M1' s1'\n  redT_upd\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2 x2'' M2''\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  wset s1 =\n  wset\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  finite (dom (thr s1))\n  wset_thread_ok (wset s1) (thr s1)\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2', no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2'', M2'')\n  wset s1' t = None \\<or> x1' \\<approx>w x2''\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n  r2.silent_moves t\n   (x2,\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   (x2',\n    shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n  r2.r_syntax t x2'\n   (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2'' M2''\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1\n                   (redT_upd_\\<epsilon> s2 t x2' M2')\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n  \\<not> \\<tau>move2\n          (x2',\n           shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2'', M2'')\n  t \\<noteq> ?t'13 \\<Longrightarrow>\n  tbisim (wset s1 ?t'13 = None) ?t'13 (thr s1 ?t'13) (shr s1)\n   (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   (shr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (1 subgoal):\n 1. s1' \\<approx>m (redT_updLs\n                     (locks\n                       (activate_cond_actions2 s1\n                         (redT_upd_\\<epsilon> s2 t x2' M2')\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                    (redT_updTs\n                      (thr (activate_cond_actions2 s1\n                             (redT_upd_\\<epsilon> s2 t x2' M2')\n                             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                     (t \\<mapsto>\n                     (x2'',\n                      redT_updLns\n                       (locks\n                         (activate_cond_actions2 s1\n                           (redT_upd_\\<epsilon> s2 t x2' M2')\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                       t (snd (the (thr (activate_cond_actions2 s1\n    (redT_upd_\\<epsilon> s2 t x2' M2')\n    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                     t)))\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                     M2''),\n                    wset s1', interrupts s1')", "by(rule mbisim_redT_upd)"], ["proof (state)\nthis:\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1\n                       (redT_upd_\\<epsilon> s2 t x2' M2')\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1\n                           (redT_upd_\\<epsilon> s2 t x2' M2')\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2'',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1\n                         (redT_upd_\\<epsilon> s2 t x2' M2')\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1\n  (redT_upd_\\<epsilon> s2 t x2' M2') \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   M2''),\n                  wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "}"], ["proof (state)\nthis:\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1\n                       (redT_upd_\\<epsilon> s2 t x2' M2')\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1\n                           (redT_upd_\\<epsilon> s2 t x2' M2')\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2'',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1\n                         (redT_upd_\\<epsilon> s2 t x2' M2')\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1\n  (redT_upd_\\<epsilon> s2 t x2' M2') \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   M2''),\n                  wset s1', interrupts s1')\n\ngoal (2 subgoals):\n 1. ws1 t = None \\<Longrightarrow>\n    \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2'',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1\n                                 (redT_upd_\\<epsilon> s2 t x2' M2')\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            M2''),\n           wset s1', interrupts s1')\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1\n                       (redT_upd_\\<epsilon> s2 t x2' M2')\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1\n                           (redT_upd_\\<epsilon> s2 t x2' M2')\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2'',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1\n                         (redT_upd_\\<epsilon> s2 t x2' M2')\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1\n  (redT_upd_\\<epsilon> s2 t x2' M2') \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   M2''),\n                  wset s1', interrupts s1')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2'',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1\n                                 (redT_upd_\\<epsilon> s2 t x2' M2')\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            M2''),\n           wset s1', interrupts s1')\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1\n                       (redT_upd_\\<epsilon> s2 t x2' M2')\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1\n                           (redT_upd_\\<epsilon> s2 t x2' M2')\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2'',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1\n                         (redT_upd_\\<epsilon> s2 t x2' M2')\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1\n  (redT_upd_\\<epsilon> s2 t x2' M2') \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   M2''),\n                  wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "using tasim"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2'',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1\n                                 (redT_upd_\\<epsilon> s2 t x2' M2')\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            M2''),\n           wset s1', interrupts s1')\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1\n                       (redT_upd_\\<epsilon> s2 t x2' M2')\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1\n                           (redT_upd_\\<epsilon> s2 t x2' M2')\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2'',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1\n                         (redT_upd_\\<epsilon> s2 t x2' M2')\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1\n  (redT_upd_\\<epsilon> s2 t x2' M2') \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   M2''),\n                  wset s1', interrupts s1')\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "unfolding tl1 s1'"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2'',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1\n                          (redT_upd_\\<epsilon> s2 t x2' M2')\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     M2''),\n    wset s1', interrupts s1')\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 (redT_upd_\\<epsilon> s2 t x2' M2')\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1\n                    (redT_upd_\\<epsilon> s2 t x2' M2')\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2'',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1\n                  (redT_upd_\\<epsilon> s2 t x2' M2')\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1\n                                 (redT_upd_\\<epsilon> s2 t x2' M2')\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            M2''),\n           wset s1', interrupts s1')\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1\n                       (redT_upd_\\<epsilon> s2 t x2' M2')\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1\n                           (redT_upd_\\<epsilon> s2 t x2' M2')\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2'',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1\n                         (redT_upd_\\<epsilon> s2 t x2' M2')\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1\n  (redT_upd_\\<epsilon> s2 t x2' M2') \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   M2''),\n                  wset s1', interrupts s1')\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> (t, ta1) \\<sim>T tl2", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     \\<tau>mRed2 s2 s2' \\<and>\n     r2.redT s2' tl2 s2'' \\<and>\n     \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "case (Some w)"], ["proof (state)\nthis:\n  ws1 t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "with mbisim tst tst'"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ws1 t = \\<lfloor>w\\<rfloor>", "have \"x1 \\<approx>w x2\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ws1 t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. x1 \\<approx>w x2", "by(auto dest: mbisim_thrD1)"], ["proof (state)\nthis:\n  x1 \\<approx>w x2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from aoe Some"], ["proof (chain)\npicking this:\n  r1.actions_ok s1 t ta1\n  ws1 t = \\<lfloor>w\\<rfloor>", "have wakeup: \"Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or> WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  r1.actions_ok s1 t ta1\n  ws1 t = \\<lfloor>w\\<rfloor>\n\ngoal (1 subgoal):\n 1. Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n    WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>", "by(auto simp add: wset_actions_ok_def split: if_split_asm)"], ["proof (state)\nthis:\n  Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from simulation_Wakeup1[OF bisim \\<open>x1 \\<approx>w x2\\<close> red this]"], ["proof (chain)\npicking this:\n  \\<exists>ta2 x2' m2'.\n     r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n     t \\<turnstile> (x1', M1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2", "obtain ta2 x2' m2' where red2: \"t \\<turnstile> (x2, m2) -2-ta2\\<rightarrow> (x2', m2')\"\n        and bisim': \"t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\"\n        and tasim: \"ta1 \\<sim>m ta2\""], ["proof (prove)\nusing this:\n  \\<exists>ta2 x2' m2'.\n     r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n     t \\<turnstile> (x1', M1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. (\\<And>ta2 x2' m2'.\n        \\<lbrakk>r2.r_syntax t x2 m2 ta2 x2' m2';\n         t \\<turnstile> (x1', M1') \\<approx> (x2', m2');\n         ta1 \\<sim>m ta2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n  t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "let ?S2' = \"activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "let ?s2' = \"(redT_updLs (locks ?S2') t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>, ((redT_updTs (thr ?S2') \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>)(t \\<mapsto> (x2', redT_updLns (locks ?S2') t (snd (the (thr ?S2' t))) \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)), m2'), wset s1', interrupts s1')\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tasim"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2", "have [simp]: \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>l\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>l\\<^esub>\" \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>w\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>w\\<^esub>\" \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>c\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>c\\<^esub>\" \"\\<lbrace> ta1 \\<rbrace>\\<^bsub>i\\<^esub> = \\<lbrace> ta2 \\<rbrace>\\<^bsub>i\\<^esub>\"\n        and nta: \"list_all2 (nta_bisim bisim) \\<lbrace> ta1 \\<rbrace>\\<^bsub>t\\<^esub> \\<lbrace> ta2 \\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. ((\\<lbrace>ta1\\<rbrace>\\<^bsub>l\\<^esub> =\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub> &&&\n      \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> =\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>) &&&\n     \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> &&&\n     \\<lbrace>ta1\\<rbrace>\\<^bsub>i\\<^esub> =\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>i\\<^esub>) &&&\n    list_all2 (nta_bisim bisim) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "by(auto simp add: ta_bisim_def)"], ["proof (state)\nthis:\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>l\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>c\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  \\<lbrace>ta1\\<rbrace>\\<^bsub>i\\<^esub> =\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>i\\<^esub>\n  list_all2 (nta_bisim bisim) \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub>\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have tbisim: \"\\<And>t. tbisim (ws1 t = None) t (ts1 t) m1 (ts2 t) m2\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. \\<And>t. tbisim (ws1 t = None) t (ts1 t) m1 (ts2 t) m2", "by(simp add: mbisim_def)"], ["proof (state)\nthis:\n  tbisim (ws1 ?t13 = None) ?t13 (ts1 ?t13) m1 (ts2 ?t13) m2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "hence tbisim': \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws1 t' = None) t' (ts1 t') m1 (thr s2 t') m2\""], ["proof (prove)\nusing this:\n  tbisim (ws1 ?t13 = None) ?t13 (ts1 ?t13) m1 (ts2 ?t13) m2\n\ngoal (1 subgoal):\n 1. \\<And>t'.\n       t' \\<noteq> t \\<Longrightarrow>\n       tbisim (ws1 t' = None) t' (ts1 t') m1 (thr s2 t') m2", "by(auto)"], ["proof (state)\nthis:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1 (thr s2 ?t'13) m2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from aoe"], ["proof (chain)\npicking this:\n  r1.actions_ok s1 t ta1", "have cao1: \"r1.cond_action_oks (ls1, (ts1, m1), ws1, is1) t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\""], ["proof (prove)\nusing this:\n  r1.actions_ok s1 t ta1\n\ngoal (1 subgoal):\n 1. r1.cond_action_oks (ls1, (ts1, m1), ws1, is1) t\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>", "by auto"], ["proof (state)\nthis:\n  r1.cond_action_oks (ls1, (ts1, m1), ws1, is1) t\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst'"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>", "have \"thr s2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. thr s2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>", "by(auto simp add: redT_updLns_def o_def finfun_Diag_const2)"], ["proof (state)\nthis:\n  thr s2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from cond_actions_oks_bisim_ex_\\<tau>2_inv[OF tbisim', OF _ tst this cao1]"], ["proof (chain)\npicking this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed2 (ls1, (thr s2, m2), ws1, is1)\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr s2, m2), ws1, is1) \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t;\n   ?t' \\<noteq> t\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws1 ?t' = None) ?t' (ts1 ?t') m1\n                     (thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n                            (ls1, (thr s2, m2), ws1, is1)\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       ?t')\n                     m2\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r2.cond_action_oks\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr s2, m2), ws1, is1) \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n        (ls1, (thr s2, m2), ws1, is1)\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>", "have red21': \"\\<tau>mRed2 s2 ?S2'\" and tbisim'': \"\\<And>t'. t' \\<noteq> t \\<Longrightarrow> tbisim (ws1 t' = None) t' (ts1 t') m1 (thr ?S2' t') m2\"\n        and cao2: \"r2.cond_action_oks ?S2' t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\" and tst'': \"thr ?S2' t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  \\<tau>mRed2 (ls1, (thr s2, m2), ws1, is1)\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr s2, m2), ws1, is1) \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  \\<lbrakk>\\<And>t'. t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t;\n   ?t' \\<noteq> t\\<rbrakk>\n  \\<Longrightarrow> tbisim (ws1 ?t' = None) ?t' (ts1 ?t') m1\n                     (thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n                            (ls1, (thr s2, m2), ws1, is1)\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       ?t')\n                     m2\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  r2.cond_action_oks\n   (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n     (ls1, (thr s2, m2), ws1, is1) \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  (\\<And>t'.\n      t' \\<noteq> t \\<Longrightarrow> t' \\<noteq> t) \\<Longrightarrow>\n  thr (activate_cond_actions2 (ls1, (ts1, m1), ws1, is1)\n        (ls1, (thr s2, m2), ws1, is1)\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<tau>mRed2 s2\n      (activate_cond_actions2 s1 s2\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) &&&\n     (\\<And>t'.\n         t' \\<noteq> t \\<Longrightarrow>\n         tbisim (ws1 t' = None) t' (ts1 t') m1\n          (thr (activate_cond_actions2 s1 s2\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n            t')\n          m2)) &&&\n    r2.cond_action_oks\n     (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> &&&\n    thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     t =\n    \\<lfloor>(x2, no_wait_locks)\\<rfloor>", "by(auto simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n  r2.cond_action_oks\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note red21'"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tbisim'' tst'' tst"], ["proof (chain)\npicking this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "have \"\\<forall>t'. ts1 t' = None \\<longleftrightarrow> thr ?S2' t' = None\""], ["proof (prove)\nusing this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<forall>t'.\n       (ts1 t' = None) =\n       (thr (activate_cond_actions2 s1 s2\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n         t' =\n        None)", "by(force simp add: tbisim_def)"], ["proof (state)\nthis:\n  \\<forall>t'.\n     (ts1 t' = None) =\n     (thr (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n       t' =\n      None)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from aoe thread_oks_bisim_inv[OF this nta]"], ["proof (chain)\npicking this:\n  r1.actions_ok s1 t ta1\n  thread_oks ts1 \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> =\n  thread_oks\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "have \"thread_oks (thr ?S2') \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\""], ["proof (prove)\nusing this:\n  r1.actions_ok s1 t ta1\n  thread_oks ts1 \\<lbrace>ta1\\<rbrace>\\<^bsub>t\\<^esub> =\n  thread_oks\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. thread_oks\n     (thr (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "by simp"], ["proof (state)\nthis:\n  thread_oks\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "with cao2 aoe"], ["proof (chain)\npicking this:\n  r2.cond_action_oks\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  r1.actions_ok s1 t ta1\n  thread_oks\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>", "have aoe': \"r2.actions_ok ?S2' t ta2\""], ["proof (prove)\nusing this:\n  r2.cond_action_oks\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>\n  r1.actions_ok s1 t ta1\n  thread_oks\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n\ngoal (1 subgoal):\n 1. r2.actions_ok\n     (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n     ta2", "by auto"], ["proof (state)\nthis:\n  r2.actions_ok\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "with red2 tst'' s1' tasim"], ["proof (chain)\npicking this:\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  redT_upd s1 t ta1 x1' M1' s1'\n  ta1 \\<sim>m ta2\n  r2.actions_ok\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2", "have \"?S2' -2-t\\<triangleright>ta2\\<rightarrow> ?s2'\""], ["proof (prove)\nusing this:\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  redT_upd s1 t ta1 x1' M1' s1'\n  ta1 \\<sim>m ta2\n  r2.actions_ok\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2\n\ngoal (1 subgoal):\n 1. activate_cond_actions2 s1 s2\n     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1 s2\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       m2'),\n      wset s1', interrupts s1')", "by -(rule r2.redT_normal, auto simp add: ta_bisim_def)"], ["proof (state)\nthis:\n  activate_cond_actions2 s1 s2\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  activate_cond_actions2 s1 s2\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from wakeup tasim"], ["proof (chain)\npicking this:\n  Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  ta1 \\<sim>m ta2", "have \\<tau>2: \"\\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')\""], ["proof (prove)\nusing this:\n  Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n  WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')", "by(auto dest: r2.silent_tl)"], ["proof (state)\nthis:\n  \\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "hence \"\\<not> m\\<tau>move2 ?S2' (t, ta2) ?s2'\""], ["proof (prove)\nusing this:\n  \\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')\n\ngoal (1 subgoal):\n 1. \\<not> m\\<tau>move2\n            (activate_cond_actions2 s1 s2\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n            (t, ta2)\n            (redT_updLs\n              (locks\n                (activate_cond_actions2 s1 s2\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n             (redT_updTs\n               (thr (activate_cond_actions2 s1 s2\n                      \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n              (t \\<mapsto>\n              (x2',\n               redT_updLns\n                (locks\n                  (activate_cond_actions2 s1 s2\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                t (snd (the (thr (activate_cond_actions2 s1 s2\n                                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                              t)))\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n              m2'),\n             wset s1', interrupts s1')", "proof(rule contrapos_nn)"], ["proof (state)\ngoal (1 subgoal):\n 1. m\\<tau>move2\n     (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     (t, ta2)\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1 s2\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       m2'),\n      wset s1', interrupts s1') \\<Longrightarrow>\n    \\<tau>move2 (x2, m2) ta2 (x2', m2')", "assume m\\<tau>: \"m\\<tau>move2 ?S2' (t, ta2) ?s2'\""], ["proof (state)\nthis:\n  m\\<tau>move2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   (t, ta2)\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. m\\<tau>move2\n     (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     (t, ta2)\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1 s2\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       m2'),\n      wset s1', interrupts s1') \\<Longrightarrow>\n    \\<tau>move2 (x2, m2) ta2 (x2', m2')", "thus \"\\<tau>move2 (x2, m2) ta2 (x2', m2')\""], ["proof (prove)\nusing this:\n  m\\<tau>move2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   (t, ta2)\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<tau>move2 (x2, m2) ta2 (x2', m2')", "using tst'' tst'"], ["proof (prove)\nusing this:\n  m\\<tau>move2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   (t, ta2)\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>move2 (x2, m2) ta2 (x2', m2')", "by cases auto"], ["proof (state)\nthis:\n  \\<tau>move2 (x2, m2) ta2 (x2', m2')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 s2\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1 s2\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1 s2\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1 s2\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            m2'),\n           wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 s2\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1 s2\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1 s2\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1 s2\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            m2'),\n           wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "{"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 s2\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1 s2\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1 s2\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1 s2\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            m2'),\n           wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note s1'"], ["proof (state)\nthis:\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  redT_upd s1 t ta1 x1' M1' s1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"redT_upd ?S2' t ta2 x2' m2' ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. redT_upd\n     (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n     ta2 x2' m2'\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1 s2\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       m2'),\n      wset s1', interrupts s1')", "using s1' tasim"], ["proof (prove)\nusing this:\n  redT_upd s1 t ta1 x1' M1' s1'\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. redT_upd\n     (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n     ta2 x2' m2'\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1 s2\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       m2'),\n      wset s1', interrupts s1')", "by(auto simp add: ta_bisim_def)"], ["proof (state)\nthis:\n  redT_upd\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2 x2' m2'\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  redT_upd\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2 x2' m2'\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"wset s1 = wset ?S2'\" \"locks s1 = locks ?S2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset s1 =\n    wset\n     (activate_cond_actions2 s1 s2\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) &&&\n    locks s1 =\n    locks\n     (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)", "by simp_all"], ["proof (state)\nthis:\n  wset s1 =\n  wset (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset s1 =\n  wset (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"wset s1' = wset ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset s1' =\n    wset\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1 s2\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       m2'),\n      wset s1', interrupts s1')", "by simp"], ["proof (state)\nthis:\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"interrupts s1' = interrupts ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interrupts s1' =\n    interrupts\n     (redT_updLs\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n      (redT_updTs\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n        \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n       (t \\<mapsto>\n       (x2',\n        redT_updLns\n         (locks\n           (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n         t (snd (the (thr (activate_cond_actions2 s1 s2\n                            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                       t)))\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n       m2'),\n      wset s1', interrupts s1')", "by simp"], ["proof (state)\nthis:\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"finite (dom (thr s1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom (thr s1))", "by simp"], ["proof (state)\nthis:\n  finite (dom (thr s1))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  finite (dom (thr s1))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have \"wset_thread_ok (wset s1) (thr s1)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1) (thr s1)", "by(rule mbisim_wset_thread_ok1)"], ["proof (state)\nthis:\n  wset_thread_ok (wset s1) (thr s1)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset_thread_ok (wset s1) (thr s1)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst"], ["proof (chain)\npicking this:\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "have \"thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  ts1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst''"], ["proof (chain)\npicking this:\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>", "have \"thr ?S2' t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\""], ["proof (prove)\nusing this:\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     t =\n    \\<lfloor>(x2, no_wait_locks)\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note aoe aoe' tasim bisim'"], ["proof (state)\nthis:\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"wset s1' t = None \\<or> x1' \\<approx>w x2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wset s1' t = None \\<or> x1' \\<approx>w x2'", "proof(cases \"wset s1' t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. wset s1' t = None \\<Longrightarrow>\n    wset s1' t = None \\<or> x1' \\<approx>w x2'\n 2. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "case None"], ["proof (state)\nthis:\n  wset s1' t = None\n\ngoal (2 subgoals):\n 1. wset s1' t = None \\<Longrightarrow>\n    wset s1' t = None \\<or> x1' \\<approx>w x2'\n 2. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  wset s1' t = None\n\ngoal (1 subgoal):\n 1. wset s1' t = None \\<or> x1' \\<approx>w x2'", ".."], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "case (Some w')"], ["proof (state)\nthis:\n  wset s1' t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "with redT_updWs_WokenUp_SuspendD[OF _ wakeup, of t \"wset s1\" \"wset s1'\" w'] s1'"], ["proof (chain)\npicking this:\n  \\<lbrakk>redT_updWs t (wset s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n            (wset s1');\n   wset s1' t = \\<lfloor>w'\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       Suspend w\n                       \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  redT_upd s1 t ta1 x1' M1' s1'\n  wset s1' t = \\<lfloor>w'\\<rfloor>", "obtain w' where Suspend1: \"Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>redT_updWs t (wset s1) \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n            (wset s1');\n   wset s1' t = \\<lfloor>w'\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       Suspend w\n                       \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  redT_upd s1 t ta1 x1' M1' s1'\n  wset s1' t = \\<lfloor>w'\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>w'.\n        Suspend w'\n        \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "with tasim"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>", "have Suspend2: \"Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>", "by(simp add: ta_bisim_def)"], ["proof (state)\nthis:\n  Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "with bisim rtranclp.rtrancl_refl red \\<tau> rtranclp.rtrancl_refl red2 \\<tau>2 bisim' tasim Suspend1"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r1.r_syntax t x1 m1 ta1 x1' M1'\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n  \\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>", "have \"x1' \\<approx>w x2'\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r1.r_syntax t x1 m1 ta1 x1' M1'\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n  \\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')\n  t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\n  ta1 \\<sim>m ta2\n  Suspend w' \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\n  Suspend w' \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\n\ngoal (1 subgoal):\n 1. x1' \\<approx>w x2'", "by(rule bisim_waitI)"], ["proof (state)\nthis:\n  x1' \\<approx>w x2'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       wset s1' t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       wset s1' t = None \\<or> x1' \\<approx>w x2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  x1' \\<approx>w x2'\n\ngoal (1 subgoal):\n 1. wset s1' t = None \\<or> x1' \\<approx>w x2'", ".."], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  wset s1' t = None \\<or> x1' \\<approx>w x2'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note rtranclp.rtrancl_refl"], ["proof (state)\nthis:\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from red"], ["proof (chain)\npicking this:\n  r1.r_syntax t x1 m1 ta1 x1' M1'", "have \"t \\<turnstile> (x1, shr s1) -1-ta1\\<rightarrow> (x1', M1')\""], ["proof (prove)\nusing this:\n  r1.r_syntax t x1 m1 ta1 x1' M1'\n\ngoal (1 subgoal):\n 1. r1.r_syntax t x1 (shr s1) ta1 x1' M1'", "by simp"], ["proof (state)\nthis:\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "note rtranclp.rtrancl_refl"], ["proof (state)\nthis:\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from red2"], ["proof (chain)\npicking this:\n  r2.r_syntax t x2 m2 ta2 x2' m2'", "have \"t \\<turnstile> (x2, shr ?S2') -2-ta2\\<rightarrow> (x2', m2')\""], ["proof (prove)\nusing this:\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n\ngoal (1 subgoal):\n 1. r2.r_syntax t x2\n     (shr (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     ta2 x2' m2'", "by simp"], ["proof (state)\nthis:\n  r2.r_syntax t x2\n   (shr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2' m2'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  r2.r_syntax t x2\n   (shr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2' m2'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from bisim"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)", "have \"t \\<turnstile> (x1, shr s1) \\<approx> (x2, shr ?S2')\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. t \\<turnstile> (x1, shr s1)\n    \\<approx> (x2,\n               shr (activate_cond_actions2 s1 s2\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1 s2\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1 s2\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from \\<tau>"], ["proof (chain)\npicking this:\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')", "have \"\\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\""], ["proof (prove)\nusing this:\n  \\<not> \\<tau>move1 (x1, m1) ta1 (x1', M1')\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from \\<tau>2"], ["proof (chain)\npicking this:\n  \\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')", "have \"\\<not> \\<tau>move2 (x2, shr ?S2') ta2 (x2', m2')\""], ["proof (prove)\nusing this:\n  \\<not> \\<tau>move2 (x2, m2) ta2 (x2', m2')\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move2\n            (x2,\n             shr (activate_cond_actions2 s1 s2\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            ta2 (x2', m2')", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<tau>move2\n          (x2,\n           shr (activate_cond_actions2 s1 s2\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2', m2')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<tau>move2\n          (x2,\n           shr (activate_cond_actions2 s1 s2\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2', m2')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tbisim''"], ["proof (chain)\npicking this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2", "have \"\\<And>t'. t \\<noteq> t' \\<Longrightarrow> tbisim (wset s1 t' = None) t' (thr s1 t') (shr s1) (thr ?S2' t') (shr ?S2')\""], ["proof (prove)\nusing this:\n  ?t'13 \\<noteq> t \\<Longrightarrow>\n  tbisim (ws1 ?t'13 = None) ?t'13 (ts1 ?t'13) m1\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   m2\n\ngoal (1 subgoal):\n 1. \\<And>t'.\n       t \\<noteq> t' \\<Longrightarrow>\n       tbisim (wset s1 t' = None) t' (thr s1 t') (shr s1)\n        (thr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          t')\n        (shr (activate_cond_actions2 s1 s2\n               \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))", "by simp"], ["proof (state)\nthis:\n  t \\<noteq> ?t'13 \\<Longrightarrow>\n  tbisim (wset s1 ?t'13 = None) ?t'13 (thr s1 ?t'13) (shr s1)\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   (shr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "ultimately"], ["proof (chain)\npicking this:\n  redT_upd s1 t ta1 x1' M1' s1'\n  redT_upd\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2 x2' m2'\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  wset s1 =\n  wset (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  finite (dom (thr s1))\n  wset_thread_ok (wset s1) (thr s1)\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\n  wset s1' t = None \\<or> x1' \\<approx>w x2'\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r2.r_syntax t x2\n   (shr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2' m2'\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1 s2\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n  \\<not> \\<tau>move2\n          (x2,\n           shr (activate_cond_actions2 s1 s2\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2', m2')\n  t \\<noteq> ?t'13 \\<Longrightarrow>\n  tbisim (wset s1 ?t'13 = None) ?t'13 (thr s1 ?t'13) (shr s1)\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   (shr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))", "have \"s1' \\<approx>m ?s2'\""], ["proof (prove)\nusing this:\n  redT_upd s1 t ta1 x1' M1' s1'\n  redT_upd\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2 x2' m2'\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  wset s1 =\n  wset (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  locks s1 =\n  locks\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  wset s1' =\n  wset\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  interrupts s1' =\n  interrupts\n   (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  finite (dom (thr s1))\n  wset_thread_ok (wset s1) (thr s1)\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  thr (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n   t =\n  \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t ta1\n  r2.actions_ok\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>) t\n   ta2\n  ta1 \\<sim>m ta2\n  t \\<turnstile> (x1', M1') \\<approx> (x2', m2')\n  wset s1' t = None \\<or> x1' \\<approx>w x2'\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r1.r_syntax t x1 (shr s1) ta1 x1' M1'\n  ?r\\<^sup>*\\<^sup>* ?a ?a\n  r2.r_syntax t x2\n   (shr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n   ta2 x2' m2'\n  t \\<turnstile> (x1, shr s1)\n  \\<approx> (x2,\n             shr (activate_cond_actions2 s1 s2\n                   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n  \\<not> \\<tau>move1 (x1, shr s1) ta1 (x1', M1')\n  \\<not> \\<tau>move2\n          (x2,\n           shr (activate_cond_actions2 s1 s2\n                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n          ta2 (x2', m2')\n  t \\<noteq> ?t'13 \\<Longrightarrow>\n  tbisim (wset s1 ?t'13 = None) ?t'13 (thr s1 ?t'13) (shr s1)\n   (thr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n     ?t'13)\n   (shr (activate_cond_actions2 s1 s2\n          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n\ngoal (1 subgoal):\n 1. s1' \\<approx>m (redT_updLs\n                     (locks\n                       (activate_cond_actions2 s1 s2\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                    (redT_updTs\n                      (thr (activate_cond_actions2 s1 s2\n                             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                     (t \\<mapsto>\n                     (x2',\n                      redT_updLns\n                       (locks\n                         (activate_cond_actions2 s1 s2\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                       t (snd (the (thr (activate_cond_actions2 s1 s2\n    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                     t)))\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                     m2'),\n                    wset s1', interrupts s1')", "by(rule mbisim_redT_upd)"], ["proof (state)\nthis:\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1 s2\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1 s2\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1 s2\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1 s2\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   m2'),\n                  wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "}"], ["proof (state)\nthis:\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1 s2\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1 s2\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1 s2\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1 s2\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   m2'),\n                  wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1 s2\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1 s2\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1 s2\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1 s2\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   m2'),\n                  wset s1', interrupts s1')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tasim"], ["proof (chain)\npicking this:\n  ta1 \\<sim>m ta2", "have \"tl1 \\<sim>T (t, ta2)\""], ["proof (prove)\nusing this:\n  ta1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. tl1 \\<sim>T (t, ta2)", "by simp"], ["proof (state)\nthis:\n  tl1 \\<sim>T (t, ta2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       ws1 t = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>s2' s2'' tl2.\n          \\<tau>mRed2 s2 s2' \\<and>\n          r2.redT s2' tl2 s2'' \\<and>\n          \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n          s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  activate_cond_actions2 s1 s2\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 s2\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1 s2\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1 s2\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1 s2\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            m2'),\n           wset s1', interrupts s1')\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1 s2\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1 s2\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1 s2\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1 s2\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   m2'),\n                  wset s1', interrupts s1')\n  tl1 \\<sim>T (t, ta2)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  activate_cond_actions2 s1 s2\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 s2\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1 s2\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1 s2\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1 s2\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            m2'),\n           wset s1', interrupts s1')\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1 s2\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1 s2\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1 s2\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1 s2\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   m2'),\n                  wset s1', interrupts s1')\n  tl1 \\<sim>T (t, ta2)\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "unfolding s1'"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2\n   (activate_cond_actions2 s1 s2 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n  activate_cond_actions2 s1 s2\n   \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub> -2-t\\<triangleright>ta2\\<rightarrow> (redT_updLs\n     (locks\n       (activate_cond_actions2 s1 s2\n         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n     t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n    (redT_updTs\n      (thr (activate_cond_actions2 s1 s2\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n      \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n     (t \\<mapsto>\n     (x2',\n      redT_updLns\n       (locks\n         (activate_cond_actions2 s1 s2\n           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n       t (snd (the (thr (activate_cond_actions2 s1 s2\n                          \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                     t)))\n       \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n     m2'),\n    wset s1', interrupts s1')\n  \\<not> m\\<tau>move2\n          (activate_cond_actions2 s1 s2\n            \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n          (t, ta2)\n          (redT_updLs\n            (locks\n              (activate_cond_actions2 s1 s2\n                \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n            t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n           (redT_updTs\n             (thr (activate_cond_actions2 s1 s2\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n             \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n            (t \\<mapsto>\n            (x2',\n             redT_updLns\n              (locks\n                (activate_cond_actions2 s1 s2\n                  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n              t (snd (the (thr (activate_cond_actions2 s1 s2\n                                 \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                            t)))\n              \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n            m2'),\n           wset s1', interrupts s1')\n  s1' \\<approx>m (redT_updLs\n                   (locks\n                     (activate_cond_actions2 s1 s2\n                       \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                   t \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>,\n                  (redT_updTs\n                    (thr (activate_cond_actions2 s1 s2\n                           \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                    \\<lbrace>ta2\\<rbrace>\\<^bsub>t\\<^esub>\n                   (t \\<mapsto>\n                   (x2',\n                    redT_updLns\n                     (locks\n                       (activate_cond_actions2 s1 s2\n                         \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>))\n                     t (snd (the (thr (activate_cond_actions2 s1 s2\n  \\<lbrace>ta2\\<rbrace>\\<^bsub>c\\<^esub>)\n                                   t)))\n                     \\<lbrace>ta2\\<rbrace>\\<^bsub>l\\<^esub>)),\n                   m2'),\n                  wset s1', interrupts s1')\n  tl1 \\<sim>T (t, ta2)\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "by blast"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     \\<tau>mRed2 s2 s2' \\<and>\n     r2.redT s2' tl2 s2'' \\<and>\n     \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     \\<tau>mRed2 s2 s2' \\<and>\n     r2.redT s2' tl2 s2'' \\<and>\n     \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "case (redT_acquire x1 n ln)"], ["proof (state)\nthis:\n  ta1 = (K$ [], [], [], [], [], convert_RA ln)\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln\n  0 < ln $ n\n  s1' =\n  (acquire_all (locks s1) t ln,\n   (thr s1(t \\<mapsto> (x1, no_wait_locks)), shr s1), wset s1,\n   interrupts s1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "hence [simp]: \"ta1 = (K$ [], [], [], [], [], convert_RA ln)\"\n      and tst: \"thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\" and wst: \"\\<not> waiting (wset s1 t)\"\n      and maa: \"may_acquire_all (locks s1) t ln\" and ln: \"0 < ln $ n\"\n      and s1': \"s1' = (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1, is1)\""], ["proof (prove)\nusing this:\n  ta1 = (K$ [], [], [], [], [], convert_RA ln)\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln\n  0 < ln $ n\n  s1' =\n  (acquire_all (locks s1) t ln,\n   (thr s1(t \\<mapsto> (x1, no_wait_locks)), shr s1), wset s1,\n   interrupts s1)\n\ngoal (1 subgoal):\n 1. (ta1 = (K$ [], [], [], [], [], convert_RA ln) &&&\n     thr s1 t = \\<lfloor>(x1, ln)\\<rfloor> &&&\n     \\<not> waiting (wset s1 t)) &&&\n    may_acquire_all (locks s1) t ln &&&\n    0 < ln $ n &&&\n    s1' =\n    (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n     is1)", "by auto"], ["proof (state)\nthis:\n  ta1 = (K$ [], [], [], [], [], convert_RA ln)\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln\n  0 < ln $ n\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst mbisim"], ["proof (chain)\npicking this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  s1 \\<approx>m s2", "obtain x2 where tst': \"ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\" \n      and bisim: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        \\<lbrakk>ts2 t = \\<lfloor>(x2, ln)\\<rfloor>;\n         t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD1)"], ["proof (state)\nthis:\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "let ?s2' = \"(acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst' wst maa ln"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln\n  0 < ln $ n", "have \"s2 -2-t\\<triangleright>(K$ [], [], [], [], [], convert_RA ln)\\<rightarrow> ?s2'\""], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln\n  0 < ln $ n\n\ngoal (1 subgoal):\n 1. s2 -2-t\\<triangleright>(K$ [], [], [], [], [],\n                            convert_RA\n                             ln)\\<rightarrow> (acquire_all ls1 t ln,\n         (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)", "by-(rule r2.redT.redT_acquire, auto)"], ["proof (state)\nthis:\n  s2 -2-t\\<triangleright>(K$ [], [], [], [], [],\n                          convert_RA\n                           ln)\\<rightarrow> (acquire_all ls1 t ln,\n       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  s2 -2-t\\<triangleright>(K$ [], [], [], [], [],\n                          convert_RA\n                           ln)\\<rightarrow> (acquire_all ls1 t ln,\n       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "from tst' ln"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  0 < ln $ n", "have \"\\<not> m\\<tau>move2 s2 (t, (K$ [], [], [], [], [], convert_RA ln)) ?s2'\""], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  0 < ln $ n\n\ngoal (1 subgoal):\n 1. \\<not> m\\<tau>move2 s2 (t, K$ [], [], [], [], [], convert_RA ln)\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)", "by(auto simp add: acquire_all_def fun_eq_iff elim!: r2.m\\<tau>move.cases)"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2 s2 (t, K$ [], [], [], [], [], convert_RA ln)\n          (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n           ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  \\<not> m\\<tau>move2 s2 (t, K$ [], [], [], [], [], convert_RA ln)\n          (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n           ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"mbisim s1' ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1' \\<approx>m (acquire_all ls1 t ln,\n                    (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)", "proof(rule mbisimI)"], ["proof (state)\ngoal (7 subgoals):\n 1. finite (dom (thr s1'))\n 2. locks s1' =\n    locks\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 3. wset s1' =\n    wset\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 4. interrupts s1' =\n    interrupts\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 5. wset_thread_ok (wset s1') (thr s1')\n 6. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 7. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "from s1'"], ["proof (chain)\npicking this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)", "show \"locks s1' = locks ?s2'\""], ["proof (prove)\nusing this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n\ngoal (1 subgoal):\n 1. locks s1' =\n    locks\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)", "by auto"], ["proof (state)\nthis:\n  locks s1' =\n  locks\n   (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n    is1)\n\ngoal (6 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset s1' =\n    wset\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 3. interrupts s1' =\n    interrupts\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 4. wset_thread_ok (wset s1') (thr s1')\n 5. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 6. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset s1' =\n    wset\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 3. interrupts s1' =\n    interrupts\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 4. wset_thread_ok (wset s1') (thr s1')\n 5. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 6. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "from s1'"], ["proof (chain)\npicking this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)", "show \"wset s1' = wset ?s2'\""], ["proof (prove)\nusing this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n\ngoal (1 subgoal):\n 1. wset s1' =\n    wset\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)", "by auto"], ["proof (state)\nthis:\n  wset s1' =\n  wset\n   (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n    is1)\n\ngoal (5 subgoals):\n 1. finite (dom (thr s1'))\n 2. interrupts s1' =\n    interrupts\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 3. wset_thread_ok (wset s1') (thr s1')\n 4. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 5. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. finite (dom (thr s1'))\n 2. interrupts s1' =\n    interrupts\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)\n 3. wset_thread_ok (wset s1') (thr s1')\n 4. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 5. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "from s1'"], ["proof (chain)\npicking this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)", "show \"interrupts s1' = interrupts ?s2'\""], ["proof (prove)\nusing this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n\ngoal (1 subgoal):\n 1. interrupts s1' =\n    interrupts\n     (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n      is1)", "by auto"], ["proof (state)\nthis:\n  interrupts s1' =\n  interrupts\n   (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n    is1)\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 4. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 4. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "fix t'"], ["proof (state)\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 4. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "assume \"thr s1' t' = None\""], ["proof (state)\nthis:\n  thr s1' t' = None\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 4. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "with s1'"], ["proof (chain)\npicking this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  thr s1' t' = None", "have \"thr s1 t' = None\""], ["proof (prove)\nusing this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  thr s1' t' = None\n\ngoal (1 subgoal):\n 1. thr s1 t' = None", "by(auto split: if_split_asm)"], ["proof (state)\nthis:\n  thr s1 t' = None\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 4. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "with mbisim_thrNone_eq[OF mbisim]"], ["proof (chain)\npicking this:\n  (thr s1 ?t = None) = (thr s2 ?t = None)\n  thr s1 t' = None", "have \"ts2 t' = None\""], ["proof (prove)\nusing this:\n  (thr s1 ?t = None) = (thr s2 ?t = None)\n  thr s1 t' = None\n\ngoal (1 subgoal):\n 1. ts2 t' = None", "by simp"], ["proof (state)\nthis:\n  ts2 t' = None\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        ta =\n       None\n 4. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "with tst'"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ts2 t' = None", "show \"thr ?s2' t' = None\""], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  ts2 t' = None\n\ngoal (1 subgoal):\n 1. thr (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n         ws1, is1)\n     t' =\n    None", "by auto"], ["proof (state)\nthis:\n  thr (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n       ws1, is1)\n   t' =\n  None\n\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "fix t' X1 LN"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "assume ts't: \"thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\""], ["proof (state)\nthis:\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 lna.\n       thr s1' ta = \\<lfloor>(x1, lna)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2a.\n          thr (acquire_all ls1 t ln,\n               (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n           ta =\n          \\<lfloor>(x2a, lna)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2a,\n                     shr (acquire_all ls1 t ln,\n                          (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                          is1)) \\<and>\n          (wset\n            (acquire_all ls1 t ln,\n             (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n            ta =\n           None \\<or>\n           x1 \\<approx>w x2a)", "show \"\\<exists>x2. thr ?s2' t' = \\<lfloor>(x2, LN)\\<rfloor> \\<and> t' \\<turnstile> (X1, shr s1') \\<approx> (x2, shr ?s2') \\<and> (wset ?s2' t' = None \\<or> X1 \\<approx>w x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "proof(cases \"t' = t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t' = t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)\n 2. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "case True"], ["proof (state)\nthis:\n  t' = t\n\ngoal (2 subgoals):\n 1. t' = t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)\n 2. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "with s1' tst ts't"], ["proof (chain)\npicking this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  t' = t", "have [simp]: \"X1 = x1\" \"LN = no_wait_locks\""], ["proof (prove)\nusing this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  t' = t\n\ngoal (1 subgoal):\n 1. X1 = x1 &&& LN = no_wait_locks", "by simp_all"], ["proof (state)\nthis:\n  X1 = x1\n  LN = no_wait_locks\n\ngoal (2 subgoals):\n 1. t' = t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)\n 2. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "with mbisim_thrD1[OF mbisim tst] bisim tst tst' True s1' wst"], ["proof (chain)\npicking this:\n  \\<exists>x'.\n     thr s2 t = \\<lfloor>(x', ln)\\<rfloor> \\<and>\n     t \\<turnstile> (x1, shr s1) \\<approx> (x', shr s2) \\<and>\n     (wset s1 t = None \\<or> x1 \\<approx>w x')\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  t' = t\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  \\<not> waiting (wset s1 t)\n  X1 = x1\n  LN = no_wait_locks", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x'.\n     thr s2 t = \\<lfloor>(x', ln)\\<rfloor> \\<and>\n     t \\<turnstile> (x1, shr s1) \\<approx> (x', shr s2) \\<and>\n     (wset s1 t = None \\<or> x1 \\<approx>w x')\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  thr s1 t = \\<lfloor>(x1, ln)\\<rfloor>\n  ts2 t = \\<lfloor>(x2, ln)\\<rfloor>\n  t' = t\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  \\<not> waiting (wset s1 t)\n  X1 = x1\n  LN = no_wait_locks\n\ngoal (1 subgoal):\n 1. \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>x2a.\n     thr (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n      t' =\n     \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n     t' \\<turnstile> (X1, shr s1')\n     \\<approx> (x2a,\n                shr (acquire_all ls1 t ln,\n                     (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                     is1)) \\<and>\n     (wset\n       (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n        ws1, is1)\n       t' =\n      None \\<or>\n      X1 \\<approx>w x2a)\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "case False"], ["proof (state)\nthis:\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "with ts't s1'"], ["proof (chain)\npicking this:\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  t' \\<noteq> t", "have \"ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>\""], ["proof (prove)\nusing this:\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "with mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>", "obtain X2 where \"ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\" \"t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\" \"wset ?s2' t' = None \\<or> X1 \\<approx>w X2\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>X2.\n        \\<lbrakk>ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>;\n         t' \\<turnstile> (X1, m1) \\<approx> (X2, m2);\n         wset\n          (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n           ws1, is1)\n          t' =\n         None \\<or>\n         X1 \\<approx>w X2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD1)"], ["proof (state)\nthis:\n  ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\n  t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\n  wset\n   (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n    is1)\n   t' =\n  None \\<or>\n  X1 \\<approx>w X2\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "with False s1'"], ["proof (chain)\npicking this:\n  t' \\<noteq> t\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\n  t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\n  wset\n   (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n    is1)\n   t' =\n  None \\<or>\n  X1 \\<approx>w X2", "show ?thesis"], ["proof (prove)\nusing this:\n  t' \\<noteq> t\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n  ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\n  t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\n  wset\n   (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n    is1)\n   t' =\n  None \\<or>\n  X1 \\<approx>w X2\n\ngoal (1 subgoal):\n 1. \\<exists>x2a.\n       thr (acquire_all ls1 t ln,\n            (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n        t' =\n       \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2a,\n                  shr (acquire_all ls1 t ln,\n                       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                       is1)) \\<and>\n       (wset\n         (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n         t' =\n        None \\<or>\n        X1 \\<approx>w x2a)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x2a.\n     thr (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n      t' =\n     \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n     t' \\<turnstile> (X1, shr s1')\n     \\<approx> (x2a,\n                shr (acquire_all ls1 t ln,\n                     (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                     is1)) \\<and>\n     (wset\n       (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n        ws1, is1)\n       t' =\n      None \\<or>\n      X1 \\<approx>w x2a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x2a.\n     thr (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n          ws1, is1)\n      t' =\n     \\<lfloor>(x2a, LN)\\<rfloor> \\<and>\n     t' \\<turnstile> (X1, shr s1')\n     \\<approx> (x2a,\n                shr (acquire_all ls1 t ln,\n                     (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1,\n                     is1)) \\<and>\n     (wset\n       (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n        ws1, is1)\n       t' =\n      None \\<or>\n      X1 \\<approx>w x2a)\n\ngoal (2 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')", "from s1'"], ["proof (chain)\npicking this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)", "show \"finite (dom (thr s1'))\""], ["proof (prove)\nusing this:\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n\ngoal (1 subgoal):\n 1. finite (dom (thr s1'))", "by auto"], ["proof (state)\nthis:\n  finite (dom (thr s1'))\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "from mbisim_wset_thread_ok1[OF mbisim]"], ["proof (chain)\npicking this:\n  wset_thread_ok (wset s1) (thr s1)", "show \"wset_thread_ok (wset s1') (thr s1')\""], ["proof (prove)\nusing this:\n  wset_thread_ok (wset s1) (thr s1)\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "using s1'"], ["proof (prove)\nusing this:\n  wset_thread_ok (wset s1) (thr s1)\n  s1' =\n  (acquire_all ls1 t ln, (ts1(t \\<mapsto> (x1, no_wait_locks)), m1), ws1,\n   is1)\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "by(auto intro: wset_thread_ok_upd)"], ["proof (state)\nthis:\n  wset_thread_ok (wset s1') (thr s1')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s1' \\<approx>m (acquire_all ls1 t ln,\n                  (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "moreover"], ["proof (state)\nthis:\n  s1' \\<approx>m (acquire_all ls1 t ln,\n                  (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "have \"(t, K$ [], [], [], [], [], convert_RA ln) \\<sim>T (t, K$ [], [], [], [], [], convert_RA ln)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, K$ [], [], [], [], [], convert_RA ln)\n    \\<sim>T (t, K$ [], [], [], [], [], convert_RA ln)", "by(simp add: ta_bisim_def)"], ["proof (state)\nthis:\n  (t, K$ [], [], [], [], [], convert_RA ln)\n  \\<sim>T (t, K$ [], [], [], [], [], convert_RA ln)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>ta1 = (K$ [], [], [], [], [], convert_RA ln);\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>; \\<not> waiting (wset s1 t);\n        may_acquire_all (locks s1) t ln; 0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "ultimately"], ["proof (chain)\npicking this:\n  s2 -2-t\\<triangleright>(K$ [], [], [], [], [],\n                          convert_RA\n                           ln)\\<rightarrow> (acquire_all ls1 t ln,\n       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n  \\<not> m\\<tau>move2 s2 (t, K$ [], [], [], [], [], convert_RA ln)\n          (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n           ws1, is1)\n  s1' \\<approx>m (acquire_all ls1 t ln,\n                  (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n  (t, K$ [], [], [], [], [], convert_RA ln)\n  \\<sim>T (t, K$ [], [], [], [], [], convert_RA ln)", "show ?thesis"], ["proof (prove)\nusing this:\n  s2 -2-t\\<triangleright>(K$ [], [], [], [], [],\n                          convert_RA\n                           ln)\\<rightarrow> (acquire_all ls1 t ln,\n       (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n  \\<not> m\\<tau>move2 s2 (t, K$ [], [], [], [], [], convert_RA ln)\n          (acquire_all ls1 t ln, (ts2(t \\<mapsto> (x2, no_wait_locks)), m2),\n           ws1, is1)\n  s1' \\<approx>m (acquire_all ls1 t ln,\n                  (ts2(t \\<mapsto> (x2, no_wait_locks)), m2), ws1, is1)\n  (t, K$ [], [], [], [], [], convert_RA ln)\n  \\<sim>T (t, K$ [], [], [], [], [], convert_RA ln)\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     \\<tau>mRed2 s2 s2' \\<and>\n     r2.redT s2' tl2 s2'' \\<and>\n     \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2' s2'' tl2.\n     \\<tau>mRed2 s2 s2' \\<and>\n     r2.redT s2' tl2 s2'' \\<and>\n     \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem mbisim_simulation2:\n  \"\\<lbrakk> mbisim s1 s2; r2.redT s2 tl2 s2'; \\<not> m\\<tau>move2 s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' s1'' tl1. r1.mthr.silent_moves s1 s1' \\<and> r1.redT s1' tl1 s1'' \\<and> \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                    mbisim s1'' s2' \\<and> mta_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2';\n     \\<not> m\\<tau>move2 s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         r1.redT s1' tl1 s1'' \\<and>\n                         \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                         s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "using FWdelay_bisimulation_obs.mbisim_simulation1[OF FWdelay_bisimulation_obs_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n            (flip bisim_wait) ?s1.0 ?s2.0;\n   \\<not> m\\<tau>move2 ?s1.0 ?tl1.0 ?s1';\n   multithreaded_base.redT final2 r2 ?convert_RA ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                       (\\<tau>trsys.silent_move\n                         (multithreaded_base.redT final1 r1 ?convert_RA)\n                         m\\<tau>move1)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       multithreaded_base.redT final1 r1 ?convert_RA s2' tl2\n                        s2'' \\<and>\n                       \\<not> m\\<tau>move1 s2' tl2 s2'' \\<and>\n                       FWbisimulation_base.mbisim\n                        (\\<lambda>t. flip (bisim t)) (flip bisim_wait) ?s1'\n                        s2'' \\<and>\n                       FWbisimulation_base.mta_bisim\n                        (\\<lambda>t. flip (bisim t)) ?tl1.0 tl2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2';\n     \\<not> m\\<tau>move2 s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         r1.redT s1' tl1 s1'' \\<and>\n                         \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                         s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s2.0 \\<approx>m ?s1.0; \\<not> m\\<tau>move2 ?s1.0 ?tl1.0 ?s1';\n   multithreaded_base.redT final2 r2 ?convert_RA ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                       (\\<tau>trsys.silent_move\n                         (multithreaded_base.redT final1 r1 ?convert_RA)\n                         m\\<tau>move1)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       multithreaded_base.redT final1 r1 ?convert_RA s2' tl2\n                        s2'' \\<and>\n                       \\<not> m\\<tau>move1 s2' tl2 s2'' \\<and>\n                       s2'' \\<approx>m ?s1' \\<and> tl2 \\<sim>T ?tl1.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2';\n     \\<not> m\\<tau>move2 s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         r1.redT s1' tl1 s1'' \\<and>\n                         \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                         s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "."], ["", "end"], ["", "locale FWdelay_bisimulation_diverge =\n  FWdelay_bisimulation_obs _ _ _ _ _ _ _ \\<tau>move1 \\<tau>move2\n  for \\<tau>move1 :: \"('l,'t,'x1,'m1,'w,'o) \\<tau>moves\"\n  and \\<tau>move2 :: \"('l,'t,'x2,'m2,'w,'o) \\<tau>moves\" +\n  assumes delay_bisimulation_diverge_locale: \"delay_bisimulation_diverge (r1 t) (r2 t) (bisim t) (ta_bisim bisim) \\<tau>move1 \\<tau>move2\""], ["", "sublocale FWdelay_bisimulation_diverge <\n  delay_bisimulation_diverge \"r1 t\" \"r2 t\" \"bisim t\" \"ta_bisim bisim\" \\<tau>move1 \\<tau>move2 for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_diverge (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax\n     \\<tau>move1 \\<tau>move2", "by(rule delay_bisimulation_diverge_locale)"], ["", "context FWdelay_bisimulation_diverge begin"], ["", "lemma FWdelay_bisimulation_diverge_flip:\n  \"FWdelay_bisimulation_diverge final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_diverge.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. FWdelay_bisimulation_obs final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1\n 2. FWdelay_bisimulation_diverge_axioms r2 r1 (\\<lambda>t. flip (bisim t))\n     \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_obs_flip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge_axioms r2 r1 (\\<lambda>t. flip (bisim t))\n     \\<tau>move2 \\<tau>move1", "apply(rule FWdelay_bisimulation_diverge_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       delay_bisimulation_diverge (r2 t) (r1 t) (flip (bisim t))\n        (ta_bisim (\\<lambda>t. flip (bisim t))) \\<tau>move2 \\<tau>move1", "apply(unfold flip_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       delay_bisimulation_diverge (r1 t) (r2 t) (bisim t)\n        ta_bisim_bisim_syntax \\<tau>move1 \\<tau>move2", "apply(rule delay_bisimulation_diverge_axioms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma FWdelay_bisimulation_diverge_flip_simps [flip_simps]:\n  \"FWdelay_bisimulation_diverge final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2 \\<tau>move1 = \n   FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim bisim_wait \\<tau>move1 \\<tau>move2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge final2 r2 final1 r1\n     (\\<lambda>t. flip (bisim t)) (flip bisim_wait) \\<tau>move2\n     \\<tau>move1 =\n    FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim bisim_wait\n     \\<tau>move1 \\<tau>move2", "by(auto dest: FWdelay_bisimulation_diverge.FWdelay_bisimulation_diverge_flip simp only: flip_flip)"], ["", "context FWdelay_bisimulation_diverge begin"], ["", "lemma bisim_inv1:\n  assumes bisim: \"t \\<turnstile> s1 \\<approx> s2\"\n  and red: \"t \\<turnstile> s1 -1-ta1\\<rightarrow> s1'\"\n  obtains s2' where \"t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (bisim t s1')", "show \"\\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "proof(cases \"\\<tau>move1 s1 ta1 s1'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\n 2. \\<not> \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "case True"], ["proof (state)\nthis:\n  \\<tau>move1 s1 ta1 s1'\n\ngoal (2 subgoals):\n 1. \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\n 2. \\<not> \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "with red"], ["proof (chain)\npicking this:\n  t \\<turnstile> s1 -1-ta1\\<rightarrow> s1'\n  \\<tau>move1 s1 ta1 s1'", "have \"r1.silent_move t s1 s1'\""], ["proof (prove)\nusing this:\n  t \\<turnstile> s1 -1-ta1\\<rightarrow> s1'\n  \\<tau>move1 s1 ta1 s1'\n\ngoal (1 subgoal):\n 1. r1.silent_move t s1 s1'", "by auto"], ["proof (state)\nthis:\n  r1.silent_move t s1 s1'\n\ngoal (2 subgoals):\n 1. \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\n 2. \\<not> \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "from simulation_silent1[OF bisim this]"], ["proof (chain)\npicking this:\n  \\<exists>s2'.\n     r2.silent_moves t s2 s2' \\<and> t \\<turnstile> s1' \\<approx> s2'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s2'.\n     r2.silent_moves t s2 s2' \\<and> t \\<turnstile> s1' \\<approx> s2'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "case False"], ["proof (state)\nthis:\n  \\<not> \\<tau>move1 s1 ta1 s1'\n\ngoal (1 subgoal):\n 1. \\<not> \\<tau>move1 s1 ta1 s1' \\<Longrightarrow>\n    \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "from simulation1[OF bisim red False]"], ["proof (chain)\npicking this:\n  \\<exists>s2' s2'' tl2.\n     r2.silent_moves t s2 s2' \\<and>\n     t \\<turnstile> s2' -2-tl2\\<rightarrow> s2'' \\<and>\n     \\<not> \\<tau>move2 s2' tl2 s2'' \\<and>\n     t \\<turnstile> s1' \\<approx> s2'' \\<and> ta1 \\<sim>m tl2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s2' s2'' tl2.\n     r2.silent_moves t s2 s2' \\<and>\n     t \\<turnstile> s2' -2-tl2\\<rightarrow> s2'' \\<and>\n     \\<not> \\<tau>move2 s2' tl2 s2'' \\<and>\n     t \\<turnstile> s1' \\<approx> s2'' \\<and> ta1 \\<sim>m tl2\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'. t \\<turnstile> s1' \\<approx> s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bisim_inv2:\n  assumes \"t \\<turnstile> s1 \\<approx> s2\" \"t \\<turnstile> s2 -2-ta2\\<rightarrow> s2'\"\n  obtains s1' where \"t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms FWdelay_bisimulation_diverge.bisim_inv1[OF FWdelay_bisimulation_diverge_flip]"], ["proof (prove)\nusing this:\n  t \\<turnstile> s1 \\<approx> s2\n  t \\<turnstile> s2 -2-ta2\\<rightarrow> s2'\n  \\<lbrakk>flip (bisim ?t) ?s1.0 ?s2.0;\n   ?t \\<turnstile> ?s1.0 -2-?ta1.0\\<rightarrow> ?s1';\n   \\<And>s2'. flip (bisim ?t) ?s1' s2' \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  t \\<turnstile> s1 \\<approx> s2\n  t \\<turnstile> s2 -2-ta2\\<rightarrow> s2'\n  \\<lbrakk>?t \\<turnstile> ?s2.0 \\<approx> ?s1.0;\n   ?t \\<turnstile> ?s1.0 -2-?ta1.0\\<rightarrow> ?s1';\n   \\<And>s2'.\n      ?t \\<turnstile> s2' \\<approx> ?s1' \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma bisim_inv: \"bisim_inv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisim_inv", "by(blast intro!: bisim_invI elim: bisim_inv1 bisim_inv2)"], ["", "lemma bisim_inv_\\<tau>s1:\n  assumes \"t \\<turnstile> s1 \\<approx> s2\" and \"r1.silent_moves t s1 s1'\"\n  obtains s2' where \"t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  t \\<turnstile> s1 \\<approx> s2\n  r1.silent_moves t s1 s1'\n\ngoal (1 subgoal):\n 1. (\\<And>s2'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(rule bisim_inv_\\<tau>s1_inv[OF bisim_inv])"], ["", "lemma bisim_inv_\\<tau>s2:\n  assumes \"t \\<turnstile> s1 \\<approx> s2\" and \"r2.silent_moves t s2 s2'\"\n  obtains s1' where \"t \\<turnstile> s1' \\<approx> s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  t \\<turnstile> s1 \\<approx> s2\n  r2.silent_moves t s2 s2'\n\ngoal (1 subgoal):\n 1. (\\<And>s1'.\n        t \\<turnstile> s1' \\<approx> s2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(rule bisim_inv_\\<tau>s2_inv[OF bisim_inv])"], ["", "lemma red1_rtrancl_\\<tau>_into_RedT_\\<tau>:\n  assumes \"r1.silent_moves t (x1, shr s1) (x1', m1')\" \"t \\<turnstile> (x1, shr s1) \\<approx> (x2, m2)\"\n  and \"thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\" \"wset s1 t = None\"\n  shows \"\\<tau>mRed1 s1 (redT_upd_\\<epsilon> s1 t x1' m1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>mRed1 s1 (redT_upd_\\<epsilon> s1 t x1' m1')", "using assms"], ["proof (prove)\nusing this:\n  r1.silent_moves t (x1, shr s1) (x1', m1')\n  t \\<turnstile> (x1, shr s1) \\<approx> (x2, m2)\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  wset s1 t = None\n\ngoal (1 subgoal):\n 1. \\<tau>mRed1 s1 (redT_upd_\\<epsilon> s1 t x1' m1')", "by(blast intro: r1.silent_moves_into_RedT_\\<tau>_inv)"], ["", "lemma red2_rtrancl_\\<tau>_into_RedT_\\<tau>:\n  assumes \"r2.silent_moves t (x2, shr s2) (x2', m2')\"\n  and \"t \\<turnstile> (x1, m1) \\<approx> (x2, shr s2)\" \"thr s2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\" \"wset s2 t = None\"\n  shows \"\\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')", "using assms"], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, shr s2) (x2', m2')\n  t \\<turnstile> (x1, m1) \\<approx> (x2, shr s2)\n  thr s2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')", "by(blast intro: r2.silent_moves_into_RedT_\\<tau>_inv)"], ["", "lemma red1_rtrancl_\\<tau>_heapD:\n  \"\\<lbrakk> r1.silent_moves t s1 s1'; t \\<turnstile> s1 \\<approx> s2 \\<rbrakk> \\<Longrightarrow> snd s1' = snd s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r1.silent_moves t s1 s1';\n     t \\<turnstile> s1 \\<approx> s2\\<rbrakk>\n    \\<Longrightarrow> snd s1' = snd s1", "by(blast intro: r1.red_rtrancl_\\<tau>_heapD_inv)"], ["", "lemma red2_rtrancl_\\<tau>_heapD:\n  \"\\<lbrakk> r2.silent_moves t s2 s2'; t \\<turnstile> s1 \\<approx> s2 \\<rbrakk> \\<Longrightarrow> snd s2' = snd s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r2.silent_moves t s2 s2';\n     t \\<turnstile> s1 \\<approx> s2\\<rbrakk>\n    \\<Longrightarrow> snd s2' = snd s2", "by(blast intro: r2.red_rtrancl_\\<tau>_heapD_inv)"], ["", "lemma mbisim_simulation_silent1:\n  assumes m\\<tau>': \"r1.mthr.silent_move s1 s1'\" and mbisim: \"s1 \\<approx>m s2\"\n  shows \"\\<exists>s2'. r2.mthr.silent_moves s2 s2' \\<and> s1' \\<approx>m s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from m\\<tau>'"], ["proof (chain)\npicking this:\n  \\<tau>mred1 s1 s1'", "obtain tl1 where m\\<tau>: \"m\\<tau>move1 s1 tl1 s1'\" \"r1.redT s1 tl1 s1'\""], ["proof (prove)\nusing this:\n  \\<tau>mred1 s1 s1'\n\ngoal (1 subgoal):\n 1. (\\<And>tl1.\n        \\<lbrakk>m\\<tau>move1 s1 tl1 s1'; r1.redT s1 tl1 s1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "obtain ls1 ts1 m1 ws1 is1 where [simp]: \"s1 = (ls1, (ts1, m1), ws1, is1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls1 ts1 m1 ws1 is1.\n        s1 = (ls1, (ts1, m1), ws1, is1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s1) fastforce"], ["proof (state)\nthis:\n  s1 = (ls1, (ts1, m1), ws1, is1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "obtain ls1' ts1' m1' ws1' is1' where [simp]: \"s1' = (ls1', (ts1', m1'), ws1', is1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls1' ts1' m1' ws1' is1'.\n        s1' = (ls1', (ts1', m1'), ws1', is1') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s1') fastforce"], ["proof (state)\nthis:\n  s1' = (ls1', (ts1', m1'), ws1', is1')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "obtain ls2 ts2 m2 ws2 is2 where [simp]: \"s2 = (ls2, (ts2, m2), ws2, is2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ls2 ts2 m2 ws2 is2.\n        s2 = (ls2, (ts2, m2), ws2, is2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases s2) fastforce"], ["proof (state)\nthis:\n  s2 = (ls2, (ts2, m2), ws2, is2)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from m\\<tau>"], ["proof (chain)\npicking this:\n  m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'", "obtain t where \"tl1 = (t, \\<epsilon>)\""], ["proof (prove)\nusing this:\n  m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        tl1 = (t, \\<lbrace>\\<rbrace>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto elim!: r1.m\\<tau>move.cases dest: r1.silent_tl)"], ["proof (state)\nthis:\n  tl1 = (t, \\<lbrace>\\<rbrace>)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "with m\\<tau>"], ["proof (chain)\npicking this:\n  m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'\n  tl1 = (t, \\<lbrace>\\<rbrace>)", "have m\\<tau>: \"m\\<tau>move1 s1 (t, \\<epsilon>) s1'\" and redT1: \"s1 -1-t\\<triangleright>\\<epsilon>\\<rightarrow> s1'\""], ["proof (prove)\nusing this:\n  m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'\n  tl1 = (t, \\<lbrace>\\<rbrace>)\n\ngoal (1 subgoal):\n 1. m\\<tau>move1 s1 (t, \\<lbrace>\\<rbrace>) s1' &&&\n    s1 -1-t\\<triangleright>\\<lbrace>\\<rbrace>\\<rightarrow> s1'", "by simp_all"], ["proof (state)\nthis:\n  m\\<tau>move1 s1 (t, \\<lbrace>\\<rbrace>) s1'\n  s1 -1-t\\<triangleright>\\<lbrace>\\<rbrace>\\<rightarrow> s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from m\\<tau>"], ["proof (chain)\npicking this:\n  m\\<tau>move1 s1 (t, \\<lbrace>\\<rbrace>) s1'", "obtain x x' ln' where tst: \"ts1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\"\n    and ts't: \"ts1' t = \\<lfloor>(x', ln')\\<rfloor>\" and \\<tau>: \"\\<tau>move1 (x, m1) \\<epsilon> (x', m1')\""], ["proof (prove)\nusing this:\n  m\\<tau>move1 s1 (t, \\<lbrace>\\<rbrace>) s1'\n\ngoal (1 subgoal):\n 1. (\\<And>x x' ln'.\n        \\<lbrakk>ts1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n         ts1' t = \\<lfloor>(x', ln')\\<rfloor>;\n         \\<tau>move1 (x, m1) \\<lbrace>\\<rbrace> (x', m1')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim: r1.m\\<tau>move.cases)"], ["proof (state)\nthis:\n  ts1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  ts1' t = \\<lfloor>(x', ln')\\<rfloor>\n  \\<tau>move1 (x, m1) \\<lbrace>\\<rbrace> (x', m1')\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have [simp]: \"ls2 = ls1\" \"ws2 = ws1\" \"is2 = is1\" \"finite (dom ts1)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. (ls2 = ls1 &&& ws2 = ws1) &&& is2 = is1 &&& finite (dom ts1)", "by(auto simp add: mbisim_def)"], ["proof (state)\nthis:\n  ls2 = ls1\n  ws2 = ws1\n  is2 = is1\n  finite (dom ts1)\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from redT1"], ["proof (chain)\npicking this:\n  s1 -1-t\\<triangleright>\\<lbrace>\\<rbrace>\\<rightarrow> s1'", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 -1-t\\<triangleright>\\<lbrace>\\<rbrace>\\<rightarrow> s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "case (redT_normal x1 x1' M')"], ["proof (state)\nthis:\n  r1.r_syntax t x1 (shr s1) \\<lbrace>\\<rbrace> x1' M'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t \\<lbrace>\\<rbrace>\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "with tst ts't"], ["proof (chain)\npicking this:\n  ts1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  ts1' t = \\<lfloor>(x', ln')\\<rfloor>\n  r1.r_syntax t x1 (shr s1) \\<lbrace>\\<rbrace> x1' M'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t \\<lbrace>\\<rbrace>\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'", "have [simp]: \"x = x1\" \"x' = x1'\"\n      and red: \"t \\<turnstile> (x1, m1) -1-\\<epsilon>\\<rightarrow> (x1', M')\"\n      and tst: \"thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\"\n      and wst: \"wset s1 t = None\"\n      and s1': \"redT_upd s1 t \\<epsilon> x1' M' s1'\""], ["proof (prove)\nusing this:\n  ts1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  ts1' t = \\<lfloor>(x', ln')\\<rfloor>\n  r1.r_syntax t x1 (shr s1) \\<lbrace>\\<rbrace> x1' M'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  r1.actions_ok s1 t \\<lbrace>\\<rbrace>\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'\n\ngoal (1 subgoal):\n 1. ((x = x1 &&& x' = x1') &&&\n     r1.r_syntax t x1 m1 \\<lbrace>\\<rbrace> x1' M') &&&\n    thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor> &&&\n    wset s1 t = None &&& redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'", "by(auto)"], ["proof (state)\nthis:\n  x = x1\n  x' = x1'\n  r1.r_syntax t x1 m1 \\<lbrace>\\<rbrace> x1' M'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  wset s1 t = None\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from s1' tst"], ["proof (chain)\npicking this:\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "have [simp]: \"ls1' = ls1\" \"ws1' = ws1\" \"is1' = is1\" \"M' = m1'\" \"ts1' = ts1(t \\<mapsto> (x1', no_wait_locks))\""], ["proof (prove)\nusing this:\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (ls1' = ls1 &&& ws1' = ws1) &&&\n    is1' = is1 &&& M' = m1' &&& ts1' = ts1(t \\<mapsto> (x1', no_wait_locks))", "by(auto simp add: redT_updLs_def redT_updLns_def o_def redT_updWs_def elim!: rtrancl3p_cases)"], ["proof (state)\nthis:\n  ls1' = ls1\n  ws1' = ws1\n  is1' = is1\n  M' = m1'\n  ts1' = ts1(t \\<mapsto> (x1', no_wait_locks))\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from mbisim tst"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>", "obtain x2 where tst': \"ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\"\n      and bisim: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        \\<lbrakk>ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>;\n         t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD1)"], ["proof (state)\nthis:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from r1.\\<tau>move_heap[OF red] \\<tau>"], ["proof (chain)\npicking this:\n  \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', M') \\<Longrightarrow>\n  m1 = M'\n  \\<tau>move1 (x, m1) \\<lbrace>\\<rbrace> (x', m1')", "have [simp]: \"m1 = M'\""], ["proof (prove)\nusing this:\n  \\<tau>move1 (x1, m1) \\<lbrace>\\<rbrace> (x1', M') \\<Longrightarrow>\n  m1 = M'\n  \\<tau>move1 (x, m1) \\<lbrace>\\<rbrace> (x', m1')\n\ngoal (1 subgoal):\n 1. m1 = M'", "by simp"], ["proof (state)\nthis:\n  m1 = M'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from red \\<tau>"], ["proof (chain)\npicking this:\n  r1.r_syntax t x1 m1 \\<lbrace>\\<rbrace> x1' M'\n  \\<tau>move1 (x, m1) \\<lbrace>\\<rbrace> (x', m1')", "have \"r1.silent_move t (x1, m1) (x1', M')\""], ["proof (prove)\nusing this:\n  r1.r_syntax t x1 m1 \\<lbrace>\\<rbrace> x1' M'\n  \\<tau>move1 (x, m1) \\<lbrace>\\<rbrace> (x', m1')\n\ngoal (1 subgoal):\n 1. r1.silent_move t (x1, m1) (x1', M')", "by auto"], ["proof (state)\nthis:\n  r1.silent_move t (x1, m1) (x1', M')\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from simulation_silent1[OF bisim this]"], ["proof (chain)\npicking this:\n  \\<exists>s2'.\n     r2.silent_moves t (x2, m2) s2' \\<and> t \\<turnstile> (x1', M')\n     \\<approx> s2'", "obtain x2' m2' where red: \"r2.silent_moves t (x2, m2) (x2', m2')\"\n      and bisim': \"t \\<turnstile> (x1', m1) \\<approx> (x2', m2')\""], ["proof (prove)\nusing this:\n  \\<exists>s2'.\n     r2.silent_moves t (x2, m2) s2' \\<and> t \\<turnstile> (x1', M')\n     \\<approx> s2'\n\ngoal (1 subgoal):\n 1. (\\<And>x2' m2'.\n        \\<lbrakk>r2.silent_moves t (x2, m2) (x2', m2');\n         t \\<turnstile> (x1', m1) \\<approx> (x2', m2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r2.silent_moves t (x2, m2) (x2', m2')\n  t \\<turnstile> (x1', m1) \\<approx> (x2', m2')\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from red bisim"], ["proof (chain)\npicking this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)", "have [simp]: \"m2' = m2\""], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. m2' = m2", "by(auto dest: red2_rtrancl_\\<tau>_heapD)"], ["proof (state)\nthis:\n  m2' = m2\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "let ?s2' = \"redT_upd_\\<epsilon> s2 t x2' m2'\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "from red tst' wst bisim"], ["proof (chain)\npicking this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  wset s1 t = None\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)", "have \"\\<tau>mRed2 s2 ?s2'\""], ["proof (prove)\nusing this:\n  r2.silent_moves t (x2, m2) (x2', m2')\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  wset s1 t = None\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n\ngoal (1 subgoal):\n 1. \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')", "by -(rule red2_rtrancl_\\<tau>_into_RedT_\\<tau>, auto)"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "moreover"], ["proof (state)\nthis:\n  \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "have \"mbisim s1' ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1' \\<approx>m redT_upd_\\<epsilon> s2 t x2' m2'", "proof(rule mbisimI)"], ["proof (state)\ngoal (7 subgoals):\n 1. finite (dom (thr s1'))\n 2. locks s1' = locks (redT_upd_\\<epsilon> s2 t x2' m2')\n 3. wset s1' = wset (redT_upd_\\<epsilon> s2 t x2' m2')\n 4. interrupts s1' = interrupts (redT_upd_\\<epsilon> s2 t x2' m2')\n 5. wset_thread_ok (wset s1') (thr s1')\n 6. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') ta = None\n 7. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "show \"locks s1' = locks ?s2'\" \"wset s1' = wset ?s2'\" \"interrupts s1' = interrupts ?s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locks s1' = locks (redT_upd_\\<epsilon> s2 t x2' m2') &&&\n    wset s1' = wset (redT_upd_\\<epsilon> s2 t x2' m2') &&&\n    interrupts s1' = interrupts (redT_upd_\\<epsilon> s2 t x2' m2')", "by auto"], ["proof (state)\nthis:\n  locks s1' = locks (redT_upd_\\<epsilon> s2 t x2' m2')\n  wset s1' = wset (redT_upd_\\<epsilon> s2 t x2' m2')\n  interrupts s1' = interrupts (redT_upd_\\<epsilon> s2 t x2' m2')\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') ta = None\n 4. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') ta = None\n 4. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "fix t'"], ["proof (state)\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') ta = None\n 4. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "assume \"thr s1' t' = None\""], ["proof (state)\nthis:\n  thr s1' t' = None\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') ta = None\n 4. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "hence \"ts1 t' = None\""], ["proof (prove)\nusing this:\n  thr s1' t' = None\n\ngoal (1 subgoal):\n 1. ts1 t' = None", "by(auto split: if_split_asm)"], ["proof (state)\nthis:\n  ts1 t' = None\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') ta = None\n 4. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "with mbisim_thrNone_eq[OF mbisim]"], ["proof (chain)\npicking this:\n  (thr s1 ?t = None) = (thr s2 ?t = None)\n  ts1 t' = None", "have \"ts2 t' = None\""], ["proof (prove)\nusing this:\n  (thr s1 ?t = None) = (thr s2 ?t = None)\n  ts1 t' = None\n\ngoal (1 subgoal):\n 1. ts2 t' = None", "by simp"], ["proof (state)\nthis:\n  ts2 t' = None\n\ngoal (4 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta.\n       thr s1' ta = None \\<Longrightarrow>\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') ta = None\n 4. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "with tst'"], ["proof (chain)\npicking this:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ts2 t' = None", "show \"thr ?s2' t' = None\""], ["proof (prove)\nusing this:\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  ts2 t' = None\n\ngoal (1 subgoal):\n 1. thr (redT_upd_\\<epsilon> s2 t x2' m2') t' = None", "by auto"], ["proof (state)\nthis:\n  thr (redT_upd_\\<epsilon> s2 t x2' m2') t' = None\n\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "fix t' X1 LN"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "assume ts't': \"thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\""], ["proof (state)\nthis:\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (3 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')\n 3. \\<And>ta x1 ln.\n       thr s1' ta = \\<lfloor>(x1, ln)\\<rfloor> \\<Longrightarrow>\n       \\<exists>x2.\n          thr (redT_upd_\\<epsilon> s2 t x2' m2') ta =\n          \\<lfloor>(x2, ln)\\<rfloor> \\<and>\n          ta \\<turnstile> (x1, shr s1')\n          \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n          (wset (redT_upd_\\<epsilon> s2 t x2' m2') ta = None \\<or> x1\n           \\<approx>w x2)", "show \"\\<exists>x2. thr ?s2' t' = \\<lfloor>(x2, LN)\\<rfloor> \\<and> t' \\<turnstile> (X1, shr s1') \\<approx> (x2, shr ?s2') \\<and> (wset ?s2' t' = None \\<or> X1 \\<approx>w x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "proof(cases \"t' = t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t' = t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)\n 2. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "case True"], ["proof (state)\nthis:\n  t' = t\n\ngoal (2 subgoals):\n 1. t' = t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)\n 2. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "note this[simp]"], ["proof (state)\nthis:\n  t' = t\n\ngoal (2 subgoals):\n 1. t' = t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)\n 2. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "with s1' tst ts't'"], ["proof (chain)\npicking this:\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  t' = t", "have [simp]: \"X1 = x1'\" \"LN = no_wait_locks\""], ["proof (prove)\nusing this:\n  redT_upd s1 t \\<lbrace>\\<rbrace> x1' M' s1'\n  thr s1 t = \\<lfloor>(x1, no_wait_locks)\\<rfloor>\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  t' = t\n\ngoal (1 subgoal):\n 1. X1 = x1' &&& LN = no_wait_locks", "by(simp_all)(auto simp add: redT_updLns_def o_def finfun_Diag_const2)"], ["proof (state)\nthis:\n  X1 = x1'\n  LN = no_wait_locks\n\ngoal (2 subgoals):\n 1. t' = t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)\n 2. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "with bisim' tst' wst"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1', m1) \\<approx> (x2', m2')\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  wset s1 t = None\n  X1 = x1'\n  LN = no_wait_locks", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1', m1) \\<approx> (x2', m2')\n  ts2 t = \\<lfloor>(x2, no_wait_locks)\\<rfloor>\n  wset s1 t = None\n  X1 = x1'\n  LN = no_wait_locks\n\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "by(auto simp add: redT_updLns_def o_def finfun_Diag_const2)"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n     \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     t' \\<turnstile> (X1, shr s1')\n     \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n     (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n      \\<approx>w x2)\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "case False"], ["proof (state)\nthis:\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "with ts't'"], ["proof (chain)\npicking this:\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  t' \\<noteq> t", "have \"ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>\""], ["proof (prove)\nusing this:\n  thr s1' t' = \\<lfloor>(X1, LN)\\<rfloor>\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "with mbisim"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>", "obtain X2 where \"ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\" \"t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\" \"ws1 t' = None \\<or> X1 \\<approx>w X2\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  ts1 t' = \\<lfloor>(X1, LN)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>X2.\n        \\<lbrakk>ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>;\n         t' \\<turnstile> (X1, m1) \\<approx> (X2, m2);\n         ws1 t' = None \\<or> X1 \\<approx>w X2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD1)"], ["proof (state)\nthis:\n  ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\n  t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\n  ws1 t' = None \\<or> X1 \\<approx>w X2\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t \\<Longrightarrow>\n    \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "with False"], ["proof (chain)\npicking this:\n  t' \\<noteq> t\n  ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\n  t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\n  ws1 t' = None \\<or> X1 \\<approx>w X2", "show ?thesis"], ["proof (prove)\nusing this:\n  t' \\<noteq> t\n  ts2 t' = \\<lfloor>(X2, LN)\\<rfloor>\n  t' \\<turnstile> (X1, m1) \\<approx> (X2, m2)\n  ws1 t' = None \\<or> X1 \\<approx>w X2\n\ngoal (1 subgoal):\n 1. \\<exists>x2.\n       thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n       \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n       t' \\<turnstile> (X1, shr s1')\n       \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n       (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n        \\<approx>w x2)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n     \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     t' \\<turnstile> (X1, shr s1')\n     \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n     (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n      \\<approx>w x2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x2.\n     thr (redT_upd_\\<epsilon> s2 t x2' m2') t' =\n     \\<lfloor>(x2, LN)\\<rfloor> \\<and>\n     t' \\<turnstile> (X1, shr s1')\n     \\<approx> (x2, shr (redT_upd_\\<epsilon> s2 t x2' m2')) \\<and>\n     (wset (redT_upd_\\<epsilon> s2 t x2' m2') t' = None \\<or> X1\n      \\<approx>w x2)\n\ngoal (2 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (dom (thr s1'))\n 2. wset_thread_ok (wset s1') (thr s1')", "show \"finite (dom (thr s1'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom (thr s1'))", "by simp"], ["proof (state)\nthis:\n  finite (dom (thr s1'))\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "from mbisim_wset_thread_ok1[OF mbisim]"], ["proof (chain)\npicking this:\n  wset_thread_ok (wset s1) (thr s1)", "show \"wset_thread_ok (wset s1') (thr s1')\""], ["proof (prove)\nusing this:\n  wset_thread_ok (wset s1) (thr s1)\n\ngoal (1 subgoal):\n 1. wset_thread_ok (wset s1') (thr s1')", "by(auto intro: wset_thread_ok_upd)"], ["proof (state)\nthis:\n  wset_thread_ok (wset s1') (thr s1')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s1' \\<approx>m redT_upd_\\<epsilon> s2 t x2' m2'\n\ngoal (2 subgoals):\n 1. \\<And>x x' m'.\n       \\<lbrakk>r1.r_syntax t x (shr s1) \\<lbrace>\\<rbrace> x' m';\n        thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n        r1.actions_ok s1 t \\<lbrace>\\<rbrace>;\n        redT_upd s1 t \\<lbrace>\\<rbrace> x' m' s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 2. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "ultimately"], ["proof (chain)\npicking this:\n  \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')\n  s1' \\<approx>m redT_upd_\\<epsilon> s2 t x2' m2'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<tau>mRed2 s2 (redT_upd_\\<epsilon> s2 t x2' m2')\n  s1' \\<approx>m redT_upd_\\<epsilon> s2 t x2' m2'\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "by(auto)"], ["proof (state)\nthis:\n  \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "case redT_acquire"], ["proof (state)\nthis:\n  [] = convert_RA ln_\n  thr s1 t = \\<lfloor>(x_, ln_)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln_\n  0 < ln_ $ n_\n  s1' =\n  (acquire_all (locks s1) t ln_,\n   (thr s1(t \\<mapsto> (x_, no_wait_locks)), shr s1), wset s1,\n   interrupts s1)\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "with tst"], ["proof (chain)\npicking this:\n  ts1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  [] = convert_RA ln_\n  thr s1 t = \\<lfloor>(x_, ln_)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln_\n  0 < ln_ $ n_\n  s1' =\n  (acquire_all (locks s1) t ln_,\n   (thr s1(t \\<mapsto> (x_, no_wait_locks)), shr s1), wset s1,\n   interrupts s1)", "have False"], ["proof (prove)\nusing this:\n  ts1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  [] = convert_RA ln_\n  thr s1 t = \\<lfloor>(x_, ln_)\\<rfloor>\n  \\<not> waiting (wset s1 t)\n  may_acquire_all (locks s1) t ln_\n  0 < ln_ $ n_\n  s1' =\n  (acquire_all (locks s1) t ln_,\n   (thr s1(t \\<mapsto> (x_, no_wait_locks)), shr s1), wset s1,\n   interrupts s1)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x n ln.\n       \\<lbrakk>[] = convert_RA ln; thr s1 t = \\<lfloor>(x, ln)\\<rfloor>;\n        \\<not> waiting (wset s1 t); may_acquire_all (locks s1) t ln;\n        0 < ln $ n;\n        s1' =\n        (acquire_all (locks s1) t ln,\n         (thr s1(t \\<mapsto> (x, no_wait_locks)), shr s1), wset s1,\n         interrupts s1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'", ".."], ["proof (state)\nthis:\n  \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s2'. \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mbisim_simulation_silent2:\n  \"\\<lbrakk> mbisim s1 s2; r2.mthr.silent_move s2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1'. r1.mthr.silent_moves s1 s1' \\<and> mbisim s1' s2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; \\<tau>mred2 s2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1'.\n                         \\<tau>mRed1 s1 s1' \\<and> s1' \\<approx>m s2'", "using FWdelay_bisimulation_diverge.mbisim_simulation_silent1[OF FWdelay_bisimulation_diverge_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<tau>trsys.silent_move\n            (multithreaded_base.redT final2 r2 ?convert_RA) m\\<tau>move2\n            ?s1.0 ?s1';\n   FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t)) (flip bisim_wait)\n    ?s1.0 ?s2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2'.\n                       (\\<tau>trsys.silent_move\n                         (multithreaded_base.redT final1 r1 ?convert_RA)\n                         m\\<tau>move1)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       FWbisimulation_base.mbisim\n                        (\\<lambda>t. flip (bisim t)) (flip bisim_wait) ?s1'\n                        s2'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; \\<tau>mred2 s2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1'.\n                         \\<tau>mRed1 s1 s1' \\<and> s1' \\<approx>m s2'", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<tau>trsys.silent_move\n            (multithreaded_base.redT final2 r2 ?convert_RA) m\\<tau>move2\n            ?s1.0 ?s1';\n   ?s2.0 \\<approx>m ?s1.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2'.\n                       (\\<tau>trsys.silent_move\n                         (multithreaded_base.redT final1 r1 ?convert_RA)\n                         m\\<tau>move1)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       s2' \\<approx>m ?s1'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; \\<tau>mred2 s2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1'.\n                         \\<tau>mRed1 s1 s1' \\<and> s1' \\<approx>m s2'", "."], ["", "lemma mbisim_simulation1':\n  assumes mbisim: \"mbisim s1 s2\" and \"\\<not> m\\<tau>move1 s1 tl1 s1'\" \"r1.redT s1 tl1 s1'\"\n  shows \"\\<exists>s2' s2'' tl2. r2.mthr.silent_moves s2 s2' \\<and> r2.redT s2' tl2 s2'' \\<and>\n                        \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and> mbisim s1' s2'' \\<and> mta_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "using mbisim_simulation1 assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s1.0 \\<approx>m ?s2.0; \\<not> m\\<tau>move1 ?s1.0 ?tl1.0 ?s1';\n   r1.redT ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                       \\<tau>mRed2 ?s2.0 s2' \\<and>\n                       r2.redT s2' tl2 s2'' \\<and>\n                       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                       ?s1' \\<approx>m s2'' \\<and> ?tl1.0 \\<sim>T tl2\n  s1 \\<approx>m s2\n  \\<not> m\\<tau>move1 s1 tl1 s1'\n  r1.redT s1 tl1 s1'\n\ngoal (1 subgoal):\n 1. \\<exists>s2' s2'' tl2.\n       \\<tau>mRed2 s2 s2' \\<and>\n       r2.redT s2' tl2 s2'' \\<and>\n       \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n       s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2", "."], ["", "lemma mbisim_simulation2':\n  \"\\<lbrakk> mbisim s1 s2; r2.redT s2 tl2 s2'; \\<not> m\\<tau>move2 s2 tl2 s2' \\<rbrakk>\n  \\<Longrightarrow> \\<exists>s1' s1'' tl1. r1.mthr.silent_moves s1 s1' \\<and> r1.redT s1' tl1 s1'' \\<and> \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                    mbisim s1'' s2' \\<and> mta_bisim tl1 tl2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2';\n     \\<not> m\\<tau>move2 s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         r1.redT s1' tl1 s1'' \\<and>\n                         \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                         s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "using FWdelay_bisimulation_diverge.mbisim_simulation1'[OF FWdelay_bisimulation_diverge_flip]"], ["proof (prove)\nusing this:\n  \\<lbrakk>FWbisimulation_base.mbisim (\\<lambda>t. flip (bisim t))\n            (flip bisim_wait) ?s1.0 ?s2.0;\n   \\<not> m\\<tau>move2 ?s1.0 ?tl1.0 ?s1';\n   multithreaded_base.redT final2 r2 ?convert_RA ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                       (\\<tau>trsys.silent_move\n                         (multithreaded_base.redT final1 r1 ?convert_RA)\n                         m\\<tau>move1)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       multithreaded_base.redT final1 r1 ?convert_RA s2' tl2\n                        s2'' \\<and>\n                       \\<not> m\\<tau>move1 s2' tl2 s2'' \\<and>\n                       FWbisimulation_base.mbisim\n                        (\\<lambda>t. flip (bisim t)) (flip bisim_wait) ?s1'\n                        s2'' \\<and>\n                       FWbisimulation_base.mta_bisim\n                        (\\<lambda>t. flip (bisim t)) ?tl1.0 tl2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2';\n     \\<not> m\\<tau>move2 s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         r1.redT s1' tl1 s1'' \\<and>\n                         \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                         s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "unfolding flip_simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s2.0 \\<approx>m ?s1.0; \\<not> m\\<tau>move2 ?s1.0 ?tl1.0 ?s1';\n   multithreaded_base.redT final2 r2 ?convert_RA ?s1.0 ?tl1.0 ?s1'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                       (\\<tau>trsys.silent_move\n                         (multithreaded_base.redT final1 r1 ?convert_RA)\n                         m\\<tau>move1)\\<^sup>*\\<^sup>*\n                        ?s2.0 s2' \\<and>\n                       multithreaded_base.redT final1 r1 ?convert_RA s2' tl2\n                        s2'' \\<and>\n                       \\<not> m\\<tau>move1 s2' tl2 s2'' \\<and>\n                       s2'' \\<approx>m ?s1' \\<and> tl2 \\<sim>T ?tl1.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2';\n     \\<not> m\\<tau>move2 s2 tl2 s2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                         \\<tau>mRed1 s1 s1' \\<and>\n                         r1.redT s1' tl1 s1'' \\<and>\n                         \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                         s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "."], ["", "lemma m\\<tau>diverge_simulation1:\n  assumes \"s1 \\<approx>m s2\"\n  and \"r1.mthr.\\<tau>diverge s1\"\n  shows \"r2.mthr.\\<tau>diverge s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "from \\<open>s1 \\<approx>m s2\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2", "have \"finite (dom (thr s1))\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n\ngoal (1 subgoal):\n 1. finite (dom (thr s1))", "by(rule mbisim_finite1)+"], ["proof (state)\nthis:\n  finite (dom (thr s1))\n\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "from r1.\\<tau>diverge_\\<tau>mredTD[OF \\<open>r1.mthr.\\<tau>diverge s1\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>t x.\n     thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor> \\<and>\n     wset s1 t = None \\<and> r1.\\<tau>diverge t (x, shr s1)", "obtain t x where \"thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\" \"wset s1 t = None\" \"r1.\\<tau>diverge t (x, shr s1)\""], ["proof (prove)\nusing this:\n  \\<exists>t x.\n     thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor> \\<and>\n     wset s1 t = None \\<and> r1.\\<tau>diverge t (x, shr s1)\n\ngoal (1 subgoal):\n 1. (\\<And>t x.\n        \\<lbrakk>thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>;\n         wset s1 t = None; r1.\\<tau>diverge t (x, shr s1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n  wset s1 t = None\n  r1.\\<tau>diverge t (x, shr s1)\n\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "from \\<open>s1 \\<approx>m s2\\<close> \\<open>thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>", "obtain x'\n    where \"thr s2 t = \\<lfloor>(x', no_wait_locks)\\<rfloor>\" \"t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2)\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  thr s1 t = \\<lfloor>(x, no_wait_locks)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>thr s2 t = \\<lfloor>(x', no_wait_locks)\\<rfloor>;\n         t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto dest: mbisim_thrD1)"], ["proof (state)\nthis:\n  thr s2 t = \\<lfloor>(x', no_wait_locks)\\<rfloor>\n  t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2)\n\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "from \\<open>s1 \\<approx>m s2\\<close> \\<open>wset s1 t = None\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<approx>m s2\n  wset s1 t = None", "have \"wset s2 t = None\""], ["proof (prove)\nusing this:\n  s1 \\<approx>m s2\n  wset s1 t = None\n\ngoal (1 subgoal):\n 1. wset s2 t = None", "by(simp add: mbisim_def)"], ["proof (state)\nthis:\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "from \\<open>t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2)\\<close> \\<open>r1.\\<tau>diverge t (x, shr s1)\\<close>"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2)\n  r1.\\<tau>diverge t (x, shr s1)", "have \"r2.\\<tau>diverge t (x', shr s2)\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x, shr s1) \\<approx> (x', shr s2)\n  r1.\\<tau>diverge t (x, shr s1)\n\ngoal (1 subgoal):\n 1. r2.\\<tau>diverge t (x', shr s2)", "by(simp add: \\<tau>diverge_bisim_inv)"], ["proof (state)\nthis:\n  r2.\\<tau>diverge t (x', shr s2)\n\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "thus ?thesis"], ["proof (prove)\nusing this:\n  r2.\\<tau>diverge t (x', shr s2)\n\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "using \\<open>thr s2 t = \\<lfloor>(x', no_wait_locks)\\<rfloor>\\<close> \\<open>wset s2 t = None\\<close>"], ["proof (prove)\nusing this:\n  r2.\\<tau>diverge t (x', shr s2)\n  thr s2 t = \\<lfloor>(x', no_wait_locks)\\<rfloor>\n  wset s2 t = None\n\ngoal (1 subgoal):\n 1. r2.mthr.\\<tau>diverge s2", "by(rule r2.\\<tau>diverge_into_\\<tau>mredT)"], ["proof (state)\nthis:\n  r2.mthr.\\<tau>diverge s2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<tau>diverge_mbisim_inv:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> r1.mthr.\\<tau>diverge s1 \\<longleftrightarrow> r2.mthr.\\<tau>diverge s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow>\n    r1.mthr.\\<tau>diverge s1 = r2.mthr.\\<tau>diverge s2", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s1 \\<approx>m s2; r1.mthr.\\<tau>diverge s1\\<rbrakk>\n    \\<Longrightarrow> r2.mthr.\\<tau>diverge s2\n 2. \\<lbrakk>s1 \\<approx>m s2; r2.mthr.\\<tau>diverge s2\\<rbrakk>\n    \\<Longrightarrow> r1.mthr.\\<tau>diverge s1", "apply(erule (1) m\\<tau>diverge_simulation1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s1 \\<approx>m s2; r2.mthr.\\<tau>diverge s2\\<rbrakk>\n    \\<Longrightarrow> r1.mthr.\\<tau>diverge s1", "by(rule FWdelay_bisimulation_diverge.m\\<tau>diverge_simulation1[OF FWdelay_bisimulation_diverge_flip, unfolded flip_simps])"], ["", "lemma mbisim_delay_bisimulation:\n  \"delay_bisimulation_diverge r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_diverge r1.redT r2.redT mbisim mta_bisim m\\<tau>move1\n     m\\<tau>move2", "apply(unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s1 s2 tl1 s1'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1';\n        \\<not> m\\<tau>move1 s1 tl1 s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' s2'' tl2.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            r2.redT s2' tl2 s2'' \\<and>\n                            \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n                            s1' \\<approx>m s2'' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2';\n        \\<not> m\\<tau>move2 s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' s1'' tl1.\n                            \\<tau>mRed1 s1 s1' \\<and>\n                            r1.redT s1' tl1 s1'' \\<and>\n                            \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n                            s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2\n 3. \\<And>s1 s2 s1'.\n       \\<lbrakk>s1 \\<approx>m s2; \\<tau>mred1 s1 s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and> s1' \\<approx>m s2'\n 4. \\<And>s1 s2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; \\<tau>mred2 s2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            \\<tau>mRed1 s1 s1' \\<and> s1' \\<approx>m s2'\n 5. \\<And>s1 s2.\n       s1 \\<approx>m s2 \\<Longrightarrow>\n       r1.mthr.\\<tau>diverge s1 = r2.mthr.\\<tau>diverge s2", "apply(rule mbisim_simulation1 mbisim_simulation2 mbisim_simulation_silent1 mbisim_simulation_silent2 \\<tau>diverge_mbisim_inv|assumption)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem mdelay_bisimulation_final_base:\n  \"delay_bisimulation_final_base r1.redT r2.redT mbisim m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_final_base r1.redT r2.redT mbisim m\\<tau>move1\n     m\\<tau>move2 r1.mfinal r2.mfinal", "apply(unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<approx>m s2; r1.mfinal s1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            \\<tau>mRed2 s2 s2' \\<and>\n                            s1 \\<approx>m s2' \\<and> r2.mfinal s2'\n 2. \\<And>s1 s2.\n       \\<lbrakk>s1 \\<approx>m s2; r2.mfinal s2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            \\<tau>mRed1 s1 s1' \\<and>\n                            s1' \\<approx>m s2 \\<and> r1.mfinal s1'", "apply(blast dest: mfinal1_simulation mfinal2_simulation)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "sublocale FWdelay_bisimulation_diverge < mthr: delay_bisimulation_diverge r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2"], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_diverge r1.redT r2.redT mbisim mta_bisim m\\<tau>move1\n     m\\<tau>move2", "by(rule mbisim_delay_bisimulation)"], ["", "sublocale FWdelay_bisimulation_diverge <\n  mthr: delay_bisimulation_final_base r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal"], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_final_base r1.redT r2.redT mbisim m\\<tau>move1\n     m\\<tau>move2 r1.mfinal r2.mfinal", "by(rule mdelay_bisimulation_final_base)"], ["", "context FWdelay_bisimulation_diverge begin"], ["", "lemma mthr_delay_bisimulation_diverge_final:\n  \"delay_bisimulation_diverge_final r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_diverge_final r1.redT r2.redT mbisim mta_bisim\n     m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal", "by(unfold_locales)"], ["", "end"], ["", "sublocale FWdelay_bisimulation_diverge <\n  mthr: delay_bisimulation_diverge_final r1.redT r2.redT mbisim mta_bisim m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal"], ["proof (prove)\ngoal (1 subgoal):\n 1. delay_bisimulation_diverge_final r1.redT r2.redT mbisim mta_bisim\n     m\\<tau>move1 m\\<tau>move2 r1.mfinal r2.mfinal", "by(rule mthr_delay_bisimulation_diverge_final)"], ["", "subsection \\<open>Strong bisimulation as corollary\\<close>"], ["", "locale FWbisimulation = FWbisimulation_base _ _ _ r2 convert_RA bisim \"\\<lambda>x1 x2. True\" +\n  r1: multithreaded final1 r1 convert_RA +\n  r2: multithreaded final2 r2 convert_RA\n  for r2 :: \"('l,'t,'x2,'m2,'w,'o) semantics\" (\"_ \\<turnstile> _ -2-_\\<rightarrow> _\" [50,0,0,50] 80)\n  and convert_RA :: \"'l released_locks \\<Rightarrow> 'o list\"\n  and bisim :: \"'t \\<Rightarrow> ('x1 \\<times> 'm1, 'x2 \\<times> 'm2) bisim\" (\"_ \\<turnstile> _/ \\<approx> _\" [50, 50, 50] 60) +\n  assumes bisimulation_locale: \"bisimulation (r1 t) (r2 t) (bisim t) (ta_bisim bisim)\"\n  and bisim_final: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2) \\<Longrightarrow> final1 x1 \\<longleftrightarrow> final2 x2\"\n  and bisim_inv_red_other:\n   \"\\<lbrakk> t' \\<turnstile> (x, m1) \\<approx> (xx, m2); t \\<turnstile> (x1, m1) \\<approx> (x2, m2); \n      t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', m1'); t \\<turnstile> (x2, m2) -2-ta2\\<rightarrow> (x2', m2'); \n      t \\<turnstile> (x1', m1') \\<approx> (x2', m2'); ta_bisim bisim ta1 ta2 \\<rbrakk>\n   \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\"\n  and ex_final1_conv_ex_final2:\n   \"(\\<exists>x1. final1 x1) \\<longleftrightarrow> (\\<exists>x2. final2 x2)\""], ["", "sublocale FWbisimulation < bisim?: bisimulation \"r1 t\" \"r2 t\" \"bisim t\" \"ta_bisim bisim\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax", "by(rule bisimulation_locale)"], ["", "sublocale FWbisimulation < bisim_diverge?:\n  FWdelay_bisimulation_diverge final1 r1 final2 r2 convert_RA bisim \"\\<lambda>x1 x2. True\" \"\\<lambda>s ta s'. False\" \"\\<lambda>s ta s'. False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim\n     (\\<lambda>x1 x2. True) (\\<lambda>s ta s'. False)\n     (\\<lambda>s ta s'. False)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim\n     (\\<lambda>x1 x2. True) (\\<lambda>s ta s'. False)\n     (\\<lambda>s ta s'. False)", "interpret biw: bisimulation_into_delay \"r1 t\" \"r2 t\" \"bisim t\" \"ta_bisim bisim\" \"\\<lambda>s ta s'. False\" \"\\<lambda>s ta s'. False\"\n    for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation_into_delay (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax\n     (\\<lambda>s ta s'. False) (\\<lambda>s ta s'. False)", "by(unfold_locales) simp"], ["proof (state)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim\n     (\\<lambda>x1 x2. True) (\\<lambda>s ta s'. False)\n     (\\<lambda>s ta s'. False)", "show \"FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim (\\<lambda>x1 x2. True) (\\<lambda>s ta s'. False) (\\<lambda>s ta s'. False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim\n     (\\<lambda>x1 x2. True) (\\<lambda>s ta s'. False)\n     (\\<lambda>s ta s'. False)", "proof(unfold_locales)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx> (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2');\n        ta1 \\<sim>m ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n 8. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 9. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n        \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n         r2.r_syntax t x2 m2 ta2 x2' m2';\n         Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n         WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                             r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                             t \\<turnstile> (x1', m1')\n                             \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\nA total of 11 subgoals...", "fix t' x m1 xx m2 x1 x2 t x1' ta1 x1'' m1' x2' ta2 x2'' m2'"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx> (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2');\n        ta1 \\<sim>m ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n 8. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 9. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n        \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n         r2.r_syntax t x2 m2 ta2 x2' m2';\n         Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n         WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                             r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                             t \\<turnstile> (x1', m1')\n                             \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\nA total of 11 subgoals...", "assume bisim: \"t' \\<turnstile> (x, m1) \\<approx> (xx, m2)\" and bisim12: \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\"\n      and \\<tau>1: \"\\<tau>trsys.silent_moves (r1 t) (\\<lambda>s ta s'. False) (x1, m1) (x1', m1)\" \n      and red1: \"t \\<turnstile> (x1', m1) -1-ta1\\<rightarrow> (x1'', m1')\"\n      and \\<tau>2: \"\\<tau>trsys.silent_moves (r2 t) (\\<lambda>s ta s'. False) (x2, m2) (x2', m2)\"\n      and red2: \"t \\<turnstile> (x2', m2) -2-ta2\\<rightarrow> (x2'', m2')\"\n      and bisim12': \"t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\" and tasim: \"ta1 \\<sim>m ta2\""], ["proof (state)\nthis:\n  t' \\<turnstile> (x, m1) \\<approx> (xx, m2)\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  biw.trsys1.silent_moves t (x1, m1) (x1', m1)\n  r1.r_syntax t x1' m1 ta1 x1'' m1'\n  biw.trsys2.silent_moves t (x2, m2) (x2', m2)\n  r2.r_syntax t x2' m2 ta2 x2'' m2'\n  t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2')\n  ta1 \\<sim>m ta2\n\ngoal (11 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx> (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2');\n        ta1 \\<sim>m ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n 8. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 9. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n        \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n         r2.r_syntax t x2 m2 ta2 x2' m2';\n         Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n         WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                             r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                             t \\<turnstile> (x1', m1')\n                             \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\nA total of 11 subgoals...", "from \\<tau>1 \\<tau>2"], ["proof (chain)\npicking this:\n  biw.trsys1.silent_moves t (x1, m1) (x1', m1)\n  biw.trsys2.silent_moves t (x2, m2) (x2', m2)", "have [simp]: \"x1' = x1\" \"x2' = x2\""], ["proof (prove)\nusing this:\n  biw.trsys1.silent_moves t (x1, m1) (x1', m1)\n  biw.trsys2.silent_moves t (x2, m2) (x2', m2)\n\ngoal (1 subgoal):\n 1. x1' = x1 &&& x2' = x2", "by(simp_all add: rtranclp_False \\<tau>moves_False)"], ["proof (state)\nthis:\n  x1' = x1\n  x2' = x2\n\ngoal (11 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t' x m1 xx m2 t x1 x2 x1' ta1 x1'' m1' x2' ta2 x2'' m2'.\n       \\<lbrakk>t' \\<turnstile> (x, m1) \\<approx> (xx, m2);\n        t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2');\n        ta1 \\<sim>m ta2\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n 8. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 9. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n        \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n         r2.r_syntax t x2 m2 ta2 x2' m2';\n         Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n         WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                             r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                             t \\<turnstile> (x1', m1')\n                             \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\nA total of 11 subgoals...", "from bisim12 bisim_inv_red_other[OF bisim _ red1 red2 bisim12' tasim]"], ["proof (chain)\npicking this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  t \\<turnstile> (x1', m1) \\<approx> (x2', m2) \\<Longrightarrow>\n  t' \\<turnstile> (x, m1') \\<approx> (xx, m2')", "show \"t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\""], ["proof (prove)\nusing this:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  t \\<turnstile> (x1', m1) \\<approx> (x2', m2) \\<Longrightarrow>\n  t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n\ngoal (1 subgoal):\n 1. t' \\<turnstile> (x, m1') \\<approx> (xx, m2')", "by simp"], ["proof (state)\nthis:\n  t' \\<turnstile> (x, m1') \\<approx> (xx, m2')\n\ngoal (10 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "fix t x1 m1 x2 m2 ta1 x1' m1'"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "assume \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\" \"t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', m1')\""], ["proof (state)\nthis:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  r1.r_syntax t x1 m1 ta1 x1' m1'\n\ngoal (10 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta1 x1' m1'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r1.r_syntax t x1 m1 ta1 x1' m1';\n        Notified \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta2 x2' m2'.\n                            r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 10. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "from simulation1[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>s2' tl2.\n     t \\<turnstile> (x2, m2) -2-tl2\\<rightarrow> s2' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> s2' \\<and> ta1 \\<sim>m tl2", "show \"\\<exists>ta2 x2' m2'. t \\<turnstile> (x2, m2) -2-ta2\\<rightarrow> (x2', m2') \\<and> t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\""], ["proof (prove)\nusing this:\n  \\<exists>s2' tl2.\n     t \\<turnstile> (x2, m2) -2-tl2\\<rightarrow> s2' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> s2' \\<and> ta1 \\<sim>m tl2\n\ngoal (1 subgoal):\n 1. \\<exists>ta2 x2' m2'.\n       r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n       t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2", "by auto"], ["proof (state)\nthis:\n  \\<exists>ta2 x2' m2'.\n     r2.r_syntax t x2 m2 ta2 x2' m2' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n\ngoal (9 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "fix t x1 m1 x2 m2 ta2 x2' m2'"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "assume \"t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\" \"t \\<turnstile> (x2, m2) -2-ta2\\<rightarrow> (x2', m2')\""], ["proof (state)\nthis:\n  t \\<turnstile> (x1, m1) \\<approx> (x2, m2)\n  r2.r_syntax t x2 m2 ta2 x2' m2'\n\ngoal (9 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. \\<And>t x1 m1 x2 m2 ta2 x2' m2'.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2); True;\n        r2.r_syntax t x2 m2 ta2 x2' m2';\n        Notified \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub> \\<or>\n        WokenUp \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta1 x1' m1'.\n                            r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n                            t \\<turnstile> (x1', m1')\n                            \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n 9. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "from simulation2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>s1' tl1.\n     t \\<turnstile> (x1, m1) -1-tl1\\<rightarrow> s1' \\<and>\n     t \\<turnstile> s1' \\<approx> (x2', m2') \\<and> tl1 \\<sim>m ta2", "show \"\\<exists>ta1 x1' m1'. t \\<turnstile> (x1, m1) -1-ta1\\<rightarrow> (x1', m1') \\<and> t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\""], ["proof (prove)\nusing this:\n  \\<exists>s1' tl1.\n     t \\<turnstile> (x1, m1) -1-tl1\\<rightarrow> s1' \\<and>\n     t \\<turnstile> s1' \\<approx> (x2', m2') \\<and> tl1 \\<sim>m ta2\n\ngoal (1 subgoal):\n 1. \\<exists>ta1 x1' m1'.\n       r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n       t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2", "by auto"], ["proof (state)\nthis:\n  \\<exists>ta1 x1' m1'.\n     r1.r_syntax t x1 m1 ta1 x1' m1' \\<and>\n     t \\<turnstile> (x1', m1') \\<approx> (x2', m2') \\<and> ta1 \\<sim>m ta2\n\ngoal (8 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True\n 8. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "show \"(\\<exists>x1. final1 x1) \\<longleftrightarrow> (\\<exists>x2. final2 x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)", "by(rule ex_final1_conv_ex_final2)"], ["proof (state)\nthis:\n  (\\<exists>x1. final1 x1) = (\\<exists>x2. final2 x2)\n\ngoal (7 subgoals):\n 1. \\<And>t x m ta x' m'.\n       \\<lbrakk>r1.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 2. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 3. \\<And>t x m ta x' m'.\n       \\<lbrakk>r2.r_syntax t x m ta x' m'; False\\<rbrakk>\n       \\<Longrightarrow> m = m'\n 4. \\<And>s ta s'. False \\<Longrightarrow> ta = \\<lbrace>\\<rbrace>\n 5. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s1 of (x1, m) \\<Rightarrow> final1 x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2'.\n                            biw.trsys2.silent_moves t s2 s2' \\<and>\n                            t \\<turnstile> s1 \\<approx> s2' \\<and>\n                            (case s2' of (x2, m) \\<Rightarrow> final2 x2)\n 6. \\<And>t s1 s2.\n       \\<lbrakk>t \\<turnstile> s1 \\<approx> s2;\n        case s2 of (x2, m) \\<Rightarrow> final2 x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1'.\n                            biw.trsys1.silent_moves t s1 s1' \\<and>\n                            t \\<turnstile> s1' \\<approx> s2 \\<and>\n                            (case s1' of (x1, m) \\<Rightarrow> final1 x1)\n 7. \\<And>t x1 m1 x2 m2 x1' ta1 x1'' m1' x2' ta2 x2'' m2' w.\n       \\<lbrakk>t \\<turnstile> (x1, m1) \\<approx> (x2, m2);\n        biw.trsys1.silent_moves t (x1, m1) (x1', m1);\n        r1.r_syntax t x1' m1 ta1 x1'' m1'; \\<not> False;\n        biw.trsys2.silent_moves t (x2, m2) (x2', m2);\n        r2.r_syntax t x2' m2 ta2 x2'' m2'; \\<not> False;\n        t \\<turnstile> (x1'', m1') \\<approx> (x2'', m2'); ta1 \\<sim>m ta2;\n        Suspend w \\<in> set \\<lbrace>ta1\\<rbrace>\\<^bsub>w\\<^esub>;\n        Suspend w \\<in> set \\<lbrace>ta2\\<rbrace>\\<^bsub>w\\<^esub>\\<rbrakk>\n       \\<Longrightarrow> True", "qed(fastforce simp add: bisim_final)+"], ["proof (state)\nthis:\n  FWdelay_bisimulation_diverge final1 r1 final2 r2 bisim\n   (\\<lambda>x1 x2. True) (\\<lambda>s ta s'. False)\n   (\\<lambda>s ta s'. False)\n\ngoal:\nNo subgoals!", "qed"], ["", "context FWbisimulation begin"], ["", "lemma FWbisimulation_flip: \"FWbisimulation final2 r2 final1 r1 (\\<lambda>t. flip (bisim t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation final2 r2 final1 r1 (\\<lambda>t. flip (bisim t))", "apply(rule FWbisimulation.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. multithreaded final2 r2\n 2. multithreaded final1 r1\n 3. FWbisimulation_axioms final2 r2 final1 r1 (\\<lambda>t. flip (bisim t))", "apply(rule r2.multithreaded_axioms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. multithreaded final1 r1\n 2. FWbisimulation_axioms final2 r2 final1 r1 (\\<lambda>t. flip (bisim t))", "apply(rule r1.multithreaded_axioms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation_axioms final2 r2 final1 r1 (\\<lambda>t. flip (bisim t))", "apply(rule FWbisimulation_axioms.intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       bisimulation (r2 t) (r1 t) (flip (bisim t))\n        (ta_bisim (\\<lambda>t. flip (bisim t)))\n 2. \\<And>t x1 m1 x2 m2.\n       flip (bisim t) (x1, m1) (x2, m2) \\<Longrightarrow>\n       final2 x1 = final1 x2\n 3. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>flip (bisim t') (x, m1) (xx, m2);\n        flip (bisim t) (x1, m1) (x2, m2); r2.r_syntax t x1 m1 ta1 x1' m1';\n        r1.r_syntax t x2 m2 ta2 x2' m2';\n        flip (bisim t) (x1', m1') (x2', m2');\n        ta_bisim (\\<lambda>t. flip (bisim t)) ta1 ta2\\<rbrakk>\n       \\<Longrightarrow> flip (bisim t') (x, m1') (xx, m2')\n 4. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(unfold flip_simps)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t. bisimulation (r1 t) (r2 t) (bisim t) ta_bisim_bisim_syntax\n 2. \\<And>t x1 m1 x2 m2.\n       t \\<turnstile> (x2, m2) \\<approx> (x1, m1) \\<Longrightarrow>\n       final2 x1 = final1 x2\n 3. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (xx, m2) \\<approx> (x, m1);\n        t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.r_syntax t x1 m1 ta1 x1' m1'; r1.r_syntax t x2 m2 ta2 x2' m2';\n        t \\<turnstile> (x2', m2') \\<approx> (x1', m1');\n        ta2 \\<sim>m ta1\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (xx, m2') \\<approx> (x, m1')\n 4. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(rule bisimulation_axioms)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t x1 m1 x2 m2.\n       t \\<turnstile> (x2, m2) \\<approx> (x1, m1) \\<Longrightarrow>\n       final2 x1 = final1 x2\n 2. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (xx, m2) \\<approx> (x, m1);\n        t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.r_syntax t x1 m1 ta1 x1' m1'; r1.r_syntax t x2 m2 ta2 x2' m2';\n        t \\<turnstile> (x2', m2') \\<approx> (x1', m1');\n        ta2 \\<sim>m ta1\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (xx, m2') \\<approx> (x, m1')\n 3. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(erule bisim_final[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t' x m1 xx m2 t x1 x2 ta1 x1' m1' ta2 x2' m2'.\n       \\<lbrakk>t' \\<turnstile> (xx, m2) \\<approx> (x, m1);\n        t \\<turnstile> (x2, m2) \\<approx> (x1, m1);\n        r2.r_syntax t x1 m1 ta1 x1' m1'; r1.r_syntax t x2 m2 ta2 x2' m2';\n        t \\<turnstile> (x2', m2') \\<approx> (x1', m1');\n        ta2 \\<sim>m ta1\\<rbrakk>\n       \\<Longrightarrow> t' \\<turnstile> (xx, m2') \\<approx> (x, m1')\n 2. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(erule (5) bisim_inv_red_other)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x1. final2 x1) = (\\<exists>x2. final1 x2)", "apply(rule ex_final1_conv_ex_final2[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemma FWbisimulation_flip_simps [flip_simps]:\n  \"FWbisimulation final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) = FWbisimulation final1 r1 final2 r2 bisim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FWbisimulation final2 r2 final1 r1 (\\<lambda>t. flip (bisim t)) =\n    FWbisimulation final1 r1 final2 r2 bisim", "by(auto dest: FWbisimulation.FWbisimulation_flip simp only: flip_flip)"], ["", "context FWbisimulation begin"], ["", "text \\<open>\n  The notation for mbisim is lost because @{term \"bisim_wait\"} is instantiated to @{term \"\\<lambda>x1 x2. True\"}.\n  This reintroduces the syntax, but it does not work for output mode. This would require a new abbreviation.\n\\<close>"], ["", "notation mbisim (\"_ \\<approx>m _\" [50, 50] 60)"], ["", "theorem mbisim_bisimulation:\n  \"bisimulation r1.redT r2.redT mbisim mta_bisim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation r1.redT r2.redT mbisim mta_bisim", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2 tl1 s1'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' tl2.\n                            r2.redT s2 tl2 s2' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' tl1.\n                            r1.redT s1 tl1 s1' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "fix s1 s2 tta1 s1'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s1 s2 tl1 s1'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' tl2.\n                            r2.redT s2 tl2 s2' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' tl1.\n                            r1.redT s1 tl1 s1' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "assume mbisim: \"s1 \\<approx>m s2\" and \"r1.redT s1 tta1 s1'\""], ["proof (state)\nthis:\n  s1 \\<approx>m s2\n  r1.redT s1 tta1 s1'\n\ngoal (2 subgoals):\n 1. \\<And>s1 s2 tl1 s1'.\n       \\<lbrakk>s1 \\<approx>m s2; r1.redT s1 tl1 s1'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2' tl2.\n                            r2.redT s2 tl2 s2' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2\n 2. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' tl1.\n                            r1.redT s1 tl1 s1' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "from mthr.simulation1[OF this]"], ["proof (chain)\npicking this:\n  \\<not> m\\<tau>move1 s1 tta1 s1' \\<Longrightarrow>\n  \\<exists>s2' s2'' tl2.\n     \\<tau>mRed2 s2 s2' \\<and>\n     r2.redT s2' tl2 s2'' \\<and>\n     \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and> tta1 \\<sim>T tl2", "show \"\\<exists>s2' tta2. r2.redT s2 tta2 s2' \\<and> s1' \\<approx>m s2' \\<and> tta1 \\<sim>T tta2\""], ["proof (prove)\nusing this:\n  \\<not> m\\<tau>move1 s1 tta1 s1' \\<Longrightarrow>\n  \\<exists>s2' s2'' tl2.\n     \\<tau>mRed2 s2 s2' \\<and>\n     r2.redT s2' tl2 s2'' \\<and>\n     \\<not> m\\<tau>move2 s2' tl2 s2'' \\<and>\n     s1' \\<approx>m s2'' \\<and> tta1 \\<sim>T tl2\n\ngoal (1 subgoal):\n 1. \\<exists>s2' tta2.\n       r2.redT s2 tta2 s2' \\<and>\n       s1' \\<approx>m s2' \\<and> tta1 \\<sim>T tta2", "by(auto simp add: \\<tau>moves_False m\\<tau>move_False)"], ["proof (state)\nthis:\n  \\<exists>s2' tta2.\n     r2.redT s2 tta2 s2' \\<and> s1' \\<approx>m s2' \\<and> tta1 \\<sim>T tta2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' tl1.\n                            r1.redT s1 tl1 s1' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' tl1.\n                            r1.redT s1 tl1 s1' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "fix s2 s1 tta2 s2'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' tl1.\n                            r1.redT s1 tl1 s1' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "assume \"s1 \\<approx>m s2\" and \"r2.redT s2 tta2 s2'\""], ["proof (state)\nthis:\n  s1 \\<approx>m s2\n  r2.redT s2 tta2 s2'\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 tl2 s2'.\n       \\<lbrakk>s1 \\<approx>m s2; r2.redT s2 tl2 s2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1' tl1.\n                            r1.redT s1 tl1 s1' \\<and>\n                            s1' \\<approx>m s2' \\<and> tl1 \\<sim>T tl2", "from mthr.simulation2[OF this]"], ["proof (chain)\npicking this:\n  \\<not> m\\<tau>move2 s2 tta2 s2' \\<Longrightarrow>\n  \\<exists>s1' s1'' tl1.\n     \\<tau>mRed1 s1 s1' \\<and>\n     r1.redT s1' tl1 s1'' \\<and>\n     \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n     s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tta2", "show \"\\<exists>s1' tta1. r1.redT s1 tta1 s1' \\<and> s1' \\<approx>m s2' \\<and> tta1 \\<sim>T tta2\""], ["proof (prove)\nusing this:\n  \\<not> m\\<tau>move2 s2 tta2 s2' \\<Longrightarrow>\n  \\<exists>s1' s1'' tl1.\n     \\<tau>mRed1 s1 s1' \\<and>\n     r1.redT s1' tl1 s1'' \\<and>\n     \\<not> m\\<tau>move1 s1' tl1 s1'' \\<and>\n     s1'' \\<approx>m s2' \\<and> tl1 \\<sim>T tta2\n\ngoal (1 subgoal):\n 1. \\<exists>s1' tta1.\n       r1.redT s1 tta1 s1' \\<and>\n       s1' \\<approx>m s2' \\<and> tta1 \\<sim>T tta2", "by(auto simp add: \\<tau>moves_False m\\<tau>move_False)"], ["proof (state)\nthis:\n  \\<exists>s1' tta1.\n     r1.redT s1 tta1 s1' \\<and> s1' \\<approx>m s2' \\<and> tta1 \\<sim>T tta2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mbisim_wset_eq:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> wset s1 = wset s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow> wset s1 = wset s2", "by(simp add: mbisim_def)"], ["", "lemma mbisim_mfinal:\n  \"s1 \\<approx>m s2 \\<Longrightarrow> r1.mfinal s1 \\<longleftrightarrow> r2.mfinal s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<approx>m s2 \\<Longrightarrow> r1.mfinal s1 = r2.mfinal s2", "apply(auto intro!: r2.mfinalI r1.mfinalI dest: mbisim_thrD2 mbisim_thrD1 bisim_final elim: r1.mfinalE r2.mfinalE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x ln.\n       \\<lbrakk>s1 \\<approx>m s2; r1.mfinal s1;\n        thr s2 t = \\<lfloor>(x, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> wset s2 t = None\n 2. \\<And>t x ln.\n       \\<lbrakk>s1 \\<approx>m s2; r2.mfinal s2;\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> wset s1 t = None", "apply(frule (1) mbisim_thrD2, drule mbisim_wset_eq, auto elim: r1.mfinalE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x ln.\n       \\<lbrakk>s1 \\<approx>m s2; r2.mfinal s2;\n        thr s1 t = \\<lfloor>(x, ln)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> wset s1 t = None", "apply(frule (1) mbisim_thrD1, drule mbisim_wset_eq, auto elim: r2.mfinalE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "sublocale FWbisimulation < mthr: bisimulation r1.redT r2.redT mbisim mta_bisim"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation r1.redT r2.redT mbisim mta_bisim", "by(rule mbisim_bisimulation)"], ["", "sublocale FWbisimulation < mthr: bisimulation_final r1.redT r2.redT mbisim mta_bisim r1.mfinal r2.mfinal"], ["proof (prove)\ngoal (1 subgoal):\n 1. bisimulation_final r1.redT r2.redT mbisim mta_bisim r1.mfinal r2.mfinal", "by(unfold_locales)(rule mbisim_mfinal)"], ["", "end"]]}