{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaThreads/DFA/Opt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaThreads", "problem_names": ["lemma unfold_le_opt:\n  \"o\\<^sub>1 \\<sqsubseteq>\\<^bsub>le r\\<^esub> o\\<^sub>2 = \n  (case o\\<^sub>2 of None \\<Rightarrow> o\\<^sub>1=None | \n              Some y \\<Rightarrow> (case o\\<^sub>1 of None \\<Rightarrow> True | Some x \\<Rightarrow> x \\<sqsubseteq>\\<^sub>r y))\"", "lemma le_opt_refl: \"order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> x\"", "lemma le_opt_trans [rule_format]:\n  \"order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> y \\<longrightarrow> y \\<sqsubseteq>\\<^bsub>le r\\<^esub> z \\<longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> z\"", "lemma le_opt_antisym [rule_format]:\n  \"order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> y \\<longrightarrow> y \\<sqsubseteq>\\<^bsub>le r\\<^esub> x \\<longrightarrow> x=y\"", "lemma order_le_opt [intro!,simp]: \"order r \\<Longrightarrow> order(le r)\"", "lemma None_bot [iff]:  \"None \\<sqsubseteq>\\<^bsub>le r\\<^esub> ox\"", "lemma Some_le [iff]: \"(Some x \\<sqsubseteq>\\<^bsub>le r\\<^esub> z) = (\\<exists>y. z = Some y \\<and> x \\<sqsubseteq>\\<^sub>r y)\"", "lemma le_None [iff]: \"(x \\<sqsubseteq>\\<^bsub>le r\\<^esub> None) = (x = None)\"", "lemma OK_None_bot [iff]: \"OK None \\<sqsubseteq>\\<^bsub>Err.le (le r)\\<^esub> x\"", "lemma sup_None1 [iff]: \"x \\<squnion>\\<^bsub>sup f\\<^esub> None = OK x\"", "lemma sup_None2 [iff]: \"None \\<squnion>\\<^bsub>sup f\\<^esub> x = OK x\"", "lemma None_in_opt [iff]: \"None \\<in> opt A\"", "lemma Some_in_opt [iff]: \"(Some x \\<in> opt A) = (x \\<in> A)\"", "lemma semilat_opt [intro, simp]:\n  \"err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)\"", "lemma top_le_opt_Some [iff]: \"top (le r) (Some T) = top r T\"", "lemma Top_le_conv:  \"\\<lbrakk> order r; top r T \\<rbrakk> \\<Longrightarrow> (T \\<sqsubseteq>\\<^sub>r x) = (x = T)\"", "lemma acc_le_optI [intro!]: \"acc A r \\<Longrightarrow> acc (opt A) (le r)\"", "lemma map_option_in_optionI:\n  \"\\<lbrakk> ox \\<in> opt S; \\<forall>x\\<in>S. ox = Some x \\<longrightarrow> f x \\<in> S \\<rbrakk> \n  \\<Longrightarrow> map_option f ox \\<in> opt S\""], "translations": [["", "lemma unfold_le_opt:\n  \"o\\<^sub>1 \\<sqsubseteq>\\<^bsub>le r\\<^esub> o\\<^sub>2 = \n  (case o\\<^sub>2 of None \\<Rightarrow> o\\<^sub>1=None | \n              Some y \\<Rightarrow> (case o\\<^sub>1 of None \\<Rightarrow> True | Some x \\<Rightarrow> x \\<sqsubseteq>\\<^sub>r y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (o\\<^sub>1 \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> o\\<^sub>2) =\n    (case o\\<^sub>2 of None \\<Rightarrow> o\\<^sub>1 = None\n     | Some y \\<Rightarrow>\n         case o\\<^sub>1 of None \\<Rightarrow> True\n         | Some x \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> y)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (o\\<^sub>1 \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> o\\<^sub>2) =\n    (case o\\<^sub>2 of None \\<Rightarrow> o\\<^sub>1 = None\n     | Some y \\<Rightarrow>\n         case o\\<^sub>1 of None \\<Rightarrow> True\n         | Some x \\<Rightarrow> x \\<sqsubseteq>\\<^bsub>r\\<^esub> y)", "apply (unfold lesub_def le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case o\\<^sub>2 of None \\<Rightarrow> o\\<^sub>1 = None\n     | Some y \\<Rightarrow>\n         case o\\<^sub>1 of None \\<Rightarrow> True\n         | Some x \\<Rightarrow> r x y) =\n    (case o\\<^sub>2 of None \\<Rightarrow> o\\<^sub>1 = None\n     | Some y \\<Rightarrow>\n         case o\\<^sub>1 of None \\<Rightarrow> True\n         | Some x \\<Rightarrow> r x y)", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_opt_refl: \"order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> x", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> x", "by (simp add: unfold_le_opt split: option.split)"], ["", "(*<*)"], ["", "lemma le_opt_trans [rule_format]:\n  \"order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> y \\<longrightarrow> y \\<sqsubseteq>\\<^bsub>le r\\<^esub> z \\<longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> y \\<longrightarrow>\n    y \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z \\<longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> y \\<longrightarrow>\n    y \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z \\<longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z", "apply (simp add: unfold_le_opt split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    \\<forall>x2 x2a.\n       x = Some x2a \\<longrightarrow>\n       z = Some x2 \\<longrightarrow>\n       (\\<forall>x2b.\n           y = Some x2b \\<longrightarrow>\n           x2a \\<sqsubseteq>\\<^bsub>r\\<^esub> x2b \\<longrightarrow>\n           x2b \\<sqsubseteq>\\<^bsub>r\\<^esub> x2 \\<longrightarrow>\n           x2a \\<sqsubseteq>\\<^bsub>r\\<^esub> x2)", "apply (blast intro: order_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_opt_antisym [rule_format]:\n  \"order r \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>le r\\<^esub> y \\<longrightarrow> y \\<sqsubseteq>\\<^bsub>le r\\<^esub> x \\<longrightarrow> x=y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> y \\<longrightarrow>\n    y \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> x \\<longrightarrow> x = y", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> y \\<longrightarrow>\n    y \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> x \\<longrightarrow> x = y", "apply (simp add: unfold_le_opt split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    \\<forall>x2.\n       x = Some x2 \\<longrightarrow>\n       (\\<forall>x2a.\n           y = Some x2a \\<longrightarrow>\n           x2 \\<sqsubseteq>\\<^bsub>r\\<^esub> x2a \\<longrightarrow>\n           x2a \\<sqsubseteq>\\<^bsub>r\\<^esub> x2 \\<longrightarrow> x2 = x2a)", "apply (blast intro: order_antisym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma order_le_opt [intro!,simp]: \"order r \\<Longrightarrow> order(le r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow> order (Opt.le r)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow> order (Opt.le r)", "apply (subst order_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. order r \\<Longrightarrow>\n    (\\<forall>x. x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> x) \\<and>\n    (\\<forall>x y.\n        x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> y \\<and>\n        y \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> x \\<longrightarrow>\n        x = y) \\<and>\n    (\\<forall>x y z.\n        x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> y \\<and>\n        y \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z \\<longrightarrow>\n        x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z)", "apply (blast intro: le_opt_refl le_opt_trans le_opt_antisym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma None_bot [iff]:  \"None \\<sqsubseteq>\\<^bsub>le r\\<^esub> ox\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> ox", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> ox", "apply (unfold lesub_def le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. case ox of None \\<Rightarrow> None = None\n    | Some y \\<Rightarrow>\n        case None of None \\<Rightarrow> True | Some x \\<Rightarrow> r x y", "apply (simp split: option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Some_le [iff]: \"(Some x \\<sqsubseteq>\\<^bsub>le r\\<^esub> z) = (\\<exists>y. z = Some y \\<and> x \\<sqsubseteq>\\<^sub>r y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z) =\n    (\\<exists>y. z = Some y \\<and> x \\<sqsubseteq>\\<^bsub>r\\<^esub> y)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> z) =\n    (\\<exists>y. z = Some y \\<and> x \\<sqsubseteq>\\<^bsub>r\\<^esub> y)", "apply (unfold lesub_def le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case z of None \\<Rightarrow> Some x = None\n     | Some y \\<Rightarrow>\n         case Some x of None \\<Rightarrow> True\n         | Some x \\<Rightarrow> r x y) =\n    (\\<exists>y. z = Some y \\<and> r x y)", "apply (simp split: option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma le_None [iff]: \"(x \\<sqsubseteq>\\<^bsub>le r\\<^esub> None) = (x = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> None) = (x = None)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> None) = (x = None)", "apply (unfold lesub_def le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case None of None \\<Rightarrow> x = None\n     | Some y \\<Rightarrow>\n         case x of None \\<Rightarrow> True | Some x \\<Rightarrow> r x y) =\n    (x = None)", "apply (simp split: option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma OK_None_bot [iff]: \"OK None \\<sqsubseteq>\\<^bsub>Err.le (le r)\\<^esub> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OK None \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> x", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OK None \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> x", "by (simp add: lesub_def Err.le_def le_def split: option.split err.split)"], ["", "(*>*)"], ["", "lemma sup_None1 [iff]: \"x \\<squnion>\\<^bsub>sup f\\<^esub> None = OK x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<squnion>\\<^bsub>Opt.sup f\\<^esub> None = OK x", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<squnion>\\<^bsub>Opt.sup f\\<^esub> None = OK x", "by (simp add: plussub_def sup_def split: option.split)"], ["", "(*>*)"], ["", "lemma sup_None2 [iff]: \"None \\<squnion>\\<^bsub>sup f\\<^esub> x = OK x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<squnion>\\<^bsub>Opt.sup f\\<^esub> x = OK x", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<squnion>\\<^bsub>Opt.sup f\\<^esub> x = OK x", "by (simp add: plussub_def sup_def split: option.split)"], ["", "(*>*)"], ["", "lemma None_in_opt [iff]: \"None \\<in> opt A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<in> opt A", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. None \\<in> opt A", "by (simp add: opt_def)"], ["", "(*>*)"], ["", "lemma Some_in_opt [iff]: \"(Some x \\<in> opt A) = (x \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some x \\<in> opt A) = (x \\<in> A)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some x \\<in> opt A) = (x \\<in> A)", "by (unfold opt_def) auto"], ["", "(*>*)"], ["", "lemma semilat_opt [intro, simp]:\n  \"err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "assume s: \"err_semilat L\""], ["proof (state)\nthis:\n  err_semilat L\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "obtain A r f where [simp]: \"L = (A,r,f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A r f. L = (A, r, f) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases L)"], ["proof (state)\nthis:\n  L = (A, r, f)\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "let ?A0 = \"err A\" and ?r0 = \"Err.le r\" and ?f0 = \"lift2 f\""], ["proof (state)\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "from s"], ["proof (chain)\npicking this:\n  err_semilat L", "obtain\n    ord: \"order ?r0\" and\n    clo: \"closed ?A0 ?f0\" and\n    ub1: \"\\<forall>x\\<in>?A0. \\<forall>y\\<in>?A0. x \\<sqsubseteq>\\<^bsub>?r0\\<^esub> x \\<squnion>\\<^bsub>?f0\\<^esub> y\" and\n    ub2: \"\\<forall>x\\<in>?A0. \\<forall>y\\<in>?A0. y \\<sqsubseteq>\\<^bsub>?r0\\<^esub> x \\<squnion>\\<^bsub>?f0\\<^esub> y\" and\n    lub: \"\\<forall>x\\<in>?A0. \\<forall>y\\<in>?A0. \\<forall>z\\<in>?A0. x \\<sqsubseteq>\\<^bsub>?r0\\<^esub> z \\<and> y \\<sqsubseteq>\\<^bsub>?r0\\<^esub> z \\<longrightarrow> x \\<squnion>\\<^bsub>?f0\\<^esub> y \\<sqsubseteq>\\<^bsub>?r0\\<^esub> z\""], ["proof (prove)\nusing this:\n  err_semilat L\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>order (Err.le r); closed (err A) (lift2 f);\n      \\<forall>x\\<in>err A.\n         \\<forall>y\\<in>err A.\n            x \\<sqsubseteq>\\<^bsub>Err.le\n                                    r\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 f\\<^esub> y;\n      \\<forall>x\\<in>err A.\n         \\<forall>y\\<in>err A.\n            y \\<sqsubseteq>\\<^bsub>Err.le\n                                    r\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 f\\<^esub> y;\n      \\<forall>x\\<in>err A.\n         \\<forall>y\\<in>err A.\n            \\<forall>z\\<in>err A.\n               x \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<and>\n               y \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<longrightarrow>\n               x \\<squnion>\\<^bsub>lift2 f\\<^esub> y \n               \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (unfold semilat_def sl_def) simp"], ["proof (state)\nthis:\n  order (Err.le r)\n  closed (err A) (lift2 f)\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        x \\<sqsubseteq>\\<^bsub>Err.le\n                                r\\<^esub> x \n    \\<squnion>\\<^bsub>lift2 f\\<^esub> y\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        y \\<sqsubseteq>\\<^bsub>Err.le\n                                r\\<^esub> x \n    \\<squnion>\\<^bsub>lift2 f\\<^esub> y\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        \\<forall>z\\<in>err A.\n           x \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>lift2 f\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "let ?A = \"err (opt A)\" and ?r = \"Err.le (Opt.le r)\" and ?f = \"lift2 (Opt.sup f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "from ord"], ["proof (chain)\npicking this:\n  order (Err.le r)", "have \"order ?r\""], ["proof (prove)\nusing this:\n  order (Err.le r)\n\ngoal (1 subgoal):\n 1. order (Err.le (Opt.le r))", "by simp"], ["proof (state)\nthis:\n  order (Err.le (Opt.le r))\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "moreover"], ["proof (state)\nthis:\n  order (Err.le (Opt.le r))\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "have \"closed ?A ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (err (opt A)) (lift2 (Opt.sup f))", "proof (unfold closed_def, intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "assume x: \"x \\<in> ?A\" and y: \"y \\<in> ?A\""], ["proof (state)\nthis:\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "{"], ["proof (state)\nthis:\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "assume ab: \"x = OK a\" \"y = OK b\""], ["proof (state)\nthis:\n  x = OK a\n  y = OK b\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "with x"], ["proof (chain)\npicking this:\n  x \\<in> err (opt A)\n  x = OK a\n  y = OK b", "have a: \"\\<And>c. a = Some c \\<Longrightarrow> c \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> err (opt A)\n  x = OK a\n  y = OK b\n\ngoal (1 subgoal):\n 1. \\<And>c. a = Some c \\<Longrightarrow> c \\<in> A", "by (clarsimp simp add: opt_def)"], ["proof (state)\nthis:\n  a = Some ?c \\<Longrightarrow> ?c \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "from ab y"], ["proof (chain)\npicking this:\n  x = OK a\n  y = OK b\n  y \\<in> err (opt A)", "have b: \"\\<And>d. b = Some d \\<Longrightarrow> d \\<in> A\""], ["proof (prove)\nusing this:\n  x = OK a\n  y = OK b\n  y \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. \\<And>d. b = Some d \\<Longrightarrow> d \\<in> A", "by (clarsimp simp add: opt_def)"], ["proof (state)\nthis:\n  b = Some ?d \\<Longrightarrow> ?d \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "{"], ["proof (state)\nthis:\n  b = Some ?d \\<Longrightarrow> ?d \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "fix c d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "assume \"a = Some c\" \"b = Some d\""], ["proof (state)\nthis:\n  a = Some c\n  b = Some d\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "with ab x y"], ["proof (chain)\npicking this:\n  x = OK a\n  y = OK b\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  a = Some c\n  b = Some d", "have \"c \\<in> A & d \\<in> A\""], ["proof (prove)\nusing this:\n  x = OK a\n  y = OK b\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  a = Some c\n  b = Some d\n\ngoal (1 subgoal):\n 1. c \\<in> A \\<and> d \\<in> A", "by (simp add: err_def opt_def Bex_def)"], ["proof (state)\nthis:\n  c \\<in> A \\<and> d \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "with clo"], ["proof (chain)\npicking this:\n  closed (err A) (lift2 f)\n  c \\<in> A \\<and> d \\<in> A", "have \"f c d \\<in> err A\""], ["proof (prove)\nusing this:\n  closed (err A) (lift2 f)\n  c \\<in> A \\<and> d \\<in> A\n\ngoal (1 subgoal):\n 1. f c d \\<in> err A", "by (simp add: closed_def plussub_def err_def' lift2_def)"], ["proof (state)\nthis:\n  f c d \\<in> err A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "moreover"], ["proof (state)\nthis:\n  f c d \\<in> err A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "assume \"f c d = OK z\""], ["proof (state)\nthis:\n  f c d = OK z\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "ultimately"], ["proof (chain)\npicking this:\n  f c d \\<in> err A\n  f c d = OK z", "have \"z \\<in> A\""], ["proof (prove)\nusing this:\n  f c d \\<in> err A\n  f c d = OK z\n\ngoal (1 subgoal):\n 1. z \\<in> A", "by simp"], ["proof (state)\nthis:\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a = Some ?c2; b = Some ?d2; f ?c2 ?d2 = OK ?z2\\<rbrakk>\n  \\<Longrightarrow> ?z2 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "note f_closed = this"], ["proof (state)\nthis:\n  \\<lbrakk>a = Some ?c2; b = Some ?d2; f ?c2 ?d2 = OK ?z2\\<rbrakk>\n  \\<Longrightarrow> ?z2 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "have \"sup f a b \\<in> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Opt.sup f a b \\<in> err (opt A)", "proof (cases a)"], ["proof (state)\ngoal (2 subgoals):\n 1. a = None \\<Longrightarrow> Opt.sup f a b \\<in> err (opt A)\n 2. \\<And>aa. a = Some aa \\<Longrightarrow> Opt.sup f a b \\<in> err (opt A)", "case None"], ["proof (state)\nthis:\n  a = None\n\ngoal (2 subgoals):\n 1. a = None \\<Longrightarrow> Opt.sup f a b \\<in> err (opt A)\n 2. \\<And>aa. a = Some aa \\<Longrightarrow> Opt.sup f a b \\<in> err (opt A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = None\n\ngoal (1 subgoal):\n 1. Opt.sup f a b \\<in> err (opt A)", "by (simp add: sup_def opt_def) (cases b, simp, simp add: b Bex_def)"], ["proof (state)\nthis:\n  Opt.sup f a b \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. \\<And>aa. a = Some aa \\<Longrightarrow> Opt.sup f a b \\<in> err (opt A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa. a = Some aa \\<Longrightarrow> Opt.sup f a b \\<in> err (opt A)", "case Some"], ["proof (state)\nthis:\n  a = Some a_\n\ngoal (1 subgoal):\n 1. \\<And>aa. a = Some aa \\<Longrightarrow> Opt.sup f a b \\<in> err (opt A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Some a_\n\ngoal (1 subgoal):\n 1. Opt.sup f a b \\<in> err (opt A)", "by (auto simp add: sup_def opt_def Bex_def a b f_closed split: err.split option.split)"], ["proof (state)\nthis:\n  Opt.sup f a b \\<in> err (opt A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Opt.sup f a b \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>x = OK ?a2; y = OK ?b2\\<rbrakk>\n  \\<Longrightarrow> Opt.sup f ?a2 ?b2 \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A)\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y\n                         \\<in> err (opt A)", "thus \"x \\<squnion>\\<^bsub>?f\\<^esub> y \\<in> ?A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x = OK ?a2; y = OK ?b2\\<rbrakk>\n  \\<Longrightarrow> Opt.sup f ?a2 ?b2 \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \\<in> err (opt A)", "by (simp add: plussub_def lift2_def split: err.split)"], ["proof (state)\nthis:\n  x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \\<in> err (opt A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  closed (err (opt A)) (lift2 (Opt.sup f))\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "moreover"], ["proof (state)\nthis:\n  closed (err (opt A)) (lift2 (Opt.sup f))\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "{"], ["proof (state)\nthis:\n  closed (err (opt A)) (lift2 (Opt.sup f))\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "fix a b c"], ["proof (state)\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "assume \"a \\<in> opt A\" and \"b \\<in> opt A\" and \"a \\<squnion>\\<^bsub>sup f\\<^esub> b = OK c\""], ["proof (state)\nthis:\n  a \\<in> opt A\n  b \\<in> opt A\n  a \\<squnion>\\<^bsub>Opt.sup f\\<^esub> b = OK c\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "moreover"], ["proof (state)\nthis:\n  a \\<in> opt A\n  b \\<in> opt A\n  a \\<squnion>\\<^bsub>Opt.sup f\\<^esub> b = OK c\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "from ord"], ["proof (chain)\npicking this:\n  order (Err.le r)", "have \"order r\""], ["proof (prove)\nusing this:\n  order (Err.le r)\n\ngoal (1 subgoal):\n 1. order r", "by simp"], ["proof (state)\nthis:\n  order r\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "moreover"], ["proof (state)\nthis:\n  order r\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "{"], ["proof (state)\nthis:\n  order r\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "assume \"x \\<in> A\" and \"y \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "hence \"OK x \\<in> err A \\<and> OK y \\<in> err A\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. OK x \\<in> err A \\<and> OK y \\<in> err A", "by simp"], ["proof (state)\nthis:\n  OK x \\<in> err A \\<and> OK y \\<in> err A\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "with ub1 ub2"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        x \\<sqsubseteq>\\<^bsub>Err.le\n                                r\\<^esub> x \n    \\<squnion>\\<^bsub>lift2 f\\<^esub> y\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        y \\<sqsubseteq>\\<^bsub>Err.le\n                                r\\<^esub> x \n    \\<squnion>\\<^bsub>lift2 f\\<^esub> y\n  OK x \\<in> err A \\<and> OK y \\<in> err A", "have \"(OK x) \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> (OK x) \\<squnion>\\<^bsub>lift2 f\\<^esub> (OK y) \\<and>\n            (OK y) \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> (OK x) \\<squnion>\\<^bsub>lift2 f\\<^esub> (OK y)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        x \\<sqsubseteq>\\<^bsub>Err.le\n                                r\\<^esub> x \n    \\<squnion>\\<^bsub>lift2 f\\<^esub> y\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        y \\<sqsubseteq>\\<^bsub>Err.le\n                                r\\<^esub> x \n    \\<squnion>\\<^bsub>lift2 f\\<^esub> y\n  OK x \\<in> err A \\<and> OK y \\<in> err A\n\ngoal (1 subgoal):\n 1. OK x \n    \\<sqsubseteq>\\<^bsub>Err.le\n                          r\\<^esub> OK x \n                                    \\<squnion>\\<^bsub>lift2\n                 f\\<^esub> OK y \\<and>\n    OK y \n    \\<sqsubseteq>\\<^bsub>Err.le\n                          r\\<^esub> OK x \n                                    \\<squnion>\\<^bsub>lift2 f\\<^esub> OK y", "by blast"], ["proof (state)\nthis:\n  OK x \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2\n               f\\<^esub> OK y \\<and>\n  OK y \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2 f\\<^esub> OK y\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "moreover"], ["proof (state)\nthis:\n  OK x \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2\n               f\\<^esub> OK y \\<and>\n  OK y \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2 f\\<^esub> OK y\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "assume \"x \\<squnion>\\<^sub>f y = OK z\""], ["proof (state)\nthis:\n  x \\<squnion>\\<^bsub>f\\<^esub> y = OK z\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "ultimately"], ["proof (chain)\npicking this:\n  OK x \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2\n               f\\<^esub> OK y \\<and>\n  OK y \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2 f\\<^esub> OK y\n  x \\<squnion>\\<^bsub>f\\<^esub> y = OK z", "have \"x \\<sqsubseteq>\\<^sub>r z \\<and> y \\<sqsubseteq>\\<^sub>r z\""], ["proof (prove)\nusing this:\n  OK x \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2\n               f\\<^esub> OK y \\<and>\n  OK y \n  \\<sqsubseteq>\\<^bsub>Err.le\n                        r\\<^esub> OK x \n                                  \\<squnion>\\<^bsub>lift2 f\\<^esub> OK y\n  x \\<squnion>\\<^bsub>f\\<^esub> y = OK z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n    y \\<sqsubseteq>\\<^bsub>r\\<^esub> z", "by (auto simp add: plussub_def lift2_def Err.le_def lesub_def)"], ["proof (state)\nthis:\n  x \\<sqsubseteq>\\<^bsub>r\\<^esub> z \\<and>\n  y \\<sqsubseteq>\\<^bsub>r\\<^esub> z\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> A; ?y2 \\<in> A;\n   ?x2 \\<squnion>\\<^bsub>f\\<^esub> ?y2 = OK ?z2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<sqsubseteq>\\<^bsub>r\\<^esub> ?z2 \\<and>\n                    ?y2 \\<sqsubseteq>\\<^bsub>r\\<^esub> ?z2\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> opt A\n  b \\<in> opt A\n  a \\<squnion>\\<^bsub>Opt.sup f\\<^esub> b = OK c\n  order r\n  \\<lbrakk>?x2 \\<in> A; ?y2 \\<in> A;\n   ?x2 \\<squnion>\\<^bsub>f\\<^esub> ?y2 = OK ?z2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<sqsubseteq>\\<^bsub>r\\<^esub> ?z2 \\<and>\n                    ?y2 \\<sqsubseteq>\\<^bsub>r\\<^esub> ?z2", "have \"a \\<sqsubseteq>\\<^bsub>le r\\<^esub> c \\<and> b \\<sqsubseteq>\\<^bsub>le r\\<^esub> c\""], ["proof (prove)\nusing this:\n  a \\<in> opt A\n  b \\<in> opt A\n  a \\<squnion>\\<^bsub>Opt.sup f\\<^esub> b = OK c\n  order r\n  \\<lbrakk>?x2 \\<in> A; ?y2 \\<in> A;\n   ?x2 \\<squnion>\\<^bsub>f\\<^esub> ?y2 = OK ?z2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<sqsubseteq>\\<^bsub>r\\<^esub> ?z2 \\<and>\n                    ?y2 \\<sqsubseteq>\\<^bsub>r\\<^esub> ?z2\n\ngoal (1 subgoal):\n 1. a \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> c \\<and>\n    b \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> c", "by (auto simp add: sup_def le_def lesub_def plussub_def \n               dest: order_refl split: option.splits err.splits)"], ["proof (state)\nthis:\n  a \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> c \\<and>\n  b \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> c\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?a2 \\<in> opt A; ?b2 \\<in> opt A;\n   ?a2 \\<squnion>\\<^bsub>Opt.sup f\\<^esub> ?b2 = OK ?c2\\<rbrakk>\n  \\<Longrightarrow> ?a2 \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> ?c2 \\<and>\n                    ?b2 \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> ?c2\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "hence \"(\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. x \\<sqsubseteq>\\<^bsub>?r\\<^esub> x \\<squnion>\\<^bsub>?f\\<^esub> y) \\<and> (\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. y \\<sqsubseteq>\\<^bsub>?r\\<^esub> x \\<squnion>\\<^bsub>?f\\<^esub> y)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?a2 \\<in> opt A; ?b2 \\<in> opt A;\n   ?a2 \\<squnion>\\<^bsub>Opt.sup f\\<^esub> ?b2 = OK ?c2\\<rbrakk>\n  \\<Longrightarrow> ?a2 \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> ?c2 \\<and>\n                    ?b2 \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> ?c2\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>err (opt A).\n        \\<forall>y\\<in>err (opt A).\n           x \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Opt.le\n                                     r)\\<^esub> x \n          \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y) \\<and>\n    (\\<forall>x\\<in>err (opt A).\n        \\<forall>y\\<in>err (opt A).\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Opt.le\n                                     r)\\<^esub> x \n          \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y)", "by (auto simp add: lesub_def plussub_def Err.le_def lift2_def split: err.split)"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         x \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         y \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y)\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "moreover"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         x \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         y \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y)\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "have \"\\<forall>x\\<in>?A. \\<forall>y\\<in>?A. \\<forall>z\\<in>?A. x \\<sqsubseteq>\\<^bsub>?r\\<^esub> z \\<and> y \\<sqsubseteq>\\<^bsub>?r\\<^esub> z \\<longrightarrow> x \\<squnion>\\<^bsub>?f\\<^esub> y \\<sqsubseteq>\\<^bsub>?r\\<^esub> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>err (opt A).\n       \\<forall>y\\<in>err (opt A).\n          \\<forall>z\\<in>err (opt A).\n             x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z \\<and>\n             y \\<sqsubseteq>\\<^bsub>Err.le\n                                     (Opt.le r)\\<^esub> z \\<longrightarrow>\n             x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n             \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "proof (intro strip, elim conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "assume xyz: \"x \\<in> ?A\"   \"y \\<in> ?A\"   \"z \\<in> ?A\""], ["proof (state)\nthis:\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "assume xz: \"x \\<sqsubseteq>\\<^bsub>?r\\<^esub> z\" and yz: \"y \\<sqsubseteq>\\<^bsub>?r\\<^esub> z\""], ["proof (state)\nthis:\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "{"], ["proof (state)\nthis:\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "fix a b c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "assume ok: \"x = OK a\"  \"y = OK b\"  \"z = OK c\""], ["proof (state)\nthis:\n  x = OK a\n  y = OK b\n  z = OK c\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "{"], ["proof (state)\nthis:\n  x = OK a\n  y = OK b\n  z = OK c\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "fix d e g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "assume some: \"a = Some d\"  \"b = Some e\"  \"c = Some g\""], ["proof (state)\nthis:\n  a = Some d\n  b = Some e\n  c = Some g\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "with ok xyz"], ["proof (chain)\npicking this:\n  x = OK a\n  y = OK b\n  z = OK c\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  a = Some d\n  b = Some e\n  c = Some g", "obtain \"OK d:err A\" \"OK e:err A\" \"OK g:err A\""], ["proof (prove)\nusing this:\n  x = OK a\n  y = OK b\n  z = OK c\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  a = Some d\n  b = Some e\n  c = Some g\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>OK d \\<in> err A; OK e \\<in> err A; OK g \\<in> err A\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  OK d \\<in> err A\n  OK e \\<in> err A\n  OK g \\<in> err A\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "with lub"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        \\<forall>z\\<in>err A.\n           x \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>lift2 f\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z\n  OK d \\<in> err A\n  OK e \\<in> err A\n  OK g \\<in> err A", "have \"\\<lbrakk> OK d \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g; OK e \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g \\<rbrakk> \\<Longrightarrow> OK d \\<squnion>\\<^bsub>lift2 f\\<^esub> OK e \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>err A.\n     \\<forall>y\\<in>err A.\n        \\<forall>z\\<in>err A.\n           x \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>lift2 f\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> z\n  OK d \\<in> err A\n  OK e \\<in> err A\n  OK g \\<in> err A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>OK d \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g;\n     OK e \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g\\<rbrakk>\n    \\<Longrightarrow> OK d \\<squnion>\\<^bsub>lift2 f\\<^esub> OK e \n                      \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>OK d \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g;\n   OK e \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g\\<rbrakk>\n  \\<Longrightarrow> OK d \\<squnion>\\<^bsub>lift2 f\\<^esub> OK e \n                    \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "hence \"\\<lbrakk> d \\<sqsubseteq>\\<^sub>r g; e \\<sqsubseteq>\\<^sub>r g \\<rbrakk> \\<Longrightarrow> \\<exists>y. d \\<squnion>\\<^sub>f e = OK y \\<and> y \\<sqsubseteq>\\<^sub>r g\""], ["proof (prove)\nusing this:\n  \\<lbrakk>OK d \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g;\n   OK e \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g\\<rbrakk>\n  \\<Longrightarrow> OK d \\<squnion>\\<^bsub>lift2 f\\<^esub> OK e \n                    \\<sqsubseteq>\\<^bsub>Err.le r\\<^esub> OK g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<sqsubseteq>\\<^bsub>r\\<^esub> g;\n     e \\<sqsubseteq>\\<^bsub>r\\<^esub> g\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         d \\<squnion>\\<^bsub>f\\<^esub> e = OK y \\<and>\n                         y \\<sqsubseteq>\\<^bsub>r\\<^esub> g", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>d \\<sqsubseteq>\\<^bsub>r\\<^esub> g;\n   e \\<sqsubseteq>\\<^bsub>r\\<^esub> g\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y.\n                       d \\<squnion>\\<^bsub>f\\<^esub> e = OK y \\<and>\n                       y \\<sqsubseteq>\\<^bsub>r\\<^esub> g\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "with ok some xyz xz yz"], ["proof (chain)\npicking this:\n  x = OK a\n  y = OK b\n  z = OK c\n  a = Some d\n  b = Some e\n  c = Some g\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  \\<lbrakk>d \\<sqsubseteq>\\<^bsub>r\\<^esub> g;\n   e \\<sqsubseteq>\\<^bsub>r\\<^esub> g\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y.\n                       d \\<squnion>\\<^bsub>f\\<^esub> e = OK y \\<and>\n                       y \\<sqsubseteq>\\<^bsub>r\\<^esub> g", "have \"x \\<squnion>\\<^bsub>?f\\<^esub> y \\<sqsubseteq>\\<^bsub>?r\\<^esub> z\""], ["proof (prove)\nusing this:\n  x = OK a\n  y = OK b\n  z = OK c\n  a = Some d\n  b = Some e\n  c = Some g\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  \\<lbrakk>d \\<sqsubseteq>\\<^bsub>r\\<^esub> g;\n   e \\<sqsubseteq>\\<^bsub>r\\<^esub> g\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y.\n                       d \\<squnion>\\<^bsub>f\\<^esub> e = OK y \\<and>\n                       y \\<sqsubseteq>\\<^bsub>r\\<^esub> g\n\ngoal (1 subgoal):\n 1. x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "by (auto simp add: sup_def le_def lesub_def lift2_def plussub_def Err.le_def)"], ["proof (state)\nthis:\n  x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n  \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a = Some ?d2; b = Some ?e2; c = Some ?g2\\<rbrakk>\n  \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "note this [intro!]"], ["proof (state)\nthis:\n  \\<lbrakk>a = Some ?d2; b = Some ?e2; c = Some ?g2\\<rbrakk>\n  \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "from ok xyz xz yz"], ["proof (chain)\npicking this:\n  x = OK a\n  y = OK b\n  z = OK c\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "have \"x \\<squnion>\\<^bsub>?f\\<^esub> y \\<sqsubseteq>\\<^bsub>?r\\<^esub> z\""], ["proof (prove)\nusing this:\n  x = OK a\n  y = OK b\n  z = OK c\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "by - (cases a, simp, cases b, simp, cases c, simp, blast)"], ["proof (state)\nthis:\n  x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n  \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "}"], ["proof (state)\nthis:\n  \\<lbrakk>x = OK ?a2; y = OK ?b2; z = OK ?c2\\<rbrakk>\n  \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> err (opt A); y \\<in> err (opt A);\n        z \\<in> err (opt A);\n        x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z;\n        y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                         \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "with xyz xz yz"], ["proof (chain)\npicking this:\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  \\<lbrakk>x = OK ?a2; y = OK ?b2; z = OK ?c2\\<rbrakk>\n  \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "show \"x \\<squnion>\\<^bsub>?f\\<^esub> y \\<sqsubseteq>\\<^bsub>?r\\<^esub> z\""], ["proof (prove)\nusing this:\n  x \\<in> err (opt A)\n  y \\<in> err (opt A)\n  z \\<in> err (opt A)\n  x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  y \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n  \\<lbrakk>x = OK ?a2; y = OK ?b2; z = OK ?c2\\<rbrakk>\n  \\<Longrightarrow> x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n                    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n    \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "by - (cases x, simp, cases y, simp, cases z, simp+)"], ["proof (state)\nthis:\n  x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n  \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>err (opt A).\n     \\<forall>y\\<in>err (opt A).\n        \\<forall>z\\<in>err (opt A).\n           x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Opt.le r)\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. err_semilat L \\<Longrightarrow> err_semilat (Opt.esl L)", "ultimately"], ["proof (chain)\npicking this:\n  order (Err.le (Opt.le r))\n  closed (err (opt A)) (lift2 (Opt.sup f))\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         x \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         y \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y)\n  \\<forall>x\\<in>err (opt A).\n     \\<forall>y\\<in>err (opt A).\n        \\<forall>z\\<in>err (opt A).\n           x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Opt.le r)\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z", "show \"err_semilat (Opt.esl L)\""], ["proof (prove)\nusing this:\n  order (Err.le (Opt.le r))\n  closed (err (opt A)) (lift2 (Opt.sup f))\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         x \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y) \\<and>\n  (\\<forall>x\\<in>err (opt A).\n      \\<forall>y\\<in>err (opt A).\n         y \\<sqsubseteq>\\<^bsub>Err.le\n                                 (Opt.le\n                                   r)\\<^esub> x \n        \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y)\n  \\<forall>x\\<in>err (opt A).\n     \\<forall>y\\<in>err (opt A).\n        \\<forall>z\\<in>err (opt A).\n           x \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z \\<and>\n           y \\<sqsubseteq>\\<^bsub>Err.le\n                                   (Opt.le r)\\<^esub> z \\<longrightarrow>\n           x \\<squnion>\\<^bsub>lift2 (Opt.sup f)\\<^esub> y \n           \\<sqsubseteq>\\<^bsub>Err.le (Opt.le r)\\<^esub> z\n\ngoal (1 subgoal):\n 1. err_semilat (Opt.esl L)", "by (unfold semilat_def esl_def sl_def) simp"], ["proof (state)\nthis:\n  err_semilat (Opt.esl L)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma top_le_opt_Some [iff]: \"top (le r) (Some T) = top r T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Semilat.top (Opt.le r) (Some T) = Semilat.top r T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Semilat.top (Opt.le r) (Some T) = Semilat.top r T", "apply (unfold top_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> Some T) =\n    (\\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x.\n       x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> Some T \\<Longrightarrow>\n    \\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T\n 2. \\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T \\<Longrightarrow>\n    \\<forall>x. x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> Some T", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T \\<Longrightarrow>\n    \\<forall>x. x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> Some T", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T \\<Longrightarrow>\n       x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> Some T", "apply (case_tac \"x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T;\n        x = None\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> Some T\n 2. \\<And>x a.\n       \\<lbrakk>\\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T;\n        x = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq>\\<^bsub>Opt.le r\\<^esub> Some T", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Top_le_conv:  \"\\<lbrakk> order r; top r T \\<rbrakk> \\<Longrightarrow> (T \\<sqsubseteq>\\<^sub>r x) = (x = T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; Semilat.top r T\\<rbrakk>\n    \\<Longrightarrow> (T \\<sqsubseteq>\\<^bsub>r\\<^esub> x) = (x = T)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r; Semilat.top r T\\<rbrakk>\n    \\<Longrightarrow> (T \\<sqsubseteq>\\<^bsub>r\\<^esub> x) = (x = T)", "apply (unfold top_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order r;\n     \\<forall>x. x \\<sqsubseteq>\\<^bsub>r\\<^esub> T\\<rbrakk>\n    \\<Longrightarrow> (T \\<sqsubseteq>\\<^bsub>r\\<^esub> x) = (x = T)", "apply (blast intro: order_antisym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma acc_le_optI [intro!]: \"acc A r \\<Longrightarrow> acc (opt A) (le r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc A r \\<Longrightarrow> acc (opt A) (Opt.le r)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. acc A r \\<Longrightarrow> acc (opt A) (Opt.le r)", "apply (unfold acc_def lesub_def le_def lesssub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(y, x).\n        x \\<in> A \\<and>\n        y \\<in> A \\<and> r x y \\<and> x \\<noteq> y} \\<Longrightarrow>\n    wf {(y, x).\n        x \\<in> opt A \\<and>\n        y \\<in> opt A \\<and>\n        (case y of None \\<Rightarrow> x = None\n         | Some y \\<Rightarrow>\n             case x of None \\<Rightarrow> True\n             | Some x \\<Rightarrow> r x y) \\<and>\n        x \\<noteq> y}", "apply (simp add: wf_eq_minimal split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Q.\n       (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              z \\<in> A \\<and>\n              y \\<in> A \\<and> r z y \\<and> z \\<noteq> y \\<longrightarrow>\n              y \\<notin> Q) \\<Longrightarrow>\n    \\<forall>Q.\n       (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              (y = None \\<longrightarrow>\n               z \\<in> opt A \\<and>\n               z = None \\<and> (\\<exists>y. z = Some y) \\<longrightarrow>\n               None \\<notin> Q) \\<and>\n              (\\<forall>x2.\n                  (z = None \\<longrightarrow>\n                   y = Some x2 \\<longrightarrow>\n                   x2 \\<in> A \\<longrightarrow> Some x2 \\<notin> Q) \\<and>\n                  (\\<forall>x2a.\n                      z = Some x2a \\<longrightarrow>\n                      y = Some x2 \\<longrightarrow>\n                      x2a \\<in> A \\<and>\n                      x2 \\<in> A \\<and>\n                      r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n                      Some x2 \\<notin> Q)))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Q x.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))", "apply (case_tac \"\\<exists>a. Some a \\<in> Q\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Q x.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q; \\<exists>a. Some a \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))\n 2. \\<And>Q x.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q; \\<nexists>a. Some a \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))", "apply (erule_tac x = \"{a . Some a \\<in> Q}\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Q x.\n       \\<lbrakk>x \\<in> Q; \\<exists>a. Some a \\<in> Q;\n        (\\<exists>x. x \\<in> {a. Some a \\<in> Q}) \\<longrightarrow>\n        (\\<exists>z\\<in>{a. Some a \\<in> Q}.\n            \\<forall>y.\n               z \\<in> A \\<and>\n               y \\<in> A \\<and> r z y \\<and> z \\<noteq> y \\<longrightarrow>\n               y \\<notin> {a. Some a \\<in> Q})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))\n 2. \\<And>Q x.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q; \\<nexists>a. Some a \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Q x.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q; \\<nexists>a. Some a \\<in> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))", "apply (case_tac \"x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Q x.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q; \\<nexists>a. Some a \\<in> Q; x = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))\n 2. \\<And>Q x a.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q; \\<nexists>a. Some a \\<in> Q; x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Q x a.\n       \\<lbrakk>\\<forall>Q.\n                   (\\<exists>x. x \\<in> Q) \\<longrightarrow>\n                   (\\<exists>z\\<in>Q.\n                       \\<forall>y.\n                          z \\<in> A \\<and>\n                          y \\<in> A \\<and>\n                          r z y \\<and> z \\<noteq> y \\<longrightarrow>\n                          y \\<notin> Q);\n        x \\<in> Q; \\<nexists>a. Some a \\<in> Q; x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z\\<in>Q.\n                            \\<forall>y.\n                               (y = None \\<longrightarrow>\n                                z \\<in> opt A \\<and>\n                                z = None \\<and>\n                                (\\<exists>y. z = Some y) \\<longrightarrow>\n                                None \\<notin> Q) \\<and>\n                               (\\<forall>x2.\n                                   (z = None \\<longrightarrow>\n                                    y = Some x2 \\<longrightarrow>\n                                    x2 \\<in> A \\<longrightarrow>\n                                    Some x2 \\<notin> Q) \\<and>\n                                   (\\<forall>x2a.\n z = Some x2a \\<longrightarrow>\n y = Some x2 \\<longrightarrow>\n x2a \\<in> A \\<and>\n x2 \\<in> A \\<and> r x2a x2 \\<and> x2a \\<noteq> x2 \\<longrightarrow>\n Some x2 \\<notin> Q))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma map_option_in_optionI:\n  \"\\<lbrakk> ox \\<in> opt S; \\<forall>x\\<in>S. ox = Some x \\<longrightarrow> f x \\<in> S \\<rbrakk> \n  \\<Longrightarrow> map_option f ox \\<in> opt S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ox \\<in> opt S;\n     \\<forall>x\\<in>S. ox = Some x \\<longrightarrow> f x \\<in> S\\<rbrakk>\n    \\<Longrightarrow> map_option f ox \\<in> opt S", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ox \\<in> opt S;\n     \\<forall>x\\<in>S. ox = Some x \\<longrightarrow> f x \\<in> S\\<rbrakk>\n    \\<Longrightarrow> map_option f ox \\<in> opt S", "apply (unfold map_option_case)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ox \\<in> opt S;\n     \\<forall>x\\<in>S. ox = Some x \\<longrightarrow> f x \\<in> S\\<rbrakk>\n    \\<Longrightarrow> (case ox of None \\<Rightarrow> None\n                       | Some x \\<Rightarrow> Some (f x))\n                      \\<in> opt S", "apply (simp split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ox \\<in> opt S;\n     \\<forall>x\\<in>S. ox = Some x \\<longrightarrow> f x \\<in> S\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x2.\n                         ox = Some x2 \\<longrightarrow> f x2 \\<in> S", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "end"]]}