{"file_name": "/home/qj213/afp-2021-10-22/thys/Complex_Geometry/Matrices.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Complex_Geometry", "problem_names": ["lemma fst_mult_sv [simp]: \n  shows \"fst (k *\\<^sub>s\\<^sub>v v) = k * fst v\"", "lemma snd_mult_sv [simp]:\n  shows \"snd (k *\\<^sub>s\\<^sub>v v) = k * snd v\"", "lemma mult_sv_mult_sv [simp]: \n  shows \"k1 *\\<^sub>s\\<^sub>v (k2 *\\<^sub>s\\<^sub>v v) = (k1*k2) *\\<^sub>s\\<^sub>v v\"", "lemma one_mult_sv [simp]:\n  shows \"1 *\\<^sub>s\\<^sub>v v =  v\"", "lemma mult_sv_ex_id1 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> k *\\<^sub>s\\<^sub>v v = v\"", "lemma mult_sv_ex_id2 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> v = k *\\<^sub>s\\<^sub>v v\"", "lemma mult_vv_commute:\n  shows \"v1 *\\<^sub>v\\<^sub>v v2 = v2 *\\<^sub>v\\<^sub>v v1\"", "lemma mult_vv_scale_sv1:\n  shows \"(k *\\<^sub>s\\<^sub>v v1) *\\<^sub>v\\<^sub>v v2 = k * (v1 *\\<^sub>v\\<^sub>v v2)\"", "lemma mult_vv_scale_sv2:\n  shows \"v1 *\\<^sub>v\\<^sub>v (k *\\<^sub>s\\<^sub>v v2) = k * (v1 *\\<^sub>v\\<^sub>v v2)\"", "lemma vec_cnj_vec_cnj [simp]:\n  shows \"vec_cnj (vec_cnj v) = v\"", "lemma cnj_mult_vv:\n  shows \"cnj (v1 *\\<^sub>v\\<^sub>v v2) = (vec_cnj v1) *\\<^sub>v\\<^sub>v (vec_cnj v2)\"", "lemma vec_cnj_sv [simp]:\n  shows \"vec_cnj (k *\\<^sub>s\\<^sub>v A) = cnj k *\\<^sub>s\\<^sub>v vec_cnj A\"", "lemma scalsquare_vv_zero:\n  shows \"(vec_cnj v) *\\<^sub>v\\<^sub>v v = 0 \\<longleftrightarrow> v = vec_zero\"", "lemma mult_sm_distribution [simp]:\n  shows \"k1 *\\<^sub>s\\<^sub>m (k2 *\\<^sub>s\\<^sub>m A) = (k1*k2) *\\<^sub>s\\<^sub>m A\"", "lemma mult_sm_neutral [simp]:\n  shows \"1 *\\<^sub>s\\<^sub>m A = A\"", "lemma mult_sm_inv_l:\n  assumes \"k \\<noteq> 0\" and \"k *\\<^sub>s\\<^sub>m A = B\"\n  shows \"A = (1/k) *\\<^sub>s\\<^sub>m B\"", "lemma mult_sm_ex_id1 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> k *\\<^sub>s\\<^sub>m M = M\"", "lemma mult_sm_ex_id2 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> M = k *\\<^sub>s\\<^sub>m M\"", "lemma nonzero_mult_real:\n  assumes \"A \\<noteq> mat_zero\" and \"k \\<noteq> 0\"\n  shows \"k *\\<^sub>s\\<^sub>m A \\<noteq> mat_zero\"", "lemma mult_mm_assoc:\n  shows \"A *\\<^sub>m\\<^sub>m (B *\\<^sub>m\\<^sub>m C) = (A *\\<^sub>m\\<^sub>m B) *\\<^sub>m\\<^sub>m C\"", "lemma mult_assoc_5:\n  shows \"A *\\<^sub>m\\<^sub>m (B *\\<^sub>m\\<^sub>m C *\\<^sub>m\\<^sub>m D) *\\<^sub>m\\<^sub>m E = (A *\\<^sub>m\\<^sub>m B) *\\<^sub>m\\<^sub>m C *\\<^sub>m\\<^sub>m (D *\\<^sub>m\\<^sub>m E)\"", "lemma mat_zero_r [simp]:\n  shows \"A *\\<^sub>m\\<^sub>m mat_zero = mat_zero\"", "lemma mat_zero_l [simp]:\n  shows \"mat_zero *\\<^sub>m\\<^sub>m A = mat_zero\"", "lemma mat_eye_l:\n  shows \"eye *\\<^sub>m\\<^sub>m A = A\"", "lemma mat_eye_r:\n  shows \"A *\\<^sub>m\\<^sub>m eye = A\"", "lemma mult_mm_sm [simp]:\n  shows \"A *\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m B) = k *\\<^sub>s\\<^sub>m (A *\\<^sub>m\\<^sub>m B)\"", "lemma mult_sm_mm [simp]:\n  shows \"(k *\\<^sub>s\\<^sub>m A) *\\<^sub>m\\<^sub>m B = k *\\<^sub>s\\<^sub>m (A *\\<^sub>m\\<^sub>m B)\"", "lemma mult_sm_eye_mm [simp]:\n  shows \"k *\\<^sub>s\\<^sub>m eye *\\<^sub>m\\<^sub>m A = k *\\<^sub>s\\<^sub>m A\"", "lemma mat_det_mult [simp]:\n  shows \"mat_det (A *\\<^sub>m\\<^sub>m B) = mat_det A * mat_det B\"", "lemma mat_det_mult_sm [simp]:\n  shows \"mat_det (k *\\<^sub>s\\<^sub>m A) = (k*k) * mat_det A\"", "lemma mat_inv_r:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"A *\\<^sub>m\\<^sub>m (mat_inv A) = eye\"", "lemma mat_inv_l:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"(mat_inv A) *\\<^sub>m\\<^sub>m A  = eye\"", "lemma mat_det_inv:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"mat_det (mat_inv A) = 1 / mat_det A\"", "lemma mult_mm_inv_l:\n  assumes \"mat_det A \\<noteq> 0\" and \"A *\\<^sub>m\\<^sub>m B = C\"\n  shows \"B = mat_inv A *\\<^sub>m\\<^sub>m C\"", "lemma mult_mm_inv_r:\n  assumes \"mat_det B \\<noteq> 0\" and \"A *\\<^sub>m\\<^sub>m B = C\"\n  shows \"A = C *\\<^sub>m\\<^sub>m mat_inv B\"", "lemma mult_mm_non_zero_l:\n  assumes \"mat_det A \\<noteq> 0\" and \"B \\<noteq> mat_zero\"\n  shows \"A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero\"", "lemma mat_inv_mult_mm:\n  assumes \"mat_det A \\<noteq> 0\" and \"mat_det B \\<noteq> 0\"\n  shows \"mat_inv (A *\\<^sub>m\\<^sub>m B) = mat_inv B *\\<^sub>m\\<^sub>m mat_inv A\"", "lemma mult_mm_cancel_l:\n  assumes \"mat_det M \\<noteq> 0\"  \"M *\\<^sub>m\\<^sub>m A = M *\\<^sub>m\\<^sub>m B\"\n  shows \"A = B\"", "lemma mult_mm_cancel_r:\n  assumes \"mat_det M \\<noteq> 0\"  \"A *\\<^sub>m\\<^sub>m M = B *\\<^sub>m\\<^sub>m M\"\n  shows \"A = B\"", "lemma mult_mm_non_zero_r:\n  assumes \"A \\<noteq> mat_zero\" and \"mat_det B \\<noteq> 0\"\n  shows \"A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero\"", "lemma mat_inv_mult_sm:\n  assumes \"k \\<noteq> 0\"\n  shows \"mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A\"", "lemma mat_inv_inv [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"mat_inv (mat_inv M) = M\"", "lemma mat_t_mat_t [simp]:\n  shows \"mat_transpose (mat_transpose A) = A\"", "lemma mat_t_mult_sm [simp]:\n  shows \"mat_transpose (k *\\<^sub>s\\<^sub>m A) = k *\\<^sub>s\\<^sub>m (mat_transpose A)\"", "lemma mat_t_mult_mm [simp]:\n  shows \"mat_transpose (A *\\<^sub>m\\<^sub>m B) = mat_transpose B *\\<^sub>m\\<^sub>m mat_transpose A\"", "lemma mat_inv_transpose:\n  shows \"mat_transpose (mat_inv M) = mat_inv (mat_transpose M)\"", "lemma mat_det_transpose [simp]:\n  fixes M :: \"complex_mat\"\n  shows \"mat_det (mat_transpose M) = mat_det M\"", "lemma mat_cnj_cnj [simp]:\n  shows \"mat_cnj (mat_cnj A) = A\"", "lemma mat_cnj_sm [simp]:\n  shows \"mat_cnj (k *\\<^sub>s\\<^sub>m A) = cnj k *\\<^sub>s\\<^sub>m (mat_cnj A)\"", "lemma mat_det_cnj [simp]: \n  shows \"mat_det (mat_cnj A) = cnj (mat_det A)\"", "lemma nonzero_mat_cnj:\n  shows \"mat_cnj A = mat_zero \\<longleftrightarrow> A = mat_zero\"", "lemma mat_inv_cnj:\n  shows \"mat_cnj (mat_inv M) = mat_inv (mat_cnj M)\"", "lemma mat_adj_mult_mm [simp]:\n  shows \"mat_adj (A *\\<^sub>m\\<^sub>m B) = mat_adj B *\\<^sub>m\\<^sub>m mat_adj A\"", "lemma mat_adj_mult_sm [simp]:\n  shows \"mat_adj (k *\\<^sub>s\\<^sub>m A) = cnj k *\\<^sub>s\\<^sub>m mat_adj A\"", "lemma mat_det_adj: \n  shows \"mat_det (mat_adj A) = cnj (mat_det A)\"", "lemma mat_adj_inv:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"mat_adj (mat_inv M) = mat_inv (mat_adj M)\"", "lemma mat_transpose_mat_cnj:\n  shows \"mat_transpose (mat_cnj A) = mat_adj A\"", "lemma mat_adj_adj [simp]:\n  shows \"mat_adj (mat_adj A) = A\"", "lemma mat_adj_eye [simp]:\n  shows \"mat_adj eye = eye\"", "lemma eye_mv_l [simp]:\n  shows \"eye *\\<^sub>m\\<^sub>v v = v\"", "lemma mult_mv_mv [simp]: \n  shows \"B *\\<^sub>m\\<^sub>v (A *\\<^sub>m\\<^sub>v v) = (B *\\<^sub>m\\<^sub>m A) *\\<^sub>m\\<^sub>v v\"", "lemma mult_vm_vm [simp]:\n  shows \"(v *\\<^sub>v\\<^sub>m A) *\\<^sub>v\\<^sub>m B = v *\\<^sub>v\\<^sub>m (A *\\<^sub>m\\<^sub>m B)\"", "lemma mult_mv_inv:\n  assumes \"x =  A *\\<^sub>m\\<^sub>v y\" and \"mat_det A \\<noteq> 0\"\n  shows \"y = (mat_inv A) *\\<^sub>m\\<^sub>v x\"", "lemma mult_vm_inv:\n  assumes \"x =  y *\\<^sub>v\\<^sub>m A\" and \"mat_det A \\<noteq> 0\"\n  shows \"y = x *\\<^sub>v\\<^sub>m (mat_inv A) \"", "lemma mult_mv_cancel_l:\n  assumes \"mat_det A \\<noteq> 0\" and \"A *\\<^sub>m\\<^sub>v v = A *\\<^sub>m\\<^sub>v v'\"\n  shows \"v = v'\"", "lemma mult_vm_cancel_r:\n  assumes \"mat_det A \\<noteq> 0\" and \"v *\\<^sub>v\\<^sub>m A = v' *\\<^sub>v\\<^sub>m A\"\n  shows \"v = v'\"", "lemma vec_zero_l [simp]:\n  shows \"A *\\<^sub>m\\<^sub>v vec_zero = vec_zero\"", "lemma vec_zero_r [simp]:\n  shows \"vec_zero *\\<^sub>v\\<^sub>m A = vec_zero\"", "lemma mult_mv_nonzero:\n  assumes \"v \\<noteq> vec_zero\" and \"mat_det A \\<noteq> 0\"\n  shows \"A *\\<^sub>m\\<^sub>v v \\<noteq> vec_zero\"", "lemma mult_vm_nonzero:\n  assumes \"v \\<noteq> vec_zero\" and \"mat_det A \\<noteq> 0\"\n  shows \"v *\\<^sub>v\\<^sub>m A \\<noteq> vec_zero\"", "lemma mult_sv_mv:\n  shows \"k *\\<^sub>s\\<^sub>v (A *\\<^sub>m\\<^sub>v v) = (A *\\<^sub>m\\<^sub>v (k *\\<^sub>s\\<^sub>v v))\"", "lemma mult_mv_mult_vm: \n  shows \"A *\\<^sub>m\\<^sub>v x = x *\\<^sub>v\\<^sub>m (mat_transpose A)\"", "lemma mult_mv_vv:\n  shows \"A *\\<^sub>m\\<^sub>v v1 *\\<^sub>v\\<^sub>v v2 = v1 *\\<^sub>v\\<^sub>v (mat_transpose A *\\<^sub>m\\<^sub>v v2)\"", "lemma mult_vv_mv:\n  shows \"x *\\<^sub>v\\<^sub>v (A *\\<^sub>m\\<^sub>v y)  = (x *\\<^sub>v\\<^sub>m A) *\\<^sub>v\\<^sub>v y\"", "lemma vec_cnj_mult_mv:\n  shows \"vec_cnj (A *\\<^sub>m\\<^sub>v x) =  (mat_cnj A) *\\<^sub>m\\<^sub>v (vec_cnj x)\"", "lemma vec_cnj_mult_vm:\n  shows \"vec_cnj (v *\\<^sub>v\\<^sub>m A) = vec_cnj v *\\<^sub>v\\<^sub>m mat_cnj A\"", "lemma eigen_equation:\n  shows \"eigenval k H \\<longleftrightarrow> k\\<^sup>2 - mat_trace H * k + mat_det H = 0\" (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma bilinear_form_scale_m:\n  shows \"bilinear_form v1 v2 (k *\\<^sub>s\\<^sub>m H) = k * bilinear_form v1 v2 H\"", "lemma bilinear_form_scale_v1:\n  shows \"bilinear_form (k *\\<^sub>s\\<^sub>v v1) v2 H = cnj k * bilinear_form v1 v2 H\"", "lemma bilinear_form_scale_v2:\n  shows \"bilinear_form  v1 (k *\\<^sub>s\\<^sub>v v2) H = k * bilinear_form v1 v2 H\"", "lemma quad_form_bilinear_form: \n  shows \"quad_form v H = bilinear_form v v H\"", "lemma quad_form_scale_v:\n  shows \"quad_form (k *\\<^sub>s\\<^sub>v v) H = cor ((cmod k)\\<^sup>2) * quad_form v H\"", "lemma quad_form_scale_m:\n  shows \"quad_form v (k *\\<^sub>s\\<^sub>m H) = k * quad_form v H\"", "lemma cnj_quad_form [simp]:\n  shows \"cnj (quad_form z H) = quad_form z (mat_adj H)\"", "lemma congruence_nonzero:\n  assumes \"H \\<noteq> mat_zero\" and \"mat_det M \\<noteq> 0\"\n  shows \"congruence M H \\<noteq> mat_zero\"", "lemma congruence_congruence:\n  shows \"congruence M1 (congruence M2 H) = congruence (M2 *\\<^sub>m\\<^sub>m M1) H\"", "lemma congruence_eye [simp]: \n  shows \"congruence eye H = H\"", "lemma congruence_congruence_inv [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"congruence M (congruence (mat_inv M) H) = H\"", "lemma congruence_inv:\n  assumes \"mat_det M \\<noteq> 0\" and \"congruence M H = H'\"\n  shows \"congruence (mat_inv M) H' = H\"", "lemma congruence_scale_m [simp]:\n  shows \"congruence M (k *\\<^sub>s\\<^sub>m H) = k *\\<^sub>s\\<^sub>m (congruence M H)\"", "lemma inj_congruence:\n  assumes \"mat_det M \\<noteq> 0\" and \"congruence M H = congruence M H'\"\n  shows \"H = H'\"", "lemma mat_det_congruence [simp]:\n  \"mat_det (congruence M H) = (cor ((cmod (mat_det M))\\<^sup>2)) * mat_det H\"", "lemma det_sgn_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"sgn (mat_det (congruence M H)) = sgn (mat_det H)\"", "lemma Re_det_sgn_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))\"", "lemma bilinear_form_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"bilinear_form (M *\\<^sub>m\\<^sub>v v1) (M *\\<^sub>m\\<^sub>v v2) (congruence (mat_inv M) H) =\n         bilinear_form v1 v2 H\"", "lemma quad_form_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"quad_form (M *\\<^sub>m\\<^sub>v z) (congruence (mat_inv M) H) = quad_form z H\"", "lemma mat_det_similarity [simp]:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"mat_det (similarity A M) = mat_det M\"", "lemma mat_trace_similarity [simp]:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"mat_trace (similarity A M) = mat_trace M\"", "lemma similarity_eye [simp]:\n  shows \"similarity eye M = M\"", "lemma similarity_eye' [simp]:\n  shows \"similarity (1, 0, 0, 1) M = M\"", "lemma similarity_comp [simp]:\n  assumes \"mat_det A1 \\<noteq> 0\" and \"mat_det A2 \\<noteq> 0\"\n  shows \"similarity A1 (similarity A2 M) = similarity (A2*\\<^sub>m\\<^sub>mA1) M\"", "lemma similarity_inv:\n  assumes \"similarity A M1 = M2\" and \"mat_det A \\<noteq> 0\"\n  shows \"similarity (mat_inv A) M2 = M1\""], "translations": [["", "lemma fst_mult_sv [simp]: \n  shows \"fst (k *\\<^sub>s\\<^sub>v v) = k * fst v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (k *\\<^sub>s\\<^sub>v v) = k * fst v", "by (cases v) simp"], ["", "lemma snd_mult_sv [simp]:\n  shows \"snd (k *\\<^sub>s\\<^sub>v v) = k * snd v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (k *\\<^sub>s\\<^sub>v v) = k * snd v", "by (cases v) simp"], ["", "lemma mult_sv_mult_sv [simp]: \n  shows \"k1 *\\<^sub>s\\<^sub>v (k2 *\\<^sub>s\\<^sub>v v) = (k1*k2) *\\<^sub>s\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k1 *\\<^sub>s\\<^sub>v (k2 *\\<^sub>s\\<^sub>v v) =\n    (k1 * k2) *\\<^sub>s\\<^sub>v v", "by (cases v) simp"], ["", "lemma one_mult_sv [simp]:\n  shows \"1 *\\<^sub>s\\<^sub>v v =  v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 *\\<^sub>s\\<^sub>v v = v", "by (cases v) simp"], ["", "lemma mult_sv_ex_id1 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> k *\\<^sub>s\\<^sub>v v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. k \\<noteq> 0 \\<and> k *\\<^sub>s\\<^sub>v v = v", "by (rule_tac x=1 in exI, simp)"], ["", "lemma mult_sv_ex_id2 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> v = k *\\<^sub>s\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. k \\<noteq> 0 \\<and> v = k *\\<^sub>s\\<^sub>v v", "by (rule_tac x=1 in exI, simp)"], ["", "text \\<open>Scalar product of two vectors\\<close>"], ["", "fun mult_vv :: \"complex \\<times> complex \\<Rightarrow> complex \\<times> complex \\<Rightarrow> complex\" (infixl \"*\\<^sub>v\\<^sub>v\" 100) where\n \"(x, y) *\\<^sub>v\\<^sub>v (a, b) = x*a + y*b\""], ["", "lemma mult_vv_commute:\n  shows \"v1 *\\<^sub>v\\<^sub>v v2 = v2 *\\<^sub>v\\<^sub>v v1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 *\\<^sub>v\\<^sub>v v2 = v2 *\\<^sub>v\\<^sub>v v1", "by (cases v1, cases v2) auto"], ["", "lemma mult_vv_scale_sv1:\n  shows \"(k *\\<^sub>s\\<^sub>v v1) *\\<^sub>v\\<^sub>v v2 = k * (v1 *\\<^sub>v\\<^sub>v v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k *\\<^sub>s\\<^sub>v v1 *\\<^sub>v\\<^sub>v v2 =\n    k * v1 *\\<^sub>v\\<^sub>v v2", "by (cases v1, cases v2) (auto simp add: field_simps)"], ["", "lemma mult_vv_scale_sv2:\n  shows \"v1 *\\<^sub>v\\<^sub>v (k *\\<^sub>s\\<^sub>v v2) = k * (v1 *\\<^sub>v\\<^sub>v v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 *\\<^sub>v\\<^sub>v (k *\\<^sub>s\\<^sub>v v2) =\n    k * v1 *\\<^sub>v\\<^sub>v v2", "by (cases v1, cases v2) (auto simp add: field_simps)"], ["", "text \\<open>Conjugate vector\\<close>"], ["", "fun vec_map where\n \"vec_map f (x, y) = (f x, f y)\""], ["", "definition vec_cnj where\n  \"vec_cnj = vec_map cnj\""], ["", "lemma vec_cnj_vec_cnj [simp]:\n  shows \"vec_cnj (vec_cnj v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj (vec_cnj v) = v", "by (cases v) (simp add: vec_cnj_def)"], ["", "lemma cnj_mult_vv:\n  shows \"cnj (v1 *\\<^sub>v\\<^sub>v v2) = (vec_cnj v1) *\\<^sub>v\\<^sub>v (vec_cnj v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cnj (v1 *\\<^sub>v\\<^sub>v v2) = vec_cnj v1 *\\<^sub>v\\<^sub>v vec_cnj v2", "by (cases v1, cases v2) (simp add: vec_cnj_def)"], ["", "lemma vec_cnj_sv [simp]:\n  shows \"vec_cnj (k *\\<^sub>s\\<^sub>v A) = cnj k *\\<^sub>s\\<^sub>v vec_cnj A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj (k *\\<^sub>s\\<^sub>v A) = cnj k *\\<^sub>s\\<^sub>v vec_cnj A", "by (cases A) (auto simp add: vec_cnj_def)"], ["", "lemma scalsquare_vv_zero:\n  shows \"(vec_cnj v) *\\<^sub>v\\<^sub>v v = 0 \\<longleftrightarrow> v = vec_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec_cnj v *\\<^sub>v\\<^sub>v v = 0) = (v = vec_zero)", "apply (cases v)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       v = (a, b) \\<Longrightarrow>\n       (vec_cnj v *\\<^sub>v\\<^sub>v v = 0) = (v = vec_zero)", "apply (auto simp add: vec_cnj_def field_simps complex_mult_cnj_cmod power2_eq_square)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>v = (a, b);\n        cor (cmod a) * cor (cmod a) + cor (cmod b) * cor (cmod b) =\n        0\\<rbrakk>\n       \\<Longrightarrow> a = 0\n 2. \\<And>a b.\n       \\<lbrakk>v = (a, b);\n        cor (cmod a) * cor (cmod a) + cor (cmod b) * cor (cmod b) =\n        0\\<rbrakk>\n       \\<Longrightarrow> b = 0", "apply (simp only: cor_add[symmetric] cor_mult[symmetric] of_real_eq_0_iff, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* ---------------------------------------------------------------------------- *)"], ["", "subsubsection \\<open>Matrices in $\\mathbb{C}^2$\\<close>"], ["", "(* ---------------------------------------------------------------------------- *)"], ["", "text \\<open>Type of complex matrices\\<close>"], ["", "type_synonym complex_mat = \"complex \\<times> complex \\<times> complex \\<times> complex\""], ["", "text \\<open>Matrix scalar multiplication\\<close>"], ["", "fun mult_sm :: \"complex \\<Rightarrow> complex_mat \\<Rightarrow> complex_mat\" (infixl \"*\\<^sub>s\\<^sub>m\" 100) where\n  \"k *\\<^sub>s\\<^sub>m (a, b, c, d) = (k*a, k*b, k*c, k*d)\""], ["", "lemma mult_sm_distribution [simp]:\n  shows \"k1 *\\<^sub>s\\<^sub>m (k2 *\\<^sub>s\\<^sub>m A) = (k1*k2) *\\<^sub>s\\<^sub>m A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k1 *\\<^sub>s\\<^sub>m (k2 *\\<^sub>s\\<^sub>m A) =\n    (k1 * k2) *\\<^sub>s\\<^sub>m A", "by (cases A) auto"], ["", "lemma mult_sm_neutral [simp]:\n  shows \"1 *\\<^sub>s\\<^sub>m A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 *\\<^sub>s\\<^sub>m A = A", "by (cases A) auto"], ["", "lemma mult_sm_inv_l:\n  assumes \"k \\<noteq> 0\" and \"k *\\<^sub>s\\<^sub>m A = B\"\n  shows \"A = (1/k) *\\<^sub>s\\<^sub>m B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = (1 / k) *\\<^sub>s\\<^sub>m B", "using assms"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  k *\\<^sub>s\\<^sub>m A = B\n\ngoal (1 subgoal):\n 1. A = (1 / k) *\\<^sub>s\\<^sub>m B", "by auto"], ["", "lemma mult_sm_ex_id1 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> k *\\<^sub>s\\<^sub>m M = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. k \\<noteq> 0 \\<and> k *\\<^sub>s\\<^sub>m M = M", "by (rule_tac x=1 in exI, simp)"], ["", "lemma mult_sm_ex_id2 [simp]:\n  shows \"\\<exists> k::complex. k \\<noteq> 0 \\<and> M = k *\\<^sub>s\\<^sub>m M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. k \\<noteq> 0 \\<and> M = k *\\<^sub>s\\<^sub>m M", "by (rule_tac x=1 in exI, simp)"], ["", "text \\<open>Matrix addition and subtraction\\<close>"], ["", "definition mat_zero :: \"complex_mat\" where [simp]: \"mat_zero = (0, 0, 0, 0)\""], ["", "fun mat_plus :: \"complex_mat \\<Rightarrow> complex_mat \\<Rightarrow> complex_mat\" (infixl \"+\\<^sub>m\\<^sub>m\" 100) where\n  \"mat_plus (a1, b1, c1, d1) (a2, b2, c2, d2) = (a1+a2, b1+b2, c1+c2, d1+d2)\""], ["", "fun mat_minus :: \"complex_mat \\<Rightarrow> complex_mat \\<Rightarrow> complex_mat\" (infixl \"-\\<^sub>m\\<^sub>m\" 100) where\n  \"mat_minus (a1, b1, c1, d1) (a2, b2, c2, d2) = (a1-a2, b1-b2, c1-c2, d1-d2)\""], ["", "fun mat_uminus :: \"complex_mat \\<Rightarrow> complex_mat\" where\n  \"mat_uminus (a, b, c, d) = (-a, -b, -c, -d)\""], ["", "lemma nonzero_mult_real:\n  assumes \"A \\<noteq> mat_zero\" and \"k \\<noteq> 0\"\n  shows \"k *\\<^sub>s\\<^sub>m A \\<noteq> mat_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k *\\<^sub>s\\<^sub>m A \\<noteq> mat_zero", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> mat_zero\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k *\\<^sub>s\\<^sub>m A \\<noteq> mat_zero", "by (cases A) simp"], ["", "text \\<open>Matrix multiplication.\\<close>"], ["", "fun mult_mm :: \"complex_mat \\<Rightarrow> complex_mat \\<Rightarrow> complex_mat\" (infixl \"*\\<^sub>m\\<^sub>m\" 100) where\n  \"(a1, b1, c1, d1) *\\<^sub>m\\<^sub>m (a2, b2, c2, d2) =\n   (a1*a2 + b1*c2, a1*b2 + b1*d2, c1*a2+d1*c2, c1*b2+d1*d2)\""], ["", "lemma mult_mm_assoc:\n  shows \"A *\\<^sub>m\\<^sub>m (B *\\<^sub>m\\<^sub>m C) = (A *\\<^sub>m\\<^sub>m B) *\\<^sub>m\\<^sub>m C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m (B *\\<^sub>m\\<^sub>m C) =\n    A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m C", "by (cases A, cases B, cases C) (auto simp add: field_simps)"], ["", "lemma mult_assoc_5:\n  shows \"A *\\<^sub>m\\<^sub>m (B *\\<^sub>m\\<^sub>m C *\\<^sub>m\\<^sub>m D) *\\<^sub>m\\<^sub>m E = (A *\\<^sub>m\\<^sub>m B) *\\<^sub>m\\<^sub>m C *\\<^sub>m\\<^sub>m (D *\\<^sub>m\\<^sub>m E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m\n    (B *\\<^sub>m\\<^sub>m C *\\<^sub>m\\<^sub>m D) *\\<^sub>m\\<^sub>m\n    E =\n    A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m C *\\<^sub>m\\<^sub>m\n    (D *\\<^sub>m\\<^sub>m E)", "by (simp only: mult_mm_assoc)"], ["", "lemma mat_zero_r [simp]:\n  shows \"A *\\<^sub>m\\<^sub>m mat_zero = mat_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m mat_zero = mat_zero", "by (cases A) simp"], ["", "lemma mat_zero_l [simp]:\n  shows \"mat_zero *\\<^sub>m\\<^sub>m A = mat_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_zero *\\<^sub>m\\<^sub>m A = mat_zero", "by (cases A) simp"], ["", "definition eye :: \"complex_mat\" where\n  [simp]: \"eye = (1, 0, 0, 1)\""], ["", "lemma mat_eye_l:\n  shows \"eye *\\<^sub>m\\<^sub>m A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eye *\\<^sub>m\\<^sub>m A = A", "by (cases A) auto"], ["", "lemma mat_eye_r:\n  shows \"A *\\<^sub>m\\<^sub>m eye = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m eye = A", "by (cases A) auto"], ["", "lemma mult_mm_sm [simp]:\n  shows \"A *\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m B) = k *\\<^sub>s\\<^sub>m (A *\\<^sub>m\\<^sub>m B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m B) =\n    k *\\<^sub>s\\<^sub>m (A *\\<^sub>m\\<^sub>m B)", "by (cases A, cases B) (simp add: field_simps)"], ["", "lemma mult_sm_mm [simp]:\n  shows \"(k *\\<^sub>s\\<^sub>m A) *\\<^sub>m\\<^sub>m B = k *\\<^sub>s\\<^sub>m (A *\\<^sub>m\\<^sub>m B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k *\\<^sub>s\\<^sub>m A *\\<^sub>m\\<^sub>m B =\n    k *\\<^sub>s\\<^sub>m (A *\\<^sub>m\\<^sub>m B)", "by (cases A, cases B) (simp add: field_simps)"], ["", "lemma mult_sm_eye_mm [simp]:\n  shows \"k *\\<^sub>s\\<^sub>m eye *\\<^sub>m\\<^sub>m A = k *\\<^sub>s\\<^sub>m A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k *\\<^sub>s\\<^sub>m eye *\\<^sub>m\\<^sub>m A = k *\\<^sub>s\\<^sub>m A", "by (cases A) simp"], ["", "text \\<open>Matrix determinant\\<close>"], ["", "fun mat_det where \"mat_det (a, b, c, d) = a*d - b*c\""], ["", "lemma mat_det_mult [simp]:\n  shows \"mat_det (A *\\<^sub>m\\<^sub>m B) = mat_det A * mat_det B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (A *\\<^sub>m\\<^sub>m B) = mat_det A * mat_det B", "by (cases A, cases B) (auto simp add: field_simps)"], ["", "lemma mat_det_mult_sm [simp]:\n  shows \"mat_det (k *\\<^sub>s\\<^sub>m A) = (k*k) * mat_det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (k *\\<^sub>s\\<^sub>m A) = k * k * mat_det A", "by (cases A) (auto simp add: field_simps)"], ["", "text \\<open>Matrix inverse\\<close>"], ["", "fun mat_inv :: \"complex_mat \\<Rightarrow> complex_mat\" where\n  \"mat_inv (a, b, c, d) = (1/(a*d - b*c)) *\\<^sub>s\\<^sub>m (d, -b, -c, a)\""], ["", "lemma mat_inv_r:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"A *\\<^sub>m\\<^sub>m (mat_inv A) = eye\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m mat_inv A = eye", "using assms"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m mat_inv A = eye", "proof (cases A, auto simp add: field_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "fix a b c d :: complex"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"a * (a * (d * d)) + b * (b * (c * c)) = a * (b * (c * (d * 2)))\""], ["proof (state)\nthis:\n  a * (a * (d * d)) + b * (b * (c * c)) = a * (b * (c * (d * 2)))\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(a*d - b*c)*(a*d - b*c) = 0\""], ["proof (prove)\nusing this:\n  a * (a * (d * d)) + b * (b * (c * c)) = a * (b * (c * (d * 2)))\n\ngoal (1 subgoal):\n 1. (a * d - b * c) * (a * d - b * c) = 0", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  (a * d - b * c) * (a * d - b * c) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "hence *: \"a*d - b*c = 0\""], ["proof (prove)\nusing this:\n  (a * d - b * c) * (a * d - b * c) = 0\n\ngoal (1 subgoal):\n 1. a * d - b * c = 0", "by auto"], ["proof (state)\nthis:\n  a * d - b * c = 0\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"a*d \\<noteq> b*c\""], ["proof (state)\nthis:\n  a * d \\<noteq> b * c\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "with *"], ["proof (chain)\npicking this:\n  a * d - b * c = 0\n  a * d \\<noteq> b * c", "show False"], ["proof (prove)\nusing this:\n  a * d - b * c = 0\n  a * d \\<noteq> b * c\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_inv_l:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"(mat_inv A) *\\<^sub>m\\<^sub>m A  = eye\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_inv A *\\<^sub>m\\<^sub>m A = eye", "using assms"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_inv A *\\<^sub>m\\<^sub>m A = eye", "proof (cases A, auto simp add: field_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "fix a b c d :: complex"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"a * (a * (d * d)) + b * (b * (c * c)) = a * (b * (c * (d * 2)))\""], ["proof (state)\nthis:\n  a * (a * (d * d)) + b * (b * (c * c)) = a * (b * (c * (d * 2)))\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(a*d - b*c)*(a*d - b*c) = 0\""], ["proof (prove)\nusing this:\n  a * (a * (d * d)) + b * (b * (c * c)) = a * (b * (c * (d * 2)))\n\ngoal (1 subgoal):\n 1. (a * d - b * c) * (a * d - b * c) = 0", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  (a * d - b * c) * (a * d - b * c) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "hence *: \"a*d - b*c = 0\""], ["proof (prove)\nusing this:\n  (a * d - b * c) * (a * d - b * c) = 0\n\ngoal (1 subgoal):\n 1. a * d - b * c = 0", "by auto"], ["proof (state)\nthis:\n  a * d - b * c = 0\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"a*d \\<noteq> b*c\""], ["proof (state)\nthis:\n  a * d \\<noteq> b * c\n\ngoal (1 subgoal):\n 1. \\<And>a b c d.\n       \\<lbrakk>a * d \\<noteq> b * c; A = (a, b, c, d);\n        a * (a * (d * d)) + b * (b * (c * c)) =\n        a * (b * (c * (d * 2)))\\<rbrakk>\n       \\<Longrightarrow> False", "with *"], ["proof (chain)\npicking this:\n  a * d - b * c = 0\n  a * d \\<noteq> b * c", "show False"], ["proof (prove)\nusing this:\n  a * d - b * c = 0\n  a * d \\<noteq> b * c\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_det_inv:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"mat_det (mat_inv A) = 1 / mat_det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (mat_inv A) = 1 / mat_det A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_det (mat_inv A) = 1 / mat_det A", "have \"mat_det eye = mat_det A * mat_det (mat_inv A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det eye = mat_det A * mat_det (mat_inv A)", "using mat_inv_l[OF assms, symmetric]"], ["proof (prove)\nusing this:\n  eye = mat_inv A *\\<^sub>m\\<^sub>m A\n\ngoal (1 subgoal):\n 1. mat_det eye = mat_det A * mat_det (mat_inv A)", "by simp"], ["proof (state)\nthis:\n  mat_det eye = mat_det A * mat_det (mat_inv A)\n\ngoal (1 subgoal):\n 1. mat_det (mat_inv A) = 1 / mat_det A", "thus ?thesis"], ["proof (prove)\nusing this:\n  mat_det eye = mat_det A * mat_det (mat_inv A)\n\ngoal (1 subgoal):\n 1. mat_det (mat_inv A) = 1 / mat_det A", "using assms"], ["proof (prove)\nusing this:\n  mat_det eye = mat_det A * mat_det (mat_inv A)\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_det (mat_inv A) = 1 / mat_det A", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  mat_det (mat_inv A) = 1 / mat_det A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_mm_inv_l:\n  assumes \"mat_det A \\<noteq> 0\" and \"A *\\<^sub>m\\<^sub>m B = C\"\n  shows \"B = mat_inv A *\\<^sub>m\\<^sub>m C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B = mat_inv A *\\<^sub>m\\<^sub>m C", "using assms mat_eye_l[of B]"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  A *\\<^sub>m\\<^sub>m B = C\n  eye *\\<^sub>m\\<^sub>m B = B\n\ngoal (1 subgoal):\n 1. B = mat_inv A *\\<^sub>m\\<^sub>m C", "by (auto simp add: mult_mm_assoc mat_inv_l)"], ["", "lemma mult_mm_inv_r:\n  assumes \"mat_det B \\<noteq> 0\" and \"A *\\<^sub>m\\<^sub>m B = C\"\n  shows \"A = C *\\<^sub>m\\<^sub>m mat_inv B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = C *\\<^sub>m\\<^sub>m mat_inv B", "using assms mat_eye_r[of A]"], ["proof (prove)\nusing this:\n  mat_det B \\<noteq> 0\n  A *\\<^sub>m\\<^sub>m B = C\n  A *\\<^sub>m\\<^sub>m eye = A\n\ngoal (1 subgoal):\n 1. A = C *\\<^sub>m\\<^sub>m mat_inv B", "by (auto simp add: mult_mm_assoc[symmetric] mat_inv_r)"], ["", "lemma mult_mm_non_zero_l:\n  assumes \"mat_det A \\<noteq> 0\" and \"B \\<noteq> mat_zero\"\n  shows \"A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero", "using assms mat_zero_r"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  B \\<noteq> mat_zero\n  ?A *\\<^sub>m\\<^sub>m mat_zero = mat_zero\n\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero", "using mult_mm_inv_l[OF assms(1), of B mat_zero]"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  B \\<noteq> mat_zero\n  ?A *\\<^sub>m\\<^sub>m mat_zero = mat_zero\n  A *\\<^sub>m\\<^sub>m B = mat_zero \\<Longrightarrow>\n  B = mat_inv A *\\<^sub>m\\<^sub>m mat_zero\n\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero", "by auto"], ["", "lemma mat_inv_mult_mm:\n  assumes \"mat_det A \\<noteq> 0\" and \"mat_det B \\<noteq> 0\"\n  shows \"mat_inv (A *\\<^sub>m\\<^sub>m B) = mat_inv B *\\<^sub>m\\<^sub>m mat_inv A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_inv (A *\\<^sub>m\\<^sub>m B) = mat_inv B *\\<^sub>m\\<^sub>m mat_inv A", "using assms"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  mat_det B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_inv (A *\\<^sub>m\\<^sub>m B) = mat_inv B *\\<^sub>m\\<^sub>m mat_inv A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>mat_det A \\<noteq> 0; mat_det B \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> mat_inv (A *\\<^sub>m\\<^sub>m B) =\n                      mat_inv B *\\<^sub>m\\<^sub>m mat_inv A", "have \"(A *\\<^sub>m\\<^sub>m B) *\\<^sub>m\\<^sub>m (mat_inv B *\\<^sub>m\\<^sub>m mat_inv A) = eye\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m\n    (mat_inv B *\\<^sub>m\\<^sub>m mat_inv A) =\n    eye", "using assms"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  mat_det B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m\n    (mat_inv B *\\<^sub>m\\<^sub>m mat_inv A) =\n    eye", "by (metis mat_inv_r mult_mm_assoc mult_mm_inv_r)"], ["proof (state)\nthis:\n  A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m\n  (mat_inv B *\\<^sub>m\\<^sub>m mat_inv A) =\n  eye\n\ngoal (1 subgoal):\n 1. \\<lbrakk>mat_det A \\<noteq> 0; mat_det B \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> mat_inv (A *\\<^sub>m\\<^sub>m B) =\n                      mat_inv B *\\<^sub>m\\<^sub>m mat_inv A", "thus ?thesis"], ["proof (prove)\nusing this:\n  A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m\n  (mat_inv B *\\<^sub>m\\<^sub>m mat_inv A) =\n  eye\n\ngoal (1 subgoal):\n 1. mat_inv (A *\\<^sub>m\\<^sub>m B) = mat_inv B *\\<^sub>m\\<^sub>m mat_inv A", "using mult_mm_inv_l[of \"A *\\<^sub>m\\<^sub>m B\" \"mat_inv B *\\<^sub>m\\<^sub>m mat_inv A\" eye] assms mat_eye_r"], ["proof (prove)\nusing this:\n  A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m\n  (mat_inv B *\\<^sub>m\\<^sub>m mat_inv A) =\n  eye\n  \\<lbrakk>mat_det (A *\\<^sub>m\\<^sub>m B) \\<noteq> 0;\n   A *\\<^sub>m\\<^sub>m B *\\<^sub>m\\<^sub>m\n   (mat_inv B *\\<^sub>m\\<^sub>m mat_inv A) =\n   eye\\<rbrakk>\n  \\<Longrightarrow> mat_inv B *\\<^sub>m\\<^sub>m mat_inv A =\n                    mat_inv (A *\\<^sub>m\\<^sub>m B) *\\<^sub>m\\<^sub>m eye\n  mat_det A \\<noteq> 0\n  mat_det B \\<noteq> 0\n  ?A *\\<^sub>m\\<^sub>m eye = ?A\n\ngoal (1 subgoal):\n 1. mat_inv (A *\\<^sub>m\\<^sub>m B) = mat_inv B *\\<^sub>m\\<^sub>m mat_inv A", "by simp"], ["proof (state)\nthis:\n  mat_inv (A *\\<^sub>m\\<^sub>m B) = mat_inv B *\\<^sub>m\\<^sub>m mat_inv A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_mm_cancel_l:\n  assumes \"mat_det M \\<noteq> 0\"  \"M *\\<^sub>m\\<^sub>m A = M *\\<^sub>m\\<^sub>m B\"\n  shows \"A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "using assms"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  M *\\<^sub>m\\<^sub>m A = M *\\<^sub>m\\<^sub>m B\n\ngoal (1 subgoal):\n 1. A = B", "by (metis mult_mm_inv_l)"], ["", "lemma mult_mm_cancel_r:\n  assumes \"mat_det M \\<noteq> 0\"  \"A *\\<^sub>m\\<^sub>m M = B *\\<^sub>m\\<^sub>m M\"\n  shows \"A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "using assms"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  A *\\<^sub>m\\<^sub>m M = B *\\<^sub>m\\<^sub>m M\n\ngoal (1 subgoal):\n 1. A = B", "by (metis mult_mm_inv_r)"], ["", "lemma mult_mm_non_zero_r:\n  assumes \"A \\<noteq> mat_zero\" and \"mat_det B \\<noteq> 0\"\n  shows \"A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero", "using assms mat_zero_l"], ["proof (prove)\nusing this:\n  A \\<noteq> mat_zero\n  mat_det B \\<noteq> 0\n  mat_zero *\\<^sub>m\\<^sub>m ?A = mat_zero\n\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero", "using mult_mm_inv_r[OF assms(2), of A mat_zero]"], ["proof (prove)\nusing this:\n  A \\<noteq> mat_zero\n  mat_det B \\<noteq> 0\n  mat_zero *\\<^sub>m\\<^sub>m ?A = mat_zero\n  A *\\<^sub>m\\<^sub>m B = mat_zero \\<Longrightarrow>\n  A = mat_zero *\\<^sub>m\\<^sub>m mat_inv B\n\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>m B \\<noteq> mat_zero", "by auto"], ["", "lemma mat_inv_mult_sm:\n  assumes \"k \\<noteq> 0\"\n  shows \"mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A", "obtain a b c d where \"A = (a, b, c, d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d.\n        A = (a, b, c, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases A) auto"], ["proof (state)\nthis:\n  A = (a, b, c, d)\n\ngoal (1 subgoal):\n 1. mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = (a, b, c, d)\n\ngoal (1 subgoal):\n 1. mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A", "using assms"], ["proof (prove)\nusing this:\n  A = (a, b, c, d)\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A", "by auto (subst mult.assoc[of k a \"k*d\"], subst mult.assoc[of k b \"k*c\"], subst right_diff_distrib[of k \"a*(k*d)\" \"b*(k*c)\", symmetric], simp, simp add: field_simps)+"], ["proof (state)\nthis:\n  mat_inv (k *\\<^sub>s\\<^sub>m A) = (1 / k) *\\<^sub>s\\<^sub>m mat_inv A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_inv_inv [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"mat_inv (mat_inv M) = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_inv (mat_inv M) = M", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_inv (mat_inv M) = M", "have \"mat_inv M *\\<^sub>m\\<^sub>m M = eye\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_inv M *\\<^sub>m\\<^sub>m M = eye", "using mat_inv_l[OF assms]"], ["proof (prove)\nusing this:\n  mat_inv M *\\<^sub>m\\<^sub>m M = eye\n\ngoal (1 subgoal):\n 1. mat_inv M *\\<^sub>m\\<^sub>m M = eye", "by simp"], ["proof (state)\nthis:\n  mat_inv M *\\<^sub>m\\<^sub>m M = eye\n\ngoal (1 subgoal):\n 1. mat_inv (mat_inv M) = M", "thus ?thesis"], ["proof (prove)\nusing this:\n  mat_inv M *\\<^sub>m\\<^sub>m M = eye\n\ngoal (1 subgoal):\n 1. mat_inv (mat_inv M) = M", "using assms mat_det_inv[of M]"], ["proof (prove)\nusing this:\n  mat_inv M *\\<^sub>m\\<^sub>m M = eye\n  mat_det M \\<noteq> 0\n  mat_det M \\<noteq> 0 \\<Longrightarrow> mat_det (mat_inv M) = 1 / mat_det M\n\ngoal (1 subgoal):\n 1. mat_inv (mat_inv M) = M", "using mult_mm_inv_l[of \"mat_inv M\" M eye] mat_eye_r"], ["proof (prove)\nusing this:\n  mat_inv M *\\<^sub>m\\<^sub>m M = eye\n  mat_det M \\<noteq> 0\n  mat_det M \\<noteq> 0 \\<Longrightarrow> mat_det (mat_inv M) = 1 / mat_det M\n  \\<lbrakk>mat_det (mat_inv M) \\<noteq> 0;\n   mat_inv M *\\<^sub>m\\<^sub>m M = eye\\<rbrakk>\n  \\<Longrightarrow> M = mat_inv (mat_inv M) *\\<^sub>m\\<^sub>m eye\n  ?A *\\<^sub>m\\<^sub>m eye = ?A\n\ngoal (1 subgoal):\n 1. mat_inv (mat_inv M) = M", "by (auto simp del: eye_def)"], ["proof (state)\nthis:\n  mat_inv (mat_inv M) = M\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Matrix transpose\\<close>"], ["", "fun mat_transpose where\n  \"mat_transpose (a, b, c, d) = (a, c, b, d)\""], ["", "lemma mat_t_mat_t [simp]:\n  shows \"mat_transpose (mat_transpose A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_transpose (mat_transpose A) = A", "by (cases A) auto"], ["", "lemma mat_t_mult_sm [simp]:\n  shows \"mat_transpose (k *\\<^sub>s\\<^sub>m A) = k *\\<^sub>s\\<^sub>m (mat_transpose A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_transpose (k *\\<^sub>s\\<^sub>m A) =\n    k *\\<^sub>s\\<^sub>m mat_transpose A", "by (cases A) simp"], ["", "lemma mat_t_mult_mm [simp]:\n  shows \"mat_transpose (A *\\<^sub>m\\<^sub>m B) = mat_transpose B *\\<^sub>m\\<^sub>m mat_transpose A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_transpose (A *\\<^sub>m\\<^sub>m B) =\n    mat_transpose B *\\<^sub>m\\<^sub>m mat_transpose A", "by (cases A, cases B) auto"], ["", "lemma mat_inv_transpose:\n  shows \"mat_transpose (mat_inv M) = mat_inv (mat_transpose M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_transpose (mat_inv M) = mat_inv (mat_transpose M)", "by (cases M) auto"], ["", "lemma mat_det_transpose [simp]:\n  fixes M :: \"complex_mat\"\n  shows \"mat_det (mat_transpose M) = mat_det M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (mat_transpose M) = mat_det M", "by (cases M) auto"], ["", "text \\<open>Diagonal matrices definition\\<close>"], ["", "fun mat_diagonal where\n \"mat_diagonal (A, B, C, D) = (B = 0 \\<and> C = 0)\""], ["", "text \\<open>Matrix conjugate\\<close>"], ["", "fun mat_map where\n \"mat_map f (a, b, c, d) = (f a, f b, f c, f d)\""], ["", "definition mat_cnj where\n  \"mat_cnj = mat_map cnj\""], ["", "lemma mat_cnj_cnj [simp]:\n  shows \"mat_cnj (mat_cnj A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_cnj (mat_cnj A) = A", "unfolding mat_cnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_map cnj (mat_map cnj A) = A", "by (cases A) auto"], ["", "lemma mat_cnj_sm [simp]:\n  shows \"mat_cnj (k *\\<^sub>s\\<^sub>m A) = cnj k *\\<^sub>s\\<^sub>m (mat_cnj A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_cnj (k *\\<^sub>s\\<^sub>m A) = cnj k *\\<^sub>s\\<^sub>m mat_cnj A", "by (cases A) (simp add: mat_cnj_def)"], ["", "lemma mat_det_cnj [simp]: \n  shows \"mat_det (mat_cnj A) = cnj (mat_det A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (mat_cnj A) = cnj (mat_det A)", "by (cases A) (simp add: mat_cnj_def)"], ["", "lemma nonzero_mat_cnj:\n  shows \"mat_cnj A = mat_zero \\<longleftrightarrow> A = mat_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mat_cnj A = mat_zero) = (A = mat_zero)", "by (cases A) (auto simp add: mat_cnj_def)"], ["", "lemma mat_inv_cnj:\n  shows \"mat_cnj (mat_inv M) = mat_inv (mat_cnj M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_cnj (mat_inv M) = mat_inv (mat_cnj M)", "unfolding mat_cnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_map cnj (mat_inv M) = mat_inv (mat_map cnj M)", "by (cases M) auto"], ["", "text \\<open>Matrix adjoint - the conjugate traspose matrix ($A^* = \\overline{A^t}$)\\<close>"], ["", "definition mat_adj where\n  \"mat_adj A = mat_cnj (mat_transpose A)\""], ["", "lemma mat_adj_mult_mm [simp]:\n  shows \"mat_adj (A *\\<^sub>m\\<^sub>m B) = mat_adj B *\\<^sub>m\\<^sub>m mat_adj A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj (A *\\<^sub>m\\<^sub>m B) = mat_adj B *\\<^sub>m\\<^sub>m mat_adj A", "by (cases A, cases B) (auto simp add: mat_adj_def mat_cnj_def)"], ["", "lemma mat_adj_mult_sm [simp]:\n  shows \"mat_adj (k *\\<^sub>s\\<^sub>m A) = cnj k *\\<^sub>s\\<^sub>m mat_adj A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj (k *\\<^sub>s\\<^sub>m A) = cnj k *\\<^sub>s\\<^sub>m mat_adj A", "by (cases A) (auto simp add: mat_adj_def mat_cnj_def)"], ["", "lemma mat_det_adj: \n  shows \"mat_det (mat_adj A) = cnj (mat_det A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (mat_adj A) = cnj (mat_det A)", "by (cases A) (auto simp add: mat_adj_def mat_cnj_def)"], ["", "lemma mat_adj_inv:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"mat_adj (mat_inv M) = mat_inv (mat_adj M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj (mat_inv M) = mat_inv (mat_adj M)", "by (cases M) (auto simp add: mat_adj_def mat_cnj_def)"], ["", "lemma mat_transpose_mat_cnj:\n  shows \"mat_transpose (mat_cnj A) = mat_adj A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_transpose (mat_cnj A) = mat_adj A", "by (cases A)  (auto simp add: mat_adj_def mat_cnj_def)"], ["", "lemma mat_adj_adj [simp]:\n  shows \"mat_adj (mat_adj A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj (mat_adj A) = A", "unfolding mat_adj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_cnj (mat_transpose (mat_cnj (mat_transpose A))) = A", "by (subst mat_transpose_mat_cnj) (simp add: mat_adj_def)"], ["", "lemma mat_adj_eye [simp]:\n  shows \"mat_adj eye = eye\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj eye = eye", "by (auto simp add: mat_adj_def mat_cnj_def)"], ["", "text \\<open>Matrix trace\\<close>"], ["", "fun mat_trace where\n  \"mat_trace (a, b, c, d) = a + d\""], ["", "text \\<open>Multiplication of matrix and a vector\\<close>"], ["", "fun mult_mv :: \"complex_mat \\<Rightarrow> complex_vec \\<Rightarrow> complex_vec\" (infixl \"*\\<^sub>m\\<^sub>v\" 100)  where\n  \"(a, b, c, d) *\\<^sub>m\\<^sub>v (x, y) = (x*a + y*b, x*c + y*d)\""], ["", "fun mult_vm :: \"complex_vec \\<Rightarrow> complex_mat \\<Rightarrow> complex_vec\" (infixl \"*\\<^sub>v\\<^sub>m\" 100) where\n  \"(x, y) *\\<^sub>v\\<^sub>m (a, b, c, d)  = (x*a + y*c, x*b + y*d)\""], ["", "lemma eye_mv_l [simp]:\n  shows \"eye *\\<^sub>m\\<^sub>v v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eye *\\<^sub>m\\<^sub>v v = v", "by (cases v) simp"], ["", "lemma mult_mv_mv [simp]: \n  shows \"B *\\<^sub>m\\<^sub>v (A *\\<^sub>m\\<^sub>v v) = (B *\\<^sub>m\\<^sub>m A) *\\<^sub>m\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B *\\<^sub>m\\<^sub>v (A *\\<^sub>m\\<^sub>v v) =\n    B *\\<^sub>m\\<^sub>m A *\\<^sub>m\\<^sub>v v", "by (cases v, cases A, cases B) (auto simp add: field_simps)"], ["", "lemma mult_vm_vm [simp]:\n  shows \"(v *\\<^sub>v\\<^sub>m A) *\\<^sub>v\\<^sub>m B = v *\\<^sub>v\\<^sub>m (A *\\<^sub>m\\<^sub>m B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v *\\<^sub>v\\<^sub>m A *\\<^sub>v\\<^sub>m B =\n    v *\\<^sub>v\\<^sub>m (A *\\<^sub>m\\<^sub>m B)", "by (cases v, cases A, cases B) (auto simp add: field_simps)"], ["", "lemma mult_mv_inv:\n  assumes \"x =  A *\\<^sub>m\\<^sub>v y\" and \"mat_det A \\<noteq> 0\"\n  shows \"y = (mat_inv A) *\\<^sub>m\\<^sub>v x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = mat_inv A *\\<^sub>m\\<^sub>v x", "using assms"], ["proof (prove)\nusing this:\n  x = A *\\<^sub>m\\<^sub>v y\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. y = mat_inv A *\\<^sub>m\\<^sub>v x", "by (cases y) (simp add: mat_inv_l)"], ["", "lemma mult_vm_inv:\n  assumes \"x =  y *\\<^sub>v\\<^sub>m A\" and \"mat_det A \\<noteq> 0\"\n  shows \"y = x *\\<^sub>v\\<^sub>m (mat_inv A) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = x *\\<^sub>v\\<^sub>m mat_inv A", "using assms"], ["proof (prove)\nusing this:\n  x = y *\\<^sub>v\\<^sub>m A\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. y = x *\\<^sub>v\\<^sub>m mat_inv A", "by (cases y) (simp add: mat_inv_r)"], ["", "lemma mult_mv_cancel_l:\n  assumes \"mat_det A \\<noteq> 0\" and \"A *\\<^sub>m\\<^sub>v v = A *\\<^sub>m\\<^sub>v v'\"\n  shows \"v = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v'", "using assms"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  A *\\<^sub>m\\<^sub>v v = A *\\<^sub>m\\<^sub>v v'\n\ngoal (1 subgoal):\n 1. v = v'", "using mult_mv_inv"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  A *\\<^sub>m\\<^sub>v v = A *\\<^sub>m\\<^sub>v v'\n  \\<lbrakk>?x = ?A *\\<^sub>m\\<^sub>v ?y; mat_det ?A \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?y = mat_inv ?A *\\<^sub>m\\<^sub>v ?x\n\ngoal (1 subgoal):\n 1. v = v'", "by blast"], ["", "lemma mult_vm_cancel_r:\n  assumes \"mat_det A \\<noteq> 0\" and \"v *\\<^sub>v\\<^sub>m A = v' *\\<^sub>v\\<^sub>m A\"\n  shows \"v = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v'", "using assms"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  v *\\<^sub>v\\<^sub>m A = v' *\\<^sub>v\\<^sub>m A\n\ngoal (1 subgoal):\n 1. v = v'", "using mult_vm_inv"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  v *\\<^sub>v\\<^sub>m A = v' *\\<^sub>v\\<^sub>m A\n  \\<lbrakk>?x = ?y *\\<^sub>v\\<^sub>m ?A; mat_det ?A \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?y = ?x *\\<^sub>v\\<^sub>m mat_inv ?A\n\ngoal (1 subgoal):\n 1. v = v'", "by blast"], ["", "lemma vec_zero_l [simp]:\n  shows \"A *\\<^sub>m\\<^sub>v vec_zero = vec_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>v vec_zero = vec_zero", "by (cases A) simp"], ["", "lemma vec_zero_r [simp]:\n  shows \"vec_zero *\\<^sub>v\\<^sub>m A = vec_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_zero *\\<^sub>v\\<^sub>m A = vec_zero", "by (cases A) simp"], ["", "lemma mult_mv_nonzero:\n  assumes \"v \\<noteq> vec_zero\" and \"mat_det A \\<noteq> 0\"\n  shows \"A *\\<^sub>m\\<^sub>v v \\<noteq> vec_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>v v \\<noteq> vec_zero", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A *\\<^sub>m\\<^sub>v v \\<noteq> vec_zero \\<Longrightarrow> False", "using assms mult_mv_inv[of vec_zero A v] mat_inv_l vec_zero_l"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero\n  mat_det A \\<noteq> 0\n  \\<lbrakk>vec_zero = A *\\<^sub>m\\<^sub>v v; mat_det A \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> v = mat_inv A *\\<^sub>m\\<^sub>v vec_zero\n  mat_det ?A \\<noteq> 0 \\<Longrightarrow>\n  mat_inv ?A *\\<^sub>m\\<^sub>m ?A = eye\n  ?A *\\<^sub>m\\<^sub>v vec_zero = vec_zero\n\ngoal (1 subgoal):\n 1. \\<not> A *\\<^sub>m\\<^sub>v v \\<noteq> vec_zero \\<Longrightarrow> False", "by auto"], ["", "lemma mult_vm_nonzero:\n  assumes \"v \\<noteq> vec_zero\" and \"mat_det A \\<noteq> 0\"\n  shows \"v *\\<^sub>v\\<^sub>m A \\<noteq> vec_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v *\\<^sub>v\\<^sub>m A \\<noteq> vec_zero", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> v *\\<^sub>v\\<^sub>m A \\<noteq> vec_zero \\<Longrightarrow> False", "using assms mult_vm_inv[of vec_zero v A] mat_inv_r vec_zero_r"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero\n  mat_det A \\<noteq> 0\n  \\<lbrakk>vec_zero = v *\\<^sub>v\\<^sub>m A; mat_det A \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> v = vec_zero *\\<^sub>v\\<^sub>m mat_inv A\n  mat_det ?A \\<noteq> 0 \\<Longrightarrow>\n  ?A *\\<^sub>m\\<^sub>m mat_inv ?A = eye\n  vec_zero *\\<^sub>v\\<^sub>m ?A = vec_zero\n\ngoal (1 subgoal):\n 1. \\<not> v *\\<^sub>v\\<^sub>m A \\<noteq> vec_zero \\<Longrightarrow> False", "by auto"], ["", "lemma mult_sv_mv:\n  shows \"k *\\<^sub>s\\<^sub>v (A *\\<^sub>m\\<^sub>v v) = (A *\\<^sub>m\\<^sub>v (k *\\<^sub>s\\<^sub>v v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k *\\<^sub>s\\<^sub>v (A *\\<^sub>m\\<^sub>v v) =\n    A *\\<^sub>m\\<^sub>v (k *\\<^sub>s\\<^sub>v v)", "by (cases A, cases v) (simp add: field_simps)"], ["", "lemma mult_mv_mult_vm: \n  shows \"A *\\<^sub>m\\<^sub>v x = x *\\<^sub>v\\<^sub>m (mat_transpose A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>v x = x *\\<^sub>v\\<^sub>m mat_transpose A", "by (cases A, cases x) auto"], ["", "lemma mult_mv_vv:\n  shows \"A *\\<^sub>m\\<^sub>v v1 *\\<^sub>v\\<^sub>v v2 = v1 *\\<^sub>v\\<^sub>v (mat_transpose A *\\<^sub>m\\<^sub>v v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>m\\<^sub>v v1 *\\<^sub>v\\<^sub>v v2 =\n    v1 *\\<^sub>v\\<^sub>v (mat_transpose A *\\<^sub>m\\<^sub>v v2)", "by (cases v1, cases v2, cases A) (auto simp add: field_simps)"], ["", "lemma mult_vv_mv:\n  shows \"x *\\<^sub>v\\<^sub>v (A *\\<^sub>m\\<^sub>v y)  = (x *\\<^sub>v\\<^sub>m A) *\\<^sub>v\\<^sub>v y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x *\\<^sub>v\\<^sub>v (A *\\<^sub>m\\<^sub>v y) =\n    x *\\<^sub>v\\<^sub>m A *\\<^sub>v\\<^sub>v y", "by (cases x, cases y, cases A) (auto simp add: field_simps)"], ["", "lemma vec_cnj_mult_mv:\n  shows \"vec_cnj (A *\\<^sub>m\\<^sub>v x) =  (mat_cnj A) *\\<^sub>m\\<^sub>v (vec_cnj x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj (A *\\<^sub>m\\<^sub>v x) = mat_cnj A *\\<^sub>m\\<^sub>v vec_cnj x", "by (cases A, cases x) (auto simp add: vec_cnj_def mat_cnj_def)"], ["", "lemma vec_cnj_mult_vm:\n  shows \"vec_cnj (v *\\<^sub>v\\<^sub>m A) = vec_cnj v *\\<^sub>v\\<^sub>m mat_cnj A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj (v *\\<^sub>v\\<^sub>m A) = vec_cnj v *\\<^sub>v\\<^sub>m mat_cnj A", "unfolding vec_cnj_def mat_cnj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_map cnj (v *\\<^sub>v\\<^sub>m A) =\n    vec_map cnj v *\\<^sub>v\\<^sub>m mat_map cnj A", "by (cases A, cases v, auto)"], ["", "(* ---------------------------------------------------------------------------- *)"], ["", "subsubsection \\<open>Eigenvalues and eigenvectors\\<close>"], ["", "(* ---------------------------------------------------------------------------- *)"], ["", "definition eigenpair where\n  [simp]: \"eigenpair k v H \\<longleftrightarrow> v \\<noteq> vec_zero \\<and> H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\""], ["", "definition eigenval where\n  [simp]: \"eigenval k H \\<longleftrightarrow> (\\<exists> v. v \\<noteq> vec_zero \\<and> H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v)\""], ["", "lemma eigen_equation:\n  shows \"eigenval k H \\<longleftrightarrow> k\\<^sup>2 - mat_trace H * k + mat_det H = 0\" (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. eigenval k H = (k\\<^sup>2 - mat_trace H * k + mat_det H = 0)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. eigenval k H = (k\\<^sup>2 - mat_trace H * k + mat_det H = 0)", "obtain A B C D where HH: \"H = (A, B, C, D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A B C D.\n        H = (A, B, C, D) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases H) auto"], ["proof (state)\nthis:\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. eigenval k H = (k\\<^sup>2 - mat_trace H * k + mat_det H = 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eigenval k H = (k\\<^sup>2 - mat_trace H * k + mat_det H = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. eigenval k H \\<Longrightarrow>\n    k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n 2. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "assume ?lhs"], ["proof (state)\nthis:\n  eigenval k H\n\ngoal (2 subgoals):\n 1. eigenval k H \\<Longrightarrow>\n    k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n 2. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "then"], ["proof (chain)\npicking this:\n  eigenval k H", "obtain v where \"v \\<noteq> vec_zero\" \"H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\""], ["proof (prove)\nusing this:\n  eigenval k H\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<noteq> vec_zero;\n         H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding eigenval_def"], ["proof (prove)\nusing this:\n  \\<exists>v.\n     v \\<noteq> vec_zero \\<and>\n     H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<noteq> vec_zero;\n         H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<noteq> vec_zero\n  H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\n\ngoal (2 subgoals):\n 1. eigenval k H \\<Longrightarrow>\n    k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n 2. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "obtain v1 v2 where vv: \"v = (v1, v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v1 v2. v = (v1, v2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases v) auto"], ["proof (state)\nthis:\n  v = (v1, v2)\n\ngoal (2 subgoals):\n 1. eigenval k H \\<Longrightarrow>\n    k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n 2. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "from \\<open>H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\\<close>"], ["proof (chain)\npicking this:\n  H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v", "have \"(H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) *\\<^sub>m\\<^sub>v v = vec_zero\""], ["proof (prove)\nusing this:\n  H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\n\ngoal (1 subgoal):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n    vec_zero", "using HH vv"], ["proof (prove)\nusing this:\n  H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v\n  H = (A, B, C, D)\n  v = (v1, v2)\n\ngoal (1 subgoal):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n    vec_zero", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n\ngoal (2 subgoals):\n 1. eigenval k H \\<Longrightarrow>\n    k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n 2. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "hence \"mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\""], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n\ngoal (1 subgoal):\n 1. mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0", "using \\<open>v \\<noteq> vec_zero\\<close> vv HH"], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n  v \\<noteq> vec_zero\n  v = (v1, v2)\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0", "using regular_homogenous_system[of \"A - k\" B C \"D - k\" v1 v2]"], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n  v \\<noteq> vec_zero\n  v = (v1, v2)\n  H = (A, B, C, D)\n  \\<lbrakk>det2 (A - k) B C (D - k) \\<noteq> 0; (A - k) * v1 + B * v2 = 0;\n   C * v1 + (D - k) * v2 = 0\\<rbrakk>\n  \\<Longrightarrow> v1 = 0 \\<and> v2 = 0\n\ngoal (1 subgoal):\n 1. mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0", "unfolding det2_def"], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n  v \\<noteq> vec_zero\n  v = (v1, v2)\n  H = (A, B, C, D)\n  \\<lbrakk>(A - k) * (D - k) - B * C \\<noteq> 0; (A - k) * v1 + B * v2 = 0;\n   C * v1 + (D - k) * v2 = 0\\<rbrakk>\n  \\<Longrightarrow> v1 = 0 \\<and> v2 = 0\n\ngoal (1 subgoal):\n 1. mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\n\ngoal (2 subgoals):\n 1. eigenval k H \\<Longrightarrow>\n    k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n 2. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "thus ?rhs"], ["proof (prove)\nusing this:\n  mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\n\ngoal (1 subgoal):\n 1. k\\<^sup>2 - mat_trace H * k + mat_det H = 0", "using HH"], ["proof (prove)\nusing this:\n  mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. k\\<^sup>2 - mat_trace H * k + mat_det H = 0", "by (auto simp add: power2_eq_square field_simps)"], ["proof (state)\nthis:\n  k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n\ngoal (1 subgoal):\n 1. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "assume ?rhs"], ["proof (state)\nthis:\n  k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n\ngoal (1 subgoal):\n 1. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "hence *: \"mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\""], ["proof (prove)\nusing this:\n  k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n\ngoal (1 subgoal):\n 1. mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0", "using HH"], ["proof (prove)\nusing this:\n  k\\<^sup>2 - mat_trace H * k + mat_det H = 0\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0", "by (auto simp add: field_simps power2_eq_square)"], ["proof (state)\nthis:\n  mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\n\ngoal (1 subgoal):\n 1. k\\<^sup>2 - mat_trace H * k + mat_det H = 0 \\<Longrightarrow>\n    eigenval k H", "show ?lhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. eigenval k H", "proof (cases \"H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) = mat_zero\")"], ["proof (state)\ngoal (2 subgoals):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) =\n    mat_zero \\<Longrightarrow>\n    eigenval k H\n 2. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq>\n    mat_zero \\<Longrightarrow>\n    eigenval k H", "case True"], ["proof (state)\nthis:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) = mat_zero\n\ngoal (2 subgoals):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) =\n    mat_zero \\<Longrightarrow>\n    eigenval k H\n 2. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq>\n    mat_zero \\<Longrightarrow>\n    eigenval k H", "thus ?thesis"], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) = mat_zero\n\ngoal (1 subgoal):\n 1. eigenval k H", "using HH"], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) = mat_zero\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. eigenval k H", "by (auto) (rule_tac x=1 in exI, simp)"], ["proof (state)\nthis:\n  eigenval k H\n\ngoal (1 subgoal):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq>\n    mat_zero \\<Longrightarrow>\n    eigenval k H", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq>\n    mat_zero \\<Longrightarrow>\n    eigenval k H", "case False"], ["proof (state)\nthis:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq> mat_zero\n\ngoal (1 subgoal):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq>\n    mat_zero \\<Longrightarrow>\n    eigenval k H", "hence \"(A - k \\<noteq> 0 \\<or> B \\<noteq> 0) \\<or> (D - k \\<noteq> 0 \\<or> C \\<noteq> 0)\""], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq> mat_zero\n\ngoal (1 subgoal):\n 1. (A - k \\<noteq> 0 \\<or> B \\<noteq> 0) \\<or>\n    D - k \\<noteq> 0 \\<or> C \\<noteq> 0", "using HH"], ["proof (prove)\nusing this:\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq> mat_zero\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. (A - k \\<noteq> 0 \\<or> B \\<noteq> 0) \\<or>\n    D - k \\<noteq> 0 \\<or> C \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  (A - k \\<noteq> 0 \\<or> B \\<noteq> 0) \\<or>\n  D - k \\<noteq> 0 \\<or> C \\<noteq> 0\n\ngoal (1 subgoal):\n 1. H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) \\<noteq>\n    mat_zero \\<Longrightarrow>\n    eigenval k H", "thus ?thesis"], ["proof (prove)\nusing this:\n  (A - k \\<noteq> 0 \\<or> B \\<noteq> 0) \\<or>\n  D - k \\<noteq> 0 \\<or> C \\<noteq> 0\n\ngoal (1 subgoal):\n 1. eigenval k H", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. A - k \\<noteq> 0 \\<or> B \\<noteq> 0 \\<Longrightarrow> eigenval k H\n 2. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "assume \"A - k \\<noteq> 0 \\<or> B \\<noteq> 0\""], ["proof (state)\nthis:\n  A - k \\<noteq> 0 \\<or> B \\<noteq> 0\n\ngoal (2 subgoals):\n 1. A - k \\<noteq> 0 \\<or> B \\<noteq> 0 \\<Longrightarrow> eigenval k H\n 2. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "hence \"C * B + (D - k) * (k - A) = 0\""], ["proof (prove)\nusing this:\n  A - k \\<noteq> 0 \\<or> B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. C * B + (D - k) * (k - A) = 0", "using * singular_system[of \"A-k\" \"D-k\" B C \"(0, 0)\" 0 0  \"(B, k-A)\"] HH"], ["proof (prove)\nusing this:\n  A - k \\<noteq> 0 \\<or> B \\<noteq> 0\n  mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\n  \\<lbrakk>det2 (A - k) (D - k) B C = 0;\n   A - k \\<noteq> 0 \\<or> D - k \\<noteq> 0;\n   (A - k) * fst (0, 0) + (D - k) * snd (0, 0) = 0;\n   B * fst (0, 0) + C * snd (0, 0) = 0;\n   (A - k) * fst (B, k - A) + (D - k) * snd (B, k - A) = 0\\<rbrakk>\n  \\<Longrightarrow> B * fst (B, k - A) + C * snd (B, k - A) = 0\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. C * B + (D - k) * (k - A) = 0", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  C * B + (D - k) * (k - A) = 0\n\ngoal (2 subgoals):\n 1. A - k \\<noteq> 0 \\<or> B \\<noteq> 0 \\<Longrightarrow> eigenval k H\n 2. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "hence  \"(B, k-A) \\<noteq> vec_zero\" \"(H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) *\\<^sub>m\\<^sub>v (B, k-A) = vec_zero\""], ["proof (prove)\nusing this:\n  C * B + (D - k) * (k - A) = 0\n\ngoal (1 subgoal):\n 1. (B, k - A) \\<noteq> vec_zero &&&\n    H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n    (B, k - A) =\n    vec_zero", "using HH \\<open>A - k \\<noteq> 0 \\<or> B \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  C * B + (D - k) * (k - A) = 0\n  H = (A, B, C, D)\n  A - k \\<noteq> 0 \\<or> B \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (B, k - A) \\<noteq> vec_zero &&&\n    H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n    (B, k - A) =\n    vec_zero", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  (B, k - A) \\<noteq> vec_zero\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n  (B, k - A) =\n  vec_zero\n\ngoal (2 subgoals):\n 1. A - k \\<noteq> 0 \\<or> B \\<noteq> 0 \\<Longrightarrow> eigenval k H\n 2. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "then"], ["proof (chain)\npicking this:\n  (B, k - A) \\<noteq> vec_zero\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n  (B, k - A) =\n  vec_zero", "obtain v where \"v \\<noteq> vec_zero \\<and> (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) *\\<^sub>m\\<^sub>v v = vec_zero\""], ["proof (prove)\nusing this:\n  (B, k - A) \\<noteq> vec_zero\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n  (B, k - A) =\n  vec_zero\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        v \\<noteq> vec_zero \\<and>\n        H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n        vec_zero \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n\ngoal (2 subgoals):\n 1. A - k \\<noteq> 0 \\<or> B \\<noteq> 0 \\<Longrightarrow> eigenval k H\n 2. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n\ngoal (1 subgoal):\n 1. eigenval k H", "using HH"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. eigenval k H", "unfolding eigenval_def"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. \\<exists>v.\n       v \\<noteq> vec_zero \\<and>\n       H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v", "by (rule_tac x=\"v\" in exI) (case_tac v, simp add: field_simps)"], ["proof (state)\nthis:\n  eigenval k H\n\ngoal (1 subgoal):\n 1. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "assume \"D - k \\<noteq> 0 \\<or> C \\<noteq> 0\""], ["proof (state)\nthis:\n  D - k \\<noteq> 0 \\<or> C \\<noteq> 0\n\ngoal (1 subgoal):\n 1. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "hence \"C * B + (D - k) * (k - A) = 0\""], ["proof (prove)\nusing this:\n  D - k \\<noteq> 0 \\<or> C \\<noteq> 0\n\ngoal (1 subgoal):\n 1. C * B + (D - k) * (k - A) = 0", "using * singular_system[of \"D-k\" \"A-k\" C B \"(0, 0)\" 0 0  \"(C, k-D)\"] HH"], ["proof (prove)\nusing this:\n  D - k \\<noteq> 0 \\<or> C \\<noteq> 0\n  mat_det (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) = 0\n  \\<lbrakk>det2 (D - k) (A - k) C B = 0;\n   D - k \\<noteq> 0 \\<or> A - k \\<noteq> 0;\n   (D - k) * fst (0, 0) + (A - k) * snd (0, 0) = 0;\n   C * fst (0, 0) + B * snd (0, 0) = 0;\n   (D - k) * fst (C, k - D) + (A - k) * snd (C, k - D) = 0\\<rbrakk>\n  \\<Longrightarrow> C * fst (C, k - D) + B * snd (C, k - D) = 0\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. C * B + (D - k) * (k - A) = 0", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  C * B + (D - k) * (k - A) = 0\n\ngoal (1 subgoal):\n 1. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "hence  \"(k-D, C) \\<noteq> vec_zero\" \"(H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) *\\<^sub>m\\<^sub>v (k-D, C) = vec_zero\""], ["proof (prove)\nusing this:\n  C * B + (D - k) * (k - A) = 0\n\ngoal (1 subgoal):\n 1. (k - D, C) \\<noteq> vec_zero &&&\n    H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n    (k - D, C) =\n    vec_zero", "using HH \\<open>D - k \\<noteq> 0 \\<or> C \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  C * B + (D - k) * (k - A) = 0\n  H = (A, B, C, D)\n  D - k \\<noteq> 0 \\<or> C \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (k - D, C) \\<noteq> vec_zero &&&\n    H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n    (k - D, C) =\n    vec_zero", "by (auto simp add: field_simps)"], ["proof (state)\nthis:\n  (k - D, C) \\<noteq> vec_zero\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n  (k - D, C) =\n  vec_zero\n\ngoal (1 subgoal):\n 1. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "then"], ["proof (chain)\npicking this:\n  (k - D, C) \\<noteq> vec_zero\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n  (k - D, C) =\n  vec_zero", "obtain v where \"v \\<noteq> vec_zero \\<and> (H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye)) *\\<^sub>m\\<^sub>v v = vec_zero\""], ["proof (prove)\nusing this:\n  (k - D, C) \\<noteq> vec_zero\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v\n  (k - D, C) =\n  vec_zero\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        v \\<noteq> vec_zero \\<and>\n        H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n        vec_zero \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n\ngoal (1 subgoal):\n 1. D - k \\<noteq> 0 \\<or> C \\<noteq> 0 \\<Longrightarrow> eigenval k H", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n\ngoal (1 subgoal):\n 1. eigenval k H", "using HH"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. eigenval k H", "unfolding eigenval_def"], ["proof (prove)\nusing this:\n  v \\<noteq> vec_zero \\<and>\n  H -\\<^sub>m\\<^sub>m (k *\\<^sub>s\\<^sub>m eye) *\\<^sub>m\\<^sub>v v =\n  vec_zero\n  H = (A, B, C, D)\n\ngoal (1 subgoal):\n 1. \\<exists>v.\n       v \\<noteq> vec_zero \\<and>\n       H *\\<^sub>m\\<^sub>v v = k *\\<^sub>s\\<^sub>v v", "by (rule_tac x=\"v\" in exI) (case_tac v, simp add: field_simps)"], ["proof (state)\nthis:\n  eigenval k H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eigenval k H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eigenval k H\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eigenval k H = (k\\<^sup>2 - mat_trace H * k + mat_det H = 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* ---------------------------------------------------------------------------- *)"], ["", "subsubsection \\<open>Bilinear and Quadratic forms, Congruence, and Similarity\\<close>"], ["", "(* ---------------------------------------------------------------------------- *)"], ["", "text \\<open>Bilinear forms\\<close>"], ["", "definition bilinear_form where\n  [simp]: \"bilinear_form v1 v2 H = (vec_cnj v1) *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2\""], ["", "lemma bilinear_form_scale_m:\n  shows \"bilinear_form v1 v2 (k *\\<^sub>s\\<^sub>m H) = k * bilinear_form v1 v2 H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bilinear_form v1 v2 (k *\\<^sub>s\\<^sub>m H) = k * bilinear_form v1 v2 H", "by (cases v1, cases v2, cases H) (simp add: vec_cnj_def field_simps)"], ["", "lemma bilinear_form_scale_v1:\n  shows \"bilinear_form (k *\\<^sub>s\\<^sub>v v1) v2 H = cnj k * bilinear_form v1 v2 H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bilinear_form (k *\\<^sub>s\\<^sub>v v1) v2 H =\n    cnj k * bilinear_form v1 v2 H", "by (cases v1, cases v2, cases H) (simp add: vec_cnj_def field_simps)"], ["", "lemma bilinear_form_scale_v2:\n  shows \"bilinear_form  v1 (k *\\<^sub>s\\<^sub>v v2) H = k * bilinear_form v1 v2 H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bilinear_form v1 (k *\\<^sub>s\\<^sub>v v2) H = k * bilinear_form v1 v2 H", "by (cases v1, cases v2, cases H) (simp add: vec_cnj_def field_simps)"], ["", "text \\<open>Quadratic forms\\<close>"], ["", "definition quad_form where\n  [simp]: \"quad_form v H = (vec_cnj v) *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v\""], ["", "lemma quad_form_bilinear_form: \n  shows \"quad_form v H = bilinear_form v v H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quad_form v H = bilinear_form v v H", "by simp"], ["", "lemma quad_form_scale_v:\n  shows \"quad_form (k *\\<^sub>s\\<^sub>v v) H = cor ((cmod k)\\<^sup>2) * quad_form v H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quad_form (k *\\<^sub>s\\<^sub>v v) H =\n    cor ((cmod k)\\<^sup>2) * quad_form v H", "using bilinear_form_scale_v1 bilinear_form_scale_v2"], ["proof (prove)\nusing this:\n  bilinear_form (?k *\\<^sub>s\\<^sub>v ?v1.0) ?v2.0 ?H =\n  cnj ?k * bilinear_form ?v1.0 ?v2.0 ?H\n  bilinear_form ?v1.0 (?k *\\<^sub>s\\<^sub>v ?v2.0) ?H =\n  ?k * bilinear_form ?v1.0 ?v2.0 ?H\n\ngoal (1 subgoal):\n 1. quad_form (k *\\<^sub>s\\<^sub>v v) H =\n    cor ((cmod k)\\<^sup>2) * quad_form v H", "by (simp add: complex_mult_cnj_cmod field_simps)"], ["", "lemma quad_form_scale_m:\n  shows \"quad_form v (k *\\<^sub>s\\<^sub>m H) = k * quad_form v H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quad_form v (k *\\<^sub>s\\<^sub>m H) = k * quad_form v H", "using bilinear_form_scale_m"], ["proof (prove)\nusing this:\n  bilinear_form ?v1.0 ?v2.0 (?k *\\<^sub>s\\<^sub>m ?H) =\n  ?k * bilinear_form ?v1.0 ?v2.0 ?H\n\ngoal (1 subgoal):\n 1. quad_form v (k *\\<^sub>s\\<^sub>m H) = k * quad_form v H", "by simp"], ["", "lemma cnj_quad_form [simp]:\n  shows \"cnj (quad_form z H) = quad_form z (mat_adj H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cnj (quad_form z H) = quad_form z (mat_adj H)", "by (cases H, cases z) (auto simp add: mat_adj_def mat_cnj_def vec_cnj_def field_simps)"], ["", "text \\<open>Matrix congruence\\<close>"], ["", "text \\<open>Two matrices are congruent iff they represent the same quadratic form with respect to different\nbases (for example if one circline can be transformed to another by a M?bius trasformation).\\<close>"], ["", "definition congruence where\n  [simp]: \"congruence M H \\<equiv> mat_adj M *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m M\""], ["", "lemma congruence_nonzero:\n  assumes \"H \\<noteq> mat_zero\" and \"mat_det M \\<noteq> 0\"\n  shows \"congruence M H \\<noteq> mat_zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. congruence M H \\<noteq> mat_zero", "using assms"], ["proof (prove)\nusing this:\n  H \\<noteq> mat_zero\n  mat_det M \\<noteq> 0\n\ngoal (1 subgoal):\n 1. congruence M H \\<noteq> mat_zero", "unfolding congruence_def"], ["proof (prove)\nusing this:\n  H \\<noteq> mat_zero\n  mat_det M \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_adj M *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m M \\<noteq> mat_zero", "by (subst mult_mm_non_zero_r, subst mult_mm_non_zero_l) (auto simp add: mat_det_adj)"], ["", "lemma congruence_congruence:\n  shows \"congruence M1 (congruence M2 H) = congruence (M2 *\\<^sub>m\\<^sub>m M1) H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. congruence M1 (congruence M2 H) = congruence (M2 *\\<^sub>m\\<^sub>m M1) H", "unfolding congruence_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj M1 *\\<^sub>m\\<^sub>m\n    (mat_adj M2 *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m M2) *\\<^sub>m\\<^sub>m\n    M1 =\n    mat_adj (M2 *\\<^sub>m\\<^sub>m M1) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n    (M2 *\\<^sub>m\\<^sub>m M1)", "apply (subst mult_mm_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj M1 *\\<^sub>m\\<^sub>m\n    (mat_adj M2 *\\<^sub>m\\<^sub>m H) *\\<^sub>m\\<^sub>m\n    M2 *\\<^sub>m\\<^sub>m\n    M1 =\n    mat_adj (M2 *\\<^sub>m\\<^sub>m M1) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n    (M2 *\\<^sub>m\\<^sub>m M1)", "apply (subst mult_mm_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj M1 *\\<^sub>m\\<^sub>m mat_adj M2 *\\<^sub>m\\<^sub>m\n    H *\\<^sub>m\\<^sub>m\n    M2 *\\<^sub>m\\<^sub>m\n    M1 =\n    mat_adj (M2 *\\<^sub>m\\<^sub>m M1) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n    (M2 *\\<^sub>m\\<^sub>m M1)", "apply (subst mat_adj_mult_mm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj M1 *\\<^sub>m\\<^sub>m mat_adj M2 *\\<^sub>m\\<^sub>m\n    H *\\<^sub>m\\<^sub>m\n    M2 *\\<^sub>m\\<^sub>m\n    M1 =\n    mat_adj M1 *\\<^sub>m\\<^sub>m mat_adj M2 *\\<^sub>m\\<^sub>m\n    H *\\<^sub>m\\<^sub>m\n    (M2 *\\<^sub>m\\<^sub>m M1)", "apply (subst mult_mm_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adj M1 *\\<^sub>m\\<^sub>m mat_adj M2 *\\<^sub>m\\<^sub>m\n    H *\\<^sub>m\\<^sub>m\n    M2 *\\<^sub>m\\<^sub>m\n    M1 =\n    mat_adj M1 *\\<^sub>m\\<^sub>m mat_adj M2 *\\<^sub>m\\<^sub>m\n    H *\\<^sub>m\\<^sub>m\n    M2 *\\<^sub>m\\<^sub>m\n    M1", "by simp"], ["", "lemma congruence_eye [simp]: \n  shows \"congruence eye H = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. congruence eye H = H", "by (cases H) (simp add: mat_adj_def mat_cnj_def)"], ["", "lemma congruence_congruence_inv [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"congruence M (congruence (mat_inv M) H) = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. congruence M (congruence (mat_inv M) H) = H", "using assms congruence_congruence[of M \"mat_inv M\" H]"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  congruence M (congruence (mat_inv M) H) =\n  congruence (mat_inv M *\\<^sub>m\\<^sub>m M) H\n\ngoal (1 subgoal):\n 1. congruence M (congruence (mat_inv M) H) = H", "using mat_inv_l[of M] mat_eye_l mat_eye_r"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  congruence M (congruence (mat_inv M) H) =\n  congruence (mat_inv M *\\<^sub>m\\<^sub>m M) H\n  mat_det M \\<noteq> 0 \\<Longrightarrow> mat_inv M *\\<^sub>m\\<^sub>m M = eye\n  eye *\\<^sub>m\\<^sub>m ?A = ?A\n  ?A *\\<^sub>m\\<^sub>m eye = ?A\n\ngoal (1 subgoal):\n 1. congruence M (congruence (mat_inv M) H) = H", "unfolding congruence_def"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  mat_adj M *\\<^sub>m\\<^sub>m\n  (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n   mat_inv M) *\\<^sub>m\\<^sub>m\n  M =\n  mat_adj (mat_inv M *\\<^sub>m\\<^sub>m M) *\\<^sub>m\\<^sub>m\n  H *\\<^sub>m\\<^sub>m\n  (mat_inv M *\\<^sub>m\\<^sub>m M)\n  mat_det M \\<noteq> 0 \\<Longrightarrow> mat_inv M *\\<^sub>m\\<^sub>m M = eye\n  eye *\\<^sub>m\\<^sub>m ?A = ?A\n  ?A *\\<^sub>m\\<^sub>m eye = ?A\n\ngoal (1 subgoal):\n 1. mat_adj M *\\<^sub>m\\<^sub>m\n    (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n     mat_inv M) *\\<^sub>m\\<^sub>m\n    M =\n    H", "by (simp del: eye_def)"], ["", "lemma congruence_inv:\n  assumes \"mat_det M \\<noteq> 0\" and \"congruence M H = H'\"\n  shows \"congruence (mat_inv M) H' = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. congruence (mat_inv M) H' = H", "using assms"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  congruence M H = H'\n\ngoal (1 subgoal):\n 1. congruence (mat_inv M) H' = H", "using \\<open>mat_det M \\<noteq> 0\\<close> mult_mm_inv_l[of \"mat_adj M\" \"H *\\<^sub>m\\<^sub>m M\" \"H'\"]"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  congruence M H = H'\n  mat_det M \\<noteq> 0\n  \\<lbrakk>mat_det (mat_adj M) \\<noteq> 0;\n   mat_adj M *\\<^sub>m\\<^sub>m (H *\\<^sub>m\\<^sub>m M) = H'\\<rbrakk>\n  \\<Longrightarrow> H *\\<^sub>m\\<^sub>m M =\n                    mat_inv (mat_adj M) *\\<^sub>m\\<^sub>m H'\n\ngoal (1 subgoal):\n 1. congruence (mat_inv M) H' = H", "using mult_mm_inv_r[of M \"H\" \"mat_inv (mat_adj M) *\\<^sub>m\\<^sub>m H'\"]"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  congruence M H = H'\n  mat_det M \\<noteq> 0\n  \\<lbrakk>mat_det (mat_adj M) \\<noteq> 0;\n   mat_adj M *\\<^sub>m\\<^sub>m (H *\\<^sub>m\\<^sub>m M) = H'\\<rbrakk>\n  \\<Longrightarrow> H *\\<^sub>m\\<^sub>m M =\n                    mat_inv (mat_adj M) *\\<^sub>m\\<^sub>m H'\n  \\<lbrakk>mat_det M \\<noteq> 0;\n   H *\\<^sub>m\\<^sub>m M = mat_inv (mat_adj M) *\\<^sub>m\\<^sub>m H'\\<rbrakk>\n  \\<Longrightarrow> H =\n                    mat_inv (mat_adj M) *\\<^sub>m\\<^sub>m\n                    H' *\\<^sub>m\\<^sub>m\n                    mat_inv M\n\ngoal (1 subgoal):\n 1. congruence (mat_inv M) H' = H", "by (simp add: mat_det_adj mult_mm_assoc mat_adj_inv)"], ["", "lemma congruence_scale_m [simp]:\n  shows \"congruence M (k *\\<^sub>s\\<^sub>m H) = k *\\<^sub>s\\<^sub>m (congruence M H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. congruence M (k *\\<^sub>s\\<^sub>m H) =\n    k *\\<^sub>s\\<^sub>m congruence M H", "by (cases M, cases H) (auto simp add: mat_adj_def mat_cnj_def field_simps)"], ["", "lemma inj_congruence:\n  assumes \"mat_det M \\<noteq> 0\" and \"congruence M H = congruence M H'\"\n  shows \"H = H'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H = H'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. H = H'", "have \"H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M \""], ["proof (prove)\ngoal (1 subgoal):\n 1. H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M", "using assms"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  congruence M H = congruence M H'\n\ngoal (1 subgoal):\n 1. H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M", "using mult_mm_cancel_l[of \"mat_adj M\" \"H *\\<^sub>m\\<^sub>m M\" \"H' *\\<^sub>m\\<^sub>m M\"]"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n  congruence M H = congruence M H'\n  \\<lbrakk>mat_det (mat_adj M) \\<noteq> 0;\n   mat_adj M *\\<^sub>m\\<^sub>m (H *\\<^sub>m\\<^sub>m M) =\n   mat_adj M *\\<^sub>m\\<^sub>m (H' *\\<^sub>m\\<^sub>m M)\\<rbrakk>\n  \\<Longrightarrow> H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M\n\ngoal (1 subgoal):\n 1. H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M", "by (simp add: mat_det_adj mult_mm_assoc)"], ["proof (state)\nthis:\n  H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M\n\ngoal (1 subgoal):\n 1. H = H'", "thus ?thesis"], ["proof (prove)\nusing this:\n  H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M\n\ngoal (1 subgoal):\n 1. H = H'", "using assms"], ["proof (prove)\nusing this:\n  H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M\n  mat_det M \\<noteq> 0\n  congruence M H = congruence M H'\n\ngoal (1 subgoal):\n 1. H = H'", "using mult_mm_cancel_r[of \"M\" \"H\" \"H'\"]"], ["proof (prove)\nusing this:\n  H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M\n  mat_det M \\<noteq> 0\n  congruence M H = congruence M H'\n  \\<lbrakk>mat_det M \\<noteq> 0;\n   H *\\<^sub>m\\<^sub>m M = H' *\\<^sub>m\\<^sub>m M\\<rbrakk>\n  \\<Longrightarrow> H = H'\n\ngoal (1 subgoal):\n 1. H = H'", "by simp"], ["proof (state)\nthis:\n  H = H'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_det_congruence [simp]:\n  \"mat_det (congruence M H) = (cor ((cmod (mat_det M))\\<^sup>2)) * mat_det H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (congruence M H) = cor ((cmod (mat_det M))\\<^sup>2) * mat_det H", "using complex_mult_cnj_cmod[of \"mat_det M\"]"], ["proof (prove)\nusing this:\n  mat_det M * cnj (mat_det M) = cor ((cmod (mat_det M))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. mat_det (congruence M H) = cor ((cmod (mat_det M))\\<^sup>2) * mat_det H", "by (auto simp add: mat_det_adj field_simps)"], ["", "lemma det_sgn_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"sgn (mat_det (congruence M H)) = sgn (mat_det H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sgn (mat_det (congruence M H)) = sgn (mat_det H)", "using assms"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n\ngoal (1 subgoal):\n 1. sgn (mat_det (congruence M H)) = sgn (mat_det H)", "by (subst mat_det_congruence, auto simp add: sgn_mult power2_eq_square) (simp add: sgn_of_real)"], ["", "lemma Re_det_sgn_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))", "have *: \"Re (mat_det (congruence M H)) = (cmod (mat_det M))\\<^sup>2 * Re (mat_det H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Re (mat_det (congruence M H)) =\n    (cmod (mat_det M))\\<^sup>2 * Re (mat_det H)", "by (subst mat_det_congruence, subst Re_mult_real, rule Im_complex_of_real) (subst Re_complex_of_real, simp)"], ["proof (state)\nthis:\n  Re (mat_det (congruence M H)) =\n  (cmod (mat_det M))\\<^sup>2 * Re (mat_det H)\n\ngoal (1 subgoal):\n 1. sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))", "using assms"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n\ngoal (1 subgoal):\n 1. sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))", "by (subst *) (auto simp add: sgn_mult)"], ["proof (state)\nthis:\n  sgn (Re (mat_det (congruence M H))) = sgn (Re (mat_det H))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Transforming a matrix $H$ by a regular matrix $M$ preserves its bilinear and quadratic forms.\\<close>"], ["", "lemma bilinear_form_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"bilinear_form (M *\\<^sub>m\\<^sub>v v1) (M *\\<^sub>m\\<^sub>v v2) (congruence (mat_inv M) H) =\n         bilinear_form v1 v2 H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bilinear_form (M *\\<^sub>m\\<^sub>v v1) (M *\\<^sub>m\\<^sub>v v2)\n     (congruence (mat_inv M) H) =\n    bilinear_form v1 v2 H", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. bilinear_form (M *\\<^sub>m\\<^sub>v v1) (M *\\<^sub>m\\<^sub>v v2)\n     (congruence (mat_inv M) H) =\n    bilinear_form v1 v2 H", "have \"mat_det (mat_adj M) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (mat_adj M) \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  mat_det M \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_det (mat_adj M) \\<noteq> 0", "by (simp add: mat_det_adj)"], ["proof (state)\nthis:\n  mat_det (mat_adj M) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. bilinear_form (M *\\<^sub>m\\<^sub>v v1) (M *\\<^sub>m\\<^sub>v v2)\n     (congruence (mat_inv M) H) =\n    bilinear_form v1 v2 H", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. bilinear_form (M *\\<^sub>m\\<^sub>v v1) (M *\\<^sub>m\\<^sub>v v2)\n     (congruence (mat_inv M) H) =\n    bilinear_form v1 v2 H", "unfolding bilinear_form_def congruence_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj (M *\\<^sub>m\\<^sub>v v1) *\\<^sub>v\\<^sub>m\n    (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n     mat_inv M) *\\<^sub>v\\<^sub>v\n    (M *\\<^sub>m\\<^sub>v v2) =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mult_mv_mult_vm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj (v1 *\\<^sub>v\\<^sub>m mat_transpose M) *\\<^sub>v\\<^sub>m\n    (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n     mat_inv M) *\\<^sub>v\\<^sub>v\n    (M *\\<^sub>m\\<^sub>v v2) =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst vec_cnj_mult_vm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m mat_cnj (mat_transpose M) *\\<^sub>v\\<^sub>m\n    (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n     mat_inv M) *\\<^sub>v\\<^sub>v\n    (M *\\<^sub>m\\<^sub>v v2) =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mat_adj_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m mat_adj M *\\<^sub>v\\<^sub>m\n    (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n     mat_inv M) *\\<^sub>v\\<^sub>v\n    (M *\\<^sub>m\\<^sub>v v2) =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mult_vm_vm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m\n    (mat_adj M *\\<^sub>m\\<^sub>m\n     (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n      mat_inv M)) *\\<^sub>v\\<^sub>v\n    (M *\\<^sub>m\\<^sub>v v2) =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mult_vv_mv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m\n    (mat_adj M *\\<^sub>m\\<^sub>m\n     (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n      mat_inv M)) *\\<^sub>v\\<^sub>m\n    M *\\<^sub>v\\<^sub>v\n    v2 =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mult_vm_vm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m\n    (mat_adj M *\\<^sub>m\\<^sub>m\n     (mat_adj (mat_inv M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n      mat_inv M) *\\<^sub>m\\<^sub>m\n     M) *\\<^sub>v\\<^sub>v\n    v2 =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mat_adj_inv[OF \\<open>mat_det M \\<noteq> 0\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m\n    (mat_adj M *\\<^sub>m\\<^sub>m\n     (mat_inv (mat_adj M) *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n      mat_inv M) *\\<^sub>m\\<^sub>m\n     M) *\\<^sub>v\\<^sub>v\n    v2 =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mult_assoc_5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m\n    (mat_adj M *\\<^sub>m\\<^sub>m mat_inv (mat_adj M) *\\<^sub>m\\<^sub>m\n     H *\\<^sub>m\\<^sub>m\n     (mat_inv M *\\<^sub>m\\<^sub>m M)) *\\<^sub>v\\<^sub>v\n    v2 =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mat_inv_r[OF \\<open>mat_det (mat_adj M) \\<noteq> 0\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m\n    (eye *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m\n     (mat_inv M *\\<^sub>m\\<^sub>m M)) *\\<^sub>v\\<^sub>v\n    v2 =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mat_inv_l[OF \\<open>mat_det M \\<noteq> 0\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m\n    (eye *\\<^sub>m\\<^sub>m H *\\<^sub>m\\<^sub>m eye) *\\<^sub>v\\<^sub>v\n    v2 =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "apply (subst mat_eye_l, subst mat_eye_r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2 =\n    vec_cnj v1 *\\<^sub>v\\<^sub>m H *\\<^sub>v\\<^sub>v v2", "by simp"], ["proof (state)\nthis:\n  bilinear_form (M *\\<^sub>m\\<^sub>v v1) (M *\\<^sub>m\\<^sub>v v2)\n   (congruence (mat_inv M) H) =\n  bilinear_form v1 v2 H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quad_form_congruence [simp]:\n  assumes \"mat_det M \\<noteq> 0\"\n  shows \"quad_form (M *\\<^sub>m\\<^sub>v z) (congruence (mat_inv M) H) = quad_form z H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quad_form (M *\\<^sub>m\\<^sub>v z) (congruence (mat_inv M) H) =\n    quad_form z H", "using bilinear_form_congruence[OF assms]"], ["proof (prove)\nusing this:\n  bilinear_form (M *\\<^sub>m\\<^sub>v ?v1.0) (M *\\<^sub>m\\<^sub>v ?v2.0)\n   (congruence (mat_inv M) ?H) =\n  bilinear_form ?v1.0 ?v2.0 ?H\n\ngoal (1 subgoal):\n 1. quad_form (M *\\<^sub>m\\<^sub>v z) (congruence (mat_inv M) H) =\n    quad_form z H", "by simp"], ["", "text \\<open>Similar matrices\\<close>"], ["", "text \\<open>Two matrices are similar iff they represent the same linear operator with respect to (possibly)\ndifferent bases (e.g., if they represent the same M?bius transformation after changing the\ncoordinate system)\\<close>"], ["", "definition similarity where\n  \"similarity A M = mat_inv A *\\<^sub>m\\<^sub>m M *\\<^sub>m\\<^sub>m A\""], ["", "lemma mat_det_similarity [simp]:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"mat_det (similarity A M) = mat_det M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_det (similarity A M) = mat_det M", "using assms"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_det (similarity A M) = mat_det M", "unfolding similarity_def"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_det (mat_inv A *\\<^sub>m\\<^sub>m M *\\<^sub>m\\<^sub>m A) = mat_det M", "by (simp add: mat_det_inv)"], ["", "lemma mat_trace_similarity [simp]:\n  assumes \"mat_det A \\<noteq> 0\"\n  shows \"mat_trace (similarity A M) = mat_trace M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_trace (similarity A M) = mat_trace M", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_trace (similarity A M) = mat_trace M", "obtain a b c d where AA: \"A = (a, b, c, d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d.\n        A = (a, b, c, d) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases A) auto"], ["proof (state)\nthis:\n  A = (a, b, c, d)\n\ngoal (1 subgoal):\n 1. mat_trace (similarity A M) = mat_trace M", "obtain mA mB mC mD where MM: \"M = (mA, mB, mC, mD)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>mA mB mC mD.\n        M = (mA, mB, mC, mD) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases M) auto"], ["proof (state)\nthis:\n  M = (mA, mB, mC, mD)\n\ngoal (1 subgoal):\n 1. mat_trace (similarity A M) = mat_trace M", "have \"mA * (a * d) / (a * d - b * c) + mD * (a * d) / (a * d - b * c) =\n        mA + mD + mA * (b * c) / (a * d - b * c) + mD * (b * c) / (a * d - b * c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mA * (a * d) / (a * d - b * c) + mD * (a * d) / (a * d - b * c) =\n    mA + mD + mA * (b * c) / (a * d - b * c) +\n    mD * (b * c) / (a * d - b * c)", "using assms AA"], ["proof (prove)\nusing this:\n  mat_det A \\<noteq> 0\n  A = (a, b, c, d)\n\ngoal (1 subgoal):\n 1. mA * (a * d) / (a * d - b * c) + mD * (a * d) / (a * d - b * c) =\n    mA + mD + mA * (b * c) / (a * d - b * c) +\n    mD * (b * c) / (a * d - b * c)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  mA * (a * d) / (a * d - b * c) + mD * (a * d) / (a * d - b * c) =\n  mA + mD + mA * (b * c) / (a * d - b * c) + mD * (b * c) / (a * d - b * c)\n\ngoal (1 subgoal):\n 1. mat_trace (similarity A M) = mat_trace M", "thus ?thesis"], ["proof (prove)\nusing this:\n  mA * (a * d) / (a * d - b * c) + mD * (a * d) / (a * d - b * c) =\n  mA + mD + mA * (b * c) / (a * d - b * c) + mD * (b * c) / (a * d - b * c)\n\ngoal (1 subgoal):\n 1. mat_trace (similarity A M) = mat_trace M", "using AA MM"], ["proof (prove)\nusing this:\n  mA * (a * d) / (a * d - b * c) + mD * (a * d) / (a * d - b * c) =\n  mA + mD + mA * (b * c) / (a * d - b * c) + mD * (b * c) / (a * d - b * c)\n  A = (a, b, c, d)\n  M = (mA, mB, mC, mD)\n\ngoal (1 subgoal):\n 1. mat_trace (similarity A M) = mat_trace M", "by (simp add: field_simps similarity_def)"], ["proof (state)\nthis:\n  mat_trace (similarity A M) = mat_trace M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similarity_eye [simp]:\n  shows \"similarity eye M = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similarity eye M = M", "unfolding similarity_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_inv eye *\\<^sub>m\\<^sub>m M *\\<^sub>m\\<^sub>m eye = M", "using mat_eye_l mat_eye_r"], ["proof (prove)\nusing this:\n  eye *\\<^sub>m\\<^sub>m ?A = ?A\n  ?A *\\<^sub>m\\<^sub>m eye = ?A\n\ngoal (1 subgoal):\n 1. mat_inv eye *\\<^sub>m\\<^sub>m M *\\<^sub>m\\<^sub>m eye = M", "by auto"], ["", "lemma similarity_eye' [simp]:\n  shows \"similarity (1, 0, 0, 1) M = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similarity (1, 0, 0, 1) M = M", "unfolding eye_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. similarity eye M = M", "by (simp del: eye_def)"], ["", "lemma similarity_comp [simp]:\n  assumes \"mat_det A1 \\<noteq> 0\" and \"mat_det A2 \\<noteq> 0\"\n  shows \"similarity A1 (similarity A2 M) = similarity (A2*\\<^sub>m\\<^sub>mA1) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similarity A1 (similarity A2 M) = similarity (A2 *\\<^sub>m\\<^sub>m A1) M", "using assms"], ["proof (prove)\nusing this:\n  mat_det A1 \\<noteq> 0\n  mat_det A2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. similarity A1 (similarity A2 M) = similarity (A2 *\\<^sub>m\\<^sub>m A1) M", "unfolding similarity_def"], ["proof (prove)\nusing this:\n  mat_det A1 \\<noteq> 0\n  mat_det A2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_inv A1 *\\<^sub>m\\<^sub>m\n    (mat_inv A2 *\\<^sub>m\\<^sub>m M *\\<^sub>m\\<^sub>m A2) *\\<^sub>m\\<^sub>m\n    A1 =\n    mat_inv (A2 *\\<^sub>m\\<^sub>m A1) *\\<^sub>m\\<^sub>m M *\\<^sub>m\\<^sub>m\n    (A2 *\\<^sub>m\\<^sub>m A1)", "by (simp add: mult_mm_assoc mat_inv_mult_mm)"], ["", "lemma similarity_inv:\n  assumes \"similarity A M1 = M2\" and \"mat_det A \\<noteq> 0\"\n  shows \"similarity (mat_inv A) M2 = M1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similarity (mat_inv A) M2 = M1", "using assms"], ["proof (prove)\nusing this:\n  similarity A M1 = M2\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. similarity (mat_inv A) M2 = M1", "unfolding similarity_def"], ["proof (prove)\nusing this:\n  mat_inv A *\\<^sub>m\\<^sub>m M1 *\\<^sub>m\\<^sub>m A = M2\n  mat_det A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mat_inv (mat_inv A) *\\<^sub>m\\<^sub>m M2 *\\<^sub>m\\<^sub>m mat_inv A =\n    M1", "by (metis mat_det_mult mult_mm_assoc mult_mm_inv_l mult_mm_inv_r mult_zero_left)"], ["", "end"]]}