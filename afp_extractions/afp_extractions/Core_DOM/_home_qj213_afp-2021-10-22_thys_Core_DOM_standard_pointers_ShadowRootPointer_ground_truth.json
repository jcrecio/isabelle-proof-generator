{"file_name": "/home/qj213/afp-2021-10-22/thys/Core_DOM/standard/pointers/ShadowRootPointer.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Core_DOM", "problem_names": ["lemmas is_shadow_root_ptr_def = is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def", "lemma is_shadow_root_ptr_ref [simp]: \"is_shadow_root_ptr (shadow_root_ptr.Ref n)\"", "lemma is_shadow_root_ptr_not_node_ptr[simp]: \"\\<not>is_shadow_root_ptr (cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr)\"", "lemma cast_shadow_root_ptr_not_node_ptr [simp]:\n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr \\<noteq> cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr \\<noteq> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\"", "lemma cast_shadow_root_ptr_not_document_ptr [simp]:\n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr \\<noteq> cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr\"\n  \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr \\<noteq> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\"", "lemma shadow_root_ptr_no_node_ptr_cast [simp]: \n  \"\\<not> is_shadow_root_ptr_kind (cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr)\"", "lemma node_ptr_no_shadow_root_ptr_cast [simp]: \n  \"\\<not> is_node_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\"", "lemma shadow_root_ptr_no_document_ptr_cast [simp]: \n  \"\\<not> is_shadow_root_ptr_kind (cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr)\"", "lemma document_ptr_no_shadow_root_ptr_cast [simp]: \n  \"\\<not> is_document_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\"", "lemma shadow_root_ptr_shadow_root_ptr_cast [simp]: \n  \"is_shadow_root_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\"", "lemma shadow_root_ptr_casts_commute [simp]:\n  \"cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr = Some shadow_root_ptr \\<longleftrightarrow> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr = ptr\"", "lemma shadow_root_ptr_casts_commute2 [simp]: \n  \"(cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr) = Some shadow_root_ptr)\"", "lemma shadow_root_ptr_casts_commute3 [simp]:\n  assumes \"is_shadow_root_ptr_kind ptr\"\n  shows \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (the (cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr)) = ptr\"", "lemma is_shadow_root_ptr_kind_obtains:\n  assumes \"is_shadow_root_ptr_kind ptr\"\n  obtains shadow_root_ptr where \"ptr = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\"", "lemma is_shadow_root_ptr_kind_none:\n  assumes \"\\<not>is_shadow_root_ptr_kind ptr\"\n  shows \"cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr = None\"", "lemma cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_inject [simp]: \n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r x = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r y \\<longleftrightarrow> x = y\"", "lemma cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_ext_none [simp]: \n  \"cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (object_ptr.Ext (Inr (Inr (Inr object_ext_ptr)))) = None\"", "lemma is_shadow_root_ptr_kind_simp1 [dest]: \"is_document_ptr_kind ptr \\<Longrightarrow> \\<not>is_shadow_root_ptr_kind ptr\"", "lemma is_shadow_root_ptr_kind_simp2 [dest]: \"is_node_ptr_kind ptr \\<Longrightarrow> \\<not>is_shadow_root_ptr_kind ptr\""], "translations": [["", "lemmas is_shadow_root_ptr_def = is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["", "consts is_shadow_root_ptr_ext :: 'a"], ["", "abbreviation \"is_shadow_root_ptr_ext\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> \\<not> is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr\""], ["", "abbreviation \"is_shadow_root_ptr_ext\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> (case cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr of\n  Some shadow_root_ptr \\<Rightarrow> is_shadow_root_ptr_ext\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\n| None \\<Rightarrow> False)\""], ["", "adhoc_overloading is_shadow_root_ptr_ext is_shadow_root_ptr_ext\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r is_shadow_root_ptr_ext\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r"], ["", "instantiation shadow_root_ptr :: (linorder) linorder\nbegin"], ["", "definition \n  less_eq_shadow_root_ptr :: \"(_::linorder) shadow_root_ptr \\<Rightarrow> (_) shadow_root_ptr \\<Rightarrow> bool\"\n  where \n    \"less_eq_shadow_root_ptr x y \\<equiv> (case x of Ext i \\<Rightarrow> (case y of Ext j \\<Rightarrow> i \\<le> j | Ref _ \\<Rightarrow> False)\n                                          | Ref i \\<Rightarrow> (case y of Ext _ \\<Rightarrow> True | Ref j \\<Rightarrow> i \\<le> j))\""], ["", "definition less_shadow_root_ptr :: \"(_::linorder) shadow_root_ptr \\<Rightarrow> (_) shadow_root_ptr \\<Rightarrow> bool\"\n  where \"less_shadow_root_ptr x y \\<equiv> x \\<le> y \\<and> \\<not> y \\<le> x\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS((_) shadow_root_ptr, linorder_class)", "apply(standard)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "by(auto simp add: less_eq_shadow_root_ptr_def less_shadow_root_ptr_def \n      split: shadow_root_ptr.splits)"], ["", "end"], ["", "lemma is_shadow_root_ptr_ref [simp]: \"is_shadow_root_ptr (shadow_root_ptr.Ref n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shadow_root_ptr (shadow_root_ptr.Ref n)", "by(simp add: is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma is_shadow_root_ptr_not_node_ptr[simp]: \"\\<not>is_shadow_root_ptr (cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case cast (cast node_ptr) of None \\<Rightarrow> False\n            | Some shadow_root_ptr \\<Rightarrow>\n                is_shadow_root_ptr shadow_root_ptr)", "by(simp add: is_shadow_root_ptr_def cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma cast_shadow_root_ptr_not_node_ptr [simp]:\n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr \\<noteq> cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr \\<noteq> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast shadow_root_ptr \\<noteq> cast node_ptr &&&\n    cast node_ptr \\<noteq> cast shadow_root_ptr", "unfolding cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. object_ptr.Ext (Inr (Inr (Inl shadow_root_ptr))) \\<noteq>\n    object_ptr.Ext (Inl node_ptr) &&&\n    object_ptr.Ext (Inl node_ptr) \\<noteq>\n    object_ptr.Ext (Inr (Inr (Inl shadow_root_ptr)))", "by auto"], ["", "lemma cast_shadow_root_ptr_not_document_ptr [simp]:\n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr \\<noteq> cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr\"\n  \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr \\<noteq> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast shadow_root_ptr \\<noteq> cast document_ptr &&&\n    cast document_ptr \\<noteq> cast shadow_root_ptr", "unfolding cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. object_ptr.Ext (Inr (Inr (Inl shadow_root_ptr))) \\<noteq>\n    object_ptr.Ext (Inr (Inl document_ptr)) &&&\n    object_ptr.Ext (Inr (Inl document_ptr)) \\<noteq>\n    object_ptr.Ext (Inr (Inr (Inl shadow_root_ptr)))", "by auto"], ["", "lemma shadow_root_ptr_no_node_ptr_cast [simp]: \n  \"\\<not> is_shadow_root_ptr_kind (cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_shadow_root_ptr_kind (cast node_ptr)", "by(simp add: cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def is_shadow_root_ptr_kind_def)"], ["", "lemma node_ptr_no_shadow_root_ptr_cast [simp]: \n  \"\\<not> is_node_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_node_ptr_kind (cast shadow_root_ptr)", "using is_node_ptr_kind_obtains"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_node_ptr_kind ?ptr;\n   \\<And>node_ptr.\n      cast ?ptr = Some node_ptr \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<not> is_node_ptr_kind (cast shadow_root_ptr)", "by fastforce"], ["", "lemma shadow_root_ptr_no_document_ptr_cast [simp]: \n  \"\\<not> is_shadow_root_ptr_kind (cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_shadow_root_ptr_kind (cast document_ptr)", "by(simp add: cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def is_shadow_root_ptr_kind_def)"], ["", "lemma document_ptr_no_shadow_root_ptr_cast [simp]: \n  \"\\<not> is_document_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_document_ptr_kind (cast shadow_root_ptr)", "using is_document_ptr_kind_obtains"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_document_ptr_kind ?ptr;\n   \\<And>document_ptr.\n      ?ptr = cast document_ptr \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<not> is_document_ptr_kind (cast shadow_root_ptr)", "by fastforce"], ["", "lemma shadow_root_ptr_shadow_root_ptr_cast [simp]: \n  \"is_shadow_root_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shadow_root_ptr_kind (cast shadow_root_ptr)", "by (simp add: cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def is_shadow_root_ptr_kind_def)"], ["", "lemma shadow_root_ptr_casts_commute [simp]:\n  \"cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr = Some shadow_root_ptr \\<longleftrightarrow> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr = ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast ptr = Some shadow_root_ptr) = (cast shadow_root_ptr = ptr)", "unfolding cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((case ptr of object_ptr.Ext (Inl xa) \\<Rightarrow> Map.empty xa\n      | object_ptr.Ext (Inr (Inl x)) \\<Rightarrow> Map.empty x\n      | object_ptr.Ext (Inr (Inr (Inl xa))) \\<Rightarrow> Some xa\n      | object_ptr.Ext (Inr (Inr (Inr xa))) \\<Rightarrow> Map.empty xa) =\n     Some shadow_root_ptr) =\n    (object_ptr.Ext (Inr (Inr (Inl shadow_root_ptr))) = ptr)", "by(auto split: object_ptr.splits sum.splits)"], ["", "lemma shadow_root_ptr_casts_commute2 [simp]: \n  \"(cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr) = Some shadow_root_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (cast shadow_root_ptr) = Some shadow_root_ptr", "by simp"], ["", "lemma shadow_root_ptr_casts_commute3 [simp]:\n  assumes \"is_shadow_root_ptr_kind ptr\"\n  shows \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (the (cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr)) = ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (the (cast ptr)) = ptr", "using assms"], ["proof (prove)\nusing this:\n  is_shadow_root_ptr_kind ptr\n\ngoal (1 subgoal):\n 1. cast (the (cast ptr)) = ptr", "by(auto simp add: is_shadow_root_ptr_kind_def cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def\n      split: object_ptr.splits sum.splits)"], ["", "lemma is_shadow_root_ptr_kind_obtains:\n  assumes \"is_shadow_root_ptr_kind ptr\"\n  obtains shadow_root_ptr where \"ptr = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>shadow_root_ptr.\n        ptr = cast shadow_root_ptr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms is_shadow_root_ptr_kind_def"], ["proof (prove)\nusing this:\n  is_shadow_root_ptr_kind ptr\n  is_shadow_root_ptr_kind ?ptr =\n  (case cast ?ptr of None \\<Rightarrow> False | Some x \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. (\\<And>shadow_root_ptr.\n        ptr = cast shadow_root_ptr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis case_optionE shadow_root_ptr_casts_commute)"], ["", "lemma is_shadow_root_ptr_kind_none:\n  assumes \"\\<not>is_shadow_root_ptr_kind ptr\"\n  shows \"cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast ptr = None", "using assms"], ["proof (prove)\nusing this:\n  \\<not> is_shadow_root_ptr_kind ptr\n\ngoal (1 subgoal):\n 1. cast ptr = None", "unfolding is_shadow_root_ptr_kind_def cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\nusing this:\n  \\<not> (case case ptr of\n               object_ptr.Ext (Inl xa) \\<Rightarrow> Map.empty xa\n               | object_ptr.Ext (Inr (Inl x)) \\<Rightarrow> Map.empty x\n               | object_ptr.Ext (Inr (Inr (Inl xa))) \\<Rightarrow> Some xa\n               | object_ptr.Ext (Inr (Inr (Inr xa))) \\<Rightarrow>\n                   Map.empty xa of\n          None \\<Rightarrow> False | Some x \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. (case ptr of object_ptr.Ext (Inl xa) \\<Rightarrow> Map.empty xa\n     | object_ptr.Ext (Inr (Inl x)) \\<Rightarrow> Map.empty x\n     | object_ptr.Ext (Inr (Inr (Inl xa))) \\<Rightarrow> Some xa\n     | object_ptr.Ext (Inr (Inr (Inr xa))) \\<Rightarrow> Map.empty xa) =\n    None", "by (auto split: object_ptr.splits sum.splits)"], ["", "lemma cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_inject [simp]: \n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r x = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast x = cast y) = (x = y)", "by(simp add: cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_ext_none [simp]: \n  \"cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (object_ptr.Ext (Inr (Inr (Inr object_ext_ptr)))) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (object_ptr.Ext (Inr (Inr (Inr object_ext_ptr)))) = None", "by(simp add: cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma is_shadow_root_ptr_kind_simp1 [dest]: \"is_document_ptr_kind ptr \\<Longrightarrow> \\<not>is_shadow_root_ptr_kind ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_document_ptr_kind ptr \\<Longrightarrow>\n    \\<not> is_shadow_root_ptr_kind ptr", "by (metis document_ptr_no_shadow_root_ptr_cast shadow_root_ptr_casts_commute3)"], ["", "lemma is_shadow_root_ptr_kind_simp2 [dest]: \"is_node_ptr_kind ptr \\<Longrightarrow> \\<not>is_shadow_root_ptr_kind ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_node_ptr_kind ptr \\<Longrightarrow>\n    \\<not> is_shadow_root_ptr_kind ptr", "by (metis node_ptr_no_shadow_root_ptr_cast shadow_root_ptr_casts_commute3)"], ["", "end"]]}