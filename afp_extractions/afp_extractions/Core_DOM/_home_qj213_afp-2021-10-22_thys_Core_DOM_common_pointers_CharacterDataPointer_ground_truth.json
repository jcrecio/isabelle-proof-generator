{"file_name": "/home/qj213/afp-2021-10-22/thys/Core_DOM/common/pointers/CharacterDataPointer.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Core_DOM", "problem_names": ["lemmas is_character_data_ptr_kind_def = is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def", "lemmas is_character_data_ptr_def = is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def", "lemma is_character_data_ptr_ref [simp]: \"is_character_data_ptr (character_data_ptr.Ref n)\"", "lemma cast_element_ptr_not_character_data_ptr [simp]:\n  \"(cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r element_ptr \\<noteq> cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr)\"\n  \"(cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr \\<noteq> cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r element_ptr)\"", "lemma is_character_data_ptr_kind_not_element_ptr [simp]: \n  \"\\<not> is_character_data_ptr_kind (cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r element_ptr)\"", "lemma is_element_ptr_kind_not_character_data_ptr [simp]: \n  \"\\<not> is_element_ptr_kind (cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr)\"", "lemma is_character_data_ptr_kind\\<^sub>_cast [simp]: \n  \"is_character_data_ptr_kind (cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr)\"", "lemma character_data_ptr_casts_commute [simp]:\n  \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr = Some character_data_ptr\n   \\<longleftrightarrow> cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr = node_ptr\"", "lemma character_data_ptr_casts_commute2 [simp]:\n  \"(cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr) = Some character_data_ptr)\"", "lemma character_data_ptr_casts_commute3 [simp]:\n  assumes \"is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  shows \"cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (the (cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr)) = node_ptr\"", "lemma is_character_data_ptr_kind_obtains:\n  assumes \"is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  obtains character_data_ptr where \"cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr = node_ptr\"", "lemma is_character_data_ptr_kind_none:\n  assumes \"\\<not>is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  shows \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr = None\"", "lemma cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_inject [simp]: \n  \"cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r x = cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r y \\<longleftrightarrow> x = y\"", "lemma cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_ext_none [simp]: \n  \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (node_ptr.Ext (Inr (Inr node_ext_ptr))) = None\""], "translations": [["", "lemmas is_character_data_ptr_kind_def = is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["", "consts is_character_data_ptr :: 'a"], ["", "definition is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r :: \"(_) character_data_ptr \\<Rightarrow> bool\"\n  where\n    \"is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr = (case ptr \n                                 of character_data_ptr.Ref _ \\<Rightarrow> True | _ \\<Rightarrow> False)\""], ["", "abbreviation is_character_data_ptr\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r :: \"(_) node_ptr \\<Rightarrow> bool\"\n  where\n    \"is_character_data_ptr\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> (case cast ptr of\n      Some character_data_ptr \\<Rightarrow> is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr\n    | _ \\<Rightarrow> False)\""], ["", "abbreviation is_character_data_ptr\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r :: \"(_) object_ptr \\<Rightarrow> bool\"\n  where\n    \"is_character_data_ptr\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> (case cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr of\n      Some node_ptr \\<Rightarrow> is_character_data_ptr\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\n    | None \\<Rightarrow> False)\""], ["", "adhoc_overloading is_character_data_ptr\n  is_character_data_ptr\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r is_character_data_ptr\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r"], ["", "lemmas is_character_data_ptr_def = is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["", "consts is_character_data_ptr_ext :: 'a"], ["", "abbreviation \n  \"is_character_data_ptr_ext\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> \\<not> is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr\""], ["", "abbreviation \"is_character_data_ptr_ext\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> (case cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr of\n  Some character_data_ptr \\<Rightarrow> is_character_data_ptr_ext\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr\n| None \\<Rightarrow> False)\""], ["", "abbreviation \"is_character_data_ptr_ext\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> (case cast\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr of\n  Some node_ptr \\<Rightarrow> is_character_data_ptr_ext\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\n| None \\<Rightarrow> False)\""], ["", "adhoc_overloading is_character_data_ptr_ext\n  is_character_data_ptr_ext\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r is_character_data_ptr_ext\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r is_character_data_ptr_ext\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r"], ["", "instantiation character_data_ptr :: (linorder) linorder\nbegin"], ["", "definition \n  less_eq_character_data_ptr :: \"(_::linorder) character_data_ptr \\<Rightarrow> (_) character_data_ptr \\<Rightarrow> bool\"\n  where \n    \"less_eq_character_data_ptr x y \\<equiv> (case x of Ext i \\<Rightarrow> (case y of Ext j \\<Rightarrow> i \\<le> j | Ref _ \\<Rightarrow> False)\n                                               | Ref i \\<Rightarrow> (case y of Ext _ \\<Rightarrow> True | Ref j \\<Rightarrow> i \\<le> j))\""], ["", "definition \n  less_character_data_ptr :: \"(_::linorder) character_data_ptr \\<Rightarrow> (_) character_data_ptr \\<Rightarrow> bool\"\n  where \"less_character_data_ptr x y \\<equiv> x \\<le> y \\<and> \\<not> y \\<le> x\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS((_) character_data_ptr, linorder_class)", "apply(standard)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "by(auto simp add: less_eq_character_data_ptr_def less_character_data_ptr_def \n      split: character_data_ptr.splits)"], ["", "end"], ["", "lemma is_character_data_ptr_ref [simp]: \"is_character_data_ptr (character_data_ptr.Ref n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_character_data_ptr (character_data_ptr.Ref n)", "by(simp add: is_character_data_ptr\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma cast_element_ptr_not_character_data_ptr [simp]:\n  \"(cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r element_ptr \\<noteq> cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr)\"\n  \"(cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr \\<noteq> cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r element_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast element_ptr \\<noteq> cast character_data_ptr &&&\n    cast character_data_ptr \\<noteq> cast element_ptr", "unfolding cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. node_ptr.Ext (Inl element_ptr) \\<noteq>\n    node_ptr.Ext (Inr (Inl character_data_ptr)) &&&\n    node_ptr.Ext (Inr (Inl character_data_ptr)) \\<noteq>\n    node_ptr.Ext (Inl element_ptr)", "by(auto)"], ["", "lemma is_character_data_ptr_kind_not_element_ptr [simp]: \n  \"\\<not> is_character_data_ptr_kind (cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r element_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_character_data_ptr_kind (cast element_ptr)", "unfolding is_character_data_ptr_kind_def cast\\<^sub>e\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (case case node_ptr.Ext (Inl element_ptr) of\n                 node_ptr.Ext (Inl xa) \\<Rightarrow> Map.empty xa\n                 | node_ptr.Ext (Inr (Inl x)) \\<Rightarrow> Some x\n                 | node_ptr.Ext (Inr (Inr x)) \\<Rightarrow> Map.empty x of\n            None \\<Rightarrow> False | Some x \\<Rightarrow> True)", "by auto"], ["", "lemma is_element_ptr_kind_not_character_data_ptr [simp]: \n  \"\\<not> is_element_ptr_kind (cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_element_ptr_kind (cast character_data_ptr)", "using is_element_ptr_kind_obtains"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_element_ptr_kind ?node_ptr;\n   \\<And>element_ptr.\n      ?node_ptr = cast element_ptr \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<not> is_element_ptr_kind (cast character_data_ptr)", "by fastforce"], ["", "lemma is_character_data_ptr_kind\\<^sub>_cast [simp]: \n  \"is_character_data_ptr_kind (cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_character_data_ptr_kind (cast character_data_ptr)", "by (simp add: cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def \n      is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma character_data_ptr_casts_commute [simp]:\n  \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr = Some character_data_ptr\n   \\<longleftrightarrow> cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr = node_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast node_ptr = Some character_data_ptr) =\n    (cast character_data_ptr = node_ptr)", "unfolding cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((case node_ptr of node_ptr.Ext (Inl xa) \\<Rightarrow> Map.empty xa\n      | node_ptr.Ext (Inr (Inl x)) \\<Rightarrow> Some x\n      | node_ptr.Ext (Inr (Inr x)) \\<Rightarrow> Map.empty x) =\n     Some character_data_ptr) =\n    (node_ptr.Ext (Inr (Inl character_data_ptr)) = node_ptr)", "by(auto split: node_ptr.splits sum.splits)"], ["", "lemma character_data_ptr_casts_commute2 [simp]:\n  \"(cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr) = Some character_data_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (cast character_data_ptr) = Some character_data_ptr", "by simp"], ["", "lemma character_data_ptr_casts_commute3 [simp]:\n  assumes \"is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  shows \"cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (the (cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr)) = node_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (the (cast node_ptr)) = node_ptr", "using assms"], ["proof (prove)\nusing this:\n  is_character_data_ptr_kind node_ptr\n\ngoal (1 subgoal):\n 1. cast (the (cast node_ptr)) = node_ptr", "by(auto simp add: is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def \n      cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def\n      split: node_ptr.splits sum.splits)"], ["", "lemma is_character_data_ptr_kind_obtains:\n  assumes \"is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  obtains character_data_ptr where \"cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r character_data_ptr = node_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>character_data_ptr.\n        cast character_data_ptr = node_ptr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def case_optionE \n      character_data_ptr_casts_commute)"], ["", "lemma is_character_data_ptr_kind_none:\n  assumes \"\\<not>is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr\"\n  shows \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r node_ptr = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast node_ptr = None", "using assms"], ["proof (prove)\nusing this:\n  \\<not> is_character_data_ptr_kind node_ptr\n\ngoal (1 subgoal):\n 1. cast node_ptr = None", "unfolding is_character_data_ptr_kind\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\nusing this:\n  \\<not> (case case node_ptr of\n               node_ptr.Ext (Inl xa) \\<Rightarrow> Map.empty xa\n               | node_ptr.Ext (Inr (Inl x)) \\<Rightarrow> Some x\n               | node_ptr.Ext (Inr (Inr x)) \\<Rightarrow> Map.empty x of\n          None \\<Rightarrow> False | Some x \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. (case node_ptr of node_ptr.Ext (Inl xa) \\<Rightarrow> Map.empty xa\n     | node_ptr.Ext (Inr (Inl x)) \\<Rightarrow> Some x\n     | node_ptr.Ext (Inr (Inr x)) \\<Rightarrow> Map.empty x) =\n    None", "by(auto split: node_ptr.splits sum.splits)"], ["", "lemma cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_inject [simp]: \n  \"cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r x = cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast x = cast y) = (x = y)", "by(simp add: cast\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_ext_none [simp]: \n  \"cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (node_ptr.Ext (Inr (Inr node_ext_ptr))) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (node_ptr.Ext (Inr (Inr node_ext_ptr))) = None", "by(simp add: cast\\<^sub>n\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>c\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>_\\<^sub>d\\<^sub>a\\<^sub>t\\<^sub>a\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "end"]]}