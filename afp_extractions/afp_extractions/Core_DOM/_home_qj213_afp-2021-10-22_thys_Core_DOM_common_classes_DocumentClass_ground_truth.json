{"file_name": "/home/qj213/afp-2021-10-22/thys/Core_DOM/common/classes/DocumentClass.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Core_DOM", "problem_names": ["lemma document_ptr_kinds_simp [simp]: \n  \"document_ptr_kinds (Heap (fmupd (cast document_ptr) document (the_heap h))) \n          = {|document_ptr|} |\\<union>| document_ptr_kinds h\"", "lemma document_ptr_kinds_commutes [simp]: \n  \"cast document_ptr |\\<in>| object_ptr_kinds h \\<longleftrightarrow> document_ptr |\\<in>| document_ptr_kinds h\"", "lemmas type_wf_defs = a_type_wf_def", "lemma get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_type_wf:\n  assumes \"type_wf h\"\n  shows \"document_ptr |\\<in>| document_ptr_kinds h \\<longleftrightarrow> get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h \\<noteq> None\"", "lemma put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_ptr_in_heap:\n  assumes \"put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr document h = h'\"\n  shows \"document_ptr |\\<in>| document_ptr_kinds h'\"", "lemma put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_put_ptrs:\n  assumes \"put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr document h = h'\"\n  shows \"object_ptr_kinds h' = object_ptr_kinds h |\\<union>| {|cast document_ptr|}\"", "lemma cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_inject [simp]: \"cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t x = cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t y \\<longleftrightarrow> x = y\"", "lemma cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_none [simp]: \n  \"cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t obj = None \\<longleftrightarrow> \\<not> (\\<exists>document. cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document = obj)\"", "lemma cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_some [simp]: \n  \"cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t obj = Some document \\<longleftrightarrow> cast document = obj\"", "lemma cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_inv [simp]: \"cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t (cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document) = Some document\"", "lemma cast_document_not_node [simp]:\n  \"cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document \\<noteq> cast\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t node\"\n  \"cast\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t node \\<noteq> cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document\"", "lemma get_document_ptr_simp1 [simp]: \n  \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr document h) = Some document\"", "lemma get_document_ptr_simp2 [simp]: \n  \"document_ptr \\<noteq> document_ptr' \n   \\<Longrightarrow> get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr' document h) = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h\"", "lemma get_document_ptr_simp3 [simp]: \n  \"get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t element_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr f h) = get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t element_ptr h\"", "lemma get_document_ptr_simp4 [simp]:\n  \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t element_ptr f h) = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h\"", "lemma get_document_ptr_simp5 [simp]: \n  \"get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a character_data_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr f h) = get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a character_data_ptr h\"", "lemma get_document_ptr_simp6 [simp]:\n  \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a character_data_ptr f h) = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h\"", "lemma new\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_element_ptr, h')\"\n  shows \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\"", "lemma new\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a h = (new_character_data_ptr, h')\"\n  shows \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_ptr_in_heap:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"new_document_ptr |\\<in>| document_ptr_kinds h'\"", "lemma new_document_ptr_new: \n  \"document_ptr.Ref (Suc (fMax (finsert 0 (document_ptr.the_ref |`| document_ptrs h)))) \n      |\\<notin>| document_ptrs h\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_ptr_not_in_heap:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"new_document_ptr |\\<notin>| document_ptr_kinds h\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_new_ptr:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"object_ptr_kinds h' = object_ptr_kinds h |\\<union>| {|cast new_document_ptr|}\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_is_document_ptr:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"is_document_ptr new_document_ptr\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  assumes \"ptr \\<noteq> cast new_document_ptr\"\n  shows \"get\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t ptr h = get\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t ptr h'\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e ptr h = get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e ptr h'\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a ptr h = get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a ptr h'\"", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  assumes \"ptr \\<noteq> new_document_ptr\"\n  shows \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\"", "lemma known_ptr_not_document_ptr: \"\\<not>is_document_ptr ptr \\<Longrightarrow> a_known_ptr ptr \\<Longrightarrow> known_ptr ptr\"", "lemmas known_ptr_defs = a_known_ptr_def", "lemma known_ptrs_known_ptr: \"a_known_ptrs h \\<Longrightarrow> ptr |\\<in>| object_ptr_kinds h \\<Longrightarrow> known_ptr ptr\"", "lemma known_ptrs_preserved: \n  \"object_ptr_kinds h = object_ptr_kinds h' \\<Longrightarrow> a_known_ptrs h = a_known_ptrs h'\"", "lemma known_ptrs_subset: \n  \"object_ptr_kinds h' |\\<subseteq>| object_ptr_kinds h \\<Longrightarrow> a_known_ptrs h \\<Longrightarrow> a_known_ptrs h'\"", "lemma known_ptrs_new_ptr:\n  \"object_ptr_kinds h' = object_ptr_kinds h |\\<union>| {|new_ptr|} \\<Longrightarrow> known_ptr new_ptr \\<Longrightarrow>\na_known_ptrs h \\<Longrightarrow> a_known_ptrs h'\"", "lemmas known_ptrs_defs = a_known_ptrs_def", "lemma known_ptrs_is_l_known_ptrs  [instances]: \"l_known_ptrs known_ptr known_ptrs\""], "translations": [["", "lemma document_ptr_kinds_simp [simp]: \n  \"document_ptr_kinds (Heap (fmupd (cast document_ptr) document (the_heap h))) \n          = {|document_ptr|} |\\<union>| document_ptr_kinds h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. document_ptr_kinds\n     (Heap (fmupd (cast document_ptr) document (the_heap h))) =\n    {|document_ptr|} |\\<union>| document_ptr_kinds h", "apply(auto simp add: document_ptr_kinds_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. document_ptr |\\<in>|\n    (the \\<circ> cast) |`|\n    ffilter is_document_ptr_kind\n     (finsert (cast document_ptr) (object_ptr_kinds h))", "by force"], ["", "lemma document_ptr_kinds_commutes [simp]: \n  \"cast document_ptr |\\<in>| object_ptr_kinds h \\<longleftrightarrow> document_ptr |\\<in>| document_ptr_kinds h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast document_ptr |\\<in>| object_ptr_kinds h) =\n    (document_ptr |\\<in>| document_ptr_kinds h)", "apply(auto simp add: object_ptr_kinds_def document_ptr_kinds_def)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. cast document_ptr |\\<in>| fmdom (the_heap h) \\<Longrightarrow>\n    document_ptr |\\<in>|\n    (the \\<circ> cast) |`| ffilter is_document_ptr_kind (fmdom (the_heap h))", "by (metis (no_types, lifting) document_ptr_casts_commute2 document_ptr_document_ptr_cast \n      ffmember_filter fimage_eqI fset.map_comp option.sel)"], ["", "definition get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t :: \"(_) document_ptr \\<Rightarrow> (_) heap \\<Rightarrow> (_) Document option\"\n  where                             \n    \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h = Option.bind (get (cast document_ptr) h) cast\""], ["", "adhoc_overloading get get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t"], ["", "locale l_type_wf_def\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\nbegin"], ["", "definition a_type_wf :: \"(_) heap \\<Rightarrow> bool\"\n  where\n    \"a_type_wf h = (CharacterDataClass.type_wf h \\<and> \n    (\\<forall>document_ptr \\<in> fset (document_ptr_kinds h). get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h \\<noteq> None))\""], ["", "end"], ["", "global_interpretation l_type_wf_def\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t defines type_wf = a_type_wf"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas type_wf_defs = a_type_wf_def"], ["", "locale l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t = l_type_wf type_wf for type_wf :: \"((_) heap \\<Rightarrow> bool)\" +\n  assumes type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t: \"type_wf h \\<Longrightarrow> DocumentClass.type_wf h\""], ["", "sublocale l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t \\<subseteq> l_type_wf\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a"], ["proof (prove)\ngoal (1 subgoal):\n 1. l_type_wf\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a\n     type_wf", "apply(unfold_locales)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h. type_wf h \\<Longrightarrow> CharacterDataClass.type_wf h", "by (metis (full_types) type_wf_defs l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_axioms l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["", "locale l_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_lemmas = l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\nbegin"], ["", "sublocale l_get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a_lemmas"], ["proof (prove)\ngoal (1 subgoal):\n 1. l_get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a_lemmas\n     type_wf", "by unfold_locales"], ["", "lemma get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_type_wf:\n  assumes \"type_wf h\"\n  shows \"document_ptr |\\<in>| document_ptr_kinds h \\<longleftrightarrow> get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (document_ptr |\\<in>| document_ptr_kinds h) =\n    (get document_ptr h \\<noteq> None)", "using l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_axioms assms"], ["proof (prove)\nusing this:\n  l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\n   type_wf\n  type_wf h\n\ngoal (1 subgoal):\n 1. (document_ptr |\\<in>| document_ptr_kinds h) =\n    (get document_ptr h \\<noteq> None)", "apply(simp add: type_wf_defs get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def l_type_wf\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>h.\n                type_wf h \\<longrightarrow>\n                CharacterDataClass.type_wf h \\<and>\n                (\\<forall>document_ptr\\<in>fset (document_ptr_kinds h).\n                    \\<exists>y.\n                       Option.bind (get (cast document_ptr) h) cast =\n                       Some y);\n     type_wf h\\<rbrakk>\n    \\<Longrightarrow> (document_ptr |\\<in>| document_ptr_kinds h) =\n                      (\\<exists>y.\n                          Option.bind (get (cast document_ptr) h) cast =\n                          Some y)", "by (metis document_ptr_kinds_commutes fmember.rep_eq is_none_bind is_none_simps(1)\n      is_none_simps(2) local.get\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_type_wf)"], ["", "end"], ["", "global_interpretation l_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_lemmas type_wf"], ["proof (prove)\ngoal (1 subgoal):\n 1. l_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_lemmas\n     DocumentClass.type_wf", "by unfold_locales"], ["", "definition put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t :: \"(_) document_ptr \\<Rightarrow> (_) Document \\<Rightarrow> (_) heap \\<Rightarrow> (_) heap\"\n  where\n    \"put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr document = put (cast document_ptr) (cast document)\""], ["", "adhoc_overloading put put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t"], ["", "lemma put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_ptr_in_heap:\n  assumes \"put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr document h = h'\"\n  shows \"document_ptr |\\<in>| document_ptr_kinds h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. document_ptr |\\<in>| document_ptr_kinds h'", "using assms"], ["proof (prove)\nusing this:\n  put document_ptr document h = h'\n\ngoal (1 subgoal):\n 1. document_ptr |\\<in>| document_ptr_kinds h'", "unfolding put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def"], ["proof (prove)\nusing this:\n  put (cast document_ptr) (cast document) h = h'\n\ngoal (1 subgoal):\n 1. document_ptr |\\<in>| document_ptr_kinds h'", "by (metis document_ptr_kinds_commutes put\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_ptr_in_heap)"], ["", "lemma put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_put_ptrs:\n  assumes \"put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr document h = h'\"\n  shows \"object_ptr_kinds h' = object_ptr_kinds h |\\<union>| {|cast document_ptr|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. object_ptr_kinds h' =\n    object_ptr_kinds h |\\<union>| {|cast document_ptr|}", "using assms"], ["proof (prove)\nusing this:\n  put document_ptr document h = h'\n\ngoal (1 subgoal):\n 1. object_ptr_kinds h' =\n    object_ptr_kinds h |\\<union>| {|cast document_ptr|}", "by (simp add: put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def put\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_put_ptrs)"], ["", "lemma cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_inject [simp]: \"cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t x = cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast x = cast y) = (x = y)", "apply(simp add: cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_def RObject.extend_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (RObject.more x = RObject.more y) = (x = y)", "by (metis (full_types) RObject.surjective old.unit.exhaust)"], ["", "lemma cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_none [simp]: \n  \"cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t obj = None \\<longleftrightarrow> \\<not> (\\<exists>document. cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document = obj)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast obj = None) = (\\<nexists>document. cast document = obj)", "apply(auto simp add: cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_def RObject.extend_def \n      split: sum.splits)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       RObject.more obj = Inr (Inl x1) \\<Longrightarrow>\n       \\<exists>document.\n          \\<lparr>RObject.nothing = (),\n             \\<dots> = Inr (Inl (RObject.more document))\\<rparr> =\n          obj", "by (metis (full_types) RObject.select_convs(2) RObject.surjective old.unit.exhaust)"], ["", "lemma cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_some [simp]: \n  \"cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t obj = Some document \\<longleftrightarrow> cast document = obj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast obj = Some document) = (cast document = obj)", "by(auto simp add: cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_def RObject.extend_def \n      split: sum.splits)"], ["", "lemma cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_inv [simp]: \"cast\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>2\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t (cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document) = Some document\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (cast document) = Some document", "by simp"], ["", "lemma cast_document_not_node [simp]:\n  \"cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document \\<noteq> cast\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t node\"\n  \"cast\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t node \\<noteq> cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t document\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast document \\<noteq> cast node &&& cast node \\<noteq> cast document", "by(auto simp add: cast\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_def cast\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e\\<^sub>2\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_def RObject.extend_def)"], ["", "lemma get_document_ptr_simp1 [simp]: \n  \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr document h) = Some document\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get document_ptr (put document_ptr document h) = Some document", "by(auto simp add: get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["", "lemma get_document_ptr_simp2 [simp]: \n  \"document_ptr \\<noteq> document_ptr' \n   \\<Longrightarrow> get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr' document h) = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. document_ptr \\<noteq> document_ptr' \\<Longrightarrow>\n    get document_ptr (put document_ptr' document h) = get document_ptr h", "by(auto simp add: get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["", "lemma get_document_ptr_simp3 [simp]: \n  \"get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t element_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr f h) = get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t element_ptr h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get element_ptr (put document_ptr f h) = get element_ptr h", "by(auto simp add: get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e_def put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["", "lemma get_document_ptr_simp4 [simp]:\n  \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t element_ptr f h) = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get document_ptr (put element_ptr f h) = get document_ptr h", "by(auto simp add: get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def put\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def put\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e_def)"], ["", "lemma get_document_ptr_simp5 [simp]: \n  \"get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a character_data_ptr (put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr f h) = get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a character_data_ptr h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get character_data_ptr (put document_ptr f h) = get character_data_ptr h", "by(auto simp add: get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a_def get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e_def put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["", "lemma get_document_ptr_simp6 [simp]:\n  \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr (put\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a character_data_ptr f h) = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t document_ptr h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get document_ptr (put character_data_ptr f h) = get document_ptr h", "by(auto simp add: get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def put\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a_def put\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e_def)"], ["", "lemma new\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_element_ptr, h')\"\n  shows \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_element_ptr, h')\n\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "by(auto simp add: new\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def)"], ["", "lemma new\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a h = (new_character_data_ptr, h')\"\n  shows \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a\n   h =\n  (new_character_data_ptr, h')\n\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "by(auto simp add: new\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a_def Let_def)"], ["", "abbreviation \n  create_document_obj :: \"char list \\<Rightarrow> (_) element_ptr option \\<Rightarrow> (_) node_ptr list \\<Rightarrow> (_) Document\"\n  where\n    \"create_document_obj doctype_arg document_element_arg disconnected_nodes_arg\n  \\<equiv> \\<lparr> RObject.nothing = (), RDocument.nothing = (), doctype = doctype_arg, \n      document_element = document_element_arg,\n      disconnected_nodes = disconnected_nodes_arg, \\<dots> = None \\<rparr>\""], ["", "definition new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t :: \"(_)heap \\<Rightarrow> ((_) document_ptr \\<times> (_) heap)\"\n  where\n    \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = \n     (let new_document_ptr = document_ptr.Ref (Suc (fMax (finsert 0 (document_ptr.the_ref |`| (document_ptrs h))))) \n        in\n         (new_document_ptr, put new_document_ptr (create_document_obj '''' None []) h))\""], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_ptr_in_heap:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"new_document_ptr |\\<in>| document_ptr_kinds h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_document_ptr |\\<in>| document_ptr_kinds h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. new_document_ptr |\\<in>| document_ptr_kinds h'", "unfolding new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def"], ["proof (prove)\nusing this:\n  (document_ptr.Ref\n    (Suc (fMax (finsert 0 (document_ptr.the_ref |`| document_ptrs h)))),\n   put (document_ptr.Ref\n         (Suc (fMax\n                (finsert 0 (document_ptr.the_ref |`| document_ptrs h)))))\n    (create_document_obj [] None []) h) =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. new_document_ptr |\\<in>| document_ptr_kinds h'", "using put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_ptr_in_heap"], ["proof (prove)\nusing this:\n  (document_ptr.Ref\n    (Suc (fMax (finsert 0 (document_ptr.the_ref |`| document_ptrs h)))),\n   put (document_ptr.Ref\n         (Suc (fMax\n                (finsert 0 (document_ptr.the_ref |`| document_ptrs h)))))\n    (create_document_obj [] None []) h) =\n  (new_document_ptr, h')\n  put ?document_ptr ?document ?h = ?h' \\<Longrightarrow>\n  ?document_ptr |\\<in>| document_ptr_kinds ?h'\n\ngoal (1 subgoal):\n 1. new_document_ptr |\\<in>| document_ptr_kinds h'", "by blast"], ["", "lemma new_document_ptr_new: \n  \"document_ptr.Ref (Suc (fMax (finsert 0 (document_ptr.the_ref |`| document_ptrs h)))) \n      |\\<notin>| document_ptrs h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. document_ptr.Ref\n     (Suc (fMax\n            (finsert 0\n              (document_ptr.the_ref |`| document_ptrs h)))) |\\<notin>|\n    document_ptrs h", "by (metis Suc_n_not_le_n document_ptr.sel(1) fMax_ge fimage_finsert finsertI1 finsertI2 set_finsert)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_ptr_not_in_heap:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"new_document_ptr |\\<notin>| document_ptr_kinds h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_document_ptr |\\<notin>| document_ptr_kinds h", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. new_document_ptr |\\<notin>| document_ptr_kinds h", "unfolding new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def"], ["proof (prove)\nusing this:\n  (let new_document_ptr =\n         document_ptr.Ref\n          (Suc (fMax\n                 (finsert 0 (document_ptr.the_ref |`| document_ptrs h))))\n   in (new_document_ptr,\n       put new_document_ptr (create_document_obj [] None []) h)) =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. new_document_ptr |\\<notin>| document_ptr_kinds h", "by (metis Pair_inject document_ptrs_def fMax_finsert fempty_iff ffmember_filter \n      fimage_is_fempty is_document_ptr_ref max_0L new_document_ptr_new)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_new_ptr:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"object_ptr_kinds h' = object_ptr_kinds h |\\<union>| {|cast new_document_ptr|}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. object_ptr_kinds h' =\n    object_ptr_kinds h |\\<union>| {|cast new_document_ptr|}", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. object_ptr_kinds h' =\n    object_ptr_kinds h |\\<union>| {|cast new_document_ptr|}", "by (metis Pair_inject new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_put_ptrs)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_is_document_ptr:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"is_document_ptr new_document_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_document_ptr new_document_ptr", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. is_document_ptr new_document_ptr", "by(auto simp add: new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  assumes \"ptr \\<noteq> cast new_document_ptr\"\n  shows \"get\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t ptr h = get\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t ptr h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n  ptr \\<noteq> cast new_document_ptr\n\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "by(auto simp add: new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e ptr h = get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e ptr h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "apply(simp add: new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def put\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. document_ptr.Ref\n     (Suc (if document_ptrs h = {||} then 0\n           else max 0 (fMax (document_ptr.the_ref |`| document_ptrs h)))) =\n    new_document_ptr \\<and>\n    put (cast\n          (document_ptr.Ref\n            (Suc (if document_ptrs h = {||} then 0\n                  else max 0\n                        (fMax\n                          (document_ptr.the_ref |`| document_ptrs h))))))\n     (cast (create_document_obj [] None [])) h =\n    h' \\<Longrightarrow>\n    get ptr h = get ptr h'", "by(auto simp add: get\\<^sub>N\\<^sub>o\\<^sub>d\\<^sub>e_def)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>E\\<^sub>l\\<^sub>e\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "by(auto simp add: new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  shows \"get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a ptr h = get\\<^sub>C\\<^sub>h\\<^sub>a\\<^sub>r\\<^sub>a\\<^sub>c\\<^sub>t\\<^sub>e\\<^sub>r\\<^sub>D\\<^sub>a\\<^sub>t\\<^sub>a ptr h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "by(auto simp add: new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def)"], ["", "lemma new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t [simp]:\n  assumes \"new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h = (new_document_ptr, h')\"\n  assumes \"ptr \\<noteq> new_document_ptr\"\n  shows \"get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h = get\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t ptr h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "using assms"], ["proof (prove)\nusing this:\n  new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t h =\n  (new_document_ptr, h')\n  ptr \\<noteq> new_document_ptr\n\ngoal (1 subgoal):\n 1. get ptr h = get ptr h'", "by(auto simp add: new\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t_def Let_def)"], ["", "locale l_known_ptr\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\nbegin"], ["", "definition a_known_ptr :: \"(_) object_ptr \\<Rightarrow> bool\"\n  where\n    \"a_known_ptr ptr = (known_ptr ptr \\<or> is_document_ptr ptr)\""], ["", "lemma known_ptr_not_document_ptr: \"\\<not>is_document_ptr ptr \\<Longrightarrow> a_known_ptr ptr \\<Longrightarrow> known_ptr ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> (case cast ptr of None \\<Rightarrow> False\n                     | Some document_ptr \\<Rightarrow>\n                         is_document_ptr document_ptr);\n     local.a_known_ptr ptr\\<rbrakk>\n    \\<Longrightarrow> CharacterDataClass.known_ptr ptr", "by(simp add: a_known_ptr_def)"], ["", "end"], ["", "global_interpretation l_known_ptr\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t defines known_ptr = a_known_ptr"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas known_ptr_defs = a_known_ptr_def"], ["", "locale l_known_ptrs\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t = l_known_ptr known_ptr for known_ptr :: \"(_) object_ptr \\<Rightarrow> bool\"\nbegin"], ["", "definition a_known_ptrs :: \"(_) heap \\<Rightarrow> bool\"\n  where\n    \"a_known_ptrs h = (\\<forall>ptr \\<in> fset (object_ptr_kinds h). known_ptr ptr)\""], ["", "lemma known_ptrs_known_ptr: \"a_known_ptrs h \\<Longrightarrow> ptr |\\<in>| object_ptr_kinds h \\<Longrightarrow> known_ptr ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.a_known_ptrs h; ptr |\\<in>| object_ptr_kinds h\\<rbrakk>\n    \\<Longrightarrow> known_ptr ptr", "apply(simp add: a_known_ptrs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ptr\\<in>fset (object_ptr_kinds h). known_ptr ptr;\n     ptr |\\<in>| object_ptr_kinds h\\<rbrakk>\n    \\<Longrightarrow> known_ptr ptr", "using notin_fset"], ["proof (prove)\nusing this:\n  (?x |\\<notin>| ?S) = (?x \\<notin> fset ?S)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>ptr\\<in>fset (object_ptr_kinds h). known_ptr ptr;\n     ptr |\\<in>| object_ptr_kinds h\\<rbrakk>\n    \\<Longrightarrow> known_ptr ptr", "by fastforce"], ["", "lemma known_ptrs_preserved: \n  \"object_ptr_kinds h = object_ptr_kinds h' \\<Longrightarrow> a_known_ptrs h = a_known_ptrs h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. object_ptr_kinds h = object_ptr_kinds h' \\<Longrightarrow>\n    local.a_known_ptrs h = local.a_known_ptrs h'", "by(auto simp add: a_known_ptrs_def)"], ["", "lemma known_ptrs_subset: \n  \"object_ptr_kinds h' |\\<subseteq>| object_ptr_kinds h \\<Longrightarrow> a_known_ptrs h \\<Longrightarrow> a_known_ptrs h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>object_ptr_kinds h' |\\<subseteq>| object_ptr_kinds h;\n     local.a_known_ptrs h\\<rbrakk>\n    \\<Longrightarrow> local.a_known_ptrs h'", "by(simp add: a_known_ptrs_def less_eq_fset.rep_eq subsetD)"], ["", "lemma known_ptrs_new_ptr:\n  \"object_ptr_kinds h' = object_ptr_kinds h |\\<union>| {|new_ptr|} \\<Longrightarrow> known_ptr new_ptr \\<Longrightarrow>\na_known_ptrs h \\<Longrightarrow> a_known_ptrs h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>object_ptr_kinds h' =\n             object_ptr_kinds h |\\<union>| {|new_ptr|};\n     known_ptr new_ptr; local.a_known_ptrs h\\<rbrakk>\n    \\<Longrightarrow> local.a_known_ptrs h'", "by(simp add: a_known_ptrs_def)"], ["", "end"], ["", "global_interpretation l_known_ptrs\\<^sub>D\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t known_ptr defines known_ptrs = a_known_ptrs"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas known_ptrs_defs = a_known_ptrs_def"], ["", "lemma known_ptrs_is_l_known_ptrs  [instances]: \"l_known_ptrs known_ptr known_ptrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l_known_ptrs DocumentClass.known_ptr DocumentClass.known_ptrs", "using known_ptrs_known_ptr known_ptrs_preserved l_known_ptrs_def known_ptrs_subset known_ptrs_new_ptr"], ["proof (prove)\nusing this:\n  \\<lbrakk>DocumentClass.known_ptrs ?h;\n   ?ptr |\\<in>| object_ptr_kinds ?h\\<rbrakk>\n  \\<Longrightarrow> DocumentClass.known_ptr ?ptr\n  object_ptr_kinds ?h = object_ptr_kinds ?h' \\<Longrightarrow>\n  DocumentClass.known_ptrs ?h = DocumentClass.known_ptrs ?h'\n  l_known_ptrs ?known_ptr ?known_ptrs \\<equiv>\n  ((\\<forall>h ptr.\n       ?known_ptrs h \\<longrightarrow>\n       ptr |\\<in>| object_ptr_kinds h \\<longrightarrow>\n       ?known_ptr ptr) \\<and>\n   (\\<forall>h h'.\n       object_ptr_kinds h = object_ptr_kinds h' \\<longrightarrow>\n       ?known_ptrs h = ?known_ptrs h')) \\<and>\n  (\\<forall>h' h.\n      object_ptr_kinds h' |\\<subseteq>| object_ptr_kinds h \\<longrightarrow>\n      ?known_ptrs h \\<longrightarrow> ?known_ptrs h') \\<and>\n  (\\<forall>h' h new_ptr.\n      object_ptr_kinds h' =\n      object_ptr_kinds h |\\<union>| {|new_ptr|} \\<longrightarrow>\n      ?known_ptr new_ptr \\<longrightarrow>\n      ?known_ptrs h \\<longrightarrow> ?known_ptrs h')\n  \\<lbrakk>object_ptr_kinds ?h' |\\<subseteq>| object_ptr_kinds ?h;\n   DocumentClass.known_ptrs ?h\\<rbrakk>\n  \\<Longrightarrow> DocumentClass.known_ptrs ?h'\n  \\<lbrakk>object_ptr_kinds ?h' =\n           object_ptr_kinds ?h |\\<union>| {|?new_ptr|};\n   DocumentClass.known_ptr ?new_ptr; DocumentClass.known_ptrs ?h\\<rbrakk>\n  \\<Longrightarrow> DocumentClass.known_ptrs ?h'\n\ngoal (1 subgoal):\n 1. l_known_ptrs DocumentClass.known_ptr DocumentClass.known_ptrs", "by blast"], ["", "end"]]}