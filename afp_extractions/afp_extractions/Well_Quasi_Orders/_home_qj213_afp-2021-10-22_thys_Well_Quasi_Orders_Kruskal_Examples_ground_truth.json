{"file_name": "/home/qj213/afp-2021-10-22/thys/Well_Quasi_Orders/Kruskal_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Well_Quasi_Orders", "problem_names": ["lemma [simp]:\n  \"trees UNIV = UNIV\"", "lemma wqo_on_trees:\n  assumes \"wqo_on P A\"\n  shows \"wqo_on (tree_emb A P) (trees A)\"", "lemma [simp]:\n  assumes \"length ts = 2\"\n  shows \"rt (mk p ts) = (p, 2)\"", "lemma [simp]:\n  assumes \"length ts = 2\"\n  shows \"ags (mk p ts) = ts\""], "translations": [["", "lemma [simp]:\n  \"trees UNIV = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trees UNIV = UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trees UNIV = UNIV", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. trees UNIV = UNIV", "fix t :: \"'a tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. trees UNIV = UNIV", "have \"t \\<in> trees UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> trees UNIV", "by (induct t) (auto intro: trees.intros)"], ["proof (state)\nthis:\n  t \\<in> trees UNIV\n\ngoal (1 subgoal):\n 1. trees UNIV = UNIV", "}"], ["proof (state)\nthis:\n  ?t2 \\<in> trees UNIV\n\ngoal (1 subgoal):\n 1. trees UNIV = UNIV", "then"], ["proof (chain)\npicking this:\n  ?t2 \\<in> trees UNIV", "show ?thesis"], ["proof (prove)\nusing this:\n  ?t2 \\<in> trees UNIV\n\ngoal (1 subgoal):\n 1. trees UNIV = UNIV", "by auto"], ["proof (state)\nthis:\n  trees UNIV = UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation kruskal_tree_tree: kruskal_tree \"A \\<times> UNIV\" Node node succs \"trees A\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal_tree (A \\<times> UNIV) Node node succs (trees A)", "apply (unfold_locales)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>f ts.\n       (f, length ts) \\<in> A \\<times> UNIV \\<Longrightarrow>\n       node (Node f ts) = (f, length ts)\n 3. \\<And>f ts.\n       (f, length ts) \\<in> A \\<times> UNIV \\<Longrightarrow>\n       succs (Node f ts) = ts\n 4. \\<And>t.\n       t \\<in> trees A \\<Longrightarrow> Node (fst (node t)) (succs t) = t\n 5. \\<And>t. t \\<in> trees A \\<Longrightarrow> node t \\<in> A \\<times> UNIV\n 6. \\<And>t.\n       t \\<in> trees A \\<Longrightarrow> length (succs t) = snd (node t)\n 7. \\<And>t s.\n       \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> trees A", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>t.\n       t \\<in> trees A \\<Longrightarrow> Node (fst (node t)) (succs t) = t\n 3. \\<And>t. t \\<in> trees A \\<Longrightarrow> node t \\<in> A \\<times> UNIV\n 4. \\<And>t.\n       t \\<in> trees A \\<Longrightarrow> length (succs t) = snd (node t)\n 5. \\<And>t s.\n       \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> trees A", "apply (case_tac [!] t rule: trees.cases)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> trees (?A6 t s)\n 2. \\<And>t s f ts.\n       \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t); t = Node f ts;\n        f \\<in> ?A6 t s;\n        \\<forall>ta\\<in>set ts. ta \\<in> trees (?A6 t s)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 3. \\<And>t. t \\<in> trees A \\<Longrightarrow> t \\<in> trees (?A5 t)\n 4. \\<And>t f ts.\n       \\<lbrakk>t \\<in> trees A; t = Node f ts; f \\<in> ?A5 t;\n        \\<forall>ta\\<in>set ts. ta \\<in> trees (?A5 t)\\<rbrakk>\n       \\<Longrightarrow> Node (fst (node t)) (succs t) = t\n 5. \\<And>t. t \\<in> trees A \\<Longrightarrow> t \\<in> trees (?A4 t)\n 6. \\<And>t f ts.\n       \\<lbrakk>t \\<in> trees A; t = Node f ts; f \\<in> ?A4 t;\n        \\<forall>ta\\<in>set ts. ta \\<in> trees (?A4 t)\\<rbrakk>\n       \\<Longrightarrow> node t \\<in> A \\<times> UNIV\n 7. \\<And>t. t \\<in> trees A \\<Longrightarrow> t \\<in> trees (?A3 t)\n 8. \\<And>t f ts.\n       \\<lbrakk>t \\<in> trees A; t = Node f ts; f \\<in> ?A3 t;\n        \\<forall>ta\\<in>set ts. ta \\<in> trees (?A3 t)\\<rbrakk>\n       \\<Longrightarrow> length (succs t) = snd (node t)\n 9. \\<And>t s.\n       \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> trees (?A2 t s)\n 10. \\<And>t s f ts.\n        \\<lbrakk>t \\<in> trees A; s \\<in> set (succs t); t = Node f ts;\n         f \\<in> ?A2 t s;\n         \\<forall>ta\\<in>set ts. ta \\<in> trees (?A2 t s)\\<rbrakk>\n        \\<Longrightarrow> s \\<in> trees A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s f ts.\n       \\<lbrakk>Node f ts \\<in> trees A; s \\<in> set ts; f \\<in> A;\n        \\<forall>t\\<in>set ts. t \\<in> trees A\\<rbrakk>\n       \\<Longrightarrow> size s < Suc (size_list size ts)", "by (metis less_not_refl not_less_eq size_list_estimation)"], ["", "thm kruskal_tree_tree.almost_full_on_trees"], ["", "thm kruskal_tree_tree.kruskal"], ["", "definition \"tree_emb A P = kruskal_tree_tree.emb A (prod_le P (\\<lambda>_ _. True))\""], ["", "lemma wqo_on_trees:\n  assumes \"wqo_on P A\"\n  shows \"wqo_on (tree_emb A P) (trees A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (tree_emb A P) (trees A)", "using wqo_on_Sigma [OF assms wqo_on_UNIV, THEN kruskal_tree_tree.kruskal]"], ["proof (prove)\nusing this:\n  wqo_on (kruskal_tree_tree.emb A (prod_le P (\\<lambda>_ _. True)))\n   (trees A)\n\ngoal (1 subgoal):\n 1. wqo_on (tree_emb A P) (trees A)", "by (simp add: tree_emb_def)"], ["", "text \\<open>\nIf the type @{typ \"'a\"} is well-quasi-ordered by \\<open>P\\<close>, then trees of type @{typ \"'a tree\"}\nare well-quasi-ordered by the homeomorphic embedding relation.\n\\<close>"], ["", "instantiation tree :: (wqo) wqo\nbegin"], ["", "definition \"s \\<le> t \\<longleftrightarrow> tree_emb UNIV (\\<le>) s t\""], ["", "definition \"(s :: 'a tree) < t \\<longleftrightarrow> s \\<le> t \\<and> \\<not> (t \\<le> s)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a tree, wqo_class)", "by (rule class.wqo.of_class.intro)\n     (auto simp: less_eq_tree_def [abs_def] less_tree_def [abs_def]\n           intro: wqo_on_trees [of _ UNIV, simplified])"], ["", "end"], ["", "datatype ('f, 'v) \"term\" = Var 'v | Fun 'f \"('f, 'v) term list\""], ["", "fun root\nwhere\n  \"root (Fun f ts) = (f, length ts)\""], ["", "fun args\nwhere\n  \"args (Fun f ts) = ts\""], ["", "inductive_set gterms for F\nwhere\n  \"(f, n) \\<in> F \\<Longrightarrow> length ts = n \\<Longrightarrow> \\<forall>s \\<in> set ts. s \\<in> gterms F \\<Longrightarrow> Fun f ts \\<in> gterms F\""], ["", "interpretation kruskal_term: kruskal_tree F Fun root args \"gterms F\" for F"], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal_tree F Fun root args (gterms F)", "apply (unfold_locales)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>f ts.\n       (f, length ts) \\<in> F \\<Longrightarrow>\n       root (Fun f ts) = (f, length ts)\n 3. \\<And>f ts.\n       (f, length ts) \\<in> F \\<Longrightarrow> args (Fun f ts) = ts\n 4. \\<And>t.\n       t \\<in> gterms F \\<Longrightarrow> Fun (fst (root t)) (args t) = t\n 5. \\<And>t. t \\<in> gterms F \\<Longrightarrow> root t \\<in> F\n 6. \\<And>t.\n       t \\<in> gterms F \\<Longrightarrow> length (args t) = snd (root t)\n 7. \\<And>t s.\n       \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> gterms F", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>t.\n       t \\<in> gterms F \\<Longrightarrow> Fun (fst (root t)) (args t) = t\n 3. \\<And>t. t \\<in> gterms F \\<Longrightarrow> root t \\<in> F\n 4. \\<And>t.\n       t \\<in> gterms F \\<Longrightarrow> length (args t) = snd (root t)\n 5. \\<And>t s.\n       \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> gterms F", "apply (case_tac [!] t rule: gterms.cases)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> gterms (?F6 t s)\n 2. \\<And>t s f n ts.\n       \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t); t = Fun f ts;\n        (f, n) \\<in> ?F6 t s; length ts = n;\n        \\<forall>sa\\<in>set ts. sa \\<in> gterms (?F6 t s)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 3. \\<And>t. t \\<in> gterms F \\<Longrightarrow> t \\<in> gterms (?F5 t)\n 4. \\<And>t f n ts.\n       \\<lbrakk>t \\<in> gterms F; t = Fun f ts; (f, n) \\<in> ?F5 t;\n        length ts = n;\n        \\<forall>s\\<in>set ts. s \\<in> gterms (?F5 t)\\<rbrakk>\n       \\<Longrightarrow> Fun (fst (root t)) (args t) = t\n 5. \\<And>t. t \\<in> gterms F \\<Longrightarrow> t \\<in> gterms (?F4 t)\n 6. \\<And>t f n ts.\n       \\<lbrakk>t \\<in> gterms F; t = Fun f ts; (f, n) \\<in> ?F4 t;\n        length ts = n;\n        \\<forall>s\\<in>set ts. s \\<in> gterms (?F4 t)\\<rbrakk>\n       \\<Longrightarrow> root t \\<in> F\n 7. \\<And>t. t \\<in> gterms F \\<Longrightarrow> t \\<in> gterms (?F3 t)\n 8. \\<And>t f n ts.\n       \\<lbrakk>t \\<in> gterms F; t = Fun f ts; (f, n) \\<in> ?F3 t;\n        length ts = n;\n        \\<forall>s\\<in>set ts. s \\<in> gterms (?F3 t)\\<rbrakk>\n       \\<Longrightarrow> length (args t) = snd (root t)\n 9. \\<And>t s.\n       \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> gterms (?F2 t s)\n 10. \\<And>t s f n ts.\n        \\<lbrakk>t \\<in> gterms F; s \\<in> set (args t); t = Fun f ts;\n         (f, n) \\<in> ?F2 t s; length ts = n;\n         \\<forall>sa\\<in>set ts. sa \\<in> gterms (?F2 t s)\\<rbrakk>\n        \\<Longrightarrow> s \\<in> gterms F", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s f ts.\n       \\<lbrakk>Fun f ts \\<in> gterms F; s \\<in> set ts;\n        (f, length ts) \\<in> F;\n        \\<forall>s\\<in>set ts. s \\<in> gterms F\\<rbrakk>\n       \\<Longrightarrow> size s < Suc (size_list size ts)", "by (metis less_not_refl not_less_eq size_list_estimation)"], ["", "thm kruskal_term.almost_full_on_trees"], ["", "inductive_set terms\nwhere\n  \"\\<forall>t \\<in> set ts. t \\<in> terms \\<Longrightarrow> Fun f ts \\<in> terms\""], ["", "interpretation kruskal_variadic: kruskal_tree UNIV Fun root args terms"], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal_tree UNIV Fun root args terms", "apply (unfold_locales)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>f ts.\n       (f, length ts) \\<in> UNIV \\<Longrightarrow>\n       root (Fun f ts) = (f, length ts)\n 3. \\<And>f ts.\n       (f, length ts) \\<in> UNIV \\<Longrightarrow> args (Fun f ts) = ts\n 4. \\<And>t. t \\<in> terms \\<Longrightarrow> Fun (fst (root t)) (args t) = t\n 5. \\<And>t. t \\<in> terms \\<Longrightarrow> root t \\<in> UNIV\n 6. \\<And>t. t \\<in> terms \\<Longrightarrow> length (args t) = snd (root t)\n 7. \\<And>t s.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> terms", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>t. t \\<in> terms \\<Longrightarrow> Fun (fst (root t)) (args t) = t\n 3. \\<And>t. t \\<in> terms \\<Longrightarrow> length (args t) = snd (root t)\n 4. \\<And>t s.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> terms", "apply (case_tac [!] t rule: terms.cases)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> terms\n 2. \\<And>t s ts f.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t); t = Fun f ts;\n        \\<forall>t\\<in>set ts. t \\<in> terms\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 3. \\<And>t. t \\<in> terms \\<Longrightarrow> t \\<in> terms\n 4. \\<And>t ts f.\n       \\<lbrakk>t \\<in> terms; t = Fun f ts;\n        \\<forall>t\\<in>set ts. t \\<in> terms\\<rbrakk>\n       \\<Longrightarrow> Fun (fst (root t)) (args t) = t\n 5. \\<And>t. t \\<in> terms \\<Longrightarrow> t \\<in> terms\n 6. \\<And>t ts f.\n       \\<lbrakk>t \\<in> terms; t = Fun f ts;\n        \\<forall>t\\<in>set ts. t \\<in> terms\\<rbrakk>\n       \\<Longrightarrow> length (args t) = snd (root t)\n 7. \\<And>t s.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> terms\n 8. \\<And>t s ts f.\n       \\<lbrakk>t \\<in> terms; s \\<in> set (args t); t = Fun f ts;\n        \\<forall>t\\<in>set ts. t \\<in> terms\\<rbrakk>\n       \\<Longrightarrow> s \\<in> terms", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s ts f.\n       \\<lbrakk>Fun f ts \\<in> terms; s \\<in> set ts;\n        \\<forall>t\\<in>set ts. t \\<in> terms\\<rbrakk>\n       \\<Longrightarrow> size s < Suc (size_list size ts)", "by (metis less_not_refl not_less_eq size_list_estimation)"], ["", "thm kruskal_variadic.almost_full_on_trees"], ["", "datatype 'a exp = V 'a | C nat | Plus \"'a exp\" \"'a exp\""], ["", "datatype 'a symb = v 'a | c nat | p"], ["", "fun mk\nwhere\n  \"mk (v x) [] = V x\" |\n  \"mk (c n) [] = C n\" |\n  \"mk p [a, b] = Plus a b\""], ["", "fun rt\nwhere\n  \"rt (V x) = (v x, 0::nat)\" |\n  \"rt (C n) = (c n, 0)\" |\n  \"rt (Plus a b) = (p, 2)\""], ["", "fun ags\nwhere\n  \"ags (V x) = []\" |\n  \"ags (C n) = []\" |\n  \"ags (Plus a b) = [a, b]\""], ["", "inductive_set exps\nwhere\n  \"V x \\<in> exps\" |\n  \"C n \\<in> exps\" |\n  \"a \\<in> exps \\<Longrightarrow> b \\<in> exps \\<Longrightarrow> Plus a b \\<in> exps\""], ["", "lemma [simp]:\n  assumes \"length ts = 2\"\n  shows \"rt (mk p ts) = (p, 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt (mk p ts) = (p, 2)", "using assms"], ["proof (prove)\nusing this:\n  length ts = 2\n\ngoal (1 subgoal):\n 1. rt (mk p ts) = (p, 2)", "by (induct ts) (auto, case_tac ts, auto)"], ["", "lemma [simp]:\n  assumes \"length ts = 2\"\n  shows \"ags (mk p ts) = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ags (mk p ts) = ts", "using assms"], ["proof (prove)\nusing this:\n  length ts = 2\n\ngoal (1 subgoal):\n 1. ags (mk p ts) = ts", "by (induct ts) (auto, case_tac ts, auto)"], ["", "interpretation kruskal_exp: kruskal_tree\n  \"{(v x, 0) | x. True} \\<union> {(c n, 0) | n. True} \\<union> {(p, 2)}\"\n  mk rt ags exps"], ["proof (prove)\ngoal (1 subgoal):\n 1. kruskal_tree\n     ({(v x, 0) |x. True} \\<union> {(c n, 0) |n. True} \\<union> {(p, 2)}) mk\n     rt ags exps", "apply (unfold_locales)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>f ts.\n       (f, length ts)\n       \\<in> {(v x, 0) |x. True} \\<union> {(c n, 0) |n. True} \\<union>\n             {(p, 2)} \\<Longrightarrow>\n       rt (mk f ts) = (f, length ts)\n 3. \\<And>f ts.\n       (f, length ts)\n       \\<in> {(v x, 0) |x. True} \\<union> {(c n, 0) |n. True} \\<union>\n             {(p, 2)} \\<Longrightarrow>\n       ags (mk f ts) = ts\n 4. \\<And>t. t \\<in> exps \\<Longrightarrow> mk (fst (rt t)) (ags t) = t\n 5. \\<And>t.\n       t \\<in> exps \\<Longrightarrow>\n       rt t\n       \\<in> {(v x, 0) |x. True} \\<union> {(c n, 0) |n. True} \\<union>\n             {(p, 2)}\n 6. \\<And>t. t \\<in> exps \\<Longrightarrow> length (ags t) = snd (rt t)\n 7. \\<And>t s.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> exps", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t)\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 2. \\<And>t. t \\<in> exps \\<Longrightarrow> mk (fst (rt t)) (ags t) = t\n 3. \\<And>t.\n       \\<lbrakk>t \\<in> exps; rt t \\<noteq> (p, 2);\n        \\<forall>n. rt t \\<noteq> (c n, 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. rt t = (v x, 0)\n 4. \\<And>t. t \\<in> exps \\<Longrightarrow> length (ags t) = snd (rt t)\n 5. \\<And>t s.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t)\\<rbrakk>\n       \\<Longrightarrow> s \\<in> exps", "apply (case_tac [!] t rule: exps.cases)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>t s.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> exps\n 2. \\<And>t s x.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t); t = V x\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 3. \\<And>t s n.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t); t = C n\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 4. \\<And>t s a b.\n       \\<lbrakk>t \\<in> exps; s \\<in> set (ags t); t = exp.Plus a b;\n        a \\<in> exps; b \\<in> exps\\<rbrakk>\n       \\<Longrightarrow> size s < size t\n 5. \\<And>t. t \\<in> exps \\<Longrightarrow> t \\<in> exps\n 6. \\<And>t x.\n       \\<lbrakk>t \\<in> exps; t = V x\\<rbrakk>\n       \\<Longrightarrow> mk (fst (rt t)) (ags t) = t\n 7. \\<And>t n.\n       \\<lbrakk>t \\<in> exps; t = C n\\<rbrakk>\n       \\<Longrightarrow> mk (fst (rt t)) (ags t) = t\n 8. \\<And>t a b.\n       \\<lbrakk>t \\<in> exps; t = exp.Plus a b; a \\<in> exps;\n        b \\<in> exps\\<rbrakk>\n       \\<Longrightarrow> mk (fst (rt t)) (ags t) = t\n 9. \\<And>t.\n       \\<lbrakk>t \\<in> exps; rt t \\<noteq> (p, 2);\n        \\<forall>n. rt t \\<noteq> (c n, 0)\\<rbrakk>\n       \\<Longrightarrow> t \\<in> exps\n 10. \\<And>t x.\n        \\<lbrakk>t \\<in> exps; rt t \\<noteq> (p, 2);\n         \\<forall>n. rt t \\<noteq> (c n, 0); t = V x\\<rbrakk>\n        \\<Longrightarrow> \\<exists>x. rt t = (v x, 0)\nA total of 20 subgoals...", "by auto"], ["", "thm kruskal_exp.almost_full_on_trees"], ["", "hide_const (open) tree_emb V C Plus v c p"], ["", "end"]]}