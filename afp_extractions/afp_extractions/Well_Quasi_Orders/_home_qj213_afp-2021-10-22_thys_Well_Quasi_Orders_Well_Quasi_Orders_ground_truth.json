{"file_name": "/home/qj213/afp-2021-10-22/thys/Well_Quasi_Orders/Well_Quasi_Orders.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Well_Quasi_Orders", "problem_names": ["lemma wqo_on_UNIV:\n  \"wqo_on (\\<lambda>_ _. True) UNIV\"", "lemma wqo_onI [Pure.intro]:\n  \"\\<lbrakk>transp_on P A; almost_full_on P A\\<rbrakk> \\<Longrightarrow> wqo_on P A\"", "lemma wqo_on_imp_reflp_on:\n  \"wqo_on P A \\<Longrightarrow> reflp_on P A\"", "lemma wqo_on_imp_transp_on:\n  \"wqo_on P A \\<Longrightarrow> transp_on P A\"", "lemma wqo_on_imp_almost_full_on:\n  \"wqo_on P A \\<Longrightarrow> almost_full_on P A\"", "lemma wqo_on_imp_qo_on:\n  \"wqo_on P A \\<Longrightarrow> qo_on P A\"", "lemma wqo_on_imp_good:\n  \"wqo_on P A \\<Longrightarrow> \\<forall>i. f i \\<in> A \\<Longrightarrow> good P f\"", "lemma wqo_on_subset:\n  \"A \\<subseteq> B \\<Longrightarrow> wqo_on P B \\<Longrightarrow> wqo_on P A\"", "lemma wqo_af_conv:\n  assumes \"qo_on P A\"\n  shows \"wqo_on P A \\<longleftrightarrow> almost_full_on P A\"", "lemma wqo_wf_and_no_antichain_conv:\n  assumes \"qo_on P A\"\n  shows \"wqo_on P A \\<longleftrightarrow> wfp_on (strict P) A \\<and> \\<not> (\\<exists>f. antichain_on P f A)\"", "lemma wqo_extensions_wf_conv:\n  assumes \"qo_on P A\"\n  shows \"wqo_on P A \\<longleftrightarrow> (\\<forall>Q. (\\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> Q x y) \\<and> qo_on Q A \\<longrightarrow> wfp_on (strict Q) A)\"", "lemma wqo_on_imp_wfp_on:\n  \"wqo_on P A \\<Longrightarrow> wfp_on (strict P) A\"", "lemma wqo_on_hom:\n  assumes \"transp_on Q (h ` A)\"\n    and \"\\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> Q (h x) (h y)\"\n    and \"wqo_on P A\"\n  shows \"wqo_on Q (h ` A)\"", "lemma wqo_on_mon:\n  assumes *: \"\\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longleftrightarrow> Q (h x) (h y)\"\n    and bij: \"bij_betw h A B\"\n    and wqo: \"wqo_on Q B\"\n  shows \"wqo_on P A\"", "lemma wqo_on_class [simp, intro]:\n  \"wqo_on (\\<le>) (UNIV :: ('a :: wqo) set)\"", "lemma wqo_on_UNIV_class_wqo [intro!]:\n  \"wqo_on P UNIV \\<Longrightarrow> class.wqo P (strict P)\"", "lemma wqo_on_UNIV_conv:\n  \"wqo_on P UNIV \\<longleftrightarrow> class.wqo P (strict P)\" (is \"?lhs = ?rhs\")", "lemma (in wqo) \"wfP (<)\"", "lemma wqo_on_with_bot:\n  assumes \"wqo_on P A\"\n  shows \"wqo_on (option_le P) A\\<^sub>\\<bottom>\" (is \"wqo_on ?P ?A\")", "lemma wqo_on_option_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on (option_le P) UNIV\"", "lemma wqo_on_Plus:\n  assumes \"wqo_on P A\" and \"wqo_on Q B\"\n  shows \"wqo_on (sum_le P Q) (A <+> B)\" (is \"wqo_on ?P ?A\")", "lemma wqo_on_sum_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on Q UNIV \\<Longrightarrow> wqo_on (sum_le P Q) UNIV\"", "lemma wqo_on_Sigma:\n  fixes A1 :: \"'a set\" and A2 :: \"'b set\"\n  assumes \"wqo_on P1 A1\" and \"wqo_on P2 A2\"\n  shows \"wqo_on (prod_le P1 P2) (A1 \\<times> A2)\" (is \"wqo_on ?P ?A\")", "lemmas dickson = wqo_on_Sigma", "lemma wqo_on_prod_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on Q UNIV \\<Longrightarrow> wqo_on (prod_le P Q) UNIV\"", "lemma transp_on_list_emb:\n  assumes \"transp_on P A\"\n  shows \"transp_on (list_emb P) (lists A)\"", "lemma wqo_on_lists:\n  assumes \"wqo_on P A\" shows \"wqo_on (list_emb P) (lists A)\"", "lemmas higman = wqo_on_lists", "lemma wqo_on_list_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on (list_emb P) UNIV\"", "lemma finite_wqo_on:\n  assumes \"finite A\" and refl: \"reflp_on P A\" and \"transp_on P A\"\n  shows \"wqo_on P A\"", "lemma finite_eq_wqo_on:\n  assumes \"finite A\"\n  shows \"wqo_on (=) A\"", "lemma wqo_on_lists_over_finite_sets:\n  \"wqo_on (list_emb (=)) (UNIV::('a::finite) list set)\"", "lemma wqo_on_map:\n  fixes P and Q and h\n  defines \"P' \\<equiv> \\<lambda>x y. P x y \\<and> Q (h x) (h y)\"\n  assumes \"wqo_on P A\"\n    and \"wqo_on Q B\"\n    and subset: \"h ` A \\<subseteq> B\"\n  shows \"wqo_on P' A\"", "lemma wqo_on_UNIV_nat:\n  \"wqo_on (\\<le>) (UNIV :: nat set)\""], "translations": [["", "lemma wqo_on_UNIV:\n  \"wqo_on (\\<lambda>_ _. True) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (\\<lambda>_ _. True) UNIV", "using almost_full_on_UNIV"], ["proof (prove)\nusing this:\n  almost_full_on (\\<lambda>_ _. True) UNIV\n\ngoal (1 subgoal):\n 1. wqo_on (\\<lambda>_ _. True) UNIV", "by (auto simp: wqo_on_def transp_on_def)"], ["", "lemma wqo_onI [Pure.intro]:\n  \"\\<lbrakk>transp_on P A; almost_full_on P A\\<rbrakk> \\<Longrightarrow> wqo_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>transp_on P A; almost_full_on P A\\<rbrakk>\n    \\<Longrightarrow> wqo_on P A", "unfolding wqo_on_def almost_full_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>transp_on P A; Ball (SEQ A) (good P)\\<rbrakk>\n    \\<Longrightarrow> transp_on P A \\<and> Ball (SEQ A) (good P)", "by blast"], ["", "lemma wqo_on_imp_reflp_on:\n  \"wqo_on P A \\<Longrightarrow> reflp_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A \\<Longrightarrow> reflp_on P A", "using almost_full_on_imp_reflp_on"], ["proof (prove)\nusing this:\n  almost_full_on ?P ?A \\<Longrightarrow> reflp_on ?P ?A\n\ngoal (1 subgoal):\n 1. wqo_on P A \\<Longrightarrow> reflp_on P A", "by (auto simp: wqo_on_def)"], ["", "lemma wqo_on_imp_transp_on:\n  \"wqo_on P A \\<Longrightarrow> transp_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A \\<Longrightarrow> transp_on P A", "by (auto simp: wqo_on_def)"], ["", "lemma wqo_on_imp_almost_full_on:\n  \"wqo_on P A \\<Longrightarrow> almost_full_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A \\<Longrightarrow> almost_full_on P A", "by (auto simp: wqo_on_def)"], ["", "lemma wqo_on_imp_qo_on:\n  \"wqo_on P A \\<Longrightarrow> qo_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A \\<Longrightarrow> qo_on P A", "by (metis qo_on_def wqo_on_imp_reflp_on wqo_on_imp_transp_on)"], ["", "lemma wqo_on_imp_good:\n  \"wqo_on P A \\<Longrightarrow> \\<forall>i. f i \\<in> A \\<Longrightarrow> good P f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wqo_on P A; \\<forall>i. f i \\<in> A\\<rbrakk>\n    \\<Longrightarrow> good P f", "by (auto simp: wqo_on_def almost_full_on_def)"], ["", "lemma wqo_on_subset:\n  \"A \\<subseteq> B \\<Longrightarrow> wqo_on P B \\<Longrightarrow> wqo_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; wqo_on P B\\<rbrakk>\n    \\<Longrightarrow> wqo_on P A", "using almost_full_on_subset [of A B P]\n    and transp_on_subset [of A B P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<subseteq> B; almost_full_on P B\\<rbrakk>\n  \\<Longrightarrow> almost_full_on P A\n  \\<lbrakk>A \\<subseteq> B; transp_on P B\\<rbrakk>\n  \\<Longrightarrow> transp_on P A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; wqo_on P B\\<rbrakk>\n    \\<Longrightarrow> wqo_on P A", "unfolding wqo_on_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<subseteq> B; almost_full_on P B\\<rbrakk>\n  \\<Longrightarrow> almost_full_on P A\n  \\<lbrakk>A \\<subseteq> B; transp_on P B\\<rbrakk>\n  \\<Longrightarrow> transp_on P A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B;\n     transp_on P B \\<and> almost_full_on P B\\<rbrakk>\n    \\<Longrightarrow> transp_on P A \\<and> almost_full_on P A", "by blast"], ["", "subsection \\<open>Equivalent Definitions\\<close>"], ["", "text \\<open>\n  Given a quasi-order @{term P}, the following statements are equivalent:\n  \\begin{enumerate}\n  \\item @{term P} is a almost-full.\n  \\item @{term P} does neither allow decreasing chains nor antichains.\n  \\item Every quasi-order extending @{term P} is well-founded.\n  \\end{enumerate}\n\\<close>"], ["", "lemma wqo_af_conv:\n  assumes \"qo_on P A\"\n  shows \"wqo_on P A \\<longleftrightarrow> almost_full_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A = almost_full_on P A", "using assms"], ["proof (prove)\nusing this:\n  qo_on P A\n\ngoal (1 subgoal):\n 1. wqo_on P A = almost_full_on P A", "by (metis qo_on_def wqo_on_def)"], ["", "lemma wqo_wf_and_no_antichain_conv:\n  assumes \"qo_on P A\"\n  shows \"wqo_on P A \\<longleftrightarrow> wfp_on (strict P) A \\<and> \\<not> (\\<exists>f. antichain_on P f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A =\n    (wfp_on (strict P) A \\<and> (\\<nexists>f. antichain_on P f A))", "unfolding wqo_af_conv [OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_full_on P A =\n    (wfp_on (strict P) A \\<and> (\\<nexists>f. antichain_on P f A))", "using af_trans_imp_wf [OF _ assms [THEN qo_on_imp_transp_on]]\n    and almost_full_on_imp_no_antichain_on [of P A]\n    and wf_and_no_antichain_imp_qo_extension_wf [of P A]\n    and every_qo_extension_wf_imp_af [OF _ assms]"], ["proof (prove)\nusing this:\n  almost_full_on P A \\<Longrightarrow> wfp_on (strict P) A\n  almost_full_on P A \\<Longrightarrow> \\<not> antichain_on P ?f A\n  \\<lbrakk>wfp_on (strict P) A; \\<nexists>f. antichain_on P f A;\n   \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> ?Q x y;\n   qo_on ?Q A\\<rbrakk>\n  \\<Longrightarrow> wfp_on (strict ?Q) A\n  \\<forall>Q.\n     (\\<forall>x\\<in>A.\n         \\<forall>y\\<in>A. P x y \\<longrightarrow> Q x y) \\<and>\n     qo_on Q A \\<longrightarrow>\n     wfp_on (strict Q) A \\<Longrightarrow>\n  almost_full_on P A\n\ngoal (1 subgoal):\n 1. almost_full_on P A =\n    (wfp_on (strict P) A \\<and> (\\<nexists>f. antichain_on P f A))", "by blast"], ["", "lemma wqo_extensions_wf_conv:\n  assumes \"qo_on P A\"\n  shows \"wqo_on P A \\<longleftrightarrow> (\\<forall>Q. (\\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> Q x y) \\<and> qo_on Q A \\<longrightarrow> wfp_on (strict Q) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A =\n    (\\<forall>Q.\n        (\\<forall>x\\<in>A.\n            \\<forall>y\\<in>A. P x y \\<longrightarrow> Q x y) \\<and>\n        qo_on Q A \\<longrightarrow>\n        wfp_on (strict Q) A)", "unfolding wqo_af_conv [OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_full_on P A =\n    (\\<forall>Q.\n        (\\<forall>x\\<in>A.\n            \\<forall>y\\<in>A. P x y \\<longrightarrow> Q x y) \\<and>\n        qo_on Q A \\<longrightarrow>\n        wfp_on (strict Q) A)", "using af_trans_imp_wf [OF _ assms [THEN qo_on_imp_transp_on]]\n    and almost_full_on_imp_no_antichain_on [of P A]\n    and wf_and_no_antichain_imp_qo_extension_wf [of P A]\n    and every_qo_extension_wf_imp_af [OF _ assms]"], ["proof (prove)\nusing this:\n  almost_full_on P A \\<Longrightarrow> wfp_on (strict P) A\n  almost_full_on P A \\<Longrightarrow> \\<not> antichain_on P ?f A\n  \\<lbrakk>wfp_on (strict P) A; \\<nexists>f. antichain_on P f A;\n   \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> ?Q x y;\n   qo_on ?Q A\\<rbrakk>\n  \\<Longrightarrow> wfp_on (strict ?Q) A\n  \\<forall>Q.\n     (\\<forall>x\\<in>A.\n         \\<forall>y\\<in>A. P x y \\<longrightarrow> Q x y) \\<and>\n     qo_on Q A \\<longrightarrow>\n     wfp_on (strict Q) A \\<Longrightarrow>\n  almost_full_on P A\n\ngoal (1 subgoal):\n 1. almost_full_on P A =\n    (\\<forall>Q.\n        (\\<forall>x\\<in>A.\n            \\<forall>y\\<in>A. P x y \\<longrightarrow> Q x y) \\<and>\n        qo_on Q A \\<longrightarrow>\n        wfp_on (strict Q) A)", "by blast"], ["", "lemma wqo_on_imp_wfp_on:\n  \"wqo_on P A \\<Longrightarrow> wfp_on (strict P) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A \\<Longrightarrow> wfp_on (strict P) A", "by (metis (no_types) wqo_on_imp_qo_on wqo_wf_and_no_antichain_conv)"], ["", "text \\<open>\n  The homomorphic image of a wqo set is wqo.\n\\<close>"], ["", "lemma wqo_on_hom:\n  assumes \"transp_on Q (h ` A)\"\n    and \"\\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> Q (h x) (h y)\"\n    and \"wqo_on P A\"\n  shows \"wqo_on Q (h ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on Q (h ` A)", "using assms and almost_full_on_hom [of A P Q h]"], ["proof (prove)\nusing this:\n  transp_on Q (h ` A)\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> Q (h x) (h y)\n  wqo_on P A\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in> A; y \\<in> A; P x y\\<rbrakk>\n              \\<Longrightarrow> Q (h x) (h y);\n   almost_full_on P A\\<rbrakk>\n  \\<Longrightarrow> almost_full_on Q (h ` A)\n\ngoal (1 subgoal):\n 1. wqo_on Q (h ` A)", "unfolding wqo_on_def"], ["proof (prove)\nusing this:\n  transp_on Q (h ` A)\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longrightarrow> Q (h x) (h y)\n  transp_on P A \\<and> almost_full_on P A\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in> A; y \\<in> A; P x y\\<rbrakk>\n              \\<Longrightarrow> Q (h x) (h y);\n   almost_full_on P A\\<rbrakk>\n  \\<Longrightarrow> almost_full_on Q (h ` A)\n\ngoal (1 subgoal):\n 1. transp_on Q (h ` A) \\<and> almost_full_on Q (h ` A)", "by blast"], ["", "text \\<open>\n  The monomorphic preimage of a wqo set is wqo.\n\\<close>"], ["", "lemma wqo_on_mon:\n  assumes *: \"\\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y \\<longleftrightarrow> Q (h x) (h y)\"\n    and bij: \"bij_betw h A B\"\n    and wqo: \"wqo_on Q B\"\n  shows \"wqo_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wqo_on P A", "have \"transp_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp_on P A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A; P x y; P y z\\<rbrakk>\n       \\<Longrightarrow> P x z", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A; P x y; P y z\\<rbrakk>\n       \\<Longrightarrow> P x z", "assume [intro!]: \"x \\<in> A\" \"y \\<in> A\" \"z \\<in> A\"\n      and \"P x y\" and \"P y z\""], ["proof (state)\nthis:\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n  P x y\n  P y z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A; P x y; P y z\\<rbrakk>\n       \\<Longrightarrow> P x z", "with *"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y = Q (h x) (h y)\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n  P x y\n  P y z", "have \"Q (h x) (h y)\" and \"Q (h y) (h z)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y = Q (h x) (h y)\n  x \\<in> A\n  y \\<in> A\n  z \\<in> A\n  P x y\n  P y z\n\ngoal (1 subgoal):\n 1. Q (h x) (h y) &&& Q (h y) (h z)", "by blast+"], ["proof (state)\nthis:\n  Q (h x) (h y)\n  Q (h y) (h z)\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A; P x y; P y z\\<rbrakk>\n       \\<Longrightarrow> P x z", "with wqo_on_imp_transp_on [OF wqo]"], ["proof (chain)\npicking this:\n  transp_on Q B\n  Q (h x) (h y)\n  Q (h y) (h z)", "have \"Q (h x) (h z)\""], ["proof (prove)\nusing this:\n  transp_on Q B\n  Q (h x) (h y)\n  Q (h y) (h z)\n\ngoal (1 subgoal):\n 1. Q (h x) (h z)", "using bij"], ["proof (prove)\nusing this:\n  transp_on Q B\n  Q (h x) (h y)\n  Q (h y) (h z)\n  bij_betw h A B\n\ngoal (1 subgoal):\n 1. Q (h x) (h z)", "by (auto simp: bij_betw_def transp_on_def)"], ["proof (state)\nthis:\n  Q (h x) (h z)\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A; y \\<in> A; z \\<in> A; P x y; P y z\\<rbrakk>\n       \\<Longrightarrow> P x z", "with *"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y = Q (h x) (h y)\n  Q (h x) (h z)", "show \"P x z\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y = Q (h x) (h y)\n  Q (h x) (h z)\n\ngoal (1 subgoal):\n 1. P x z", "by blast"], ["proof (state)\nthis:\n  P x z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  transp_on P A\n\ngoal (1 subgoal):\n 1. wqo_on P A", "with assms and almost_full_on_mon [of A P Q h]"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y = Q (h x) (h y)\n  bij_betw h A B\n  wqo_on Q B\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n              \\<Longrightarrow> P x y = Q (h x) (h y);\n   bij_betw h A ?B; almost_full_on Q ?B\\<rbrakk>\n  \\<Longrightarrow> almost_full_on P A\n  transp_on P A", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y = Q (h x) (h y)\n  bij_betw h A B\n  wqo_on Q B\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n              \\<Longrightarrow> P x y = Q (h x) (h y);\n   bij_betw h A ?B; almost_full_on Q ?B\\<rbrakk>\n  \\<Longrightarrow> almost_full_on P A\n  transp_on P A\n\ngoal (1 subgoal):\n 1. wqo_on P A", "unfolding wqo_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A. \\<forall>y\\<in>A. P x y = Q (h x) (h y)\n  bij_betw h A B\n  transp_on Q B \\<and> almost_full_on Q B\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in> A; y \\<in> A\\<rbrakk>\n              \\<Longrightarrow> P x y = Q (h x) (h y);\n   bij_betw h A ?B; almost_full_on Q ?B\\<rbrakk>\n  \\<Longrightarrow> almost_full_on P A\n  transp_on P A\n\ngoal (1 subgoal):\n 1. transp_on P A \\<and> almost_full_on P A", "by blast"], ["proof (state)\nthis:\n  wqo_on P A\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>A Type Class for Well-Quasi-Orders\\<close>"], ["", "text \\<open>\n  In a well-quasi-order (wqo) every infinite sequence is good.\n\\<close>"], ["", "class wqo = preorder +\n  assumes good: \"good (\\<le>) f\""], ["", "lemma wqo_on_class [simp, intro]:\n  \"wqo_on (\\<le>) (UNIV :: ('a :: wqo) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (\\<le>) UNIV", "using good"], ["proof (prove)\nusing this:\n  good (\\<le>) ?f\n\ngoal (1 subgoal):\n 1. wqo_on (\\<le>) UNIV", "by (auto simp: wqo_on_def transp_on_def almost_full_on_def dest: order_trans)"], ["", "lemma wqo_on_UNIV_class_wqo [intro!]:\n  \"wqo_on P UNIV \\<Longrightarrow> class.wqo P (strict P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P UNIV \\<Longrightarrow> class.wqo P (strict P)", "by (unfold_locales) (auto simp: wqo_on_def almost_full_on_def, unfold transp_on_def, blast)"], ["", "text \\<open>\n  The following lemma converts between @{const wqo_on} (for the special case that the domain is the\n  universe of a type) and the class predicate @{const class.wqo}.\n\\<close>"], ["", "lemma wqo_on_UNIV_conv:\n  \"wqo_on P UNIV \\<longleftrightarrow> class.wqo P (strict P)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P UNIV = class.wqo P (strict P)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. wqo_on P UNIV \\<Longrightarrow> class.wqo P (strict P)\n 2. class.wqo P (strict P) \\<Longrightarrow> wqo_on P UNIV", "assume \"?lhs\""], ["proof (state)\nthis:\n  wqo_on P UNIV\n\ngoal (2 subgoals):\n 1. wqo_on P UNIV \\<Longrightarrow> class.wqo P (strict P)\n 2. class.wqo P (strict P) \\<Longrightarrow> wqo_on P UNIV", "then"], ["proof (chain)\npicking this:\n  wqo_on P UNIV", "show \"?rhs\""], ["proof (prove)\nusing this:\n  wqo_on P UNIV\n\ngoal (1 subgoal):\n 1. class.wqo P (strict P)", "by auto"], ["proof (state)\nthis:\n  class.wqo P (strict P)\n\ngoal (1 subgoal):\n 1. class.wqo P (strict P) \\<Longrightarrow> wqo_on P UNIV", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. class.wqo P (strict P) \\<Longrightarrow> wqo_on P UNIV", "assume \"?rhs\""], ["proof (state)\nthis:\n  class.wqo P (strict P)\n\ngoal (1 subgoal):\n 1. class.wqo P (strict P) \\<Longrightarrow> wqo_on P UNIV", "then"], ["proof (chain)\npicking this:\n  class.wqo P (strict P)", "show \"?lhs\""], ["proof (prove)\nusing this:\n  class.wqo P (strict P)\n\ngoal (1 subgoal):\n 1. wqo_on P UNIV", "unfolding class.wqo_def class.preorder_def class.wqo_axioms_def"], ["proof (prove)\nusing this:\n  ((\\<forall>x y. strict P x y = strict P x y) \\<and>\n   (\\<forall>x. P x x) \\<and>\n   (\\<forall>x y z.\n       P x y \\<longrightarrow> P y z \\<longrightarrow> P x z)) \\<and>\n  (\\<forall>f. good P f)\n\ngoal (1 subgoal):\n 1. wqo_on P UNIV", "by (auto simp: wqo_on_def almost_full_on_def transp_on_def)"], ["proof (state)\nthis:\n  wqo_on P UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The strict part of a wqo is well-founded.\n\\<close>"], ["", "lemma (in wqo) \"wfP (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (<)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (<)", "have \"class.wqo (\\<le>) (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.wqo (\\<le>) (<)", ".."], ["proof (state)\nthis:\n  class.wqo (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. wfP (<)", "hence \"wqo_on (\\<le>) UNIV\""], ["proof (prove)\nusing this:\n  class.wqo (\\<le>) (<)\n\ngoal (1 subgoal):\n 1. wqo_on (\\<le>) UNIV", "unfolding less_le_not_le [abs_def] wqo_on_UNIV_conv [symmetric]"], ["proof (prove)\nusing this:\n  wqo_on (\\<le>) UNIV\n\ngoal (1 subgoal):\n 1. wqo_on (\\<le>) UNIV", "."], ["proof (state)\nthis:\n  wqo_on (\\<le>) UNIV\n\ngoal (1 subgoal):\n 1. wfP (<)", "from wqo_on_imp_wfp_on [OF this]"], ["proof (chain)\npicking this:\n  wfp_on (strict (\\<le>)) UNIV", "show ?thesis"], ["proof (prove)\nusing this:\n  wfp_on (strict (\\<le>)) UNIV\n\ngoal (1 subgoal):\n 1. wfP (<)", "unfolding less_le_not_le [abs_def] wfp_on_UNIV"], ["proof (prove)\nusing this:\n  wfP (strict (\\<le>))\n\ngoal (1 subgoal):\n 1. wfP (strict (\\<le>))", "."], ["proof (state)\nthis:\n  wfP (<)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wqo_on_with_bot:\n  assumes \"wqo_on P A\"\n  shows \"wqo_on (option_le P) A\\<^sub>\\<bottom>\" (is \"wqo_on ?P ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "from assms"], ["proof (chain)\npicking this:\n  wqo_on P A", "have trans [unfolded transp_on_def]: \"transp_on P A\""], ["proof (prove)\nusing this:\n  wqo_on P A\n\ngoal (1 subgoal):\n 1. transp_on P A", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>z\\<in>A. P x y \\<and> P y z \\<longrightarrow> P x z\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "have \"transp_on ?P ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp_on (option_le P) A\\<^sub>\\<bottom>", "by (auto simp: transp_on_def elim!: with_bot_cases, insert trans) blast"], ["proof (state)\nthis:\n  transp_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "}"], ["proof (state)\nthis:\n  transp_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "moreover"], ["proof (state)\nthis:\n  transp_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "{"], ["proof (state)\nthis:\n  transp_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "from assms and almost_full_on_with_bot"], ["proof (chain)\npicking this:\n  wqo_on P A\n  almost_full_on ?P ?A \\<Longrightarrow>\n  almost_full_on (option_le ?P) ?A\\<^sub>\\<bottom>", "have \"almost_full_on ?P ?A\""], ["proof (prove)\nusing this:\n  wqo_on P A\n  almost_full_on ?P ?A \\<Longrightarrow>\n  almost_full_on (option_le ?P) ?A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. almost_full_on (option_le P) A\\<^sub>\\<bottom>", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  almost_full_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "}"], ["proof (state)\nthis:\n  almost_full_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "ultimately"], ["proof (chain)\npicking this:\n  transp_on (option_le P) A\\<^sub>\\<bottom>\n  almost_full_on (option_le P) A\\<^sub>\\<bottom>", "show ?thesis"], ["proof (prove)\nusing this:\n  transp_on (option_le P) A\\<^sub>\\<bottom>\n  almost_full_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on (option_le P) A\\<^sub>\\<bottom>", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  wqo_on (option_le P) A\\<^sub>\\<bottom>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wqo_on_option_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on (option_le P) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P UNIV \\<Longrightarrow> wqo_on (option_le P) UNIV", "using wqo_on_with_bot [of P UNIV]"], ["proof (prove)\nusing this:\n  wqo_on P UNIV \\<Longrightarrow> wqo_on (option_le P) UNIV\\<^sub>\\<bottom>\n\ngoal (1 subgoal):\n 1. wqo_on P UNIV \\<Longrightarrow> wqo_on (option_le P) UNIV", "by simp"], ["", "text \\<open>\n  When two sets are wqo, then their disjoint sum is wqo.\n\\<close>"], ["", "lemma wqo_on_Plus:\n  assumes \"wqo_on P A\" and \"wqo_on Q B\"\n  shows \"wqo_on (sum_le P Q) (A <+> B)\" (is \"wqo_on ?P ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "from assms"], ["proof (chain)\npicking this:\n  wqo_on P A\n  wqo_on Q B", "have trans [unfolded transp_on_def]: \"transp_on P A\" \"transp_on Q B\""], ["proof (prove)\nusing this:\n  wqo_on P A\n  wqo_on Q B\n\ngoal (1 subgoal):\n 1. transp_on P A &&& transp_on Q B", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>z\\<in>A. P x y \\<and> P y z \\<longrightarrow> P x z\n  \\<forall>x\\<in>B.\n     \\<forall>y\\<in>B.\n        \\<forall>z\\<in>B. Q x y \\<and> Q y z \\<longrightarrow> Q x z\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "have \"transp_on ?P ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp_on (sum_le P Q) (A <+> B)", "unfolding transp_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A <+> B.\n       \\<forall>y\\<in>A <+> B.\n          \\<forall>z\\<in>A <+> B.\n             sum_le P Q x y \\<and> sum_le P Q y z \\<longrightarrow>\n             sum_le P Q x z", "by (auto, insert trans) (blast+)"], ["proof (state)\nthis:\n  transp_on (sum_le P Q) (A <+> B)\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "}"], ["proof (state)\nthis:\n  transp_on (sum_le P Q) (A <+> B)\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "moreover"], ["proof (state)\nthis:\n  transp_on (sum_le P Q) (A <+> B)\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "{"], ["proof (state)\nthis:\n  transp_on (sum_le P Q) (A <+> B)\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "from assms and almost_full_on_Plus"], ["proof (chain)\npicking this:\n  wqo_on P A\n  wqo_on Q B\n  \\<lbrakk>almost_full_on ?P ?A; almost_full_on ?Q ?B\\<rbrakk>\n  \\<Longrightarrow> almost_full_on (sum_le ?P ?Q) (?A <+> ?B)", "have \"almost_full_on ?P ?A\""], ["proof (prove)\nusing this:\n  wqo_on P A\n  wqo_on Q B\n  \\<lbrakk>almost_full_on ?P ?A; almost_full_on ?Q ?B\\<rbrakk>\n  \\<Longrightarrow> almost_full_on (sum_le ?P ?Q) (?A <+> ?B)\n\ngoal (1 subgoal):\n 1. almost_full_on (sum_le P Q) (A <+> B)", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  almost_full_on (sum_le P Q) (A <+> B)\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "}"], ["proof (state)\nthis:\n  almost_full_on (sum_le P Q) (A <+> B)\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "ultimately"], ["proof (chain)\npicking this:\n  transp_on (sum_le P Q) (A <+> B)\n  almost_full_on (sum_le P Q) (A <+> B)", "show ?thesis"], ["proof (prove)\nusing this:\n  transp_on (sum_le P Q) (A <+> B)\n  almost_full_on (sum_le P Q) (A <+> B)\n\ngoal (1 subgoal):\n 1. wqo_on (sum_le P Q) (A <+> B)", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  wqo_on (sum_le P Q) (A <+> B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wqo_on_sum_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on Q UNIV \\<Longrightarrow> wqo_on (sum_le P Q) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wqo_on P UNIV; wqo_on Q UNIV\\<rbrakk>\n    \\<Longrightarrow> wqo_on (sum_le P Q) UNIV", "using wqo_on_Plus [of P UNIV Q UNIV]"], ["proof (prove)\nusing this:\n  \\<lbrakk>wqo_on P UNIV; wqo_on Q UNIV\\<rbrakk>\n  \\<Longrightarrow> wqo_on (sum_le P Q) (UNIV <+> UNIV)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wqo_on P UNIV; wqo_on Q UNIV\\<rbrakk>\n    \\<Longrightarrow> wqo_on (sum_le P Q) UNIV", "by simp"], ["", "subsection \\<open>Dickson's Lemma\\<close>"], ["", "lemma wqo_on_Sigma:\n  fixes A1 :: \"'a set\" and A2 :: \"'b set\"\n  assumes \"wqo_on P1 A1\" and \"wqo_on P2 A2\"\n  shows \"wqo_on (prod_le P1 P2) (A1 \\<times> A2)\" (is \"wqo_on ?P ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "from assms"], ["proof (chain)\npicking this:\n  wqo_on P1 A1\n  wqo_on P2 A2", "have \"transp_on P1 A1\" and \"transp_on P2 A2\""], ["proof (prove)\nusing this:\n  wqo_on P1 A1\n  wqo_on P2 A2\n\ngoal (1 subgoal):\n 1. transp_on P1 A1 &&& transp_on P2 A2", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  transp_on P1 A1\n  transp_on P2 A2\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "hence \"transp_on ?P ?A\""], ["proof (prove)\nusing this:\n  transp_on P1 A1\n  transp_on P2 A2\n\ngoal (1 subgoal):\n 1. transp_on (prod_le P1 P2) (A1 \\<times> A2)", "unfolding transp_on_def prod_le_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A1.\n     \\<forall>y\\<in>A1.\n        \\<forall>z\\<in>A1. P1 x y \\<and> P1 y z \\<longrightarrow> P1 x z\n  \\<forall>x\\<in>A2.\n     \\<forall>y\\<in>A2.\n        \\<forall>z\\<in>A2. P2 x y \\<and> P2 y z \\<longrightarrow> P2 x z\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A1 \\<times> A2.\n       \\<forall>y\\<in>A1 \\<times> A2.\n          \\<forall>z\\<in>A1 \\<times> A2.\n             (case x of\n              (p1, p2) \\<Rightarrow>\n                \\<lambda>(q1, q2). P1 p1 q1 \\<and> P2 p2 q2)\n              y \\<and>\n             (case y of\n              (p1, p2) \\<Rightarrow>\n                \\<lambda>(q1, q2). P1 p1 q1 \\<and> P2 p2 q2)\n              z \\<longrightarrow>\n             (case x of\n              (p1, p2) \\<Rightarrow>\n                \\<lambda>(q1, q2). P1 p1 q1 \\<and> P2 p2 q2)\n              z", "by blast"], ["proof (state)\nthis:\n  transp_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "}"], ["proof (state)\nthis:\n  transp_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "moreover"], ["proof (state)\nthis:\n  transp_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "{"], ["proof (state)\nthis:\n  transp_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "from assms and almost_full_on_Sigma [of P1 A1 P2 A2]"], ["proof (chain)\npicking this:\n  wqo_on P1 A1\n  wqo_on P2 A2\n  \\<lbrakk>almost_full_on P1 A1; almost_full_on P2 A2\\<rbrakk>\n  \\<Longrightarrow> almost_full_on (prod_le P1 P2) (A1 \\<times> A2)", "have \"almost_full_on ?P ?A\""], ["proof (prove)\nusing this:\n  wqo_on P1 A1\n  wqo_on P2 A2\n  \\<lbrakk>almost_full_on P1 A1; almost_full_on P2 A2\\<rbrakk>\n  \\<Longrightarrow> almost_full_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. almost_full_on (prod_le P1 P2) (A1 \\<times> A2)", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  almost_full_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "}"], ["proof (state)\nthis:\n  almost_full_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "ultimately"], ["proof (chain)\npicking this:\n  transp_on (prod_le P1 P2) (A1 \\<times> A2)\n  almost_full_on (prod_le P1 P2) (A1 \\<times> A2)", "show ?thesis"], ["proof (prove)\nusing this:\n  transp_on (prod_le P1 P2) (A1 \\<times> A2)\n  almost_full_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal (1 subgoal):\n 1. wqo_on (prod_le P1 P2) (A1 \\<times> A2)", "by (auto simp: wqo_on_def)"], ["proof (state)\nthis:\n  wqo_on (prod_le P1 P2) (A1 \\<times> A2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas dickson = wqo_on_Sigma"], ["", "lemma wqo_on_prod_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on Q UNIV \\<Longrightarrow> wqo_on (prod_le P Q) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wqo_on P UNIV; wqo_on Q UNIV\\<rbrakk>\n    \\<Longrightarrow> wqo_on (prod_le P Q) UNIV", "using wqo_on_Sigma [of P UNIV Q UNIV]"], ["proof (prove)\nusing this:\n  \\<lbrakk>wqo_on P UNIV; wqo_on Q UNIV\\<rbrakk>\n  \\<Longrightarrow> wqo_on (prod_le P Q) (UNIV \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wqo_on P UNIV; wqo_on Q UNIV\\<rbrakk>\n    \\<Longrightarrow> wqo_on (prod_le P Q) UNIV", "by simp"], ["", "subsection \\<open>Higman's Lemma\\<close>"], ["", "lemma transp_on_list_emb:\n  assumes \"transp_on P A\"\n  shows \"transp_on (list_emb P) (lists A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp_on (list_emb P) (lists A)", "using assms and list_emb_trans [of _ _ _ P]"], ["proof (prove)\nusing this:\n  transp_on P A\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<in> set ?xs; y \\<in> set ?ys; z \\<in> set ?zs;\n               P x y; P y z\\<rbrakk>\n              \\<Longrightarrow> P x z;\n   list_emb P ?xs ?ys; list_emb P ?ys ?zs\\<rbrakk>\n  \\<Longrightarrow> list_emb P ?xs ?zs\n\ngoal (1 subgoal):\n 1. transp_on (list_emb P) (lists A)", "unfolding transp_on_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>z\\<in>A. P x y \\<and> P y z \\<longrightarrow> P x z\n  \\<lbrakk>\\<And>x y z.\n              \\<lbrakk>x \\<in> set ?xs; y \\<in> set ?ys; z \\<in> set ?zs;\n               P x y; P y z\\<rbrakk>\n              \\<Longrightarrow> P x z;\n   list_emb P ?xs ?ys; list_emb P ?ys ?zs\\<rbrakk>\n  \\<Longrightarrow> list_emb P ?xs ?zs\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>lists A.\n       \\<forall>y\\<in>lists A.\n          \\<forall>z\\<in>lists A.\n             list_emb P x y \\<and> list_emb P y z \\<longrightarrow>\n             list_emb P x z", "by blast"], ["", "lemma wqo_on_lists:\n  assumes \"wqo_on P A\" shows \"wqo_on (list_emb P) (lists A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (list_emb P) (lists A)", "using assms and almost_full_on_lists\n    and transp_on_list_emb"], ["proof (prove)\nusing this:\n  wqo_on P A\n  almost_full_on ?P ?A \\<Longrightarrow>\n  almost_full_on (list_emb ?P) (lists ?A)\n  transp_on ?P ?A \\<Longrightarrow> transp_on (list_emb ?P) (lists ?A)\n\ngoal (1 subgoal):\n 1. wqo_on (list_emb P) (lists A)", "by (auto simp: wqo_on_def)"], ["", "lemmas higman = wqo_on_lists"], ["", "lemma wqo_on_list_UNIV [intro]:\n  \"wqo_on P UNIV \\<Longrightarrow> wqo_on (list_emb P) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P UNIV \\<Longrightarrow> wqo_on (list_emb P) UNIV", "using wqo_on_lists [of P UNIV]"], ["proof (prove)\nusing this:\n  wqo_on P UNIV \\<Longrightarrow> wqo_on (list_emb P) (lists UNIV)\n\ngoal (1 subgoal):\n 1. wqo_on P UNIV \\<Longrightarrow> wqo_on (list_emb P) UNIV", "by simp"], ["", "text \\<open>\n  Every reflexive and transitive relation on a finite set is a wqo.\n\\<close>"], ["", "lemma finite_wqo_on:\n  assumes \"finite A\" and refl: \"reflp_on P A\" and \"transp_on P A\"\n  shows \"wqo_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P A", "using assms and finite_almost_full_on"], ["proof (prove)\nusing this:\n  finite A\n  reflp_on P A\n  transp_on P A\n  \\<lbrakk>finite ?A; reflp_on ?P ?A\\<rbrakk>\n  \\<Longrightarrow> almost_full_on ?P ?A\n\ngoal (1 subgoal):\n 1. wqo_on P A", "by (auto simp: wqo_on_def)"], ["", "lemma finite_eq_wqo_on:\n  assumes \"finite A\"\n  shows \"wqo_on (=) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (=) A", "using finite_wqo_on [OF assms, of \"(=)\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>reflp_on (=) A; transp_on (=) A\\<rbrakk>\n  \\<Longrightarrow> wqo_on (=) A\n\ngoal (1 subgoal):\n 1. wqo_on (=) A", "by (auto simp: reflp_on_def transp_on_def)"], ["", "lemma wqo_on_lists_over_finite_sets:\n  \"wqo_on (list_emb (=)) (UNIV::('a::finite) list set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on subseq UNIV", "using wqo_on_lists [OF finite_eq_wqo_on [OF finite [of \"UNIV::('a::finite) set\"]]]"], ["proof (prove)\nusing this:\n  wqo_on subseq (lists UNIV)\n\ngoal (1 subgoal):\n 1. wqo_on subseq UNIV", "by simp"], ["", "lemma wqo_on_map:\n  fixes P and Q and h\n  defines \"P' \\<equiv> \\<lambda>x y. P x y \\<and> Q (h x) (h y)\"\n  assumes \"wqo_on P A\"\n    and \"wqo_on Q B\"\n    and subset: \"h ` A \\<subseteq> B\"\n  shows \"wqo_on P' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on P' A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. transp_on P' A\n 2. almost_full_on P' A", "let ?Q = \"\\<lambda>x y. Q (h x) (h y)\""], ["proof (state)\ngoal (2 subgoals):\n 1. transp_on P' A\n 2. almost_full_on P' A", "from \\<open>wqo_on P A\\<close>"], ["proof (chain)\npicking this:\n  wqo_on P A", "have \"transp_on P A\""], ["proof (prove)\nusing this:\n  wqo_on P A\n\ngoal (1 subgoal):\n 1. transp_on P A", "by (rule wqo_on_imp_transp_on)"], ["proof (state)\nthis:\n  transp_on P A\n\ngoal (2 subgoals):\n 1. transp_on P' A\n 2. almost_full_on P' A", "then"], ["proof (chain)\npicking this:\n  transp_on P A", "show \"transp_on P' A\""], ["proof (prove)\nusing this:\n  transp_on P A\n\ngoal (1 subgoal):\n 1. transp_on P' A", "using \\<open>wqo_on Q B\\<close> and subset"], ["proof (prove)\nusing this:\n  transp_on P A\n  wqo_on Q B\n  h ` A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. transp_on P' A", "unfolding wqo_on_def transp_on_def P'_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>z\\<in>A. P x y \\<and> P y z \\<longrightarrow> P x z\n  (\\<forall>x\\<in>B.\n      \\<forall>y\\<in>B.\n         \\<forall>z\\<in>B.\n            Q x y \\<and> Q y z \\<longrightarrow> Q x z) \\<and>\n  almost_full_on Q B\n  h ` A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A.\n       \\<forall>y\\<in>A.\n          \\<forall>z\\<in>A.\n             (P x y \\<and> Q (h x) (h y)) \\<and>\n             P y z \\<and> Q (h y) (h z) \\<longrightarrow>\n             P x z \\<and> Q (h x) (h z)", "by blast"], ["proof (state)\nthis:\n  transp_on P' A\n\ngoal (1 subgoal):\n 1. almost_full_on P' A", "from \\<open>wqo_on P A\\<close>"], ["proof (chain)\npicking this:\n  wqo_on P A", "have \"almost_full_on P A\""], ["proof (prove)\nusing this:\n  wqo_on P A\n\ngoal (1 subgoal):\n 1. almost_full_on P A", "by (rule wqo_on_imp_almost_full_on)"], ["proof (state)\nthis:\n  almost_full_on P A\n\ngoal (1 subgoal):\n 1. almost_full_on P' A", "from \\<open>wqo_on Q B\\<close>"], ["proof (chain)\npicking this:\n  wqo_on Q B", "have \"almost_full_on Q B\""], ["proof (prove)\nusing this:\n  wqo_on Q B\n\ngoal (1 subgoal):\n 1. almost_full_on Q B", "by (rule wqo_on_imp_almost_full_on)"], ["proof (state)\nthis:\n  almost_full_on Q B\n\ngoal (1 subgoal):\n 1. almost_full_on P' A", "show \"almost_full_on P' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_full_on P' A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "assume *: \"\\<forall>i::nat. f i \\<in> A\""], ["proof (state)\nthis:\n  \\<forall>i. f i \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "from almost_full_on_imp_homogeneous_subseq [OF \\<open>almost_full_on P A\\<close> this]"], ["proof (chain)\npicking this:\n  \\<exists>\\<phi>.\n     \\<forall>i j.\n        i < j \\<longrightarrow>\n        \\<phi> i < \\<phi> j \\<and> P (f (\\<phi> i)) (f (\\<phi> j))", "obtain g :: \"nat \\<Rightarrow> nat\"\n      where g: \"\\<And>i j. i < j \\<Longrightarrow> g i < g j\"\n      and **: \"\\<forall>i. f (g i) \\<in> A \\<and> P (f (g i)) (f (g (Suc i)))\""], ["proof (prove)\nusing this:\n  \\<exists>\\<phi>.\n     \\<forall>i j.\n        i < j \\<longrightarrow>\n        \\<phi> i < \\<phi> j \\<and> P (f (\\<phi> i)) (f (\\<phi> j))\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>i j. i < j \\<Longrightarrow> g i < g j;\n         \\<forall>i.\n            f (g i) \\<in> A \\<and> P (f (g i)) (f (g (Suc i)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  \\<exists>\\<phi>.\n     \\<forall>i j.\n        i < j \\<longrightarrow>\n        \\<phi> i < \\<phi> j \\<and> P (f (\\<phi> i)) (f (\\<phi> j))\n  \\<forall>i. f i \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>i j. i < j \\<Longrightarrow> g i < g j;\n         \\<forall>i.\n            f (g i) \\<in> A \\<and> P (f (g i)) (f (g (Suc i)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ?i < ?j \\<Longrightarrow> g ?i < g ?j\n  \\<forall>i. f (g i) \\<in> A \\<and> P (f (g i)) (f (g (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "from chain_transp_on_less [OF ** \\<open>transp_on P A\\<close>]"], ["proof (chain)\npicking this:\n  ?i < ?j \\<Longrightarrow> P (f (g ?i)) (f (g ?j))", "have **: \"\\<And>i j. i < j \\<Longrightarrow> P (f (g i)) (f (g j))\""], ["proof (prove)\nusing this:\n  ?i < ?j \\<Longrightarrow> P (f (g ?i)) (f (g ?j))\n\ngoal (1 subgoal):\n 1. \\<And>i j. i < j \\<Longrightarrow> P (f (g i)) (f (g j))", "."], ["proof (state)\nthis:\n  ?i < ?j \\<Longrightarrow> P (f (g ?i)) (f (g ?j))\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "let ?g = \"\\<lambda>i. h (f (g i))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "from * and subset"], ["proof (chain)\npicking this:\n  \\<forall>i. f i \\<in> A\n  h ` A \\<subseteq> B", "have B: \"\\<And>i. ?g i \\<in> B\""], ["proof (prove)\nusing this:\n  \\<forall>i. f i \\<in> A\n  h ` A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. \\<And>i. h (f (g i)) \\<in> B", "by auto"], ["proof (state)\nthis:\n  h (f (g ?i)) \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "with \\<open>almost_full_on Q B\\<close> [unfolded almost_full_on_def good_def, THEN bspec, of ?g]"], ["proof (chain)\npicking this:\n  (\\<lambda>i. h (f (g i))) \\<in> SEQ B \\<Longrightarrow>\n  \\<exists>i j. i < j \\<and> Q (h (f (g i))) (h (f (g j)))\n  h (f (g ?i)) \\<in> B", "obtain i j :: nat\n      where \"i < j\" and \"Q (?g i) (?g j)\""], ["proof (prove)\nusing this:\n  (\\<lambda>i. h (f (g i))) \\<in> SEQ B \\<Longrightarrow>\n  \\<exists>i j. i < j \\<and> Q (h (f (g i))) (h (f (g j)))\n  h (f (g ?i)) \\<in> B\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; Q (h (f (g i))) (h (f (g j)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i < j\n  Q (h (f (g i))) (h (f (g j)))\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "with ** [OF \\<open>i < j\\<close>]"], ["proof (chain)\npicking this:\n  P (f (g i)) (f (g j))\n  i < j\n  Q (h (f (g i))) (h (f (g j)))", "have \"P' (f (g i)) (f (g j))\""], ["proof (prove)\nusing this:\n  P (f (g i)) (f (g j))\n  i < j\n  Q (h (f (g i))) (h (f (g j)))\n\ngoal (1 subgoal):\n 1. P' (f (g i)) (f (g j))", "by (auto simp: P'_def)"], ["proof (state)\nthis:\n  P' (f (g i)) (f (g j))\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<forall>i. f i \\<in> A \\<Longrightarrow> good P' f", "with g [OF \\<open>i < j\\<close>]"], ["proof (chain)\npicking this:\n  g i < g j\n  P' (f (g i)) (f (g j))", "show \"good P' f\""], ["proof (prove)\nusing this:\n  g i < g j\n  P' (f (g i)) (f (g j))\n\ngoal (1 subgoal):\n 1. good P' f", "by (auto simp: good_def)"], ["proof (state)\nthis:\n  good P' f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  almost_full_on P' A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wqo_on_UNIV_nat:\n  \"wqo_on (\\<le>) (UNIV :: nat set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wqo_on (\\<le>) UNIV", "unfolding wqo_on_def transp_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           \\<forall>z\\<in>UNIV.\n              x \\<le> y \\<and> y \\<le> z \\<longrightarrow> x \\<le> z) \\<and>\n    almost_full_on (\\<le>) UNIV", "using almost_full_on_UNIV_nat"], ["proof (prove)\nusing this:\n  almost_full_on (\\<le>) UNIV\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>UNIV.\n        \\<forall>y\\<in>UNIV.\n           \\<forall>z\\<in>UNIV.\n              x \\<le> y \\<and> y \\<le> z \\<longrightarrow> x \\<le> z) \\<and>\n    almost_full_on (\\<le>) UNIV", "by simp"], ["", "end"]]}