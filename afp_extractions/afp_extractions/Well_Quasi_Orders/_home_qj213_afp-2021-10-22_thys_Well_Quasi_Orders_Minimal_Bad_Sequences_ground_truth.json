{"file_name": "/home/qj213/afp-2021-10-22/thys/Well_Quasi_Orders/Minimal_Bad_Sequences.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Well_Quasi_Orders", "problem_names": ["lemma minimal:\n  assumes \"x \\<in> A\" and \"P x\"\n  shows \"\\<exists>y \\<in> A. size y \\<le> size x \\<and> P y \\<and> (\\<forall>z \\<in> A. size z < size y \\<longrightarrow> \\<not> P z)\"", "lemma less_not_eq [simp]:\n  \"x \\<in> A \\<Longrightarrow> size x < size y \\<Longrightarrow> x = y \\<Longrightarrow> False\"", "lemma BAD_iff [iff]:\n  \"f \\<in> BAD P \\<longleftrightarrow> (\\<forall>i. f i \\<in> A) \\<and> bad P f\"", "lemma geseq_iff:\n  \"(f, g) \\<in> geseq \\<longleftrightarrow>\n    f \\<in> SEQ A \\<and> g \\<in> SEQ A \\<and> (f = g \\<or> (\\<exists>i. size (g i) < size (f i) \\<and> (\\<forall>j < i. f j = g j)))\"", "lemma gseq_iff:\n  \"(f, g) \\<in> gseq \\<longleftrightarrow> f \\<in> SEQ A \\<and> g \\<in> SEQ A \\<and> (\\<exists>i. size (g i) < size (f i) \\<and> (\\<forall>j < i. f j = g j))\"", "lemma geseqE:\n  assumes \"(f, g) \\<in> geseq\"\n    and \"\\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A; f = g\\<rbrakk> \\<Longrightarrow> Q\"\n    and \"\\<And>i. \\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A; size (g i) < size (f i); \\<forall>j < i. f j = g j\\<rbrakk> \\<Longrightarrow> Q\"\n  shows \"Q\"", "lemma gseqE:\n  assumes \"(f, g) \\<in> gseq\"\n    and \"\\<And>i. \\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A; size (g i) < size (f i); \\<forall>j < i. f j = g j\\<rbrakk> \\<Longrightarrow> Q\"\n  shows \"Q\"", "lemma eq_upto_BAD_mem:\n  assumes \"f \\<in> eq_upto (BAD P) g i\"\n  shows \"f j \\<in> A\"", "lemma eq_upto_BAD_non_empty:\n  \"eq_upto (BAD P) lb i \\<noteq> {}\"", "lemma non_empty_ith:\n  shows \"ith (eq_upto (BAD P) lb i) i \\<subseteq> A\"\n  and \"ith (eq_upto (BAD P) lb i) i \\<noteq> {}\"", "lemmas\n  lb_minimal = min_elt_minimal [OF non_empty_ith, folded lexmin] and\n  lb_mem = min_elt_mem [OF non_empty_ith, folded lexmin]", "lemma lb_BAD:\n  \"lb \\<in> BAD P\"", "lemma lb_lower_bound:\n  \"\\<forall>g. (lb, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P\"", "lemma lower_bound_ex:\n  \"\\<exists>f \\<in> BAD P. \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P\"", "lemma gseq_conv:\n  \"(f, g) \\<in> gseq \\<longleftrightarrow> f \\<noteq> g \\<and> (f, g) \\<in> geseq\"", "lemma mbs:\n  \"\\<exists>f \\<in> BAD P. \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> good P g\""], "translations": [["", "lemma minimal:\n  assumes \"x \\<in> A\" and \"P x\"\n  shows \"\\<exists>y \\<in> A. size y \\<le> size x \\<and> P y \\<and> (\\<forall>z \\<in> A. size z < size y \\<longrightarrow> \\<not> P z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>A.\n       size y \\<le> size x \\<and>\n       P y \\<and>\n       (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> A\n  P x\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>A.\n       size y \\<le> size x \\<and>\n       P y \\<and>\n       (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)", "proof (induction x taking: size rule: measure_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>y.\n                   size y < size x \\<longrightarrow>\n                   y \\<in> A \\<longrightarrow>\n                   P y \\<longrightarrow>\n                   (\\<exists>ya\\<in>A.\n                       size ya \\<le> size y \\<and>\n                       P ya \\<and>\n                       (\\<forall>z\\<in>A.\n                           size z < size ya \\<longrightarrow> \\<not> P z));\n        x \\<in> A; P x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>A.\n                            size y \\<le> size x \\<and>\n                            P y \\<and>\n                            (\\<forall>z\\<in>A.\n                                size z < size y \\<longrightarrow>\n                                \\<not> P z)", "case (1 x)"], ["proof (state)\nthis:\n  \\<forall>y.\n     size y < size x \\<longrightarrow>\n     y \\<in> A \\<longrightarrow>\n     P y \\<longrightarrow>\n     (\\<exists>ya\\<in>A.\n         size ya \\<le> size y \\<and>\n         P ya \\<and>\n         (\\<forall>z\\<in>A. size z < size ya \\<longrightarrow> \\<not> P z))\n  x \\<in> A\n  P x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>y.\n                   size y < size x \\<longrightarrow>\n                   y \\<in> A \\<longrightarrow>\n                   P y \\<longrightarrow>\n                   (\\<exists>ya\\<in>A.\n                       size ya \\<le> size y \\<and>\n                       P ya \\<and>\n                       (\\<forall>z\\<in>A.\n                           size z < size ya \\<longrightarrow> \\<not> P z));\n        x \\<in> A; P x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>A.\n                            size y \\<le> size x \\<and>\n                            P y \\<and>\n                            (\\<forall>z\\<in>A.\n                                size z < size y \\<longrightarrow>\n                                \\<not> P z)", "then"], ["proof (chain)\npicking this:\n  \\<forall>y.\n     size y < size x \\<longrightarrow>\n     y \\<in> A \\<longrightarrow>\n     P y \\<longrightarrow>\n     (\\<exists>ya\\<in>A.\n         size ya \\<le> size y \\<and>\n         P ya \\<and>\n         (\\<forall>z\\<in>A. size z < size ya \\<longrightarrow> \\<not> P z))\n  x \\<in> A\n  P x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>y.\n     size y < size x \\<longrightarrow>\n     y \\<in> A \\<longrightarrow>\n     P y \\<longrightarrow>\n     (\\<exists>ya\\<in>A.\n         size ya \\<le> size y \\<and>\n         P ya \\<and>\n         (\\<forall>z\\<in>A. size z < size ya \\<longrightarrow> \\<not> P z))\n  x \\<in> A\n  P x\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>A.\n       size y \\<le> size x \\<and>\n       P y \\<and>\n       (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)", "proof (cases \"\\<forall>y \\<in> A. size y < size x \\<longrightarrow> \\<not> P y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)\n 2. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<not> (\\<forall>y\\<in>A.\n                size y < size x \\<longrightarrow> \\<not> P y)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)", "case True"], ["proof (state)\nthis:\n  \\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)\n 2. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<not> (\\<forall>y\\<in>A.\n                size y < size x \\<longrightarrow> \\<not> P y)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)", "with 1"], ["proof (chain)\npicking this:\n  \\<forall>y.\n     size y < size x \\<longrightarrow>\n     y \\<in> A \\<longrightarrow>\n     P y \\<longrightarrow>\n     (\\<exists>ya\\<in>A.\n         size ya \\<le> size y \\<and>\n         P ya \\<and>\n         (\\<forall>z\\<in>A. size z < size ya \\<longrightarrow> \\<not> P z))\n  x \\<in> A\n  P x\n  \\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>y.\n     size y < size x \\<longrightarrow>\n     y \\<in> A \\<longrightarrow>\n     P y \\<longrightarrow>\n     (\\<exists>ya\\<in>A.\n         size ya \\<le> size y \\<and>\n         P ya \\<and>\n         (\\<forall>z\\<in>A. size z < size ya \\<longrightarrow> \\<not> P z))\n  x \\<in> A\n  P x\n  \\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>A.\n       size y \\<le> size x \\<and>\n       P y \\<and>\n       (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)", "by blast"], ["proof (state)\nthis:\n  \\<exists>y\\<in>A.\n     size y \\<le> size x \\<and>\n     P y \\<and>\n     (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<not> (\\<forall>y\\<in>A.\n                size y < size x \\<longrightarrow> \\<not> P y)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<not> (\\<forall>y\\<in>A.\n                size y < size x \\<longrightarrow> \\<not> P y)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<not> (\\<forall>y\\<in>A.\n                size y < size x \\<longrightarrow> \\<not> P y)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y)", "obtain y where \"y \\<in> A\" and \"size y < size x\" and \"P y\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>y\\<in>A. size y < size x \\<longrightarrow> \\<not> P y)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> A; size y < size x; P y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y \\<in> A\n  size y < size x\n  P y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                size y < size x \\<longrightarrow>\n                y \\<in> A \\<longrightarrow>\n                P y \\<longrightarrow>\n                (\\<exists>ya\\<in>A.\n                    size ya \\<le> size y \\<and>\n                    P ya \\<and>\n                    (\\<forall>z\\<in>A.\n                        size z < size ya \\<longrightarrow> \\<not> P z));\n     x \\<in> A; P x;\n     \\<not> (\\<forall>y\\<in>A.\n                size y < size x \\<longrightarrow> \\<not> P y)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>A.\n                         size y \\<le> size x \\<and>\n                         P y \\<and>\n                         (\\<forall>z\\<in>A.\n                             size z < size y \\<longrightarrow> \\<not> P z)", "with \"1.IH\""], ["proof (chain)\npicking this:\n  \\<forall>y.\n     size y < size x \\<longrightarrow>\n     y \\<in> A \\<longrightarrow>\n     P y \\<longrightarrow>\n     (\\<exists>ya\\<in>A.\n         size ya \\<le> size y \\<and>\n         P ya \\<and>\n         (\\<forall>z\\<in>A. size z < size ya \\<longrightarrow> \\<not> P z))\n  y \\<in> A\n  size y < size x\n  P y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>y.\n     size y < size x \\<longrightarrow>\n     y \\<in> A \\<longrightarrow>\n     P y \\<longrightarrow>\n     (\\<exists>ya\\<in>A.\n         size ya \\<le> size y \\<and>\n         P ya \\<and>\n         (\\<forall>z\\<in>A. size z < size ya \\<longrightarrow> \\<not> P z))\n  y \\<in> A\n  size y < size x\n  P y\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>A.\n       size y \\<le> size x \\<and>\n       P y \\<and>\n       (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)", "by (fastforce elim!: order_trans)"], ["proof (state)\nthis:\n  \\<exists>y\\<in>A.\n     size y \\<le> size x \\<and>\n     P y \\<and>\n     (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y\\<in>A.\n     size y \\<le> size x \\<and>\n     P y \\<and>\n     (\\<forall>z\\<in>A. size z < size y \\<longrightarrow> \\<not> P z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma less_not_eq [simp]:\n  \"x \\<in> A \\<Longrightarrow> size x < size y \\<Longrightarrow> x = y \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; size x < size y; x = y\\<rbrakk>\n    \\<Longrightarrow> False", "by simp"], ["", "text \\<open>\n  The set of all bad sequences over @{term A}.\n\\<close>"], ["", "definition \"BAD P = {f \\<in> SEQ A. bad P f}\""], ["", "lemma BAD_iff [iff]:\n  \"f \\<in> BAD P \\<longleftrightarrow> (\\<forall>i. f i \\<in> A) \\<and> bad P f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> BAD P) = ((\\<forall>i. f i \\<in> A) \\<and> bad P f)", "by (auto simp: BAD_def)"], ["", "text \\<open>\n  A partial order on infinite bad sequences.\n\\<close>"], ["", "definition geseq :: \"((nat \\<Rightarrow> 'a) \\<times> (nat \\<Rightarrow> 'a)) set\"\nwhere\n  \"geseq =\n    {(f, g). f \\<in> SEQ A \\<and> g \\<in> SEQ A \\<and> (f = g \\<or> (\\<exists>i. size (g i) < size (f i) \\<and> (\\<forall>j < i. f j = g j)))}\""], ["", "text \\<open>\n  The strict part of the above order.\n\\<close>"], ["", "definition gseq :: \"((nat \\<Rightarrow> 'a) \\<times> (nat \\<Rightarrow> 'a)) set\" where\n  \"gseq = {(f, g). f \\<in> SEQ A \\<and> g \\<in> SEQ A \\<and> (\\<exists>i. size (g i) < size (f i) \\<and> (\\<forall>j < i. f j = g j))}\""], ["", "lemma geseq_iff:\n  \"(f, g) \\<in> geseq \\<longleftrightarrow>\n    f \\<in> SEQ A \\<and> g \\<in> SEQ A \\<and> (f = g \\<or> (\\<exists>i. size (g i) < size (f i) \\<and> (\\<forall>j < i. f j = g j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f, g) \\<in> geseq) =\n    (f \\<in> SEQ A \\<and>\n     g \\<in> SEQ A \\<and>\n     (f = g \\<or>\n      (\\<exists>i.\n          size (g i) < size (f i) \\<and> (\\<forall>j<i. f j = g j))))", "by (auto simp: geseq_def)"], ["", "lemma gseq_iff:\n  \"(f, g) \\<in> gseq \\<longleftrightarrow> f \\<in> SEQ A \\<and> g \\<in> SEQ A \\<and> (\\<exists>i. size (g i) < size (f i) \\<and> (\\<forall>j < i. f j = g j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f, g) \\<in> gseq) =\n    (f \\<in> SEQ A \\<and>\n     g \\<in> SEQ A \\<and>\n     (\\<exists>i. size (g i) < size (f i) \\<and> (\\<forall>j<i. f j = g j)))", "by (auto simp: gseq_def)"], ["", "lemma geseqE:\n  assumes \"(f, g) \\<in> geseq\"\n    and \"\\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A; f = g\\<rbrakk> \\<Longrightarrow> Q\"\n    and \"\\<And>i. \\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A; size (g i) < size (f i); \\<forall>j < i. f j = g j\\<rbrakk> \\<Longrightarrow> Q\"\n  shows \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "using assms"], ["proof (prove)\nusing this:\n  (f, g) \\<in> geseq\n  \\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A; f = g\\<rbrakk>\n  \\<Longrightarrow> Q\n  \\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A;\n   size (g ?i) < size (f ?i); \\<forall>j<?i. f j = g j\\<rbrakk>\n  \\<Longrightarrow> Q\n\ngoal (1 subgoal):\n 1. Q", "by (auto simp: geseq_iff)"], ["", "lemma gseqE:\n  assumes \"(f, g) \\<in> gseq\"\n    and \"\\<And>i. \\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A; size (g i) < size (f i); \\<forall>j < i. f j = g j\\<rbrakk> \\<Longrightarrow> Q\"\n  shows \"Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q", "using assms"], ["proof (prove)\nusing this:\n  (f, g) \\<in> gseq\n  \\<lbrakk>\\<forall>i. f i \\<in> A; \\<forall>i. g i \\<in> A;\n   size (g ?i) < size (f ?i); \\<forall>j<?i. f j = g j\\<rbrakk>\n  \\<Longrightarrow> Q\n\ngoal (1 subgoal):\n 1. Q", "by (auto simp: gseq_iff)"], ["", "sublocale min_elt_size?: minimal_element \"measure_on size UNIV\" A\nrewrites \"measure_on size UNIV \\<equiv> \\<lambda>x y. size x < size y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minimal_element (measure_on size UNIV) A &&&\n    measure_on size UNIV \\<equiv> \\<lambda>x y. size x < size y", "apply (unfold_locales)"], ["proof (prove)\ngoal (3 subgoals):\n 1. po_on (measure_on size UNIV) A\n 2. wfp_on (measure_on size UNIV) A\n 3. measure_on size UNIV \\<equiv> \\<lambda>x y. size x < size y", "apply (auto simp: po_on_def irreflp_on_def transp_on_def simp del: wfp_on_UNIV intro: wfp_on_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_on size UNIV \\<equiv> \\<lambda>x y. size x < size y", "apply (auto simp: measure_on_def inv_image_betw_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context\n  fixes P :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\nbegin"], ["", "text \\<open>\n  A lower bound to all sequences in a set of sequences @{term B}.\n\\<close>"], ["", "abbreviation \"lb \\<equiv> lexmin (BAD P)\""], ["", "lemma eq_upto_BAD_mem:\n  assumes \"f \\<in> eq_upto (BAD P) g i\"\n  shows \"f j \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f j \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  f \\<in> eq_upto (BAD P) g i\n\ngoal (1 subgoal):\n 1. f j \\<in> A", "by (auto)"], ["", "text \\<open>\n  Assume that there is some infinite bad sequence @{term h}.\n\\<close>"], ["", "context\n  fixes h :: \"nat \\<Rightarrow> 'a\"\n  assumes BAD_ex: \"h \\<in> BAD P\"\nbegin"], ["", "text \\<open>\n  When there is a bad sequence, then filtering @{term \"BAD P\"} w.r.t.~positions in @{term lb} never\n  yields an empty set of sequences.\n\\<close>"], ["", "lemma eq_upto_BAD_non_empty:\n  \"eq_upto (BAD P) lb i \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_upto (BAD P) lb i \\<noteq> {}", "using eq_upto_lexmin_non_empty [of \"BAD P\"] and BAD_ex"], ["proof (prove)\nusing this:\n  \\<lbrakk>BAD P \\<subseteq> SEQ A; BAD P \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> eq_upto (BAD P) lb ?i \\<noteq> {}\n  h \\<in> BAD P\n\ngoal (1 subgoal):\n 1. eq_upto (BAD P) lb i \\<noteq> {}", "by auto"], ["", "lemma non_empty_ith:\n  shows \"ith (eq_upto (BAD P) lb i) i \\<subseteq> A\"\n  and \"ith (eq_upto (BAD P) lb i) i \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ith (eq_upto (BAD P) lb i) i \\<subseteq> A &&&\n    ith (eq_upto (BAD P) lb i) i \\<noteq> {}", "using eq_upto_BAD_non_empty [of i]"], ["proof (prove)\nusing this:\n  eq_upto (BAD P) lb i \\<noteq> {}\n\ngoal (1 subgoal):\n 1. ith (eq_upto (BAD P) lb i) i \\<subseteq> A &&&\n    ith (eq_upto (BAD P) lb i) i \\<noteq> {}", "by auto"], ["", "lemmas\n  lb_minimal = min_elt_minimal [OF non_empty_ith, folded lexmin] and\n  lb_mem = min_elt_mem [OF non_empty_ith, folded lexmin]"], ["", "text \\<open>\n  @{term \"lb\"} is a infinite bad sequence.\n\\<close>"], ["", "lemma lb_BAD:\n  \"lb \\<in> BAD P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "have *: \"\\<And>j. lb j \\<in> ith (eq_upto (BAD P) lb j) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j. lb j \\<in> ith (eq_upto (BAD P) lb j) j", "by (rule lb_mem)"], ["proof (state)\nthis:\n  lb ?j \\<in> ith (eq_upto (BAD P) lb ?j) ?j\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "then"], ["proof (chain)\npicking this:\n  lb ?j \\<in> ith (eq_upto (BAD P) lb ?j) ?j", "have \"\\<forall>i. lb i \\<in> A\""], ["proof (prove)\nusing this:\n  lb ?j \\<in> ith (eq_upto (BAD P) lb ?j) ?j\n\ngoal (1 subgoal):\n 1. \\<forall>i. lb i \\<in> A", "by (auto simp: ith_conv) (metis eq_upto_BAD_mem)"], ["proof (state)\nthis:\n  \\<forall>i. lb i \\<in> A\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "moreover"], ["proof (state)\nthis:\n  \\<forall>i. lb i \\<in> A\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "{"], ["proof (state)\nthis:\n  \\<forall>i. lb i \\<in> A\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "assume \"good P lb\""], ["proof (state)\nthis:\n  good P lb\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "then"], ["proof (chain)\npicking this:\n  good P lb", "obtain i j where \"i < j\" and \"P (lb i) (lb j)\""], ["proof (prove)\nusing this:\n  good P lb\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < j; P (lb i) (lb j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: good_def)"], ["proof (state)\nthis:\n  i < j\n  P (lb i) (lb j)\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "from *"], ["proof (chain)\npicking this:\n  lb ?j \\<in> ith (eq_upto (BAD P) lb ?j) ?j", "have \"lb j \\<in> ith (eq_upto (BAD P) lb j) j\""], ["proof (prove)\nusing this:\n  lb ?j \\<in> ith (eq_upto (BAD P) lb ?j) ?j\n\ngoal (1 subgoal):\n 1. lb j \\<in> ith (eq_upto (BAD P) lb j) j", "by (auto)"], ["proof (state)\nthis:\n  lb j \\<in> ith (eq_upto (BAD P) lb j) j\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "then"], ["proof (chain)\npicking this:\n  lb j \\<in> ith (eq_upto (BAD P) lb j) j", "obtain g where \"g \\<in> eq_upto (BAD P) lb j\" and \"g j = lb j\""], ["proof (prove)\nusing this:\n  lb j \\<in> ith (eq_upto (BAD P) lb j) j\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g \\<in> eq_upto (BAD P) lb j; g j = lb j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  g \\<in> eq_upto (BAD P) lb j\n  g j = lb j\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "then"], ["proof (chain)\npicking this:\n  g \\<in> eq_upto (BAD P) lb j\n  g j = lb j", "have \"\\<forall>k \\<le> j. g k = lb k\""], ["proof (prove)\nusing this:\n  g \\<in> eq_upto (BAD P) lb j\n  g j = lb j\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>j. g k = lb k", "by (auto simp: order_le_less)"], ["proof (state)\nthis:\n  \\<forall>k\\<le>j. g k = lb k\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "with \\<open>i < j\\<close> and \\<open>P (lb i) (lb j)\\<close>"], ["proof (chain)\npicking this:\n  i < j\n  P (lb i) (lb j)\n  \\<forall>k\\<le>j. g k = lb k", "have \"P (g i) (g j)\""], ["proof (prove)\nusing this:\n  i < j\n  P (lb i) (lb j)\n  \\<forall>k\\<le>j. g k = lb k\n\ngoal (1 subgoal):\n 1. P (g i) (g j)", "by auto"], ["proof (state)\nthis:\n  P (g i) (g j)\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "with \\<open>i < j\\<close>"], ["proof (chain)\npicking this:\n  i < j\n  P (g i) (g j)", "have \"good P g\""], ["proof (prove)\nusing this:\n  i < j\n  P (g i) (g j)\n\ngoal (1 subgoal):\n 1. good P g", "by (auto simp: good_def)"], ["proof (state)\nthis:\n  good P g\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "with \\<open>g \\<in> eq_upto (BAD P) lb j\\<close>"], ["proof (chain)\npicking this:\n  g \\<in> eq_upto (BAD P) lb j\n  good P g", "have False"], ["proof (prove)\nusing this:\n  g \\<in> eq_upto (BAD P) lb j\n  good P g\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "}"], ["proof (state)\nthis:\n  good P lb \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i. lb i \\<in> A\n  good P lb \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i. lb i \\<in> A\n  good P lb \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. lb \\<in> BAD P", "by blast"], ["proof (state)\nthis:\n  lb \\<in> BAD P\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  There is no infinite bad sequence that is strictly smaller than @{term lb}.\n\\<close>"], ["", "lemma lb_lower_bound:\n  \"\\<forall>g. (lb, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>g. (lb, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g. (lb, g) \\<in> gseq \\<Longrightarrow> g \\<notin> BAD P", "fix g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g. (lb, g) \\<in> gseq \\<Longrightarrow> g \\<notin> BAD P", "assume \"(lb, g) \\<in> gseq\""], ["proof (state)\nthis:\n  (lb, g) \\<in> gseq\n\ngoal (1 subgoal):\n 1. \\<And>g. (lb, g) \\<in> gseq \\<Longrightarrow> g \\<notin> BAD P", "then"], ["proof (chain)\npicking this:\n  (lb, g) \\<in> gseq", "obtain i where \"g i \\<in> A\" and \"size (g i) < size (lb i)\"\n    and \"\\<forall>j < i. lb j = g j\""], ["proof (prove)\nusing this:\n  (lb, g) \\<in> gseq\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>g i \\<in> A; size (g i) < size (lb i);\n         \\<forall>j<i. lb j = g j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: gseq_iff)"], ["proof (state)\nthis:\n  g i \\<in> A\n  size (g i) < size (lb i)\n  \\<forall>j<i. lb j = g j\n\ngoal (1 subgoal):\n 1. \\<And>g. (lb, g) \\<in> gseq \\<Longrightarrow> g \\<notin> BAD P", "moreover"], ["proof (state)\nthis:\n  g i \\<in> A\n  size (g i) < size (lb i)\n  \\<forall>j<i. lb j = g j\n\ngoal (1 subgoal):\n 1. \\<And>g. (lb, g) \\<in> gseq \\<Longrightarrow> g \\<notin> BAD P", "with lb_minimal"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y \\<in> A; size ?y < size (lb ?i)\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> ith (eq_upto (BAD P) lb ?i) ?i\n  g i \\<in> A\n  size (g i) < size (lb i)\n  \\<forall>j<i. lb j = g j", "have \"g i \\<notin> ith (eq_upto (BAD P) lb i) i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y \\<in> A; size ?y < size (lb ?i)\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> ith (eq_upto (BAD P) lb ?i) ?i\n  g i \\<in> A\n  size (g i) < size (lb i)\n  \\<forall>j<i. lb j = g j\n\ngoal (1 subgoal):\n 1. g i \\<notin> ith (eq_upto (BAD P) lb i) i", "by auto"], ["proof (state)\nthis:\n  g i \\<notin> ith (eq_upto (BAD P) lb i) i\n\ngoal (1 subgoal):\n 1. \\<And>g. (lb, g) \\<in> gseq \\<Longrightarrow> g \\<notin> BAD P", "ultimately"], ["proof (chain)\npicking this:\n  g i \\<in> A\n  size (g i) < size (lb i)\n  \\<forall>j<i. lb j = g j\n  g i \\<notin> ith (eq_upto (BAD P) lb i) i", "show \"g \\<notin> BAD P\""], ["proof (prove)\nusing this:\n  g i \\<in> A\n  size (g i) < size (lb i)\n  \\<forall>j<i. lb j = g j\n  g i \\<notin> ith (eq_upto (BAD P) lb i) i\n\ngoal (1 subgoal):\n 1. g \\<notin> BAD P", "by blast"], ["proof (state)\nthis:\n  g \\<notin> BAD P\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  If there is at least one bad sequence, then there is also a minimal one.\n\\<close>"], ["", "lemma lower_bound_ex:\n  \"\\<exists>f \\<in> BAD P. \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>BAD P.\n       \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P", "using lb_BAD and lb_lower_bound"], ["proof (prove)\nusing this:\n  lb \\<in> BAD P\n  \\<forall>g. (lb, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>BAD P.\n       \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P", "by blast"], ["", "lemma gseq_conv:\n  \"(f, g) \\<in> gseq \\<longleftrightarrow> f \\<noteq> g \\<and> (f, g) \\<in> geseq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f, g) \\<in> gseq) = (f \\<noteq> g \\<and> (f, g) \\<in> geseq)", "by (auto simp: gseq_def geseq_def dest: less_not_eq)"], ["", "text \\<open>There is a minimal bad sequence.\\<close>"], ["", "lemma mbs:\n  \"\\<exists>f \\<in> BAD P. \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> good P g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>BAD P.\n       \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> good P g", "using lower_bound_ex"], ["proof (prove)\nusing this:\n  \\<exists>f\\<in>BAD P.\n     \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> g \\<notin> BAD P\n\ngoal (1 subgoal):\n 1. \\<exists>f\\<in>BAD P.\n       \\<forall>g. (f, g) \\<in> gseq \\<longrightarrow> good P g", "by (auto simp: gseq_conv geseq_iff)"], ["", "end"], ["", "end"], ["", "end"], ["", "end"]]}