{"file_name": "/home/qj213/afp-2021-10-22/thys/Fishburn_Impossibility/Social_Choice_Functions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Fishburn_Impossibility", "problem_names": ["lemma weighted_majority_refl [simp]: \"weighted_majority R x x = 0\"", "lemma weighted_majority_swap: \"weighted_majority R x y = -weighted_majority R y x\"", "lemma eval_set_filter: \n  \"Set.filter P {} = {}\" \n  \"P x \\<Longrightarrow> Set.filter P (insert x A) = insert x (Set.filter P A)\"\n  \"\\<not>P x \\<Longrightarrow> Set.filter P (insert x A) = Set.filter P A\"", "lemma supporters_def: \n  assumes \"is_pref_profile R\"\n  shows   \"supporters R x y = {i\\<in>agents. x \\<succeq>[R i] y}\"", "lemma supporters_nonagent1:\n  assumes \"is_pref_profile R\" \"x \\<notin> alts\"\n  shows   \"supporters R x y = {}\"", "lemma supporters_nonagent2:\n  assumes \"is_pref_profile R\" \"y \\<notin> alts\"\n  shows   \"supporters R x y = {}\"", "lemma weighted_majority_nonagent1:\n  assumes \"is_pref_profile R\" \"x \\<notin> alts\"\n  shows   \"weighted_majority R x y = 0\"", "lemma weighted_majority_nonagent2:\n  assumes \"is_pref_profile R\" \"y \\<notin> alts\"\n  shows   \"weighted_majority R x y = 0\"", "lemma weighted_majority_eq_iff:\n  assumes \"is_pref_profile R1\" \"is_pref_profile R2\"\n  shows   \"weighted_majority R1 = weighted_majority R2 \\<longleftrightarrow>\n             (\\<forall>x\\<in>alts. \\<forall>y\\<in>alts. weighted_majority R1 x y = weighted_majority R2 x y)\"", "lemma anonymous':\n  assumes \"anonymous_profile R1 = anonymous_profile R2\"\n  assumes \"is_pref_profile R1\" \"is_pref_profile R2\"\n  shows   \"scf R1 = scf R2\"", "lemma anonymity_prefs_from_table:\n  assumes \"prefs_from_table_wf agents alts xs\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"scf (prefs_from_table xs) = scf (prefs_from_table ys)\"", "lemma anonymity_prefs_from_table_aux:\n  assumes \"R1 = prefs_from_table xs\" \"prefs_from_table_wf agents alts xs\"\n  assumes \"R2 = prefs_from_table ys\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"scf R1 = scf R2\"", "lemma neutral':\n  assumes \"\\<sigma> permutes alts\"\n  assumes \"is_pref_profile R\"\n  assumes \"a \\<in> alts\"\n  shows   \"\\<sigma> a \\<in> scf (permute_profile \\<sigma> R) \\<longleftrightarrow> a \\<in> scf R\"", "lemma scf_anonymous_neutral:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map (\\<lambda>A. \\<sigma> ` A)) (anonymous_profile R2)\"\n  shows   \"scf R1 = \\<sigma> ` scf R2\"", "lemma scf_anonymous_neutral':\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map (\\<lambda>A. \\<sigma> ` A)) (anonymous_profile R2)\"\n  shows   \"\\<sigma> x \\<in> scf R1 \\<longleftrightarrow> x \\<in> scf R2\"", "lemma scf_automorphism:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R\"\n  assumes eq: \"image_mset (map (\\<lambda>A. \\<sigma> ` A)) (anonymous_profile R) = anonymous_profile R\"\n  shows   \"\\<sigma> ` scf R = scf R\"", "lemma an_scf_automorphism_aux:\n  assumes wf: \"prefs_from_table_wf agents alts yss\" \"R \\<equiv> prefs_from_table yss\"\n  assumes an: \"an_scf agents alts scf\"\n  assumes eq: \"mset (map ((map (\\<lambda>A. permutation_of_list xs ` A)) \\<circ> snd) yss) = mset (map snd yss)\"\n  assumes perm: \"set (map fst xs) \\<subseteq> alts\" \"set (map snd xs) = set (map fst xs)\" \n                \"distinct (map fst xs)\" \n      and x: \"x \\<in> alts\" \"y = permutation_of_list xs x\"\n  shows   \"x \\<in> scf R \\<longleftrightarrow> y \\<in> scf R\"", "lemma pareto_efficient':\n  assumes \"is_pref_profile R\" \"y \\<succ>[Pareto(R)] x\"\n  shows   \"x \\<notin> scf R\"", "lemma pareto_efficient'':\n  assumes \"is_pref_profile R\" \"i \\<in> agents\"  \"\\<forall>i\\<in>agents. y \\<succeq>[R i] x\" \"\\<not>y \\<preceq>[R i] x\"\n  shows   \"x \\<notin> scf R\"", "lemma Kelly_strict_iff: \"A \\<succ>[Kelly(R)] B \\<longleftrightarrow> ((\\<forall>a\\<in>A. \\<forall>b\\<in>B. R b a) \\<and> \\<not> (\\<forall>a\\<in>B. \\<forall>b\\<in>A. R b a))\"", "lemmas Kelly_eval = Kelly_def Kelly_strict_iff", "lemma Fishb_strict_iff: \n  \"A \\<succ>[Fishb(R)] B \\<longleftrightarrow> \n     ((\\<forall>a\\<in>A. \\<forall>b\\<in>B - A. R b a) \\<and> (\\<forall>a\\<in>A - B. \\<forall>b\\<in>B. R b a)) \\<and>\n     \\<not> ((\\<forall>a\\<in>B. \\<forall>b\\<in>A - B. R b a) \\<and> (\\<forall>a\\<in>B - A. \\<forall>b\\<in>A. R b a))\"", "lemmas Fishb_eval = Fishb_def Fishb_strict_iff", "lemma strategyproof':\n  assumes \"is_pref_profile R1\" \"is_pref_profile R2\" \"i \\<in> agents\" \"j \\<in> agents\"\n  assumes \"anonymous_profile R2 = anonymous_profile R1 - \n             {#weak_ranking (R1 i)#} + {#weak_ranking (R2 j)#}\"\n  shows   \"\\<not>scf R2 \\<succ>[set_ext (R1 i)] scf R1\"", "lemma strict_not_outside:\n  assumes \"x \\<prec>[le] y\"\n  shows   \"x \\<in> carrier\" \"y \\<in> carrier\"", "lemma lift_prefs_wf:\n  assumes \"total_preorder_on alts R\" \"alts \\<subseteq> alts'\"\n  shows   \"total_preorder_on alts' (lift_prefs alts alts' R)\"", "lemma lift_pref_profile_conv_vector:\n  assumes \"i \\<in> agents\" \"i \\<in> agents'\"\n  shows   \"lift_pref_profile agents alts agents' alts' R i = lift_prefs alts alts' (R i)\"", "lemma lift_pref_profile_wf:\n  assumes \"pref_profile_wf agents alts R\"\n  assumes \"agents \\<subseteq> agents'\" \"alts \\<subseteq> alts'\" \"finite alts'\"\n  defines \"R' \\<equiv> lift_pref_profile agents alts agents' alts' R\"\n  shows   \"pref_profile_wf agents' alts' R'\"", "lemma lift_pref_profile_permute_agents:\n  assumes \"\\<pi> permutes agents\" \"agents \\<subseteq> agents'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) = \n             lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>\"", "lemma lift_pref_profile_permute_alts:\n  assumes \"\\<sigma> permutes alts\" \"alts \\<subseteq> alts'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (permute_profile \\<sigma> R) = \n             permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)\"", "lemma lift_pref_profile_strict_iff:\n  \"x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y \\<longleftrightarrow>\n     i \\<in> agents \\<and> ((y \\<in> alts \\<and> x \\<in> alts' - alts) \\<or> x \\<prec>[R i] y)\"", "lemma preferred_alts_lift_pref_profile: \n  assumes i: \"i \\<in> agents'\" and x: \"x \\<in> alts'\"\n  shows   \"preferred_alts (R' i) x = \n             (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x else alts')\"", "lemma lift_pref_profile_Pareto_iff:\n  \"x \\<preceq>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<or> x \\<preceq>[Pareto(R)] y)\"", "lemma lift_pref_profile_Pareto_strict_iff:\n  \"x \\<prec>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<and> y \\<in> alts \\<or> x \\<prec>[Pareto(R)] y)\"", "lemma pareto_losers_lift_pref_profile:\n  shows   \"pareto_losers R' = pareto_losers R \\<union> (alts' - alts)\"", "lemma finite_agents' [simp]: \"finite agents'\"", "lemma finite_alts' [simp]: \"finite alts'\"", "lemma lift_wf [simp, intro]: \n  \"pref_profile_wf agents' alts' R \\<Longrightarrow> is_pref_profile (lift R)\"", "lemma preferred_alts_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> i \\<in> agents \\<Longrightarrow> x \\<in> alts \\<Longrightarrow>\n     preferred_alts (lift R i) x = \n       (if i \\<in> agents' \\<and> x \\<in> alts' then preferred_alts (R i) x else alts)\"", "lemma pareto_losers_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\"", "lemma liftable_set_extensionI_weak:\n  assumes \"\\<And>R A B. total_preorder_on alts' R \\<Longrightarrow> A \\<noteq> {} \\<Longrightarrow> B \\<noteq> {} \\<Longrightarrow> \n                      A \\<subseteq> alts' \\<Longrightarrow> B \\<subseteq> alts' \\<Longrightarrow>\n              A \\<preceq>[set_ext R] B \\<longleftrightarrow> A \\<preceq>[set_ext (lift_prefs alts' alts R)] B\"\n  shows   \"liftable_set_extension alts' alts set_ext\"", "lemma Kelly_liftable:\n  assumes \"alts' \\<subseteq> alts\"\n  shows   \"liftable_set_extension alts' alts Kelly\"", "lemma Fishburn_liftable:\n  assumes \"alts' \\<subseteq> alts\"\n  shows   \"liftable_set_extension alts' alts Fishb\""], "translations": [["", "lemma weighted_majority_refl [simp]: \"weighted_majority R x x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weighted_majority R x x = 0", "by (simp add: weighted_majority_def)"], ["", "lemma weighted_majority_swap: \"weighted_majority R x y = -weighted_majority R y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weighted_majority R x y = - weighted_majority R y x", "by (simp add: weighted_majority_def)"], ["", "lemma eval_set_filter: \n  \"Set.filter P {} = {}\" \n  \"P x \\<Longrightarrow> Set.filter P (insert x A) = insert x (Set.filter P A)\"\n  \"\\<not>P x \\<Longrightarrow> Set.filter P (insert x A) = Set.filter P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set.filter P {} = {} &&&\n    (P x \\<Longrightarrow>\n     Set.filter P (insert x A) = insert x (Set.filter P A)) &&&\n    (\\<not> P x \\<Longrightarrow>\n     Set.filter P (insert x A) = Set.filter P A)", "unfolding Set.filter_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> {}. P a} = {} &&&\n    (P x \\<Longrightarrow>\n     {a \\<in> insert x A. P a} = insert x {a \\<in> A. P a}) &&&\n    (\\<not> P x \\<Longrightarrow>\n     {a \\<in> insert x A. P a} = {a \\<in> A. P a})", "by auto"], ["", "context election\nbegin"], ["", "lemma supporters_def: \n  assumes \"is_pref_profile R\"\n  shows   \"supporters R x y = {i\\<in>agents. x \\<succeq>[R i] y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supporters R x y = {i \\<in> agents. R i y x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. supporters R x y = {i \\<in> agents. R i y x}", "interpret pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. supporters R x y = {i \\<in> agents. R i y x}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. supporters R x y = {i \\<in> agents. R i y x}", "using not_outside"], ["proof (prove)\nusing this:\n  R ?i ?x ?y \\<Longrightarrow> ?i \\<in> agents\n  R ?i ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  R ?i ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. supporters R x y = {i \\<in> agents. R i y x}", "unfolding supporters_auxdef"], ["proof (prove)\nusing this:\n  R ?i ?x ?y \\<Longrightarrow> ?i \\<in> agents\n  R ?i ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  R ?i ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. {i. R i y x} = {i \\<in> agents. R i y x}", "by blast"], ["proof (state)\nthis:\n  supporters R x y = {i \\<in> agents. R i y x}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma supporters_nonagent1:\n  assumes \"is_pref_profile R\" \"x \\<notin> alts\"\n  shows   \"supporters R x y = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supporters R x y = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. supporters R x y = {}", "interpret pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. supporters R x y = {}", "from assms"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  x \\<notin> alts", "show ?thesis"], ["proof (prove)\nusing this:\n  is_pref_profile R\n  x \\<notin> alts\n\ngoal (1 subgoal):\n 1. supporters R x y = {}", "by (auto simp: supporters_def dest: not_outside)"], ["proof (state)\nthis:\n  supporters R x y = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma supporters_nonagent2:\n  assumes \"is_pref_profile R\" \"y \\<notin> alts\"\n  shows   \"supporters R x y = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supporters R x y = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. supporters R x y = {}", "interpret pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. supporters R x y = {}", "from assms"], ["proof (chain)\npicking this:\n  is_pref_profile R\n  y \\<notin> alts", "show ?thesis"], ["proof (prove)\nusing this:\n  is_pref_profile R\n  y \\<notin> alts\n\ngoal (1 subgoal):\n 1. supporters R x y = {}", "by (auto simp: supporters_def dest: not_outside)"], ["proof (state)\nthis:\n  supporters R x y = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weighted_majority_nonagent1:\n  assumes \"is_pref_profile R\" \"x \\<notin> alts\"\n  shows   \"weighted_majority R x y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weighted_majority R x y = 0", "using assms"], ["proof (prove)\nusing this:\n  is_pref_profile R\n  x \\<notin> alts\n\ngoal (1 subgoal):\n 1. weighted_majority R x y = 0", "by (simp add: weighted_majority_def supporters_nonagent1 supporters_nonagent2)"], ["", "lemma weighted_majority_nonagent2:\n  assumes \"is_pref_profile R\" \"y \\<notin> alts\"\n  shows   \"weighted_majority R x y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weighted_majority R x y = 0", "using assms"], ["proof (prove)\nusing this:\n  is_pref_profile R\n  y \\<notin> alts\n\ngoal (1 subgoal):\n 1. weighted_majority R x y = 0", "by (simp add: weighted_majority_def supporters_nonagent1 supporters_nonagent2)"], ["", "lemma weighted_majority_eq_iff:\n  assumes \"is_pref_profile R1\" \"is_pref_profile R2\"\n  shows   \"weighted_majority R1 = weighted_majority R2 \\<longleftrightarrow>\n             (\\<forall>x\\<in>alts. \\<forall>y\\<in>alts. weighted_majority R1 x y = weighted_majority R2 x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (weighted_majority R1 = weighted_majority R2) =\n    (\\<forall>x\\<in>alts.\n        \\<forall>y\\<in>alts.\n           weighted_majority R1 x y = weighted_majority R2 x y)", "proof (intro iffI ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. weighted_majority R1 = weighted_majority R2 \\<Longrightarrow>\n    \\<forall>x\\<in>alts.\n       \\<forall>y\\<in>alts.\n          weighted_majority R1 x y = weighted_majority R2 x y\n 2. \\<And>x xa.\n       \\<forall>x\\<in>alts.\n          \\<forall>y\\<in>alts.\n             weighted_majority R1 x y =\n             weighted_majority R2 x y \\<Longrightarrow>\n       weighted_majority R1 x xa = weighted_majority R2 x xa", "fix x y :: 'alt"], ["proof (state)\ngoal (2 subgoals):\n 1. weighted_majority R1 = weighted_majority R2 \\<Longrightarrow>\n    \\<forall>x\\<in>alts.\n       \\<forall>y\\<in>alts.\n          weighted_majority R1 x y = weighted_majority R2 x y\n 2. \\<And>x xa.\n       \\<forall>x\\<in>alts.\n          \\<forall>y\\<in>alts.\n             weighted_majority R1 x y =\n             weighted_majority R2 x y \\<Longrightarrow>\n       weighted_majority R1 x xa = weighted_majority R2 x xa", "assume \"\\<forall>x\\<in>alts. \\<forall>y\\<in>alts. weighted_majority R1 x y = weighted_majority R2 x y\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>alts.\n     \\<forall>y\\<in>alts.\n        weighted_majority R1 x y = weighted_majority R2 x y\n\ngoal (2 subgoals):\n 1. weighted_majority R1 = weighted_majority R2 \\<Longrightarrow>\n    \\<forall>x\\<in>alts.\n       \\<forall>y\\<in>alts.\n          weighted_majority R1 x y = weighted_majority R2 x y\n 2. \\<And>x xa.\n       \\<forall>x\\<in>alts.\n          \\<forall>y\\<in>alts.\n             weighted_majority R1 x y =\n             weighted_majority R2 x y \\<Longrightarrow>\n       weighted_majority R1 x xa = weighted_majority R2 x xa", "with assms"], ["proof (chain)\npicking this:\n  is_pref_profile R1\n  is_pref_profile R2\n  \\<forall>x\\<in>alts.\n     \\<forall>y\\<in>alts.\n        weighted_majority R1 x y = weighted_majority R2 x y", "show \"weighted_majority R1 x y = weighted_majority R2 x y\""], ["proof (prove)\nusing this:\n  is_pref_profile R1\n  is_pref_profile R2\n  \\<forall>x\\<in>alts.\n     \\<forall>y\\<in>alts.\n        weighted_majority R1 x y = weighted_majority R2 x y\n\ngoal (1 subgoal):\n 1. weighted_majority R1 x y = weighted_majority R2 x y", "by (cases \"x \\<in> alts\"; cases \"y \\<in> alts\") \n       (auto simp: fun_eq_iff weighted_majority_nonagent1 weighted_majority_nonagent2)"], ["proof (state)\nthis:\n  weighted_majority R1 x y = weighted_majority R2 x y\n\ngoal (1 subgoal):\n 1. weighted_majority R1 = weighted_majority R2 \\<Longrightarrow>\n    \\<forall>x\\<in>alts.\n       \\<forall>y\\<in>alts.\n          weighted_majority R1 x y = weighted_majority R2 x y", "qed auto"], ["", "end"], ["", "subsection \\<open>Definition of Social Choice Functions\\<close>"], ["", "locale social_choice_function = election agents alts \n  for agents :: \"'agent set\" and alts :: \"'alt set\" +\n  fixes scf :: \"('agent, 'alt) pref_profile \\<Rightarrow> 'alt set\"\n  assumes scf_nonempty: \"is_pref_profile R \\<Longrightarrow> scf R \\<noteq> {}\"\n  assumes scf_alts: \"is_pref_profile R \\<Longrightarrow> scf R \\<subseteq> alts\""], ["", "subsection \\<open>Anonymity\\<close>"], ["", "text \\<open>\n  An SCF is anonymous if permuting the agents in the input does not change the result.\n\\<close>"], ["", "locale anonymous_scf = social_choice_function agents alts scf\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf +\n  assumes anonymous: \"\\<pi> permutes agents \\<Longrightarrow> is_pref_profile R \\<Longrightarrow> scf (R \\<circ> \\<pi>) = scf R\" \nbegin"], ["", "lemma anonymous':\n  assumes \"anonymous_profile R1 = anonymous_profile R2\"\n  assumes \"is_pref_profile R1\" \"is_pref_profile R2\"\n  shows   \"scf R1 = scf R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf R1 = scf R2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. scf R1 = scf R2", "from anonymous_profile_agent_permutation[OF assms finite_agents]"], ["proof (chain)\npicking this:\n  (\\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents; R2 \\<circ> \\<pi> = R1\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain \\<pi> where \"\\<pi> permutes agents\" \"R1 = R2 \\<circ> \\<pi>\""], ["proof (prove)\nusing this:\n  (\\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents; R2 \\<circ> \\<pi> = R1\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>.\n        \\<lbrakk>\\<pi> permutes agents; R1 = R2 \\<circ> \\<pi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<pi> permutes agents\n  R1 = R2 \\<circ> \\<pi>\n\ngoal (1 subgoal):\n 1. scf R1 = scf R2", "with anonymous[of \\<pi> R2] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<pi> permutes agents; is_pref_profile R2\\<rbrakk>\n  \\<Longrightarrow> scf (R2 \\<circ> \\<pi>) = scf R2\n  anonymous_profile R1 = anonymous_profile R2\n  is_pref_profile R1\n  is_pref_profile R2\n  \\<pi> permutes agents\n  R1 = R2 \\<circ> \\<pi>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<pi> permutes agents; is_pref_profile R2\\<rbrakk>\n  \\<Longrightarrow> scf (R2 \\<circ> \\<pi>) = scf R2\n  anonymous_profile R1 = anonymous_profile R2\n  is_pref_profile R1\n  is_pref_profile R2\n  \\<pi> permutes agents\n  R1 = R2 \\<circ> \\<pi>\n\ngoal (1 subgoal):\n 1. scf R1 = scf R2", "by simp"], ["proof (state)\nthis:\n  scf R1 = scf R2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma anonymity_prefs_from_table:\n  assumes \"prefs_from_table_wf agents alts xs\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"scf (prefs_from_table xs) = scf (prefs_from_table ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf (prefs_from_table xs) = scf (prefs_from_table ys)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. scf (prefs_from_table xs) = scf (prefs_from_table ys)", "from prefs_from_table_agent_permutation[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "guess \\<pi>"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  \\<pi> permutes agents\n  prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\n\ngoal (1 subgoal):\n 1. scf (prefs_from_table xs) = scf (prefs_from_table ys)", "with anonymous[of \\<pi>, of \"prefs_from_table xs\"] assms(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<pi> permutes agents;\n   is_pref_profile (prefs_from_table xs)\\<rbrakk>\n  \\<Longrightarrow> scf (prefs_from_table xs \\<circ> \\<pi>) =\n                    scf (prefs_from_table xs)\n  prefs_from_table_wf agents alts xs\n  \\<pi> permutes agents\n  prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<pi> permutes agents;\n   is_pref_profile (prefs_from_table xs)\\<rbrakk>\n  \\<Longrightarrow> scf (prefs_from_table xs \\<circ> \\<pi>) =\n                    scf (prefs_from_table xs)\n  prefs_from_table_wf agents alts xs\n  \\<pi> permutes agents\n  prefs_from_table xs \\<circ> \\<pi> = prefs_from_table ys\n\ngoal (1 subgoal):\n 1. scf (prefs_from_table xs) = scf (prefs_from_table ys)", "by (simp add: pref_profile_from_tableI)"], ["proof (state)\nthis:\n  scf (prefs_from_table xs) = scf (prefs_from_table ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\nbegin"], ["", "qualified"], ["", "lemma anonymity_prefs_from_table_aux:\n  assumes \"R1 = prefs_from_table xs\" \"prefs_from_table_wf agents alts xs\"\n  assumes \"R2 = prefs_from_table ys\" \"prefs_from_table_wf agents alts ys\"\n  assumes \"mset (map snd xs) = mset (map snd ys)\"\n  shows   \"scf R1 = scf R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf R1 = scf R2", "unfolding assms(1,3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. scf (prefs_from_table xs) = scf (prefs_from_table ys)", "by (rule anonymity_prefs_from_table) (simp_all add: assms del: mset_map)"], ["", "end"], ["", "end"], ["", "subsection \\<open>Neutrality\\<close>"], ["", "text \\<open>\n  An SCF is neutral if permuting the alternatives in the input does not change the\n  result, modulo the equivalent permutation in the output lottery.\n\\<close>"], ["", "locale neutral_scf = social_choice_function agents alts scf\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf +\n  assumes neutral: \"\\<sigma> permutes alts \\<Longrightarrow> is_pref_profile R \\<Longrightarrow> \n                        scf (permute_profile \\<sigma> R) = \\<sigma> ` scf R\"\nbegin"], ["", "text \\<open>\n  Alternative formulation of neutrality that shows that our definition is \n  equivalent to that in the paper.\n\\<close>"], ["", "lemma neutral':\n  assumes \"\\<sigma> permutes alts\"\n  assumes \"is_pref_profile R\"\n  assumes \"a \\<in> alts\"\n  shows   \"\\<sigma> a \\<in> scf (permute_profile \\<sigma> R) \\<longleftrightarrow> a \\<in> scf R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> a \\<in> scf (permute_profile \\<sigma> R)) = (a \\<in> scf R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma> a \\<in> scf (permute_profile \\<sigma> R)) = (a \\<in> scf R)", "have *: \"x = y\" if \"\\<sigma> x = \\<sigma> y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using permutes_inj[OF assms(1)] that"], ["proof (prove)\nusing this:\n  inj \\<sigma>\n  \\<sigma> x = \\<sigma> y\n\ngoal (1 subgoal):\n 1. x = y", "by (auto dest: injD)"], ["proof (state)\nthis:\n  \\<sigma> ?x = \\<sigma> ?y \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. (\\<sigma> a \\<in> scf (permute_profile \\<sigma> R)) = (a \\<in> scf R)", "from assms"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n  a \\<in> alts", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  is_pref_profile R\n  a \\<in> alts\n\ngoal (1 subgoal):\n 1. (\\<sigma> a \\<in> scf (permute_profile \\<sigma> R)) = (a \\<in> scf R)", "by (auto simp: neutral dest!: *)"], ["proof (state)\nthis:\n  (\\<sigma> a \\<in> scf (permute_profile \\<sigma> R)) = (a \\<in> scf R)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale an_scf = \n  anonymous_scf agents alts scf + neutral_scf agents alts scf\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf\nbegin"], ["", "lemma scf_anonymous_neutral:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map (\\<lambda>A. \\<sigma> ` A)) (anonymous_profile R2)\"\n  shows   \"scf R1 = \\<sigma> ` scf R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "interpret R1: pref_profile_wf agents alts R1"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R1", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "interpret R2: pref_profile_wf agents alts R2"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R2", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "from perm"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts", "have wf': \"is_pref_profile (permute_profile \\<sigma> R2)\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. is_pref_profile (permute_profile \\<sigma> R2)", "by (rule R2.wf_permute_alts)"], ["proof (state)\nthis:\n  is_pref_profile (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "from eq perm"], ["proof (chain)\npicking this:\n  anonymous_profile R1 =\n  image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\n  \\<sigma> permutes alts", "have \"anonymous_profile R1 = anonymous_profile (permute_profile \\<sigma> R2)\""], ["proof (prove)\nusing this:\n  anonymous_profile R1 =\n  image_mset (map ((`) \\<sigma>)) (anonymous_profile R2)\n  \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. anonymous_profile R1 = anonymous_profile (permute_profile \\<sigma> R2)", "by (simp add: R2.anonymous_profile_permute)"], ["proof (state)\nthis:\n  anonymous_profile R1 = anonymous_profile (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "from anonymous_profile_agent_permutation[OF this wf(1) wf']"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite agents;\n   \\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain \\<pi> where \"\\<pi> permutes agents\" \"permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite agents;\n   \\<And>\\<pi>.\n      \\<lbrakk>\\<pi> permutes agents;\n       permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>.\n        \\<lbrakk>\\<pi> permutes agents;\n         permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<pi> permutes agents\n  permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "have \"scf (permute_profile \\<sigma> R2 \\<circ> \\<pi>) = scf (permute_profile \\<sigma> R2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf (permute_profile \\<sigma> R2 \\<circ> \\<pi>) =\n    scf (permute_profile \\<sigma> R2)", "by (rule anonymous) fact+"], ["proof (state)\nthis:\n  scf (permute_profile \\<sigma> R2 \\<circ> \\<pi>) =\n  scf (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "also"], ["proof (state)\nthis:\n  scf (permute_profile \\<sigma> R2 \\<circ> \\<pi>) =\n  scf (permute_profile \\<sigma> R2)\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "have \"\\<dots> = \\<sigma> ` scf R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf (permute_profile \\<sigma> R2) = \\<sigma> ` scf R2", "by (rule neutral) fact+"], ["proof (state)\nthis:\n  scf (permute_profile \\<sigma> R2) = \\<sigma> ` scf R2\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "also"], ["proof (state)\nthis:\n  scf (permute_profile \\<sigma> R2) = \\<sigma> ` scf R2\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "have \"permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1", "by fact"], ["proof (state)\nthis:\n  permute_profile \\<sigma> R2 \\<circ> \\<pi> = R1\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "finally"], ["proof (chain)\npicking this:\n  scf R1 = \\<sigma> ` scf R2", "show ?thesis"], ["proof (prove)\nusing this:\n  scf R1 = \\<sigma> ` scf R2\n\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "."], ["proof (state)\nthis:\n  scf R1 = \\<sigma> ` scf R2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scf_anonymous_neutral':\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R1\" \"is_pref_profile R2\"\n  assumes eq: \"anonymous_profile R1 = \n                 image_mset (map (\\<lambda>A. \\<sigma> ` A)) (anonymous_profile R2)\"\n  shows   \"\\<sigma> x \\<in> scf R1 \\<longleftrightarrow> x \\<in> scf R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)", "have \"scf R1 = \\<sigma> ` scf R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf R1 = \\<sigma> ` scf R2", "by (intro scf_anonymous_neutral) fact+"], ["proof (state)\nthis:\n  scf R1 = \\<sigma> ` scf R2\n\ngoal (1 subgoal):\n 1. (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)", "also"], ["proof (state)\nthis:\n  scf R1 = \\<sigma> ` scf R2\n\ngoal (1 subgoal):\n 1. (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)", "have \"\\<sigma> x \\<in> \\<dots> \\<longleftrightarrow> x \\<in> scf R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> x \\<in> \\<sigma> ` scf R2) = (x \\<in> scf R2)", "by (blast dest: injD[OF permutes_inj[OF perm]])"], ["proof (state)\nthis:\n  (\\<sigma> x \\<in> \\<sigma> ` scf R2) = (x \\<in> scf R2)\n\ngoal (1 subgoal):\n 1. (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)", "finally"], ["proof (chain)\npicking this:\n  (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)\n\ngoal (1 subgoal):\n 1. (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)", "."], ["proof (state)\nthis:\n  (\\<sigma> x \\<in> scf R1) = (x \\<in> scf R2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scf_automorphism:\n  assumes perm: \"\\<sigma> permutes alts\" and wf: \"is_pref_profile R\"\n  assumes eq: \"image_mset (map (\\<lambda>A. \\<sigma> ` A)) (anonymous_profile R) = anonymous_profile R\"\n  shows   \"\\<sigma> ` scf R = scf R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> ` scf R = scf R", "using scf_anonymous_neutral[OF perm wf wf eq [symmetric]]"], ["proof (prove)\nusing this:\n  scf R = \\<sigma> ` scf R\n\ngoal (1 subgoal):\n 1. \\<sigma> ` scf R = scf R", ".."], ["", "end"], ["", "lemma an_scf_automorphism_aux:\n  assumes wf: \"prefs_from_table_wf agents alts yss\" \"R \\<equiv> prefs_from_table yss\"\n  assumes an: \"an_scf agents alts scf\"\n  assumes eq: \"mset (map ((map (\\<lambda>A. permutation_of_list xs ` A)) \\<circ> snd) yss) = mset (map snd yss)\"\n  assumes perm: \"set (map fst xs) \\<subseteq> alts\" \"set (map snd xs) = set (map fst xs)\" \n                \"distinct (map fst xs)\" \n      and x: \"x \\<in> alts\" \"y = permutation_of_list xs x\"\n  shows   \"x \\<in> scf R \\<longleftrightarrow> y \\<in> scf R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "note perm = list_permutesI[OF perm]"], ["proof (state)\nthis:\n  list_permutes xs alts\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "let ?\\<sigma> = \"permutation_of_list xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "note perm' = permutation_of_list_permutes [OF perm]"], ["proof (state)\nthis:\n  permutation_of_list xs permutes alts\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "from wf"], ["proof (chain)\npicking this:\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss", "have wf': \"pref_profile_wf agents alts R\""], ["proof (prove)\nusing this:\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "by (simp add: pref_profile_from_tableI)"], ["proof (state)\nthis:\n  pref_profile_wf agents alts R\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "then"], ["proof (chain)\npicking this:\n  pref_profile_wf agents alts R", "interpret R: pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  pref_profile_wf agents alts R\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "."], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "from perm'"], ["proof (chain)\npicking this:\n  permutation_of_list xs permutes alts", "interpret R': pref_profile_wf agents alts \"permute_profile ?\\<sigma> R\""], ["proof (prove)\nusing this:\n  permutation_of_list xs permutes alts\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts (permute_profile (permutation_of_list xs) R)", "by (simp add: R.wf_permute_alts)"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "from an"], ["proof (chain)\npicking this:\n  an_scf agents alts scf", "interpret an_scf agents alts scf"], ["proof (prove)\nusing this:\n  an_scf agents alts scf\n\ngoal (1 subgoal):\n 1. an_scf agents alts scf", "."], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "from eq wf"], ["proof (chain)\npicking this:\n  mset (map (map ((`) (permutation_of_list xs)) \\<circ> snd) yss) =\n  mset (map snd yss)\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss", "have eq': \"image_mset (map (\\<lambda>A. ?\\<sigma> ` A)) (anonymous_profile R) = anonymous_profile R\""], ["proof (prove)\nusing this:\n  mset (map (map ((`) (permutation_of_list xs)) \\<circ> snd) yss) =\n  mset (map snd yss)\n  prefs_from_table_wf agents alts yss\n  R \\<equiv> prefs_from_table yss\n\ngoal (1 subgoal):\n 1. image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n    anonymous_profile R", "by (simp add: anonymise_prefs_from_table mset_map multiset.map_comp)"], ["proof (state)\nthis:\n  image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n  anonymous_profile R\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "have \"x \\<in> scf R \\<longleftrightarrow> ?\\<sigma> x \\<in> ?\\<sigma> ` scf R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> scf R) =\n    (permutation_of_list xs x \\<in> permutation_of_list xs ` scf R)", "by (blast dest: injD[OF permutes_inj[OF perm']])"], ["proof (state)\nthis:\n  (x \\<in> scf R) =\n  (permutation_of_list xs x \\<in> permutation_of_list xs ` scf R)\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "also"], ["proof (state)\nthis:\n  (x \\<in> scf R) =\n  (permutation_of_list xs x \\<in> permutation_of_list xs ` scf R)\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "from eq' x wf' perm'"], ["proof (chain)\npicking this:\n  image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n  anonymous_profile R\n  x \\<in> alts\n  y = permutation_of_list xs x\n  is_pref_profile R\n  permutation_of_list xs permutes alts", "have \"?\\<sigma> ` scf R = scf R\""], ["proof (prove)\nusing this:\n  image_mset (map ((`) (permutation_of_list xs))) (anonymous_profile R) =\n  anonymous_profile R\n  x \\<in> alts\n  y = permutation_of_list xs x\n  is_pref_profile R\n  permutation_of_list xs permutes alts\n\ngoal (1 subgoal):\n 1. permutation_of_list xs ` scf R = scf R", "by (intro scf_automorphism) \n       (simp_all add: R.anonymous_profile_permute pref_profile_from_tableI)"], ["proof (state)\nthis:\n  permutation_of_list xs ` scf R = scf R\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "finally"], ["proof (chain)\npicking this:\n  (x \\<in> scf R) = (permutation_of_list xs x \\<in> scf R)", "show ?thesis"], ["proof (prove)\nusing this:\n  (x \\<in> scf R) = (permutation_of_list xs x \\<in> scf R)\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "using x"], ["proof (prove)\nusing this:\n  (x \\<in> scf R) = (permutation_of_list xs x \\<in> scf R)\n  x \\<in> alts\n  y = permutation_of_list xs x\n\ngoal (1 subgoal):\n 1. (x \\<in> scf R) = (y \\<in> scf R)", "by simp"], ["proof (state)\nthis:\n  (x \\<in> scf R) = (y \\<in> scf R)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Weighted-majoritarian SCFs\\<close>"], ["", "locale pairwise_scf = social_choice_function agents alts scf\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf +\n  assumes pairwise:\n    \"is_pref_profile R1 \\<Longrightarrow> is_pref_profile R2 \\<Longrightarrow> weighted_majority R1 = weighted_majority R2 \\<Longrightarrow>\n       scf R1 = scf R2\""], ["", "subsection \\<open>Pareto efficiency\\<close>"], ["", "locale pareto_efficient_scf = social_choice_function agents alts scf\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf +\n  assumes pareto_efficient: \n    \"is_pref_profile R \\<Longrightarrow> scf R \\<inter> pareto_losers R = {}\"\nbegin"], ["", "lemma pareto_efficient':\n  assumes \"is_pref_profile R\" \"y \\<succ>[Pareto(R)] x\"\n  shows   \"x \\<notin> scf R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> scf R", "using pareto_efficient[of R] assms"], ["proof (prove)\nusing this:\n  is_pref_profile R \\<Longrightarrow> scf R \\<inter> pareto_losers R = {}\n  is_pref_profile R\n  x \\<prec>[Pareto R] y\n\ngoal (1 subgoal):\n 1. x \\<notin> scf R", "by (auto simp: pareto_losers_def)"], ["", "lemma pareto_efficient'':\n  assumes \"is_pref_profile R\" \"i \\<in> agents\"  \"\\<forall>i\\<in>agents. y \\<succeq>[R i] x\" \"\\<not>y \\<preceq>[R i] x\"\n  shows   \"x \\<notin> scf R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> scf R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> scf R", "from assms(1)"], ["proof (chain)\npicking this:\n  is_pref_profile R", "interpret pref_profile_wf agents alts R"], ["proof (prove)\nusing this:\n  is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile R", "."], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> scf R", "from assms(2-)"], ["proof (chain)\npicking this:\n  i \\<in> agents\n  \\<forall>i\\<in>agents. R i x y\n  \\<not> R i y x", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  \\<forall>i\\<in>agents. R i x y\n  \\<not> R i y x\n\ngoal (1 subgoal):\n 1. x \\<notin> scf R", "by (intro pareto_efficient'[OF assms(1), of _ y])\n       (auto simp: Pareto_iff strongly_preferred_def)"], ["proof (state)\nthis:\n  x \\<notin> scf R\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Set extensions\\<close>"], ["", "type_synonym 'alt set_extension = \"'alt relation \\<Rightarrow> 'alt set relation\""], ["", "definition Kelly :: \"'alt set_extension\" where\n  \"A \\<succeq>[Kelly(R)] B \\<longleftrightarrow> (\\<forall>a\\<in>A. \\<forall>b\\<in>B. a \\<succeq>[R] b)\""], ["", "lemma Kelly_strict_iff: \"A \\<succ>[Kelly(R)] B \\<longleftrightarrow> ((\\<forall>a\\<in>A. \\<forall>b\\<in>B. R b a) \\<and> \\<not> (\\<forall>a\\<in>B. \\<forall>b\\<in>A. R b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<prec>[Kelly R] A =\n    ((\\<forall>a\\<in>A. \\<forall>b\\<in>B. R b a) \\<and>\n     \\<not> (\\<forall>a\\<in>B. \\<forall>b\\<in>A. R b a))", "unfolding strongly_preferred_def Kelly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>a\\<in>A. \\<forall>b\\<in>B. R b a) \\<and>\n     \\<not> (\\<forall>a\\<in>B. \\<forall>b\\<in>A. R b a)) =\n    ((\\<forall>a\\<in>A. \\<forall>b\\<in>B. R b a) \\<and>\n     \\<not> (\\<forall>a\\<in>B. \\<forall>b\\<in>A. R b a))", ".."], ["", "lemmas Kelly_eval = Kelly_def Kelly_strict_iff"], ["", "definition Fishb :: \"'alt set_extension\" where\n  \"A \\<succeq>[Fishb(R)] B \\<longleftrightarrow> (\\<forall>a\\<in>A. \\<forall>b\\<in>B-A. a \\<succeq>[R] b) \\<and> (\\<forall>a\\<in>A-B. \\<forall>b\\<in>B. a \\<succeq>[R] b)\""], ["", "lemma Fishb_strict_iff: \n  \"A \\<succ>[Fishb(R)] B \\<longleftrightarrow> \n     ((\\<forall>a\\<in>A. \\<forall>b\\<in>B - A. R b a) \\<and> (\\<forall>a\\<in>A - B. \\<forall>b\\<in>B. R b a)) \\<and>\n     \\<not> ((\\<forall>a\\<in>B. \\<forall>b\\<in>A - B. R b a) \\<and> (\\<forall>a\\<in>B - A. \\<forall>b\\<in>A. R b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<prec>[Fishb R] A =\n    (((\\<forall>a\\<in>A. \\<forall>b\\<in>B - A. R b a) \\<and>\n      (\\<forall>a\\<in>A - B. \\<forall>b\\<in>B. R b a)) \\<and>\n     \\<not> ((\\<forall>a\\<in>B. \\<forall>b\\<in>A - B. R b a) \\<and>\n             (\\<forall>a\\<in>B - A. \\<forall>b\\<in>A. R b a)))", "unfolding strongly_preferred_def Fishb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<forall>a\\<in>A. \\<forall>b\\<in>B - A. R b a) \\<and>\n      (\\<forall>a\\<in>A - B. \\<forall>b\\<in>B. R b a)) \\<and>\n     \\<not> ((\\<forall>a\\<in>B. \\<forall>b\\<in>A - B. R b a) \\<and>\n             (\\<forall>a\\<in>B - A. \\<forall>b\\<in>A. R b a))) =\n    (((\\<forall>a\\<in>A. \\<forall>b\\<in>B - A. R b a) \\<and>\n      (\\<forall>a\\<in>A - B. \\<forall>b\\<in>B. R b a)) \\<and>\n     \\<not> ((\\<forall>a\\<in>B. \\<forall>b\\<in>A - B. R b a) \\<and>\n             (\\<forall>a\\<in>B - A. \\<forall>b\\<in>A. R b a)))", ".."], ["", "lemmas Fishb_eval = Fishb_def Fishb_strict_iff"], ["", "subsection \\<open>Strategyproofness\\<close>"], ["", "locale strategyproof_scf = \n  social_choice_function agents alts scf\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf +\n  fixes set_ext :: \"'alt set_extension\"\n  assumes strategyproof: \n    \"is_pref_profile R \\<Longrightarrow> total_preorder_on alts Ri' \\<Longrightarrow> i \\<in> agents \\<Longrightarrow>\n       \\<not> scf (R(i := Ri')) \\<succ>[set_ext(R i)] scf R\""], ["", "locale strategyproof_anonymous_scf =\n  anonymous_scf agents alts scf + strategyproof_scf agents alts scf set_ext\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf and set_ext\nbegin"], ["", "lemma strategyproof':\n  assumes \"is_pref_profile R1\" \"is_pref_profile R2\" \"i \\<in> agents\" \"j \\<in> agents\"\n  assumes \"anonymous_profile R2 = anonymous_profile R1 - \n             {#weak_ranking (R1 i)#} + {#weak_ranking (R2 j)#}\"\n  shows   \"\\<not>scf R2 \\<succ>[set_ext (R1 i)] scf R1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "let ?R3 = \"R1(i := R2 j)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "interpret R1: pref_profile_wf agents alts R1"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R1", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "interpret R2: pref_profile_wf agents alts R2"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_pref_profile R2", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "from \\<open>j \\<in> agents\\<close>"], ["proof (chain)\npicking this:\n  j \\<in> agents", "have \"total_preorder_on alts (R2 j)\""], ["proof (prove)\nusing this:\n  j \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R2 j)", "by simp"], ["proof (state)\nthis:\n  total_preorder_on alts (R2 j)\n\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "from strategyproof[OF assms(1) this \\<open>i \\<in> agents\\<close>]"], ["proof (chain)\npicking this:\n  \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf (R1(i := R2 j))", "have \"\\<not>scf ?R3 \\<succ>[set_ext (R1 i)] scf R1\""], ["proof (prove)\nusing this:\n  \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf (R1(i := R2 j))\n\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf (R1(i := R2 j))", "."], ["proof (state)\nthis:\n  \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf (R1(i := R2 j))\n\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "also"], ["proof (state)\nthis:\n  \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf (R1(i := R2 j))\n\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "from assms"], ["proof (chain)\npicking this:\n  is_pref_profile R1\n  is_pref_profile R2\n  i \\<in> agents\n  j \\<in> agents\n  anonymous_profile R2 =\n  anonymous_profile R1 - {#weak_ranking (R1 i)#} + {#weak_ranking (R2 j)#}", "have \"scf ?R3 = scf R2\""], ["proof (prove)\nusing this:\n  is_pref_profile R1\n  is_pref_profile R2\n  i \\<in> agents\n  j \\<in> agents\n  anonymous_profile R2 =\n  anonymous_profile R1 - {#weak_ranking (R1 i)#} + {#weak_ranking (R2 j)#}\n\ngoal (1 subgoal):\n 1. scf (R1(i := R2 j)) = scf R2", "by (intro anonymous') (simp_all add: R1.anonymous_profile_update)"], ["proof (state)\nthis:\n  scf (R1(i := R2 j)) = scf R2\n\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "finally"], ["proof (chain)\npicking this:\n  \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2\n\ngoal (1 subgoal):\n 1. \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2", "."], ["proof (state)\nthis:\n  \\<not> scf R1 \\<prec>[set_ext (R1 i)] scf R2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context preorder_on\nbegin"], ["", "lemma strict_not_outside:\n  assumes \"x \\<prec>[le] y\"\n  shows   \"x \\<in> carrier\" \"y \\<in> carrier\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier &&& y \\<in> carrier", "using assms not_outside[of x y]"], ["proof (prove)\nusing this:\n  x \\<prec>[le] y\n  le x y \\<Longrightarrow> x \\<in> carrier\n  le x y \\<Longrightarrow> y \\<in> carrier\n\ngoal (1 subgoal):\n 1. x \\<in> carrier &&& y \\<in> carrier", "unfolding strongly_preferred_def"], ["proof (prove)\nusing this:\n  le x y \\<and> \\<not> le y x\n  le x y \\<Longrightarrow> x \\<in> carrier\n  le x y \\<Longrightarrow> y \\<in> carrier\n\ngoal (1 subgoal):\n 1. x \\<in> carrier &&& y \\<in> carrier", "by blast+"], ["", "end"], ["", "subsection \\<open>Lifting preferences\\<close>"], ["", "text \\<open>\n  Preference profiles can be lifted to a setting with more agents and alternatives by padding\n  them with dummy agents and alternatives in such a way that every original agent prefers and\n  original alternative over any dummy alternative and is indifferent between the dummy alternatives.\n  Moreover, every dummy agent is completely indifferent.\n\\<close>"], ["", "definition lift_prefs :: \n    \"'alt set \\<Rightarrow> 'alt set \\<Rightarrow> 'alt relation \\<Rightarrow> 'alt relation\" where\n  \"lift_prefs alts alts' R = (\\<lambda>x y. \n     x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x = y \\<or> x \\<notin> alts \\<or> (y \\<in> alts \\<and> R x y)))\""], ["", "lemma lift_prefs_wf:\n  assumes \"total_preorder_on alts R\" \"alts \\<subseteq> alts'\"\n  shows   \"total_preorder_on alts' (lift_prefs alts alts' R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. total_preorder_on alts' (lift_prefs alts alts' R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. total_preorder_on alts' (lift_prefs alts alts' R)", "interpret R: total_preorder_on alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_preorder_on alts R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. total_preorder_on alts' (lift_prefs alts alts' R)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_preorder_on alts' (lift_prefs alts alts' R)", "by standard (insert R.total, auto dest: R.trans simp: lift_prefs_def)"], ["proof (state)\nthis:\n  total_preorder_on alts' (lift_prefs alts alts' R)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition lift_pref_profile :: \n    \"'agent set \\<Rightarrow> 'alt set \\<Rightarrow> 'agent set \\<Rightarrow> 'alt set \\<Rightarrow>\n       ('agent, 'alt) pref_profile \\<Rightarrow> ('agent, 'alt) pref_profile\" where\n  \"lift_pref_profile agents alts agents' alts' R = (\\<lambda>i x y. \n     x \\<in> alts' \\<and> y \\<in> alts' \\<and> i \\<in> agents' \\<and>\n     (x = y \\<or> x \\<notin> alts \\<or> i \\<notin> agents \\<or> (y \\<in> alts \\<and> R i x y)))\""], ["", "lemma lift_pref_profile_conv_vector:\n  assumes \"i \\<in> agents\" \"i \\<in> agents'\"\n  shows   \"lift_pref_profile agents alts agents' alts' R i = lift_prefs alts alts' (R i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts' R i =\n    lift_prefs alts alts' (R i)", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts' R i =\n    lift_prefs alts alts' (R i)", "by (auto simp: lift_pref_profile_def lift_prefs_def)"], ["", "lemma lift_pref_profile_wf:\n  assumes \"pref_profile_wf agents alts R\"\n  assumes \"agents \\<subseteq> agents'\" \"alts \\<subseteq> alts'\" \"finite alts'\"\n  defines \"R' \\<equiv> lift_pref_profile agents alts agents' alts' R\"\n  shows   \"pref_profile_wf agents' alts' R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "from assms"], ["proof (chain)\npicking this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R", "interpret R: pref_profile_wf agents alts"], ["proof (prove)\nusing this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "have \"finite_total_preorder_on alts' (R' i)\" \n    if i: \"i \\<in> agents'\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts' (R' i)", "proof (cases \"i \\<in> agents\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow> finite_total_preorder_on alts' (R' i)\n 2. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "case True"], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow> finite_total_preorder_on alts' (R' i)\n 2. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret finite_total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow> finite_total_preorder_on alts' (R' i)\n 2. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "from True assms"], ["proof (chain)\npicking this:\n  i \\<in> agents\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts' (R' i)", "by unfold_locales (auto simp: lift_pref_profile_def dest: total intro: trans)"], ["proof (state)\nthis:\n  finite_total_preorder_on alts' (R' i)\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "case False"], ["proof (state)\nthis:\n  i \\<notin> agents\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    finite_total_preorder_on alts' (R' i)", "with assms i"], ["proof (chain)\npicking this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n  i \\<in> agents'\n  i \\<notin> agents", "show ?thesis"], ["proof (prove)\nusing this:\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n  i \\<in> agents'\n  i \\<notin> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts' (R' i)", "by unfold_locales (simp_all add: lift_pref_profile_def)"], ["proof (state)\nthis:\n  finite_total_preorder_on alts' (R' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "moreover"], ["proof (state)\nthis:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "have \"R' i = (\\<lambda>_ _. False)\" if \"i \\<notin> agents'\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. R' i = (\\<lambda>_ _. False)", "unfolding lift_pref_profile_def R'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (\\<lambda>_ _. False)", "using that"], ["proof (prove)\nusing this:\n  i \\<notin> agents'\n\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (\\<lambda>_ _. False)", "by simp"], ["proof (state)\nthis:\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "ultimately"], ["proof (chain)\npicking this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "unfolding pref_profile_wf_def"], ["proof (prove)\nusing this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n\ngoal (1 subgoal):\n 1. (agents' \\<noteq> {} \\<and> alts' \\<noteq> {}) \\<and>\n    (\\<forall>i.\n        i \\<in> agents' \\<longrightarrow>\n        finite_total_preorder_on alts' (R' i)) \\<and>\n    (\\<forall>i x y. i \\<notin> agents' \\<longrightarrow> \\<not> R' i x y)", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<in> agents' \\<Longrightarrow> finite_total_preorder_on alts' (R' ?i)\n  ?i \\<notin> agents' \\<Longrightarrow> R' ?i = (\\<lambda>_ _. False)\n  pref_profile_wf agents alts R\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  finite alts'\n  R' \\<equiv> lift_pref_profile agents alts agents' alts' R\n\ngoal (1 subgoal):\n 1. (agents' \\<noteq> {} \\<and> alts' \\<noteq> {}) \\<and>\n    (\\<forall>i.\n        i \\<in> agents' \\<longrightarrow>\n        finite_total_preorder_on alts' (R' i)) \\<and>\n    (\\<forall>i x y. i \\<notin> agents' \\<longrightarrow> \\<not> R' i x y)", "by auto"], ["proof (state)\nthis:\n  pref_profile_wf agents' alts' R'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_pref_profile_permute_agents:\n  assumes \"\\<pi> permutes agents\" \"agents \\<subseteq> agents'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) = \n             lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) =\n    lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>", "using assms permutes_subset[OF assms]"], ["proof (prove)\nusing this:\n  \\<pi> permutes agents\n  agents \\<subseteq> agents'\n  \\<pi> permutes agents'\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts' (R \\<circ> \\<pi>) =\n    lift_pref_profile agents alts agents' alts' R \\<circ> \\<pi>", "by (auto simp add: lift_pref_profile_def o_def permutes_in_image)"], ["", "lemma lift_pref_profile_permute_alts:\n  assumes \"\\<sigma> permutes alts\" \"alts \\<subseteq> alts'\"\n  shows   \"lift_pref_profile agents alts agents' alts' (permute_profile \\<sigma> R) = \n             permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "from assms"], ["proof (chain)\npicking this:\n  \\<sigma> permutes alts\n  alts \\<subseteq> alts'", "have inv: \"inv \\<sigma> permutes alts\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts\n  alts \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. inv \\<sigma> permutes alts", "by (intro permutes_inv)"], ["proof (state)\nthis:\n  inv \\<sigma> permutes alts\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "from this assms(2)"], ["proof (chain)\npicking this:\n  inv \\<sigma> permutes alts\n  alts \\<subseteq> alts'", "have \"inv \\<sigma> permutes alts'\""], ["proof (prove)\nusing this:\n  inv \\<sigma> permutes alts\n  alts \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. inv \\<sigma> permutes alts'", "by (rule permutes_subset)"], ["proof (state)\nthis:\n  inv \\<sigma> permutes alts'\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "with inv"], ["proof (chain)\npicking this:\n  inv \\<sigma> permutes alts\n  inv \\<sigma> permutes alts'", "show ?thesis"], ["proof (prove)\nusing this:\n  inv \\<sigma> permutes alts\n  inv \\<sigma> permutes alts'\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "using assms permutes_inj[OF \\<open>inv \\<sigma> permutes alts\\<close>]"], ["proof (prove)\nusing this:\n  inv \\<sigma> permutes alts\n  inv \\<sigma> permutes alts'\n  \\<sigma> permutes alts\n  alts \\<subseteq> alts'\n  inj (inv \\<sigma>)\n\ngoal (1 subgoal):\n 1. lift_pref_profile agents alts agents' alts'\n     (permute_profile \\<sigma> R) =\n    permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)", "by (fastforce simp add: lift_pref_profile_def permutes_in_image\n          permute_profile_def fun_eq_iff dest: injD)"], ["proof (state)\nthis:\n  lift_pref_profile agents alts agents' alts' (permute_profile \\<sigma> R) =\n  permute_profile \\<sigma> (lift_pref_profile agents alts agents' alts' R)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes agents alts R agents' alts' R'\n  assumes R_wf: \"pref_profile_wf agents alts R\"\n  assumes election: \"agents \\<subseteq> agents'\" \"alts \\<subseteq> alts'\" \"alts \\<noteq> {}\" \"agents \\<noteq> {}\" \"finite alts'\"\n  defines \"R' \\<equiv> lift_pref_profile agents alts agents' alts' R\"\nbegin"], ["", "interpretation R: pref_profile_wf agents alts R"], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents alts R", "by fact"], ["", "interpretation R': pref_profile_wf agents' alts' R'"], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "using election R_wf"], ["proof (prove)\nusing this:\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  pref_profile_wf agents alts R\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R'", "by (simp add: R'_def lift_pref_profile_wf)"], ["", "lemma lift_pref_profile_strict_iff:\n  \"x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y \\<longleftrightarrow>\n     i \\<in> agents \\<and> ((y \\<in> alts \\<and> x \\<in> alts' - alts) \\<or> x \\<prec>[R i] y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "proof (cases \"i \\<in> agents\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n 2. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "case True"], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n 2. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n 2. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "using not_outside election"], ["proof (prove)\nusing this:\n  R i ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  R i ?x ?y \\<Longrightarrow> ?y \\<in> alts\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n\ngoal (1 subgoal):\n 1. x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "by (auto simp: lift_pref_profile_def strongly_preferred_def)"], ["proof (state)\nthis:\n  x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n  (i \\<in> agents \\<and>\n   (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    x \\<prec>[lift_pref_profile agents alts agents' alts' R i] y =\n    (i \\<in> agents \\<and>\n     (y \\<in> alts \\<and> x \\<in> alts' - alts \\<or> x \\<prec>[R i] y))", "qed (simp_all add: lift_pref_profile_def strongly_preferred_def)"], ["", "lemma preferred_alts_lift_pref_profile: \n  assumes i: \"i \\<in> agents'\" and x: \"x \\<in> alts'\"\n  shows   \"preferred_alts (R' i) x = \n             (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x else alts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "proof (cases \"i \\<in> agents\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')\n 2. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "assume i: \"i \\<in> agents\""], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')\n 2. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret Ri: total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')\n 2. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "using i x election Ri.not_outside"], ["proof (prove)\nusing this:\n  i \\<in> agents\n  x \\<in> alts'\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  R i ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  R i ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "by (auto simp: preferred_alts_def R'_def lift_pref_profile_def Ri.refl)"], ["proof (state)\nthis:\n  preferred_alts (R' i) x =\n  (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n   else alts')\n\ngoal (1 subgoal):\n 1. i \\<notin> agents \\<Longrightarrow>\n    preferred_alts (R' i) x =\n    (if i \\<in> agents \\<and> x \\<in> alts then preferred_alts (R i) x\n     else alts')", "qed (auto simp: preferred_alts_def R'_def lift_pref_profile_def i x)"], ["", "lemma lift_pref_profile_Pareto_iff:\n  \"x \\<preceq>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<or> x \\<preceq>[Pareto(R)] y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "from R.nonempty_agents"], ["proof (chain)\npicking this:\n  agents \\<noteq> {}", "obtain i where i: \"i \\<in> agents\""], ["proof (prove)\nusing this:\n  agents \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>i. i \\<in> agents \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "then"], ["proof (chain)\npicking this:\n  i \\<in> agents", "interpret Ri: finite_total_preorder_on alts \"R i\""], ["proof (prove)\nusing this:\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. finite_total_preorder_on alts (R i)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Pareto R' x y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))", "unfolding R'.Pareto_iff R.Pareto_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>agents'. R' i x y) =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<or> (\\<forall>i\\<in>agents. R i x y)))", "unfolding R'_def lift_pref_profile_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>agents'.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<or> (\\<forall>i\\<in>agents. R i x y)))", "using election i"], ["proof (prove)\nusing this:\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  i \\<in> agents\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>agents'.\n        x \\<in> alts' \\<and>\n        y \\<in> alts' \\<and>\n        i \\<in> agents' \\<and>\n        (x = y \\<or>\n         x \\<notin> alts \\<or>\n         i \\<notin> agents \\<or> y \\<in> alts \\<and> R i x y)) =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<or> (\\<forall>i\\<in>agents. R i x y)))", "by (auto simp: preorder_on.refl[OF R.in_dom] \n      simp del: R.nonempty_alts R.nonempty_agents  intro: Ri.not_outside)"], ["proof (state)\nthis:\n  Pareto R' x y =\n  (x \\<in> alts' \\<and>\n   y \\<in> alts' \\<and> (x \\<notin> alts \\<or> Pareto R x y))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_pref_profile_Pareto_strict_iff:\n  \"x \\<prec>[Pareto(R')] y \\<longleftrightarrow> x \\<in> alts' \\<and> y \\<in> alts' \\<and> (x \\<notin> alts \\<and> y \\<in> alts \\<or> x \\<prec>[Pareto(R)] y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<prec>[Pareto R'] y =\n    (x \\<in> alts' \\<and>\n     y \\<in> alts' \\<and>\n     (x \\<notin> alts \\<and> y \\<in> alts \\<or> x \\<prec>[Pareto R] y))", "by (auto simp: strongly_preferred_def lift_pref_profile_Pareto_iff R.Pareto.not_outside)"], ["", "lemma pareto_losers_lift_pref_profile:\n  shows   \"pareto_losers R' = pareto_losers R \\<union> (alts' - alts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "have A: \"x \\<in> alts\" \"y \\<in> alts\" if \"x \\<prec>[Pareto(R)] y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> alts &&& y \\<in> alts", "using that R.Pareto.not_outside"], ["proof (prove)\nusing this:\n  x \\<prec>[Pareto R] y\n  Pareto R ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  Pareto R ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts &&& y \\<in> alts", "unfolding strongly_preferred_def"], ["proof (prove)\nusing this:\n  Pareto R x y \\<and> \\<not> Pareto R y x\n  Pareto R ?x ?y \\<Longrightarrow> ?x \\<in> alts\n  Pareto R ?x ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts &&& y \\<in> alts", "by auto"], ["proof (state)\nthis:\n  ?x \\<prec>[Pareto R] ?y \\<Longrightarrow> ?x \\<in> alts\n  ?x \\<prec>[Pareto R] ?y \\<Longrightarrow> ?y \\<in> alts\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "have B: \"x \\<in> alts'\" if \"x \\<in> alts\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> alts'", "using election that"], ["proof (prove)\nusing this:\n  agents \\<subseteq> agents'\n  alts \\<subseteq> alts'\n  alts \\<noteq> {}\n  agents \\<noteq> {}\n  finite alts'\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts'", "by blast"], ["proof (state)\nthis:\n  ?x \\<in> alts \\<Longrightarrow> ?x \\<in> alts'\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "from R.nonempty_alts"], ["proof (chain)\npicking this:\n  alts \\<noteq> {}", "obtain x where x: \"x \\<in> alts\""], ["proof (prove)\nusing this:\n  alts \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> alts \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. pareto_losers R' = pareto_losers R \\<union> (alts' - alts)", "unfolding pareto_losers_def lift_pref_profile_Pareto_strict_iff [abs_def]"], ["proof (prove)\nusing this:\n  x \\<in> alts\n\ngoal (1 subgoal):\n 1. {x. \\<exists>y.\n           x \\<in> alts' \\<and>\n           y \\<in> alts' \\<and>\n           (x \\<notin> alts \\<and> y \\<in> alts \\<or>\n            x \\<prec>[Pareto R] y)} =\n    {x. Ex (strongly_preferred x (Pareto R))} \\<union> (alts' - alts)", "by (auto dest: A B)"], ["proof (state)\nthis:\n  pareto_losers R' = pareto_losers R \\<union> (alts' - alts)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Lowering SCFs\\<close>"], ["", "text \\<open>\n  Using the preference lifting, we can now \\emph{lower} an SCF to a setting with fewer agents\n  and alternatives under mild conditions to the original SCF. This preserves many nice properties, \n  such as anonymity, neutrality, and strategyproofness.\n\\<close>"], ["", "locale scf_lowering = \n  pareto_efficient_scf agents alts scf\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf +\n  fixes agents' alts' \n  assumes agents'_subset: \"agents' \\<subseteq> agents\" and alts'_subset: \"alts' \\<subseteq> alts\"\n      and agents'_nonempty [simp]: \"agents' \\<noteq> {}\" and alts'_nonempty [simp]: \"alts' \\<noteq> {}\"\nbegin"], ["", "lemma finite_agents' [simp]: \"finite agents'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite agents'", "using agents'_subset finite_agents"], ["proof (prove)\nusing this:\n  agents' \\<subseteq> agents\n  finite agents\n\ngoal (1 subgoal):\n 1. finite agents'", "by (rule finite_subset)"], ["", "lemma finite_alts' [simp]: \"finite alts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite alts'", "using alts'_subset finite_alts"], ["proof (prove)\nusing this:\n  alts' \\<subseteq> alts\n  finite alts\n\ngoal (1 subgoal):\n 1. finite alts'", "by (rule finite_subset)"], ["", "abbreviation lift :: \"('agent, 'alt) pref_profile \\<Rightarrow> ('agent, 'alt) pref_profile\" where\n  \"lift \\<equiv> lift_pref_profile agents' alts' agents alts\""], ["", "definition lowered :: \"('agent, 'alt) pref_profile \\<Rightarrow> 'alt set\" where\n  \"lowered = scf \\<circ> lift\""], ["", "lemma lift_wf [simp, intro]: \n  \"pref_profile_wf agents' alts' R \\<Longrightarrow> is_pref_profile (lift R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R \\<Longrightarrow>\n    is_pref_profile (lift R)", "using alts'_subset agents'_subset"], ["proof (prove)\nusing this:\n  alts' \\<subseteq> alts\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. pref_profile_wf agents' alts' R \\<Longrightarrow>\n    is_pref_profile (lift R)", "by (intro lift_pref_profile_wf) simp_all"], ["", "sublocale lowered: election agents' alts'"], ["proof (prove)\ngoal (1 subgoal):\n 1. election agents' alts'", "by unfold_locales simp_all"], ["", "lemma preferred_alts_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> i \\<in> agents \\<Longrightarrow> x \\<in> alts \\<Longrightarrow>\n     preferred_alts (lift R i) x = \n       (if i \\<in> agents' \\<and> x \\<in> alts' then preferred_alts (R i) x else alts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents;\n     x \\<in> alts\\<rbrakk>\n    \\<Longrightarrow> preferred_alts (lift R i) x =\n                      (if i \\<in> agents' \\<and> x \\<in> alts'\n                       then preferred_alts (R i) x else alts)", "using alts'_subset agents'_subset"], ["proof (prove)\nusing this:\n  alts' \\<subseteq> alts\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lowered.is_pref_profile R; i \\<in> agents;\n     x \\<in> alts\\<rbrakk>\n    \\<Longrightarrow> preferred_alts (lift R i) x =\n                      (if i \\<in> agents' \\<and> x \\<in> alts'\n                       then preferred_alts (R i) x else alts)", "by (intro preferred_alts_lift_pref_profile) simp_all"], ["", "lemma pareto_losers_lift:\n  \"lowered.is_pref_profile R \\<Longrightarrow> pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R \\<Longrightarrow>\n    pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')", "using agents'_subset alts'_subset"], ["proof (prove)\nusing this:\n  agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R \\<Longrightarrow>\n    pareto_losers (lift R) = pareto_losers R \\<union> (alts - alts')", "by (intro pareto_losers_lift_pref_profile) simp_all"], ["", "sublocale lowered: social_choice_function agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. social_choice_function agents' alts' lowered", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<noteq> {}\n 2. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<subseteq> alts'", "fix R"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<noteq> {}\n 2. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<subseteq> alts'", "assume R_wf: \"pref_profile_wf agents' alts' R\""], ["proof (state)\nthis:\n  lowered.is_pref_profile R\n\ngoal (2 subgoals):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<noteq> {}\n 2. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<subseteq> alts'", "from R_wf"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R", "have R'_wf: \"pref_profile_wf agents alts (lift R)\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile (lift R)", "by (rule lift_wf)"], ["proof (state)\nthis:\n  is_pref_profile (lift R)\n\ngoal (2 subgoals):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<noteq> {}\n 2. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<subseteq> alts'", "show \"lowered R \\<subseteq> alts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered R \\<subseteq> alts'", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lowered R \\<Longrightarrow> x \\<in> alts'", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lowered R \\<Longrightarrow> x \\<in> alts'", "assume \"x \\<in> lowered R\""], ["proof (state)\nthis:\n  x \\<in> lowered R\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lowered R \\<Longrightarrow> x \\<in> alts'", "hence \"x \\<in> scf (lift R)\""], ["proof (prove)\nusing this:\n  x \\<in> lowered R\n\ngoal (1 subgoal):\n 1. x \\<in> scf (lift R)", "by (auto simp: o_def lowered_def)"], ["proof (state)\nthis:\n  x \\<in> scf (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lowered R \\<Longrightarrow> x \\<in> alts'", "moreover"], ["proof (state)\nthis:\n  x \\<in> scf (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lowered R \\<Longrightarrow> x \\<in> alts'", "have \"scf (lift R) \\<inter> pareto_losers (lift R) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scf (lift R) \\<inter> pareto_losers (lift R) = {}", "by (intro pareto_efficient R'_wf)"], ["proof (state)\nthis:\n  scf (lift R) \\<inter> pareto_losers (lift R) = {}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> lowered R \\<Longrightarrow> x \\<in> alts'", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> scf (lift R)\n  scf (lift R) \\<inter> pareto_losers (lift R) = {}", "show \"x \\<in> alts'\""], ["proof (prove)\nusing this:\n  x \\<in> scf (lift R)\n  scf (lift R) \\<inter> pareto_losers (lift R) = {}\n\ngoal (1 subgoal):\n 1. x \\<in> alts'", "using scf_alts[of \"lift R\"]"], ["proof (prove)\nusing this:\n  x \\<in> scf (lift R)\n  scf (lift R) \\<inter> pareto_losers (lift R) = {}\n  is_pref_profile (lift R) \\<Longrightarrow> scf (lift R) \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. x \\<in> alts'", "by (auto simp: pareto_losers_lift R_wf R'_wf)"], ["proof (state)\nthis:\n  x \\<in> alts'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lowered R \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow> lowered R \\<noteq> {}", "show \"lowered R \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered R \\<noteq> {}", "using R'_wf"], ["proof (prove)\nusing this:\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. lowered R \\<noteq> {}", "by (auto simp: lowered_def scf_nonempty)"], ["proof (state)\nthis:\n  lowered R \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale lowered: pareto_efficient_scf agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. pareto_efficient_scf agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<inter> pareto_losers R = {}", "fix R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<inter> pareto_losers R = {}", "assume R_wf: \"pref_profile_wf agents' alts' R\""], ["proof (state)\nthis:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<inter> pareto_losers R = {}", "from R_wf"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R", "have R'_wf: \"pref_profile_wf agents alts (lift R)\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile (lift R)", "by (rule lift_wf)"], ["proof (state)\nthis:\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<inter> pareto_losers R = {}", "have \"lowered R \\<inter> pareto_losers (lift R) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered R \\<inter> pareto_losers (lift R) = {}", "unfolding lowered_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. scf (lift R) \\<inter> pareto_losers (lift R) = {}", "by (intro pareto_efficient R'_wf)"], ["proof (state)\nthis:\n  lowered R \\<inter> pareto_losers (lift R) = {}\n\ngoal (1 subgoal):\n 1. \\<And>R.\n       lowered.is_pref_profile R \\<Longrightarrow>\n       lowered R \\<inter> pareto_losers R = {}", "with R_wf"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R\n  lowered R \\<inter> pareto_losers (lift R) = {}", "show \"lowered R \\<inter> pareto_losers R = {}\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n  lowered R \\<inter> pareto_losers (lift R) = {}\n\ngoal (1 subgoal):\n 1. lowered R \\<inter> pareto_losers R = {}", "by (auto simp: pareto_losers_lift)"], ["proof (state)\nthis:\n  lowered R \\<inter> pareto_losers R = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale scf_lowering_anonymous = \n  anonymous_scf agents alts scf +\n  scf_lowering agents alts scf agents' alts'\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf agents' alts'\nbegin"], ["", "sublocale lowered: anonymous_scf agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. anonymous_scf agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "fix \\<pi> R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "assume \"\\<pi> permutes agents'\" and \"lowered.is_pref_profile R\""], ["proof (state)\nthis:\n  \\<pi> permutes agents'\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> R.\n       \\<lbrakk>\\<pi> permutes agents'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (R \\<circ> \\<pi>) = lowered R", "thus \"lowered (R \\<circ> \\<pi>) = lowered R\""], ["proof (prove)\nusing this:\n  \\<pi> permutes agents'\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. lowered (R \\<circ> \\<pi>) = lowered R", "using agents'_subset"], ["proof (prove)\nusing this:\n  \\<pi> permutes agents'\n  lowered.is_pref_profile R\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. lowered (R \\<circ> \\<pi>) = lowered R", "by (auto simp: lowered_def lift_pref_profile_permute_agents anonymous permutes_subset)"], ["proof (state)\nthis:\n  lowered (R \\<circ> \\<pi>) = lowered R\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale scf_lowering_neutral = \n  neutral_scf agents alts scf +\n  scf_lowering agents alts scf agents' alts'\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf agents' alts'\nbegin"], ["", "sublocale lowered: neutral_scf agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. neutral_scf agents' alts' lowered", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         \\<sigma> ` lowered R", "fix \\<sigma> R"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         \\<sigma> ` lowered R", "assume \"\\<sigma> permutes alts'\" and \"lowered.is_pref_profile R\""], ["proof (state)\nthis:\n  \\<sigma> permutes alts'\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> R.\n       \\<lbrakk>\\<sigma> permutes alts'; lowered.is_pref_profile R\\<rbrakk>\n       \\<Longrightarrow> lowered (permute_profile \\<sigma> R) =\n                         \\<sigma> ` lowered R", "thus \"lowered (permute_profile \\<sigma> R) = \\<sigma> ` lowered R\""], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts'\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. lowered (permute_profile \\<sigma> R) = \\<sigma> ` lowered R", "using alts'_subset"], ["proof (prove)\nusing this:\n  \\<sigma> permutes alts'\n  lowered.is_pref_profile R\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. lowered (permute_profile \\<sigma> R) = \\<sigma> ` lowered R", "by (auto simp: lowered_def lift_pref_profile_permute_alts neutral permutes_subset)"], ["proof (state)\nthis:\n  lowered (permute_profile \\<sigma> R) = \\<sigma> ` lowered R\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\n  The following is a technical condition that we need from a set extensions in order for\n  strategyproofness to survive the lowering. The condition could probably be weakened a bit,\n  but it is good enough for our purposes the way it is.\n\\<close>"], ["", "locale liftable_set_extension =\n  fixes alts' alts :: \"'alt set\" and set_ext :: \"'alt relation \\<Rightarrow> 'alt set relation\"\n  assumes set_ext_strong_lift:\n    \"total_preorder_on alts' R \\<Longrightarrow> A \\<noteq> {} \\<Longrightarrow> B \\<noteq> {} \\<Longrightarrow> A \\<subseteq> alts' \\<Longrightarrow> B \\<subseteq> alts' \\<Longrightarrow>\n       A \\<prec>[set_ext R] B \\<Longrightarrow> A \\<prec>[set_ext (lift_prefs alts' alts R)] B\""], ["", "lemma liftable_set_extensionI_weak:\n  assumes \"\\<And>R A B. total_preorder_on alts' R \\<Longrightarrow> A \\<noteq> {} \\<Longrightarrow> B \\<noteq> {} \\<Longrightarrow> \n                      A \\<subseteq> alts' \\<Longrightarrow> B \\<subseteq> alts' \\<Longrightarrow>\n              A \\<preceq>[set_ext R] B \\<longleftrightarrow> A \\<preceq>[set_ext (lift_prefs alts' alts R)] B\"\n  shows   \"liftable_set_extension alts' alts set_ext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftable_set_extension alts' alts set_ext", "proof (standard, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts';\n        A \\<prec>[set_ext R] B\\<rbrakk>\n       \\<Longrightarrow> A \\<prec>[set_ext (lift_prefs alts' alts R)] B", "case (1 R A B)"], ["proof (state)\nthis:\n  total_preorder_on alts' R\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n  A \\<prec>[set_ext R] B\n\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts';\n        A \\<prec>[set_ext R] B\\<rbrakk>\n       \\<Longrightarrow> A \\<prec>[set_ext (lift_prefs alts' alts R)] B", "from assms[of R A B] and assms[of R B A] and 1"], ["proof (chain)\npicking this:\n  \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n   A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n  \\<Longrightarrow> set_ext R A B = set_ext (lift_prefs alts' alts R) A B\n  \\<lbrakk>total_preorder_on alts' R; B \\<noteq> {}; A \\<noteq> {};\n   B \\<subseteq> alts'; A \\<subseteq> alts'\\<rbrakk>\n  \\<Longrightarrow> set_ext R B A = set_ext (lift_prefs alts' alts R) B A\n  total_preorder_on alts' R\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n  A \\<prec>[set_ext R] B", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n   A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n  \\<Longrightarrow> set_ext R A B = set_ext (lift_prefs alts' alts R) A B\n  \\<lbrakk>total_preorder_on alts' R; B \\<noteq> {}; A \\<noteq> {};\n   B \\<subseteq> alts'; A \\<subseteq> alts'\\<rbrakk>\n  \\<Longrightarrow> set_ext R B A = set_ext (lift_prefs alts' alts R) B A\n  total_preorder_on alts' R\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n  A \\<prec>[set_ext R] B\n\ngoal (1 subgoal):\n 1. A \\<prec>[set_ext (lift_prefs alts' alts R)] B", "by (auto simp: strongly_preferred_def)"], ["proof (state)\nthis:\n  A \\<prec>[set_ext (lift_prefs alts' alts R)] B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Kelly_liftable:\n  assumes \"alts' \\<subseteq> alts\"\n  shows   \"liftable_set_extension alts' alts Kelly\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftable_set_extension alts' alts Kelly", "proof (rule liftable_set_extensionI_weak, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n       \\<Longrightarrow> Kelly R A B = Kelly (lift_prefs alts' alts R) A B", "case (1 R A B)"], ["proof (state)\nthis:\n  total_preorder_on alts' R\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n       \\<Longrightarrow> Kelly R A B = Kelly (lift_prefs alts' alts R) A B", "interpret R: total_preorder_on alts' R"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_preorder_on alts' R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n       \\<Longrightarrow> Kelly R A B = Kelly (lift_prefs alts' alts R) A B", "from 1(2-5)"], ["proof (chain)\npicking this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'", "show ?case"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. Kelly R A B = Kelly (lift_prefs alts' alts R) A B", "using assms  R.refl"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n  alts' \\<subseteq> alts\n  ?x \\<in> alts' \\<Longrightarrow> R ?x ?x\n\ngoal (1 subgoal):\n 1. Kelly R A B = Kelly (lift_prefs alts' alts R) A B", "by (force simp: Kelly_def lift_prefs_def)"], ["proof (state)\nthis:\n  Kelly R A B = Kelly (lift_prefs alts' alts R) A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Fishburn_liftable:\n  assumes \"alts' \\<subseteq> alts\"\n  shows   \"liftable_set_extension alts' alts Fishb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftable_set_extension alts' alts Fishb", "proof (rule liftable_set_extensionI_weak, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n       \\<Longrightarrow> Fishb R A B = Fishb (lift_prefs alts' alts R) A B", "case (1 R A B)"], ["proof (state)\nthis:\n  total_preorder_on alts' R\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n       \\<Longrightarrow> Fishb R A B = Fishb (lift_prefs alts' alts R) A B", "interpret R: total_preorder_on alts' R"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_preorder_on alts' R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n       \\<Longrightarrow> Fishb R A B = Fishb (lift_prefs alts' alts R) A B", "have conj_cong: \"P1 \\<and> Q1 \\<longleftrightarrow> P2 \\<and> Q2\" if \"P1 \\<longleftrightarrow> P2\" \"Q1 \\<longleftrightarrow> Q2\" for P1 P2 Q1 Q2"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P1 \\<and> Q1) = (P2 \\<and> Q2)", "using that"], ["proof (prove)\nusing this:\n  P1 = P2\n  Q1 = Q2\n\ngoal (1 subgoal):\n 1. (P1 \\<and> Q1) = (P2 \\<and> Q2)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?P1.0 = ?P2.0; ?Q1.0 = ?Q2.0\\<rbrakk>\n  \\<Longrightarrow> (?P1.0 \\<and> ?Q1.0) = (?P2.0 \\<and> ?Q2.0)\n\ngoal (1 subgoal):\n 1. \\<And>R A B.\n       \\<lbrakk>total_preorder_on alts' R; A \\<noteq> {}; B \\<noteq> {};\n        A \\<subseteq> alts'; B \\<subseteq> alts'\\<rbrakk>\n       \\<Longrightarrow> Fishb R A B = Fishb (lift_prefs alts' alts R) A B", "from 1(2-5)"], ["proof (chain)\npicking this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'", "show ?case"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n\ngoal (1 subgoal):\n 1. Fishb R A B = Fishb (lift_prefs alts' alts R) A B", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. Fishb R A B = Fishb (lift_prefs alts' alts R) A B", "unfolding Fishb_def lift_prefs_def"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  B \\<noteq> {}\n  A \\<subseteq> alts'\n  B \\<subseteq> alts'\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. ((\\<forall>a\\<in>B. \\<forall>b\\<in>A - B. R b a) \\<and>\n     (\\<forall>a\\<in>B - A. \\<forall>b\\<in>A. R b a)) =\n    ((\\<forall>a\\<in>B.\n         \\<forall>b\\<in>A - B.\n            b \\<in> alts \\<and>\n            a \\<in> alts \\<and>\n            (b = a \\<or>\n             b \\<notin> alts' \\<or> a \\<in> alts' \\<and> R b a)) \\<and>\n     (\\<forall>a\\<in>B - A.\n         \\<forall>b\\<in>A.\n            b \\<in> alts \\<and>\n            a \\<in> alts \\<and>\n            (b = a \\<or>\n             b \\<notin> alts' \\<or> a \\<in> alts' \\<and> R b a)))", "by (intro conj_cong ball_cong refl) auto"], ["proof (state)\nthis:\n  Fishb R A B = Fishb (lift_prefs alts' alts R) A B\n\ngoal:\nNo subgoals!", "qed"], ["", "locale scf_lowering_strategyproof =\n  strategyproof_scf agents alts scf set_ext +\n  liftable_set_extension alts' alts set_ext +\n  scf_lowering agents alts scf agents' alts'\n  for agents :: \"'agent set\" and alts :: \"'alt set\" and scf agents' alts' set_ext\nbegin"], ["", "sublocale lowered: strategyproof_scf agents' alts' lowered"], ["proof (prove)\ngoal (1 subgoal):\n 1. strategyproof_scf agents' alts' lowered set_ext", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "fix R Ri' i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "assume R_wf: \"lowered.is_pref_profile R\" and Ri'_wf: \"total_preorder_on alts' Ri'\" \n     and i: \"i \\<in> agents'\""], ["proof (state)\nthis:\n  lowered.is_pref_profile R\n  total_preorder_on alts' Ri'\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "interpret R: pref_profile_wf agents' alts' R"], ["proof (prove)\ngoal (1 subgoal):\n 1. lowered.is_pref_profile R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "interpret Ri': total_preorder_on alts' Ri'"], ["proof (prove)\ngoal (1 subgoal):\n 1. total_preorder_on alts' Ri'", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "from R_wf"], ["proof (chain)\npicking this:\n  lowered.is_pref_profile R", "have R'_wf: \"is_pref_profile (lift R)\""], ["proof (prove)\nusing this:\n  lowered.is_pref_profile R\n\ngoal (1 subgoal):\n 1. is_pref_profile (lift R)", "by (rule lift_wf)\n\n  \\<comment> \\<open>We lift the alternative preference for the agent @{term i} in @{term R} to \n      preferences in the lifted profile. \\<close>"], ["proof (state)\nthis:\n  is_pref_profile (lift R)\n\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "define Ri'' where \"Ri'' = lift_prefs alts' alts Ri'\""], ["proof (state)\nthis:\n  Ri'' = lift_prefs alts' alts Ri'\n\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "have \"\\<not>scf (lift R) \\<prec>[set_ext (lift R i)] scf ((lift R)(i := Ri''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> scf (lift\n                 R) \\<prec>[set_ext (lift R i)] scf ((lift R)(i := Ri''))", "using i agents'_subset alts'_subset"], ["proof (prove)\nusing this:\n  i \\<in> agents'\n  agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. \\<not> scf (lift\n                 R) \\<prec>[set_ext (lift R i)] scf ((lift R)(i := Ri''))", "unfolding Ri''_def"], ["proof (prove)\nusing this:\n  i \\<in> agents'\n  agents' \\<subseteq> agents\n  alts' \\<subseteq> alts\n\ngoal (1 subgoal):\n 1. \\<not> scf (lift\n                 R) \\<prec>[set_ext\n                             (lift R\n                               i)] scf ((lift R)\n  (i := lift_prefs alts' alts Ri'))", "by (intro strategyproof R'_wf Ri'_wf lift_prefs_wf) auto"], ["proof (state)\nthis:\n  \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf ((lift R)(i := Ri''))\n\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "also"], ["proof (state)\nthis:\n  \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf ((lift R)(i := Ri''))\n\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "have \"(lift R)(i := Ri'') = lift (R(i := Ri'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift R)(i := Ri'') = lift (R(i := Ri'))", "using i agents'_subset"], ["proof (prove)\nusing this:\n  i \\<in> agents'\n  agents' \\<subseteq> agents\n\ngoal (1 subgoal):\n 1. (lift R)(i := Ri'') = lift (R(i := Ri'))", "by (auto simp: fun_eq_iff Ri''_def lift_pref_profile_def lift_prefs_def)"], ["proof (state)\nthis:\n  (lift R)(i := Ri'') = lift (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "finally"], ["proof (chain)\npicking this:\n  \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))", "have not_less: \"\\<not>scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))\""], ["proof (prove)\nusing this:\n  \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))\n\ngoal (1 subgoal):\n 1. \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))", "."], ["proof (state)\nthis:\n  \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))\n\ngoal (1 subgoal):\n 1. \\<And>R Ri' i.\n       \\<lbrakk>lowered.is_pref_profile R; total_preorder_on alts' Ri';\n        i \\<in> agents'\\<rbrakk>\n       \\<Longrightarrow> \\<not> lowered\n                                 R \\<prec>[set_ext\n      (R i)] lowered (R(i := Ri'))", "show \"\\<not>lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri'))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri')) \\<Longrightarrow>\n    False", "assume \"lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri'))\""], ["proof (state)\nthis:\n  lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri')) \\<Longrightarrow>\n    False", "hence \"lowered R \\<prec>[set_ext (lift_prefs alts' alts (R i))] lowered (R(i := Ri'))\""], ["proof (prove)\nusing this:\n  lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. lowered\n     R \\<prec>[set_ext (lift_prefs alts' alts (R i))] lowered (R(i := Ri'))", "by (intro set_ext_strong_lift R.prefs_wf'(1) i lowered.scf_nonempty lowered.scf_alts\n                R.wf_update R_wf Ri'_wf)"], ["proof (state)\nthis:\n  lowered\n   R \\<prec>[set_ext (lift_prefs alts' alts (R i))] lowered (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri')) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  lowered\n   R \\<prec>[set_ext (lift_prefs alts' alts (R i))] lowered (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri')) \\<Longrightarrow>\n    False", "have \"lift_prefs alts' alts (R i) = lift R i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_prefs alts' alts (R i) = lift R i", "using agents'_subset i"], ["proof (prove)\nusing this:\n  agents' \\<subseteq> agents\n  i \\<in> agents'\n\ngoal (1 subgoal):\n 1. lift_prefs alts' alts (R i) = lift R i", "by (subst lift_pref_profile_conv_vector) auto"], ["proof (state)\nthis:\n  lift_prefs alts' alts (R i) = lift R i\n\ngoal (1 subgoal):\n 1. lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri')) \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  lowered R \\<prec>[set_ext (lift R i)] lowered (R(i := Ri'))", "show False"], ["proof (prove)\nusing this:\n  lowered R \\<prec>[set_ext (lift R i)] lowered (R(i := Ri'))\n\ngoal (1 subgoal):\n 1. False", "using not_less"], ["proof (prove)\nusing this:\n  lowered R \\<prec>[set_ext (lift R i)] lowered (R(i := Ri'))\n  \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))\n\ngoal (1 subgoal):\n 1. False", "unfolding lowered_def o_def"], ["proof (prove)\nusing this:\n  scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))\n  \\<not> scf (lift R) \\<prec>[set_ext (lift R i)] scf (lift (R(i := Ri')))\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> lowered R \\<prec>[set_ext (R i)] lowered (R(i := Ri'))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}