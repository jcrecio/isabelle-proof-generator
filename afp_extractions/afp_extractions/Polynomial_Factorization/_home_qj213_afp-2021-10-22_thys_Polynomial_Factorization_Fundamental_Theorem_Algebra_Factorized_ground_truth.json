{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization/Fundamental_Theorem_Algebra_Factorized.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization", "problem_names": ["lemma fundamental_theorem_algebra_factorized: fixes p :: \"complex poly\"\n  shows \"\\<exists> as. smult (coeff p (degree p)) (\\<Prod> a \\<leftarrow> as. [:- a, 1:]) = p \\<and> length as = degree p\"", "lemma rsquarefree_card_degree: assumes p0: \"(p :: complex poly) \\<noteq> 0\"\n  shows \"rsquarefree p = (card {x. poly p x = 0} = degree p)\""], "translations": [["", "lemma fundamental_theorem_algebra_factorized: fixes p :: \"complex poly\"\n  shows \"\\<exists> as. smult (coeff p (degree p)) (\\<Prod> a \\<leftarrow> as. [:- a, 1:]) = p \\<and> length as = degree p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "define n where \"n = degree p\""], ["proof (state)\nthis:\n  n = degree p\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "have \"degree p = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = n", "unfolding n_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = degree p", "by simp"], ["proof (state)\nthis:\n  degree p = n\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "thus ?thesis"], ["proof (prove)\nusing this:\n  degree p = n\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "proof (induct n arbitrary: p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       degree p = 0 \\<Longrightarrow>\n       \\<exists>as.\n          smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n          p \\<and>\n          length as = degree p\n 2. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "case (0 p)"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       degree p = 0 \\<Longrightarrow>\n       \\<exists>as.\n          smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n          p \\<and>\n          length as = degree p\n 2. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "hence \"\\<exists> c. p = [: c :]\""], ["proof (prove)\nusing this:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. \\<exists>c. p = [:c:]", "by (cases p, auto split: if_splits)"], ["proof (state)\nthis:\n  \\<exists>c. p = [:c:]\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       degree p = 0 \\<Longrightarrow>\n       \\<exists>as.\n          smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n          p \\<and>\n          length as = degree p\n 2. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "thus ?case"], ["proof (prove)\nusing this:\n  \\<exists>c. p = [:c:]\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "by (intro exI[of _ Nil], auto)"], ["proof (state)\nthis:\n  \\<exists>as.\n     smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n     length as = degree p\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "case (Suc n p)"], ["proof (state)\nthis:\n  degree ?p = n \\<Longrightarrow>\n  \\<exists>as.\n     smult (lead_coeff ?p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = ?p \\<and>\n     length as = degree ?p\n  degree p = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "have dp: \"degree p = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = Suc n", "by fact"], ["proof (state)\nthis:\n  degree p = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "hence \"\\<not> constant (poly p)\""], ["proof (prove)\nusing this:\n  degree p = Suc n\n\ngoal (1 subgoal):\n 1. \\<not> constant (poly p)", "by (simp add: constant_degree)"], ["proof (state)\nthis:\n  \\<not> constant (poly p)\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "from fundamental_theorem_of_algebra[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z. poly p z = 0", "obtain c where rt: \"poly p c = 0\""], ["proof (prove)\nusing this:\n  \\<exists>z. poly p z = 0\n\ngoal (1 subgoal):\n 1. (\\<And>c. poly p c = 0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  poly p c = 0\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "hence \"[:-c,1 :] dvd p\""], ["proof (prove)\nusing this:\n  poly p c = 0\n\ngoal (1 subgoal):\n 1. [:- c, 1:] dvd p", "by (simp add: dvd_iff_poly_eq_0)"], ["proof (state)\nthis:\n  [:- c, 1:] dvd p\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "then"], ["proof (chain)\npicking this:\n  [:- c, 1:] dvd p", "obtain q where p: \"p = q * [: -c,1 :]\""], ["proof (prove)\nusing this:\n  [:- c, 1:] dvd p\n\ngoal (1 subgoal):\n 1. (\\<And>q. p = q * [:- c, 1:] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis dvd_def mult.commute)"], ["proof (state)\nthis:\n  p = q * [:- c, 1:]\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "from \\<open>degree p = Suc n\\<close>"], ["proof (chain)\npicking this:\n  degree p = Suc n", "have dq: \"degree q = n\""], ["proof (prove)\nusing this:\n  degree p = Suc n\n\ngoal (1 subgoal):\n 1. degree q = n", "using p"], ["proof (prove)\nusing this:\n  degree p = Suc n\n  p = q * [:- c, 1:]\n\ngoal (1 subgoal):\n 1. degree q = n", "by simp (metis add.right_neutral degree_synthetic_div diff_Suc_1 mult.commute mult_left_cancel p pCons_eq_0_iff rt synthetic_div_correct' zero_neq_one)"], ["proof (state)\nthis:\n  degree q = n\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "from Suc(1)[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>as.\n     smult (lead_coeff q) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = q \\<and>\n     length as = degree q", "obtain as where q: \"[:coeff q (degree q):] * (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = q\"\n      and deg: \"length as = degree q\""], ["proof (prove)\nusing this:\n  \\<exists>as.\n     smult (lead_coeff q) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = q \\<and>\n     length as = degree q\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>[:lead_coeff q:] * (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                 q;\n         length as = degree q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  [:lead_coeff q:] * (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = q\n  length as = degree q\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "have dc: \"degree p = degree q + degree [: -c, 1 :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p = degree q + degree [:- c, 1:]", "unfolding dq dp"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n = n + degree [:- c, 1:]", "by simp"], ["proof (state)\nthis:\n  degree p = degree q + degree [:- c, 1:]\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "have cq: \"coeff q (degree q) = coeff p (degree p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lead_coeff q = lead_coeff p", "unfolding dc"], ["proof (prove)\ngoal (1 subgoal):\n 1. lead_coeff q = coeff p (degree q + degree [:- c, 1:])", "unfolding p coeff_mult_degree_sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. lead_coeff q = lead_coeff q * lead_coeff [:- c, 1:]", "unfolding dq"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff q n = coeff q n * lead_coeff [:- c, 1:]", "by simp"], ["proof (state)\nthis:\n  lead_coeff q = lead_coeff p\n\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>\\<And>p.\n                   degree p = n \\<Longrightarrow>\n                   \\<exists>as.\n                      smult (lead_coeff p)\n                       (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                      p \\<and>\n                      length as = degree p;\n        degree p = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as.\n                            smult (lead_coeff p)\n                             (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) =\n                            p \\<and>\n                            length as = degree p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "using p[unfolded q[unfolded cq, symmetric]]"], ["proof (prove)\nusing this:\n  p = [:lead_coeff p:] * (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) * [:- c, 1:]\n\ngoal (1 subgoal):\n 1. \\<exists>as.\n       smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n       length as = degree p", "by (intro exI[of _ \"c # as\"], auto simp: ac_simps, insert deg dc, auto)"], ["proof (state)\nthis:\n  \\<exists>as.\n     smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n     length as = degree p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as.\n     smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n     length as = degree p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rsquarefree_card_degree: assumes p0: \"(p :: complex poly) \\<noteq> 0\"\n  shows \"rsquarefree p = (card {x. poly p x = 0} = degree p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "from fundamental_theorem_algebra_factorized[of p]"], ["proof (chain)\npicking this:\n  \\<exists>as.\n     smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n     length as = degree p", "obtain c as\n    where p: \"p = smult c (\\<Prod> a \\<leftarrow> as. [:- a, 1:])\" and pas: \"degree p = length as\"\n    and c: \"c = coeff p (degree p)\""], ["proof (prove)\nusing this:\n  \\<exists>as.\n     smult (lead_coeff p) (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) = p \\<and>\n     length as = degree p\n\ngoal (1 subgoal):\n 1. (\\<And>c as.\n        \\<lbrakk>p = smult c (\\<Prod>a\\<leftarrow>as. [:- a, 1:]);\n         degree p = length as; c = lead_coeff p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  p = smult c (\\<Prod>a\\<leftarrow>as. [:- a, 1:])\n  degree p = length as\n  c = lead_coeff p\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "let ?prod = \"(\\<Prod>a\\<leftarrow>as. [:- a, 1:])\""], ["proof (state)\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "from p0"], ["proof (chain)\npicking this:\n  p \\<noteq> 0", "have c: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "unfolding c"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lead_coeff p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "have roots: \"{x. poly p x = 0} = set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. poly p x = 0} = set as", "unfolding p poly_smult_zero_iff poly_prod_list prod_list_zero_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. c = 0 \\<or>\n        0 \\<in> set (map (\\<lambda>p. poly p x)\n                      (map (\\<lambda>a. [:- a, 1:]) as))} =\n    set as", "using c"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {x. c = 0 \\<or>\n        0 \\<in> set (map (\\<lambda>p. poly p x)\n                      (map (\\<lambda>a. [:- a, 1:]) as))} =\n    set as", "by auto"], ["proof (state)\nthis:\n  {x. poly p x = 0} = set as\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "have idr: \"(card {x. poly p x = 0} = degree p) = distinct as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card {x. poly p x = 0} = degree p) = distinct as", "unfolding roots pas"], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (set as) = length as) = distinct as", "using card_distinct distinct_card"], ["proof (prove)\nusing this:\n  card (set ?xs) = length ?xs \\<Longrightarrow> distinct ?xs\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. (card (set as) = length as) = distinct as", "by blast"], ["proof (state)\nthis:\n  (card {x. poly p x = 0} = degree p) = distinct as\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "have id: \"\\<And> q. (p \\<noteq> 0 \\<and> q) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q. (p \\<noteq> 0 \\<and> q) = q", "using p0"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>q. (p \\<noteq> 0 \\<and> q) = q", "by simp"], ["proof (state)\nthis:\n  (p \\<noteq> 0 \\<and> ?q) = ?q\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "have dist: \"distinct as = (\\<forall>a. (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\" (is \"?l = (\\<forall> a. ?r a)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "proof (cases \"distinct as\")"], ["proof (state)\ngoal (2 subgoals):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\n 2. \\<not> distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "case False"], ["proof (state)\nthis:\n  \\<not> distinct as\n\ngoal (2 subgoals):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\n 2. \\<not> distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "from not_distinct_decomp[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>xs ys zs y. as = xs @ [y] @ ys @ [y] @ zs", "obtain xs ys zs a where \"as = xs @ [a] @ ys @ [a] @ zs\""], ["proof (prove)\nusing this:\n  \\<exists>xs ys zs y. as = xs @ [y] @ ys @ [y] @ zs\n\ngoal (1 subgoal):\n 1. (\\<And>xs a ys zs.\n        as = xs @ [a] @ ys @ [a] @ zs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  as = xs @ [a] @ ys @ [a] @ zs\n\ngoal (2 subgoals):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\n 2. \\<not> distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "hence \"\\<not> ?r a\""], ["proof (prove)\nusing this:\n  as = xs @ [a] @ ys @ [a] @ zs\n\ngoal (1 subgoal):\n 1. \\<not> (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0", "by auto"], ["proof (state)\nthis:\n  \\<not> (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0\n\ngoal (2 subgoals):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\n 2. \\<not> distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "using False"], ["proof (prove)\nusing this:\n  \\<not> (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0\n  \\<not> distinct as\n\ngoal (1 subgoal):\n 1. distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "by auto"], ["proof (state)\nthis:\n  distinct as =\n  (\\<forall>a. (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\n\ngoal (1 subgoal):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "case True"], ["proof (state)\nthis:\n  distinct as\n\ngoal (1 subgoal):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "{"], ["proof (state)\nthis:\n  distinct as\n\ngoal (1 subgoal):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "from True"], ["proof (chain)\npicking this:\n  distinct as", "have \"?r a\""], ["proof (prove)\nusing this:\n  distinct as\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0", "proof (induct as)"], ["proof (state)\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>[]. if x = a then 1 else 0) \\<le> Suc 0\n 2. \\<And>aa as.\n       \\<lbrakk>distinct as \\<Longrightarrow>\n                (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0;\n        distinct (aa # as)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>x\\<leftarrow>aa #\n       as. if x = a then 1 else 0)\n                         \\<le> Suc 0", "case (Cons b bs)"], ["proof (state)\nthis:\n  distinct bs \\<Longrightarrow>\n  (\\<Sum>x\\<leftarrow>bs. if x = a then 1 else 0) \\<le> Suc 0\n  distinct (b # bs)\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>[]. if x = a then 1 else 0) \\<le> Suc 0\n 2. \\<And>aa as.\n       \\<lbrakk>distinct as \\<Longrightarrow>\n                (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0;\n        distinct (aa # as)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>x\\<leftarrow>aa #\n       as. if x = a then 1 else 0)\n                         \\<le> Suc 0", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "proof (cases \"a = b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0\n 2. a \\<noteq> b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "case False"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (2 subgoals):\n 1. a = b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0\n 2. a \\<noteq> b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "with Cons"], ["proof (chain)\npicking this:\n  distinct bs \\<Longrightarrow>\n  (\\<Sum>x\\<leftarrow>bs. if x = a then 1 else 0) \\<le> Suc 0\n  distinct (b # bs)\n  a \\<noteq> b", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct bs \\<Longrightarrow>\n  (\\<Sum>x\\<leftarrow>bs. if x = a then 1 else 0) \\<le> Suc 0\n  distinct (b # bs)\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "case True"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "with Cons(2)"], ["proof (chain)\npicking this:\n  distinct (b # bs)\n  a = b", "have \"a \\<notin> set bs\""], ["proof (prove)\nusing this:\n  distinct (b # bs)\n  a = b\n\ngoal (1 subgoal):\n 1. a \\<notin> set bs", "by auto"], ["proof (state)\nthis:\n  a \\<notin> set bs\n\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "hence \"(\\<Sum>x\\<leftarrow> bs. if x = a then 1 else 0) = (0 :: nat)\""], ["proof (prove)\nusing this:\n  a \\<notin> set bs\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>bs. if x = a then 1 else 0) = 0", "by (induct bs, auto)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>bs. if x = a then 1 else 0) = 0\n\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>bs. if x = a then 1 else 0) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0", "unfolding True"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>bs. if x = b then 1 else 0) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>b # bs. if x = b then 1 else 0) \\<le> Suc 0", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>b # bs. if x = a then 1 else 0) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<leftarrow>[]. if x = a then 1 else 0) \\<le> Suc 0", "qed simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "}"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>as. if x = ?a2 then 1 else 0) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. distinct as \\<Longrightarrow>\n    distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>as. if x = ?a2 then 1 else 0) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "using True"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>as. if x = ?a2 then 1 else 0) \\<le> Suc 0\n  distinct as\n\ngoal (1 subgoal):\n 1. distinct as =\n    (\\<forall>a.\n        (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)", "by auto"], ["proof (state)\nthis:\n  distinct as =\n  (\\<forall>a. (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct as =\n  (\\<forall>a. (\\<Sum>x\\<leftarrow>as. if x = a then 1 else 0) \\<le> Suc 0)\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "have \"rsquarefree p = distinct as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rsquarefree p = distinct as", "unfolding rsquarefree_def' id"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a. order a p \\<le> 1) = distinct as", "unfolding p order_smult[OF c]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a. order a (\\<Prod>a\\<leftarrow>as. [:- a, 1:]) \\<le> 1) =\n    distinct as", "by (subst order_prod_list, auto simp: o_def order_linear' dist)"], ["proof (state)\nthis:\n  rsquarefree p = distinct as\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  rsquarefree p = distinct as\n\ngoal (1 subgoal):\n 1. rsquarefree p = (card {x. poly p x = 0} = degree p)", "unfolding idr"], ["proof (prove)\nusing this:\n  rsquarefree p = distinct as\n\ngoal (1 subgoal):\n 1. rsquarefree p = distinct as", "by simp"], ["proof (state)\nthis:\n  rsquarefree p = (card {x. poly p x = 0} = degree p)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}