{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization/Rational_Factorization.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization", "problem_names": ["lemma roots_of_rat_poly_main_code[code]: \"roots_of_rat_poly_main p = (let n = degree p in if n = 0 then [] else if n = 1 then [roots1 p]\n  else if n = 2 then rat_roots2 p else \n  case rational_root_test p of None \\<Rightarrow> [] | Some x \\<Rightarrow> x # roots_of_rat_poly_main (p div [:-x,1:]))\"", "lemma roots_of_rat_poly_main: \"p \\<noteq> 0 \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}\"", "lemma roots_of_rat_poly: assumes p: \"p \\<noteq> 0\"\n  shows \"set (roots_of_rat_poly p) = {x. poly p x = 0}\"", "lemma irreducible_root_free:\n  fixes p :: \"'a :: idom poly\"\n  assumes \"irreducible p\" shows \"root_free p\"", "lemma factorize_root_free_0[simp]: \"factorize_root_free 0 = (0,[])\"", "lemma factorize_root_free: assumes res: \"factorize_root_free p = (c,qs)\" \n  shows \"p = smult c (prod_list qs)\" \n  \"\\<And> q. q \\<in> set qs \\<Longrightarrow> root_free q \\<and> monic q \\<and> degree q \\<noteq> 0\"", "lemma degree_1_dvd_root: assumes q: \"degree (q :: 'a :: field poly) = 1\"\n  and rt: \"\\<And> x. poly p x \\<noteq> 0\"\n  shows \"\\<not> q dvd p\"", "lemma rational_proper_factor: \n  \"degree p > 0 \\<Longrightarrow> rational_proper_factor p = None \\<Longrightarrow> irreducible\\<^sub>d p\" \n  \"rational_proper_factor p = Some q \\<Longrightarrow> q dvd p \\<and> degree q \\<ge> 1 \\<and> degree q < degree p\"", "lemma wf_factorize_rat_poly_main_wf_rel: \"wf factorize_rat_poly_main_wf_rel\"", "lemma factorize_rat_poly_main_wf_rel_sub:\n  \"((a, b, ps), (c, d, p # ps)) \\<in> factorize_rat_poly_main_wf_rel\"", "lemma factorize_rat_poly_main_wf_rel_two: assumes \"degree q < degree p\" \"degree r < degree p\"\n  shows \"((a,b,q # r # ps), (c,d,p # ps)) \\<in> factorize_rat_poly_main_wf_rel\"", "lemma factorize_rat_poly_main:\n  assumes \"factorize_rat_poly_main c irr ps = (d,qs)\"\n    and \"Ball (set irr) irreducible\\<^sub>d\"\n  shows \"Ball (set qs) irreducible\\<^sub>d\" (is ?g1)\n    and \"smult c (prod_list (irr @ ps)) = smult d (prod_list qs)\" (is ?g2)", "lemma factorize_rat_poly_basic: assumes res: \"factorize_rat_poly_basic p = (c,qs)\" \n  shows \"p = smult c (prod_list qs)\" \n  \"\\<And> q. q \\<in> set qs \\<Longrightarrow> irreducible\\<^sub>d q\""], "translations": [["", "lemma roots_of_rat_poly_main_code[code]: \"roots_of_rat_poly_main p = (let n = degree p in if n = 0 then [] else if n = 1 then [roots1 p]\n  else if n = 2 then rat_roots2 p else \n  case rational_root_test p of None \\<Rightarrow> [] | Some x \\<Rightarrow> x # roots_of_rat_poly_main (p div [:-x,1:]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))", "note d = roots_of_rat_poly_main.simps[of p] Let_def"], ["proof (state)\nthis:\n  roots_of_rat_poly_main p =\n  (let n = degree p\n   in if n = 0 then []\n      else if n = 1 then [roots1 p]\n           else if n = 2 then rat_roots2 p\n                else case rational_root_test p of None \\<Rightarrow> []\n                     | Some x \\<Rightarrow>\n                         x # roots_of_rat_poly_main (p div [:- x, 1:]))\n  Let ?s ?f \\<equiv> ?f ?s\n\ngoal (1 subgoal):\n 1. roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))", "proof (cases \"rational_root_test p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       roots_of_rat_poly_main p =\n       (let n = degree p\n        in if n = 0 then []\n           else if n = 1 then [roots1 p]\n                else if n = 2 then rat_roots2 p\n                     else case rational_root_test p of None \\<Rightarrow> []\n                          | Some x \\<Rightarrow>\n                              x # roots_of_rat_poly_main (p div [:- x, 1:]))", "case (Some x)"], ["proof (state)\nthis:\n  rational_root_test p = Some x\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       roots_of_rat_poly_main p =\n       (let n = degree p\n        in if n = 0 then []\n           else if n = 1 then [roots1 p]\n                else if n = 2 then rat_roots2 p\n                     else case rational_root_test p of None \\<Rightarrow> []\n                          | Some x \\<Rightarrow>\n                              x # roots_of_rat_poly_main (p div [:- x, 1:]))", "let ?x = \"[:-x,1:]\""], ["proof (state)\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       roots_of_rat_poly_main p =\n       (let n = degree p\n        in if n = 0 then []\n           else if n = 1 then [roots1 p]\n                else if n = 2 then rat_roots2 p\n                     else case rational_root_test p of None \\<Rightarrow> []\n                          | Some x \\<Rightarrow>\n                              x # roots_of_rat_poly_main (p div [:- x, 1:]))", "from rational_root_test(1)[OF Some]"], ["proof (chain)\npicking this:\n  poly p x = 0", "have  \"?x dvd p\""], ["proof (prove)\nusing this:\n  poly p x = 0\n\ngoal (1 subgoal):\n 1. [:- x, 1:] dvd p", "by (simp add: poly_eq_0_iff_dvd)"], ["proof (state)\nthis:\n  [:- x, 1:] dvd p\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       roots_of_rat_poly_main p =\n       (let n = degree p\n        in if n = 0 then []\n           else if n = 1 then [roots1 p]\n                else if n = 2 then rat_roots2 p\n                     else case rational_root_test p of None \\<Rightarrow> []\n                          | Some x \\<Rightarrow>\n                              x # roots_of_rat_poly_main (p div [:- x, 1:]))", "from dvd_mult_div_cancel[OF this]"], ["proof (chain)\npicking this:\n  [:- x, 1:] * (p div [:- x, 1:]) = p", "have pp: \"p div ?x = ?x * (p div ?x) div ?x\""], ["proof (prove)\nusing this:\n  [:- x, 1:] * (p div [:- x, 1:]) = p\n\ngoal (1 subgoal):\n 1. p div [:- x, 1:] = [:- x, 1:] * (p div [:- x, 1:]) div [:- x, 1:]", "by simp"], ["proof (state)\nthis:\n  p div [:- x, 1:] = [:- x, 1:] * (p div [:- x, 1:]) div [:- x, 1:]\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       roots_of_rat_poly_main p =\n       (let n = degree p\n        in if n = 0 then []\n           else if n = 1 then [roots1 p]\n                else if n = 2 then rat_roots2 p\n                     else case rational_root_test p of None \\<Rightarrow> []\n                          | Some x \\<Rightarrow>\n                              x # roots_of_rat_poly_main (p div [:- x, 1:]))", "then"], ["proof (chain)\npicking this:\n  p div [:- x, 1:] = [:- x, 1:] * (p div [:- x, 1:]) div [:- x, 1:]", "show ?thesis"], ["proof (prove)\nusing this:\n  p div [:- x, 1:] = [:- x, 1:] * (p div [:- x, 1:]) div [:- x, 1:]\n\ngoal (1 subgoal):\n 1. roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))", "unfolding d Some"], ["proof (prove)\nusing this:\n  p div [:- x, 1:] = [:- x, 1:] * (p div [:- x, 1:]) div [:- x, 1:]\n\ngoal (1 subgoal):\n 1. (if degree p = 0 then []\n     else if degree p = 1 then [roots1 p]\n          else if degree p = 2 then rat_roots2 p\n               else case Some x of None \\<Rightarrow> []\n                    | Some x \\<Rightarrow>\n                        x # roots_of_rat_poly_main (p div [:- x, 1:])) =\n    (if degree p = 0 then []\n     else if degree p = 1 then [roots1 p]\n          else if degree p = 2 then rat_roots2 p\n               else case Some x of None \\<Rightarrow> []\n                    | Some x \\<Rightarrow>\n                        x # roots_of_rat_poly_main (p div [:- x, 1:]))", "by auto"], ["proof (state)\nthis:\n  roots_of_rat_poly_main p =\n  (let n = degree p\n   in if n = 0 then []\n      else if n = 1 then [roots1 p]\n           else if n = 2 then rat_roots2 p\n                else case rational_root_test p of None \\<Rightarrow> []\n                     | Some x \\<Rightarrow>\n                         x # roots_of_rat_poly_main (p div [:- x, 1:]))\n\ngoal (1 subgoal):\n 1. rational_root_test p = None \\<Longrightarrow>\n    roots_of_rat_poly_main p =\n    (let n = degree p\n     in if n = 0 then []\n        else if n = 1 then [roots1 p]\n             else if n = 2 then rat_roots2 p\n                  else case rational_root_test p of None \\<Rightarrow> []\n                       | Some x \\<Rightarrow>\n                           x # roots_of_rat_poly_main (p div [:- x, 1:]))", "qed (simp add: d)"], ["proof (state)\nthis:\n  roots_of_rat_poly_main p =\n  (let n = degree p\n   in if n = 0 then []\n      else if n = 1 then [roots1 p]\n           else if n = 2 then rat_roots2 p\n                else case rational_root_test p of None \\<Rightarrow> []\n                     | Some x \\<Rightarrow>\n                         x # roots_of_rat_poly_main (p div [:- x, 1:]))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma roots_of_rat_poly_main: \"p \\<noteq> 0 \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "proof (induct p rule: roots_of_rat_poly_main.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>x x2.\n                   \\<lbrakk>x = degree p; x \\<noteq> 0; x \\<noteq> 1;\n                    x \\<noteq> 2; rational_root_test p = Some x2;\n                    p div [:- x2, 1:] \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> set\n(roots_of_rat_poly_main (p div [:- x2, 1:])) =\n                                     {x. poly (p div [:- x2, 1:]) x = 0};\n        p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case (1 p)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = degree p; ?x \\<noteq> 0; ?x \\<noteq> 1; ?x \\<noteq> 2;\n   rational_root_test p = Some ?x2.0;\n   p div [:- ?x2.0, 1:] \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> set (roots_of_rat_poly_main (p div [:- ?x2.0, 1:])) =\n                    {x. poly (p div [:- ?x2.0, 1:]) x = 0}\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>x x2.\n                   \\<lbrakk>x = degree p; x \\<noteq> 0; x \\<noteq> 1;\n                    x \\<noteq> 2; rational_root_test p = Some x2;\n                    p div [:- x2, 1:] \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> set\n(roots_of_rat_poly_main (p div [:- x2, 1:])) =\n                                     {x. poly (p div [:- x2, 1:]) x = 0};\n        p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "note IH = 1(1)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = degree p; ?x \\<noteq> 0; ?x \\<noteq> 1; ?x \\<noteq> 2;\n   rational_root_test p = Some ?x2.0;\n   p div [:- ?x2.0, 1:] \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> set (roots_of_rat_poly_main (p div [:- ?x2.0, 1:])) =\n                    {x. poly (p div [:- ?x2.0, 1:]) x = 0}\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>x x2.\n                   \\<lbrakk>x = degree p; x \\<noteq> 0; x \\<noteq> 1;\n                    x \\<noteq> 2; rational_root_test p = Some x2;\n                    p div [:- x2, 1:] \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> set\n(roots_of_rat_poly_main (p div [:- x2, 1:])) =\n                                     {x. poly (p div [:- x2, 1:]) x = 0};\n        p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "note p = 1(2)"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>x x2.\n                   \\<lbrakk>x = degree p; x \\<noteq> 0; x \\<noteq> 1;\n                    x \\<noteq> 2; rational_root_test p = Some x2;\n                    p div [:- x2, 1:] \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> set\n(roots_of_rat_poly_main (p div [:- x2, 1:])) =\n                                     {x. poly (p div [:- x2, 1:]) x = 0};\n        p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "let ?n = \"degree p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>x x2.\n                   \\<lbrakk>x = degree p; x \\<noteq> 0; x \\<noteq> 1;\n                    x \\<noteq> 2; rational_root_test p = Some x2;\n                    p div [:- x2, 1:] \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> set\n(roots_of_rat_poly_main (p div [:- x2, 1:])) =\n                                     {x. poly (p div [:- x2, 1:]) x = 0};\n        p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "let ?rr = \"roots_of_rat_poly_main\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>x x2.\n                   \\<lbrakk>x = degree p; x \\<noteq> 0; x \\<noteq> 1;\n                    x \\<noteq> 2; rational_root_test p = Some x2;\n                    p div [:- x2, 1:] \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> set\n(roots_of_rat_poly_main (p div [:- x2, 1:])) =\n                                     {x. poly (p div [:- x2, 1:]) x = 0};\n        p \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "proof (cases \"?n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case True"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from roots0[OF p True] True"], ["proof (chain)\npicking this:\n  {x. poly p x = 0} = {}\n  degree p = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  {x. poly p x = 0} = {}\n  degree p = 0\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "by simp"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "note 0 = this"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "proof (cases \"?n = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. degree p \\<noteq> 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case True"], ["proof (state)\nthis:\n  degree p = 1\n\ngoal (2 subgoals):\n 1. degree p = 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. degree p \\<noteq> 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from roots1[OF True] True"], ["proof (chain)\npicking this:\n  {x. poly p x = 0} = {roots1 p}\n  degree p = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  {x. poly p x = 0} = {roots1 p}\n  degree p = 1\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "by simp"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "note 1 = this"], ["proof (state)\nthis:\n  degree p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "proof (cases \"?n = 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. degree p \\<noteq> 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case True"], ["proof (state)\nthis:\n  degree p = 2\n\ngoal (2 subgoals):\n 1. degree p = 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. degree p \\<noteq> 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from rat_roots2[OF True] True"], ["proof (chain)\npicking this:\n  {x. poly p x = 0} = set (rat_roots2 p)\n  degree p = 2", "show ?thesis"], ["proof (prove)\nusing this:\n  {x. poly p x = 0} = set (rat_roots2 p)\n  degree p = 2\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "by simp"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "note 2 = this"], ["proof (state)\nthis:\n  degree p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from 0 1 2"], ["proof (chain)\npicking this:\n  degree p \\<noteq> 0\n  degree p \\<noteq> 1\n  degree p \\<noteq> 2", "have id: \"?rr p = (case rational_root_test p of None \\<Rightarrow> [] | Some x \\<Rightarrow> \n          x # ?rr (p div [: -x, 1 :]))\""], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n  degree p \\<noteq> 1\n  degree p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. roots_of_rat_poly_main p =\n    (case rational_root_test p of None \\<Rightarrow> []\n     | Some x \\<Rightarrow> x # roots_of_rat_poly_main (p div [:- x, 1:]))", "by simp"], ["proof (state)\nthis:\n  roots_of_rat_poly_main p =\n  (case rational_root_test p of None \\<Rightarrow> []\n   | Some x \\<Rightarrow> x # roots_of_rat_poly_main (p div [:- x, 1:]))\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "proof (cases \"rational_root_test p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case None"], ["proof (state)\nthis:\n  rational_root_test p = None\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from rational_root_test(2)[OF None] None id"], ["proof (chain)\npicking this:\n  \\<nexists>x. poly p x = 0\n  rational_root_test p = None\n  roots_of_rat_poly_main p =\n  (case rational_root_test p of None \\<Rightarrow> []\n   | Some x \\<Rightarrow> x # roots_of_rat_poly_main (p div [:- x, 1:]))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>x. poly p x = 0\n  rational_root_test p = None\n  roots_of_rat_poly_main p =\n  (case rational_root_test p of None \\<Rightarrow> []\n   | Some x \\<Rightarrow> x # roots_of_rat_poly_main (p div [:- x, 1:]))\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "by simp"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "case (Some x)"], ["proof (state)\nthis:\n  rational_root_test p = Some x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from rational_root_test(1)[OF Some]"], ["proof (chain)\npicking this:\n  poly p x = 0", "have \"[: -x, 1:] dvd p\""], ["proof (prove)\nusing this:\n  poly p x = 0\n\ngoal (1 subgoal):\n 1. [:- x, 1:] dvd p", "by (simp add: poly_eq_0_iff_dvd)"], ["proof (state)\nthis:\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from dvd_mult_div_cancel[OF this]"], ["proof (chain)\npicking this:\n  [:- x, 1:] * (p div [:- x, 1:]) = p", "have pp: \"p = [: -x, 1:] * (p div [: -x, 1:])\""], ["proof (prove)\nusing this:\n  [:- x, 1:] * (p div [:- x, 1:]) = p\n\ngoal (1 subgoal):\n 1. p = [:- x, 1:] * (p div [:- x, 1:])", "by simp"], ["proof (state)\nthis:\n  p = [:- x, 1:] * (p div [:- x, 1:])\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "with p"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  p = [:- x, 1:] * (p div [:- x, 1:])", "have p: \"p div [:- x, 1:] \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p = [:- x, 1:] * (p div [:- x, 1:])\n\ngoal (1 subgoal):\n 1. p div [:- x, 1:] \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p div [:- x, 1:] \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "from arg_cong[OF pp, of \"\\<lambda> p. {x. poly p x = 0}\"]\n             rational_root_test(1)[OF Some] IH[OF refl 0 1 2 Some p]"], ["proof (chain)\npicking this:\n  {x. poly p x = 0} = {xa. poly ([:- x, 1:] * (p div [:- x, 1:])) xa = 0}\n  poly p x = 0\n  set (roots_of_rat_poly_main (p div [:- x, 1:])) =\n  {xa. poly (p div [:- x, 1:]) xa = 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  {x. poly p x = 0} = {xa. poly ([:- x, 1:] * (p div [:- x, 1:])) xa = 0}\n  poly p x = 0\n  set (roots_of_rat_poly_main (p div [:- x, 1:])) =\n  {xa. poly (p div [:- x, 1:]) xa = 0}\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "unfolding id Some"], ["proof (prove)\nusing this:\n  {x. poly p x = 0} = {xa. poly ([:- x, 1:] * (p div [:- x, 1:])) xa = 0}\n  poly p x = 0\n  set (roots_of_rat_poly_main (p div [:- x, 1:])) =\n  {xa. poly (p div [:- x, 1:]) xa = 0}\n\ngoal (1 subgoal):\n 1. set (case Some x of None \\<Rightarrow> []\n         | Some x \\<Rightarrow>\n             x # roots_of_rat_poly_main (p div [:- x, 1:])) =\n    {x. poly p x = 0}", "by auto"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "declare roots_of_rat_poly_main.simps[simp del]"], ["", "definition roots_of_rat_poly :: \"rat poly \\<Rightarrow> rat list\" where\n  \"roots_of_rat_poly p \\<equiv> let (c,pis) = yun_factorization gcd_rat_poly p in\n    concat (map (roots_of_rat_poly_main o fst) pis)\""], ["", "lemma roots_of_rat_poly: assumes p: \"p \\<noteq> 0\"\n  shows \"set (roots_of_rat_poly p) = {x. poly p x = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "obtain c pis where yun: \"yun_factorization gcd p = (c,pis)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c pis.\n        yun_factorization gcd p = (c, pis) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  yun_factorization gcd p = (c, pis)\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "from yun"], ["proof (chain)\npicking this:\n  yun_factorization gcd p = (c, pis)", "have res: \"roots_of_rat_poly p = concat (map (roots_of_rat_poly_main \\<circ> fst) pis)\""], ["proof (prove)\nusing this:\n  yun_factorization gcd p = (c, pis)\n\ngoal (1 subgoal):\n 1. roots_of_rat_poly p =\n    concat (map (roots_of_rat_poly_main \\<circ> fst) pis)", "by (auto simp: roots_of_rat_poly_def split: if_splits)"], ["proof (state)\nthis:\n  roots_of_rat_poly p =\n  concat (map (roots_of_rat_poly_main \\<circ> fst) pis)\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "note yun = square_free_factorizationD(1,2,4)[OF yun_factorization(1)[OF yun]]"], ["proof (state)\nthis:\n  p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)\n  (?a, ?i) \\<in> set pis \\<Longrightarrow>\n  square_free ?a \\<and> degree ?a \\<noteq> 0\n  p = 0 \\<Longrightarrow> c = 0 \\<and> pis = []\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "from yun(1) p"], ["proof (chain)\npicking this:\n  p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)\n  p \\<noteq> 0", "have c: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "from yun(1)"], ["proof (chain)\npicking this:\n  p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)", "have p: \"p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)\""], ["proof (prove)\nusing this:\n  p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)", "."], ["proof (state)\nthis:\n  p = smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "have \"{x. poly p x = 0} = {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. poly p x = 0} =\n    {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0}", "unfolding p"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. poly (smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)) x = 0} =\n    {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0}", "using c"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {x. poly (smult c (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i)) x = 0} =\n    {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0}", "by auto"], ["proof (state)\nthis:\n  {x. poly p x = 0} = {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0}\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "also"], ["proof (state)\nthis:\n  {x. poly p x = 0} = {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0}\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "have \"\\<dots> = \\<Union> ((\\<lambda> p. {x. poly p x = 0}) ` fst ` set pis)\" (is \"_ = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0} =\n    (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})", "by (subst poly_prod_0, force+)"], ["proof (state)\nthis:\n  {x. poly (\\<Prod>(a, i)\\<in>set pis. a ^ Suc i) x = 0} =\n  (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "finally"], ["proof (chain)\npicking this:\n  {x. poly p x = 0} = (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})", "have r: \"{x. poly p x = 0} = ?r\""], ["proof (prove)\nusing this:\n  {x. poly p x = 0} = (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})\n\ngoal (1 subgoal):\n 1. {x. poly p x = 0} = (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})", "."], ["proof (state)\nthis:\n  {x. poly p x = 0} = (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "{"], ["proof (state)\nthis:\n  {x. poly p x = 0} = (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "fix p i"], ["proof (state)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "assume p: \"(p,i) \\<in> set pis\""], ["proof (state)\nthis:\n  (p, i) \\<in> set pis\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "have \"set (roots_of_rat_poly_main p) = {x. poly p x = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly_main p) = {x. poly p x = 0}", "by (rule roots_of_rat_poly_main, insert yun(2) p, force)"], ["proof (state)\nthis:\n  set (roots_of_rat_poly_main p) = {x. poly p x = 0}\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "}"], ["proof (state)\nthis:\n  (?pa2, ?i2) \\<in> set pis \\<Longrightarrow>\n  set (roots_of_rat_poly_main ?pa2) = {x. poly ?pa2 x = 0}\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "note main = this"], ["proof (state)\nthis:\n  (?pa2, ?i2) \\<in> set pis \\<Longrightarrow>\n  set (roots_of_rat_poly_main ?pa2) = {x. poly ?pa2 x = 0}\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "have \"set (roots_of_rat_poly p) = \\<Union> ((\\<lambda> (p, i). set (roots_of_rat_poly_main p)) ` set pis)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) =\n    (\\<Union>(p, i)\\<in>set pis. set (roots_of_rat_poly_main p))", "unfolding res o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat (map (\\<lambda>x. roots_of_rat_poly_main (fst x)) pis)) =\n    (\\<Union>(p, i)\\<in>set pis. set (roots_of_rat_poly_main p))", "by auto"], ["proof (state)\nthis:\n  set (roots_of_rat_poly p) =\n  (\\<Union>(p, i)\\<in>set pis. set (roots_of_rat_poly_main p))\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "also"], ["proof (state)\nthis:\n  set (roots_of_rat_poly p) =\n  (\\<Union>(p, i)\\<in>set pis. set (roots_of_rat_poly_main p))\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "have \"\\<dots> = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>(p, i)\\<in>set pis. set (roots_of_rat_poly_main p)) =\n    (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})", "using main"], ["proof (prove)\nusing this:\n  (?pa2, ?i2) \\<in> set pis \\<Longrightarrow>\n  set (roots_of_rat_poly_main ?pa2) = {x. poly ?pa2 x = 0}\n\ngoal (1 subgoal):\n 1. (\\<Union>(p, i)\\<in>set pis. set (roots_of_rat_poly_main p)) =\n    (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})", "by auto"], ["proof (state)\nthis:\n  (\\<Union>(p, i)\\<in>set pis. set (roots_of_rat_poly_main p)) =\n  (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "finally"], ["proof (chain)\npicking this:\n  set (roots_of_rat_poly p) =\n  (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})", "show ?thesis"], ["proof (prove)\nusing this:\n  set (roots_of_rat_poly p) =\n  (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) = {x. poly p x = 0}", "unfolding r"], ["proof (prove)\nusing this:\n  set (roots_of_rat_poly p) =\n  (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})\n\ngoal (1 subgoal):\n 1. set (roots_of_rat_poly p) =\n    (\\<Union>p\\<in>fst ` set pis. {x. poly p x = 0})", "by simp"], ["proof (state)\nthis:\n  set (roots_of_rat_poly p) = {x. poly p x = 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition root_free :: \"'a :: comm_semiring_0 poly \\<Rightarrow> bool\" where\n  \"root_free p = (degree p = 1 \\<or> (\\<forall> x. poly p x \\<noteq> 0))\""], ["", "lemma irreducible_root_free:\n  fixes p :: \"'a :: idom poly\"\n  assumes \"irreducible p\" shows \"root_free p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. root_free p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. root_free p", "from assms"], ["proof (chain)\npicking this:\n  irreducible p", "have p0: \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  irreducible p\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. root_free p", "{"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. root_free p", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. root_free p", "assume \"poly p x = 0\" and degp: \"degree p \\<noteq> 1\""], ["proof (state)\nthis:\n  poly p x = (0::'a)\n  degree p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. root_free p", "hence \"[:-x,1:] dvd p\""], ["proof (prove)\nusing this:\n  poly p x = (0::'a)\n  degree p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. [:- x, 1::'a:] dvd p", "using poly_eq_0_iff_dvd"], ["proof (prove)\nusing this:\n  poly p x = (0::'a)\n  degree p \\<noteq> 1\n  (poly ?p ?c = (0::?'a)) = ([:- ?c, 1::?'a:] dvd ?p)\n\ngoal (1 subgoal):\n 1. [:- x, 1::'a:] dvd p", "by blast"], ["proof (state)\nthis:\n  [:- x, 1::'a:] dvd p\n\ngoal (1 subgoal):\n 1. root_free p", "then"], ["proof (chain)\npicking this:\n  [:- x, 1::'a:] dvd p", "obtain q where p: \"p = [:-x,1:] * q\""], ["proof (prove)\nusing this:\n  [:- x, 1::'a:] dvd p\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        p = [:- x, 1::'a:] * q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim dvdE)"], ["proof (state)\nthis:\n  p = [:- x, 1::'a:] * q\n\ngoal (1 subgoal):\n 1. root_free p", "with p0"], ["proof (chain)\npicking this:\n  p \\<noteq> 0\n  p = [:- x, 1::'a:] * q", "have q0: \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p = [:- x, 1::'a:] * q\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. root_free p", "from irreducibleD[OF assms p]"], ["proof (chain)\npicking this:\n  [:- x, 1::'a:] dvd 1 \\<or> q dvd 1", "have \"q dvd 1\""], ["proof (prove)\nusing this:\n  [:- x, 1::'a:] dvd 1 \\<or> q dvd 1\n\ngoal (1 subgoal):\n 1. q dvd 1", "by (metis one_neq_zero poly_1 poly_eq_0_iff_dvd)"], ["proof (state)\nthis:\n  q dvd 1\n\ngoal (1 subgoal):\n 1. root_free p", "then"], ["proof (chain)\npicking this:\n  q dvd 1", "have \"degree q = 0\""], ["proof (prove)\nusing this:\n  q dvd 1\n\ngoal (1 subgoal):\n 1. degree q = 0", "by (simp add: poly_dvd_1)"], ["proof (state)\nthis:\n  degree q = 0\n\ngoal (1 subgoal):\n 1. root_free p", "with degree_mult_eq[of \"[:-x,1:]\" q, folded p] q0 degp"], ["proof (chain)\npicking this:\n  \\<lbrakk>[:- x, 1::'a:] \\<noteq> 0; q \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> degree p = degree [:- x, 1::'a:] + degree q\n  q \\<noteq> 0\n  degree p \\<noteq> 1\n  degree q = 0", "have False"], ["proof (prove)\nusing this:\n  \\<lbrakk>[:- x, 1::'a:] \\<noteq> 0; q \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> degree p = degree [:- x, 1::'a:] + degree q\n  q \\<noteq> 0\n  degree p \\<noteq> 1\n  degree q = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. root_free p", "}"], ["proof (state)\nthis:\n  \\<lbrakk>poly p ?x2 = (0::'a); degree p \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. root_free p", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>poly p ?x2 = (0::'a); degree p \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. root_free p", "unfolding root_free_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>poly p ?x2 = (0::'a); degree p \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. degree p = 1 \\<or> (\\<forall>x. poly p x \\<noteq> (0::'a))", "by auto"], ["proof (state)\nthis:\n  root_free p\n\ngoal:\nNo subgoals!", "qed"], ["", "partial_function (tailrec) factorize_root_free_main :: \"rat poly \\<Rightarrow> rat list \\<Rightarrow> rat poly list \\<Rightarrow> rat \\<times> rat poly list\" where\n  [code]: \"factorize_root_free_main p xs fs = (case xs of Nil \\<Rightarrow> \n     let l = coeff p (degree p); q = smult (inverse l) p in (l, (if q = 1 then fs else q # fs) )\n  | x # xs \\<Rightarrow> \n    if poly p x = 0 then factorize_root_free_main (p div [:-x,1:]) (x # xs) ([:-x,1:] # fs)\n    else factorize_root_free_main p xs fs)\""], ["", "definition factorize_root_free :: \"rat poly \\<Rightarrow> rat \\<times> rat poly list\" where\n  \"factorize_root_free p = (if degree p = 0 then (coeff p 0,[]) else\n     factorize_root_free_main p (roots_of_rat_poly p) [])\""], ["", "lemma factorize_root_free_0[simp]: \"factorize_root_free 0 = (0,[])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorize_root_free 0 = (0, [])", "unfolding factorize_root_free_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if degree 0 = 0 then (coeff 0 0, [])\n     else factorize_root_free_main 0 (roots_of_rat_poly 0) []) =\n    (0, [])", "by simp"], ["", "lemma factorize_root_free: assumes res: \"factorize_root_free p = (c,qs)\" \n  shows \"p = smult c (prod_list qs)\" \n  \"\\<And> q. q \\<in> set qs \\<Longrightarrow> root_free q \\<and> monic q \\<and> degree q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) &&&\n    (\\<And>q.\n        q \\<in> set qs \\<Longrightarrow>\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. p = smult c (prod_list qs)\n 2. \\<And>q.\n       q \\<in> set qs \\<Longrightarrow>\n       root_free q \\<and> monic q \\<and> degree q \\<noteq> 0", "have \"p = smult c (prod_list qs) \\<and> (\\<forall> q \\<in> set qs. root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "proof (cases \"degree p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "case True"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "using res"], ["proof (prove)\nusing this:\n  degree p = 0\n  factorize_root_free p = (c, qs)\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "unfolding factorize_root_free_def"], ["proof (prove)\nusing this:\n  degree p = 0\n  (if degree p = 0 then (coeff p 0, [])\n   else factorize_root_free_main p (roots_of_rat_poly p) []) =\n  (c, qs)\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "by (auto dest: degree0_coeffs)"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "hence p0: \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "define fs where \"fs = ([] :: rat poly list)\""], ["proof (state)\nthis:\n  fs = []\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "define xs where \"xs = roots_of_rat_poly p\""], ["proof (state)\nthis:\n  xs = roots_of_rat_poly p\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "define q where \"q = p\""], ["proof (state)\nthis:\n  q = p\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "obtain n  where n: \"n = degree q + length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        n = degree q + length xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n = degree q + length xs\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "have prod: \"p = q * prod_list fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q * prod_list fs", "unfolding q_def fs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = p * prod_list []", "by auto"], ["proof (state)\nthis:\n  p = q * prod_list fs\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "have sub: \"{x. poly q x = 0} \\<subseteq> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. poly q x = 0} \\<subseteq> set xs", "using roots_of_rat_poly[OF p0]"], ["proof (prove)\nusing this:\n  set (roots_of_rat_poly p) = {x. poly p x = 0}\n\ngoal (1 subgoal):\n 1. {x. poly q x = 0} \\<subseteq> set xs", "unfolding q_def xs_def"], ["proof (prove)\nusing this:\n  set (roots_of_rat_poly p) = {x. poly p x = 0}\n\ngoal (1 subgoal):\n 1. {x. poly p x = 0} \\<subseteq> set (roots_of_rat_poly p)", "by auto"], ["proof (state)\nthis:\n  {x. poly q x = 0} \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "have fs: \"\\<And> q. q \\<in> set fs \\<Longrightarrow> root_free q \\<and> monic q \\<and> degree q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> set fs \\<Longrightarrow>\n       root_free q \\<and> monic q \\<and> degree q \\<noteq> 0", "unfolding fs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> set [] \\<Longrightarrow>\n       root_free q \\<and> monic q \\<and> degree q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "have res: \"factorize_root_free_main q xs fs = (c,qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. factorize_root_free_main q xs fs = (c, qs)", "using res False"], ["proof (prove)\nusing this:\n  factorize_root_free p = (c, qs)\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. factorize_root_free_main q xs fs = (c, qs)", "unfolding xs_def fs_def q_def factorize_root_free_def"], ["proof (prove)\nusing this:\n  (if degree p = 0 then (coeff p 0, [])\n   else factorize_root_free_main p (roots_of_rat_poly p) []) =\n  (c, qs)\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. factorize_root_free_main p (roots_of_rat_poly p) [] = (c, qs)", "by auto"], ["proof (state)\nthis:\n  factorize_root_free_main q xs fs = (c, qs)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from False"], ["proof (chain)\npicking this:\n  degree p \\<noteq> 0", "have \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "unfolding q_def"], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from prod sub fs res n this"], ["proof (chain)\npicking this:\n  p = q * prod_list fs\n  {x. poly q x = 0} \\<subseteq> set xs\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  factorize_root_free_main q xs fs = (c, qs)\n  n = degree q + length xs\n  q \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q * prod_list fs\n  {x. poly q x = 0} \\<subseteq> set xs\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  factorize_root_free_main q xs fs = (c, qs)\n  n = degree q + length xs\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "proof (induct n arbitrary: q fs xs rule: wf_induct[OF wf_less])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x q fs xs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> {(x, y). x < y} \\<longrightarrow>\n                   (\\<forall>x xa.\n                       p = x * prod_list xa \\<longrightarrow>\n                       (\\<forall>xb.\n                           {xa. poly x xa = 0}\n                           \\<subseteq> set xb \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> set xa \\<longrightarrow>\n                               root_free x \\<and>\n                               monic x \\<and>\n                               degree x \\<noteq> 0) \\<longrightarrow>\n                           factorize_root_free_main x xb xa =\n                           (c, qs) \\<longrightarrow>\n                           y = degree x + length xb \\<longrightarrow>\n                           x \\<noteq> 0 \\<longrightarrow>\n                           p = smult c (prod_list qs) \\<and>\n                           (\\<forall>q\\<in>set qs.\n                               root_free q \\<and>\n                               monic q \\<and> degree q \\<noteq> 0)));\n        p = q * prod_list fs; {x. poly q x = 0} \\<subseteq> set xs;\n        \\<And>q.\n           q \\<in> set fs \\<Longrightarrow>\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0;\n        factorize_root_free_main q xs fs = (c, qs);\n        x = degree q + length xs; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> p = smult c (prod_list qs) \\<and>\n                         (\\<forall>q\\<in>set qs.\n                             root_free q \\<and>\n                             monic q \\<and> degree q \\<noteq> 0)", "case (1 n q fs xs)"], ["proof (state)\nthis:\n  \\<forall>y.\n     (y, n) \\<in> {(x, y). x < y} \\<longrightarrow>\n     (\\<forall>x xa.\n         p = x * prod_list xa \\<longrightarrow>\n         (\\<forall>xb.\n             {xa. poly x xa = 0} \\<subseteq> set xb \\<longrightarrow>\n             (\\<forall>x.\n                 x \\<in> set xa \\<longrightarrow>\n                 root_free x \\<and>\n                 monic x \\<and> degree x \\<noteq> 0) \\<longrightarrow>\n             factorize_root_free_main x xb xa = (c, qs) \\<longrightarrow>\n             y = degree x + length xb \\<longrightarrow>\n             x \\<noteq> 0 \\<longrightarrow>\n             p = smult c (prod_list qs) \\<and>\n             (\\<forall>q\\<in>set qs.\n                 root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)))\n  p = q * prod_list fs\n  {x. poly q x = 0} \\<subseteq> set xs\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  factorize_root_free_main q xs fs = (c, qs)\n  n = degree q + length xs\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x q fs xs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> {(x, y). x < y} \\<longrightarrow>\n                   (\\<forall>x xa.\n                       p = x * prod_list xa \\<longrightarrow>\n                       (\\<forall>xb.\n                           {xa. poly x xa = 0}\n                           \\<subseteq> set xb \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> set xa \\<longrightarrow>\n                               root_free x \\<and>\n                               monic x \\<and>\n                               degree x \\<noteq> 0) \\<longrightarrow>\n                           factorize_root_free_main x xb xa =\n                           (c, qs) \\<longrightarrow>\n                           y = degree x + length xb \\<longrightarrow>\n                           x \\<noteq> 0 \\<longrightarrow>\n                           p = smult c (prod_list qs) \\<and>\n                           (\\<forall>q\\<in>set qs.\n                               root_free q \\<and>\n                               monic q \\<and> degree q \\<noteq> 0)));\n        p = q * prod_list fs; {x. poly q x = 0} \\<subseteq> set xs;\n        \\<And>q.\n           q \\<in> set fs \\<Longrightarrow>\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0;\n        factorize_root_free_main q xs fs = (c, qs);\n        x = degree q + length xs; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> p = smult c (prod_list qs) \\<and>\n                         (\\<forall>q\\<in>set qs.\n                             root_free q \\<and>\n                             monic q \\<and> degree q \\<noteq> 0)", "note simp = factorize_root_free_main.simps[of q xs fs]"], ["proof (state)\nthis:\n  factorize_root_free_main q xs fs =\n  (case xs of\n   [] \\<Rightarrow>\n     let l = lead_coeff q; q = smult (inverse l) q\n     in (l, if q = 1 then fs else q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs)\n\ngoal (1 subgoal):\n 1. \\<And>x q fs xs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> {(x, y). x < y} \\<longrightarrow>\n                   (\\<forall>x xa.\n                       p = x * prod_list xa \\<longrightarrow>\n                       (\\<forall>xb.\n                           {xa. poly x xa = 0}\n                           \\<subseteq> set xb \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> set xa \\<longrightarrow>\n                               root_free x \\<and>\n                               monic x \\<and>\n                               degree x \\<noteq> 0) \\<longrightarrow>\n                           factorize_root_free_main x xb xa =\n                           (c, qs) \\<longrightarrow>\n                           y = degree x + length xb \\<longrightarrow>\n                           x \\<noteq> 0 \\<longrightarrow>\n                           p = smult c (prod_list qs) \\<and>\n                           (\\<forall>q\\<in>set qs.\n                               root_free q \\<and>\n                               monic q \\<and> degree q \\<noteq> 0)));\n        p = q * prod_list fs; {x. poly q x = 0} \\<subseteq> set xs;\n        \\<And>q.\n           q \\<in> set fs \\<Longrightarrow>\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0;\n        factorize_root_free_main q xs fs = (c, qs);\n        x = degree q + length xs; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> p = smult c (prod_list qs) \\<and>\n                         (\\<forall>q\\<in>set qs.\n                             root_free q \\<and>\n                             monic q \\<and> degree q \\<noteq> 0)", "note IH = 1(1)[rule_format]"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, n) \\<in> {(x, y). x < y}; p = ?x * prod_list ?xa;\n   {x. poly ?x x = 0} \\<subseteq> set ?xb;\n   \\<And>x.\n      x \\<in> set ?xa \\<Longrightarrow>\n      root_free x \\<and> monic x \\<and> degree x \\<noteq> 0;\n   factorize_root_free_main ?x ?xb ?xa = (c, qs);\n   ?y = degree ?x + length ?xb; ?x \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> p = smult c (prod_list qs) \\<and>\n                    (\\<forall>q\\<in>set qs.\n                        root_free q \\<and>\n                        monic q \\<and> degree q \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. \\<And>x q fs xs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> {(x, y). x < y} \\<longrightarrow>\n                   (\\<forall>x xa.\n                       p = x * prod_list xa \\<longrightarrow>\n                       (\\<forall>xb.\n                           {xa. poly x xa = 0}\n                           \\<subseteq> set xb \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> set xa \\<longrightarrow>\n                               root_free x \\<and>\n                               monic x \\<and>\n                               degree x \\<noteq> 0) \\<longrightarrow>\n                           factorize_root_free_main x xb xa =\n                           (c, qs) \\<longrightarrow>\n                           y = degree x + length xb \\<longrightarrow>\n                           x \\<noteq> 0 \\<longrightarrow>\n                           p = smult c (prod_list qs) \\<and>\n                           (\\<forall>q\\<in>set qs.\n                               root_free q \\<and>\n                               monic q \\<and> degree q \\<noteq> 0)));\n        p = q * prod_list fs; {x. poly q x = 0} \\<subseteq> set xs;\n        \\<And>q.\n           q \\<in> set fs \\<Longrightarrow>\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0;\n        factorize_root_free_main q xs fs = (c, qs);\n        x = degree q + length xs; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> p = smult c (prod_list qs) \\<and>\n                         (\\<forall>q\\<in>set qs.\n                             root_free q \\<and>\n                             monic q \\<and> degree q \\<noteq> 0)", "note 0 = 1(2-)[unfolded simp]"], ["proof (state)\nthis:\n  p = q * prod_list fs\n  {x. poly q x = 0} \\<subseteq> set xs\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  (case xs of\n   [] \\<Rightarrow>\n     let l = lead_coeff q; q = smult (inverse l) q\n     in (l, if q = 1 then fs else q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  n = degree q + length xs\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x q fs xs.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> {(x, y). x < y} \\<longrightarrow>\n                   (\\<forall>x xa.\n                       p = x * prod_list xa \\<longrightarrow>\n                       (\\<forall>xb.\n                           {xa. poly x xa = 0}\n                           \\<subseteq> set xb \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> set xa \\<longrightarrow>\n                               root_free x \\<and>\n                               monic x \\<and>\n                               degree x \\<noteq> 0) \\<longrightarrow>\n                           factorize_root_free_main x xb xa =\n                           (c, qs) \\<longrightarrow>\n                           y = degree x + length xb \\<longrightarrow>\n                           x \\<noteq> 0 \\<longrightarrow>\n                           p = smult c (prod_list qs) \\<and>\n                           (\\<forall>q\\<in>set qs.\n                               root_free q \\<and>\n                               monic q \\<and> degree q \\<noteq> 0)));\n        p = q * prod_list fs; {x. poly q x = 0} \\<subseteq> set xs;\n        \\<And>q.\n           q \\<in> set fs \\<Longrightarrow>\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0;\n        factorize_root_free_main q xs fs = (c, qs);\n        x = degree q + length xs; q \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> p = smult c (prod_list qs) \\<and>\n                         (\\<forall>q\\<in>set qs.\n                             root_free q \\<and>\n                             monic q \\<and> degree q \\<noteq> 0)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "proof (cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "note 0 = 0[unfolded Nil Let_def]"], ["proof (state)\nthis:\n  p = q * prod_list fs\n  {x. poly q x = 0} \\<subseteq> set []\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  (case [] of\n   [] \\<Rightarrow>\n     (lead_coeff q,\n      if smult (inverse (lead_coeff q)) q = 1 then fs\n      else smult (inverse (lead_coeff q)) q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  n = degree q + length []\n  q \\<noteq> 0\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "hence no_rt: \"\\<And> x. poly q x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p = q * prod_list fs\n  {x. poly q x = 0} \\<subseteq> set []\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  (case [] of\n   [] \\<Rightarrow>\n     (lead_coeff q,\n      if smult (inverse (lead_coeff q)) q = 1 then fs\n      else smult (inverse (lead_coeff q)) q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  n = degree q + length []\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x. poly q x \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  poly q ?x \\<noteq> 0\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "hence q: \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  poly q ?x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "let ?r = \"smult (inverse c) q\""], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "define r where \"r = ?r\""], ["proof (state)\nthis:\n  r = smult (inverse c) q\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from 0(4-5)"], ["proof (chain)\npicking this:\n  (case [] of\n   [] \\<Rightarrow>\n     (lead_coeff q,\n      if smult (inverse (lead_coeff q)) q = 1 then fs\n      else smult (inverse (lead_coeff q)) q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  n = degree q + length []", "have c: \"c = coeff q (degree q)\" and qs: \"qs = (if r = 1 then fs else r # fs)\""], ["proof (prove)\nusing this:\n  (case [] of\n   [] \\<Rightarrow>\n     (lead_coeff q,\n      if smult (inverse (lead_coeff q)) q = 1 then fs\n      else smult (inverse (lead_coeff q)) q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  n = degree q + length []\n\ngoal (1 subgoal):\n 1. c = lead_coeff q &&& qs = (if r = 1 then fs else r # fs)", "by (auto simp: r_def)"], ["proof (state)\nthis:\n  c = lead_coeff q\n  qs = (if r = 1 then fs else r # fs)\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from q c qs 0(1)"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  c = lead_coeff q\n  qs = (if r = 1 then fs else r # fs)\n  p = q * prod_list fs", "have c0: \"c \\<noteq> 0\" and p: \"p = smult c (prod_list (r # fs))\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  c = lead_coeff q\n  qs = (if r = 1 then fs else r # fs)\n  p = q * prod_list fs\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 &&& p = smult c (prod_list (r # fs))", "by (auto simp: r_def)"], ["proof (state)\nthis:\n  c \\<noteq> 0\n  p = smult c (prod_list (r # fs))\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from p"], ["proof (chain)\npicking this:\n  p = smult c (prod_list (r # fs))", "have p: \"p = smult c (prod_list qs)\""], ["proof (prove)\nusing this:\n  p = smult c (prod_list (r # fs))\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs)", "unfolding qs"], ["proof (prove)\nusing this:\n  p = smult c (prod_list (r # fs))\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list (if r = 1 then fs else r # fs))", "by auto"], ["proof (state)\nthis:\n  p = smult c (prod_list qs)\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from 0(2,5) c0 c"], ["proof (chain)\npicking this:\n  {x. poly q x = 0} \\<subseteq> set []\n  n = degree q + length []\n  c \\<noteq> 0\n  c = lead_coeff q", "have \"root_free ?r\" \"monic ?r\""], ["proof (prove)\nusing this:\n  {x. poly q x = 0} \\<subseteq> set []\n  n = degree q + length []\n  c \\<noteq> 0\n  c = lead_coeff q\n\ngoal (1 subgoal):\n 1. root_free (smult (inverse c) q) &&& monic (smult (inverse c) q)", "unfolding root_free_def"], ["proof (prove)\nusing this:\n  {x. poly q x = 0} \\<subseteq> set []\n  n = degree q + length []\n  c \\<noteq> 0\n  c = lead_coeff q\n\ngoal (1 subgoal):\n 1. degree (smult (inverse c) q) = 1 \\<or>\n    (\\<forall>x. poly (smult (inverse c) q) x \\<noteq> 0) &&&\n    monic (smult (inverse c) q)", "by auto"], ["proof (state)\nthis:\n  root_free (smult (inverse c) q)\n  monic (smult (inverse c) q)\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "with 0(3)"], ["proof (chain)\npicking this:\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  root_free (smult (inverse c) q)\n  monic (smult (inverse c) q)", "have \"\\<And> q. q \\<in> set qs \\<Longrightarrow> root_free q \\<and> monic q \\<and> degree q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  root_free (smult (inverse c) q)\n  monic (smult (inverse c) q)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> set qs \\<Longrightarrow>\n       root_free q \\<and> monic q \\<and> degree q \\<noteq> 0", "unfolding qs"], ["proof (prove)\nusing this:\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  root_free (smult (inverse c) q)\n  monic (smult (inverse c) q)\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       q \\<in> set (if r = 1 then fs else r # fs) \\<Longrightarrow>\n       root_free q \\<and> monic q \\<and> degree q \\<noteq> 0", "by (cases \"degree q = 0\", insert degree0_coeffs[of q], auto split: if_splits simp: r_def)"], ["proof (state)\nthis:\n  ?q \\<in> set qs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "with p"], ["proof (chain)\npicking this:\n  p = smult c (prod_list qs)\n  ?q \\<in> set qs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p = smult c (prod_list qs)\n  ?q \\<in> set qs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "case (Cons x xs)"], ["proof (state)\nthis:\n  xsa__ = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xsa__ = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "note 0 = 0[unfolded Cons]"], ["proof (state)\nthis:\n  p = q * prod_list fs\n  {x. poly q x = 0} \\<subseteq> set (x # xs)\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  (case x # xs of\n   [] \\<Rightarrow>\n     let l = lead_coeff q; q = smult (inverse l) q\n     in (l, if q = 1 then fs else q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  n = degree q + length (x # xs)\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xsa__ = a # list \\<Longrightarrow>\n       p = smult c (prod_list qs) \\<and>\n       (\\<forall>q\\<in>set qs.\n           root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "proof (cases \"poly q x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "case True"], ["proof (state)\nthis:\n  poly q x = 0\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "let ?q = \"q div [:-x,1:]\""], ["proof (state)\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "let ?x = \"[:-x,1:]\""], ["proof (state)\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "let ?fs = \"?x # fs\""], ["proof (state)\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "let ?xs = \"x # xs\""], ["proof (state)\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from True"], ["proof (chain)\npicking this:\n  poly q x = 0", "have q: \"q = ?q * ?x\""], ["proof (prove)\nusing this:\n  poly q x = 0\n\ngoal (1 subgoal):\n 1. q = q div [:- x, 1:] * [:- x, 1:]", "by (metis dvd_mult_div_cancel mult.commute poly_eq_0_iff_dvd)"], ["proof (state)\nthis:\n  q = q div [:- x, 1:] * [:- x, 1:]\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "with 0(6)"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  q = q div [:- x, 1:] * [:- x, 1:]", "have q': \"?q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  q = q div [:- x, 1:] * [:- x, 1:]\n\ngoal (1 subgoal):\n 1. q div [:- x, 1:] \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q div [:- x, 1:] \\<noteq> 0\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "have deg: \"degree q = Suc (degree ?q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree q = Suc (degree (q div [:- x, 1:]))", "unfolding arg_cong[OF q, of degree]"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (q div [:- x, 1:] * [:- x, 1:]) = Suc (degree (q div [:- x, 1:]))", "by (subst degree_mult_eq[OF q'], auto)"], ["proof (state)\nthis:\n  degree q = Suc (degree (q div [:- x, 1:]))\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "hence n: \"degree ?q + length ?xs < n\""], ["proof (prove)\nusing this:\n  degree q = Suc (degree (q div [:- x, 1:]))\n\ngoal (1 subgoal):\n 1. degree (q div [:- x, 1:]) + length (x # xs) < n", "unfolding 0(5)"], ["proof (prove)\nusing this:\n  degree q = Suc (degree (q div [:- x, 1:]))\n\ngoal (1 subgoal):\n 1. degree (q div [:- x, 1:]) + length (x # xs) < degree q + length (x # xs)", "by auto"], ["proof (state)\nthis:\n  degree (q div [:- x, 1:]) + length (x # xs) < n\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from arg_cong[OF q, of poly] 0(2)"], ["proof (chain)\npicking this:\n  poly q = poly (q div [:- x, 1:] * [:- x, 1:])\n  {x. poly q x = 0} \\<subseteq> set (x # xs)", "have rt: \"{x. poly ?q x = 0} \\<subseteq> set ?xs\""], ["proof (prove)\nusing this:\n  poly q = poly (q div [:- x, 1:] * [:- x, 1:])\n  {x. poly q x = 0} \\<subseteq> set (x # xs)\n\ngoal (1 subgoal):\n 1. {xa. poly (q div [:- x, 1:]) xa = 0} \\<subseteq> set (x # xs)", "by auto"], ["proof (state)\nthis:\n  {xa. poly (q div [:- x, 1:]) xa = 0} \\<subseteq> set (x # xs)\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "have p: \"p = ?q * prod_list ?fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q div [:- x, 1:] * prod_list ([:- x, 1:] # fs)", "unfolding prod_list.Cons 0(1) mult.assoc[symmetric] q[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. q * prod_list fs = q * prod_list fs", ".."], ["proof (state)\nthis:\n  p = q div [:- x, 1:] * prod_list ([:- x, 1:] # fs)\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "have \"root_free ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. root_free [:- x, 1:]", "unfolding root_free_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree [:- x, 1:] = 1 \\<or> (\\<forall>xa. poly [:- x, 1:] xa \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  root_free [:- x, 1:]\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "with 0(3)"], ["proof (chain)\npicking this:\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  root_free [:- x, 1:]", "have rf: \"\\<And> f. f \\<in> set ?fs \\<Longrightarrow> root_free f \\<and> monic f \\<and> degree f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  ?q \\<in> set fs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n  root_free [:- x, 1:]\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       f \\<in> set ([:- x, 1:] # fs) \\<Longrightarrow>\n       root_free f \\<and> monic f \\<and> degree f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  ?f \\<in> set ([:- x, 1:] # fs) \\<Longrightarrow>\n  root_free ?f \\<and> monic ?f \\<and> degree ?f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from True 0(4)"], ["proof (chain)\npicking this:\n  poly q x = 0\n  (case x # xs of\n   [] \\<Rightarrow>\n     let l = lead_coeff q; q = smult (inverse l) q\n     in (l, if q = 1 then fs else q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)", "have res: \"factorize_root_free_main ?q ?xs ?fs = (c,qs)\""], ["proof (prove)\nusing this:\n  poly q x = 0\n  (case x # xs of\n   [] \\<Rightarrow>\n     let l = lead_coeff q; q = smult (inverse l) q\n     in (l, if q = 1 then fs else q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n\ngoal (1 subgoal):\n 1. factorize_root_free_main (q div [:- x, 1:]) (x # xs) ([:- x, 1:] # fs) =\n    (c, qs)", "by simp"], ["proof (state)\nthis:\n  factorize_root_free_main (q div [:- x, 1:]) (x # xs) ([:- x, 1:] # fs) =\n  (c, qs)\n\ngoal (2 subgoals):\n 1. poly q x = 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n 2. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "by (rule IH[OF _ p rt rf res refl q'], insert n, auto)"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "case False"], ["proof (state)\nthis:\n  poly q x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "with 0(4)"], ["proof (chain)\npicking this:\n  (case x # xs of\n   [] \\<Rightarrow>\n     let l = lead_coeff q; q = smult (inverse l) q\n     in (l, if q = 1 then fs else q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  poly q x \\<noteq> 0", "have res: \"factorize_root_free_main q xs fs = (c,qs)\""], ["proof (prove)\nusing this:\n  (case x # xs of\n   [] \\<Rightarrow>\n     let l = lead_coeff q; q = smult (inverse l) q\n     in (l, if q = 1 then fs else q # fs)\n   | x # xs \\<Rightarrow>\n       if poly q x = 0\n       then factorize_root_free_main (q div [:- x, 1:]) (x # xs)\n             ([:- x, 1:] # fs)\n       else factorize_root_free_main q xs fs) =\n  (c, qs)\n  poly q x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. factorize_root_free_main q xs fs = (c, qs)", "by simp"], ["proof (state)\nthis:\n  factorize_root_free_main q xs fs = (c, qs)\n\ngoal (1 subgoal):\n 1. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from 0(5)"], ["proof (chain)\npicking this:\n  n = degree q + length (x # xs)", "obtain m where m: \"m = degree q + length xs\" and n: \"n = Suc m\""], ["proof (prove)\nusing this:\n  n = degree q + length (x # xs)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m = degree q + length xs; n = Suc m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m = degree q + length xs\n  n = Suc m\n\ngoal (1 subgoal):\n 1. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "from False 0(2)"], ["proof (chain)\npicking this:\n  poly q x \\<noteq> 0\n  {x. poly q x = 0} \\<subseteq> set (x # xs)", "have rt: \"{x. poly q x = 0} \\<subseteq> set xs\""], ["proof (prove)\nusing this:\n  poly q x \\<noteq> 0\n  {x. poly q x = 0} \\<subseteq> set (x # xs)\n\ngoal (1 subgoal):\n 1. {x. poly q x = 0} \\<subseteq> set xs", "by auto"], ["proof (state)\nthis:\n  {x. poly q x = 0} \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. poly q x \\<noteq> 0 \\<Longrightarrow>\n    p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) \\<and>\n    (\\<forall>q\\<in>set qs.\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "by (rule IH[OF _ 0(1) rt 0(3) res m 0(6)], unfold n, auto)"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal (2 subgoals):\n 1. p = smult c (prod_list qs)\n 2. \\<And>q.\n       q \\<in> set qs \\<Longrightarrow>\n       root_free q \\<and> monic q \\<and> degree q \\<noteq> 0", "thus \"p = smult c (prod_list qs)\" \n    \"\\<And> q. q \\<in> set qs \\<Longrightarrow> root_free q \\<and> monic q \\<and> degree q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p = smult c (prod_list qs) \\<and>\n  (\\<forall>q\\<in>set qs.\n      root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) &&&\n    (\\<And>q.\n        q \\<in> set qs \\<Longrightarrow>\n        root_free q \\<and> monic q \\<and> degree q \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  p = smult c (prod_list qs)\n  ?q \\<in> set qs \\<Longrightarrow>\n  root_free ?q \\<and> monic ?q \\<and> degree ?q \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "definition rational_proper_factor :: \"rat poly \\<Rightarrow> rat poly option\" where\n  \"rational_proper_factor p = (if degree p \\<le> 1 then None\n    else if degree p = 2 then (case rat_roots2 p of Nil \\<Rightarrow> None | Cons x xs \\<Rightarrow> Some [:-x,1 :])\n    else if degree p = 3 then (case rational_root_test p of None \\<Rightarrow> None | Some x \\<Rightarrow> Some [:-x,1:])\n    else kronecker_factorization_rat p)\""], ["", "lemma degree_1_dvd_root: assumes q: \"degree (q :: 'a :: field poly) = 1\"\n  and rt: \"\\<And> x. poly p x \\<noteq> 0\"\n  shows \"\\<not> q dvd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "from degree1_coeffs[OF q]"], ["proof (chain)\npicking this:\n  \\<exists>a b. q = [:b, a:] \\<and> a \\<noteq> (0::'a)", "obtain a b where q: \"q = [: b, a :]\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<exists>a b. q = [:b, a:] \\<and> a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>q = [:b, a:]; a \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  q = [:b, a:]\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "have q: \"q = smult a [: - (- b / a), 1 :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = smult a [:- (- b / a), 1::'a:]", "unfolding q"], ["proof (prove)\ngoal (1 subgoal):\n 1. [:b, a:] = smult a [:- (- b / a), 1::'a:]", "by (rule poly_eqI, unfold coeff_smult, insert a, auto simp: field_simps coeff_pCons\n      split: nat.splits)"], ["proof (state)\nthis:\n  q = smult a [:- (- b / a), 1::'a:]\n\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "unfolding q smult_dvd_iff poly_eq_0_iff_dvd[symmetric, of _ p]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (if a = (0::'a) then p = 0 else poly p (- b / a) = (0::'a))", "using a rt"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  poly p ?x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (if a = (0::'a) then p = 0 else poly p (- b / a) = (0::'a))", "by auto"], ["proof (state)\nthis:\n  \\<not> q dvd p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rational_proper_factor: \n  \"degree p > 0 \\<Longrightarrow> rational_proper_factor p = None \\<Longrightarrow> irreducible\\<^sub>d p\" \n  \"rational_proper_factor p = Some q \\<Longrightarrow> q dvd p \\<and> degree q \\<ge> 1 \\<and> degree q < degree p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n     \\<Longrightarrow> irreducible\\<^sub>d p) &&&\n    (rational_proper_factor p = Some q \\<Longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n    \\<Longrightarrow> irreducible\\<^sub>d p\n 2. rational_proper_factor p = Some q \\<Longrightarrow>\n    q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p", "let ?rp = \"rational_proper_factor p\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n    \\<Longrightarrow> irreducible\\<^sub>d p\n 2. rational_proper_factor p = Some q \\<Longrightarrow>\n    q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p", "let ?rr = \"rational_root_test\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n    \\<Longrightarrow> irreducible\\<^sub>d p\n 2. rational_proper_factor p = Some q \\<Longrightarrow>\n    q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p", "note d = rational_proper_factor_def[of p]"], ["proof (state)\nthis:\n  rational_proper_factor p =\n  (if degree p \\<le> 1 then None\n   else if degree p = 2\n        then case rat_roots2 p of [] \\<Rightarrow> None\n             | x # xs \\<Rightarrow> Some [:- x, 1:]\n        else if degree p = 3\n             then case rational_root_test p of None \\<Rightarrow> None\n                  | Some x \\<Rightarrow> Some [:- x, 1:]\n             else kronecker_factorization_rat p)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n    \\<Longrightarrow> irreducible\\<^sub>d p\n 2. rational_proper_factor p = Some q \\<Longrightarrow>\n    q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p", "have \"(degree p > 0 \\<longrightarrow> ?rp = None \\<longrightarrow> irreducible\\<^sub>d p) \\<and> \n        (?rp = Some q \\<longrightarrow> q dvd p \\<and> degree q \\<ge> 1 \\<and> degree q < degree p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof (cases \"degree p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case True"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "unfolding d"], ["proof (prove)\nusing this:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     (if degree p \\<le> 1 then None\n      else if degree p = 2\n           then case rat_roots2 p of [] \\<Rightarrow> None\n                | x # xs \\<Rightarrow> Some [:- x, 1:]\n           else if degree p = 3\n                then case rational_root_test p of None \\<Rightarrow> None\n                     | Some x \\<Rightarrow> Some [:- x, 1:]\n                else kronecker_factorization_rat p) =\n     None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    ((if degree p \\<le> 1 then None\n      else if degree p = 2\n           then case rat_roots2 p of [] \\<Rightarrow> None\n                | x # xs \\<Rightarrow> Some [:- x, 1:]\n           else if degree p = 3\n                then case rational_root_test p of None \\<Rightarrow> None\n                     | Some x \\<Rightarrow> Some [:- x, 1:]\n                else kronecker_factorization_rat p) =\n     Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "note 0 = this"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof (cases \"degree p = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case True"], ["proof (state)\nthis:\n  degree p = 1\n\ngoal (2 subgoals):\n 1. degree p = 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "hence \"?rp = None\""], ["proof (prove)\nusing this:\n  degree p = 1\n\ngoal (1 subgoal):\n 1. rational_proper_factor p = None", "unfolding d"], ["proof (prove)\nusing this:\n  degree p = 1\n\ngoal (1 subgoal):\n 1. (if degree p \\<le> 1 then None\n     else if degree p = 2\n          then case rat_roots2 p of [] \\<Rightarrow> None\n               | x # xs \\<Rightarrow> Some [:- x, 1:]\n          else if degree p = 3\n               then case rational_root_test p of None \\<Rightarrow> None\n                    | Some x \\<Rightarrow> Some [:- x, 1:]\n               else kronecker_factorization_rat p) =\n    None", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p = None\n\ngoal (2 subgoals):\n 1. degree p = 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "with linear_irreducible\\<^sub>d[OF True]"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d p\n  rational_proper_factor p = None", "show ?thesis"], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d p\n  rational_proper_factor p = None\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "note 1 = this"], ["proof (state)\nthis:\n  degree p \\<noteq> 1\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 1 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof (cases \"degree p = 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case True"], ["proof (state)\nthis:\n  degree p = 2\n\ngoal (2 subgoals):\n 1. degree p = 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "hence rp: \"?rp = (case rat_roots2 p of Nil \\<Rightarrow> None | Cons x xs \\<Rightarrow> Some [:-x,1 :])\""], ["proof (prove)\nusing this:\n  degree p = 2\n\ngoal (1 subgoal):\n 1. rational_proper_factor p =\n    (case rat_roots2 p of [] \\<Rightarrow> None\n     | x # xs \\<Rightarrow> Some [:- x, 1:])", "unfolding d"], ["proof (prove)\nusing this:\n  degree p = 2\n\ngoal (1 subgoal):\n 1. (if degree p \\<le> 1 then None\n     else if degree p = 2\n          then case rat_roots2 p of [] \\<Rightarrow> None\n               | x # xs \\<Rightarrow> Some [:- x, 1:]\n          else if degree p = 3\n               then case rational_root_test p of None \\<Rightarrow> None\n                    | Some x \\<Rightarrow> Some [:- x, 1:]\n               else kronecker_factorization_rat p) =\n    (case rat_roots2 p of [] \\<Rightarrow> None\n     | x # xs \\<Rightarrow> Some [:- x, 1:])", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p =\n  (case rat_roots2 p of [] \\<Rightarrow> None\n   | x # xs \\<Rightarrow> Some [:- x, 1:])\n\ngoal (2 subgoals):\n 1. degree p = 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof (cases \"rat_roots2 p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rat_roots2 p = [] \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case Nil"], ["proof (state)\nthis:\n  rat_roots2 p = []\n\ngoal (2 subgoals):\n 1. rat_roots2 p = [] \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "with rp"], ["proof (chain)\npicking this:\n  rational_proper_factor p =\n  (case rat_roots2 p of [] \\<Rightarrow> None\n   | x # xs \\<Rightarrow> Some [:- x, 1:])\n  rat_roots2 p = []", "have rp: \"?rp = None\""], ["proof (prove)\nusing this:\n  rational_proper_factor p =\n  (case rat_roots2 p of [] \\<Rightarrow> None\n   | x # xs \\<Rightarrow> Some [:- x, 1:])\n  rat_roots2 p = []\n\ngoal (1 subgoal):\n 1. rational_proper_factor p = None", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p = None\n\ngoal (2 subgoals):\n 1. rat_roots2 p = [] \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from Nil rat_roots2[OF True]"], ["proof (chain)\npicking this:\n  rat_roots2 p = []\n  {x. poly p x = 0} = set (rat_roots2 p)", "have nex: \"\\<not> (\\<exists> x. poly p x = 0)\""], ["proof (prove)\nusing this:\n  rat_roots2 p = []\n  {x. poly p x = 0} = set (rat_roots2 p)\n\ngoal (1 subgoal):\n 1. \\<nexists>x. poly p x = 0", "by auto"], ["proof (state)\nthis:\n  \\<nexists>x. poly p x = 0\n\ngoal (2 subgoals):\n 1. rat_roots2 p = [] \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "have \"irreducible\\<^sub>d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d p", "proof (rule irreducible\\<^sub>dI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree p; 0 < degree r;\n        degree r < degree p; p = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "fix q r :: \"rat poly\""], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree p; 0 < degree r;\n        degree r < degree p; p = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"degree q > 0\" \"degree q < degree p\" and p: \"p = q * r\""], ["proof (state)\nthis:\n  0 < degree q\n  degree q < degree p\n  p = q * r\n\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree p; 0 < degree r;\n        degree r < degree p; p = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "with True"], ["proof (chain)\npicking this:\n  degree p = 2\n  0 < degree q\n  degree q < degree p\n  p = q * r", "have dq: \"degree q = 1\""], ["proof (prove)\nusing this:\n  degree p = 2\n  0 < degree q\n  degree q < degree p\n  p = q * r\n\ngoal (1 subgoal):\n 1. degree q = 1", "by auto"], ["proof (state)\nthis:\n  degree q = 1\n\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree p; 0 < degree r;\n        degree r < degree p; p = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "have \"\\<not> q dvd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "by (rule degree_1_dvd_root[OF dq], insert nex, auto)"], ["proof (state)\nthis:\n  \\<not> q dvd p\n\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree p; 0 < degree r;\n        degree r < degree p; p = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "with p"], ["proof (chain)\npicking this:\n  p = q * r\n  \\<not> q dvd p", "show False"], ["proof (prove)\nusing this:\n  p = q * r\n  \\<not> q dvd p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. 0 < degree p", "qed (insert True, auto)"], ["proof (state)\nthis:\n  irreducible\\<^sub>d p\n\ngoal (2 subgoals):\n 1. rat_roots2 p = [] \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "with rp"], ["proof (chain)\npicking this:\n  rational_proper_factor p = None\n  irreducible\\<^sub>d p", "show ?thesis"], ["proof (prove)\nusing this:\n  rational_proper_factor p = None\n  irreducible\\<^sub>d p\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case (Cons x xs)"], ["proof (state)\nthis:\n  rat_roots2 p = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from Cons rat_roots2[OF True]"], ["proof (chain)\npicking this:\n  rat_roots2 p = x # xs\n  {x. poly p x = 0} = set (rat_roots2 p)", "have \"poly p x = 0\""], ["proof (prove)\nusing this:\n  rat_roots2 p = x # xs\n  {x. poly p x = 0} = set (rat_roots2 p)\n\ngoal (1 subgoal):\n 1. poly p x = 0", "by auto"], ["proof (state)\nthis:\n  poly p x = 0\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from this[unfolded poly_eq_0_iff_dvd]"], ["proof (chain)\npicking this:\n  [:- x, 1:] dvd p", "have x: \"[: -x , 1 :] dvd p\""], ["proof (prove)\nusing this:\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. [:- x, 1:] dvd p", "by auto"], ["proof (state)\nthis:\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from Cons rp"], ["proof (chain)\npicking this:\n  rat_roots2 p = x # xs\n  rational_proper_factor p =\n  (case rat_roots2 p of [] \\<Rightarrow> None\n   | x # xs \\<Rightarrow> Some [:- x, 1:])", "have rp: \"?rp = Some ([: - x, 1 :])\""], ["proof (prove)\nusing this:\n  rat_roots2 p = x # xs\n  rational_proper_factor p =\n  (case rat_roots2 p of [] \\<Rightarrow> None\n   | x # xs \\<Rightarrow> Some [:- x, 1:])\n\ngoal (1 subgoal):\n 1. rational_proper_factor p = Some [:- x, 1:]", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p = Some [:- x, 1:]\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       rat_roots2 p = a # list \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "using True x"], ["proof (prove)\nusing this:\n  degree p = 2\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "unfolding rp"], ["proof (prove)\nusing this:\n  degree p = 2\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     Some [:- x, 1:] = None \\<longrightarrow> irreducible\\<^sub>d p) \\<and>\n    (Some [:- x, 1:] = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "note 2 = this"], ["proof (state)\nthis:\n  degree p \\<noteq> 2\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 2 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof (cases \"degree p = 3\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case True"], ["proof (state)\nthis:\n  degree p = 3\n\ngoal (2 subgoals):\n 1. degree p = 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "hence rp: \"?rp = (case ?rr p of None \\<Rightarrow> None | Some x \\<Rightarrow> Some [:- x, 1:])\""], ["proof (prove)\nusing this:\n  degree p = 3\n\ngoal (1 subgoal):\n 1. rational_proper_factor p =\n    (case rational_root_test p of None \\<Rightarrow> None\n     | Some x \\<Rightarrow> Some [:- x, 1:])", "unfolding d"], ["proof (prove)\nusing this:\n  degree p = 3\n\ngoal (1 subgoal):\n 1. (if degree p \\<le> 1 then None\n     else if degree p = 2\n          then case rat_roots2 p of [] \\<Rightarrow> None\n               | x # xs \\<Rightarrow> Some [:- x, 1:]\n          else if degree p = 3\n               then case rational_root_test p of None \\<Rightarrow> None\n                    | Some x \\<Rightarrow> Some [:- x, 1:]\n               else kronecker_factorization_rat p) =\n    (case rational_root_test p of None \\<Rightarrow> None\n     | Some x \\<Rightarrow> Some [:- x, 1:])", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p =\n  (case rational_root_test p of None \\<Rightarrow> None\n   | Some x \\<Rightarrow> Some [:- x, 1:])\n\ngoal (2 subgoals):\n 1. degree p = 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof (cases \"?rr p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case None"], ["proof (state)\nthis:\n  rational_root_test p = None\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from rational_root_test(2)[OF None]"], ["proof (chain)\npicking this:\n  \\<nexists>x. poly p x = 0", "have nex: \"\\<not> (\\<exists> x. poly p x = 0)\""], ["proof (prove)\nusing this:\n  \\<nexists>x. poly p x = 0\n\ngoal (1 subgoal):\n 1. \\<nexists>x. poly p x = 0", "by auto"], ["proof (state)\nthis:\n  \\<nexists>x. poly p x = 0\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from rp[unfolded None]"], ["proof (chain)\npicking this:\n  rational_proper_factor p =\n  (case None of None \\<Rightarrow> None\n   | Some x \\<Rightarrow> Some [:- x, 1:])", "have rp: \"?rp = None\""], ["proof (prove)\nusing this:\n  rational_proper_factor p =\n  (case None of None \\<Rightarrow> None\n   | Some x \\<Rightarrow> Some [:- x, 1:])\n\ngoal (1 subgoal):\n 1. rational_proper_factor p = None", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p = None\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "have \"irreducible\\<^sub>d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d p", "proof (rule irreducible\\<^sub>dI2)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q.\n       \\<lbrakk>0 < degree q; degree q \\<le> degree p div 2\\<rbrakk>\n       \\<Longrightarrow> \\<not> q dvd p", "fix q :: \"rat poly\""], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q.\n       \\<lbrakk>0 < degree q; degree q \\<le> degree p div 2\\<rbrakk>\n       \\<Longrightarrow> \\<not> q dvd p", "assume \"degree q > 0\" \"degree q \\<le> degree p div 2\""], ["proof (state)\nthis:\n  0 < degree q\n  degree q \\<le> degree p div 2\n\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q.\n       \\<lbrakk>0 < degree q; degree q \\<le> degree p div 2\\<rbrakk>\n       \\<Longrightarrow> \\<not> q dvd p", "with True"], ["proof (chain)\npicking this:\n  degree p = 3\n  0 < degree q\n  degree q \\<le> degree p div 2", "have dq: \"degree q = 1\""], ["proof (prove)\nusing this:\n  degree p = 3\n  0 < degree q\n  degree q \\<le> degree p div 2\n\ngoal (1 subgoal):\n 1. degree q = 1", "by auto"], ["proof (state)\nthis:\n  degree q = 1\n\ngoal (2 subgoals):\n 1. 0 < degree p\n 2. \\<And>q.\n       \\<lbrakk>0 < degree q; degree q \\<le> degree p div 2\\<rbrakk>\n       \\<Longrightarrow> \\<not> q dvd p", "show \"\\<not> q dvd p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> q dvd p", "by (rule degree_1_dvd_root[OF dq], insert nex, auto)"], ["proof (state)\nthis:\n  \\<not> q dvd p\n\ngoal (1 subgoal):\n 1. 0 < degree p", "qed (insert True, auto)"], ["proof (state)\nthis:\n  irreducible\\<^sub>d p\n\ngoal (2 subgoals):\n 1. rational_root_test p = None \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "with rp"], ["proof (chain)\npicking this:\n  rational_proper_factor p = None\n  irreducible\\<^sub>d p", "show ?thesis"], ["proof (prove)\nusing this:\n  rational_proper_factor p = None\n  irreducible\\<^sub>d p\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case (Some x)"], ["proof (state)\nthis:\n  rational_root_test p = Some x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from rational_root_test(1)[OF Some]"], ["proof (chain)\npicking this:\n  poly p x = 0", "have \"poly p x = 0\""], ["proof (prove)\nusing this:\n  poly p x = 0\n\ngoal (1 subgoal):\n 1. poly p x = 0", "."], ["proof (state)\nthis:\n  poly p x = 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from this[unfolded poly_eq_0_iff_dvd]"], ["proof (chain)\npicking this:\n  [:- x, 1:] dvd p", "have x: \"[: -x , 1 :] dvd p\""], ["proof (prove)\nusing this:\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. [:- x, 1:] dvd p", "by auto"], ["proof (state)\nthis:\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from Some rp"], ["proof (chain)\npicking this:\n  rational_root_test p = Some x\n  rational_proper_factor p =\n  (case rational_root_test p of None \\<Rightarrow> None\n   | Some x \\<Rightarrow> Some [:- x, 1:])", "have rp: \"?rp = Some ([: - x, 1 :])\""], ["proof (prove)\nusing this:\n  rational_root_test p = Some x\n  rational_proper_factor p =\n  (case rational_root_test p of None \\<Rightarrow> None\n   | Some x \\<Rightarrow> Some [:- x, 1:])\n\ngoal (1 subgoal):\n 1. rational_proper_factor p = Some [:- x, 1:]", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p = Some [:- x, 1:]\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_root_test p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "using True x"], ["proof (prove)\nusing this:\n  degree p = 3\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "unfolding rp"], ["proof (prove)\nusing this:\n  degree p = 3\n  [:- x, 1:] dvd p\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     Some [:- x, 1:] = None \\<longrightarrow> irreducible\\<^sub>d p) \\<and>\n    (Some [:- x, 1:] = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 3\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "note 3 = this"], ["proof (state)\nthis:\n  degree p \\<noteq> 3\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "let ?kp = \"kronecker_factorization_rat p\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "from 0 1 2 3"], ["proof (chain)\npicking this:\n  degree p \\<noteq> 0\n  degree p \\<noteq> 1\n  degree p \\<noteq> 2\n  degree p \\<noteq> 3", "have d4: \"degree p \\<ge> 4\" and d1: \"degree p \\<ge> 1\""], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n  degree p \\<noteq> 1\n  degree p \\<noteq> 2\n  degree p \\<noteq> 3\n\ngoal (1 subgoal):\n 1. 4 \\<le> degree p &&& 1 \\<le> degree p", "by auto"], ["proof (state)\nthis:\n  4 \\<le> degree p\n  1 \\<le> degree p\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "hence rp: \"?rp = ?kp\""], ["proof (prove)\nusing this:\n  4 \\<le> degree p\n  1 \\<le> degree p\n\ngoal (1 subgoal):\n 1. rational_proper_factor p = kronecker_factorization_rat p", "using d4 d"], ["proof (prove)\nusing this:\n  4 \\<le> degree p\n  1 \\<le> degree p\n  4 \\<le> degree p\n  rational_proper_factor p =\n  (if degree p \\<le> 1 then None\n   else if degree p = 2\n        then case rat_roots2 p of [] \\<Rightarrow> None\n             | x # xs \\<Rightarrow> Some [:- x, 1:]\n        else if degree p = 3\n             then case rational_root_test p of None \\<Rightarrow> None\n                  | Some x \\<Rightarrow> Some [:- x, 1:]\n             else kronecker_factorization_rat p)\n\ngoal (1 subgoal):\n 1. rational_proper_factor p = kronecker_factorization_rat p", "by auto"], ["proof (state)\nthis:\n  rational_proper_factor p = kronecker_factorization_rat p\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 3 \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "proof (cases ?kp)"], ["proof (state)\ngoal (2 subgoals):\n 1. kronecker_factorization_rat p = None \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a.\n       kronecker_factorization_rat p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case None"], ["proof (state)\nthis:\n  kronecker_factorization_rat p = None\n\ngoal (2 subgoals):\n 1. kronecker_factorization_rat p = None \\<Longrightarrow>\n    (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n 2. \\<And>a.\n       kronecker_factorization_rat p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "with rp kronecker_factorization_rat(2)[OF None d1]"], ["proof (chain)\npicking this:\n  rational_proper_factor p = kronecker_factorization_rat p\n  irreducible\\<^sub>d p\n  kronecker_factorization_rat p = None", "show ?thesis"], ["proof (prove)\nusing this:\n  rational_proper_factor p = kronecker_factorization_rat p\n  irreducible\\<^sub>d p\n  kronecker_factorization_rat p = None\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       kronecker_factorization_rat p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       kronecker_factorization_rat p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "case (Some q)"], ["proof (state)\nthis:\n  kronecker_factorization_rat p = Some q\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       kronecker_factorization_rat p = Some a \\<Longrightarrow>\n       (0 < degree p \\<longrightarrow>\n        rational_proper_factor p = None \\<longrightarrow>\n        irreducible\\<^sub>d p) \\<and>\n       (rational_proper_factor p = Some q \\<longrightarrow>\n        q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "with rp kronecker_factorization_rat(1)[OF Some]"], ["proof (chain)\npicking this:\n  rational_proper_factor p = kronecker_factorization_rat p\n  1 \\<le> degree q \\<and> degree q < degree p \\<and> q dvd p\n  kronecker_factorization_rat p = Some q", "show ?thesis"], ["proof (prove)\nusing this:\n  rational_proper_factor p = kronecker_factorization_rat p\n  1 \\<le> degree q \\<and> degree q < degree p \\<and> q dvd p\n  kronecker_factorization_rat p = Some q\n\ngoal (1 subgoal):\n 1. (0 < degree p \\<longrightarrow>\n     rational_proper_factor p = None \\<longrightarrow>\n     irreducible\\<^sub>d p) \\<and>\n    (rational_proper_factor p = Some q \\<longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n    \\<Longrightarrow> irreducible\\<^sub>d p\n 2. rational_proper_factor p = Some q \\<Longrightarrow>\n    q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p", "thus \"degree p > 0 \\<Longrightarrow> rational_proper_factor p = None \\<Longrightarrow> irreducible\\<^sub>d p\" \n    \"rational_proper_factor p = Some q \\<Longrightarrow> q dvd p \\<and> degree q \\<ge> 1 \\<and> degree q < degree p\""], ["proof (prove)\nusing this:\n  (0 < degree p \\<longrightarrow>\n   rational_proper_factor p = None \\<longrightarrow>\n   irreducible\\<^sub>d p) \\<and>\n  (rational_proper_factor p = Some q \\<longrightarrow>\n   q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n     \\<Longrightarrow> irreducible\\<^sub>d p) &&&\n    (rational_proper_factor p = Some q \\<Longrightarrow>\n     q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>0 < degree p; rational_proper_factor p = None\\<rbrakk>\n  \\<Longrightarrow> irreducible\\<^sub>d p\n  rational_proper_factor p = Some q \\<Longrightarrow>\n  q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p\n\ngoal:\nNo subgoals!", "qed"], ["", "function factorize_rat_poly_main :: \"rat \\<Rightarrow> rat poly list \\<Rightarrow> rat poly list \\<Rightarrow> rat \\<times> rat poly list\" where\n  \"factorize_rat_poly_main c irr [] = (c,irr)\"\n| \"factorize_rat_poly_main c irr (p # ps) = (if degree p = 0 \n    then factorize_rat_poly_main (c * coeff p 0) irr ps \n    else (case rational_proper_factor p of \n      None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n    | Some q \\<Rightarrow> factorize_rat_poly_main c irr (q # p div q # ps)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>c irr. x = (c, irr, []) \\<Longrightarrow> P;\n        \\<And>c irr p ps. x = (c, irr, p # ps) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>c irr ca irra.\n       (c, irr, []) = (ca, irra, []) \\<Longrightarrow> (c, irr) = (ca, irra)\n 3. \\<And>c irr ca irra p ps.\n       (c, irr, []) = (ca, irra, p # ps) \\<Longrightarrow>\n       (c, irr) =\n       (if degree p = 0\n        then factorize_rat_poly_main_sumC (ca * coeff p 0, irra, ps)\n        else case rational_proper_factor p of\n             None \\<Rightarrow>\n               factorize_rat_poly_main_sumC (ca, p # irra, ps)\n             | Some q \\<Rightarrow>\n                 factorize_rat_poly_main_sumC (ca, irra, q # p div q # ps))\n 4. \\<And>c irr p ps ca irra pa psa.\n       (c, irr, p # ps) = (ca, irra, pa # psa) \\<Longrightarrow>\n       (if degree p = 0\n        then factorize_rat_poly_main_sumC (c * coeff p 0, irr, ps)\n        else case rational_proper_factor p of\n             None \\<Rightarrow>\n               factorize_rat_poly_main_sumC (c, p # irr, ps)\n             | Some q \\<Rightarrow>\n                 factorize_rat_poly_main_sumC (c, irr, q # p div q # ps)) =\n       (if degree pa = 0\n        then factorize_rat_poly_main_sumC (ca * coeff pa 0, irra, psa)\n        else case rational_proper_factor pa of\n             None \\<Rightarrow>\n               factorize_rat_poly_main_sumC (ca, pa # irra, psa)\n             | Some q \\<Rightarrow>\n                 factorize_rat_poly_main_sumC\n                  (ca, irra, q # pa div q # psa))", "by pat_completeness auto"], ["", "definition \"factorize_rat_poly_main_wf_rel = inv_image (mult1 {(x, y). x < y}) (\\<lambda>(c, irr, ps). mset (map degree ps))\""], ["", "lemma wf_factorize_rat_poly_main_wf_rel: \"wf factorize_rat_poly_main_wf_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf factorize_rat_poly_main_wf_rel", "unfolding factorize_rat_poly_main_wf_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image (mult1 {(x, y). x < y})\n         (\\<lambda>(c, irr, ps). mset (map degree ps)))", "using wf_mult1[OF wf_less]"], ["proof (prove)\nusing this:\n  wf (mult1 {(x, y). x < y})\n\ngoal (1 subgoal):\n 1. wf (inv_image (mult1 {(x, y). x < y})\n         (\\<lambda>(c, irr, ps). mset (map degree ps)))", "by auto"], ["", "lemma factorize_rat_poly_main_wf_rel_sub:\n  \"((a, b, ps), (c, d, p # ps)) \\<in> factorize_rat_poly_main_wf_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b, ps), c, d, p # ps) \\<in> factorize_rat_poly_main_wf_rel", "unfolding factorize_rat_poly_main_wf_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b, ps), c, d, p # ps)\n    \\<in> inv_image (mult1 {(x, y). x < y})\n           (\\<lambda>(c, irr, ps). mset (map degree ps))", "by (auto intro: mult1I [of _ _ _ _ \"{#}\"])"], ["", "lemma factorize_rat_poly_main_wf_rel_two: assumes \"degree q < degree p\" \"degree r < degree p\"\n  shows \"((a,b,q # r # ps), (c,d,p # ps)) \\<in> factorize_rat_poly_main_wf_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b, q # r # ps), c, d, p # ps) \\<in> factorize_rat_poly_main_wf_rel", "unfolding factorize_rat_poly_main_wf_rel_def mult1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b, q # r # ps), c, d, p # ps)\n    \\<in> inv_image\n           {(N, M).\n            \\<exists>a M0 K.\n               M = add_mset a M0 \\<and>\n               N = M0 + K \\<and>\n               (\\<forall>b.\n                   b \\<in># K \\<longrightarrow>\n                   (b, a) \\<in> {(x, y). x < y})}\n           (\\<lambda>(c, irr, ps). mset (map degree ps))", "using add_eq_conv_ex assms ab_semigroup_add_class.add_ac"], ["proof (prove)\nusing this:\n  (add_mset ?a ?M = add_mset ?b ?N) =\n  (?M = ?N \\<and> ?a = ?b \\<or>\n   (\\<exists>K. ?M = add_mset ?b K \\<and> ?N = add_mset ?a K))\n  degree q < degree p\n  degree r < degree p\n  ?a + ?b + ?c = ?a + (?b + ?c)\n  ?a + ?b = ?b + ?a\n  ?b + (?a + ?c) = ?a + (?b + ?c)\n\ngoal (1 subgoal):\n 1. ((a, b, q # r # ps), c, d, p # ps)\n    \\<in> inv_image\n           {(N, M).\n            \\<exists>a M0 K.\n               M = add_mset a M0 \\<and>\n               N = M0 + K \\<and>\n               (\\<forall>b.\n                   b \\<in># K \\<longrightarrow>\n                   (b, a) \\<in> {(x, y). x < y})}\n           (\\<lambda>(c, irr, ps). mset (map degree ps))", "by fastforce"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All factorize_rat_poly_main_dom", "proof (relation factorize_rat_poly_main_wf_rel,\n  rule wf_factorize_rat_poly_main_wf_rel, rule factorize_rat_poly_main_wf_rel_sub, \n  rule factorize_rat_poly_main_wf_rel_sub, rule factorize_rat_poly_main_wf_rel_two)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree x2 < degree p\n 2. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree (p div x2) < degree p", "fix p q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree x2 < degree p\n 2. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree (p div x2) < degree p", "assume rf: \"rational_proper_factor p = Some q\" and dp: \"degree p \\<noteq> 0\""], ["proof (state)\nthis:\n  rational_proper_factor p = Some q\n  degree p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree x2 < degree p\n 2. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree (p div x2) < degree p", "from rational_proper_factor(2)[OF rf]"], ["proof (chain)\npicking this:\n  q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p", "have dvd: \"q dvd p\" and deg: \"1 \\<le> degree q\" \"degree q < degree p\""], ["proof (prove)\nusing this:\n  q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p\n\ngoal (1 subgoal):\n 1. q dvd p &&& 1 \\<le> degree q &&& degree q < degree p", "by auto"], ["proof (state)\nthis:\n  q dvd p\n  1 \\<le> degree q\n  degree q < degree p\n\ngoal (2 subgoals):\n 1. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree x2 < degree p\n 2. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree (p div x2) < degree p", "show \"degree q < degree p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree q < degree p", "by fact"], ["proof (state)\nthis:\n  degree q < degree p\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree (p div x2) < degree p", "from dvd"], ["proof (chain)\npicking this:\n  q dvd p", "have \"p = q * (p div q)\""], ["proof (prove)\nusing this:\n  q dvd p\n\ngoal (1 subgoal):\n 1. p = q * (p div q)", "by auto"], ["proof (state)\nthis:\n  p = q * (p div q)\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree (p div x2) < degree p", "from arg_cong[OF this, of degree]"], ["proof (chain)\npicking this:\n  degree p = degree (q * (p div q))", "have \"degree p = degree q + degree (p div q)\""], ["proof (prove)\nusing this:\n  degree p = degree (q * (p div q))\n\ngoal (1 subgoal):\n 1. degree p = degree q + degree (p div q)", "by (subst degree_mult_eq[symmetric], insert dp, auto)"], ["proof (state)\nthis:\n  degree p = degree q + degree (p div q)\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps x2.\n       \\<lbrakk>degree p \\<noteq> 0;\n        rational_proper_factor p = Some x2\\<rbrakk>\n       \\<Longrightarrow> degree (p div x2) < degree p", "with deg"], ["proof (chain)\npicking this:\n  1 \\<le> degree q\n  degree q < degree p\n  degree p = degree q + degree (p div q)", "show \"degree (p div q) < degree p\""], ["proof (prove)\nusing this:\n  1 \\<le> degree q\n  degree q < degree p\n  degree p = degree q + degree (p div q)\n\ngoal (1 subgoal):\n 1. degree (p div q) < degree p", "by simp"], ["proof (state)\nthis:\n  degree (p div q) < degree p\n\ngoal:\nNo subgoals!", "qed"], ["", "declare factorize_rat_poly_main.simps[simp del]"], ["", "lemma factorize_rat_poly_main:\n  assumes \"factorize_rat_poly_main c irr ps = (d,qs)\"\n    and \"Ball (set irr) irreducible\\<^sub>d\"\n  shows \"Ball (set qs) irreducible\\<^sub>d\" (is ?g1)\n    and \"smult c (prod_list (irr @ ps)) = smult d (prod_list qs)\" (is ?g2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set qs) irreducible\\<^sub>d &&&\n    smult c (prod_list (irr @ ps)) = smult d (prod_list qs)", "proof (atomize(full), insert assms, induct c irr ps rule: factorize_rat_poly_main.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c irr.\n       \\<lbrakk>factorize_rat_poly_main c irr [] = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ [])) =\n                         smult d (prod_list qs)\n 2. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "case (1 c irr)"], ["proof (state)\nthis:\n  factorize_rat_poly_main c irr [] = (d, qs)\n  \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\n\ngoal (2 subgoals):\n 1. \\<And>c irr.\n       \\<lbrakk>factorize_rat_poly_main c irr [] = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ [])) =\n                         smult d (prod_list qs)\n 2. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "thus ?case"], ["proof (prove)\nusing this:\n  factorize_rat_poly_main c irr [] = (d, qs)\n  \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ [])) = smult d (prod_list qs)", "by (auto simp: factorize_rat_poly_main.simps)"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ [])) = smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "case (2 c irr p ps)"], ["proof (state)\nthis:\n  \\<lbrakk>degree p = 0;\n   factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n   \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult (c * coeff p 0) (prod_list (irr @ ps)) =\n                    smult d (prod_list qs)\n  \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n   factorize_rat_poly_main c (p # irr) ps = (d, qs);\n   \\<forall>a\\<in>set (p # irr). irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult c (prod_list ((p # irr) @ ps)) =\n                    smult d (prod_list qs)\n  \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some ?x2.0;\n   factorize_rat_poly_main c irr (?x2.0 # p div ?x2.0 # ps) = (d, qs);\n   \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult c (prod_list (irr @ ?x2.0 # p div ?x2.0 # ps)) =\n                    smult d (prod_list qs)\n  factorize_rat_poly_main c irr (p # ps) = (d, qs)\n  \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "note IH = 2(1-3)"], ["proof (state)\nthis:\n  \\<lbrakk>degree p = 0;\n   factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n   \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult (c * coeff p 0) (prod_list (irr @ ps)) =\n                    smult d (prod_list qs)\n  \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n   factorize_rat_poly_main c (p # irr) ps = (d, qs);\n   \\<forall>a\\<in>set (p # irr). irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult c (prod_list ((p # irr) @ ps)) =\n                    smult d (prod_list qs)\n  \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some ?x2.0;\n   factorize_rat_poly_main c irr (?x2.0 # p div ?x2.0 # ps) = (d, qs);\n   \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult c (prod_list (irr @ ?x2.0 # p div ?x2.0 # ps)) =\n                    smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "note res = 2(4)[unfolded factorize_rat_poly_main.simps(2)[of c irr p ps]]"], ["proof (state)\nthis:\n  (if degree p = 0 then factorize_rat_poly_main (c * coeff p 0) irr ps\n   else case rational_proper_factor p of\n        None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n        | Some q \\<Rightarrow>\n            factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "note irr = 2(5)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\n\ngoal (1 subgoal):\n 1. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "let ?f = factorize_rat_poly_main"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c irr p ps.\n       \\<lbrakk>\\<lbrakk>degree p = 0;\n                 factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs);\n                 Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n                \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                                  smult (c * coeff p 0)\n                                   (prod_list (irr @ ps)) =\n                                  smult d (prod_list qs);\n        \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = None;\n         factorize_rat_poly_main c (p # irr) ps = (d, qs);\n         Ball (set (p # irr)) irreducible\\<^sub>d\\<rbrakk>\n        \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                          smult c (prod_list ((p # irr) @ ps)) =\n                          smult d (prod_list qs);\n        \\<And>x2.\n           \\<lbrakk>degree p \\<noteq> 0; rational_proper_factor p = Some x2;\n            factorize_rat_poly_main c irr (x2 # p div x2 # ps) = (d, qs);\n            Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n           \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                             smult c\n                              (prod_list (irr @ x2 # p div x2 # ps)) =\n                             smult d (prod_list qs);\n        factorize_rat_poly_main c irr (p # ps) = (d, qs);\n        Ball (set irr) irreducible\\<^sub>d\\<rbrakk>\n       \\<Longrightarrow> Ball (set qs) irreducible\\<^sub>d \\<and>\n                         smult c (prod_list (irr @ p # ps)) =\n                         smult d (prod_list qs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "proof (cases \"degree p = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "case True"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "with res"], ["proof (chain)\npicking this:\n  (if degree p = 0 then factorize_rat_poly_main (c * coeff p 0) irr ps\n   else case rational_proper_factor p of\n        None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n        | Some q \\<Rightarrow>\n            factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n  degree p = 0", "have res: \"?f (c * coeff p 0) irr ps = (d,qs)\""], ["proof (prove)\nusing this:\n  (if degree p = 0 then factorize_rat_poly_main (c * coeff p 0) irr ps\n   else case rational_proper_factor p of\n        None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n        | Some q \\<Rightarrow>\n            factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n  degree p = 0\n\ngoal (1 subgoal):\n 1. factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs)", "by simp"], ["proof (state)\nthis:\n  factorize_rat_poly_main (c * coeff p 0) irr ps = (d, qs)\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from degree0_coeffs[OF True]"], ["proof (chain)\npicking this:\n  \\<exists>a. p = [:a:]", "obtain a where p: \"p = [: a :]\""], ["proof (prove)\nusing this:\n  \\<exists>a. p = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>a. p = [:a:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p = [:a:]\n\ngoal (2 subgoals):\n 1. degree p = 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from IH(1)[OF True res irr]"], ["proof (chain)\npicking this:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult (c * coeff p 0) (prod_list (irr @ ps)) = smult d (prod_list qs)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult (c * coeff p 0) (prod_list (irr @ ps)) = smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "using p"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult (c * coeff p 0) (prod_list (irr @ ps)) = smult d (prod_list qs)\n  p = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "case False"], ["proof (state)\nthis:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "note IH = IH(2-)[OF False]"], ["proof (state)\nthis:\n  \\<lbrakk>rational_proper_factor p = None;\n   factorize_rat_poly_main c (p # irr) ps = (d, qs);\n   \\<forall>a\\<in>set (p # irr). irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult c (prod_list ((p # irr) @ ps)) =\n                    smult d (prod_list qs)\n  \\<lbrakk>rational_proper_factor p = Some ?x2.0;\n   factorize_rat_poly_main c irr (?x2.0 # p div ?x2.0 # ps) = (d, qs);\n   \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n                    smult c (prod_list (irr @ ?x2.0 # p div ?x2.0 # ps)) =\n                    smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from False"], ["proof (chain)\npicking this:\n  degree p \\<noteq> 0", "have \"(degree p = 0) = False\""], ["proof (prove)\nusing this:\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (degree p = 0) = False", "by auto"], ["proof (state)\nthis:\n  (degree p = 0) = False\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "note res = res[unfolded this if_False]"], ["proof (state)\nthis:\n  (case rational_proper_factor p of\n   None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n   | Some q \\<Rightarrow>\n       factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "let ?rf = \"rational_proper_factor p\""], ["proof (state)\ngoal (1 subgoal):\n 1. degree p \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "proof (cases ?rf)"], ["proof (state)\ngoal (2 subgoals):\n 1. rational_proper_factor p = None \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "case None"], ["proof (state)\nthis:\n  rational_proper_factor p = None\n\ngoal (2 subgoals):\n 1. rational_proper_factor p = None \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "with res"], ["proof (chain)\npicking this:\n  (case rational_proper_factor p of\n   None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n   | Some q \\<Rightarrow>\n       factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n  rational_proper_factor p = None", "have res: \"?f c (p # irr) ps = (d,qs)\""], ["proof (prove)\nusing this:\n  (case rational_proper_factor p of\n   None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n   | Some q \\<Rightarrow>\n       factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n  rational_proper_factor p = None\n\ngoal (1 subgoal):\n 1. factorize_rat_poly_main c (p # irr) ps = (d, qs)", "by auto"], ["proof (state)\nthis:\n  factorize_rat_poly_main c (p # irr) ps = (d, qs)\n\ngoal (2 subgoals):\n 1. rational_proper_factor p = None \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from rational_proper_factor(1)[OF _ None] False"], ["proof (chain)\npicking this:\n  0 < degree p \\<Longrightarrow> irreducible\\<^sub>d p\n  degree p \\<noteq> 0", "have irp: \"irreducible\\<^sub>d p\""], ["proof (prove)\nusing this:\n  0 < degree p \\<Longrightarrow> irreducible\\<^sub>d p\n  degree p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d p", "by auto"], ["proof (state)\nthis:\n  irreducible\\<^sub>d p\n\ngoal (2 subgoals):\n 1. rational_proper_factor p = None \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "note IH(1)[OF None res, unfolded atomize_imp imp_conjR, simplified]"], ["proof (state)\nthis:\n  (irreducible p \\<and>\n   (\\<forall>x\\<in>set irr. irreducible x) \\<longrightarrow>\n   (\\<forall>x\\<in>set qs. irreducible x)) \\<and>\n  (irreducible p \\<and>\n   (\\<forall>x\\<in>set irr. irreducible x) \\<longrightarrow>\n   smult c (p * (prod_list irr * prod_list ps)) = smult d (prod_list qs))\n\ngoal (2 subgoals):\n 1. rational_proper_factor p = None \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "note 1 = conjunct1[OF this, rule_format] conjunct2[OF this, rule_format]"], ["proof (state)\nthis:\n  \\<lbrakk>irreducible p \\<and> Ball (set irr) irreducible;\n   ?x \\<in> set qs\\<rbrakk>\n  \\<Longrightarrow> irreducible ?x\n  irreducible p \\<and> Ball (set irr) irreducible \\<Longrightarrow>\n  smult c (p * (prod_list irr * prod_list ps)) = smult d (prod_list qs)\n\ngoal (2 subgoals):\n 1. rational_proper_factor p = None \\<Longrightarrow>\n    (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n 2. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from irr irp"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\n  irreducible\\<^sub>d p", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set irr. irreducible\\<^sub>d a\n  irreducible\\<^sub>d p\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "by (auto intro:1 simp: ac_simps)"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "case (Some q)"], ["proof (state)\nthis:\n  rational_proper_factor p = Some q\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "define pq where \"pq = p div q\""], ["proof (state)\nthis:\n  pq = p div q\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from Some res"], ["proof (chain)\npicking this:\n  rational_proper_factor p = Some q\n  (case rational_proper_factor p of\n   None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n   | Some q \\<Rightarrow>\n       factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)", "have res: \"?f c irr (q # pq # ps) = (d,qs)\""], ["proof (prove)\nusing this:\n  rational_proper_factor p = Some q\n  (case rational_proper_factor p of\n   None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n   | Some q \\<Rightarrow>\n       factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n\ngoal (1 subgoal):\n 1. factorize_rat_poly_main c irr (q # pq # ps) = (d, qs)", "unfolding pq_def"], ["proof (prove)\nusing this:\n  rational_proper_factor p = Some q\n  (case rational_proper_factor p of\n   None \\<Rightarrow> factorize_rat_poly_main c (p # irr) ps\n   | Some q \\<Rightarrow>\n       factorize_rat_poly_main c irr (q # p div q # ps)) =\n  (d, qs)\n\ngoal (1 subgoal):\n 1. factorize_rat_poly_main c irr (q # p div q # ps) = (d, qs)", "by auto"], ["proof (state)\nthis:\n  factorize_rat_poly_main c irr (q # pq # ps) = (d, qs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from rational_proper_factor(2)[OF Some]"], ["proof (chain)\npicking this:\n  q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p", "have \"q dvd p\""], ["proof (prove)\nusing this:\n  q dvd p \\<and> 1 \\<le> degree q \\<and> degree q < degree p\n\ngoal (1 subgoal):\n 1. q dvd p", "by auto"], ["proof (state)\nthis:\n  q dvd p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "hence p: \"p = q * pq\""], ["proof (prove)\nusing this:\n  q dvd p\n\ngoal (1 subgoal):\n 1. p = q * pq", "unfolding pq_def"], ["proof (prove)\nusing this:\n  q dvd p\n\ngoal (1 subgoal):\n 1. p = q * (p div q)", "by auto"], ["proof (state)\nthis:\n  p = q * pq\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       rational_proper_factor p = Some a \\<Longrightarrow>\n       (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n       smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "from IH(2)[OF Some, folded pq_def, OF res irr]"], ["proof (chain)\npicking this:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ q # pq # ps)) = smult d (prod_list qs)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ q # pq # ps)) = smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)", "unfolding p"], ["proof (prove)\nusing this:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ q # pq # ps)) = smult d (prod_list qs)\n\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n    smult c (prod_list (irr @ q * pq # ps)) = smult d (prod_list qs)", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set qs. irreducible\\<^sub>d a) \\<and>\n  smult c (prod_list (irr @ p # ps)) = smult d (prod_list qs)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"factorize_rat_poly_basic p = factorize_rat_poly_main 1 [] [p]\""], ["", "lemma factorize_rat_poly_basic: assumes res: \"factorize_rat_poly_basic p = (c,qs)\" \n  shows \"p = smult c (prod_list qs)\" \n  \"\\<And> q. q \\<in> set qs \\<Longrightarrow> irreducible\\<^sub>d q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) &&&\n    (\\<And>q. q \\<in> set qs \\<Longrightarrow> irreducible\\<^sub>d q)", "using factorize_rat_poly_main[OF res[unfolded factorize_rat_poly_basic_def]]"], ["proof (prove)\nusing this:\n  Ball (set []) irreducible\\<^sub>d \\<Longrightarrow>\n  Ball (set qs) irreducible\\<^sub>d\n  Ball (set []) irreducible\\<^sub>d \\<Longrightarrow>\n  smult 1 (prod_list ([] @ [p])) = smult c (prod_list qs)\n\ngoal (1 subgoal):\n 1. p = smult c (prod_list qs) &&&\n    (\\<And>q. q \\<in> set qs \\<Longrightarrow> irreducible\\<^sub>d q)", "by auto"], ["", "text \\<open>We removed the factorize-rat-poly function from this theory, since the one in \n  Berlekamp-Zassenhaus is easier to use and implements a more efficient algorithm.\\<close>"], ["", "end"]]}