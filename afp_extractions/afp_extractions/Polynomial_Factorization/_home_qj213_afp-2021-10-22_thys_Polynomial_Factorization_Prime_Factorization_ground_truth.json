{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization/Prime_Factorization.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization", "problem_names": ["lemma primes_1000: \"primes_1000 = filter prime [0..<1001]\"", "lemma remove_prime_factor: assumes res: \"remove_prime_factor i n ps = (m,qs)\"\n  and i: \"i > 1\"\n  and n: \"n \\<noteq> 0\"\n  shows \"\\<exists> rs. qs = rs @ ps \\<and> n = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\"", "lemma prime_sqrtI: assumes n: \"n \\<ge> 2\" \n  and small: \"\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> j dvd n\"\n  and i: \"\\<not> i * i \\<le> n\"\n  shows \"prime (n::nat)\"", "lemma candidate_invariant_0: \"candidate_invariant 0\"", "lemma next_candidates: assumes res: \"next_candidates n = (m,ps)\"\n  and n: \"candidate_invariant n\"\n  shows \"candidate_invariant m\" \"sorted ps\" \"{i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\" \n    \"set ps \\<subseteq> {2..} \\<inter> {n..<m}\" \"distinct ps\" \"ps \\<noteq> []\" \"n < m\"", "lemma prime_test_iterate2: assumes small: \"\\<And> j. 2 \\<le> j \\<Longrightarrow> j < (i :: nat) \\<Longrightarrow> \\<not> j dvd n\"\n  and odd: \"odd n\"\n  and n: \"n \\<ge> 3\"\n  and i: \"i \\<ge> 3\" \"odd i\"\n  and mod: \"\\<not> i dvd n\"\n  and j: \"2 \\<le> j\" \"j < i + 2\"\n  shows \"\\<not> j dvd n\"", "lemma prime_divisor: assumes \"j \\<ge> 2\" and \"j dvd n\" shows\n  \"\\<exists> p :: nat. prime p \\<and> p dvd j \\<and> p dvd n\"", "lemma prime_nat_main: \"ni = (n,i,is) \\<Longrightarrow> i \\<ge> 2 \\<Longrightarrow> n \\<ge> 2 \\<Longrightarrow>\n  (\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> (j dvd n)) \\<Longrightarrow>\n  (\\<And> j. i \\<le> j \\<Longrightarrow> j < jj \\<Longrightarrow> prime j \\<Longrightarrow> j \\<in> set is) \\<Longrightarrow> i \\<le> jj \\<Longrightarrow>\n  sorted is \\<Longrightarrow> distinct is \\<Longrightarrow> candidate_invariant jj \\<Longrightarrow> set is \\<subseteq> {i..<jj} \\<Longrightarrow> \n  res = prime_nat_main n jj is \\<Longrightarrow> \n  res = prime n\"", "lemma prime_factorization_nat_main: \"ni = (n,i,is) \\<Longrightarrow> i \\<ge> 2 \\<Longrightarrow> n \\<ge> 2 \\<Longrightarrow>\n  (\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> (j dvd n)) \\<Longrightarrow> \n  (\\<And> j. i \\<le> j \\<Longrightarrow> j < jj \\<Longrightarrow> prime j \\<Longrightarrow> j \\<in> set is) \\<Longrightarrow> i \\<le> jj \\<Longrightarrow>\n  sorted is \\<Longrightarrow> distinct is \\<Longrightarrow> candidate_invariant jj \\<Longrightarrow> set is \\<subseteq> {i..<jj} \\<Longrightarrow> \n  res = prime_factorization_nat_main n jj is ps \\<Longrightarrow> \n  \\<exists> qs. res = qs @ ps \\<and> Ball (set qs) prime \\<and> n = prod_list qs\"", "lemma prime_nat[simp]: \"prime_nat n = prime n\"", "lemma prime_factorization_nat: fixes n :: nat\n  defines \"pf \\<equiv> prime_factorization_nat n\"\n  shows \"Ball (set pf) prime\"\n  and \"n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n\"\n  and \"n = 0 \\<Longrightarrow> pf = []\"", "lemma prod_mset_multiset_prime_factorization_nat [simp]: \n  \"(x::nat) \\<noteq> 0 \\<Longrightarrow> prod_mset (prime_factorization x) = x\"", "lemma prime_factorization_unique'':\n  fixes A :: \"'a :: {factorial_semiring_multiplicative} multiset\"\n  assumes \"\\<And>p. p \\<in># A \\<Longrightarrow> prime p\"\n  assumes \"prod_mset A = normalize x\"\n  shows   \"prime_factorization x = A\"", "lemma multiset_prime_factorization_nat_correct:\n  \"prime_factorization n = mset (prime_factorization_nat n)\"", "lemma multiset_prime_factorization_code[code_unfold]: \n  \"prime_factorization = (\\<lambda>n. mset (prime_factorization_nat n))\"", "lemma divisors_nat: \n  \"n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}\" \"distinct (divisors_nat n)\" \"divisors_nat 0 = []\"", "lemma divisors_int_pos: \"x \\<noteq> 0 \\<Longrightarrow> set (divisors_int_pos x) = {i. i dvd x \\<and> i > 0}\" \"distinct (divisors_int_pos x)\"\n  \"divisors_int_pos 0 = []\"", "lemma divisors_int: \"x \\<noteq> 0 \\<Longrightarrow> set (divisors_int x) = {i. i dvd x}\" \"distinct (divisors_int x)\"\n  \"divisors_int 0 = []\"", "lemma divisors_funD: \"divisors_fun df \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> d dvd x \\<Longrightarrow> d \\<in> set (df x)\"", "lemma divisors_pos_funD: \"divisors_pos_fun df \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> d dvd x \\<Longrightarrow> d > 0 \\<Longrightarrow> d \\<in> set (df x)\"", "lemma divisors_fun_nat: \"divisors_fun divisors_nat\"", "lemma divisors_fun_int: \"divisors_fun divisors_int\"", "lemma divisors_pos_fun_int: \"divisors_pos_fun divisors_int_pos\""], "translations": [["", "lemma primes_1000: \"primes_1000 = filter prime [0..<1001]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primes_1000 = filter prime [0..<1001]", "by eval"], ["", "definition next_candidates :: \"nat \\<Rightarrow> nat \\<times> nat list\" where\n  \"next_candidates n = (if n = 0 then (1001,primes_1000) else (n + 30, \n    [n,n+2,n+6,n+8,n+12,n+18,n+20,n+26]))\""], ["", "definition \"candidate_invariant n = (n = 0 \\<or> n mod 30 = (11 :: nat))\""], ["", "partial_function (tailrec) remove_prime_factor :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat list \\<Rightarrow> nat \\<times> nat list \" where\n  [code]: \"remove_prime_factor p n ps = (case Divides.divmod_nat n p of (n',m) \\<Rightarrow> \n     if m = 0 then remove_prime_factor p n' (p # ps) else (n,ps))\""], ["", "partial_function (tailrec) prime_factorization_nat_main \n  :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat list \\<Rightarrow> nat list \\<Rightarrow> nat list\" where\n  [code]: \"prime_factorization_nat_main n j is ps = (case is of \n     [] \\<Rightarrow> \n       (case next_candidates j of (j,is) \\<Rightarrow> prime_factorization_nat_main n j is ps)\n   | (i # is) \\<Rightarrow> (case Divides.divmod_nat n i of (n',m) \\<Rightarrow> \n       if m = 0 then case remove_prime_factor i n' (i # ps)\n       of (n',ps') \\<Rightarrow> if n' = 1 then ps' else \n         prime_factorization_nat_main n' j is ps'\n       else if i * i \\<le> n then prime_factorization_nat_main n j is ps\n       else (n # ps)))\""], ["", "partial_function (tailrec) prime_nat_main \n  :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat list \\<Rightarrow> bool\" where\n  [code]: \"prime_nat_main n j is = (case is of \n    [] \\<Rightarrow> (case next_candidates j of (j,is) \\<Rightarrow> prime_nat_main n j is)\n  | (i # is) \\<Rightarrow> (if i dvd n then i \\<ge> n else if i * i \\<le> n then prime_nat_main n j is\n    else True))\""], ["", "definition prime_nat :: \"nat \\<Rightarrow> bool\" where\n  \"prime_nat n \\<equiv> if n < 2 then False else \\<comment> \\<open>TODO: integrate precomputed map\\<close>\n     case next_candidates 0 of (j,is) \\<Rightarrow> prime_nat_main n j is\""], ["", "definition prime_factorization_nat :: \"nat \\<Rightarrow> nat list\" where\n  \"prime_factorization_nat n \\<equiv> rev (if n < 2 then [] else \n    case next_candidates 0 of (j,is) \\<Rightarrow> prime_factorization_nat_main n j is [])\""], ["", "definition divisors_nat :: \"nat \\<Rightarrow> nat list\" where \n  \"divisors_nat n \\<equiv> if n = 0 then [] else \n     remdups_adj (sort (map prod_list (subseqs (prime_factorization_nat n))))\""], ["", "definition divisors_int_pos :: \"int \\<Rightarrow> int list\" where\n  \"divisors_int_pos x \\<equiv> map int (divisors_nat (nat (abs x)))\""], ["", "definition divisors_int :: \"int \\<Rightarrow> int list\" where\n  \"divisors_int x \\<equiv> let xs = divisors_int_pos x in xs @ (map uminus xs)\""], ["", "subsection \\<open>Proofs\\<close>"], ["", "lemma remove_prime_factor: assumes res: \"remove_prime_factor i n ps = (m,qs)\"\n  and i: \"i > 1\"\n  and n: \"n \\<noteq> 0\"\n  shows \"\\<exists> rs. qs = rs @ ps \\<and> n = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "using res n"], ["proof (prove)\nusing this:\n  remove_prime_factor i n ps = (m, qs)\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "proof (induct n arbitrary: ps rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "case (less n ps)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; remove_prime_factor i ?y ?ps = (m, qs);\n   ?y \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       qs = rs @ ?ps \\<and>\n                       ?y = m * prod_list rs \\<and>\n                       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n  remove_prime_factor i n ps = (m, qs)\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "obtain n' mo where dm: \"Divides.divmod_nat n i = (n',mo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' mo.\n        divmod_nat n i = (n', mo) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  divmod_nat n i = (n', mo)\n\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "hence n': \"n' = n div i\" and mo: \"mo = n mod i\""], ["proof (prove)\nusing this:\n  divmod_nat n i = (n', mo)\n\ngoal (1 subgoal):\n 1. n' = n div i &&& mo = n mod i", "by (auto simp: divmod_nat_def)"], ["proof (state)\nthis:\n  n' = n div i\n  mo = n mod i\n\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "from less(2)[unfolded remove_prime_factor.simps[of i n] dm]"], ["proof (chain)\npicking this:\n  (case (n', mo) of\n   (n', m) \\<Rightarrow>\n     if m = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) =\n  (m, qs)", "have res: \"(if mo = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) = (m, qs)\""], ["proof (prove)\nusing this:\n  (case (n', mo) of\n   (n', m) \\<Rightarrow>\n     if m = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) =\n  (m, qs)\n\ngoal (1 subgoal):\n 1. (if mo = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) =\n    (m, qs)", "by auto"], ["proof (state)\nthis:\n  (if mo = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) = (m, qs)\n\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "from less(3)"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have n: \"n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "with n' i"], ["proof (chain)\npicking this:\n  n' = n div i\n  1 < i\n  n \\<noteq> 0", "have \"n' < n\""], ["proof (prove)\nusing this:\n  n' = n div i\n  1 < i\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n' < n", "by auto"], ["proof (state)\nthis:\n  n' < n\n\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "note IH = less(1)[OF this]"], ["proof (state)\nthis:\n  \\<lbrakk>remove_prime_factor i n' ?ps = (m, qs); n' \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>rs.\n                       qs = rs @ ?ps \\<and>\n                       n' = m * prod_list rs \\<and>\n                       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n\ngoal (1 subgoal):\n 1. \\<And>x ps.\n       \\<lbrakk>\\<And>y ps.\n                   \\<lbrakk>y < x; remove_prime_factor i y ps = (m, qs);\n                    y \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>rs.\n  qs = rs @ ps \\<and>\n  y = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i};\n        remove_prime_factor i x ps = (m, qs); x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs.\n                            qs = rs @ ps \\<and>\n                            x = m * prod_list rs \\<and>\n                            \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "proof (cases \"mo = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. mo = 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n 2. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "case True"], ["proof (state)\nthis:\n  mo = 0\n\ngoal (2 subgoals):\n 1. mo = 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n 2. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "with mo n'"], ["proof (chain)\npicking this:\n  mo = n mod i\n  n' = n div i\n  mo = 0", "have n: \"n = n' * i\""], ["proof (prove)\nusing this:\n  mo = n mod i\n  n' = n div i\n  mo = 0\n\ngoal (1 subgoal):\n 1. n = n' * i", "by auto"], ["proof (state)\nthis:\n  n = n' * i\n\ngoal (2 subgoals):\n 1. mo = 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n 2. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "with \\<open>n \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  n = n' * i", "have n': \"n' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  n = n' * i\n\ngoal (1 subgoal):\n 1. n' \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  n' \\<noteq> 0\n\ngoal (2 subgoals):\n 1. mo = 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n 2. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "from True res"], ["proof (chain)\npicking this:\n  mo = 0\n  (if mo = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) = (m, qs)", "have \"remove_prime_factor i n' (i # ps) = (m,qs)\""], ["proof (prove)\nusing this:\n  mo = 0\n  (if mo = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) = (m, qs)\n\ngoal (1 subgoal):\n 1. remove_prime_factor i n' (i # ps) = (m, qs)", "by auto"], ["proof (state)\nthis:\n  remove_prime_factor i n' (i # ps) = (m, qs)\n\ngoal (2 subgoals):\n 1. mo = 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n 2. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "from IH[OF this n']"], ["proof (chain)\npicking this:\n  \\<exists>rs.\n     qs = rs @ i # ps \\<and>\n     n' = m * prod_list rs \\<and>\n     \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "obtain rs where \n      \"qs = rs @ i # ps\" and \"n' = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\""], ["proof (prove)\nusing this:\n  \\<exists>rs.\n     qs = rs @ i # ps \\<and>\n     n' = m * prod_list rs \\<and>\n     \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n\ngoal (1 subgoal):\n 1. (\\<And>rs.\n        \\<lbrakk>qs = rs @ i # ps;\n         n' = m * prod_list rs \\<and>\n         \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  qs = rs @ i # ps\n  n' = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n\ngoal (2 subgoals):\n 1. mo = 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n 2. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "thus ?thesis"], ["proof (prove)\nusing this:\n  qs = rs @ i # ps\n  n' = m * prod_list rs \\<and> \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "by (intro exI[of _ \"rs @ [i]\"], unfold n, auto)"], ["proof (state)\nthis:\n  \\<exists>rs.\n     qs = rs @ ps \\<and>\n     n = m * prod_list rs \\<and>\n     \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n\ngoal (1 subgoal):\n 1. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "case False"], ["proof (state)\nthis:\n  mo \\<noteq> 0\n\ngoal (1 subgoal):\n 1. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "with mo"], ["proof (chain)\npicking this:\n  mo = n mod i\n  mo \\<noteq> 0", "have i_n: \"\\<not> i dvd n\""], ["proof (prove)\nusing this:\n  mo = n mod i\n  mo \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n", "by auto"], ["proof (state)\nthis:\n  \\<not> i dvd n\n\ngoal (1 subgoal):\n 1. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "from False res"], ["proof (chain)\npicking this:\n  mo \\<noteq> 0\n  (if mo = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) = (m, qs)", "have id: \"m = n\" \"qs = ps\""], ["proof (prove)\nusing this:\n  mo \\<noteq> 0\n  (if mo = 0 then remove_prime_factor i n' (i # ps) else (n, ps)) = (m, qs)\n\ngoal (1 subgoal):\n 1. m = n &&& qs = ps", "by auto"], ["proof (state)\nthis:\n  m = n\n  qs = ps\n\ngoal (1 subgoal):\n 1. mo \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       qs = rs @ ps \\<and>\n       n = m * prod_list rs \\<and>\n       \\<not> i dvd m \\<and> set rs \\<subseteq> {i}", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       ps = rs @ ps \\<and>\n       n = n * prod_list rs \\<and>\n       \\<not> i dvd n \\<and> set rs \\<subseteq> {i}", "using i_n"], ["proof (prove)\nusing this:\n  \\<not> i dvd n\n\ngoal (1 subgoal):\n 1. \\<exists>rs.\n       ps = rs @ ps \\<and>\n       n = n * prod_list rs \\<and>\n       \\<not> i dvd n \\<and> set rs \\<subseteq> {i}", "by auto"], ["proof (state)\nthis:\n  \\<exists>rs.\n     qs = rs @ ps \\<and>\n     n = m * prod_list rs \\<and>\n     \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>rs.\n     qs = rs @ ps \\<and>\n     n = m * prod_list rs \\<and>\n     \\<not> i dvd m \\<and> set rs \\<subseteq> {i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_sqrtI: assumes n: \"n \\<ge> 2\" \n  and small: \"\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> j dvd n\"\n  and i: \"\\<not> i * i \\<le> n\"\n  shows \"prime (n::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime n", "unfolding prime_nat_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n \\<and> (\\<forall>m. m dvd n \\<longrightarrow> m = 1 \\<or> m = n)", "proof (intro conjI impI allI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < n\n 2. \\<And>m. m dvd n \\<Longrightarrow> m = 1 \\<or> m = n", "show \"1 < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n", "using n"], ["proof (prove)\nusing this:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. 1 < n", "by auto"], ["proof (state)\nthis:\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd n \\<Longrightarrow> m = 1 \\<or> m = n", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m dvd n \\<Longrightarrow> m = 1 \\<or> m = n", "assume jn: \"j dvd n\""], ["proof (state)\nthis:\n  j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd n \\<Longrightarrow> m = 1 \\<or> m = n", "from jn"], ["proof (chain)\npicking this:\n  j dvd n", "obtain k where njk: \"n = j * k\""], ["proof (prove)\nusing this:\n  j dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>k. n = j * k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. n = j * k\n\ngoal (1 subgoal):\n 1. (\\<And>k. n = j * k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  n = j * k\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd n \\<Longrightarrow> m = 1 \\<or> m = n", "with \\<open>1 < n\\<close>"], ["proof (chain)\npicking this:\n  1 < n\n  n = j * k", "have jn: \"j \\<le> n\""], ["proof (prove)\nusing this:\n  1 < n\n  n = j * k\n\ngoal (1 subgoal):\n 1. j \\<le> n", "by (metis dvd_imp_le jn neq0_conv not_less0)"], ["proof (state)\nthis:\n  j \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd n \\<Longrightarrow> m = 1 \\<or> m = n", "show \"j = 1 \\<or> j = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j = 1 \\<or> j = n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (j = 1 \\<or> j = n) \\<Longrightarrow> False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> (j = 1 \\<or> j = n)\n\ngoal (1 subgoal):\n 1. \\<not> (j = 1 \\<or> j = n) \\<Longrightarrow> False", "with njk n"], ["proof (chain)\npicking this:\n  n = j * k\n  2 \\<le> n\n  \\<not> (j = 1 \\<or> j = n)", "have j1: \"j > 1 \\<and> j \\<noteq> n\""], ["proof (prove)\nusing this:\n  n = j * k\n  2 \\<le> n\n  \\<not> (j = 1 \\<or> j = n)\n\ngoal (1 subgoal):\n 1. 1 < j \\<and> j \\<noteq> n", "by simp"], ["proof (state)\nthis:\n  1 < j \\<and> j \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<not> (j = 1 \\<or> j = n) \\<Longrightarrow> False", "have \"\\<exists> j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "proof (cases \"j \\<le> k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j \\<le> k \\<Longrightarrow>\n    \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k\n 2. \\<not> j \\<le> k \\<Longrightarrow>\n    \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "case True"], ["proof (state)\nthis:\n  j \\<le> k\n\ngoal (2 subgoals):\n 1. j \\<le> k \\<Longrightarrow>\n    \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k\n 2. \\<not> j \\<le> k \\<Longrightarrow>\n    \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "thus ?thesis"], ["proof (prove)\nusing this:\n  j \\<le> k\n\ngoal (1 subgoal):\n 1. \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "unfolding njk"], ["proof (prove)\nusing this:\n  j \\<le> k\n\ngoal (1 subgoal):\n 1. \\<exists>ja ka. 1 < ja \\<and> ja \\<le> ka \\<and> j * k = ja * ka", "using j1"], ["proof (prove)\nusing this:\n  j \\<le> k\n  1 < j \\<and> j \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<exists>ja ka. 1 < ja \\<and> ja \\<le> ka \\<and> j * k = ja * ka", "by blast"], ["proof (state)\nthis:\n  \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k\n\ngoal (1 subgoal):\n 1. \\<not> j \\<le> k \\<Longrightarrow>\n    \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j \\<le> k \\<Longrightarrow>\n    \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "case False"], ["proof (state)\nthis:\n  \\<not> j \\<le> k\n\ngoal (1 subgoal):\n 1. \\<not> j \\<le> k \\<Longrightarrow>\n    \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "by (rule exI[of _ k], rule exI[of _ j], insert \\<open>1 < n\\<close> j1 njk False, auto)\n        (metis Suc_lessI mult_0_right neq0_conv)"], ["proof (state)\nthis:\n  \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k\n\ngoal (1 subgoal):\n 1. \\<not> (j = 1 \\<or> j = n) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k", "obtain j k where j1: \"1 < j\" and jk: \"j \\<le> k\" and njk: \"n = j * k\""], ["proof (prove)\nusing this:\n  \\<exists>j k. 1 < j \\<and> j \\<le> k \\<and> n = j * k\n\ngoal (1 subgoal):\n 1. (\\<And>j k.\n        \\<lbrakk>1 < j; j \\<le> k; n = j * k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  1 < j\n  j \\<le> k\n  n = j * k\n\ngoal (1 subgoal):\n 1. \\<not> (j__ = 1 \\<or> j__ = n) \\<Longrightarrow> False", "with small[of j]"], ["proof (chain)\npicking this:\n  \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n\n  1 < j\n  j \\<le> k\n  n = j * k", "have ji: \"j \\<ge> i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n\n  1 < j\n  j \\<le> k\n  n = j * k\n\ngoal (1 subgoal):\n 1. i \\<le> j", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n  \\<Longrightarrow> \\<nexists>k. n = j * k\n  1 < j\n  j \\<le> k\n  n = j * k\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by force"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<not> (j__ = 1 \\<or> j__ = n) \\<Longrightarrow> False", "from mult_mono[OF ji ji]"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 \\<le> j; 0 \\<le> i\\<rbrakk> \\<Longrightarrow> i * i \\<le> j * j", "have \"i * i \\<le> j * j\""], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> j; 0 \\<le> i\\<rbrakk> \\<Longrightarrow> i * i \\<le> j * j\n\ngoal (1 subgoal):\n 1. i * i \\<le> j * j", "by auto"], ["proof (state)\nthis:\n  i * i \\<le> j * j\n\ngoal (1 subgoal):\n 1. \\<not> (j__ = 1 \\<or> j__ = n) \\<Longrightarrow> False", "with i"], ["proof (chain)\npicking this:\n  \\<not> i * i \\<le> n\n  i * i \\<le> j * j", "have \"j * j > n\""], ["proof (prove)\nusing this:\n  \\<not> i * i \\<le> n\n  i * i \\<le> j * j\n\ngoal (1 subgoal):\n 1. n < j * j", "by auto"], ["proof (state)\nthis:\n  n < j * j\n\ngoal (1 subgoal):\n 1. \\<not> (j__ = 1 \\<or> j__ = n) \\<Longrightarrow> False", "from this[unfolded njk]"], ["proof (chain)\npicking this:\n  j * k < j * j", "have \"k < j\""], ["proof (prove)\nusing this:\n  j * k < j * j\n\ngoal (1 subgoal):\n 1. k < j", "by auto"], ["proof (state)\nthis:\n  k < j\n\ngoal (1 subgoal):\n 1. \\<not> (j__ = 1 \\<or> j__ = n) \\<Longrightarrow> False", "with jk"], ["proof (chain)\npicking this:\n  j \\<le> k\n  k < j", "show False"], ["proof (prove)\nusing this:\n  j \\<le> k\n  k < j\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  j = 1 \\<or> j = n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma candidate_invariant_0: \"candidate_invariant 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. candidate_invariant 0", "unfolding candidate_invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = 0 \\<or> 0 mod 30 = 11", "by auto"], ["", "lemma next_candidates: assumes res: \"next_candidates n = (m,ps)\"\n  and n: \"candidate_invariant n\"\n  shows \"candidate_invariant m\" \"sorted ps\" \"{i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\" \n    \"set ps \\<subseteq> {2..} \\<inter> {n..<m}\" \"distinct ps\" \"ps \\<noteq> []\" \"n < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (candidate_invariant m &&&\n     sorted ps &&&\n     {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps) &&&\n    (set ps \\<subseteq> {2..} \\<inter> {n..<m} &&& distinct ps) &&&\n    ps \\<noteq> [] &&& n < m", "unfolding candidate_invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (m = 0 \\<or> m mod 30 = 11 &&&\n     sorted ps &&&\n     {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps) &&&\n    (set ps \\<subseteq> {2..} \\<inter> {n..<m} &&& distinct ps) &&&\n    ps \\<noteq> [] &&& n < m", "proof -"], ["proof (state)\ngoal (7 subgoals):\n 1. m = 0 \\<or> m mod 30 = 11\n 2. sorted ps\n 3. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 4. set ps \\<subseteq> {2..} \\<inter> {n..<m}\n 5. distinct ps\n 6. ps \\<noteq> []\n 7. n < m", "note res = res[unfolded next_candidates_def]"], ["proof (state)\nthis:\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n\ngoal (7 subgoals):\n 1. m = 0 \\<or> m mod 30 = 11\n 2. sorted ps\n 3. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 4. set ps \\<subseteq> {2..} \\<inter> {n..<m}\n 5. distinct ps\n 6. ps \\<noteq> []\n 7. n < m", "note n = n[unfolded candidate_invariant_def]"], ["proof (state)\nthis:\n  n = 0 \\<or> n mod 30 = 11\n\ngoal (7 subgoals):\n 1. m = 0 \\<or> m mod 30 = 11\n 2. sorted ps\n 3. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 4. set ps \\<subseteq> {2..} \\<inter> {n..<m}\n 5. distinct ps\n 6. ps \\<noteq> []\n 7. n < m", "show \"m = 0 \\<or> m mod 30 = 11\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = 0 \\<or> m mod 30 = 11", "using res n"], ["proof (prove)\nusing this:\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n  n = 0 \\<or> n mod 30 = 11\n\ngoal (1 subgoal):\n 1. m = 0 \\<or> m mod 30 = 11", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  m = 0 \\<or> m mod 30 = 11\n\ngoal (6 subgoals):\n 1. sorted ps\n 2. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 3. set ps \\<subseteq> {2..} \\<inter> {n..<m}\n 4. distinct ps\n 5. ps \\<noteq> []\n 6. n < m", "show \"sorted ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted ps", "using res n"], ["proof (prove)\nusing this:\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n  n = 0 \\<or> n mod 30 = 11\n\ngoal (1 subgoal):\n 1. sorted ps", "by (auto split: if_splits simp: primes_1000_def sorted2_simps simp del: sorted.simps(2))"], ["proof (state)\nthis:\n  sorted ps\n\ngoal (5 subgoals):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 2. set ps \\<subseteq> {2..} \\<inter> {n..<m}\n 3. distinct ps\n 4. ps \\<noteq> []\n 5. n < m", "show \"set ps \\<subseteq> {2..} \\<inter> {n..<m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps \\<subseteq> {2..} \\<inter> {n..<m}", "using res n"], ["proof (prove)\nusing this:\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n  n = 0 \\<or> n mod 30 = 11\n\ngoal (1 subgoal):\n 1. set ps \\<subseteq> {2..} \\<inter> {n..<m}", "by (auto split: if_splits simp: primes_1000_def)"], ["proof (state)\nthis:\n  set ps \\<subseteq> {2..} \\<inter> {n..<m}\n\ngoal (4 subgoals):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 2. distinct ps\n 3. ps \\<noteq> []\n 4. n < m", "show \"distinct ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ps", "using res n"], ["proof (prove)\nusing this:\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n  n = 0 \\<or> n mod 30 = 11\n\ngoal (1 subgoal):\n 1. distinct ps", "by (auto split: if_splits simp: primes_1000_def)"], ["proof (state)\nthis:\n  distinct ps\n\ngoal (3 subgoals):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 2. ps \\<noteq> []\n 3. n < m", "show \"ps \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps \\<noteq> []", "using res n"], ["proof (prove)\nusing this:\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n  n = 0 \\<or> n mod 30 = 11\n\ngoal (1 subgoal):\n 1. ps \\<noteq> []", "by (auto split: if_splits simp: primes_1000_def)"], ["proof (state)\nthis:\n  ps \\<noteq> []\n\ngoal (2 subgoals):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 2. n < m", "show \"n < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < m", "using res"], ["proof (prove)\nusing this:\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n\ngoal (1 subgoal):\n 1. n < m", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "show \"{i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "hence *: \"m = 1001\" \"ps = primes_1000\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. m = 1001 &&& ps = primes_1000", "using res"], ["proof (prove)\nusing this:\n  n = 0\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n\ngoal (1 subgoal):\n 1. m = 1001 &&& ps = primes_1000", "by auto"], ["proof (state)\nthis:\n  m = 1001\n  ps = primes_1000\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "unfolding * True primes_1000"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. prime i \\<and> 0 \\<le> i \\<and> i < 1001}\n    \\<subseteq> set (filter prime [0..<1001])", "by auto"], ["proof (state)\nthis:\n  {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "hence n: \"n mod 30 = 11\" and m: \"m = n + 30\" and ps: \"ps = [n,n+2,n+6,n+8,n+12,n+18,n+20,n+26]\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n mod 30 = 11 &&&\n    m = n + 30 &&&\n    ps = [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26]", "using res n"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  (if n = 0 then (1001, primes_1000)\n   else (n + 30,\n         [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26])) =\n  (m, ps)\n  n = 0 \\<or> n mod 30 = 11\n\ngoal (1 subgoal):\n 1. n mod 30 = 11 &&&\n    m = n + 30 &&&\n    ps = [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26]", "by auto"], ["proof (state)\nthis:\n  n mod 30 = 11\n  m = n + 30\n  ps = [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26]\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "{"], ["proof (state)\nthis:\n  n mod 30 = 11\n  m = n + 30\n  ps = [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26]\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "assume *: \"prime i\" \"n \\<le> i\" \"i < n + 30\" \"i \\<notin> set ps\""], ["proof (state)\nthis:\n  prime i\n  n \\<le> i\n  i < n + 30\n  i \\<notin> set ps\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "from n *"], ["proof (chain)\npicking this:\n  n mod 30 = 11\n  prime i\n  n \\<le> i\n  i < n + 30\n  i \\<notin> set ps", "have i11: \"i \\<ge> 11\""], ["proof (prove)\nusing this:\n  n mod 30 = 11\n  prime i\n  n \\<le> i\n  i < n + 30\n  i \\<notin> set ps\n\ngoal (1 subgoal):\n 1. 11 \\<le> i", "by auto"], ["proof (state)\nthis:\n  11 \\<le> i\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "define j where \"j = i - n\""], ["proof (state)\nthis:\n  j = i - n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have i: \"i = n + j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = n + j", "using \\<open>n \\<le> i\\<close> j_def"], ["proof (prove)\nusing this:\n  n \\<le> i\n  j = i - n\n\ngoal (1 subgoal):\n 1. i = n + j", "by auto"], ["proof (state)\nthis:\n  i = n + j\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have \"i mod 30 = (j + n) mod 30\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i mod 30 = (j + n) mod 30", "using \\<open>n \\<le> i\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> i\n\ngoal (1 subgoal):\n 1. i mod 30 = (j + n) mod 30", "unfolding j_def"], ["proof (prove)\nusing this:\n  n \\<le> i\n\ngoal (1 subgoal):\n 1. i mod 30 = (i - n + n) mod 30", "by simp"], ["proof (state)\nthis:\n  i mod 30 = (j + n) mod 30\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "also"], ["proof (state)\nthis:\n  i mod 30 = (j + n) mod 30\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have \"\\<dots> = (j mod 30 + n mod 30) mod 30\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j + n) mod 30 = (j mod 30 + n mod 30) mod 30", "by (simp add: mod_simps)"], ["proof (state)\nthis:\n  (j + n) mod 30 = (j mod 30 + n mod 30) mod 30\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "also"], ["proof (state)\nthis:\n  (j + n) mod 30 = (j mod 30 + n mod 30) mod 30\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have \"\\<dots> = (j mod 30 + 11) mod 30\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j mod 30 + n mod 30) mod 30 = (j mod 30 + 11) mod 30", "unfolding n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (j mod 30 + 11) mod 30 = (j mod 30 + 11) mod 30", "by simp"], ["proof (state)\nthis:\n  (j mod 30 + n mod 30) mod 30 = (j mod 30 + 11) mod 30\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "finally"], ["proof (chain)\npicking this:\n  i mod 30 = (j mod 30 + 11) mod 30", "have i30: \"i mod 30 = (j mod 30 + 11) mod 30\""], ["proof (prove)\nusing this:\n  i mod 30 = (j mod 30 + 11) mod 30\n\ngoal (1 subgoal):\n 1. i mod 30 = (j mod 30 + 11) mod 30", "by simp"], ["proof (state)\nthis:\n  i mod 30 = (j mod 30 + 11) mod 30\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have 2: \"2 dvd (30 :: nat)\" and 112: \"11 mod (2 :: nat) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even 30 &&& 11 mod 2 = 1", "by simp_all"], ["proof (state)\nthis:\n  even 30\n  11 mod 2 = 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have \"(j + 11) mod 2 = (j + 1) mod 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j + 11) mod 2 = (j + 1) mod 2", "by (rule mod_add_cong) simp_all"], ["proof (state)\nthis:\n  (j + 11) mod 2 = (j + 1) mod 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with arg_cong [OF i30, of \"\\<lambda>j. j mod 2\"]"], ["proof (chain)\npicking this:\n  i mod 30 mod 2 = (j mod 30 + 11) mod 30 mod 2\n  (j + 11) mod 2 = (j + 1) mod 2", "have 2: \"i mod 2 = (j mod 2 + 1) mod 2\""], ["proof (prove)\nusing this:\n  i mod 30 mod 2 = (j mod 30 + 11) mod 30 mod 2\n  (j + 11) mod 2 = (j + 1) mod 2\n\ngoal (1 subgoal):\n 1. i mod 2 = (j mod 2 + 1) mod 2", "by (simp add: mod_simps mod_mod_cancel [OF 2])"], ["proof (state)\nthis:\n  i mod 2 = (j mod 2 + 1) mod 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have 3: \"3 dvd (30 :: nat)\" and 113: \"11 mod (3 :: nat) = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 3 dvd 30 &&& 11 mod 3 = 2", "by simp_all"], ["proof (state)\nthis:\n  3 dvd 30\n  11 mod 3 = 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have \"(j + 11) mod 3 = (j + 2) mod 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j + 11) mod 3 = (j + 2) mod 3", "by (rule mod_add_cong) simp_all"], ["proof (state)\nthis:\n  (j + 11) mod 3 = (j + 2) mod 3\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with arg_cong [OF i30, of \"\\<lambda> j. j mod 3\"]"], ["proof (chain)\npicking this:\n  i mod 30 mod 3 = (j mod 30 + 11) mod 30 mod 3\n  (j + 11) mod 3 = (j + 2) mod 3", "have 3: \"i mod 3 = (j mod 3 + 2) mod 3\""], ["proof (prove)\nusing this:\n  i mod 30 mod 3 = (j mod 30 + 11) mod 30 mod 3\n  (j + 11) mod 3 = (j + 2) mod 3\n\ngoal (1 subgoal):\n 1. i mod 3 = (j mod 3 + 2) mod 3", "by (simp add: mod_simps mod_mod_cancel [OF 3])"], ["proof (state)\nthis:\n  i mod 3 = (j mod 3 + 2) mod 3\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have 5: \"5 dvd (30 :: nat)\" and 115: \"11 mod (5 :: nat) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 dvd 30 &&& 11 mod 5 = 1", "by simp_all"], ["proof (state)\nthis:\n  5 dvd 30\n  11 mod 5 = 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "have \"(j + 11) mod 5 = (j + 1) mod 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j + 11) mod 5 = (j + 1) mod 5", "by (rule mod_add_cong) simp_all"], ["proof (state)\nthis:\n  (j + 11) mod 5 = (j + 1) mod 5\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with arg_cong [OF i30, of \"\\<lambda> j. j mod 5\"]"], ["proof (chain)\npicking this:\n  i mod 30 mod 5 = (j mod 30 + 11) mod 30 mod 5\n  (j + 11) mod 5 = (j + 1) mod 5", "have 5: \"i mod 5 = (j mod 5 + 1) mod 5\""], ["proof (prove)\nusing this:\n  i mod 30 mod 5 = (j mod 30 + 11) mod 30 mod 5\n  (j + 11) mod 5 = (j + 1) mod 5\n\ngoal (1 subgoal):\n 1. i mod 5 = (j mod 5 + 1) mod 5", "by (simp add: mod_simps mod_mod_cancel [OF 5])"], ["proof (state)\nthis:\n  i mod 5 = (j mod 5 + 1) mod 5\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "from n *(2-)[unfolded ps i, simplified]"], ["proof (chain)\npicking this:\n  n mod 30 = 11\n  True\n  j < 30\n  0 < j \\<and>\n  j \\<noteq> 2 \\<and>\n  j \\<noteq> 6 \\<and>\n  j \\<noteq> 8 \\<and>\n  j \\<noteq> 12 \\<and>\n  j \\<noteq> 18 \\<and> j \\<noteq> 20 \\<and> j \\<noteq> 26", "have \n        \"j \\<in> {1,3,5,7,9,11,13,15,17,19,21,23,25,27,29} \\<or> j \\<in> {4,10,16,22,28} \\<or> j \\<in> {14,24}\"\n        (is \"j \\<in> ?j2 \\<or> j \\<in> ?j3 \\<or> j \\<in> ?j5\")"], ["proof (prove)\nusing this:\n  n mod 30 = 11\n  True\n  j < 30\n  0 < j \\<and>\n  j \\<noteq> 2 \\<and>\n  j \\<noteq> 6 \\<and>\n  j \\<noteq> 8 \\<and>\n  j \\<noteq> 12 \\<and>\n  j \\<noteq> 18 \\<and> j \\<noteq> 20 \\<and> j \\<noteq> 26\n\ngoal (1 subgoal):\n 1. j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29} \\<or>\n    j \\<in> {4, 10, 16, 22, 28} \\<or> j \\<in> {14, 24}", "by simp presburger"], ["proof (state)\nthis:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29} \\<or>\n  j \\<in> {4, 10, 16, 22, 28} \\<or> j \\<in> {14, 24}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "moreover"], ["proof (state)\nthis:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29} \\<or>\n  j \\<in> {4, 10, 16, 22, 28} \\<or> j \\<in> {14, 24}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "{"], ["proof (state)\nthis:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29} \\<or>\n  j \\<in> {4, 10, 16, 22, 28} \\<or> j \\<in> {14, 24}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "assume \"j \\<in> ?j2\""], ["proof (state)\nthis:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "hence \"j mod 2 = 1\""], ["proof (prove)\nusing this:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29}\n\ngoal (1 subgoal):\n 1. j mod 2 = 1", "by auto"], ["proof (state)\nthis:\n  j mod 2 = 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with 2"], ["proof (chain)\npicking this:\n  i mod 2 = (j mod 2 + 1) mod 2\n  j mod 2 = 1", "have \"i mod 2 = 0\""], ["proof (prove)\nusing this:\n  i mod 2 = (j mod 2 + 1) mod 2\n  j mod 2 = 1\n\ngoal (1 subgoal):\n 1. i mod 2 = 0", "by auto"], ["proof (state)\nthis:\n  i mod 2 = 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with i11"], ["proof (chain)\npicking this:\n  11 \\<le> i\n  i mod 2 = 0", "have \"2 dvd i\" \"i \\<noteq> 2\""], ["proof (prove)\nusing this:\n  11 \\<le> i\n  i mod 2 = 0\n\ngoal (1 subgoal):\n 1. even i &&& i \\<noteq> 2", "by auto"], ["proof (state)\nthis:\n  even i\n  i \\<noteq> 2\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with *(1)"], ["proof (chain)\npicking this:\n  prime i\n  even i\n  i \\<noteq> 2", "have False"], ["proof (prove)\nusing this:\n  prime i\n  even i\n  i \\<noteq> 2\n\ngoal (1 subgoal):\n 1. False", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  1 < i \\<and> (\\<forall>m. m dvd i \\<longrightarrow> m = 1 \\<or> m = i)\n  even i\n  i \\<noteq> 2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "}"], ["proof (state)\nthis:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27,\n           29} \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "moreover"], ["proof (state)\nthis:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27,\n           29} \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "{"], ["proof (state)\nthis:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27,\n           29} \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "assume \"j \\<in> ?j3\""], ["proof (state)\nthis:\n  j \\<in> {4, 10, 16, 22, 28}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "hence \"j mod 3 = 1\""], ["proof (prove)\nusing this:\n  j \\<in> {4, 10, 16, 22, 28}\n\ngoal (1 subgoal):\n 1. j mod 3 = 1", "by auto"], ["proof (state)\nthis:\n  j mod 3 = 1\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with 3"], ["proof (chain)\npicking this:\n  i mod 3 = (j mod 3 + 2) mod 3\n  j mod 3 = 1", "have \"i mod 3 = 0\""], ["proof (prove)\nusing this:\n  i mod 3 = (j mod 3 + 2) mod 3\n  j mod 3 = 1\n\ngoal (1 subgoal):\n 1. i mod 3 = 0", "by auto"], ["proof (state)\nthis:\n  i mod 3 = 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with i11"], ["proof (chain)\npicking this:\n  11 \\<le> i\n  i mod 3 = 0", "have \"3 dvd i\" \"i \\<noteq> 3\""], ["proof (prove)\nusing this:\n  11 \\<le> i\n  i mod 3 = 0\n\ngoal (1 subgoal):\n 1. 3 dvd i &&& i \\<noteq> 3", "by auto"], ["proof (state)\nthis:\n  3 dvd i\n  i \\<noteq> 3\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with *(1)"], ["proof (chain)\npicking this:\n  prime i\n  3 dvd i\n  i \\<noteq> 3", "have False"], ["proof (prove)\nusing this:\n  prime i\n  3 dvd i\n  i \\<noteq> 3\n\ngoal (1 subgoal):\n 1. False", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  1 < i \\<and> (\\<forall>m. m dvd i \\<longrightarrow> m = 1 \\<or> m = i)\n  3 dvd i\n  i \\<noteq> 3\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "}"], ["proof (state)\nthis:\n  j \\<in> {4, 10, 16, 22, 28} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "moreover"], ["proof (state)\nthis:\n  j \\<in> {4, 10, 16, 22, 28} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "{"], ["proof (state)\nthis:\n  j \\<in> {4, 10, 16, 22, 28} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "assume \"j \\<in> ?j5\""], ["proof (state)\nthis:\n  j \\<in> {14, 24}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "hence \"j mod 5 = 4\""], ["proof (prove)\nusing this:\n  j \\<in> {14, 24}\n\ngoal (1 subgoal):\n 1. j mod 5 = 4", "by auto"], ["proof (state)\nthis:\n  j mod 5 = 4\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with 5"], ["proof (chain)\npicking this:\n  i mod 5 = (j mod 5 + 1) mod 5\n  j mod 5 = 4", "have \"i mod 5 = 0\""], ["proof (prove)\nusing this:\n  i mod 5 = (j mod 5 + 1) mod 5\n  j mod 5 = 4\n\ngoal (1 subgoal):\n 1. i mod 5 = 0", "by auto"], ["proof (state)\nthis:\n  i mod 5 = 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with i11"], ["proof (chain)\npicking this:\n  11 \\<le> i\n  i mod 5 = 0", "have \"5 dvd i\" \"i \\<noteq> 5\""], ["proof (prove)\nusing this:\n  11 \\<le> i\n  i mod 5 = 0\n\ngoal (1 subgoal):\n 1. 5 dvd i &&& i \\<noteq> 5", "by auto"], ["proof (state)\nthis:\n  5 dvd i\n  i \\<noteq> 5\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "with *(1)"], ["proof (chain)\npicking this:\n  prime i\n  5 dvd i\n  i \\<noteq> 5", "have False"], ["proof (prove)\nusing this:\n  prime i\n  5 dvd i\n  i \\<noteq> 5\n\ngoal (1 subgoal):\n 1. False", "unfolding prime_nat_iff"], ["proof (prove)\nusing this:\n  1 < i \\<and> (\\<forall>m. m dvd i \\<longrightarrow> m = 1 \\<or> m = i)\n  5 dvd i\n  i \\<noteq> 5\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "}"], ["proof (state)\nthis:\n  j \\<in> {14, 24} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "ultimately"], ["proof (chain)\npicking this:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29} \\<or>\n  j \\<in> {4, 10, 16, 22, 28} \\<or> j \\<in> {14, 24}\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27,\n           29} \\<Longrightarrow>\n  False\n  j \\<in> {4, 10, 16, 22, 28} \\<Longrightarrow> False\n  j \\<in> {14, 24} \\<Longrightarrow> False", "have False"], ["proof (prove)\nusing this:\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29} \\<or>\n  j \\<in> {4, 10, 16, 22, 28} \\<or> j \\<in> {14, 24}\n  j \\<in> {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27,\n           29} \\<Longrightarrow>\n  False\n  j \\<in> {4, 10, 16, 22, 28} \\<Longrightarrow> False\n  j \\<in> {14, 24} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "}"], ["proof (state)\nthis:\n  \\<lbrakk>prime ?i2; n \\<le> ?i2; ?i2 < n + 30;\n   ?i2 \\<notin> set ps\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?i2; n \\<le> ?i2; ?i2 < n + 30;\n   ?i2 \\<notin> set ps\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps", "unfolding m ps"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?i2; n \\<le> ?i2; ?i2 < n + 30;\n   ?i2\n   \\<notin> set [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20,\n                 n + 26]\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. {i. prime i \\<and> n \\<le> i \\<and> i < n + 30}\n    \\<subseteq> set [n, n + 2, n + 6, n + 8, n + 12, n + 18, n + 20, n + 26]", "by auto"], ["proof (state)\nthis:\n  {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {i. prime i \\<and> n \\<le> i \\<and> i < m} \\<subseteq> set ps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_test_iterate2: assumes small: \"\\<And> j. 2 \\<le> j \\<Longrightarrow> j < (i :: nat) \\<Longrightarrow> \\<not> j dvd n\"\n  and odd: \"odd n\"\n  and n: \"n \\<ge> 3\"\n  and i: \"i \\<ge> 3\" \"odd i\"\n  and mod: \"\\<not> i dvd n\"\n  and j: \"2 \\<le> j\" \"j < i + 2\"\n  shows \"\\<not> j dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "assume dvd: \"j dvd n\""], ["proof (state)\nthis:\n  j dvd n\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with small[OF j(1)]"], ["proof (chain)\npicking this:\n  j < i \\<Longrightarrow> \\<not> j dvd n\n  j dvd n", "have \"j \\<ge> i\""], ["proof (prove)\nusing this:\n  j < i \\<Longrightarrow> \\<not> j dvd n\n  j dvd n\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by linarith"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with dvd mod"], ["proof (chain)\npicking this:\n  j dvd n\n  \\<not> i dvd n\n  i \\<le> j", "have \"j > i\""], ["proof (prove)\nusing this:\n  j dvd n\n  \\<not> i dvd n\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. i < j", "by (cases \"i = j\", auto)"], ["proof (state)\nthis:\n  i < j\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with j"], ["proof (chain)\npicking this:\n  2 \\<le> j\n  j < i + 2\n  i < j", "have \"j = Suc i\""], ["proof (prove)\nusing this:\n  2 \\<le> j\n  j < i + 2\n  i < j\n\ngoal (1 subgoal):\n 1. j = Suc i", "by simp"], ["proof (state)\nthis:\n  j = Suc i\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with i"], ["proof (chain)\npicking this:\n  3 \\<le> i\n  odd i\n  j = Suc i", "have \"even j\""], ["proof (prove)\nusing this:\n  3 \\<le> i\n  odd i\n  j = Suc i\n\ngoal (1 subgoal):\n 1. even j", "by auto"], ["proof (state)\nthis:\n  even j\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with dvd j(1)"], ["proof (chain)\npicking this:\n  j dvd n\n  2 \\<le> j\n  even j", "have \"2 dvd n\""], ["proof (prove)\nusing this:\n  j dvd n\n  2 \\<le> j\n  even j\n\ngoal (1 subgoal):\n 1. even n", "by (metis dvd_trans)"], ["proof (state)\nthis:\n  even n\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with odd"], ["proof (chain)\npicking this:\n  odd n\n  even n", "show False"], ["proof (prove)\nusing this:\n  odd n\n  even n\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_divisor: assumes \"j \\<ge> 2\" and \"j dvd n\" shows\n  \"\\<exists> p :: nat. prime p \\<and> p dvd j \\<and> p dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "let ?pf = \"prime_factors j\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "from assms"], ["proof (chain)\npicking this:\n  2 \\<le> j\n  j dvd n", "have \"j > 0\""], ["proof (prove)\nusing this:\n  2 \\<le> j\n  j dvd n\n\ngoal (1 subgoal):\n 1. 0 < j", "by auto"], ["proof (state)\nthis:\n  0 < j\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "from prime_factorization_nat[OF this]"], ["proof (chain)\npicking this:\n  j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)", "have \"j = (\\<Prod>p\\<in>?pf. p ^ multiplicity p j)\""], ["proof (prove)\nusing this:\n  j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)\n\ngoal (1 subgoal):\n 1. j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)", "by auto"], ["proof (state)\nthis:\n  j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "with \\<open>j \\<ge> 2\\<close>"], ["proof (chain)\npicking this:\n  2 \\<le> j\n  j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)", "have \"?pf \\<noteq> {}\""], ["proof (prove)\nusing this:\n  2 \\<le> j\n  j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)\n\ngoal (1 subgoal):\n 1. prime_factors j \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  prime_factors j \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "then"], ["proof (chain)\npicking this:\n  prime_factors j \\<noteq> {}", "obtain p where p: \"p \\<in> ?pf\""], ["proof (prove)\nusing this:\n  prime_factors j \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in># prime_factorization j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p \\<in># prime_factorization j\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "hence pr: \"prime p\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization j\n\ngoal (1 subgoal):\n 1. prime p", "by auto"], ["proof (state)\nthis:\n  prime p\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "define rem where \"rem = (\\<Prod>p\\<in>?pf - {p}. p ^ multiplicity p j)\""], ["proof (state)\nthis:\n  rem = (\\<Prod>p\\<in>prime_factors j - {p}. p ^ multiplicity p j)\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "from p"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization j", "have mult: \"multiplicity p j \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization j\n\ngoal (1 subgoal):\n 1. multiplicity p j \\<noteq> 0", "by (auto simp: prime_factors_multiplicity)"], ["proof (state)\nthis:\n  multiplicity p j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "have \"finite ?pf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prime_factors j)", "by simp"], ["proof (state)\nthis:\n  finite (prime_factors j)\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "have \"j = (\\<Prod>p\\<in>?pf. p ^ multiplicity p j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)", "by fact"], ["proof (state)\nthis:\n  j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "also"], ["proof (state)\nthis:\n  j = (\\<Prod>p\\<in>prime_factors j. p ^ multiplicity p j)\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "have \"?pf = (insert p (?pf - {p}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors j = insert p (prime_factors j - {p})", "using p"], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization j\n\ngoal (1 subgoal):\n 1. prime_factors j = insert p (prime_factors j - {p})", "by auto"], ["proof (state)\nthis:\n  prime_factors j = insert p (prime_factors j - {p})\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "also"], ["proof (state)\nthis:\n  prime_factors j = insert p (prime_factors j - {p})\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "have \"(\\<Prod>p\\<in>insert p (?pf - {p}). p ^ multiplicity p j) = \n    p ^ multiplicity p j * rem\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>insert p (prime_factors j - {p}). p ^ multiplicity p j) =\n    p ^ multiplicity p j * rem", "unfolding rem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>insert p (prime_factors j - {p}). p ^ multiplicity p j) =\n    p ^ multiplicity p j *\n    (\\<Prod>p\\<in>prime_factors j - {p}. p ^ multiplicity p j)", "by (subst prod.insert, auto)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>insert p (prime_factors j - {p}). p ^ multiplicity p j) =\n  p ^ multiplicity p j * rem\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>insert p (prime_factors j - {p}). p ^ multiplicity p j) =\n  p ^ multiplicity p j * rem\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "have \"\\<dots> = p * (p ^ (multiplicity p j - 1) * rem)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ multiplicity p j * rem = p * (p ^ (multiplicity p j - 1) * rem)", "using mult"], ["proof (prove)\nusing this:\n  multiplicity p j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p ^ multiplicity p j * rem = p * (p ^ (multiplicity p j - 1) * rem)", "by (cases \"multiplicity p j\", auto)"], ["proof (state)\nthis:\n  p ^ multiplicity p j * rem = p * (p ^ (multiplicity p j - 1) * rem)\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "finally"], ["proof (chain)\npicking this:\n  j = p * (p ^ (multiplicity p j - 1) * rem)", "have pj: \"p dvd j\""], ["proof (prove)\nusing this:\n  j = p * (p ^ (multiplicity p j - 1) * rem)\n\ngoal (1 subgoal):\n 1. p dvd j", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  j = p * (p ^ (multiplicity p j - 1) * rem)\n\ngoal (1 subgoal):\n 1. \\<exists>k. j = p * k", "by blast"], ["proof (state)\nthis:\n  p dvd j\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "with \\<open>j dvd n\\<close>"], ["proof (chain)\npicking this:\n  j dvd n\n  p dvd j", "have \"p dvd n\""], ["proof (prove)\nusing this:\n  j dvd n\n  p dvd j\n\ngoal (1 subgoal):\n 1. p dvd n", "by (metis dvd_trans)"], ["proof (state)\nthis:\n  p dvd n\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "with pj pr"], ["proof (chain)\npicking this:\n  p dvd j\n  prime p\n  p dvd n", "show ?thesis"], ["proof (prove)\nusing this:\n  p dvd j\n  prime p\n  p dvd n\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "by blast"], ["proof (state)\nthis:\n  \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_nat_main: \"ni = (n,i,is) \\<Longrightarrow> i \\<ge> 2 \\<Longrightarrow> n \\<ge> 2 \\<Longrightarrow>\n  (\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> (j dvd n)) \\<Longrightarrow>\n  (\\<And> j. i \\<le> j \\<Longrightarrow> j < jj \\<Longrightarrow> prime j \\<Longrightarrow> j \\<in> set is) \\<Longrightarrow> i \\<le> jj \\<Longrightarrow>\n  sorted is \\<Longrightarrow> distinct is \\<Longrightarrow> candidate_invariant jj \\<Longrightarrow> set is \\<subseteq> {i..<jj} \\<Longrightarrow> \n  res = prime_nat_main n jj is \\<Longrightarrow> \n  res = prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ni = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n     \\<And>j.\n        \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n;\n     \\<And>j.\n        \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n        \\<Longrightarrow> j \\<in> set is;\n     i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n     set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n    \\<Longrightarrow> res = prime n", "proof (induct ni arbitrary: n i \"is\" jj res rule: wf_induct[OF \n    wf_measures[of \"[\\<lambda> (n,i,is). n - i, \\<lambda> (n,i,is). if is = [] then 1 else 0]\"]])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "case (1 ni n i \"is\" jj res)"], ["proof (state)\nthis:\n  \\<forall>y.\n     (y, ni)\n     \\<in> measures\n            [\\<lambda>(n, i, is). n - i,\n             \\<lambda>(n, i, is).\n                if is = [] then 1 else 0] \\<longrightarrow>\n     (\\<forall>x xa xb.\n         y = (x, xa, xb) \\<longrightarrow>\n         2 \\<le> xa \\<longrightarrow>\n         2 \\<le> x \\<longrightarrow>\n         (\\<forall>xb\\<ge>2.\n             xb < xa \\<longrightarrow> \\<not> xb dvd x) \\<longrightarrow>\n         (\\<forall>xc.\n             (\\<forall>x\\<ge>xa.\n                 x < xc \\<longrightarrow>\n                 prime x \\<longrightarrow> x \\<in> set xb) \\<longrightarrow>\n             xa \\<le> xc \\<longrightarrow>\n             sorted xb \\<longrightarrow>\n             distinct xb \\<longrightarrow>\n             candidate_invariant xc \\<longrightarrow>\n             set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n             (\\<forall>xa.\n                 xa = prime_nat_main x xc xb \\<longrightarrow>\n                 xa = prime x)))\n  ni = (n, i, is)\n  2 \\<le> i\n  2 \\<le> n\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n  \\<lbrakk>i \\<le> ?j; ?j < jj; prime ?j\\<rbrakk>\n  \\<Longrightarrow> ?j \\<in> set is\n  i \\<le> jj\n  sorted is\n  distinct is\n  candidate_invariant jj\n  set is \\<subseteq> {i..<jj}\n  res = prime_nat_main n jj is\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "note res = 1(12)"], ["proof (state)\nthis:\n  res = prime_nat_main n jj is\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "from 1(3-4)"], ["proof (chain)\npicking this:\n  2 \\<le> i\n  2 \\<le> n", "have i: \"i \\<ge> 2\" and i2: \"Suc i \\<ge> 2\" and n: \"n \\<ge> 2\""], ["proof (prove)\nusing this:\n  2 \\<le> i\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. 2 \\<le> i &&& 2 \\<le> Suc i &&& 2 \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 \\<le> i\n  2 \\<le> Suc i\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "from 1(5)"], ["proof (chain)\npicking this:\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n", "have dvd: \"\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> j dvd n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n", "."], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "from 1(7)"], ["proof (chain)\npicking this:\n  i \\<le> jj", "have ijj: \"i \\<le> jj\""], ["proof (prove)\nusing this:\n  i \\<le> jj\n\ngoal (1 subgoal):\n 1. i \\<le> jj", "."], ["proof (state)\nthis:\n  i \\<le> jj\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "note sort_dist = 1(8-9)"], ["proof (state)\nthis:\n  sorted is\n  distinct is\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "have \"is\": \"\\<And> j. i \\<le> j \\<Longrightarrow> j < jj \\<Longrightarrow> prime j \\<Longrightarrow> j \\<in> set is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n       \\<Longrightarrow> j \\<in> set is", "by (rule 1(6))"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> ?j; ?j < jj; prime ?j\\<rbrakk>\n  \\<Longrightarrow> ?j \\<in> set is\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "note simps = prime_nat_main.simps[of n jj \"is\"]"], ["proof (state)\nthis:\n  prime_nat_main n jj is =\n  (case is of\n   [] \\<Rightarrow>\n     case next_candidates jj of (j, is) \\<Rightarrow> prime_nat_main n j is\n   | i # is \\<Rightarrow>\n       if i dvd n then n \\<le> i\n       else if i * i \\<le> n then prime_nat_main n jj is else True)\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "note IH = 1(1)[rule_format, unfolded 1(2), OF _ refl]"], ["proof (state)\nthis:\n  \\<lbrakk>((?x, ?xa, ?xb), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   2 \\<le> ?xa; 2 \\<le> ?x;\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < ?xa\\<rbrakk>\n      \\<Longrightarrow> \\<not> x dvd ?x;\n   \\<And>x.\n      \\<lbrakk>?xa \\<le> x; x < ?xc; prime x\\<rbrakk>\n      \\<Longrightarrow> x \\<in> set ?xb;\n   ?xa \\<le> ?xc; sorted ?xb; distinct ?xb; candidate_invariant ?xc;\n   set ?xb \\<subseteq> {?xa..<?xc}; ?xd = prime_nat_main ?x ?xc ?xb\\<rbrakk>\n  \\<Longrightarrow> ?xd = prime ?x\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa.\n                               xa = prime_nat_main x xc xb \\<longrightarrow>\n                               xa = prime x)));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj}; res = prime_nat_main n jj is\\<rbrakk>\n       \\<Longrightarrow> res = prime n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. res = prime n", "proof (cases \"is\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow> res = prime n\n 2. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "case Nil"], ["proof (state)\nthis:\n  is = []\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow> res = prime n\n 2. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "obtain jjj iis where can: \"next_candidates jj = (jjj,iis)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>jjj iis.\n        next_candidates jj = (jjj, iis) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  next_candidates jj = (jjj, iis)\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow> res = prime n\n 2. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "from res[unfolded simps, unfolded Nil can split]"], ["proof (chain)\npicking this:\n  res =\n  (case [] of [] \\<Rightarrow> prime_nat_main n jjj iis\n   | i # is \\<Rightarrow>\n       if i dvd n then n \\<le> i\n       else if i * i \\<le> n then prime_nat_main n jj is else True)", "have res: \"res = prime_nat_main n jjj iis\""], ["proof (prove)\nusing this:\n  res =\n  (case [] of [] \\<Rightarrow> prime_nat_main n jjj iis\n   | i # is \\<Rightarrow>\n       if i dvd n then n \\<le> i\n       else if i * i \\<le> n then prime_nat_main n jj is else True)\n\ngoal (1 subgoal):\n 1. res = prime_nat_main n jjj iis", "by auto"], ["proof (state)\nthis:\n  res = prime_nat_main n jjj iis\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow> res = prime n\n 2. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "from next_candidates[OF can 1(10)]"], ["proof (chain)\npicking this:\n  candidate_invariant jjj\n  sorted iis\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  distinct iis\n  iis \\<noteq> []\n  jj < jjj", "have can: \n      \"sorted iis\" \"distinct iis\" \"candidate_invariant jjj\" \n      \"{i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\" \"set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\"\n      \"iis \\<noteq> []\" \"jj < jjj\""], ["proof (prove)\nusing this:\n  candidate_invariant jjj\n  sorted iis\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  distinct iis\n  iis \\<noteq> []\n  jj < jjj\n\ngoal (1 subgoal):\n 1. (sorted iis &&& distinct iis &&& candidate_invariant jjj) &&&\n    ({i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis &&&\n     set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}) &&&\n    iis \\<noteq> [] &&& jj < jjj", "by blast+"], ["proof (state)\nthis:\n  sorted iis\n  distinct iis\n  candidate_invariant jjj\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  iis \\<noteq> []\n  jj < jjj\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow> res = prime n\n 2. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "from can ijj"], ["proof (chain)\npicking this:\n  sorted iis\n  distinct iis\n  candidate_invariant jjj\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  iis \\<noteq> []\n  jj < jjj\n  i \\<le> jj", "have \"i \\<le> jjj\""], ["proof (prove)\nusing this:\n  sorted iis\n  distinct iis\n  candidate_invariant jjj\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  iis \\<noteq> []\n  jj < jjj\n  i \\<le> jj\n\ngoal (1 subgoal):\n 1. i \\<le> jjj", "by auto"], ["proof (state)\nthis:\n  i \\<le> jjj\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow> res = prime n\n 2. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "note IH = IH[OF _ i n dvd _ this can(1-3) _ res]"], ["proof (state)\nthis:\n  \\<lbrakk>((n, i, iis), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x;\n   \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i;\n   \\<And>x.\n      \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n      \\<Longrightarrow> x \\<in> set iis;\n   set iis \\<subseteq> {i..<jjj}\\<rbrakk>\n  \\<Longrightarrow> res = prime n\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow> res = prime n\n 2. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. res = prime n", "proof (rule IH, force simp: Nil can(6))"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "fix x"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "assume ix: \"i \\<le> x\" and xj: \"x < jjj\" and px: \"prime x\""], ["proof (state)\nthis:\n  i \\<le> x\n  x < jjj\n  prime x\n\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "from \"is\"[OF ix _ px] Nil"], ["proof (chain)\npicking this:\n  x < jj \\<Longrightarrow> x \\<in> set is\n  is = []", "have jx: \"jj \\<le> x\""], ["proof (prove)\nusing this:\n  x < jj \\<Longrightarrow> x \\<in> set is\n  is = []\n\ngoal (1 subgoal):\n 1. jj \\<le> x", "by force"], ["proof (state)\nthis:\n  jj \\<le> x\n\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "with can(4) xj px"], ["proof (chain)\npicking this:\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  x < jjj\n  prime x\n  jj \\<le> x", "show \"x \\<in> set iis\""], ["proof (prove)\nusing this:\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  x < jjj\n  prime x\n  jj \\<le> x\n\ngoal (1 subgoal):\n 1. x \\<in> set iis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set iis\n\ngoal (3 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. set iis \\<subseteq> {i..<jjj}", "qed (insert can(5) ijj, auto)"], ["proof (state)\nthis:\n  res = prime n\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "case (Cons i' iis)"], ["proof (state)\nthis:\n  is = i' # iis\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "with res[unfolded simps]"], ["proof (chain)\npicking this:\n  res =\n  (case is of\n   [] \\<Rightarrow>\n     case next_candidates jj of (x, xa) \\<Rightarrow> prime_nat_main n x xa\n   | i # is \\<Rightarrow>\n       if i dvd n then n \\<le> i\n       else if i * i \\<le> n then prime_nat_main n jj is else True)\n  is = i' # iis", "have res: \"res = (if i' dvd n then n \\<le> i' else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\""], ["proof (prove)\nusing this:\n  res =\n  (case is of\n   [] \\<Rightarrow>\n     case next_candidates jj of (x, xa) \\<Rightarrow> prime_nat_main n x xa\n   | i # is \\<Rightarrow>\n       if i dvd n then n \\<le> i\n       else if i * i \\<le> n then prime_nat_main n jj is else True)\n  is = i' # iis\n\ngoal (1 subgoal):\n 1. res =\n    (if i' dvd n then n \\<le> i'\n     else if i' * i' \\<le> n then prime_nat_main n jj iis else True)", "by simp"], ["proof (state)\nthis:\n  res =\n  (if i' dvd n then n \\<le> i'\n   else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "from 1(11) Cons"], ["proof (chain)\npicking this:\n  set is \\<subseteq> {i..<jj}\n  is = i' # iis", "have iis: \"set iis \\<subseteq> {i..<jj}\" and i': \"i \\<le> i'\" \"i' < jj\" \"Suc i' \\<le> jj\""], ["proof (prove)\nusing this:\n  set is \\<subseteq> {i..<jj}\n  is = i' # iis\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {i..<jj} &&&\n    i \\<le> i' &&& i' < jj &&& Suc i' \\<le> jj", "by auto"], ["proof (state)\nthis:\n  set iis \\<subseteq> {i..<jj}\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "from sort_dist"], ["proof (chain)\npicking this:\n  sorted is\n  distinct is", "have sd_iis: \"sorted iis\" \"distinct iis\" and \"i' \\<notin> set iis\""], ["proof (prove)\nusing this:\n  sorted is\n  distinct is\n\ngoal (1 subgoal):\n 1. (sorted iis &&& distinct iis) &&& i' \\<notin> set iis", "by(auto simp: Cons)"], ["proof (state)\nthis:\n  sorted iis\n  distinct iis\n  i' \\<notin> set iis\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "from sort_dist(1)"], ["proof (chain)\npicking this:\n  sorted is", "have \"set iis \\<subseteq> {i'..}\""], ["proof (prove)\nusing this:\n  sorted is\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {i'..}", "by(auto simp: Cons)"], ["proof (state)\nthis:\n  set iis \\<subseteq> {i'..}\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "with iis"], ["proof (chain)\npicking this:\n  set iis \\<subseteq> {i..<jj}\n  set iis \\<subseteq> {i'..}", "have \"set iis \\<subseteq> {i'..<jj}\""], ["proof (prove)\nusing this:\n  set iis \\<subseteq> {i..<jj}\n  set iis \\<subseteq> {i'..}\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {i'..<jj}", "by force"], ["proof (state)\nthis:\n  set iis \\<subseteq> {i'..<jj}\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "with \\<open>i' \\<notin> set iis\\<close>"], ["proof (chain)\npicking this:\n  i' \\<notin> set iis\n  set iis \\<subseteq> {i'..<jj}", "have iis: \"set iis \\<subseteq> {Suc i'..<jj}\""], ["proof (prove)\nusing this:\n  i' \\<notin> set iis\n  set iis \\<subseteq> {i'..<jj}\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {Suc i'..<jj}", "by (auto, case_tac \"x = i'\", auto)"], ["proof (state)\nthis:\n  set iis \\<subseteq> {Suc i'..<jj}\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "{"], ["proof (state)\nthis:\n  set iis \\<subseteq> {Suc i'..<jj}\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "assume j: \"2 \\<le> j\" \"j < i'\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < i'\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "have \"\\<not> j dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "assume \"j dvd n\""], ["proof (state)\nthis:\n  j dvd n\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "from prime_divisor[OF j(1) this]"], ["proof (chain)\npicking this:\n  \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "obtain p where \n          p: \"prime p\" \"p dvd j\" \"p dvd n\""], ["proof (prove)\nusing this:\n  \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>prime p; p dvd j; p dvd n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  prime p\n  p dvd j\n  p dvd n\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "have pj: \"p \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<le> j", "by (rule dvd_imp_le[OF p(2)], insert j, auto)"], ["proof (state)\nthis:\n  p \\<le> j\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "have p2: \"2 \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> p", "using p(1)"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 2 \\<le> p", "by (rule prime_ge_2_nat)"], ["proof (state)\nthis:\n  2 \\<le> p\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "from dvd[OF p2] p(3)"], ["proof (chain)\npicking this:\n  p < i \\<Longrightarrow> \\<not> p dvd n\n  p dvd n", "have pi: \"p \\<ge> i\""], ["proof (prove)\nusing this:\n  p < i \\<Longrightarrow> \\<not> p dvd n\n  p dvd n\n\ngoal (1 subgoal):\n 1. i \\<le> p", "by force"], ["proof (state)\nthis:\n  i \\<le> p\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "from pj j(2) i' \"is\"[OF pi _ p(1)]"], ["proof (chain)\npicking this:\n  p \\<le> j\n  j < i'\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  p < jj \\<Longrightarrow> p \\<in> set is", "have \"p \\<in> set is\""], ["proof (prove)\nusing this:\n  p \\<le> j\n  j < i'\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  p < jj \\<Longrightarrow> p \\<in> set is\n\ngoal (1 subgoal):\n 1. p \\<in> set is", "by auto"], ["proof (state)\nthis:\n  p \\<in> set is\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with \\<open>sorted is\\<close>"], ["proof (chain)\npicking this:\n  sorted is\n  p \\<in> set is", "have \"i' \\<le> p\""], ["proof (prove)\nusing this:\n  sorted is\n  p \\<in> set is\n\ngoal (1 subgoal):\n 1. i' \\<le> p", "by(auto simp: Cons)"], ["proof (state)\nthis:\n  i' \\<le> p\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with pj j(2)"], ["proof (chain)\npicking this:\n  p \\<le> j\n  j < i'\n  i' \\<le> p", "show False"], ["proof (prove)\nusing this:\n  p \\<le> j\n  j < i'\n  i' \\<le> p\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "note dvd = this"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "from i' i"], ["proof (chain)\npicking this:\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  2 \\<le> i", "have i'2: \"2 \\<le> Suc i'\""], ["proof (prove)\nusing this:\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  2 \\<le> i\n\ngoal (1 subgoal):\n 1. 2 \\<le> Suc i'", "by auto"], ["proof (state)\nthis:\n  2 \\<le> Suc i'\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "note IH = IH[OF _ i'2 n _ _ i'(3) sd_iis 1(10) iis]"], ["proof (state)\nthis:\n  \\<lbrakk>((n, Suc i', iis), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < Suc i'\\<rbrakk>\n      \\<Longrightarrow> \\<not> x dvd n;\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> x \\<in> set iis;\n   ?xd = prime_nat_main n jj iis\\<rbrakk>\n  \\<Longrightarrow> ?xd = prime n\n\ngoal (1 subgoal):\n 1. \\<And>a list. is = a # list \\<Longrightarrow> res = prime n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. res = prime n", "proof (cases \"i' dvd n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "case False"], ["proof (state)\nthis:\n  \\<not> i' dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "note dvdi = this"], ["proof (state)\nthis:\n  \\<not> i' dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "{"], ["proof (state)\nthis:\n  \\<not> i' dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "assume j: \"2 \\<le> j\" \"j < Suc i'\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < Suc i'\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "have \"\\<not> j dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "proof (cases \"j = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n", "case False"], ["proof (state)\nthis:\n  j \\<noteq> i'\n\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n", "with j"], ["proof (chain)\npicking this:\n  2 \\<le> j\n  j < Suc i'\n  j \\<noteq> i'", "have \"j < i'\""], ["proof (prove)\nusing this:\n  2 \\<le> j\n  j < Suc i'\n  j \\<noteq> i'\n\ngoal (1 subgoal):\n 1. j < i'", "by auto"], ["proof (state)\nthis:\n  j < i'\n\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n", "from dvd[OF j(1) this]"], ["proof (chain)\npicking this:\n  \\<not> j dvd n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "."], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n", "qed (insert False, auto)"], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < Suc i'\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "note dvds = this"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < Suc i'\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow> res = prime n\n 2. \\<not> i' dvd n \\<Longrightarrow> res = prime n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. res = prime n", "proof (cases \"i' * i' \\<le> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "case True"], ["proof (state)\nthis:\n  i' * i' \\<le> n\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "note iin = this"], ["proof (state)\nthis:\n  i' * i' \\<le> n\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "with res False"], ["proof (chain)\npicking this:\n  res =\n  (if i' dvd n then n \\<le> i'\n   else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\n  \\<not> i' dvd n\n  i' * i' \\<le> n", "have res: \"res = prime_nat_main n jj iis\""], ["proof (prove)\nusing this:\n  res =\n  (if i' dvd n then n \\<le> i'\n   else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\n  \\<not> i' dvd n\n  i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. res = prime_nat_main n jj iis", "by auto"], ["proof (state)\nthis:\n  res = prime_nat_main n jj iis\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "from iin"], ["proof (chain)\npicking this:\n  i' * i' \\<le> n", "have i_n: \"i' < n\""], ["proof (prove)\nusing this:\n  i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. i' < n", "using dvd dvdi n nat_neq_iff dvd_refl"], ["proof (prove)\nusing this:\n  i' * i' \\<le> n\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n  \\<not> i' dvd n\n  2 \\<le> n\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n  ?a dvd ?a\n\ngoal (1 subgoal):\n 1. i' < n", "by blast"], ["proof (state)\nthis:\n  i' < n\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "{"], ["proof (state)\nthis:\n  i' < n\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "assume \"Suc i' \\<le> x\" \"x < jj\" \"prime x\""], ["proof (state)\nthis:\n  Suc i' \\<le> x\n  x < jj\n  prime x\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "hence \"i \\<le> x\" \"x < jj\" \"prime x\""], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x < jj\n  prime x\n\ngoal (1 subgoal):\n 1. i \\<le> x &&& x < jj &&& prime x", "using i'"], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x < jj\n  prime x\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n\ngoal (1 subgoal):\n 1. i \\<le> x &&& x < jj &&& prime x", "by auto"], ["proof (state)\nthis:\n  i \\<le> x\n  x < jj\n  prime x\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "from \"is\"[OF this]"], ["proof (chain)\npicking this:\n  x \\<in> set is", "have \"x \\<in> set is\""], ["proof (prove)\nusing this:\n  x \\<in> set is\n\ngoal (1 subgoal):\n 1. x \\<in> set is", "."], ["proof (state)\nthis:\n  x \\<in> set is\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "with \\<open>Suc i' \\<le> x\\<close>"], ["proof (chain)\npicking this:\n  Suc i' \\<le> x\n  x \\<in> set is", "have \"x \\<in> set iis\""], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x \\<in> set is\n\ngoal (1 subgoal):\n 1. x \\<in> set iis", "unfolding Cons"], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x \\<in> set (i' # iis)\n\ngoal (1 subgoal):\n 1. x \\<in> set iis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set iis\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Suc i' \\<le> ?x2; ?x2 < jj; prime ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> set iis\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "note iis = this"], ["proof (state)\nthis:\n  \\<lbrakk>Suc i' \\<le> ?x2; ?x2 < jj; prime ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> set iis\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow> res = prime n\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. res = prime n", "by (rule IH[OF _ dvds iis res], insert i_n i', auto)"], ["proof (state)\nthis:\n  res = prime n\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "case False"], ["proof (state)\nthis:\n  \\<not> i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "with res dvdi"], ["proof (chain)\npicking this:\n  res =\n  (if i' dvd n then n \\<le> i'\n   else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\n  \\<not> i' dvd n\n  \\<not> i' * i' \\<le> n", "have res: \"res = True\""], ["proof (prove)\nusing this:\n  res =\n  (if i' dvd n then n \\<le> i'\n   else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\n  \\<not> i' dvd n\n  \\<not> i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. res = True", "by auto"], ["proof (state)\nthis:\n  res = True\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "have n: \"prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime n", "by (rule prime_sqrtI[OF n dvd False])"], ["proof (state)\nthis:\n  prime n\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow> res = prime n", "thus ?thesis"], ["proof (prove)\nusing this:\n  prime n\n\ngoal (1 subgoal):\n 1. res = prime n", "unfolding res"], ["proof (prove)\nusing this:\n  prime n\n\ngoal (1 subgoal):\n 1. True = prime n", "by auto"], ["proof (state)\nthis:\n  res = prime n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res = prime n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "case True"], ["proof (state)\nthis:\n  i' dvd n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "have \"i' \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> i'", "using i i'"], ["proof (prove)\nusing this:\n  2 \\<le> i\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n\ngoal (1 subgoal):\n 1. 2 \\<le> i'", "by auto"], ["proof (state)\nthis:\n  2 \\<le> i'\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "from \\<open>i' dvd n\\<close>"], ["proof (chain)\npicking this:\n  i' dvd n", "obtain k where \"n = i' * k\""], ["proof (prove)\nusing this:\n  i' dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>k. n = i' * k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  n = i' * k\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "with n"], ["proof (chain)\npicking this:\n  2 \\<le> n\n  n = i' * k", "have \"k \\<noteq> 0\""], ["proof (prove)\nusing this:\n  2 \\<le> n\n  n = i' * k\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0", "by (cases \"k = 0\", auto)"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "with \\<open>n = i' * k\\<close>"], ["proof (chain)\npicking this:\n  n = i' * k\n  k \\<noteq> 0", "have *: \"i' < n \\<or> i' = n\""], ["proof (prove)\nusing this:\n  n = i' * k\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i' < n \\<or> i' = n", "by auto"], ["proof (state)\nthis:\n  i' < n \\<or> i' = n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "with True res"], ["proof (chain)\npicking this:\n  i' dvd n\n  res =\n  (if i' dvd n then n \\<le> i'\n   else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\n  i' < n \\<or> i' = n", "have \"res \\<longleftrightarrow> i' = n\""], ["proof (prove)\nusing this:\n  i' dvd n\n  res =\n  (if i' dvd n then n \\<le> i'\n   else if i' * i' \\<le> n then prime_nat_main n jj iis else True)\n  i' < n \\<or> i' = n\n\ngoal (1 subgoal):\n 1. res = (i' = n)", "by auto"], ["proof (state)\nthis:\n  res = (i' = n)\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "also"], ["proof (state)\nthis:\n  res = (i' = n)\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "have \"\\<dots> = prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i' = n) = prime n", "using *"], ["proof (prove)\nusing this:\n  i' < n \\<or> i' = n\n\ngoal (1 subgoal):\n 1. (i' = n) = prime n", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i' < n \\<Longrightarrow> (i' = n) = prime n\n 2. i' = n \\<Longrightarrow> (i' = n) = prime n", "assume \"i' < n\""], ["proof (state)\nthis:\n  i' < n\n\ngoal (2 subgoals):\n 1. i' < n \\<Longrightarrow> (i' = n) = prime n\n 2. i' = n \\<Longrightarrow> (i' = n) = prime n", "with \\<open>i' \\<ge> 2\\<close> \\<open>i' dvd n\\<close>"], ["proof (chain)\npicking this:\n  2 \\<le> i'\n  i' dvd n\n  i' < n", "have \"\\<not> prime n\""], ["proof (prove)\nusing this:\n  2 \\<le> i'\n  i' dvd n\n  i' < n\n\ngoal (1 subgoal):\n 1. \\<not> prime n", "by (auto simp add: prime_nat_iff)"], ["proof (state)\nthis:\n  \\<not> prime n\n\ngoal (2 subgoals):\n 1. i' < n \\<Longrightarrow> (i' = n) = prime n\n 2. i' = n \\<Longrightarrow> (i' = n) = prime n", "with \\<open>i' < n\\<close>"], ["proof (chain)\npicking this:\n  i' < n\n  \\<not> prime n", "show ?thesis"], ["proof (prove)\nusing this:\n  i' < n\n  \\<not> prime n\n\ngoal (1 subgoal):\n 1. (i' = n) = prime n", "by auto"], ["proof (state)\nthis:\n  (i' = n) = prime n\n\ngoal (1 subgoal):\n 1. i' = n \\<Longrightarrow> (i' = n) = prime n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i' = n \\<Longrightarrow> (i' = n) = prime n", "assume \"i' = n\""], ["proof (state)\nthis:\n  i' = n\n\ngoal (1 subgoal):\n 1. i' = n \\<Longrightarrow> (i' = n) = prime n", "with dvd n"], ["proof (chain)\npicking this:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n  2 \\<le> n\n  i' = n", "have \"prime n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n  2 \\<le> n\n  i' = n\n\ngoal (1 subgoal):\n 1. prime n", "by (simp add: prime_nat_iff')"], ["proof (state)\nthis:\n  prime n\n\ngoal (1 subgoal):\n 1. i' = n \\<Longrightarrow> (i' = n) = prime n", "with \\<open>i' = n\\<close>"], ["proof (chain)\npicking this:\n  i' = n\n  prime n", "show ?thesis"], ["proof (prove)\nusing this:\n  i' = n\n  prime n\n\ngoal (1 subgoal):\n 1. (i' = n) = prime n", "by auto"], ["proof (state)\nthis:\n  (i' = n) = prime n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (i' = n) = prime n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow> res = prime n", "finally"], ["proof (chain)\npicking this:\n  res = prime n", "show ?thesis"], ["proof (prove)\nusing this:\n  res = prime n\n\ngoal (1 subgoal):\n 1. res = prime n", "."], ["proof (state)\nthis:\n  res = prime n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res = prime n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  res = prime n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_factorization_nat_main: \"ni = (n,i,is) \\<Longrightarrow> i \\<ge> 2 \\<Longrightarrow> n \\<ge> 2 \\<Longrightarrow>\n  (\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> (j dvd n)) \\<Longrightarrow> \n  (\\<And> j. i \\<le> j \\<Longrightarrow> j < jj \\<Longrightarrow> prime j \\<Longrightarrow> j \\<in> set is) \\<Longrightarrow> i \\<le> jj \\<Longrightarrow>\n  sorted is \\<Longrightarrow> distinct is \\<Longrightarrow> candidate_invariant jj \\<Longrightarrow> set is \\<subseteq> {i..<jj} \\<Longrightarrow> \n  res = prime_factorization_nat_main n jj is ps \\<Longrightarrow> \n  \\<exists> qs. res = qs @ ps \\<and> Ball (set qs) prime \\<and> n = prod_list qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ni = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n     \\<And>j.\n        \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n;\n     \\<And>j.\n        \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n        \\<Longrightarrow> j \\<in> set is;\n     i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n     set is \\<subseteq> {i..<jj};\n     res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n    \\<Longrightarrow> \\<exists>qs.\n                         res = qs @ ps \\<and>\n                         Ball (set qs) prime \\<and> n = prod_list qs", "proof (induct ni arbitrary: n i \"is\" jj res ps rule: wf_induct[OF \n  wf_measures[of \"[\\<lambda> (n,i,is). n - i, \\<lambda> (n,i,is). if is = [] then 1 else 0]\"]])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "case (1 ni n i \"is\" jj res ps)"], ["proof (state)\nthis:\n  \\<forall>y.\n     (y, ni)\n     \\<in> measures\n            [\\<lambda>(n, i, is). n - i,\n             \\<lambda>(n, i, is).\n                if is = [] then 1 else 0] \\<longrightarrow>\n     (\\<forall>x xa xb.\n         y = (x, xa, xb) \\<longrightarrow>\n         2 \\<le> xa \\<longrightarrow>\n         2 \\<le> x \\<longrightarrow>\n         (\\<forall>xb\\<ge>2.\n             xb < xa \\<longrightarrow> \\<not> xb dvd x) \\<longrightarrow>\n         (\\<forall>xc.\n             (\\<forall>x\\<ge>xa.\n                 x < xc \\<longrightarrow>\n                 prime x \\<longrightarrow> x \\<in> set xb) \\<longrightarrow>\n             xa \\<le> xc \\<longrightarrow>\n             sorted xb \\<longrightarrow>\n             distinct xb \\<longrightarrow>\n             candidate_invariant xc \\<longrightarrow>\n             set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n             (\\<forall>xa xd.\n                 xa =\n                 prime_factorization_nat_main x xc xb xd \\<longrightarrow>\n                 (\\<exists>qs.\n                     xa = qs @ xd \\<and>\n                     (\\<forall>a\\<in>set qs. prime a) \\<and>\n                     x = prod_list qs))))\n  ni = (n, i, is)\n  2 \\<le> i\n  2 \\<le> n\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n  \\<lbrakk>i \\<le> ?j; ?j < jj; prime ?j\\<rbrakk>\n  \\<Longrightarrow> ?j \\<in> set is\n  i \\<le> jj\n  sorted is\n  distinct is\n  candidate_invariant jj\n  set is \\<subseteq> {i..<jj}\n  res = prime_factorization_nat_main n jj is ps\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "note res = 1(12)"], ["proof (state)\nthis:\n  res = prime_factorization_nat_main n jj is ps\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "from 1(3-4)"], ["proof (chain)\npicking this:\n  2 \\<le> i\n  2 \\<le> n", "have i: \"i \\<ge> 2\" and i2: \"Suc i \\<ge> 2\" and n: \"n \\<ge> 2\""], ["proof (prove)\nusing this:\n  2 \\<le> i\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. 2 \\<le> i &&& 2 \\<le> Suc i &&& 2 \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 \\<le> i\n  2 \\<le> Suc i\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "from 1(5)"], ["proof (chain)\npicking this:\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n", "have dvd: \"\\<And> j. 2 \\<le> j \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> j dvd n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n", "."], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "from 1(7)"], ["proof (chain)\npicking this:\n  i \\<le> jj", "have ijj: \"i \\<le> jj\""], ["proof (prove)\nusing this:\n  i \\<le> jj\n\ngoal (1 subgoal):\n 1. i \\<le> jj", "."], ["proof (state)\nthis:\n  i \\<le> jj\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "note sort_dist = 1(8-9)"], ["proof (state)\nthis:\n  sorted is\n  distinct is\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "have \"is\": \"\\<And> j. i \\<le> j \\<Longrightarrow> j < jj \\<Longrightarrow> prime j \\<Longrightarrow> j \\<in> set is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n       \\<Longrightarrow> j \\<in> set is", "by (rule 1(6))"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> ?j; ?j < jj; prime ?j\\<rbrakk>\n  \\<Longrightarrow> ?j \\<in> set is\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "note simps = prime_factorization_nat_main.simps[of n jj \"is\"]"], ["proof (state)\nthis:\n  prime_factorization_nat_main n jj is ?ps =\n  (case is of\n   [] \\<Rightarrow>\n     case next_candidates jj of\n     (j, is) \\<Rightarrow> prime_factorization_nat_main n j is ?ps\n   | i # is \\<Rightarrow>\n       case divmod_nat n i of\n       (n', m) \\<Rightarrow>\n         if m = 0\n         then case remove_prime_factor i n' (i # ?ps) of\n              (n', ps') \\<Rightarrow>\n                if n' = 1 then ps'\n                else prime_factorization_nat_main n' jj is ps'\n         else if i * i \\<le> n then prime_factorization_nat_main n jj is ?ps\n              else n # ?ps)\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "note IH = 1(1)[rule_format, unfolded 1(2), OF _ refl]"], ["proof (state)\nthis:\n  \\<lbrakk>((?x, ?xa, ?xb), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   2 \\<le> ?xa; 2 \\<le> ?x;\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < ?xa\\<rbrakk>\n      \\<Longrightarrow> \\<not> x dvd ?x;\n   \\<And>x.\n      \\<lbrakk>?xa \\<le> x; x < ?xc; prime x\\<rbrakk>\n      \\<Longrightarrow> x \\<in> set ?xb;\n   ?xa \\<le> ?xc; sorted ?xb; distinct ?xb; candidate_invariant ?xc;\n   set ?xb \\<subseteq> {?xa..<?xc};\n   ?xd = prime_factorization_nat_main ?x ?xc ?xb ?xe\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       ?xd = qs @ ?xe \\<and>\n                       Ball (set qs) prime \\<and> ?x = prod_list qs\n\ngoal (1 subgoal):\n 1. \\<And>x n i is jj res ps.\n       \\<lbrakk>\\<forall>y.\n                   (y, x)\n                   \\<in> measures\n                          [\\<lambda>(n, i, is). n - i,\n                           \\<lambda>(n, i, is).\n                              if is = [] then 1 else 0] \\<longrightarrow>\n                   (\\<forall>x xa xb.\n                       y = (x, xa, xb) \\<longrightarrow>\n                       2 \\<le> xa \\<longrightarrow>\n                       2 \\<le> x \\<longrightarrow>\n                       (\\<forall>xb\\<ge>2.\n                           xb < xa \\<longrightarrow>\n                           \\<not> xb dvd x) \\<longrightarrow>\n                       (\\<forall>xc.\n                           (\\<forall>x\\<ge>xa.\n                               x < xc \\<longrightarrow>\n                               prime x \\<longrightarrow>\n                               x \\<in> set xb) \\<longrightarrow>\n                           xa \\<le> xc \\<longrightarrow>\n                           sorted xb \\<longrightarrow>\n                           distinct xb \\<longrightarrow>\n                           candidate_invariant xc \\<longrightarrow>\n                           set xb \\<subseteq> {xa..<xc} \\<longrightarrow>\n                           (\\<forall>xa xd.\n                               xa =\n                               prime_factorization_nat_main x xc xb\n                                xd \\<longrightarrow>\n                               (\\<exists>qs.\n                                   xa = qs @ xd \\<and>\n                                   Ball (set qs) prime \\<and>\n                                   x = prod_list qs))));\n        x = (n, i, is); 2 \\<le> i; 2 \\<le> n;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>i \\<le> j; j < jj; prime j\\<rbrakk>\n           \\<Longrightarrow> j \\<in> set is;\n        i \\<le> jj; sorted is; distinct is; candidate_invariant jj;\n        set is \\<subseteq> {i..<jj};\n        res = prime_factorization_nat_main n jj is ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>qs.\n                            res = qs @ ps \\<and>\n                            Ball (set qs) prime \\<and> n = prod_list qs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "proof (cases \"is\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case Nil"], ["proof (state)\nthis:\n  is = []\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "obtain jjj iis where can: \"next_candidates jj = (jjj,iis)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>jjj iis.\n        next_candidates jj = (jjj, iis) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  next_candidates jj = (jjj, iis)\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from res[unfolded simps, unfolded Nil can split]"], ["proof (chain)\npicking this:\n  res =\n  (case [] of [] \\<Rightarrow> prime_factorization_nat_main n jjj iis ps\n   | i # is \\<Rightarrow>\n       case divmod_nat n i of\n       (n', m) \\<Rightarrow>\n         if m = 0\n         then case remove_prime_factor i n' (i # ps) of\n              (n', ps') \\<Rightarrow>\n                if n' = 1 then ps'\n                else prime_factorization_nat_main n' jj is ps'\n         else if i * i \\<le> n then prime_factorization_nat_main n jj is ps\n              else n # ps)", "have res: \"res = prime_factorization_nat_main n jjj iis ps\""], ["proof (prove)\nusing this:\n  res =\n  (case [] of [] \\<Rightarrow> prime_factorization_nat_main n jjj iis ps\n   | i # is \\<Rightarrow>\n       case divmod_nat n i of\n       (n', m) \\<Rightarrow>\n         if m = 0\n         then case remove_prime_factor i n' (i # ps) of\n              (n', ps') \\<Rightarrow>\n                if n' = 1 then ps'\n                else prime_factorization_nat_main n' jj is ps'\n         else if i * i \\<le> n then prime_factorization_nat_main n jj is ps\n              else n # ps)\n\ngoal (1 subgoal):\n 1. res = prime_factorization_nat_main n jjj iis ps", "by auto"], ["proof (state)\nthis:\n  res = prime_factorization_nat_main n jjj iis ps\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from next_candidates[OF can 1(10)]"], ["proof (chain)\npicking this:\n  candidate_invariant jjj\n  sorted iis\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  distinct iis\n  iis \\<noteq> []\n  jj < jjj", "have can: \n      \"sorted iis\" \"distinct iis\" \"candidate_invariant jjj\" \n      \"{i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\" \"set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\"\n      \"iis \\<noteq> []\" \"jj < jjj\""], ["proof (prove)\nusing this:\n  candidate_invariant jjj\n  sorted iis\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  distinct iis\n  iis \\<noteq> []\n  jj < jjj\n\ngoal (1 subgoal):\n 1. (sorted iis &&& distinct iis &&& candidate_invariant jjj) &&&\n    ({i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis &&&\n     set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}) &&&\n    iis \\<noteq> [] &&& jj < jjj", "by blast+"], ["proof (state)\nthis:\n  sorted iis\n  distinct iis\n  candidate_invariant jjj\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  iis \\<noteq> []\n  jj < jjj\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from can ijj"], ["proof (chain)\npicking this:\n  sorted iis\n  distinct iis\n  candidate_invariant jjj\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  iis \\<noteq> []\n  jj < jjj\n  i \\<le> jj", "have \"i \\<le> jjj\""], ["proof (prove)\nusing this:\n  sorted iis\n  distinct iis\n  candidate_invariant jjj\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  set iis \\<subseteq> {2..} \\<inter> {jj..<jjj}\n  iis \\<noteq> []\n  jj < jjj\n  i \\<le> jj\n\ngoal (1 subgoal):\n 1. i \\<le> jjj", "by auto"], ["proof (state)\nthis:\n  i \\<le> jjj\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note IH = IH[OF _ i n dvd _ this can(1-3) _ res]"], ["proof (state)\nthis:\n  \\<lbrakk>((n, i, iis), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x;\n   \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i;\n   \\<And>x.\n      \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n      \\<Longrightarrow> x \\<in> set iis;\n   set iis \\<subseteq> {i..<jjj}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       res = qs @ ps \\<and>\n                       Ball (set qs) prime \\<and> n = prod_list qs\n\ngoal (2 subgoals):\n 1. is = [] \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "proof (rule IH, force simp: Nil can(6))"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "fix x"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "assume ix: \"i \\<le> x\" and xj: \"x < jjj\" and px: \"prime x\""], ["proof (state)\nthis:\n  i \\<le> x\n  x < jjj\n  prime x\n\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "from \"is\"[OF ix _ px] Nil"], ["proof (chain)\npicking this:\n  x < jj \\<Longrightarrow> x \\<in> set is\n  is = []", "have jx: \"jj \\<le> x\""], ["proof (prove)\nusing this:\n  x < jj \\<Longrightarrow> x \\<in> set is\n  is = []\n\ngoal (1 subgoal):\n 1. jj \\<le> x", "by force"], ["proof (state)\nthis:\n  jj \\<le> x\n\ngoal (4 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. \\<And>x.\n       \\<lbrakk>i \\<le> x; x < jjj; prime x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set iis\n 4. set iis \\<subseteq> {i..<jjj}", "with can(4) xj px"], ["proof (chain)\npicking this:\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  x < jjj\n  prime x\n  jj \\<le> x", "show \"x \\<in> set iis\""], ["proof (prove)\nusing this:\n  {i. prime i \\<and> jj \\<le> i \\<and> i < jjj} \\<subseteq> set iis\n  x < jjj\n  prime x\n  jj \\<le> x\n\ngoal (1 subgoal):\n 1. x \\<in> set iis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set iis\n\ngoal (3 subgoals):\n 1. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> 2 \\<le> x\n 2. \\<And>x. \\<lbrakk>2 \\<le> x; x < i\\<rbrakk> \\<Longrightarrow> x < i\n 3. set iis \\<subseteq> {i..<jjj}", "qed (insert can(5) ijj, auto)"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case (Cons i' iis)"], ["proof (state)\nthis:\n  is = i' # iis\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "obtain n' m where dm: \"Divides.divmod_nat n i' = (n',m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' m.\n        divmod_nat n i' = (n', m) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  divmod_nat n i' = (n', m)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "hence n': \"n' = n div i'\" and m: \"m = n mod i'\""], ["proof (prove)\nusing this:\n  divmod_nat n i' = (n', m)\n\ngoal (1 subgoal):\n 1. n' = n div i' &&& m = n mod i'", "by (auto simp: divmod_nat_def)"], ["proof (state)\nthis:\n  n' = n div i'\n  m = n mod i'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have m: \"(m = 0) = (i' dvd n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m = 0) = (i' dvd n)", "unfolding m"], ["proof (prove)\ngoal (1 subgoal):\n 1. (n mod i' = 0) = (i' dvd n)", "by auto"], ["proof (state)\nthis:\n  (m = 0) = (i' dvd n)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from Cons res[unfolded simps] dm m n'"], ["proof (chain)\npicking this:\n  is = i' # iis\n  res =\n  (case is of\n   [] \\<Rightarrow>\n     case next_candidates jj of\n     (j, is) \\<Rightarrow> prime_factorization_nat_main n j is ps\n   | i # is \\<Rightarrow>\n       case divmod_nat n i of\n       (n', m) \\<Rightarrow>\n         if m = 0\n         then case remove_prime_factor i n' (i # ps) of\n              (n', ps') \\<Rightarrow>\n                if n' = 1 then ps'\n                else prime_factorization_nat_main n' jj is ps'\n         else if i * i \\<le> n then prime_factorization_nat_main n jj is ps\n              else n # ps)\n  divmod_nat n i' = (n', m)\n  (m = 0) = (i' dvd n)\n  n' = n div i'", "have res: \"res = (\n       if i' dvd n then case remove_prime_factor i' (n div i') (i' # ps) of\n            (n', ps') \\<Rightarrow> if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n       else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps else n # ps)\""], ["proof (prove)\nusing this:\n  is = i' # iis\n  res =\n  (case is of\n   [] \\<Rightarrow>\n     case next_candidates jj of\n     (j, is) \\<Rightarrow> prime_factorization_nat_main n j is ps\n   | i # is \\<Rightarrow>\n       case divmod_nat n i of\n       (n', m) \\<Rightarrow>\n         if m = 0\n         then case remove_prime_factor i n' (i # ps) of\n              (n', ps') \\<Rightarrow>\n                if n' = 1 then ps'\n                else prime_factorization_nat_main n' jj is ps'\n         else if i * i \\<le> n then prime_factorization_nat_main n jj is ps\n              else n # ps)\n  divmod_nat n i' = (n', m)\n  (m = 0) = (i' dvd n)\n  n' = n div i'\n\ngoal (1 subgoal):\n 1. res =\n    (if i' dvd n\n     then case remove_prime_factor i' (n div i') (i' # ps) of\n          (n', ps') \\<Rightarrow>\n            if n' = 1 then ps'\n            else prime_factorization_nat_main n' jj iis ps'\n     else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n          else n # ps)", "by simp"], ["proof (state)\nthis:\n  res =\n  (if i' dvd n\n   then case remove_prime_factor i' (n div i') (i' # ps) of\n        (n', ps') \\<Rightarrow>\n          if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n   else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n        else n # ps)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from 1(11) i Cons"], ["proof (chain)\npicking this:\n  set is \\<subseteq> {i..<jj}\n  2 \\<le> i\n  is = i' # iis", "have iis: \"set iis \\<subseteq> {i..<jj}\" and i': \"i \\<le> i'\" \"i' < jj\" \"Suc i' \\<le> jj\" \"i' > 1\""], ["proof (prove)\nusing this:\n  set is \\<subseteq> {i..<jj}\n  2 \\<le> i\n  is = i' # iis\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {i..<jj} &&&\n    (i \\<le> i' &&& i' < jj) &&& Suc i' \\<le> jj &&& 1 < i'", "by auto"], ["proof (state)\nthis:\n  set iis \\<subseteq> {i..<jj}\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from sort_dist"], ["proof (chain)\npicking this:\n  sorted is\n  distinct is", "have sd_iis: \"sorted iis\" \"distinct iis\" and \"i' \\<notin> set iis\""], ["proof (prove)\nusing this:\n  sorted is\n  distinct is\n\ngoal (1 subgoal):\n 1. (sorted iis &&& distinct iis) &&& i' \\<notin> set iis", "by(auto simp: Cons)"], ["proof (state)\nthis:\n  sorted iis\n  distinct iis\n  i' \\<notin> set iis\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from sort_dist(1) Cons"], ["proof (chain)\npicking this:\n  sorted is\n  is = i' # iis", "have \"set iis \\<subseteq> {i'..}\""], ["proof (prove)\nusing this:\n  sorted is\n  is = i' # iis\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {i'..}", "by(auto)"], ["proof (state)\nthis:\n  set iis \\<subseteq> {i'..}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with iis"], ["proof (chain)\npicking this:\n  set iis \\<subseteq> {i..<jj}\n  set iis \\<subseteq> {i'..}", "have \"set iis \\<subseteq> {i'..<jj}\""], ["proof (prove)\nusing this:\n  set iis \\<subseteq> {i..<jj}\n  set iis \\<subseteq> {i'..}\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {i'..<jj}", "by force"], ["proof (state)\nthis:\n  set iis \\<subseteq> {i'..<jj}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with \\<open>i' \\<notin> set iis\\<close>"], ["proof (chain)\npicking this:\n  i' \\<notin> set iis\n  set iis \\<subseteq> {i'..<jj}", "have iis: \"set iis \\<subseteq> {Suc i'..<jj}\""], ["proof (prove)\nusing this:\n  i' \\<notin> set iis\n  set iis \\<subseteq> {i'..<jj}\n\ngoal (1 subgoal):\n 1. set iis \\<subseteq> {Suc i'..<jj}", "by (auto, case_tac \"x = i'\", auto)"], ["proof (state)\nthis:\n  set iis \\<subseteq> {Suc i'..<jj}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "{"], ["proof (state)\nthis:\n  set iis \\<subseteq> {Suc i'..<jj}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "assume j: \"2 \\<le> j\" \"j < i'\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < i'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have \"\\<not> j dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "assume \"j dvd n\""], ["proof (state)\nthis:\n  j dvd n\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "from prime_divisor[OF j(1) this]"], ["proof (chain)\npicking this:\n  \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n", "obtain p where \n          p: \"prime p\" \"p dvd j\" \"p dvd n\""], ["proof (prove)\nusing this:\n  \\<exists>p. prime p \\<and> p dvd j \\<and> p dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>prime p; p dvd j; p dvd n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  prime p\n  p dvd j\n  p dvd n\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "have pj: \"p \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<le> j", "by (rule dvd_imp_le[OF p(2)], insert j, auto)"], ["proof (state)\nthis:\n  p \\<le> j\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "have p2: \"2 \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 \\<le> p", "using p(1)"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 2 \\<le> p", "by (rule prime_ge_2_nat)"], ["proof (state)\nthis:\n  2 \\<le> p\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "from dvd[OF p2] p(3)"], ["proof (chain)\npicking this:\n  p < i \\<Longrightarrow> \\<not> p dvd n\n  p dvd n", "have pi: \"p \\<ge> i\""], ["proof (prove)\nusing this:\n  p < i \\<Longrightarrow> \\<not> p dvd n\n  p dvd n\n\ngoal (1 subgoal):\n 1. i \\<le> p", "by force"], ["proof (state)\nthis:\n  i \\<le> p\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "from pj j(2) i' \"is\"[OF pi _ p(1)]"], ["proof (chain)\npicking this:\n  p \\<le> j\n  j < i'\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  p < jj \\<Longrightarrow> p \\<in> set is", "have \"p \\<in> set is\""], ["proof (prove)\nusing this:\n  p \\<le> j\n  j < i'\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  p < jj \\<Longrightarrow> p \\<in> set is\n\ngoal (1 subgoal):\n 1. p \\<in> set is", "by auto"], ["proof (state)\nthis:\n  p \\<in> set is\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with \\<open>sorted is\\<close>"], ["proof (chain)\npicking this:\n  sorted is\n  p \\<in> set is", "have \"i' \\<le> p\""], ["proof (prove)\nusing this:\n  sorted is\n  p \\<in> set is\n\ngoal (1 subgoal):\n 1. i' \\<le> p", "by (auto simp: Cons)"], ["proof (state)\nthis:\n  i' \\<le> p\n\ngoal (1 subgoal):\n 1. j dvd n \\<Longrightarrow> False", "with pj j(2)"], ["proof (chain)\npicking this:\n  p \\<le> j\n  j < i'\n  i' \\<le> p", "show False"], ["proof (prove)\nusing this:\n  p \\<le> j\n  j < i'\n  i' \\<le> p\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note dvd = this"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from i' i"], ["proof (chain)\npicking this:\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  2 \\<le> i", "have i'2: \"2 \\<le> Suc i'\""], ["proof (prove)\nusing this:\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  2 \\<le> i\n\ngoal (1 subgoal):\n 1. 2 \\<le> Suc i'", "by auto"], ["proof (state)\nthis:\n  2 \\<le> Suc i'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note IH = IH[OF _ i'2 _ _ _ i'(3) sd_iis 1(10) iis]"], ["proof (state)\nthis:\n  \\<lbrakk>((?x, Suc i', iis), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   2 \\<le> ?x;\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < Suc i'\\<rbrakk>\n      \\<Longrightarrow> \\<not> x dvd ?x;\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> x \\<in> set iis;\n   ?xd = prime_factorization_nat_main ?x jj iis ?xe\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       ?xd = qs @ ?xe \\<and>\n                       Ball (set qs) prime \\<and> ?x = prod_list qs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "{"], ["proof (state)\nthis:\n  \\<lbrakk>((?x, Suc i', iis), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   2 \\<le> ?x;\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < Suc i'\\<rbrakk>\n      \\<Longrightarrow> \\<not> x dvd ?x;\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> x \\<in> set iis;\n   ?xd = prime_factorization_nat_main ?x jj iis ?xe\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       ?xd = qs @ ?xe \\<and>\n                       Ball (set qs) prime \\<and> ?x = prod_list qs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "assume \"Suc i' \\<le> x\" \"x < jj\" \"prime x\""], ["proof (state)\nthis:\n  Suc i' \\<le> x\n  x < jj\n  prime x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "hence \"i \\<le> x\" \"x < jj\" \"prime x\""], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x < jj\n  prime x\n\ngoal (1 subgoal):\n 1. i \\<le> x &&& x < jj &&& prime x", "using i'"], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x < jj\n  prime x\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n\ngoal (1 subgoal):\n 1. i \\<le> x &&& x < jj &&& prime x", "by auto"], ["proof (state)\nthis:\n  i \\<le> x\n  x < jj\n  prime x\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from \"is\"[OF this]"], ["proof (chain)\npicking this:\n  x \\<in> set is", "have \"x \\<in> set is\""], ["proof (prove)\nusing this:\n  x \\<in> set is\n\ngoal (1 subgoal):\n 1. x \\<in> set is", "."], ["proof (state)\nthis:\n  x \\<in> set is\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with \\<open>Suc i' \\<le> x\\<close>"], ["proof (chain)\npicking this:\n  Suc i' \\<le> x\n  x \\<in> set is", "have \"x \\<in> set iis\""], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x \\<in> set is\n\ngoal (1 subgoal):\n 1. x \\<in> set iis", "unfolding Cons"], ["proof (prove)\nusing this:\n  Suc i' \\<le> x\n  x \\<in> set (i' # iis)\n\ngoal (1 subgoal):\n 1. x \\<in> set iis", "by auto"], ["proof (state)\nthis:\n  x \\<in> set iis\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Suc i' \\<le> ?x2; ?x2 < jj; prime ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> set iis\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note iis = this"], ["proof (state)\nthis:\n  \\<lbrakk>Suc i' \\<le> ?x2; ?x2 < jj; prime ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> set iis\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       is = a # list \\<Longrightarrow>\n       \\<exists>qs.\n          res = qs @ ps \\<and>\n          (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "proof (cases \"i' dvd n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case False"], ["proof (state)\nthis:\n  \\<not> i' dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note dvdi = this"], ["proof (state)\nthis:\n  \\<not> i' dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "{"], ["proof (state)\nthis:\n  \\<not> i' dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "assume j: \"2 \\<le> j\" \"j < Suc i'\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < Suc i'\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have \"\\<not> j dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "proof (cases \"j = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n", "case False"], ["proof (state)\nthis:\n  j \\<noteq> i'\n\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n", "with j"], ["proof (chain)\npicking this:\n  2 \\<le> j\n  j < Suc i'\n  j \\<noteq> i'", "have \"j < i'\""], ["proof (prove)\nusing this:\n  2 \\<le> j\n  j < Suc i'\n  j \\<noteq> i'\n\ngoal (1 subgoal):\n 1. j < i'", "by auto"], ["proof (state)\nthis:\n  j < i'\n\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n", "from dvd[OF j(1) this]"], ["proof (chain)\npicking this:\n  \\<not> j dvd n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "."], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n", "qed (insert False, auto)"], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < Suc i'\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note dvds = this"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < Suc i'\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?j2 dvd n\n\ngoal (2 subgoals):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "proof (cases \"i' * i' \\<le> n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case True"], ["proof (state)\nthis:\n  i' * i' \\<le> n\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note iin = this"], ["proof (state)\nthis:\n  i' * i' \\<le> n\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with res False"], ["proof (chain)\npicking this:\n  res =\n  (if i' dvd n\n   then case remove_prime_factor i' (n div i') (i' # ps) of\n        (n', ps') \\<Rightarrow>\n          if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n   else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n        else n # ps)\n  \\<not> i' dvd n\n  i' * i' \\<le> n", "have res: \"res = prime_factorization_nat_main n jj iis ps\""], ["proof (prove)\nusing this:\n  res =\n  (if i' dvd n\n   then case remove_prime_factor i' (n div i') (i' # ps) of\n        (n', ps') \\<Rightarrow>\n          if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n   else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n        else n # ps)\n  \\<not> i' dvd n\n  i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. res = prime_factorization_nat_main n jj iis ps", "by auto"], ["proof (state)\nthis:\n  res = prime_factorization_nat_main n jj iis ps\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from iin"], ["proof (chain)\npicking this:\n  i' * i' \\<le> n", "have i_n: \"i' < n\""], ["proof (prove)\nusing this:\n  i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. i' < n", "using dvd dvdi n nat_neq_iff dvd_refl"], ["proof (prove)\nusing this:\n  i' * i' \\<le> n\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < i'\\<rbrakk> \\<Longrightarrow> \\<not> ?j2 dvd n\n  \\<not> i' dvd n\n  2 \\<le> n\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n  ?a dvd ?a\n\ngoal (1 subgoal):\n 1. i' < n", "by blast"], ["proof (state)\nthis:\n  i' < n\n\ngoal (2 subgoals):\n 1. i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "by (rule IH[OF _ n dvds iis res], insert i_n i', auto)"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case False"], ["proof (state)\nthis:\n  \\<not> i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with res dvdi"], ["proof (chain)\npicking this:\n  res =\n  (if i' dvd n\n   then case remove_prime_factor i' (n div i') (i' # ps) of\n        (n', ps') \\<Rightarrow>\n          if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n   else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n        else n # ps)\n  \\<not> i' dvd n\n  \\<not> i' * i' \\<le> n", "have res: \"res = n # ps\""], ["proof (prove)\nusing this:\n  res =\n  (if i' dvd n\n   then case remove_prime_factor i' (n div i') (i' # ps) of\n        (n', ps') \\<Rightarrow>\n          if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n   else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n        else n # ps)\n  \\<not> i' dvd n\n  \\<not> i' * i' \\<le> n\n\ngoal (1 subgoal):\n 1. res = n # ps", "by auto"], ["proof (state)\nthis:\n  res = n # ps\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have n: \"prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime n", "by (rule prime_sqrtI[OF n dvd False])"], ["proof (state)\nthis:\n  prime n\n\ngoal (1 subgoal):\n 1. \\<not> i' * i' \\<le> n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "thus ?thesis"], ["proof (prove)\nusing this:\n  prime n\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "unfolding res"], ["proof (prove)\nusing this:\n  prime n\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       n # ps = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "by auto"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case True"], ["proof (state)\nthis:\n  i' dvd n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note i_n = this"], ["proof (state)\nthis:\n  i' dvd n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "obtain n'' qs where rp: \"remove_prime_factor i' (n div i') (i' # ps) = (n'',qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'' qs.\n        remove_prime_factor i' (n div i') (i' # ps) =\n        (n'', qs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  remove_prime_factor i' (n div i') (i' # ps) = (n'', qs)\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with res True"], ["proof (chain)\npicking this:\n  res =\n  (if i' dvd n\n   then case remove_prime_factor i' (n div i') (i' # ps) of\n        (n', ps') \\<Rightarrow>\n          if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n   else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n        else n # ps)\n  i' dvd n\n  remove_prime_factor i' (n div i') (i' # ps) = (n'', qs)", "have res: \"res = (if n'' = 1 then qs else prime_factorization_nat_main n'' jj iis qs)\""], ["proof (prove)\nusing this:\n  res =\n  (if i' dvd n\n   then case remove_prime_factor i' (n div i') (i' # ps) of\n        (n', ps') \\<Rightarrow>\n          if n' = 1 then ps' else prime_factorization_nat_main n' jj iis ps'\n   else if i' * i' \\<le> n then prime_factorization_nat_main n jj iis ps\n        else n # ps)\n  i' dvd n\n  remove_prime_factor i' (n div i') (i' # ps) = (n'', qs)\n\ngoal (1 subgoal):\n 1. res =\n    (if n'' = 1 then qs else prime_factorization_nat_main n'' jj iis qs)", "by auto"], ["proof (state)\nthis:\n  res = (if n'' = 1 then qs else prime_factorization_nat_main n'' jj iis qs)\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have pi: \"prime i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime i'", "unfolding prime_nat_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < i' \\<and>\n    (\\<forall>m. m dvd i' \\<longrightarrow> m = 1 \\<or> m = i')", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < i'\n 2. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "show \"1 < i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < i'", "using i' i"], ["proof (prove)\nusing this:\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  2 \\<le> i\n\ngoal (1 subgoal):\n 1. 1 < i'", "by auto"], ["proof (state)\nthis:\n  1 < i'\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "assume ji: \"j dvd i'\""], ["proof (state)\nthis:\n  j dvd i'\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "with i' i"], ["proof (chain)\npicking this:\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  2 \\<le> i\n  j dvd i'", "have j0: \"j \\<noteq> 0\""], ["proof (prove)\nusing this:\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  2 \\<le> i\n  j dvd i'\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0", "by (cases \"j = 0\", auto)"], ["proof (state)\nthis:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "from ji i_n"], ["proof (chain)\npicking this:\n  j dvd i'\n  i' dvd n", "have jn: \"j dvd n\""], ["proof (prove)\nusing this:\n  j dvd i'\n  i' dvd n\n\ngoal (1 subgoal):\n 1. j dvd n", "by (metis dvd_trans)"], ["proof (state)\nthis:\n  j dvd n\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "with dvd[of j]"], ["proof (chain)\npicking this:\n  \\<lbrakk>2 \\<le> j; j < i'\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n\n  j dvd n", "have j: \"2 > j \\<or> j \\<ge> i'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> j; j < i'\\<rbrakk> \\<Longrightarrow> \\<not> j dvd n\n  j dvd n\n\ngoal (1 subgoal):\n 1. j < 2 \\<or> i' \\<le> j", "by linarith"], ["proof (state)\nthis:\n  j < 2 \\<or> i' \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "from ji \\<open>1 < i'\\<close>"], ["proof (chain)\npicking this:\n  j dvd i'\n  1 < i'", "have \"j \\<le> i'\""], ["proof (prove)\nusing this:\n  j dvd i'\n  1 < i'\n\ngoal (1 subgoal):\n 1. j \\<le> i'", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. i' = j * k\n  1 < i'\n\ngoal (1 subgoal):\n 1. j \\<le> i'", "by (simp add: dvd_imp_le ji)"], ["proof (state)\nthis:\n  j \\<le> i'\n\ngoal (1 subgoal):\n 1. \\<And>m. m dvd i' \\<Longrightarrow> m = 1 \\<or> m = i'", "with j j0"], ["proof (chain)\npicking this:\n  j < 2 \\<or> i' \\<le> j\n  j \\<noteq> 0\n  j \\<le> i'", "show \"j = 1 \\<or> j = i'\""], ["proof (prove)\nusing this:\n  j < 2 \\<or> i' \\<le> j\n  j \\<noteq> 0\n  j \\<le> i'\n\ngoal (1 subgoal):\n 1. j = 1 \\<or> j = i'", "by linarith"], ["proof (state)\nthis:\n  j = 1 \\<or> j = i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime i'\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from True n'"], ["proof (chain)\npicking this:\n  i' dvd n\n  n' = n div i'", "have id: \"n = n' * i'\""], ["proof (prove)\nusing this:\n  i' dvd n\n  n' = n div i'\n\ngoal (1 subgoal):\n 1. n = n' * i'", "by auto"], ["proof (state)\nthis:\n  n = n' * i'\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from n id"], ["proof (chain)\npicking this:\n  2 \\<le> n\n  n = n' * i'", "have \"n' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  2 \\<le> n\n  n = n' * i'\n\ngoal (1 subgoal):\n 1. n' \\<noteq> 0", "by (cases \"n = 0\", auto)"], ["proof (state)\nthis:\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with id"], ["proof (chain)\npicking this:\n  n = n' * i'\n  n' \\<noteq> 0", "have \"i' \\<le> n\""], ["proof (prove)\nusing this:\n  n = n' * i'\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i' \\<le> n", "by auto"], ["proof (state)\nthis:\n  i' \\<le> n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from remove_prime_factor[OF rp[folded n'] \\<open>1 < i'\\<close> \\<open>n' \\<noteq> 0\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>rs.\n     qs = rs @ i' # ps \\<and>\n     n' = n'' * prod_list rs \\<and>\n     \\<not> i' dvd n'' \\<and> set rs \\<subseteq> {i'}", "obtain rs\n        where qs: \"qs = rs @ i' # ps\" and n': \"n' = n'' * prod_list rs\" and i_n'': \"\\<not> i' dvd n''\" \n        and rs: \"set rs \\<subseteq> {i'}\""], ["proof (prove)\nusing this:\n  \\<exists>rs.\n     qs = rs @ i' # ps \\<and>\n     n' = n'' * prod_list rs \\<and>\n     \\<not> i' dvd n'' \\<and> set rs \\<subseteq> {i'}\n\ngoal (1 subgoal):\n 1. (\\<And>rs.\n        \\<lbrakk>qs = rs @ i' # ps; n' = n'' * prod_list rs;\n         \\<not> i' dvd n''; set rs \\<subseteq> {i'}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  qs = rs @ i' # ps\n  n' = n'' * prod_list rs\n  \\<not> i' dvd n''\n  set rs \\<subseteq> {i'}\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "{"], ["proof (state)\nthis:\n  qs = rs @ i' # ps\n  n' = n'' * prod_list rs\n  \\<not> i' dvd n''\n  set rs \\<subseteq> {i'}\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "assume \"j dvd n''\""], ["proof (state)\nthis:\n  j dvd n''\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "hence \"j dvd n\""], ["proof (prove)\nusing this:\n  j dvd n''\n\ngoal (1 subgoal):\n 1. j dvd n", "unfolding id n'"], ["proof (prove)\nusing this:\n  j dvd n''\n\ngoal (1 subgoal):\n 1. j dvd n'' * prod_list rs * i'", "by auto"], ["proof (state)\nthis:\n  j dvd n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "}"], ["proof (state)\nthis:\n  ?j2 dvd n'' \\<Longrightarrow> ?j2 dvd n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "note dvd' = this"], ["proof (state)\nthis:\n  ?j2 dvd n'' \\<Longrightarrow> ?j2 dvd n\n\ngoal (1 subgoal):\n 1. i' dvd n \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "proof (cases \"n'' = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case False"], ["proof (state)\nthis:\n  n'' \\<noteq> 1\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with res"], ["proof (chain)\npicking this:\n  res = (if n'' = 1 then qs else prime_factorization_nat_main n'' jj iis qs)\n  n'' \\<noteq> 1", "have res: \"res = prime_factorization_nat_main n'' jj iis qs\""], ["proof (prove)\nusing this:\n  res = (if n'' = 1 then qs else prime_factorization_nat_main n'' jj iis qs)\n  n'' \\<noteq> 1\n\ngoal (1 subgoal):\n 1. res = prime_factorization_nat_main n'' jj iis qs", "by simp"], ["proof (state)\nthis:\n  res = prime_factorization_nat_main n'' jj iis qs\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from i i'"], ["proof (chain)\npicking this:\n  2 \\<le> i\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'", "have \"i' \\<ge> 2\""], ["proof (prove)\nusing this:\n  2 \\<le> i\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n\ngoal (1 subgoal):\n 1. 2 \\<le> i'", "by simp"], ["proof (state)\nthis:\n  2 \\<le> i'\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from False n' \\<open>n' \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<noteq> 1\n  n' = n'' * prod_list rs\n  n' \\<noteq> 0", "have n2: \"n'' \\<ge> 2\""], ["proof (prove)\nusing this:\n  n'' \\<noteq> 1\n  n' = n'' * prod_list rs\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> n''", "by (cases \"n'' = 0\"; auto)"], ["proof (state)\nthis:\n  2 \\<le> n''\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have lrs: \"prod_list rs \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list rs \\<noteq> 0", "using n' \\<open>n' \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  n' = n'' * prod_list rs\n  n' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prod_list rs \\<noteq> 0", "by (cases \"prod_list rs = 0\", auto)"], ["proof (state)\nthis:\n  prod_list rs \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with \\<open>i' \\<ge> 2\\<close>"], ["proof (chain)\npicking this:\n  2 \\<le> i'\n  prod_list rs \\<noteq> 0", "have \"prod_list rs * i' \\<ge> 2\""], ["proof (prove)\nusing this:\n  2 \\<le> i'\n  prod_list rs \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 2 \\<le> prod_list rs * i'", "by (cases \"prod_list rs\", auto)"], ["proof (state)\nthis:\n  2 \\<le> prod_list rs * i'\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "hence nn'': \"n > n''\""], ["proof (prove)\nusing this:\n  2 \\<le> prod_list rs * i'\n\ngoal (1 subgoal):\n 1. n'' < n", "unfolding id n'"], ["proof (prove)\nusing this:\n  2 \\<le> prod_list rs * i'\n\ngoal (1 subgoal):\n 1. n'' < n'' * prod_list rs * i'", "using n2"], ["proof (prove)\nusing this:\n  2 \\<le> prod_list rs * i'\n  2 \\<le> n''\n\ngoal (1 subgoal):\n 1. n'' < n'' * prod_list rs * i'", "by simp"], ["proof (state)\nthis:\n  n'' < n\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have \"i' \\<noteq> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> n", "unfolding id n'"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> n'' * prod_list rs * i'", "using pi False"], ["proof (prove)\nusing this:\n  prime i'\n  n'' \\<noteq> 1\n\ngoal (1 subgoal):\n 1. i' \\<noteq> n'' * prod_list rs * i'", "by fastforce"], ["proof (state)\nthis:\n  i' \\<noteq> n\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with \\<open>i' \\<le> n\\<close> i'"], ["proof (chain)\npicking this:\n  i' \\<le> n\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  i' \\<noteq> n", "have \"n > i\""], ["proof (prove)\nusing this:\n  i' \\<le> n\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  i' \\<noteq> n\n\ngoal (1 subgoal):\n 1. i < n", "by auto"], ["proof (state)\nthis:\n  i < n\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with nn'' i i'"], ["proof (chain)\npicking this:\n  n'' < n\n  2 \\<le> i\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  i < n", "have less: \"n - i > n'' - Suc i'\""], ["proof (prove)\nusing this:\n  n'' < n\n  2 \\<le> i\n  i \\<le> i'\n  i' < jj\n  Suc i' \\<le> jj\n  1 < i'\n  i < n\n\ngoal (1 subgoal):\n 1. n'' - Suc i' < n - i", "by simp"], ["proof (state)\nthis:\n  n'' - Suc i' < n - i\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "{"], ["proof (state)\nthis:\n  n'' - Suc i' < n - i\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "assume 2: \"2 \\<le> j\" and ji: \"j < Suc i'\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < Suc i'\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "have \"\\<not> j dvd n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j dvd n''", "proof (cases \"j = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n''\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n''", "case False"], ["proof (state)\nthis:\n  j \\<noteq> i'\n\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n''\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n''", "with ji"], ["proof (chain)\npicking this:\n  j < Suc i'\n  j \\<noteq> i'", "have \"j < i'\""], ["proof (prove)\nusing this:\n  j < Suc i'\n  j \\<noteq> i'\n\ngoal (1 subgoal):\n 1. j < i'", "by auto"], ["proof (state)\nthis:\n  j < i'\n\ngoal (2 subgoals):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n''\n 2. j \\<noteq> i' \\<Longrightarrow> \\<not> j dvd n''", "from dvd' dvd[OF 2 this]"], ["proof (chain)\npicking this:\n  ?j2 dvd n'' \\<Longrightarrow> ?j2 dvd n\n  \\<not> j dvd n", "show ?thesis"], ["proof (prove)\nusing this:\n  ?j2 dvd n'' \\<Longrightarrow> ?j2 dvd n\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. \\<not> j dvd n''", "by blast"], ["proof (state)\nthis:\n  \\<not> j dvd n''\n\ngoal (1 subgoal):\n 1. j = i' \\<Longrightarrow> \\<not> j dvd n''", "qed (insert i_n'', auto)"], ["proof (state)\nthis:\n  \\<not> j dvd n''\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> ?j2; ?j2 < Suc i'\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?j2 dvd n''\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "from IH[OF _ n2 this iis res] less"], ["proof (chain)\npicking this:\n  \\<lbrakk>((n'', Suc i', iis), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < Suc i'\\<rbrakk> \\<Longrightarrow> 2 \\<le> x;\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < Suc i'\\<rbrakk> \\<Longrightarrow> x < Suc i';\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> Suc i' \\<le> x;\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> x < jj;\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> prime x\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qsa.\n                       res = qsa @ qs \\<and>\n                       Ball (set qsa) prime \\<and> n'' = prod_list qsa\n  n'' - Suc i' < n - i", "obtain ss where \n          res: \"res = ss @ qs \\<and> Ball (set ss) prime \\<and> n'' = prod_list ss\""], ["proof (prove)\nusing this:\n  \\<lbrakk>((n'', Suc i', iis), n, i, is)\n           \\<in> measures\n                  [\\<lambda>(n, i, is). n - i,\n                   \\<lambda>(n, i, is). if is = [] then 1 else 0];\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < Suc i'\\<rbrakk> \\<Longrightarrow> 2 \\<le> x;\n   \\<And>x.\n      \\<lbrakk>2 \\<le> x; x < Suc i'\\<rbrakk> \\<Longrightarrow> x < Suc i';\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> Suc i' \\<le> x;\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> x < jj;\n   \\<And>x.\n      \\<lbrakk>Suc i' \\<le> x; x < jj; prime x\\<rbrakk>\n      \\<Longrightarrow> prime x\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qsa.\n                       res = qsa @ qs \\<and>\n                       Ball (set qsa) prime \\<and> n'' = prod_list qsa\n  n'' - Suc i' < n - i\n\ngoal (1 subgoal):\n 1. (\\<And>ss.\n        res = ss @ qs \\<and>\n        Ball (set ss) prime \\<and> n'' = prod_list ss \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  res = ss @ qs \\<and> Ball (set ss) prime \\<and> n'' = prod_list ss\n\ngoal (2 subgoals):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n 2. n'' \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "thus ?thesis"], ["proof (prove)\nusing this:\n  res = ss @ qs \\<and> Ball (set ss) prime \\<and> n'' = prod_list ss\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "unfolding id n' qs"], ["proof (prove)\nusing this:\n  res = ss @ rs @ i' # ps \\<and>\n  Ball (set ss) prime \\<and> n'' = prod_list ss\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and>\n       n'' * prod_list rs * i' = prod_list qs", "using pi rs"], ["proof (prove)\nusing this:\n  res = ss @ rs @ i' # ps \\<and>\n  Ball (set ss) prime \\<and> n'' = prod_list ss\n  prime i'\n  set rs \\<subseteq> {i'}\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and>\n       n'' * prod_list rs * i' = prod_list qs", "by auto"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal (1 subgoal):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "case True"], ["proof (state)\nthis:\n  n'' = 1\n\ngoal (1 subgoal):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "with res"], ["proof (chain)\npicking this:\n  res = (if n'' = 1 then qs else prime_factorization_nat_main n'' jj iis qs)\n  n'' = 1", "have res: \"res = qs\""], ["proof (prove)\nusing this:\n  res = (if n'' = 1 then qs else prime_factorization_nat_main n'' jj iis qs)\n  n'' = 1\n\ngoal (1 subgoal):\n 1. res = qs", "by auto"], ["proof (state)\nthis:\n  res = qs\n\ngoal (1 subgoal):\n 1. n'' = 1 \\<Longrightarrow>\n    \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       res = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs", "unfolding id n' res qs True"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       rs @ i' # ps = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and>\n       1 * prod_list rs * i' = prod_list qs", "using rs \\<open>prime i'\\<close>"], ["proof (prove)\nusing this:\n  set rs \\<subseteq> {i'}\n  prime i'\n\ngoal (1 subgoal):\n 1. \\<exists>qs.\n       rs @ i' # ps = qs @ ps \\<and>\n       (\\<forall>a\\<in>set qs. prime a) \\<and>\n       1 * prod_list rs * i' = prod_list qs", "by (intro exI[of _ \"rs @ [i']\"], auto)"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>qs.\n     res = qs @ ps \\<and>\n     (\\<forall>a\\<in>set qs. prime a) \\<and> n = prod_list qs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_nat[simp]: \"prime_nat n = prime n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_nat n = prime n", "proof (cases \"n < 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n < 2 \\<Longrightarrow> prime_nat n = prime n\n 2. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "case True"], ["proof (state)\nthis:\n  n < 2\n\ngoal (2 subgoals):\n 1. n < 2 \\<Longrightarrow> prime_nat n = prime n\n 2. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "thus ?thesis"], ["proof (prove)\nusing this:\n  n < 2\n\ngoal (1 subgoal):\n 1. prime_nat n = prime n", "unfolding prime_nat_def prime_nat_iff"], ["proof (prove)\nusing this:\n  n < 2\n\ngoal (1 subgoal):\n 1. (if n < 2 then False\n     else case next_candidates 0 of\n          (j, is) \\<Rightarrow> prime_nat_main n j is) =\n    (1 < n \\<and> (\\<forall>m. m dvd n \\<longrightarrow> m = 1 \\<or> m = n))", "by auto"], ["proof (state)\nthis:\n  prime_nat n = prime n\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "case False"], ["proof (state)\nthis:\n  \\<not> n < 2\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "hence n: \"n \\<ge> 2\""], ["proof (prove)\nusing this:\n  \\<not> n < 2\n\ngoal (1 subgoal):\n 1. 2 \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "obtain jj \"is\" where can: \"next_candidates 0 = (jj,is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>jj is.\n        next_candidates 0 = (jj, is) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  next_candidates 0 = (jj, is)\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "from next_candidates[OF this candidate_invariant_0]"], ["proof (chain)\npicking this:\n  candidate_invariant jj\n  sorted is\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n  0 < jj", "have cann: \"sorted is\" \"distinct is\" \"candidate_invariant jj\" \n    \"{i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\"\n    \"set is \\<subseteq> {2..} \\<inter> {0..<jj}\" \"distinct is\" \"is \\<noteq> []\""], ["proof (prove)\nusing this:\n  candidate_invariant jj\n  sorted is\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n  0 < jj\n\ngoal (1 subgoal):\n 1. (sorted is &&& distinct is &&& candidate_invariant jj) &&&\n    ({i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is &&&\n     set is \\<subseteq> {2..} \\<inter> {0..<jj}) &&&\n    distinct is &&& is \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  sorted is\n  distinct is\n  candidate_invariant jj\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "from cann"], ["proof (chain)\npicking this:\n  sorted is\n  distinct is\n  candidate_invariant jj\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []", "have sub: \"set is \\<subseteq> {2..<jj}\""], ["proof (prove)\nusing this:\n  sorted is\n  distinct is\n  candidate_invariant jj\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n\ngoal (1 subgoal):\n 1. set is \\<subseteq> {2..<jj}", "by force"], ["proof (state)\nthis:\n  set is \\<subseteq> {2..<jj}\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "with \\<open>is \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  is \\<noteq> []\n  set is \\<subseteq> {2..<jj}", "have jj: \"jj \\<ge> 2\""], ["proof (prove)\nusing this:\n  is \\<noteq> []\n  set is \\<subseteq> {2..<jj}\n\ngoal (1 subgoal):\n 1. 2 \\<le> jj", "by (cases \"is\", auto)"], ["proof (state)\nthis:\n  2 \\<le> jj\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "from n can"], ["proof (chain)\npicking this:\n  2 \\<le> n\n  next_candidates 0 = (jj, is)", "have res: \"prime_nat n = prime_nat_main n jj is\""], ["proof (prove)\nusing this:\n  2 \\<le> n\n  next_candidates 0 = (jj, is)\n\ngoal (1 subgoal):\n 1. prime_nat n = prime_nat_main n jj is", "unfolding prime_nat_def"], ["proof (prove)\nusing this:\n  2 \\<le> n\n  next_candidates 0 = (jj, is)\n\ngoal (1 subgoal):\n 1. (if n < 2 then False\n     else case next_candidates 0 of\n          (j, is) \\<Rightarrow> prime_nat_main n j is) =\n    prime_nat_main n jj is", "by auto"], ["proof (state)\nthis:\n  prime_nat n = prime_nat_main n jj is\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow> prime_nat n = prime n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_nat n = prime n", "using prime_nat_main[OF refl le_refl n _ _ jj cann(1-3) sub res] cann(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>2 \\<le> j; j < 2\\<rbrakk>\n              \\<Longrightarrow> \\<not> j dvd n;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < jj; prime j\\<rbrakk>\n      \\<Longrightarrow> j \\<in> set is\\<rbrakk>\n  \\<Longrightarrow> prime_nat n = prime n\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n\ngoal (1 subgoal):\n 1. prime_nat n = prime n", "by auto"], ["proof (state)\nthis:\n  prime_nat n = prime n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_factorization_nat: fixes n :: nat\n  defines \"pf \\<equiv> prime_factorization_nat n\"\n  shows \"Ball (set pf) prime\"\n  and \"n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n\"\n  and \"n = 0 \\<Longrightarrow> pf = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set pf) prime &&&\n    (n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n) &&&\n    (n = 0 \\<Longrightarrow> pf = [])", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. Ball (set pf) prime\n 2. n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n\n 3. n = 0 \\<Longrightarrow> pf = []", "note pf = pf_def[unfolded prime_factorization_nat_def]"], ["proof (state)\nthis:\n  pf \\<equiv>\n  rev (if n < 2 then []\n       else case next_candidates 0 of\n            (j, is) \\<Rightarrow> prime_factorization_nat_main n j is [])\n\ngoal (3 subgoals):\n 1. Ball (set pf) prime\n 2. n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n\n 3. n = 0 \\<Longrightarrow> pf = []", "have \"Ball (set pf) prime \\<and> (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and> (n = 0 \\<longrightarrow> pf = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "proof (cases \"n < 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])\n 2. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "case True"], ["proof (state)\nthis:\n  n < 2\n\ngoal (2 subgoals):\n 1. n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])\n 2. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "thus ?thesis"], ["proof (prove)\nusing this:\n  n < 2\n\ngoal (1 subgoal):\n 1. Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "using pf"], ["proof (prove)\nusing this:\n  n < 2\n  pf \\<equiv>\n  rev (if n < 2 then []\n       else case next_candidates 0 of\n            (j, is) \\<Rightarrow> prime_factorization_nat_main n j is [])\n\ngoal (1 subgoal):\n 1. Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "by auto"], ["proof (state)\nthis:\n  Ball (set pf) prime \\<and>\n  (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n  (n = 0 \\<longrightarrow> pf = [])\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "case False"], ["proof (state)\nthis:\n  \\<not> n < 2\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "hence n: \"n \\<ge> 2\""], ["proof (prove)\nusing this:\n  \\<not> n < 2\n\ngoal (1 subgoal):\n 1. 2 \\<le> n", "by auto"], ["proof (state)\nthis:\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "obtain jj \"is\" where can: \"next_candidates 0 = (jj,is)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>jj is.\n        next_candidates 0 = (jj, is) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  next_candidates 0 = (jj, is)\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "from next_candidates[OF this candidate_invariant_0]"], ["proof (chain)\npicking this:\n  candidate_invariant jj\n  sorted is\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n  0 < jj", "have cann: \"sorted is\" \"distinct is\" \"candidate_invariant jj\" \n      \"{i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\"\n      \"set is \\<subseteq> {2..} \\<inter> {0..<jj}\" \"distinct is\" \"is \\<noteq> []\""], ["proof (prove)\nusing this:\n  candidate_invariant jj\n  sorted is\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n  0 < jj\n\ngoal (1 subgoal):\n 1. (sorted is &&& distinct is &&& candidate_invariant jj) &&&\n    ({i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is &&&\n     set is \\<subseteq> {2..} \\<inter> {0..<jj}) &&&\n    distinct is &&& is \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  sorted is\n  distinct is\n  candidate_invariant jj\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "from cann"], ["proof (chain)\npicking this:\n  sorted is\n  distinct is\n  candidate_invariant jj\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []", "have sub: \"set is \\<subseteq> {2..<jj}\""], ["proof (prove)\nusing this:\n  sorted is\n  distinct is\n  candidate_invariant jj\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n  set is \\<subseteq> {2..} \\<inter> {0..<jj}\n  distinct is\n  is \\<noteq> []\n\ngoal (1 subgoal):\n 1. set is \\<subseteq> {2..<jj}", "by force"], ["proof (state)\nthis:\n  set is \\<subseteq> {2..<jj}\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "with \\<open>is \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  is \\<noteq> []\n  set is \\<subseteq> {2..<jj}", "have jj: \"jj \\<ge> 2\""], ["proof (prove)\nusing this:\n  is \\<noteq> []\n  set is \\<subseteq> {2..<jj}\n\ngoal (1 subgoal):\n 1. 2 \\<le> jj", "by (cases \"is\", auto)"], ["proof (state)\nthis:\n  2 \\<le> jj\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "let ?pfm = \"prime_factorization_nat_main n jj is []\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "from pf[unfolded can] False"], ["proof (chain)\npicking this:\n  pf \\<equiv>\n  rev (if n < 2 then []\n       else case (jj, is) of\n            (j, is) \\<Rightarrow> prime_factorization_nat_main n j is [])\n  \\<not> n < 2", "have res: \"pf = rev ?pfm\""], ["proof (prove)\nusing this:\n  pf \\<equiv>\n  rev (if n < 2 then []\n       else case (jj, is) of\n            (j, is) \\<Rightarrow> prime_factorization_nat_main n j is [])\n  \\<not> n < 2\n\ngoal (1 subgoal):\n 1. pf = rev (prime_factorization_nat_main n jj is [])", "by simp"], ["proof (state)\nthis:\n  pf = rev (prime_factorization_nat_main n jj is [])\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "from prime_factorization_nat_main[OF refl le_refl n _ _ jj cann(1-3) sub refl, of Nil] cann(4)"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>2 \\<le> j; j < 2\\<rbrakk>\n              \\<Longrightarrow> \\<not> j dvd n;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < jj; prime j\\<rbrakk>\n      \\<Longrightarrow> j \\<in> set is\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factorization_nat_main n jj is [] =\n                       qs @ [] \\<and>\n                       Ball (set qs) prime \\<and> n = prod_list qs\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is", "have \"Ball (set ?pfm) prime\" \"n = prod_list ?pfm\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>j.\n              \\<lbrakk>2 \\<le> j; j < 2\\<rbrakk>\n              \\<Longrightarrow> \\<not> j dvd n;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < jj; prime j\\<rbrakk>\n      \\<Longrightarrow> j \\<in> set is\\<rbrakk>\n  \\<Longrightarrow> \\<exists>qs.\n                       prime_factorization_nat_main n jj is [] =\n                       qs @ [] \\<and>\n                       Ball (set qs) prime \\<and> n = prod_list qs\n  {i. prime i \\<and> 0 \\<le> i \\<and> i < jj} \\<subseteq> set is\n\ngoal (1 subgoal):\n 1. Ball (set (prime_factorization_nat_main n jj is [])) prime &&&\n    n = prod_list (prime_factorization_nat_main n jj is [])", "by auto"], ["proof (state)\nthis:\n  Ball (set (prime_factorization_nat_main n jj is [])) prime\n  n = prod_list (prime_factorization_nat_main n jj is [])\n\ngoal (1 subgoal):\n 1. \\<not> n < 2 \\<Longrightarrow>\n    Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "thus ?thesis"], ["proof (prove)\nusing this:\n  Ball (set (prime_factorization_nat_main n jj is [])) prime\n  n = prod_list (prime_factorization_nat_main n jj is [])\n\ngoal (1 subgoal):\n 1. Ball (set pf) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n    (n = 0 \\<longrightarrow> pf = [])", "unfolding res"], ["proof (prove)\nusing this:\n  Ball (set (prime_factorization_nat_main n jj is [])) prime\n  n = prod_list (prime_factorization_nat_main n jj is [])\n\ngoal (1 subgoal):\n 1. Ball (set (rev (prime_factorization_nat_main n jj is []))) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow>\n     prod_list (rev (prime_factorization_nat_main n jj is [])) = n) \\<and>\n    (n = 0 \\<longrightarrow>\n     rev (prime_factorization_nat_main n jj is []) = [])", "using n"], ["proof (prove)\nusing this:\n  Ball (set (prime_factorization_nat_main n jj is [])) prime\n  n = prod_list (prime_factorization_nat_main n jj is [])\n  2 \\<le> n\n\ngoal (1 subgoal):\n 1. Ball (set (rev (prime_factorization_nat_main n jj is []))) prime \\<and>\n    (n \\<noteq> 0 \\<longrightarrow>\n     prod_list (rev (prime_factorization_nat_main n jj is [])) = n) \\<and>\n    (n = 0 \\<longrightarrow>\n     rev (prime_factorization_nat_main n jj is []) = [])", "by auto"], ["proof (state)\nthis:\n  Ball (set pf) prime \\<and>\n  (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n  (n = 0 \\<longrightarrow> pf = [])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Ball (set pf) prime \\<and>\n  (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n  (n = 0 \\<longrightarrow> pf = [])\n\ngoal (3 subgoals):\n 1. Ball (set pf) prime\n 2. n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n\n 3. n = 0 \\<Longrightarrow> pf = []", "thus \"Ball (set pf) prime\" \"n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n\" \"n = 0 \\<Longrightarrow> pf = []\""], ["proof (prove)\nusing this:\n  Ball (set pf) prime \\<and>\n  (n \\<noteq> 0 \\<longrightarrow> prod_list pf = n) \\<and>\n  (n = 0 \\<longrightarrow> pf = [])\n\ngoal (1 subgoal):\n 1. Ball (set pf) prime &&&\n    (n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n) &&&\n    (n = 0 \\<Longrightarrow> pf = [])", "by auto"], ["proof (state)\nthis:\n  Ball (set pf) prime\n  n \\<noteq> 0 \\<Longrightarrow> prod_list pf = n\n  n = 0 \\<Longrightarrow> pf = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_mset_multiset_prime_factorization_nat [simp]: \n  \"(x::nat) \\<noteq> 0 \\<Longrightarrow> prod_mset (prime_factorization x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    \\<Prod>\\<^sub># (prime_factorization x) = x", "by simp"], ["", "(* TODO Move *)"], ["", "lemma prime_factorization_unique'':\n  fixes A :: \"'a :: {factorial_semiring_multiplicative} multiset\"\n  assumes \"\\<And>p. p \\<in># A \\<Longrightarrow> prime p\"\n  assumes \"prod_mset A = normalize x\"\n  shows   \"prime_factorization x = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factorization x = A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prime_factorization x = A", "have \"prod_mset A \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># A \\<noteq> (0::'a)", "by (auto dest: assms(1))"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># A \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. prime_factorization x = A", "with assms(2)"], ["proof (chain)\npicking this:\n  \\<Prod>\\<^sub># A = normalize x\n  \\<Prod>\\<^sub># A \\<noteq> (0::'a)", "have \"x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># A = normalize x\n  \\<Prod>\\<^sub># A \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. x \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. prime_factorization x = A", "hence \"prod_mset (prime_factorization x) = prod_mset A\""], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (prime_factorization x) = \\<Prod>\\<^sub># A", "by (simp add: assms prod_mset_prime_factorization)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># (prime_factorization x) = \\<Prod>\\<^sub># A\n\ngoal (1 subgoal):\n 1. prime_factorization x = A", "with assms"], ["proof (chain)\npicking this:\n  ?p \\<in># A \\<Longrightarrow> prime ?p\n  \\<Prod>\\<^sub># A = normalize x\n  \\<Prod>\\<^sub># (prime_factorization x) = \\<Prod>\\<^sub># A", "show ?thesis"], ["proof (prove)\nusing this:\n  ?p \\<in># A \\<Longrightarrow> prime ?p\n  \\<Prod>\\<^sub># A = normalize x\n  \\<Prod>\\<^sub># (prime_factorization x) = \\<Prod>\\<^sub># A\n\ngoal (1 subgoal):\n 1. prime_factorization x = A", "by (intro prime_factorization_unique') auto"], ["proof (state)\nthis:\n  prime_factorization x = A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiset_prime_factorization_nat_correct:\n  \"prime_factorization n = mset (prime_factorization_nat n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factorization n = mset (prime_factorization_nat n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prime_factorization n = mset (prime_factorization_nat n)", "note pf = prime_factorization_nat[of n]"], ["proof (state)\nthis:\n  Ball (set (prime_factorization_nat n)) prime\n  n \\<noteq> 0 \\<Longrightarrow> prod_list (prime_factorization_nat n) = n\n  n = 0 \\<Longrightarrow> prime_factorization_nat n = []\n\ngoal (1 subgoal):\n 1. prime_factorization n = mset (prime_factorization_nat n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factorization n = mset (prime_factorization_nat n)", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. prime_factorization n = mset (prime_factorization_nat n)", "using pf(3)"], ["proof (prove)\nusing this:\n  n = 0\n  n = 0 \\<Longrightarrow> prime_factorization_nat n = []\n\ngoal (1 subgoal):\n 1. prime_factorization n = mset (prime_factorization_nat n)", "by simp"], ["proof (state)\nthis:\n  prime_factorization n = mset (prime_factorization_nat n)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)", "note pf = pf(1) pf(2)[OF False]"], ["proof (state)\nthis:\n  Ball (set (prime_factorization_nat n)) prime\n  prod_list (prime_factorization_nat n) = n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    prime_factorization n = mset (prime_factorization_nat n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factorization n = mset (prime_factorization_nat n)", "proof (rule prime_factorization_unique'')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in># mset (prime_factorization_nat n) \\<Longrightarrow> prime p\n 2. \\<Prod>\\<^sub># (mset (prime_factorization_nat n)) = normalize n", "show \"prime p\" if \"p \\<in># mset (prime_factorization_nat n)\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p", "using pf(1) that"], ["proof (prove)\nusing this:\n  Ball (set (prime_factorization_nat n)) prime\n  p \\<in># mset (prime_factorization_nat n)\n\ngoal (1 subgoal):\n 1. prime p", "by simp"], ["proof (state)\nthis:\n  ?p \\<in># mset (prime_factorization_nat n) \\<Longrightarrow> prime ?p\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (mset (prime_factorization_nat n)) = normalize n", "let ?l = \"\\<Prod>i\\<in>#prime_factorization n. i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (mset (prime_factorization_nat n)) = normalize n", "let ?r = \"\\<Prod>i\\<in>#mset (prime_factorization_nat n). i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (mset (prime_factorization_nat n)) = normalize n", "show \"prod_mset (mset (prime_factorization_nat n)) = normalize n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (mset (prime_factorization_nat n)) = normalize n", "by (simp add: pf(2) prod_mset_prod_list)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># (mset (prime_factorization_nat n)) = normalize n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime_factorization n = mset (prime_factorization_nat n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime_factorization n = mset (prime_factorization_nat n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiset_prime_factorization_code[code_unfold]: \n  \"prime_factorization = (\\<lambda>n. mset (prime_factorization_nat n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factorization = (\\<lambda>n. mset (prime_factorization_nat n))", "by (intro ext multiset_prime_factorization_nat_correct)"], ["", "lemma divisors_nat: \n  \"n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}\" \"distinct (divisors_nat n)\" \"divisors_nat 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}) &&&\n    distinct (divisors_nat n) &&& divisors_nat 0 = []", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}\n 2. distinct (divisors_nat n)\n 3. divisors_nat 0 = []", "show \"distinct (divisors_nat n)\" \"divisors_nat 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (divisors_nat n) &&& divisors_nat 0 = []", "unfolding divisors_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (if n = 0 then []\n      else remdups_adj\n            (sort\n              (map prod_list (subseqs (prime_factorization_nat n))))) &&&\n    (if 0 = 0 then []\n     else remdups_adj\n           (sort (map prod_list (subseqs (prime_factorization_nat 0))))) =\n    []", "by auto"], ["proof (state)\nthis:\n  distinct (divisors_nat n)\n  divisors_nat 0 = []\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "assume n: \"n \\<noteq> 0\""], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "from n"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"n > 0\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < n", "by auto"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "{"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "have \"(x dvd n) = (x \\<noteq> 0 \\<and> (\\<forall>p. multiplicity p x \\<le> multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "proof (cases \"x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow>\n    (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))\n 2. x \\<noteq> 0 \\<Longrightarrow>\n    (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow>\n    (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))\n 2. x \\<noteq> 0 \\<Longrightarrow>\n    (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "with \\<open>n > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < n\n  x \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < n\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "by (auto simp: dvd_multiplicity_eq)"], ["proof (state)\nthis:\n  (x dvd n) =\n  (x \\<noteq> 0 \\<and>\n   (\\<forall>p. multiplicity p x \\<le> multiplicity p n))\n\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow>\n    (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow>\n    (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "case True"], ["proof (state)\nthis:\n  x = 0\n\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow>\n    (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "with n"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  x = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  x = 0\n\ngoal (1 subgoal):\n 1. (x dvd n) =\n    (x \\<noteq> 0 \\<and>\n     (\\<forall>p. multiplicity p x \\<le> multiplicity p n))", "by auto"], ["proof (state)\nthis:\n  (x dvd n) =\n  (x \\<noteq> 0 \\<and>\n   (\\<forall>p. multiplicity p x \\<le> multiplicity p n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x dvd n) =\n  (x \\<noteq> 0 \\<and>\n   (\\<forall>p. multiplicity p x \\<le> multiplicity p n))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "}"], ["proof (state)\nthis:\n  (?x2 dvd n) =\n  (?x2 \\<noteq> 0 \\<and>\n   (\\<forall>p. multiplicity p ?x2 \\<le> multiplicity p n))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "note dvd = this"], ["proof (state)\nthis:\n  (?x2 dvd n) =\n  (?x2 \\<noteq> 0 \\<and>\n   (\\<forall>p. multiplicity p ?x2 \\<le> multiplicity p n))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "let ?dn = \"set (divisors_nat n)\""], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "let ?mf = \"\\<lambda> (n :: nat). prime_factorization n\""], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "have \"?dn = prod_list ` set (subseqs (prime_factorization_nat n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (divisors_nat n) =\n    prod_list ` set (subseqs (prime_factorization_nat n))", "unfolding divisors_nat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (if n = 0 then []\n         else remdups_adj\n               (sort\n                 (map prod_list (subseqs (prime_factorization_nat n))))) =\n    prod_list ` set (subseqs (prime_factorization_nat n))", "using n"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. set (if n = 0 then []\n         else remdups_adj\n               (sort\n                 (map prod_list (subseqs (prime_factorization_nat n))))) =\n    prod_list ` set (subseqs (prime_factorization_nat n))", "by auto"], ["proof (state)\nthis:\n  set (divisors_nat n) =\n  prod_list ` set (subseqs (prime_factorization_nat n))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "also"], ["proof (state)\nthis:\n  set (divisors_nat n) =\n  prod_list ` set (subseqs (prime_factorization_nat n))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "have \"\\<dots> = prod_mset ` mset ` set (subseqs (prime_factorization_nat n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list ` set (subseqs (prime_factorization_nat n)) =\n    \\<Prod>\\<^sub># ` mset ` set (subseqs (prime_factorization_nat n))", "by (force simp: prod_mset_prod_list)"], ["proof (state)\nthis:\n  prod_list ` set (subseqs (prime_factorization_nat n)) =\n  \\<Prod>\\<^sub># ` mset ` set (subseqs (prime_factorization_nat n))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "also"], ["proof (state)\nthis:\n  prod_list ` set (subseqs (prime_factorization_nat n)) =\n  \\<Prod>\\<^sub># ` mset ` set (subseqs (prime_factorization_nat n))\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "have \"mset ` set (subseqs (prime_factorization_nat n))\n    = { ps. ps \\<subseteq># mset (prime_factorization_nat n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset ` set (subseqs (prime_factorization_nat n)) =\n    {ps. ps \\<subseteq># mset (prime_factorization_nat n)}", "unfolding multiset_of_subseqs"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ps. ps \\<subseteq># mset (prime_factorization_nat n)} =\n    {ps. ps \\<subseteq># mset (prime_factorization_nat n)}", "by simp"], ["proof (state)\nthis:\n  mset ` set (subseqs (prime_factorization_nat n)) =\n  {ps. ps \\<subseteq># mset (prime_factorization_nat n)}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "also"], ["proof (state)\nthis:\n  mset ` set (subseqs (prime_factorization_nat n)) =\n  {ps. ps \\<subseteq># mset (prime_factorization_nat n)}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "have \"\\<dots> = { ps. ps \\<subseteq># ?mf n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ps. ps \\<subseteq># mset (prime_factorization_nat n)} =\n    {ps. ps \\<subseteq># prime_factorization n}", "thm multiset_prime_factorization_code[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ps. ps \\<subseteq># mset (prime_factorization_nat n)} =\n    {ps. ps \\<subseteq># prime_factorization n}", "unfolding multiset_prime_factorization_nat_correct[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {ps. ps \\<subseteq># prime_factorization n} =\n    {ps. ps \\<subseteq># prime_factorization n}", "by auto"], ["proof (state)\nthis:\n  {ps. ps \\<subseteq># mset (prime_factorization_nat n)} =\n  {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "also"], ["proof (state)\nthis:\n  {ps. ps \\<subseteq># mset (prime_factorization_nat n)} =\n  {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "have \"prod_mset ` \\<dots> = {p. p dvd n}\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "assume \"x dvd n\""], ["proof (state)\nthis:\n  x dvd n\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "from this[unfolded dvd]"], ["proof (chain)\npicking this:\n  x \\<noteq> 0 \\<and> (\\<forall>p. multiplicity p x \\<le> multiplicity p n)", "have x: \"x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0 \\<and> (\\<forall>p. multiplicity p x \\<le> multiplicity p n)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "from \\<open>x dvd n\\<close> \\<open>x \\<noteq> 0\\<close> \\<open>n \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  x dvd n\n  x \\<noteq> 0\n  n \\<noteq> 0", "have sub: \"?mf x \\<subseteq># ?mf n\""], ["proof (prove)\nusing this:\n  x dvd n\n  x \\<noteq> 0\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prime_factorization x \\<subseteq># prime_factorization n", "by (subst prime_factorization_subset_iff_dvd) auto"], ["proof (state)\nthis:\n  prime_factorization x \\<subseteq># prime_factorization n\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "have \"prod_mset (?mf x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (prime_factorization x) = x", "using x"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># (prime_factorization x) = x", "by (simp add: prime_factorization_nat)"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># (prime_factorization x) = x\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "hence \"x \\<in> ?l\""], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># (prime_factorization x) = x\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}", "using sub"], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># (prime_factorization x) = x\n  prime_factorization x \\<subseteq># prime_factorization n\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}", "by force"], ["proof (state)\nthis:\n  x \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "}"], ["proof (state)\nthis:\n  ?x2 dvd n \\<Longrightarrow>\n  ?x2 \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "moreover"], ["proof (state)\nthis:\n  ?x2 dvd n \\<Longrightarrow>\n  ?x2 \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "{"], ["proof (state)\nthis:\n  ?x2 dvd n \\<Longrightarrow>\n  ?x2 \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "assume \"x \\<in> ?l\""], ["proof (state)\nthis:\n  x \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}", "obtain ps where x: \"x = prod_mset ps\" and sub: \"ps \\<subseteq># ?mf n\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n\ngoal (1 subgoal):\n 1. (\\<And>ps.\n        \\<lbrakk>x = \\<Prod>\\<^sub># ps;\n         ps \\<subseteq># prime_factorization n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = \\<Prod>\\<^sub># ps\n  ps \\<subseteq># prime_factorization n\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "have \"x dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x dvd n", "using prod_mset_subset_imp_dvd[OF sub] n x"], ["proof (prove)\nusing this:\n  \\<Prod>\\<^sub># ps dvd \\<Prod>\\<^sub># (prime_factorization n)\n  n \\<noteq> 0\n  x = \\<Prod>\\<^sub># ps\n\ngoal (1 subgoal):\n 1. x dvd n", "by simp"], ["proof (state)\nthis:\n  x dvd n\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "}"], ["proof (state)\nthis:\n  ?x2\n  \\<in> \\<Prod>\\<^sub># `\n        {ps. ps \\<subseteq># prime_factorization n} \\<Longrightarrow>\n  ?x2 dvd n\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "ultimately"], ["proof (chain)\npicking this:\n  ?x2 dvd n \\<Longrightarrow>\n  ?x2 \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n  ?x2\n  \\<in> \\<Prod>\\<^sub># `\n        {ps. ps \\<subseteq># prime_factorization n} \\<Longrightarrow>\n  ?x2 dvd n", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 dvd n \\<Longrightarrow>\n  ?x2 \\<in> \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n}\n  ?x2\n  \\<in> \\<Prod>\\<^sub># `\n        {ps. ps \\<subseteq># prime_factorization n} \\<Longrightarrow>\n  ?x2 dvd n\n\ngoal (1 subgoal):\n 1. \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n    {p. p dvd n}", "by blast"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n  {p. p dvd n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Prod>\\<^sub># ` {ps. ps \\<subseteq># prime_factorization n} =\n  {p. p dvd n}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat n) = {p. p dvd n}", "finally"], ["proof (chain)\npicking this:\n  set (divisors_nat n) = {p. p dvd n}", "show \"set (divisors_nat n) = {p. p dvd n}\""], ["proof (prove)\nusing this:\n  set (divisors_nat n) = {p. p dvd n}\n\ngoal (1 subgoal):\n 1. set (divisors_nat n) = {p. p dvd n}", "."], ["proof (state)\nthis:\n  set (divisors_nat n) = {p. p dvd n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma divisors_int_pos: \"x \\<noteq> 0 \\<Longrightarrow> set (divisors_int_pos x) = {i. i dvd x \\<and> i > 0}\" \"distinct (divisors_int_pos x)\"\n  \"divisors_int_pos 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<noteq> 0 \\<Longrightarrow>\n     set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}) &&&\n    distinct (divisors_int_pos x) &&& divisors_int_pos 0 = []", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}\n 2. distinct (divisors_int_pos x)\n 3. divisors_int_pos 0 = []", "show \"divisors_int_pos 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisors_int_pos 0 = []", "by code_simp"], ["proof (state)\nthis:\n  divisors_int_pos 0 = []\n\ngoal (2 subgoals):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}\n 2. distinct (divisors_int_pos x)", "show \"distinct (divisors_int_pos x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (divisors_int_pos x)", "unfolding divisors_int_pos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map int (divisors_nat (nat \\<bar>x\\<bar>)))", "using divisors_nat(2)[of \"nat (abs x)\"]"], ["proof (prove)\nusing this:\n  distinct (divisors_nat (nat \\<bar>x\\<bar>))\n\ngoal (1 subgoal):\n 1. distinct (map int (divisors_nat (nat \\<bar>x\\<bar>)))", "by (simp add: distinct_map inj_on_def)"], ["proof (state)\nthis:\n  distinct (divisors_int_pos x)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}", "assume x: \"x \\<noteq> 0\""], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}", "let ?x = \"nat (abs x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}", "from x"], ["proof (chain)\npicking this:\n  x \\<noteq> 0", "have xx: \"?x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. nat \\<bar>x\\<bar> \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  nat \\<bar>x\\<bar> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}", "from x"], ["proof (chain)\npicking this:\n  x \\<noteq> 0", "have 0: \"\\<And> y. y dvd x \\<Longrightarrow> y \\<noteq> 0\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>y. y dvd x \\<Longrightarrow> y \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  ?y dvd x \\<Longrightarrow> ?y \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}", "have id: \"int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "assume \"y \\<in> ?l\""], ["proof (state)\nthis:\n  y \\<in> int ` {p. int p dvd x}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "then"], ["proof (chain)\npicking this:\n  y \\<in> int ` {p. int p dvd x}", "obtain p where y: \"y = int p\" and dvd: \"int p dvd x\""], ["proof (prove)\nusing this:\n  y \\<in> int ` {p. int p dvd x}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>y = int p; int p dvd x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y = int p\n  int p dvd x\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "have \"y \\<in> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> {i. i dvd x \\<and> 0 < i}", "unfolding y"], ["proof (prove)\ngoal (1 subgoal):\n 1. int p \\<in> {i. i dvd x \\<and> 0 < i}", "using dvd 0[OF dvd]"], ["proof (prove)\nusing this:\n  int p dvd x\n  int p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. int p \\<in> {i. i dvd x \\<and> 0 < i}", "by auto"], ["proof (state)\nthis:\n  y \\<in> {i. i dvd x \\<and> 0 < i}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "}"], ["proof (state)\nthis:\n  ?y2 \\<in> int ` {p. int p dvd x} \\<Longrightarrow>\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "moreover"], ["proof (state)\nthis:\n  ?y2 \\<in> int ` {p. int p dvd x} \\<Longrightarrow>\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "{"], ["proof (state)\nthis:\n  ?y2 \\<in> int ` {p. int p dvd x} \\<Longrightarrow>\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "assume \"y \\<in> ?r\""], ["proof (state)\nthis:\n  y \\<in> {i. i dvd x \\<and> 0 < i}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "hence dvd: \"y dvd x\" and y0: \"y > 0\""], ["proof (prove)\nusing this:\n  y \\<in> {i. i dvd x \\<and> 0 < i}\n\ngoal (1 subgoal):\n 1. y dvd x &&& 0 < y", "by auto"], ["proof (state)\nthis:\n  y dvd x\n  0 < y\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "define n where \"n = nat y\""], ["proof (state)\nthis:\n  n = nat y\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "from y0"], ["proof (chain)\npicking this:\n  0 < y", "have y: \"y = int n\""], ["proof (prove)\nusing this:\n  0 < y\n\ngoal (1 subgoal):\n 1. y = int n", "unfolding n_def"], ["proof (prove)\nusing this:\n  0 < y\n\ngoal (1 subgoal):\n 1. y = int (nat y)", "by auto"], ["proof (state)\nthis:\n  y = int n\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "with dvd"], ["proof (chain)\npicking this:\n  y dvd x\n  y = int n", "have \"y \\<in> ?l\""], ["proof (prove)\nusing this:\n  y dvd x\n  y = int n\n\ngoal (1 subgoal):\n 1. y \\<in> int ` {p. int p dvd x}", "by auto"], ["proof (state)\nthis:\n  y \\<in> int ` {p. int p dvd x}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "}"], ["proof (state)\nthis:\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i} \\<Longrightarrow>\n  ?y2 \\<in> int ` {p. int p dvd x}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "ultimately"], ["proof (chain)\npicking this:\n  ?y2 \\<in> int ` {p. int p dvd x} \\<Longrightarrow>\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i}\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i} \\<Longrightarrow>\n  ?y2 \\<in> int ` {p. int p dvd x}", "show ?thesis"], ["proof (prove)\nusing this:\n  ?y2 \\<in> int ` {p. int p dvd x} \\<Longrightarrow>\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i}\n  ?y2 \\<in> {i. i dvd x \\<and> 0 < i} \\<Longrightarrow>\n  ?y2 \\<in> int ` {p. int p dvd x}\n\ngoal (1 subgoal):\n 1. int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}", "by blast"], ["proof (state)\nthis:\n  int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  int ` {p. int p dvd x} = {i. i dvd x \\<and> 0 < i}\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}", "from xx"], ["proof (chain)\npicking this:\n  nat \\<bar>x\\<bar> \\<noteq> 0", "show \"set (divisors_int_pos x) = {i. i dvd x \\<and> i > 0}\""], ["proof (prove)\nusing this:\n  nat \\<bar>x\\<bar> \\<noteq> 0\n\ngoal (1 subgoal):\n 1. set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}", "by (simp add: divisors_int_pos_def divisors_nat id)"], ["proof (state)\nthis:\n  set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma divisors_int: \"x \\<noteq> 0 \\<Longrightarrow> set (divisors_int x) = {i. i dvd x}\" \"distinct (divisors_int x)\"\n  \"divisors_int 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<noteq> 0 \\<Longrightarrow> set (divisors_int x) = {i. i dvd x}) &&&\n    distinct (divisors_int x) &&& divisors_int 0 = []", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. x \\<noteq> 0 \\<Longrightarrow> set (divisors_int x) = {i. i dvd x}\n 2. distinct (divisors_int x)\n 3. divisors_int 0 = []", "show \"divisors_int 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisors_int 0 = []", "by code_simp"], ["proof (state)\nthis:\n  divisors_int 0 = []\n\ngoal (2 subgoals):\n 1. x \\<noteq> 0 \\<Longrightarrow> set (divisors_int x) = {i. i dvd x}\n 2. distinct (divisors_int x)", "show \"distinct (divisors_int x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (divisors_int x)", "proof (cases \"x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> distinct (divisors_int x)\n 2. x \\<noteq> 0 \\<Longrightarrow> distinct (divisors_int x)", "case True"], ["proof (state)\nthis:\n  x = 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> distinct (divisors_int x)\n 2. x \\<noteq> 0 \\<Longrightarrow> distinct (divisors_int x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (divisors_int x)", "unfolding True"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (divisors_int 0)", "by code_simp"], ["proof (state)\nthis:\n  distinct (divisors_int x)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> distinct (divisors_int x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> distinct (divisors_int x)", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> distinct (divisors_int x)", "from divisors_int_pos(1)[OF False] divisors_int_pos(2)"], ["proof (chain)\npicking this:\n  set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}\n  distinct (divisors_int_pos ?x)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}\n  distinct (divisors_int_pos ?x)\n\ngoal (1 subgoal):\n 1. distinct (divisors_int x)", "unfolding divisors_int_def Let_def distinct_append distinct_map inj_on_def"], ["proof (prove)\nusing this:\n  set (divisors_int_pos x) = {i. i dvd x \\<and> 0 < i}\n  distinct (divisors_int_pos ?x)\n\ngoal (1 subgoal):\n 1. distinct (divisors_int_pos x) \\<and>\n    (distinct (divisors_int_pos x) \\<and>\n     (\\<forall>xa\\<in>set (divisors_int_pos x).\n         \\<forall>y\\<in>set (divisors_int_pos x).\n            - xa = - y \\<longrightarrow> xa = y)) \\<and>\n    set (divisors_int_pos x) \\<inter>\n    set (map uminus (divisors_int_pos x)) =\n    {}", "by auto"], ["proof (state)\nthis:\n  distinct (divisors_int x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct (divisors_int x)\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> set (divisors_int x) = {i. i dvd x}", "assume x: \"x \\<noteq> 0\""], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> set (divisors_int x) = {i. i dvd x}", "show \"set (divisors_int x) = {i. i dvd x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (divisors_int x) = {i. i dvd x}", "unfolding divisors_int_def Let_def set_append set_map divisors_int_pos(1)[OF x]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i dvd x \\<and> 0 < i} \\<union> uminus ` {i. i dvd x \\<and> 0 < i} =\n    {i. i dvd x}", "using x"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {i. i dvd x \\<and> 0 < i} \\<union> uminus ` {i. i dvd x \\<and> 0 < i} =\n    {i. i dvd x}", "by auto (metis (no_types, lifting) dvd_mult_div_cancel image_eqI linorder_neqE_linordered_idom \n  mem_Collect_eq minus_dvd_iff minus_minus mult_zero_left neg_less_0_iff_less)"], ["proof (state)\nthis:\n  set (divisors_int x) = {i. i dvd x}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition divisors_fun :: \"('a \\<Rightarrow> ('a :: {comm_monoid_mult,zero}) list) \\<Rightarrow> bool\" where\n  \"divisors_fun df \\<equiv> (\\<forall> x. x \\<noteq> 0 \\<longrightarrow> set (df x) = { d. d dvd x }) \\<and> (\\<forall> x. distinct (df x))\""], ["", "lemma divisors_funD: \"divisors_fun df \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> d dvd x \\<Longrightarrow> d \\<in> set (df x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>divisors_fun df; x \\<noteq> (0::'a); d dvd x\\<rbrakk>\n    \\<Longrightarrow> d \\<in> set (df x)", "unfolding divisors_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>x.\n                 x \\<noteq> (0::'a) \\<longrightarrow>\n                 set (df x) = {d. d dvd x}) \\<and>\n             (\\<forall>x. distinct (df x));\n     x \\<noteq> (0::'a); d dvd x\\<rbrakk>\n    \\<Longrightarrow> d \\<in> set (df x)", "by auto"], ["", "definition divisors_pos_fun :: \"('a \\<Rightarrow> ('a :: {comm_monoid_mult,zero,ord}) list) \\<Rightarrow> bool\" where\n  \"divisors_pos_fun df \\<equiv> (\\<forall> x. x \\<noteq> 0 \\<longrightarrow> set (df x) = { d. d dvd x \\<and> d > 0}) \\<and> (\\<forall> x. distinct (df x))\""], ["", "lemma divisors_pos_funD: \"divisors_pos_fun df \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> d dvd x \\<Longrightarrow> d > 0 \\<Longrightarrow> d \\<in> set (df x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>divisors_pos_fun df; x \\<noteq> (0::'a); d dvd x;\n     (0::'a) < d\\<rbrakk>\n    \\<Longrightarrow> d \\<in> set (df x)", "unfolding divisors_pos_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>x.\n                 x \\<noteq> (0::'a) \\<longrightarrow>\n                 set (df x) = {d. d dvd x \\<and> (0::'a) < d}) \\<and>\n             (\\<forall>x. distinct (df x));\n     x \\<noteq> (0::'a); d dvd x; (0::'a) < d\\<rbrakk>\n    \\<Longrightarrow> d \\<in> set (df x)", "by auto"], ["", "lemma divisors_fun_nat: \"divisors_fun divisors_nat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisors_fun divisors_nat", "unfolding divisors_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<noteq> 0 \\<longrightarrow>\n        set (divisors_nat x) = {d. d dvd x}) \\<and>\n    (\\<forall>x. distinct (divisors_nat x))", "using divisors_nat"], ["proof (prove)\nusing this:\n  ?n \\<noteq> 0 \\<Longrightarrow> set (divisors_nat ?n) = {p. p dvd ?n}\n  distinct (divisors_nat ?n)\n  divisors_nat 0 = []\n\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<noteq> 0 \\<longrightarrow>\n        set (divisors_nat x) = {d. d dvd x}) \\<and>\n    (\\<forall>x. distinct (divisors_nat x))", "by auto"], ["", "lemma divisors_fun_int: \"divisors_fun divisors_int\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisors_fun divisors_int", "unfolding divisors_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<noteq> 0 \\<longrightarrow>\n        set (divisors_int x) = {d. d dvd x}) \\<and>\n    (\\<forall>x. distinct (divisors_int x))", "using divisors_int"], ["proof (prove)\nusing this:\n  ?x \\<noteq> 0 \\<Longrightarrow> set (divisors_int ?x) = {i. i dvd ?x}\n  distinct (divisors_int ?x)\n  divisors_int 0 = []\n\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<noteq> 0 \\<longrightarrow>\n        set (divisors_int x) = {d. d dvd x}) \\<and>\n    (\\<forall>x. distinct (divisors_int x))", "by auto"], ["", "lemma divisors_pos_fun_int: \"divisors_pos_fun divisors_int_pos\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisors_pos_fun divisors_int_pos", "unfolding divisors_pos_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<noteq> 0 \\<longrightarrow>\n        set (divisors_int_pos x) = {d. d dvd x \\<and> 0 < d}) \\<and>\n    (\\<forall>x. distinct (divisors_int_pos x))", "using divisors_int_pos"], ["proof (prove)\nusing this:\n  ?x \\<noteq> 0 \\<Longrightarrow>\n  set (divisors_int_pos ?x) = {i. i dvd ?x \\<and> 0 < i}\n  distinct (divisors_int_pos ?x)\n  divisors_int_pos 0 = []\n\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<noteq> 0 \\<longrightarrow>\n        set (divisors_int_pos x) = {d. d dvd x \\<and> 0 < d}) \\<and>\n    (\\<forall>x. distinct (divisors_int_pos x))", "by auto"], ["", "end"]]}