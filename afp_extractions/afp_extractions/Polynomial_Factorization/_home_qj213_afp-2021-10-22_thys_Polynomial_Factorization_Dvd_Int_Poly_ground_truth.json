{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization/Dvd_Int_Poly.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization", "problem_names": ["lemma foldr_cong_plus: (* a more elaborate version of foldr_cong. Using f'=id, g'=id and s = set lst would give foldr_cong exactly. *)\n  assumes f_is_g : \"\\<And> a b c. b \\<in> s \\<Longrightarrow> f' a = f b (f' c) \\<Longrightarrow> g' a = g b (g' c)\" (* main assumption *)\n      and f'_inj : \"\\<And> a b. f' a = f' b \\<Longrightarrow> a = b\"\n      and f_bit_sur : \"\\<And> a b c. f' a = f b c \\<Longrightarrow> \\<exists> c'. c = f' c'\" (* should be provable by cases c *)\n      and lst_in_s : \"set lst \\<subseteq> s\" (* formulated like this to make induction easier *)\n  shows \"f' a = foldr f lst (f' b) \\<Longrightarrow> g' a = foldr g lst (g' b)\"", "lemma rat_int_poly_step_agree :\n  assumes \"coeff (pCons b c2) (degree q) mod coeff q (degree q) = 0\"\n  shows \"(rp a1,rp a2) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) b (rp c1,rp c2)\n         \\<longleftrightarrow> Some (a1,a2) = div_int_poly_step q b (Some (c1,c2))\"", "lemma int_step_then_rat_poly_step :\n  assumes Some:\"Some (a1,a2) = div_int_poly_step q b (Some (c1,c2))\"\n  shows \"(rp a1,rp a2) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) b (rp c1,rp c2)\"", "lemma is_int_rat_division : \n  assumes \"y \\<noteq> 0\"\n  shows \"is_int_rat (rat_of_int x / rat_of_int y) \\<longleftrightarrow> x mod y = 0\"", "lemma pCons_of_rp_contains_ints :\n  assumes \"rp a = pCons b c\"\n    shows \"is_int_rat b\"", "lemma rat_step_then_int_poly_step :\n  assumes \"q \\<noteq> 0\"\n      and \"(rp a1,rp a2) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) b2 (rp c1,rp c2)\"\n  shows \"Some (a1,a2) = div_int_poly_step q b2 (Some (c1,c2))\"", "lemma div_int_poly_step_surjective : \"Some a = div_int_poly_step q b c \\<Longrightarrow> \\<exists> c'. c = Some c'\"", "lemma  div_mod_int_poly_then_pdivmod:\n  assumes \"div_mod_int_poly p q = Some (r,m)\"\n  shows   \"(rp p div rp q, rp p mod rp q) = (rp r, rp m)\"\n    and   \"q \\<noteq> 0\"", "lemma div_rat_poly_step_sur:\n assumes \"(case a of (a, b) \\<Rightarrow> (rp a, rp b)) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) x pair\"\n   shows \"\\<exists>c'. pair = (case c' of (a, b) \\<Rightarrow> (rp a, rp b))\"", "lemma  pdivmod_then_div_mod_int_poly:\n  assumes q0: \"q \\<noteq> 0\" and \"(rp p div rp q, rp p mod rp q) = (rp r, rp m)\" \n  shows   \"div_mod_int_poly p q = Some (r,m)\"", "lemma div_int_then_rqp:\n  assumes \"div_int_poly p q = Some r\"\n  shows \"r * q = p\"\n    and \"q \\<noteq> 0\"", "lemma rqp_then_div_int:\n  assumes \"r * q = p\"\n      and q0:\"q \\<noteq> 0\"\n  shows \"div_int_poly p q = Some r\"", "lemma div_int_poly: \"(div_int_poly p q = Some r) \\<longleftrightarrow> (q \\<noteq> 0 \\<and> p = r * q)\"", "lemma dvd_int_poly[simp]: \"dvd_int_poly q p = (q dvd p)\"", "lemma dvd_int_poly_non_0[simp]: \"q \\<noteq> 0 \\<Longrightarrow> dvd_int_poly_non_0 q p = (q dvd p)\"", "lemma [code_unfold]: \"p dvd q \\<longleftrightarrow> dvd_int_poly p q\""], "translations": [["", "lemma foldr_cong_plus: (* a more elaborate version of foldr_cong. Using f'=id, g'=id and s = set lst would give foldr_cong exactly. *)\n  assumes f_is_g : \"\\<And> a b c. b \\<in> s \\<Longrightarrow> f' a = f b (f' c) \\<Longrightarrow> g' a = g b (g' c)\" (* main assumption *)\n      and f'_inj : \"\\<And> a b. f' a = f' b \\<Longrightarrow> a = b\"\n      and f_bit_sur : \"\\<And> a b c. f' a = f b c \\<Longrightarrow> \\<exists> c'. c = f' c'\" (* should be provable by cases c *)\n      and lst_in_s : \"set lst \\<subseteq> s\" (* formulated like this to make induction easier *)\n  shows \"f' a = foldr f lst (f' b) \\<Longrightarrow> g' a = foldr g lst (g' b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' a = foldr f lst (f' b) \\<Longrightarrow> g' a = foldr g lst (g' b)", "using lst_in_s"], ["proof (prove)\nusing this:\n  set lst \\<subseteq> s\n\ngoal (1 subgoal):\n 1. f' a = foldr f lst (f' b) \\<Longrightarrow> g' a = foldr g lst (g' b)", "proof (induct lst arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>f' ?a = foldr f xs (f' b); set xs \\<subseteq> s\\<rbrakk>\n  \\<Longrightarrow> g' ?a = foldr g xs (g' b)\n  f' a = foldr f (x # xs) (f' b)\n  set (x # xs) \\<subseteq> s\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "have prems: \"f' a = (f x \\<circ> foldr f xs) (f' b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' a = (f x \\<circ> foldr f xs) (f' b)", "using Cons.prems"], ["proof (prove)\nusing this:\n  f' a = foldr f (x # xs) (f' b)\n  set (x # xs) \\<subseteq> s\n\ngoal (1 subgoal):\n 1. f' a = (f x \\<circ> foldr f xs) (f' b)", "unfolding foldr_Cons"], ["proof (prove)\nusing this:\n  f' a = (f x \\<circ> foldr f xs) (f' b)\n  set (x # xs) \\<subseteq> s\n\ngoal (1 subgoal):\n 1. f' a = (f x \\<circ> foldr f xs) (f' b)", "by auto"], ["proof (state)\nthis:\n  f' a = (f x \\<circ> foldr f xs) (f' b)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "hence \"\\<exists> c'. f' c' = foldr f xs (f' b)\""], ["proof (prove)\nusing this:\n  f' a = (f x \\<circ> foldr f xs) (f' b)\n\ngoal (1 subgoal):\n 1. \\<exists>c'. f' c' = foldr f xs (f' b)", "using f_bit_sur"], ["proof (prove)\nusing this:\n  f' a = (f x \\<circ> foldr f xs) (f' b)\n  f' ?a = f ?b ?c \\<Longrightarrow> \\<exists>c'. ?c = f' c'\n\ngoal (1 subgoal):\n 1. \\<exists>c'. f' c' = foldr f xs (f' b)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>c'. f' c' = foldr f xs (f' b)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "then"], ["proof (chain)\npicking this:\n  \\<exists>c'. f' c' = foldr f xs (f' b)", "obtain c' where c'_def: \"f' c' = foldr f xs (f' b)\""], ["proof (prove)\nusing this:\n  \\<exists>c'. f' c' = foldr f xs (f' b)\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        f' c' = foldr f xs (f' b) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f' c' = foldr f xs (f' b)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "hence \"f' a = f x (f' c')\""], ["proof (prove)\nusing this:\n  f' c' = foldr f xs (f' b)\n\ngoal (1 subgoal):\n 1. f' a = f x (f' c')", "using prems"], ["proof (prove)\nusing this:\n  f' c' = foldr f xs (f' b)\n  f' a = (f x \\<circ> foldr f xs) (f' b)\n\ngoal (1 subgoal):\n 1. f' a = f x (f' c')", "by simp"], ["proof (state)\nthis:\n  f' a = f x (f' c')\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "hence \"g' a = g x (g' c')\""], ["proof (prove)\nusing this:\n  f' a = f x (f' c')\n\ngoal (1 subgoal):\n 1. g' a = g x (g' c')", "using f_is_g Cons.prems(2)"], ["proof (prove)\nusing this:\n  f' a = f x (f' c')\n  \\<lbrakk>?b \\<in> s; f' ?a = f ?b (f' ?c)\\<rbrakk>\n  \\<Longrightarrow> g' ?a = g ?b (g' ?c)\n  set (x # xs) \\<subseteq> s\n\ngoal (1 subgoal):\n 1. g' a = g x (g' c')", "by simp"], ["proof (state)\nthis:\n  g' a = g x (g' c')\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "also"], ["proof (state)\nthis:\n  g' a = g x (g' c')\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "have \"g' c' = foldr g xs (g' b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' c' = foldr g xs (g' b)", "using Cons.hyps[of c'] c'_def Cons.prems(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>f' c' = foldr f xs (f' b); set xs \\<subseteq> s\\<rbrakk>\n  \\<Longrightarrow> g' c' = foldr g xs (g' b)\n  f' c' = foldr f xs (f' b)\n  set (x # xs) \\<subseteq> s\n\ngoal (1 subgoal):\n 1. g' c' = foldr g xs (g' b)", "by auto"], ["proof (state)\nthis:\n  g' c' = foldr g xs (g' b)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "finally"], ["proof (chain)\npicking this:\n  g' a = g x (foldr g xs (g' b))", "have \"g' a = (g x \\<circ> foldr g xs) (g' b)\""], ["proof (prove)\nusing this:\n  g' a = g x (foldr g xs (g' b))\n\ngoal (1 subgoal):\n 1. g' a = (g x \\<circ> foldr g xs) (g' b)", "by simp"], ["proof (state)\nthis:\n  g' a = (g x \\<circ> foldr g xs) (g' b)\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)\n 2. \\<And>a lst aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>f' a = foldr f lst (f' b);\n                    set lst \\<subseteq> s\\<rbrakk>\n                   \\<Longrightarrow> g' a = foldr g lst (g' b);\n        f' aa = foldr f (a # lst) (f' b);\n        set (a # lst) \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' aa = foldr g (a # lst) (g' b)", "thus ?case"], ["proof (prove)\nusing this:\n  g' a = (g x \\<circ> foldr g xs) (g' b)\n\ngoal (1 subgoal):\n 1. g' a = foldr g (x # xs) (g' b)", "using foldr_Cons"], ["proof (prove)\nusing this:\n  g' a = (g x \\<circ> foldr g xs) (g' b)\n  foldr ?f (?x # ?xs) = ?f ?x \\<circ> foldr ?f ?xs\n\ngoal (1 subgoal):\n 1. g' a = foldr g (x # xs) (g' b)", "by simp"], ["proof (state)\nthis:\n  g' a = foldr g (x # xs) (g' b)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>f' a = foldr f [] (f' b); set [] \\<subseteq> s\\<rbrakk>\n       \\<Longrightarrow> g' a = foldr g [] (g' b)", "qed (insert f'_inj, auto)"], ["", "abbreviation (input) rp :: \"int poly \\<Rightarrow> rat poly\" where \n  \"rp \\<equiv> map_poly rat_of_int\""], ["", "(* fully transitive proof, right to left also holds without the precondition: \n     int_step_then_rat_poly_step\n   Left to right holds if q\\<noteq>0: rat_poly_step_then_int_step *)"], ["", "lemma rat_int_poly_step_agree :\n  assumes \"coeff (pCons b c2) (degree q) mod coeff q (degree q) = 0\"\n  shows \"(rp a1,rp a2) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) b (rp c1,rp c2)\n         \\<longleftrightarrow> Some (a1,a2) = div_int_poly_step q b (Some (c1,c2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "have coeffs: \"coeff (pCons b c2) (degree q) mod coeff q (degree q) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (pCons b c2) (degree q) mod lead_coeff q = 0", "using assms"], ["proof (prove)\nusing this:\n  coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. coeff (pCons b c2) (degree q) mod lead_coeff q = 0", "by auto"], ["proof (state)\nthis:\n  coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "let ?ri = \"rat_of_int\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "let ?withDiv1 = \"pCons (?ri (coeff (pCons b c2) (degree q) div coeff q (degree q))) (rp c1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "let ?withSls1 = \"pCons (coeff (pCons (?ri b) (rp c2)) (degree q) / coeff (rp q) (degree q)) (rp c1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "let ?ident1 = \"?withDiv1 = ?withSls1\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "let ?withDiv2 = \"rp (pCons b c2 - smult (coeff (pCons b c2) (degree q) div coeff q (degree q)) q)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "let ?withSls2 = \"pCons (?ri b) (rp c2) - smult (coeff (pCons (?ri b) (rp c2)) (degree q) / coeff (rp q) (degree q)) (rp q)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "let ?ident2 = \"?withDiv2 = ?withSls2\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "note simps = div_int_poly_step_def option.simps Let_def prod.simps"], ["proof (state)\nthis:\n  div_int_poly_step ?q =\n  (\\<lambda>a sro.\n      case sro of None \\<Rightarrow> None\n      | Some (s, r) \\<Rightarrow>\n          let ar = pCons a r;\n              (b, m) = divmod_int (coeff ar (degree ?q)) (lead_coeff ?q)\n          in if m = 0 then Some (pCons b s, ar - smult b ?q) else None)\n  (Some ?x2.0 = Some ?y2.0) = (?x2.0 = ?y2.0)\n  None \\<noteq> Some ?x2.0\n  Some ?x2.0 \\<noteq> None\n  (case None of None \\<Rightarrow> ?f1.0 | Some x \\<Rightarrow> ?f2.0 x) =\n  ?f1.0\n  (case Some ?x2.0 of None \\<Rightarrow> ?f1.0\n   | Some x \\<Rightarrow> ?f2.0 x) =\n  ?f2.0 ?x2.0\n  rec_option ?f1.0 ?f2.0 None = ?f1.0\n  rec_option ?f1.0 ?f2.0 (Some ?x2.0) = ?f2.0 ?x2.0\n  map_option ?f None = None\n  map_option ?f (Some ?x2.0) = Some (?f ?x2.0)\n  rel_option ?R None None\n  rel_option ?R (Some ?x2.0) (Some ?y2.0) = ?R ?x2.0 ?y2.0\n  \\<not> rel_option ?R None (Some ?y2.0)\n  \\<not> rel_option ?R (Some ?y2.0) None\n  set_option None = {}\n  set_option (Some ?x2.0) = {?x2.0}\n  Let ?s ?f \\<equiv> ?f ?s\n  ((?x1.0, ?x2.0) = (?y1.0, ?y2.0)) = (?x1.0 = ?y1.0 \\<and> ?x2.0 = ?y2.0)\n  (case (?x1.0, ?x2.0) of (x, xa) \\<Rightarrow> ?f x xa) = ?f ?x1.0 ?x2.0\n  old.rec_prod ?f1.0 (?a, ?b) = ?f1.0 ?a ?b\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "have id1:\"?ri (coeff (pCons b c2) (degree q) div coeff q (degree q)) = \n            ?ri (coeff (pCons b c2) (degree q)) / ?ri (coeff q (degree q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q) =\n    rat_of_int (coeff (pCons b c2) (degree q)) / rat_of_int (lead_coeff q)", "using coeffs"], ["proof (prove)\nusing this:\n  coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q) =\n    rat_of_int (coeff (pCons b c2) (degree q)) / rat_of_int (lead_coeff q)", "by auto"], ["proof (state)\nthis:\n  rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q) =\n  rat_of_int (coeff (pCons b c2) (degree q)) / rat_of_int (lead_coeff q)\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "have id2:\"?ident1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n     (of_int_poly c1) =\n    pCons\n     (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n      coeff (of_int_poly q) (degree q))\n     (of_int_poly c1)", "unfolding id1"], ["proof (prove)\ngoal (1 subgoal):\n 1. pCons\n     (rat_of_int (coeff (pCons b c2) (degree q)) /\n      rat_of_int (lead_coeff q))\n     (of_int_poly c1) =\n    pCons\n     (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n      coeff (of_int_poly q) (degree q))\n     (of_int_poly c1)", "by (simp, fold of_int_hom.coeff_map_poly_hom of_int_hom.map_poly_pCons_hom, simp)"], ["proof (state)\nthis:\n  pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n   (of_int_poly c1) =\n  pCons\n   (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n    coeff (of_int_poly q) (degree q))\n   (of_int_poly c1)\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "hence id3:\"?ident2\""], ["proof (prove)\nusing this:\n  pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n   (of_int_poly c1) =\n  pCons\n   (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n    coeff (of_int_poly q) (degree q))\n   (of_int_poly c1)\n\ngoal (1 subgoal):\n 1. of_int_poly\n     (pCons b c2 -\n      smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n    pCons (rat_of_int b) (of_int_poly c2) -\n    smult\n     (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n      coeff (of_int_poly q) (degree q))\n     (of_int_poly q)", "using id2"], ["proof (prove)\nusing this:\n  pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n   (of_int_poly c1) =\n  pCons\n   (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n    coeff (of_int_poly q) (degree q))\n   (of_int_poly c1)\n  pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n   (of_int_poly c1) =\n  pCons\n   (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n    coeff (of_int_poly q) (degree q))\n   (of_int_poly c1)\n\ngoal (1 subgoal):\n 1. of_int_poly\n     (pCons b c2 -\n      smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n    pCons (rat_of_int b) (of_int_poly c2) -\n    smult\n     (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n      coeff (of_int_poly q) (degree q))\n     (of_int_poly q)", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly\n   (pCons b c2 - smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n  pCons (rat_of_int b) (of_int_poly c2) -\n  smult\n   (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n    coeff (of_int_poly q) (degree q))\n   (of_int_poly q)\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "have c1:\"((rp (pCons (coeff (pCons b c2) (degree q) div coeff q (degree q)) c1)\n            ,rp (pCons b c2 - smult (coeff (pCons b c2) (degree q) div coeff q (degree q)) q))\n           = div_rat_poly_step (rp q) (?ri b) (rp c1,rp c2)) \\<longleftrightarrow> (?ident1 \\<and> ?ident2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((of_int_poly\n       (pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1),\n      of_int_poly\n       (pCons b c2 -\n        smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)) =\n     div_rat_poly_step (of_int_poly q) (rat_of_int b)\n      (of_int_poly c1, of_int_poly c2)) =\n    (pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n      (of_int_poly c1) =\n     pCons\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly c1) \\<and>\n     of_int_poly\n      (pCons b c2 -\n       smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n     pCons (rat_of_int b) (of_int_poly c2) -\n     smult\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly q))", "unfolding div_rat_poly_step_def simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_int_poly\n      (pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1) =\n     pCons\n      (coeff (pCons (rat_of_int b) (of_int_poly c2))\n        (degree (of_int_poly q)) /\n       lead_coeff (of_int_poly q))\n      (of_int_poly c1) \\<and>\n     of_int_poly\n      (pCons b c2 -\n       smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n     pCons (rat_of_int b) (of_int_poly c2) -\n     smult\n      (coeff (pCons (rat_of_int b) (of_int_poly c2))\n        (degree (of_int_poly q)) /\n       lead_coeff (of_int_poly q))\n      (of_int_poly q)) =\n    (pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n      (of_int_poly c1) =\n     pCons\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly c1) \\<and>\n     of_int_poly\n      (pCons b c2 -\n       smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n     pCons (rat_of_int b) (of_int_poly c2) -\n     smult\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly q))", "by (simp add: hom_distribs)"], ["proof (state)\nthis:\n  ((of_int_poly (pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1),\n    of_int_poly\n     (pCons b c2 -\n      smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)) =\n   div_rat_poly_step (of_int_poly q) (rat_of_int b)\n    (of_int_poly c1, of_int_poly c2)) =\n  (pCons (rat_of_int (coeff (pCons b c2) (degree q) div lead_coeff q))\n    (of_int_poly c1) =\n   pCons\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly c1) \\<and>\n   of_int_poly\n    (pCons b c2 -\n     smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n   pCons (rat_of_int b) (of_int_poly c2) -\n   smult\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly q))\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "have \"((rp a1, rp a2) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) b (rp c1, rp c2)) \\<longleftrightarrow>\n             (rp a1 = ?withSls1 \\<and> rp a2 = ?withSls2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (of_int_poly a1 =\n     pCons\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly c1) \\<and>\n     of_int_poly a2 =\n     pCons (rat_of_int b) (of_int_poly c2) -\n     smult\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly q))", "unfolding div_rat_poly_step_def simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     ((\\<lambda>a (s, r).\n          (pCons\n            (coeff (pCons a r) (degree (of_int_poly q)) /\n             lead_coeff (of_int_poly q))\n            s,\n           pCons a r -\n           smult\n            (coeff (pCons a r) (degree (of_int_poly q)) /\n             lead_coeff (of_int_poly q))\n            (of_int_poly q))) \\<circ>\n      rat_of_int)\n      b (of_int_poly c1, of_int_poly c2)) =\n    (of_int_poly a1 =\n     pCons\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly c1) \\<and>\n     of_int_poly a2 =\n     pCons (rat_of_int b) (of_int_poly c2) -\n     smult\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly q))", "by simp"], ["proof (state)\nthis:\n  ((of_int_poly a1, of_int_poly a2) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n    (of_int_poly c1, of_int_poly c2)) =\n  (of_int_poly a1 =\n   pCons\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly c1) \\<and>\n   of_int_poly a2 =\n   pCons (rat_of_int b) (of_int_poly c2) -\n   smult\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly q))\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "also"], ["proof (state)\nthis:\n  ((of_int_poly a1, of_int_poly a2) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n    (of_int_poly c1, of_int_poly c2)) =\n  (of_int_poly a1 =\n   pCons\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly c1) \\<and>\n   of_int_poly a2 =\n   pCons (rat_of_int b) (of_int_poly c2) -\n   smult\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly q))\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "have \"\\<dots> \\<longleftrightarrow>\n      ((a1 = pCons (coeff (pCons b c2) (degree q) div coeff q (degree q)) c1) \\<and>\n       (a2 = pCons b c2 - smult (coeff (pCons b c2) (degree q) div coeff q (degree q)) q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_int_poly a1 =\n     pCons\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly c1) \\<and>\n     of_int_poly a2 =\n     pCons (rat_of_int b) (of_int_poly c2) -\n     smult\n      (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n       coeff (of_int_poly q) (degree q))\n      (of_int_poly q)) =\n    (a1 = pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1 \\<and>\n     a2 =\n     pCons b c2 - smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)", "by (fold id2 id3 of_int_hom.map_poly_pCons_hom, unfold of_int_poly_hom.eq_iff, auto)"], ["proof (state)\nthis:\n  (of_int_poly a1 =\n   pCons\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly c1) \\<and>\n   of_int_poly a2 =\n   pCons (rat_of_int b) (of_int_poly c2) -\n   smult\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly q)) =\n  (a1 = pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1 \\<and>\n   a2 =\n   pCons b c2 - smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "also"], ["proof (state)\nthis:\n  (of_int_poly a1 =\n   pCons\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly c1) \\<and>\n   of_int_poly a2 =\n   pCons (rat_of_int b) (of_int_poly c2) -\n   smult\n    (coeff (pCons (rat_of_int b) (of_int_poly c2)) (degree q) /\n     coeff (of_int_poly q) (degree q))\n    (of_int_poly q)) =\n  (a1 = pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1 \\<and>\n   a2 =\n   pCons b c2 - smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "have c0:\"\\<dots> \\<longleftrightarrow> Some (a1,a2) = div_int_poly_step q b (Some (c1,c2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a1 = pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1 \\<and>\n     a2 =\n     pCons b c2 -\n     smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "unfolding divmod_int_def div_int_poly_step_def option.simps Let_def prod.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a1 = pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1 \\<and>\n     a2 =\n     pCons b c2 -\n     smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n    (Some (a1, a2) =\n     (if coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n      then Some\n            (pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1,\n             pCons b c2 -\n             smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)\n      else None))", "using coeffs"], ["proof (prove)\nusing this:\n  coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. (a1 = pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1 \\<and>\n     a2 =\n     pCons b c2 -\n     smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n    (Some (a1, a2) =\n     (if coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n      then Some\n            (pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1,\n             pCons b c2 -\n             smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)\n      else None))", "by (auto split: option.splits prod.splits if_splits)"], ["proof (state)\nthis:\n  (a1 = pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1 \\<and>\n   a2 =\n   pCons b c2 - smult (coeff (pCons b c2) (degree q) div lead_coeff q) q) =\n  (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "finally"], ["proof (chain)\npicking this:\n  ((of_int_poly a1, of_int_poly a2) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n    (of_int_poly c1, of_int_poly c2)) =\n  (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "show ?thesis"], ["proof (prove)\nusing this:\n  ((of_int_poly a1, of_int_poly a2) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n    (of_int_poly c1, of_int_poly c2)) =\n  (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))\n\ngoal (1 subgoal):\n 1. ((of_int_poly a1, of_int_poly a2) =\n     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n      (of_int_poly c1, of_int_poly c2)) =\n    (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))", "."], ["proof (state)\nthis:\n  ((of_int_poly a1, of_int_poly a2) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n    (of_int_poly c1, of_int_poly c2)) =\n  (Some (a1, a2) = div_int_poly_step q b (Some (c1, c2)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma int_step_then_rat_poly_step :\n  assumes Some:\"Some (a1,a2) = div_int_poly_step q b (Some (c1,c2))\"\n  shows \"(rp a1,rp a2) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) b (rp c1,rp c2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_int_poly a1, of_int_poly a2) =\n    (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n     (of_int_poly c1, of_int_poly c2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (of_int_poly a1, of_int_poly a2) =\n    (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n     (of_int_poly c1, of_int_poly c2)", "note simps = div_int_poly_step_def option.simps Let_def divmod_int_def prod.simps"], ["proof (state)\nthis:\n  div_int_poly_step ?q =\n  (\\<lambda>a sro.\n      case sro of None \\<Rightarrow> None\n      | Some (s, r) \\<Rightarrow>\n          let ar = pCons a r;\n              (b, m) = divmod_int (coeff ar (degree ?q)) (lead_coeff ?q)\n          in if m = 0 then Some (pCons b s, ar - smult b ?q) else None)\n  (Some ?x2.0 = Some ?y2.0) = (?x2.0 = ?y2.0)\n  None \\<noteq> Some ?x2.0\n  Some ?x2.0 \\<noteq> None\n  (case None of None \\<Rightarrow> ?f1.0 | Some x \\<Rightarrow> ?f2.0 x) =\n  ?f1.0\n  (case Some ?x2.0 of None \\<Rightarrow> ?f1.0\n   | Some x \\<Rightarrow> ?f2.0 x) =\n  ?f2.0 ?x2.0\n  rec_option ?f1.0 ?f2.0 None = ?f1.0\n  rec_option ?f1.0 ?f2.0 (Some ?x2.0) = ?f2.0 ?x2.0\n  map_option ?f None = None\n  map_option ?f (Some ?x2.0) = Some (?f ?x2.0)\n  rel_option ?R None None\n  rel_option ?R (Some ?x2.0) (Some ?y2.0) = ?R ?x2.0 ?y2.0\n  \\<not> rel_option ?R None (Some ?y2.0)\n  \\<not> rel_option ?R (Some ?y2.0) None\n  set_option None = {}\n  set_option (Some ?x2.0) = {?x2.0}\n  Let ?s ?f \\<equiv> ?f ?s\n  divmod_int ?n ?m = (?n div ?m, ?n mod ?m)\n  ((?x1.0, ?x2.0) = (?y1.0, ?y2.0)) = (?x1.0 = ?y1.0 \\<and> ?x2.0 = ?y2.0)\n  (case (?x1.0, ?x2.0) of (x, xa) \\<Rightarrow> ?f x xa) = ?f ?x1.0 ?x2.0\n  old.rec_prod ?f1.0 (?a, ?b) = ?f1.0 ?a ?b\n\ngoal (1 subgoal):\n 1. (of_int_poly a1, of_int_poly a2) =\n    (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n     (of_int_poly c1, of_int_poly c2)", "from Some[unfolded simps]"], ["proof (chain)\npicking this:\n  Some (a1, a2) =\n  (if coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n   then Some\n         (pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1,\n          pCons b c2 -\n          smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)\n   else None)", "have mod0: \"coeff (pCons b c2) (degree q) mod coeff q (degree q) = 0\""], ["proof (prove)\nusing this:\n  Some (a1, a2) =\n  (if coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n   then Some\n         (pCons (coeff (pCons b c2) (degree q) div lead_coeff q) c1,\n          pCons b c2 -\n          smult (coeff (pCons b c2) (degree q) div lead_coeff q) q)\n   else None)\n\ngoal (1 subgoal):\n 1. coeff (pCons b c2) (degree q) mod lead_coeff q = 0", "by (auto split: option.splits prod.splits if_splits)"], ["proof (state)\nthis:\n  coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. (of_int_poly a1, of_int_poly a2) =\n    (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n     (of_int_poly c1, of_int_poly c2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. (of_int_poly a1, of_int_poly a2) =\n    (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n     (of_int_poly c1, of_int_poly c2)", "using assms rat_int_poly_step_agree"], ["proof (prove)\nusing this:\n  coeff (pCons b c2) (degree q) mod lead_coeff q = 0\n  Some (a1, a2) = div_int_poly_step q b (Some (c1, c2))\n  coeff (pCons ?b ?c2.0) (degree ?q) mod lead_coeff ?q = 0 \\<Longrightarrow>\n  ((of_int_poly ?a1.0, of_int_poly ?a2.0) =\n   (div_rat_poly_step (of_int_poly ?q) \\<circ> rat_of_int) ?b\n    (of_int_poly ?c1.0, of_int_poly ?c2.0)) =\n  (Some (?a1.0, ?a2.0) = div_int_poly_step ?q ?b (Some (?c1.0, ?c2.0)))\n\ngoal (1 subgoal):\n 1. (of_int_poly a1, of_int_poly a2) =\n    (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n     (of_int_poly c1, of_int_poly c2)", "by auto"], ["proof (state)\nthis:\n  (of_int_poly a1, of_int_poly a2) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n   (of_int_poly c1, of_int_poly c2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_int_rat_division : \n  assumes \"y \\<noteq> 0\"\n  shows \"is_int_rat (rat_of_int x / rat_of_int y) \\<longleftrightarrow> x mod y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_int_rat (rat_of_int x / rat_of_int y) = (x mod y = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "assume \"is_int_rat (rat_of_int x / rat_of_int y)\""], ["proof (state)\nthis:\n  is_int_rat (rat_of_int x / rat_of_int y)\n\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "then"], ["proof (chain)\npicking this:\n  is_int_rat (rat_of_int x / rat_of_int y)", "obtain v where v_def:\"rat_of_int v = rat_of_int x / rat_of_int y\""], ["proof (prove)\nusing this:\n  is_int_rat (rat_of_int x / rat_of_int y)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        rat_of_int v = rat_of_int x / rat_of_int y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using int_of_rat(2) is_int_rat"], ["proof (prove)\nusing this:\n  is_int_rat (rat_of_int x / rat_of_int y)\n  ?z \\<in> \\<int> \\<Longrightarrow> rat_of_int (int_of_rat ?z) = ?z\n  is_int_rat ?x = (?x \\<in> \\<int>)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        rat_of_int v = rat_of_int x / rat_of_int y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  rat_of_int v = rat_of_int x / rat_of_int y\n\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "hence \"v = \\<lfloor>rat_of_int x / rat_of_int y\\<rfloor>\""], ["proof (prove)\nusing this:\n  rat_of_int v = rat_of_int x / rat_of_int y\n\ngoal (1 subgoal):\n 1. v = \\<lfloor>rat_of_int x / rat_of_int y\\<rfloor>", "by linarith"], ["proof (state)\nthis:\n  v = \\<lfloor>rat_of_int x / rat_of_int y\\<rfloor>\n\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "hence \"v * y = x - x mod y\""], ["proof (prove)\nusing this:\n  v = \\<lfloor>rat_of_int x / rat_of_int y\\<rfloor>\n\ngoal (1 subgoal):\n 1. v * y = x - x mod y", "using div_is_floor_divide_rat mod_div_equality_int"], ["proof (prove)\nusing this:\n  v = \\<lfloor>rat_of_int x / rat_of_int y\\<rfloor>\n  ?n div ?y = \\<lfloor>rat_of_int ?n / rat_of_int ?y\\<rfloor>\n  ?n div ?x * ?x = ?n - ?n mod ?x\n\ngoal (1 subgoal):\n 1. v * y = x - x mod y", "by simp"], ["proof (state)\nthis:\n  v * y = x - x mod y\n\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "hence \"rat_of_int v * rat_of_int y = rat_of_int x - rat_of_int (x mod y)\""], ["proof (prove)\nusing this:\n  v * y = x - x mod y\n\ngoal (1 subgoal):\n 1. rat_of_int v * rat_of_int y = rat_of_int x - rat_of_int (x mod y)", "by (fold hom_distribs, unfold of_int_hom.eq_iff)"], ["proof (state)\nthis:\n  rat_of_int v * rat_of_int y = rat_of_int x - rat_of_int (x mod y)\n\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "hence \"(rat_of_int x / rat_of_int y) * rat_of_int y = rat_of_int x - rat_of_int (x mod y)\""], ["proof (prove)\nusing this:\n  rat_of_int v * rat_of_int y = rat_of_int x - rat_of_int (x mod y)\n\ngoal (1 subgoal):\n 1. rat_of_int x / rat_of_int y * rat_of_int y =\n    rat_of_int x - rat_of_int (x mod y)", "using v_def"], ["proof (prove)\nusing this:\n  rat_of_int v * rat_of_int y = rat_of_int x - rat_of_int (x mod y)\n  rat_of_int v = rat_of_int x / rat_of_int y\n\ngoal (1 subgoal):\n 1. rat_of_int x / rat_of_int y * rat_of_int y =\n    rat_of_int x - rat_of_int (x mod y)", "by simp"], ["proof (state)\nthis:\n  rat_of_int x / rat_of_int y * rat_of_int y =\n  rat_of_int x - rat_of_int (x mod y)\n\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "hence \"rat_of_int x = rat_of_int x - rat_of_int (x mod y)\""], ["proof (prove)\nusing this:\n  rat_of_int x / rat_of_int y * rat_of_int y =\n  rat_of_int x - rat_of_int (x mod y)\n\ngoal (1 subgoal):\n 1. rat_of_int x = rat_of_int x - rat_of_int (x mod y)", "by (simp add: assms)"], ["proof (state)\nthis:\n  rat_of_int x = rat_of_int x - rat_of_int (x mod y)\n\ngoal (2 subgoals):\n 1. is_int_rat (rat_of_int x / rat_of_int y) \\<Longrightarrow> x mod y = 0\n 2. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "thus \"x mod y = 0\""], ["proof (prove)\nusing this:\n  rat_of_int x = rat_of_int x - rat_of_int (x mod y)\n\ngoal (1 subgoal):\n 1. x mod y = 0", "by simp"], ["proof (state)\nthis:\n  x mod y = 0\n\ngoal (1 subgoal):\n 1. x mod y = 0 \\<Longrightarrow> is_int_rat (rat_of_int x / rat_of_int y)", "qed (force)"], ["", "lemma pCons_of_rp_contains_ints :\n  assumes \"rp a = pCons b c\"\n    shows \"is_int_rat b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_int_rat b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_int_rat b", "have \"\\<And> b n. rp a = b \\<Longrightarrow> is_int_rat (coeff b n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b n. of_int_poly a = b \\<Longrightarrow> is_int_rat (coeff b n)", "by auto"], ["proof (state)\nthis:\n  of_int_poly a = ?b \\<Longrightarrow> is_int_rat (coeff ?b ?n)\n\ngoal (1 subgoal):\n 1. is_int_rat b", "hence \"rp a = pCons b c \\<Longrightarrow> is_int_rat (coeff (pCons b c) 0)\""], ["proof (prove)\nusing this:\n  of_int_poly a = ?b \\<Longrightarrow> is_int_rat (coeff ?b ?n)\n\ngoal (1 subgoal):\n 1. of_int_poly a = pCons b c \\<Longrightarrow>\n    is_int_rat (coeff (pCons b c) 0)", "."], ["proof (state)\nthis:\n  of_int_poly a = pCons b c \\<Longrightarrow>\n  is_int_rat (coeff (pCons b c) 0)\n\ngoal (1 subgoal):\n 1. is_int_rat b", "thus ?thesis"], ["proof (prove)\nusing this:\n  of_int_poly a = pCons b c \\<Longrightarrow>\n  is_int_rat (coeff (pCons b c) 0)\n\ngoal (1 subgoal):\n 1. is_int_rat b", "using assms"], ["proof (prove)\nusing this:\n  of_int_poly a = pCons b c \\<Longrightarrow>\n  is_int_rat (coeff (pCons b c) 0)\n  of_int_poly a = pCons b c\n\ngoal (1 subgoal):\n 1. is_int_rat b", "by auto"], ["proof (state)\nthis:\n  is_int_rat b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rat_step_then_int_poly_step :\n  assumes \"q \\<noteq> 0\"\n      and \"(rp a1,rp a2) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) b2 (rp c1,rp c2)\"\n  shows \"Some (a1,a2) = div_int_poly_step q b2 (Some (c1,c2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "let ?mustbeint = \"rat_of_int (coeff (pCons b2 c2) (degree q)) / rat_of_int (coeff q (degree q))\""], ["proof (state)\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "let ?mustbeint2 = \"coeff (pCons (rat_of_int b2) (rp c2)) (degree (rp q)) \n    / coeff (rp q) (degree (rp q))\""], ["proof (state)\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "have mustbeint : \"?mustbeint = ?mustbeint2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (coeff (pCons b2 c2) (degree q)) /\n    rat_of_int (lead_coeff q) =\n    coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q)", "by (fold hom_distribs of_int_hom.coeff_map_poly_hom, simp)"], ["proof (state)\nthis:\n  rat_of_int (coeff (pCons b2 c2) (degree q)) / rat_of_int (lead_coeff q) =\n  coeff (pCons (rat_of_int b2) (of_int_poly c2)) (degree (of_int_poly q)) /\n  lead_coeff (of_int_poly q)\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "note simps = div_int_poly_step_def option.simps Let_def divmod_int_def prod.simps"], ["proof (state)\nthis:\n  div_int_poly_step ?q =\n  (\\<lambda>a sro.\n      case sro of None \\<Rightarrow> None\n      | Some (s, r) \\<Rightarrow>\n          let ar = pCons a r;\n              (b, m) = divmod_int (coeff ar (degree ?q)) (lead_coeff ?q)\n          in if m = 0 then Some (pCons b s, ar - smult b ?q) else None)\n  (Some ?x2.0 = Some ?y2.0) = (?x2.0 = ?y2.0)\n  None \\<noteq> Some ?x2.0\n  Some ?x2.0 \\<noteq> None\n  (case None of None \\<Rightarrow> ?f1.0 | Some x \\<Rightarrow> ?f2.0 x) =\n  ?f1.0\n  (case Some ?x2.0 of None \\<Rightarrow> ?f1.0\n   | Some x \\<Rightarrow> ?f2.0 x) =\n  ?f2.0 ?x2.0\n  rec_option ?f1.0 ?f2.0 None = ?f1.0\n  rec_option ?f1.0 ?f2.0 (Some ?x2.0) = ?f2.0 ?x2.0\n  map_option ?f None = None\n  map_option ?f (Some ?x2.0) = Some (?f ?x2.0)\n  rel_option ?R None None\n  rel_option ?R (Some ?x2.0) (Some ?y2.0) = ?R ?x2.0 ?y2.0\n  \\<not> rel_option ?R None (Some ?y2.0)\n  \\<not> rel_option ?R (Some ?y2.0) None\n  set_option None = {}\n  set_option (Some ?x2.0) = {?x2.0}\n  Let ?s ?f \\<equiv> ?f ?s\n  divmod_int ?n ?m = (?n div ?m, ?n mod ?m)\n  ((?x1.0, ?x2.0) = (?y1.0, ?y2.0)) = (?x1.0 = ?y1.0 \\<and> ?x2.0 = ?y2.0)\n  (case (?x1.0, ?x2.0) of (x, xa) \\<Rightarrow> ?f x xa) = ?f ?x1.0 ?x2.0\n  old.rec_prod ?f1.0 (?a, ?b) = ?f1.0 ?a ?b\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "from assms leading_coeff_neq_0[of q]"], ["proof (chain)\npicking this:\n  q \\<noteq> 0\n  (of_int_poly a1, of_int_poly a2) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b2\n   (of_int_poly c1, of_int_poly c2)\n  q \\<noteq> 0 \\<Longrightarrow> lead_coeff q \\<noteq> 0", "have q0:\"coeff q (degree q) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  (of_int_poly a1, of_int_poly a2) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b2\n   (of_int_poly c1, of_int_poly c2)\n  q \\<noteq> 0 \\<Longrightarrow> lead_coeff q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. lead_coeff q \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  lead_coeff q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "have \"rp a1 = pCons ?mustbeint2 (rp c1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly a1 =\n    pCons\n     (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n       (degree (of_int_poly q)) /\n      lead_coeff (of_int_poly q))\n     (of_int_poly c1)", "using assms(2)"], ["proof (prove)\nusing this:\n  (of_int_poly a1, of_int_poly a2) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b2\n   (of_int_poly c1, of_int_poly c2)\n\ngoal (1 subgoal):\n 1. of_int_poly a1 =\n    pCons\n     (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n       (degree (of_int_poly q)) /\n      lead_coeff (of_int_poly q))\n     (of_int_poly c1)", "unfolding div_rat_poly_step_def"], ["proof (prove)\nusing this:\n  (of_int_poly a1, of_int_poly a2) =\n  ((\\<lambda>a (s, r).\n       let b = coeff (pCons a r) (degree (of_int_poly q)) /\n               lead_coeff (of_int_poly q)\n       in (pCons b s, pCons a r - smult b (of_int_poly q))) \\<circ>\n   rat_of_int)\n   b2 (of_int_poly c1, of_int_poly c2)\n\ngoal (1 subgoal):\n 1. of_int_poly a1 =\n    pCons\n     (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n       (degree (of_int_poly q)) /\n      lead_coeff (of_int_poly q))\n     (of_int_poly c1)", "by (simp add:div_int_poly_step_def Let_def)"], ["proof (state)\nthis:\n  of_int_poly a1 =\n  pCons\n   (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q))\n   (of_int_poly c1)\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "hence \"is_int_rat ?mustbeint2\""], ["proof (prove)\nusing this:\n  of_int_poly a1 =\n  pCons\n   (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q))\n   (of_int_poly c1)\n\ngoal (1 subgoal):\n 1. is_int_rat\n     (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n       (degree (of_int_poly q)) /\n      lead_coeff (of_int_poly q))", "unfolding div_rat_poly_step_def"], ["proof (prove)\nusing this:\n  of_int_poly a1 =\n  pCons\n   (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q))\n   (of_int_poly c1)\n\ngoal (1 subgoal):\n 1. is_int_rat\n     (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n       (degree (of_int_poly q)) /\n      lead_coeff (of_int_poly q))", "using pCons_of_rp_contains_ints"], ["proof (prove)\nusing this:\n  of_int_poly a1 =\n  pCons\n   (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q))\n   (of_int_poly c1)\n  of_int_poly ?a = pCons ?b ?c \\<Longrightarrow> is_int_rat ?b\n\ngoal (1 subgoal):\n 1. is_int_rat\n     (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n       (degree (of_int_poly q)) /\n      lead_coeff (of_int_poly q))", "by simp"], ["proof (state)\nthis:\n  is_int_rat\n   (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q))\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "hence \"is_int_rat ?mustbeint\""], ["proof (prove)\nusing this:\n  is_int_rat\n   (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q))\n\ngoal (1 subgoal):\n 1. is_int_rat\n     (rat_of_int (coeff (pCons b2 c2) (degree q)) /\n      rat_of_int (lead_coeff q))", "unfolding mustbeint"], ["proof (prove)\nusing this:\n  is_int_rat\n   (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n     (degree (of_int_poly q)) /\n    lead_coeff (of_int_poly q))\n\ngoal (1 subgoal):\n 1. is_int_rat\n     (coeff (pCons (rat_of_int b2) (of_int_poly c2))\n       (degree (of_int_poly q)) /\n      lead_coeff (of_int_poly q))", "by simp"], ["proof (state)\nthis:\n  is_int_rat\n   (rat_of_int (coeff (pCons b2 c2) (degree q)) / rat_of_int (lead_coeff q))\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "hence \"coeff (pCons b2 c2) (degree q) mod coeff q (degree q) = 0\""], ["proof (prove)\nusing this:\n  is_int_rat\n   (rat_of_int (coeff (pCons b2 c2) (degree q)) / rat_of_int (lead_coeff q))\n\ngoal (1 subgoal):\n 1. coeff (pCons b2 c2) (degree q) mod lead_coeff q = 0", "using is_int_rat_division q0"], ["proof (prove)\nusing this:\n  is_int_rat\n   (rat_of_int (coeff (pCons b2 c2) (degree q)) / rat_of_int (lead_coeff q))\n  ?y \\<noteq> 0 \\<Longrightarrow>\n  is_int_rat (rat_of_int ?x / rat_of_int ?y) = (?x mod ?y = 0)\n  lead_coeff q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff (pCons b2 c2) (degree q) mod lead_coeff q = 0", "by simp"], ["proof (state)\nthis:\n  coeff (pCons b2 c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  coeff (pCons b2 c2) (degree q) mod lead_coeff q = 0\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "using rat_int_poly_step_agree assms"], ["proof (prove)\nusing this:\n  coeff (pCons b2 c2) (degree q) mod lead_coeff q = 0\n  coeff (pCons ?b ?c2.0) (degree ?q) mod lead_coeff ?q = 0 \\<Longrightarrow>\n  ((of_int_poly ?a1.0, of_int_poly ?a2.0) =\n   (div_rat_poly_step (of_int_poly ?q) \\<circ> rat_of_int) ?b\n    (of_int_poly ?c1.0, of_int_poly ?c2.0)) =\n  (Some (?a1.0, ?a2.0) = div_int_poly_step ?q ?b (Some (?c1.0, ?c2.0)))\n  q \\<noteq> 0\n  (of_int_poly a1, of_int_poly a2) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b2\n   (of_int_poly c1, of_int_poly c2)\n\ngoal (1 subgoal):\n 1. Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))", "by simp"], ["proof (state)\nthis:\n  Some (a1, a2) = div_int_poly_step q b2 (Some (c1, c2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma div_int_poly_step_surjective : \"Some a = div_int_poly_step q b c \\<Longrightarrow> \\<exists> c'. c = Some c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some a = div_int_poly_step q b c \\<Longrightarrow>\n    \\<exists>c'. c = Some c'", "unfolding div_int_poly_step_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Some a =\n    (case c of None \\<Rightarrow> None\n     | Some (s, r) \\<Rightarrow>\n         let ar = pCons b r;\n             (b, m) = divmod_int (coeff ar (degree q)) (lead_coeff q)\n         in if m = 0 then Some (pCons b s, ar - smult b q)\n            else None) \\<Longrightarrow>\n    \\<exists>c'. c = Some c'", "by(cases c, simp_all)"], ["", "lemma  div_mod_int_poly_then_pdivmod:\n  assumes \"div_mod_int_poly p q = Some (r,m)\"\n  shows   \"(rp p div rp q, rp p mod rp q) = (rp r, rp m)\"\n    and   \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m) &&&\n    q \\<noteq> 0", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "let ?rpp = \"(\\<lambda> (a,b). (rp a,rp b))\""], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "let ?p = \"rp p\""], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "let ?q = \"rp q\""], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "let ?r = \"rp r\""], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "let ?m = \"rp m\""], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "let ?div_rat_step = \"div_rat_poly_step ?q\""], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "let ?div_int_step = \"div_int_poly_step q\""], ["proof (state)\ngoal (2 subgoals):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)\n 2. q \\<noteq> 0", "from assms"], ["proof (chain)\npicking this:\n  div_mod_int_poly p q = Some (r, m)", "show q0 : \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  div_mod_int_poly p q = Some (r, m)\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "using div_mod_int_poly_def"], ["proof (prove)\nusing this:\n  div_mod_int_poly p q = Some (r, m)\n  div_mod_int_poly ?p ?q =\n  (if ?q = 0 then None\n   else let n = degree ?q; qn = coeff ?q n\n        in fold_coeffs (div_int_poly_step ?q) ?p (Some (0, 0)))\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "hence \"div_mod_int_poly p q = Some (r,m) \\<longleftrightarrow> Some (r,m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\""], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (div_mod_int_poly p q = Some (r, m)) =\n    (Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)))", "unfolding div_mod_int_poly_def fold_coeffs_def"], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((if q = 0 then None\n      else let n = degree q; qn = coeff q n\n           in foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))) =\n     Some (r, m)) =\n    (Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)))", "by (auto split: option.splits prod.splits if_splits)"], ["proof (state)\nthis:\n  (div_mod_int_poly p q = Some (r, m)) =\n  (Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "hence innerRes: \"Some (r,m) = foldr (?div_int_step) (coeffs p) (Some (0, 0))\""], ["proof (prove)\nusing this:\n  (div_mod_int_poly p q = Some (r, m)) =\n  (Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)))\n\ngoal (1 subgoal):\n 1. Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))", "using assms"], ["proof (prove)\nusing this:\n  (div_mod_int_poly p q = Some (r, m)) =\n  (Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)))\n  div_mod_int_poly p q = Some (r, m)\n\ngoal (1 subgoal):\n 1. Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))", "by simp"], ["proof (state)\nthis:\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "{"], ["proof (state)\nthis:\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "fix oldRes res :: \"int poly \\<times> int poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "fix lst :: \"int list\""], ["proof (state)\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "have \"Some res = foldr ?div_int_step lst (Some oldRes) \\<Longrightarrow>\n          ?rpp res = foldr (?div_rat_step \\<circ> rat_of_int) lst (?rpp oldRes)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some res =\n    foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n    (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n     (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "using foldr_cong_plus[of \"set lst\" Some ?div_int_step ?rpp \"?div_rat_step \\<circ> rat_of_int\" \n        lst res oldRes] int_step_then_rat_poly_step div_int_poly_step_surjective"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>a b c.\n              \\<lbrakk>b \\<in> set lst;\n               Some a = div_int_poly_step q b (Some c)\\<rbrakk>\n              \\<Longrightarrow> (case a of\n                                 (a, b) \\<Rightarrow>\n                                   (of_int_poly a, of_int_poly b)) =\n                                (div_rat_poly_step (of_int_poly q) \\<circ>\n                                 rat_of_int)\n                                 b (case c of\n                                    (a, b) \\<Rightarrow>\n(of_int_poly a, of_int_poly b));\n   \\<And>a b. Some a = Some b \\<Longrightarrow> a = b;\n   \\<And>a b c.\n      Some a = div_int_poly_step q b c \\<Longrightarrow>\n      \\<exists>c'. c = Some c';\n   set lst \\<subseteq> set lst;\n   Some res = foldr (div_int_poly_step q) lst (Some oldRes)\\<rbrakk>\n  \\<Longrightarrow> (case res of\n                     (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n                    foldr\n                     (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int)\n                     lst\n                     (case oldRes of\n                      (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n  Some (?a1.0, ?a2.0) =\n  div_int_poly_step ?q ?b (Some (?c1.0, ?c2.0)) \\<Longrightarrow>\n  (of_int_poly ?a1.0, of_int_poly ?a2.0) =\n  (div_rat_poly_step (of_int_poly ?q) \\<circ> rat_of_int) ?b\n   (of_int_poly ?c1.0, of_int_poly ?c2.0)\n  Some ?a = div_int_poly_step ?q ?b ?c \\<Longrightarrow>\n  \\<exists>c'. ?c = Some c'\n\ngoal (1 subgoal):\n 1. Some res =\n    foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n    (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n     (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "by auto"], ["proof (state)\nthis:\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n   (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "hence \"Some res = foldr ?div_int_step lst (Some oldRes) \n      \\<Longrightarrow> ?rpp res = foldr ?div_rat_step (map rat_of_int lst) (?rpp oldRes)\""], ["proof (prove)\nusing this:\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n   (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n\ngoal (1 subgoal):\n 1. Some res =\n    foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n    (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst)\n     (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "using foldr_map[of ?div_rat_step rat_of_int lst]"], ["proof (prove)\nusing this:\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n   (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst) ?a =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst ?a\n\ngoal (1 subgoal):\n 1. Some res =\n    foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n    (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst)\n     (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "by simp"], ["proof (state)\nthis:\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes) \\<Longrightarrow>\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst)\n   (case oldRes of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "}"], ["proof (state)\nthis:\n  Some ?res2 =\n  foldr (div_int_poly_step q) ?lst2 (Some ?oldRes2) \\<Longrightarrow>\n  (case ?res2 of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int ?lst2)\n   (case ?oldRes2 of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "hence equal_foldr : \"Some (r,m) = foldr (?div_int_step) (coeffs p) (Some (0,0)) \n    \\<Longrightarrow> ?rpp (r,m) = foldr (?div_rat_step) (map rat_of_int (coeffs p)) (?rpp (0,0))\""], ["proof (prove)\nusing this:\n  Some ?res2 =\n  foldr (div_int_poly_step q) ?lst2 (Some ?oldRes2) \\<Longrightarrow>\n  (case ?res2 of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int ?lst2)\n   (case ?oldRes2 of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n\ngoal (1 subgoal):\n 1. Some (r, m) =\n    foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)) \\<Longrightarrow>\n    (case (r, m) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int (coeffs p))\n     (case (0, 0) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "."], ["proof (state)\nthis:\n  Some (r, m) =\n  foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)) \\<Longrightarrow>\n  (case (r, m) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int (coeffs p))\n   (case (0, 0) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "have \"(map rat_of_int (coeffs p) = coeffs ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map rat_of_int (coeffs p) = coeffs (of_int_poly p)", "by simp"], ["proof (state)\nthis:\n  map rat_of_int (coeffs p) = coeffs (of_int_poly p)\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "hence \"(?r,?m) = (foldr (?div_rat_step) (coeffs ?p) (0,0))\""], ["proof (prove)\nusing this:\n  map rat_of_int (coeffs p) = coeffs (of_int_poly p)\n\ngoal (1 subgoal):\n 1. (of_int_poly r, of_int_poly m) =\n    foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p))\n     (0, 0)", "using equal_foldr innerRes"], ["proof (prove)\nusing this:\n  map rat_of_int (coeffs p) = coeffs (of_int_poly p)\n  Some (r, m) =\n  foldr (div_int_poly_step q) (coeffs p) (Some (0, 0)) \\<Longrightarrow>\n  (case (r, m) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int (coeffs p))\n   (case (0, 0) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n\ngoal (1 subgoal):\n 1. (of_int_poly r, of_int_poly m) =\n    foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p))\n     (0, 0)", "by simp"], ["proof (state)\nthis:\n  (of_int_poly r, of_int_poly m) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p)) (0, 0)\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "thus \"(?p div ?q, ?p mod ?q) = (?r,?m)\""], ["proof (prove)\nusing this:\n  (of_int_poly r, of_int_poly m) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p)) (0, 0)\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "using fold_coeffs_def [of \"?div_rat_step\" ?p] q0 \n      div_mod_fold_coeffs [of ?p ?q]"], ["proof (prove)\nusing this:\n  (of_int_poly r, of_int_poly m) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p)) (0, 0)\n  fold_coeffs (div_rat_poly_step (of_int_poly q)) (of_int_poly p) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p))\n  q \\<noteq> 0\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (if of_int_poly q = 0 then (0, of_int_poly p)\n   else fold_coeffs\n         (\\<lambda>a (s, r).\n             let b = coeff (pCons a r) (degree (of_int_poly q)) /\n                     lead_coeff (of_int_poly q)\n             in (pCons b s, pCons a r - smult b (of_int_poly q)))\n         (of_int_poly p) (0, 0))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "unfolding div_rat_poly_step_def"], ["proof (prove)\nusing this:\n  (of_int_poly r, of_int_poly m) =\n  foldr\n   (\\<lambda>a (s, r).\n       let b = coeff (pCons a r) (degree (of_int_poly q)) /\n               lead_coeff (of_int_poly q)\n       in (pCons b s, pCons a r - smult b (of_int_poly q)))\n   (coeffs (of_int_poly p)) (0, 0)\n  fold_coeffs\n   (\\<lambda>a (s, r).\n       let b = coeff (pCons a r) (degree (of_int_poly q)) /\n               lead_coeff (of_int_poly q)\n       in (pCons b s, pCons a r - smult b (of_int_poly q)))\n   (of_int_poly p) =\n  foldr\n   (\\<lambda>a (s, r).\n       let b = coeff (pCons a r) (degree (of_int_poly q)) /\n               lead_coeff (of_int_poly q)\n       in (pCons b s, pCons a r - smult b (of_int_poly q)))\n   (coeffs (of_int_poly p))\n  q \\<noteq> 0\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (if of_int_poly q = 0 then (0, of_int_poly p)\n   else fold_coeffs\n         (\\<lambda>a (s, r).\n             let b = coeff (pCons a r) (degree (of_int_poly q)) /\n                     lead_coeff (of_int_poly q)\n             in (pCons b s, pCons a r - smult b (of_int_poly q)))\n         (of_int_poly p) (0, 0))\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly m)", "by auto"], ["proof (state)\nthis:\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma div_rat_poly_step_sur:\n assumes \"(case a of (a, b) \\<Rightarrow> (rp a, rp b)) = (div_rat_poly_step (rp q) \\<circ> rat_of_int) x pair\"\n   shows \"\\<exists>c'. pair = (case c' of (a, b) \\<Rightarrow> (rp a, rp b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "obtain b1 b2 where pair: \"pair = (b1, b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b1 b2.\n        pair = (b1, b2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases pair) simp"], ["proof (state)\nthis:\n  pair = (b1, b2)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "define p12 where \"p12 = coeff (pCons (rat_of_int x) b2) (degree (rp q)) / coeff (rp q) (degree (rp q))\""], ["proof (state)\nthis:\n  p12 =\n  coeff (pCons (rat_of_int x) b2) (degree (of_int_poly q)) /\n  lead_coeff (of_int_poly q)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "obtain a1 a2 where \"a = (a1, a2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 a2. a = (a1, a2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases a) simp"], ["proof (state)\nthis:\n  a = (a1, a2)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "with assms pair"], ["proof (chain)\npicking this:\n  (case a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) x pair\n  pair = (b1, b2)\n  a = (a1, a2)", "have \"(rp a1, rp a2) = div_rat_poly_step (rp q) (rat_of_int x) (b1, b2)\""], ["proof (prove)\nusing this:\n  (case a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) x pair\n  pair = (b1, b2)\n  a = (a1, a2)\n\ngoal (1 subgoal):\n 1. (of_int_poly a1, of_int_poly a2) =\n    div_rat_poly_step (of_int_poly q) (rat_of_int x) (b1, b2)", "by simp"], ["proof (state)\nthis:\n  (of_int_poly a1, of_int_poly a2) =\n  div_rat_poly_step (of_int_poly q) (rat_of_int x) (b1, b2)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "then"], ["proof (chain)\npicking this:\n  (of_int_poly a1, of_int_poly a2) =\n  div_rat_poly_step (of_int_poly q) (rat_of_int x) (b1, b2)", "have a1: \"rp a1 = pCons p12 b1\"\n    and \"rp a2 = pCons (rat_of_int x) b2 - smult p12 (rp q)\""], ["proof (prove)\nusing this:\n  (of_int_poly a1, of_int_poly a2) =\n  div_rat_poly_step (of_int_poly q) (rat_of_int x) (b1, b2)\n\ngoal (1 subgoal):\n 1. of_int_poly a1 = pCons p12 b1 &&&\n    of_int_poly a2 = pCons (rat_of_int x) b2 - smult p12 (of_int_poly q)", "by (auto split: prod.splits simp add: Let_def div_rat_poly_step_def p12_def)"], ["proof (state)\nthis:\n  of_int_poly a1 = pCons p12 b1\n  of_int_poly a2 = pCons (rat_of_int x) b2 - smult p12 (of_int_poly q)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "then"], ["proof (chain)\npicking this:\n  of_int_poly a1 = pCons p12 b1\n  of_int_poly a2 = pCons (rat_of_int x) b2 - smult p12 (of_int_poly q)", "obtain p21 p22 where \"rp p21 = pCons p22 b2\""], ["proof (prove)\nusing this:\n  of_int_poly a1 = pCons p12 b1\n  of_int_poly a2 = pCons (rat_of_int x) b2 - smult p12 (of_int_poly q)\n\ngoal (1 subgoal):\n 1. (\\<And>p21 p22.\n        of_int_poly p21 = pCons p22 b2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply (simp add: field_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p21 p22.\n                of_int_poly p21 = pCons p22 b2 \\<Longrightarrow> thesis;\n     of_int_poly a1 = pCons p12 b1;\n     of_int_poly a2 + smult p12 (of_int_poly q) =\n     pCons (rat_of_int x) b2\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (metis coeff_pCons_0 of_int_hom.map_poly_hom_add of_int_hom.map_poly_hom_smult of_int_hom.coeff_map_poly_hom)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  of_int_poly p21 = pCons p22 b2\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "moreover"], ["proof (state)\nthis:\n  of_int_poly p21 = pCons p22 b2\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "obtain p21' p21q where \"p21 = pCons p21' p21q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p21' p21q.\n        p21 = pCons p21' p21q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule pCons_cases)"], ["proof (state)\nthis:\n  p21 = pCons p21' p21q\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "ultimately"], ["proof (chain)\npicking this:\n  of_int_poly p21 = pCons p22 b2\n  p21 = pCons p21' p21q", "obtain p2 where \"b2 = rp p2 \""], ["proof (prove)\nusing this:\n  of_int_poly p21 = pCons p22 b2\n  p21 = pCons p21' p21q\n\ngoal (1 subgoal):\n 1. (\\<And>p2.\n        b2 = of_int_poly p2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  b2 = of_int_poly p2\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "moreover"], ["proof (state)\nthis:\n  b2 = of_int_poly p2\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "obtain a1' a1q where \"a1 = pCons a1' a1q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1' a1q.\n        a1 = pCons a1' a1q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule pCons_cases)"], ["proof (state)\nthis:\n  a1 = pCons a1' a1q\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "with a1"], ["proof (chain)\npicking this:\n  of_int_poly a1 = pCons p12 b1\n  a1 = pCons a1' a1q", "obtain p1 where \"b1 = rp p1\""], ["proof (prove)\nusing this:\n  of_int_poly a1 = pCons p12 b1\n  a1 = pCons a1' a1q\n\ngoal (1 subgoal):\n 1. (\\<And>p1.\n        b1 = of_int_poly p1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  b1 = of_int_poly p1\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "ultimately"], ["proof (chain)\npicking this:\n  b2 = of_int_poly p2\n  b1 = of_int_poly p1", "have \"pair = (rp p1, rp p2)\""], ["proof (prove)\nusing this:\n  b2 = of_int_poly p2\n  b1 = of_int_poly p1\n\ngoal (1 subgoal):\n 1. pair = (of_int_poly p1, of_int_poly p2)", "using pair"], ["proof (prove)\nusing this:\n  b2 = of_int_poly p2\n  b1 = of_int_poly p1\n  pair = (b1, b2)\n\ngoal (1 subgoal):\n 1. pair = (of_int_poly p1, of_int_poly p2)", "by simp"], ["proof (state)\nthis:\n  pair = (of_int_poly p1, of_int_poly p2)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "then"], ["proof (chain)\npicking this:\n  pair = (of_int_poly p1, of_int_poly p2)", "show ?thesis"], ["proof (prove)\nusing this:\n  pair = (of_int_poly p1, of_int_poly p2)\n\ngoal (1 subgoal):\n 1. \\<exists>c'.\n       pair =\n       (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))", "by auto"], ["proof (state)\nthis:\n  \\<exists>c'.\n     pair = (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  pdivmod_then_div_mod_int_poly:\n  assumes q0: \"q \\<noteq> 0\" and \"(rp p div rp q, rp p mod rp q) = (rp r, rp m)\" \n  shows   \"div_mod_int_poly p q = Some (r,m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "let ?rpp = \"(\\<lambda> (a,b). (rp a,rp b))\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "(* rp pair *)"], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "let ?p = \"rp p\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "let ?q = \"rp q\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "let ?r = \"rp r\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "let ?m = \"rp m\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "let ?div_rat_step = \"div_rat_poly_step ?q\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "let ?div_int_step = \"div_int_poly_step q\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "fix oldRes res :: \"int poly \\<times> int poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "fix lst :: \"int list\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "have inj: \"(\\<And>a b. (case a of (a, b) \\<Rightarrow> (rp a, rp b)) = (case b of (a, b) \\<Rightarrow> (rp a, rp b)) \\<Longrightarrow> a = b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (case a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n       (case b of\n        (a, b) \\<Rightarrow>\n          (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n       a = b", "by auto"], ["proof (state)\nthis:\n  (case ?a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  (case ?b of\n   (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  ?a = ?b\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "have \"(\\<And>a b c. b \\<in> set lst \\<Longrightarrow>\n              (case a of (a, b) \\<Rightarrow> (map_poly rat_of_int a, map_poly rat_of_int b)) =\n              (div_rat_poly_step (map_poly rat_of_int q) \\<circ> rat_of_int) b\n               (case c of (a, b) \\<Rightarrow> (map_poly rat_of_int a, map_poly rat_of_int b)) \\<Longrightarrow>\n              Some a = div_int_poly_step q b (Some c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>b \\<in> set lst;\n        (case a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n        (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n         (case c of\n          (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\\<rbrakk>\n       \\<Longrightarrow> Some a = div_int_poly_step q b (Some c)", "using rat_step_then_int_poly_step[OF q0]"], ["proof (prove)\nusing this:\n  (of_int_poly ?a1.0, of_int_poly ?a2.0) =\n  (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) ?b2.0\n   (of_int_poly ?c1.0, of_int_poly ?c2.0) \\<Longrightarrow>\n  Some (?a1.0, ?a2.0) = div_int_poly_step q ?b2.0 (Some (?c1.0, ?c2.0))\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>b \\<in> set lst;\n        (case a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n        (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n         (case c of\n          (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\\<rbrakk>\n       \\<Longrightarrow> Some a = div_int_poly_step q b (Some c)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?b \\<in> set lst;\n   (case ?a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) ?b\n    (case ?c of\n     (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\\<rbrakk>\n  \\<Longrightarrow> Some ?a = div_int_poly_step q ?b (Some ?c)\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "hence \"?rpp res = foldr (?div_rat_step \\<circ> rat_of_int) lst (?rpp oldRes)\n          \\<Longrightarrow> Some res = foldr ?div_int_step lst (Some oldRes)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<in> set lst;\n   (case ?a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) ?b\n    (case ?c of\n     (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\\<rbrakk>\n  \\<Longrightarrow> Some ?a = div_int_poly_step q ?b (Some ?c)\n\ngoal (1 subgoal):\n 1. (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n     (case oldRes of\n      (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n    Some res = foldr (div_int_poly_step q) lst (Some oldRes)", "using foldr_cong_plus[of \"set lst\" ?rpp \"?div_rat_step \\<circ> rat_of_int\" Some ?div_int_step lst res oldRes]\n            div_rat_poly_step_sur inj"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<in> set lst;\n   (case ?a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n   (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) ?b\n    (case ?c of\n     (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\\<rbrakk>\n  \\<Longrightarrow> Some ?a = div_int_poly_step q ?b (Some ?c)\n  \\<lbrakk>\\<And>a b c.\n              \\<lbrakk>b \\<in> set lst;\n               (case a of\n                (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n               (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n                (case c of\n                 (a, b) \\<Rightarrow>\n                   (of_int_poly a, of_int_poly b))\\<rbrakk>\n              \\<Longrightarrow> Some a = div_int_poly_step q b (Some c);\n   \\<And>a b.\n      (case a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n      (case b of\n       (a, b) \\<Rightarrow>\n         (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n      a = b;\n   \\<And>a b c.\n      (case a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n      (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) b\n       c \\<Longrightarrow>\n      \\<exists>c'.\n         c =\n         (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b));\n   set lst \\<subseteq> set lst;\n   (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n   foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n    (case oldRes of\n     (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\\<rbrakk>\n  \\<Longrightarrow> Some res = foldr (div_int_poly_step q) lst (Some oldRes)\n  (case ?a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  (div_rat_poly_step (of_int_poly ?q) \\<circ> rat_of_int) ?x\n   ?pair \\<Longrightarrow>\n  \\<exists>c'.\n     ?pair =\n     (case c' of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b))\n  (case ?a of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  (case ?b of\n   (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  ?a = ?b\n\ngoal (1 subgoal):\n 1. (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n     (case oldRes of\n      (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n    Some res = foldr (div_int_poly_step q) lst (Some oldRes)", "by simp"], ["proof (state)\nthis:\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n   (case oldRes of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes)\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "hence \"?rpp res = foldr ?div_rat_step (map rat_of_int lst) (?rpp oldRes)\n       \\<Longrightarrow> Some res = foldr ?div_int_step lst (Some oldRes)\""], ["proof (prove)\nusing this:\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n   (case oldRes of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes)\n\ngoal (1 subgoal):\n 1. (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst)\n     (case oldRes of\n      (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n    Some res = foldr (div_int_poly_step q) lst (Some oldRes)", "using foldr_map[of ?div_rat_step rat_of_int lst]"], ["proof (prove)\nusing this:\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst\n   (case oldRes of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes)\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst) ?a =\n  foldr (div_rat_poly_step (of_int_poly q) \\<circ> rat_of_int) lst ?a\n\ngoal (1 subgoal):\n 1. (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst)\n     (case oldRes of\n      (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n    Some res = foldr (div_int_poly_step q) lst (Some oldRes)", "by auto"], ["proof (state)\nthis:\n  (case res of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int lst)\n   (case oldRes of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some res = foldr (div_int_poly_step q) lst (Some oldRes)\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "}"], ["proof (state)\nthis:\n  (case ?res2 of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int ?lst2)\n   (case ?oldRes2 of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some ?res2 = foldr (div_int_poly_step q) ?lst2 (Some ?oldRes2)\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "hence equal_foldr : \"?rpp (r,m) = foldr (?div_rat_step) (map rat_of_int (coeffs p)) (?rpp (0,0))\n                   \\<Longrightarrow> Some (r,m) = foldr (?div_int_step) (coeffs p) (Some (0,0))\""], ["proof (prove)\nusing this:\n  (case ?res2 of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int ?lst2)\n   (case ?oldRes2 of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some ?res2 = foldr (div_int_poly_step q) ?lst2 (Some ?oldRes2)\n\ngoal (1 subgoal):\n 1. (case (r, m) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n    foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int (coeffs p))\n     (case (0, 0) of\n      (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n    Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))", "by simp"], ["proof (state)\nthis:\n  (case (r, m) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int (coeffs p))\n   (case (0, 0) of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "have \"(?r,?m) = (foldr (?div_rat_step) (coeffs ?p) (0,0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_int_poly r, of_int_poly m) =\n    foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p))\n     (0, 0)", "using fold_coeffs_def[of \"?div_rat_step\" ?p] assms\n      div_mod_fold_coeffs [of ?p ?q]"], ["proof (prove)\nusing this:\n  fold_coeffs (div_rat_poly_step (of_int_poly q)) (of_int_poly p) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p))\n  q \\<noteq> 0\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly m)\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (if of_int_poly q = 0 then (0, of_int_poly p)\n   else fold_coeffs\n         (\\<lambda>a (s, r).\n             let b = coeff (pCons a r) (degree (of_int_poly q)) /\n                     lead_coeff (of_int_poly q)\n             in (pCons b s, pCons a r - smult b (of_int_poly q)))\n         (of_int_poly p) (0, 0))\n\ngoal (1 subgoal):\n 1. (of_int_poly r, of_int_poly m) =\n    foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p))\n     (0, 0)", "unfolding div_rat_poly_step_def"], ["proof (prove)\nusing this:\n  fold_coeffs\n   (\\<lambda>a (s, r).\n       let b = coeff (pCons a r) (degree (of_int_poly q)) /\n               lead_coeff (of_int_poly q)\n       in (pCons b s, pCons a r - smult b (of_int_poly q)))\n   (of_int_poly p) =\n  foldr\n   (\\<lambda>a (s, r).\n       let b = coeff (pCons a r) (degree (of_int_poly q)) /\n               lead_coeff (of_int_poly q)\n       in (pCons b s, pCons a r - smult b (of_int_poly q)))\n   (coeffs (of_int_poly p))\n  q \\<noteq> 0\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly m)\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (if of_int_poly q = 0 then (0, of_int_poly p)\n   else fold_coeffs\n         (\\<lambda>a (s, r).\n             let b = coeff (pCons a r) (degree (of_int_poly q)) /\n                     lead_coeff (of_int_poly q)\n             in (pCons b s, pCons a r - smult b (of_int_poly q)))\n         (of_int_poly p) (0, 0))\n\ngoal (1 subgoal):\n 1. (of_int_poly r, of_int_poly m) =\n    foldr\n     (\\<lambda>a (s, r).\n         let b = coeff (pCons a r) (degree (of_int_poly q)) /\n                 lead_coeff (of_int_poly q)\n         in (pCons b s, pCons a r - smult b (of_int_poly q)))\n     (coeffs (of_int_poly p)) (0, 0)", "by auto"], ["proof (state)\nthis:\n  (of_int_poly r, of_int_poly m) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p)) (0, 0)\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "hence \"Some (r,m) = foldr (?div_int_step) (coeffs p) (Some (0,0))\""], ["proof (prove)\nusing this:\n  (of_int_poly r, of_int_poly m) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p)) (0, 0)\n\ngoal (1 subgoal):\n 1. Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))", "using equal_foldr"], ["proof (prove)\nusing this:\n  (of_int_poly r, of_int_poly m) =\n  foldr (div_rat_poly_step (of_int_poly q)) (coeffs (of_int_poly p)) (0, 0)\n  (case (r, m) of (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) =\n  foldr (div_rat_poly_step (of_int_poly q)) (map rat_of_int (coeffs p))\n   (case (0, 0) of\n    (a, b) \\<Rightarrow> (of_int_poly a, of_int_poly b)) \\<Longrightarrow>\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n\ngoal (1 subgoal):\n 1. Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))", "by simp"], ["proof (state)\nthis:\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "using q0"], ["proof (prove)\nusing this:\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. div_mod_int_poly p q = Some (r, m)", "unfolding div_mod_int_poly_def"], ["proof (prove)\nusing this:\n  Some (r, m) = foldr (div_int_poly_step q) (coeffs p) (Some (0, 0))\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (if q = 0 then None\n     else let n = degree q; qn = coeff q n\n          in fold_coeffs (div_int_poly_step q) p (Some (0, 0))) =\n    Some (r, m)", "by (simp add: fold_coeffs_def)"], ["proof (state)\nthis:\n  div_mod_int_poly p q = Some (r, m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma div_int_then_rqp:\n  assumes \"div_int_poly p q = Some r\"\n  shows \"r * q = p\"\n    and \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * q = p &&& q \\<noteq> 0", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "let ?rpp = \"(\\<lambda> (a,b). (rp a,rp b))\""], ["proof (state)\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "(* rp pair *)"], ["proof (state)\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "let ?p = \"rp p\""], ["proof (state)\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "let ?q = \"rp q\""], ["proof (state)\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "let ?r = \"rp r\""], ["proof (state)\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "have \"Some (r,0) = div_mod_int_poly p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (r, 0) = div_mod_int_poly p q", "using assms"], ["proof (prove)\nusing this:\n  div_int_poly p q = Some r\n\ngoal (1 subgoal):\n 1. Some (r, 0) = div_mod_int_poly p q", "unfolding div_int_poly_def"], ["proof (prove)\nusing this:\n  (case div_mod_int_poly p q of None \\<Rightarrow> None\n   | Some (d, m) \\<Rightarrow> if m = 0 then Some d else None) =\n  Some r\n\ngoal (1 subgoal):\n 1. Some (r, 0) = div_mod_int_poly p q", "by (auto split:  option.splits prod.splits if_splits)"], ["proof (state)\nthis:\n  Some (r, 0) = div_mod_int_poly p q\n\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "with div_mod_int_poly_then_pdivmod[of p q r 0]"], ["proof (chain)\npicking this:\n  div_mod_int_poly p q = Some (r, 0) \\<Longrightarrow>\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly 0)\n  div_mod_int_poly p q = Some (r, 0) \\<Longrightarrow> q \\<noteq> 0\n  Some (r, 0) = div_mod_int_poly p q", "have \"?p div ?q = ?r \\<and> ?p mod ?q = 0\""], ["proof (prove)\nusing this:\n  div_mod_int_poly p q = Some (r, 0) \\<Longrightarrow>\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly 0)\n  div_mod_int_poly p q = Some (r, 0) \\<Longrightarrow> q \\<noteq> 0\n  Some (r, 0) = div_mod_int_poly p q\n\ngoal (1 subgoal):\n 1. of_int_poly p div of_int_poly q = of_int_poly r \\<and>\n    of_int_poly p mod of_int_poly q = 0", "by simp"], ["proof (state)\nthis:\n  of_int_poly p div of_int_poly q = of_int_poly r \\<and>\n  of_int_poly p mod of_int_poly q = 0\n\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "with div_mult_mod_eq[of ?p ?q]"], ["proof (chain)\npicking this:\n  of_int_poly p div of_int_poly q * of_int_poly q +\n  of_int_poly p mod of_int_poly q =\n  of_int_poly p\n  of_int_poly p div of_int_poly q = of_int_poly r \\<and>\n  of_int_poly p mod of_int_poly q = 0", "have \"?p = ?r * ?q\""], ["proof (prove)\nusing this:\n  of_int_poly p div of_int_poly q * of_int_poly q +\n  of_int_poly p mod of_int_poly q =\n  of_int_poly p\n  of_int_poly p div of_int_poly q = of_int_poly r \\<and>\n  of_int_poly p mod of_int_poly q = 0\n\ngoal (1 subgoal):\n 1. of_int_poly p = of_int_poly r * of_int_poly q", "by auto"], ["proof (state)\nthis:\n  of_int_poly p = of_int_poly r * of_int_poly q\n\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "also"], ["proof (state)\nthis:\n  of_int_poly p = of_int_poly r * of_int_poly q\n\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "have \"\\<dots> = rp (r * q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly r * of_int_poly q = of_int_poly (r * q)", "by (simp add: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly r * of_int_poly q = of_int_poly (r * q)\n\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  of_int_poly p = of_int_poly (r * q)", "have \"?p = rp (r * q)\""], ["proof (prove)\nusing this:\n  of_int_poly p = of_int_poly (r * q)\n\ngoal (1 subgoal):\n 1. of_int_poly p = of_int_poly (r * q)", "."], ["proof (state)\nthis:\n  of_int_poly p = of_int_poly (r * q)\n\ngoal (2 subgoals):\n 1. r * q = p\n 2. q \\<noteq> 0", "thus \"r * q = p\""], ["proof (prove)\nusing this:\n  of_int_poly p = of_int_poly (r * q)\n\ngoal (1 subgoal):\n 1. r * q = p", "by simp"], ["proof (state)\nthis:\n  r * q = p\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "show \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "using assms"], ["proof (prove)\nusing this:\n  div_int_poly p q = Some r\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "unfolding div_int_poly_def div_mod_int_poly_def"], ["proof (prove)\nusing this:\n  (case if q = 0 then None\n        else let n = degree q; qn = coeff q n\n             in fold_coeffs (div_int_poly_step q) p (Some (0, 0)) of\n   None \\<Rightarrow> None\n   | Some (d, m) \\<Rightarrow> if m = 0 then Some d else None) =\n  Some r\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by (auto split: option.splits prod.splits if_splits)"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rqp_then_div_int:\n  assumes \"r * q = p\"\n      and q0:\"q \\<noteq> 0\"\n  shows \"div_int_poly p q = Some r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "let ?rpp = \"(\\<lambda> (a,b). (rp a,rp b))\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "(* rp pair *)"], ["proof (state)\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "let ?p = \"rp p\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "let ?q = \"rp q\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "let ?r = \"rp r\""], ["proof (state)\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "have \"?p = ?r * ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int_poly p = of_int_poly r * of_int_poly q", "using assms(1)"], ["proof (prove)\nusing this:\n  r * q = p\n\ngoal (1 subgoal):\n 1. of_int_poly p = of_int_poly r * of_int_poly q", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly p = of_int_poly r * of_int_poly q\n\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "hence \"?p div ?q = ?r\" and \"?p mod ?q = 0\""], ["proof (prove)\nusing this:\n  of_int_poly p = of_int_poly r * of_int_poly q\n\ngoal (1 subgoal):\n 1. of_int_poly p div of_int_poly q = of_int_poly r &&&\n    of_int_poly p mod of_int_poly q = 0", "using q0"], ["proof (prove)\nusing this:\n  of_int_poly p = of_int_poly r * of_int_poly q\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int_poly p div of_int_poly q = of_int_poly r &&&\n    of_int_poly p mod of_int_poly q = 0", "by simp_all"], ["proof (state)\nthis:\n  of_int_poly p div of_int_poly q = of_int_poly r\n  of_int_poly p mod of_int_poly q = 0\n\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "hence \"(rp p div rp q, rp p mod rp q) = (rp r, 0)\""], ["proof (prove)\nusing this:\n  of_int_poly p div of_int_poly q = of_int_poly r\n  of_int_poly p mod of_int_poly q = 0\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, 0)", "by (auto split: prod.splits)"], ["proof (state)\nthis:\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, 0)\n\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "hence \"(rp p div rp q, rp p mod rp q) = (rp r, rp 0)\""], ["proof (prove)\nusing this:\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, 0)\n\ngoal (1 subgoal):\n 1. (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n    (of_int_poly r, of_int_poly 0)", "by simp"], ["proof (state)\nthis:\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly 0)\n\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "hence \"Some (r,0) = div_mod_int_poly p q\""], ["proof (prove)\nusing this:\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly 0)\n\ngoal (1 subgoal):\n 1. Some (r, 0) = div_mod_int_poly p q", "using pdivmod_then_div_mod_int_poly[OF q0,of p r 0]"], ["proof (prove)\nusing this:\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly 0)\n  (of_int_poly p div of_int_poly q, of_int_poly p mod of_int_poly q) =\n  (of_int_poly r, of_int_poly 0) \\<Longrightarrow>\n  div_mod_int_poly p q = Some (r, 0)\n\ngoal (1 subgoal):\n 1. Some (r, 0) = div_mod_int_poly p q", "by simp"], ["proof (state)\nthis:\n  Some (r, 0) = div_mod_int_poly p q\n\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "thus ?thesis"], ["proof (prove)\nusing this:\n  Some (r, 0) = div_mod_int_poly p q\n\ngoal (1 subgoal):\n 1. div_int_poly p q = Some r", "unfolding div_mod_int_poly_def div_int_poly_def"], ["proof (prove)\nusing this:\n  Some (r, 0) =\n  (if q = 0 then None\n   else let n = degree q; qn = coeff q n\n        in fold_coeffs (div_int_poly_step q) p (Some (0, 0)))\n\ngoal (1 subgoal):\n 1. (case if q = 0 then None\n          else let n = degree q; qn = coeff q n\n               in fold_coeffs (div_int_poly_step q) p (Some (0, 0)) of\n     None \\<Rightarrow> None\n     | Some (d, m) \\<Rightarrow> if m = 0 then Some d else None) =\n    Some r", "using q0"], ["proof (prove)\nusing this:\n  Some (r, 0) =\n  (if q = 0 then None\n   else let n = degree q; qn = coeff q n\n        in fold_coeffs (div_int_poly_step q) p (Some (0, 0)))\n  q \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (case if q = 0 then None\n          else let n = degree q; qn = coeff q n\n               in fold_coeffs (div_int_poly_step q) p (Some (0, 0)) of\n     None \\<Rightarrow> None\n     | Some (d, m) \\<Rightarrow> if m = 0 then Some d else None) =\n    Some r", "by (metis (mono_tags, lifting) option.simps(5) split_conv)"], ["proof (state)\nthis:\n  div_int_poly p q = Some r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma div_int_poly: \"(div_int_poly p q = Some r) \\<longleftrightarrow> (q \\<noteq> 0 \\<and> p = r * q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (div_int_poly p q = Some r) = (q \\<noteq> 0 \\<and> p = r * q)", "using div_int_then_rqp rqp_then_div_int"], ["proof (prove)\nusing this:\n  div_int_poly ?p ?q = Some ?r \\<Longrightarrow> ?r * ?q = ?p\n  div_int_poly ?p ?q = Some ?r \\<Longrightarrow> ?q \\<noteq> 0\n  \\<lbrakk>?r * ?q = ?p; ?q \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> div_int_poly ?p ?q = Some ?r\n\ngoal (1 subgoal):\n 1. (div_int_poly p q = Some r) = (q \\<noteq> 0 \\<and> p = r * q)", "by blast"], ["", "definition dvd_int_poly :: \"int poly \\<Rightarrow> int poly \\<Rightarrow> bool\" where\n  \"dvd_int_poly q p = (if q = 0 then p = 0 else div_int_poly p q \\<noteq> None)\""], ["", "lemma dvd_int_poly[simp]: \"dvd_int_poly q p = (q dvd p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dvd_int_poly q p = (q dvd p)", "unfolding dvd_def dvd_int_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if q = 0 then p = 0 else div_int_poly p q \\<noteq> None) =\n    (\\<exists>k. p = q * k)", "using div_int_poly[of p q]"], ["proof (prove)\nusing this:\n  (div_int_poly p q = Some ?r) = (q \\<noteq> 0 \\<and> p = ?r * q)\n\ngoal (1 subgoal):\n 1. (if q = 0 then p = 0 else div_int_poly p q \\<noteq> None) =\n    (\\<exists>k. p = q * k)", "by (cases \"q = 0\", auto)"], ["", "definition dvd_int_poly_non_0 :: \"int poly \\<Rightarrow> int poly \\<Rightarrow> bool\" where\n  \"dvd_int_poly_non_0 q p = (div_int_poly p q \\<noteq> None)\""], ["", "lemma dvd_int_poly_non_0[simp]: \"q \\<noteq> 0 \\<Longrightarrow> dvd_int_poly_non_0 q p = (q dvd p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow> dvd_int_poly_non_0 q p = (q dvd p)", "unfolding dvd_def dvd_int_poly_non_0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow>\n    (div_int_poly p q \\<noteq> None) = (\\<exists>k. p = q * k)", "using div_int_poly[of p q]"], ["proof (prove)\nusing this:\n  (div_int_poly p q = Some ?r) = (q \\<noteq> 0 \\<and> p = ?r * q)\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0 \\<Longrightarrow>\n    (div_int_poly p q \\<noteq> None) = (\\<exists>k. p = q * k)", "by auto"], ["", "lemma [code_unfold]: \"p dvd q \\<longleftrightarrow> dvd_int_poly p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p dvd q) = dvd_int_poly p q", "by simp"], ["", "hide_const rp"], ["", "end"]]}