{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization/Gcd_Rat_Poly.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization", "problem_names": ["lemma gcd_rat_poly[simp]: \"gcd_rat_poly = gcd\"", "lemma gcd_rat_poly_unfold[code_unfold]: \"gcd = gcd_rat_poly\""], "translations": [["", "lemma gcd_rat_poly[simp]: \"gcd_rat_poly = gcd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_rat_poly = gcd", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "fix f g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "let ?ri = \"map_poly rat_of_int\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "obtain a' f' where faf': \"rat_to_int_poly f = (a',f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a' f'.\n        rat_to_int_poly f = (a', f') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  rat_to_int_poly f = (a', f')\n\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "from rat_to_int_poly[OF this]"], ["proof (chain)\npicking this:\n  f = smult (inverse (rat_of_int a')) (of_int_poly f')\n  0 < a'", "obtain a where \n    f: \"f = smult a (?ri f')\" and a: \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f = smult (inverse (rat_of_int a')) (of_int_poly f')\n  0 < a'\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>f = smult a (of_int_poly f'); a \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f = smult a (of_int_poly f')\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "obtain b' g' where gbg': \"rat_to_int_poly g = (b',g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b' g'.\n        rat_to_int_poly g = (b', g') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  rat_to_int_poly g = (b', g')\n\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "from rat_to_int_poly[OF this]"], ["proof (chain)\npicking this:\n  g = smult (inverse (rat_of_int b')) (of_int_poly g')\n  0 < b'", "obtain b where \n    g: \"g = smult b (?ri g')\" and b: \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  g = smult (inverse (rat_of_int b')) (of_int_poly g')\n  0 < b'\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>g = smult b (of_int_poly g'); b \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g = smult b (of_int_poly g')\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "define h where \"h = gcd f' g'\""], ["proof (state)\nthis:\n  h = gcd f' g'\n\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "let ?h = \"?ri h\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "define lc where \"lc = inverse (coeff ?h (degree ?h))\""], ["proof (state)\nthis:\n  lc = inverse (lead_coeff (of_int_poly h))\n\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "let ?gcd = \"smult lc ?h\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "have id: \"gcd_rat_poly f g = ?gcd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_rat_poly f g = smult lc (of_int_poly h)", "unfolding lc_def h_def gcd_rat_poly_def Let_def faf' gbg' snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (inverse (lead_coeff (of_int_poly (gcd f' g'))))\n     (of_int_poly (gcd f' g')) =\n    smult (inverse (lead_coeff (of_int_poly (gcd f' g'))))\n     (of_int_poly (gcd f' g'))", "by auto"], ["proof (state)\nthis:\n  gcd_rat_poly f g = smult lc (of_int_poly h)\n\ngoal (1 subgoal):\n 1. \\<And>x xa. gcd_rat_poly x xa = gcd x xa", "show \"gcd_rat_poly f g = gcd f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_rat_poly f g = gcd f g", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult lc (of_int_poly h) = gcd f g", "proof (rule gcdI)"], ["proof (state)\ngoal (4 subgoals):\n 1. smult lc (of_int_poly h) dvd f\n 2. smult lc (of_int_poly h) dvd g\n 3. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 4. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "have \"h dvd f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h dvd f'", "unfolding h_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd f' g' dvd f'", "by auto"], ["proof (state)\nthis:\n  h dvd f'\n\ngoal (4 subgoals):\n 1. smult lc (of_int_poly h) dvd f\n 2. smult lc (of_int_poly h) dvd g\n 3. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 4. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "hence \"?h dvd ?ri f'\""], ["proof (prove)\nusing this:\n  h dvd f'\n\ngoal (1 subgoal):\n 1. of_int_poly h dvd of_int_poly f'", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. f' = h * k\n\ngoal (1 subgoal):\n 1. \\<exists>k. of_int_poly f' = of_int_poly h * k", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly h dvd of_int_poly f'\n\ngoal (4 subgoals):\n 1. smult lc (of_int_poly h) dvd f\n 2. smult lc (of_int_poly h) dvd g\n 3. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 4. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "hence \"?h dvd f\""], ["proof (prove)\nusing this:\n  of_int_poly h dvd of_int_poly f'\n\ngoal (1 subgoal):\n 1. of_int_poly h dvd f", "unfolding f"], ["proof (prove)\nusing this:\n  of_int_poly h dvd of_int_poly f'\n\ngoal (1 subgoal):\n 1. of_int_poly h dvd smult a (of_int_poly f')", "by (rule dvd_smult)"], ["proof (state)\nthis:\n  of_int_poly h dvd f\n\ngoal (4 subgoals):\n 1. smult lc (of_int_poly h) dvd f\n 2. smult lc (of_int_poly h) dvd g\n 3. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 4. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "thus dvd_f: \"?gcd dvd f\""], ["proof (prove)\nusing this:\n  of_int_poly h dvd f\n\ngoal (1 subgoal):\n 1. smult lc (of_int_poly h) dvd f", "by (metis dvdE inverse_zero_imp_zero lc_def leading_coeff_neq_0 mult_eq_0_iff smult_dvd_iff)"], ["proof (state)\nthis:\n  smult lc (of_int_poly h) dvd f\n\ngoal (3 subgoals):\n 1. smult lc (of_int_poly h) dvd g\n 2. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 3. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "have \"h dvd g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h dvd g'", "unfolding h_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd f' g' dvd g'", "by auto"], ["proof (state)\nthis:\n  h dvd g'\n\ngoal (3 subgoals):\n 1. smult lc (of_int_poly h) dvd g\n 2. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 3. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "hence \"?h dvd ?ri g'\""], ["proof (prove)\nusing this:\n  h dvd g'\n\ngoal (1 subgoal):\n 1. of_int_poly h dvd of_int_poly g'", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. g' = h * k\n\ngoal (1 subgoal):\n 1. \\<exists>k. of_int_poly g' = of_int_poly h * k", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly h dvd of_int_poly g'\n\ngoal (3 subgoals):\n 1. smult lc (of_int_poly h) dvd g\n 2. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 3. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "hence \"?h dvd g\""], ["proof (prove)\nusing this:\n  of_int_poly h dvd of_int_poly g'\n\ngoal (1 subgoal):\n 1. of_int_poly h dvd g", "unfolding g"], ["proof (prove)\nusing this:\n  of_int_poly h dvd of_int_poly g'\n\ngoal (1 subgoal):\n 1. of_int_poly h dvd smult b (of_int_poly g')", "by (rule dvd_smult)"], ["proof (state)\nthis:\n  of_int_poly h dvd g\n\ngoal (3 subgoals):\n 1. smult lc (of_int_poly h) dvd g\n 2. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 3. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "thus dvd_g: \"?gcd dvd g\""], ["proof (prove)\nusing this:\n  of_int_poly h dvd g\n\ngoal (1 subgoal):\n 1. smult lc (of_int_poly h) dvd g", "by (metis dvdE inverse_zero_imp_zero lc_def leading_coeff_neq_0 mult_eq_0_iff smult_dvd_iff)"], ["proof (state)\nthis:\n  smult lc (of_int_poly h) dvd g\n\ngoal (2 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)\n 2. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "show \"normalize ?gcd = ?gcd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)", "by (cases \"lc = 0\")\n        (simp_all add: normalize_poly_def pCons_one field_simps lc_def)"], ["proof (state)\nthis:\n  normalize (smult lc (of_int_poly h)) = smult lc (of_int_poly h)\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "assume dvd: \"k dvd f\" \"k dvd g\""], ["proof (state)\nthis:\n  k dvd f\n  k dvd g\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "obtain k' c where kck: \"rat_to_normalized_int_poly k = (c,k')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c k'.\n        rat_to_normalized_int_poly k = (c, k') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  rat_to_normalized_int_poly k = (c, k')\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "from rat_to_normalized_int_poly[OF this]"], ["proof (chain)\npicking this:\n  k = smult c (of_int_poly k')\n  0 < c\n  k \\<noteq> 0 \\<Longrightarrow> content k' = 1\n  degree k' = degree k", "have k: \"k = smult c (?ri k')\" and c: \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  k = smult c (of_int_poly k')\n  0 < c\n  k \\<noteq> 0 \\<Longrightarrow> content k' = 1\n  degree k' = degree k\n\ngoal (1 subgoal):\n 1. k = smult c (of_int_poly k') &&& c \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  k = smult c (of_int_poly k')\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "from dvd(1)"], ["proof (chain)\npicking this:\n  k dvd f", "have kf: \"k dvd ?ri f'\""], ["proof (prove)\nusing this:\n  k dvd f\n\ngoal (1 subgoal):\n 1. k dvd of_int_poly f'", "unfolding f"], ["proof (prove)\nusing this:\n  k dvd smult a (of_int_poly f')\n\ngoal (1 subgoal):\n 1. k dvd of_int_poly f'", "using a"], ["proof (prove)\nusing this:\n  k dvd smult a (of_int_poly f')\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k dvd of_int_poly f'", "by (rule dvd_smult_cancel)"], ["proof (state)\nthis:\n  k dvd of_int_poly f'\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "from dvd(2)"], ["proof (chain)\npicking this:\n  k dvd g", "have kg: \"k dvd ?ri g'\""], ["proof (prove)\nusing this:\n  k dvd g\n\ngoal (1 subgoal):\n 1. k dvd of_int_poly g'", "unfolding g"], ["proof (prove)\nusing this:\n  k dvd smult b (of_int_poly g')\n\ngoal (1 subgoal):\n 1. k dvd of_int_poly g'", "using b"], ["proof (prove)\nusing this:\n  k dvd smult b (of_int_poly g')\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k dvd of_int_poly g'", "by (rule dvd_smult_cancel)"], ["proof (state)\nthis:\n  k dvd of_int_poly g'\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "from kf kg"], ["proof (chain)\npicking this:\n  k dvd of_int_poly f'\n  k dvd of_int_poly g'", "obtain kf kg where kf: \"?ri f' = k * kf\" and kg: \"?ri g' = k * kg\""], ["proof (prove)\nusing this:\n  k dvd of_int_poly f'\n  k dvd of_int_poly g'\n\ngoal (1 subgoal):\n 1. (\\<And>kf kg.\n        \\<lbrakk>of_int_poly f' = k * kf; of_int_poly g' = k * kg\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>ka. of_int_poly f' = k * ka\n  \\<exists>ka. of_int_poly g' = k * ka\n\ngoal (1 subgoal):\n 1. (\\<And>kf kg.\n        \\<lbrakk>of_int_poly f' = k * kf; of_int_poly g' = k * kg\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  of_int_poly f' = k * kf\n  of_int_poly g' = k * kg\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "from rat_to_int_factor_explicit[OF kf kck]"], ["proof (chain)\npicking this:\n  \\<exists>r. f' = k' * smult (content f') r", "have kf: \"k' dvd f'\""], ["proof (prove)\nusing this:\n  \\<exists>r. f' = k' * smult (content f') r\n\ngoal (1 subgoal):\n 1. k' dvd f'", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>r. f' = k' * smult (content f') r\n\ngoal (1 subgoal):\n 1. \\<exists>k. f' = k' * k", "by blast"], ["proof (state)\nthis:\n  k' dvd f'\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "from rat_to_int_factor_explicit[OF kg kck]"], ["proof (chain)\npicking this:\n  \\<exists>r. g' = k' * smult (content g') r", "have kg: \"k' dvd g'\""], ["proof (prove)\nusing this:\n  \\<exists>r. g' = k' * smult (content g') r\n\ngoal (1 subgoal):\n 1. k' dvd g'", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>r. g' = k' * smult (content g') r\n\ngoal (1 subgoal):\n 1. \\<exists>k. g' = k' * k", "by blast"], ["proof (state)\nthis:\n  k' dvd g'\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "from kf kg"], ["proof (chain)\npicking this:\n  k' dvd f'\n  k' dvd g'", "have \"k' dvd h\""], ["proof (prove)\nusing this:\n  k' dvd f'\n  k' dvd g'\n\ngoal (1 subgoal):\n 1. k' dvd h", "unfolding h_def"], ["proof (prove)\nusing this:\n  k' dvd f'\n  k' dvd g'\n\ngoal (1 subgoal):\n 1. k' dvd gcd f' g'", "by simp"], ["proof (state)\nthis:\n  k' dvd h\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "hence \"?ri k' dvd ?ri h\""], ["proof (prove)\nusing this:\n  k' dvd h\n\ngoal (1 subgoal):\n 1. of_int_poly k' dvd of_int_poly h", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. h = k' * k\n\ngoal (1 subgoal):\n 1. \\<exists>k. of_int_poly h = of_int_poly k' * k", "by (auto simp: hom_distribs)"], ["proof (state)\nthis:\n  of_int_poly k' dvd of_int_poly h\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "hence \"k dvd ?ri h\""], ["proof (prove)\nusing this:\n  of_int_poly k' dvd of_int_poly h\n\ngoal (1 subgoal):\n 1. k dvd of_int_poly h", "unfolding k"], ["proof (prove)\nusing this:\n  of_int_poly k' dvd of_int_poly h\n\ngoal (1 subgoal):\n 1. smult c (of_int_poly k') dvd of_int_poly h", "using c"], ["proof (prove)\nusing this:\n  of_int_poly k' dvd of_int_poly h\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. smult c (of_int_poly k') dvd of_int_poly h", "by (rule smult_dvd)"], ["proof (state)\nthis:\n  k dvd of_int_poly h\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>d dvd f; d dvd g\\<rbrakk>\n       \\<Longrightarrow> d dvd smult lc (of_int_poly h)", "thus \"k dvd ?gcd\""], ["proof (prove)\nusing this:\n  k dvd of_int_poly h\n\ngoal (1 subgoal):\n 1. k dvd smult lc (of_int_poly h)", "by (rule dvd_smult)"], ["proof (state)\nthis:\n  k dvd smult lc (of_int_poly h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gcd_rat_poly f g = gcd f g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gcd_rat_poly_unfold[code_unfold]: \"gcd = gcd_rat_poly\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd = gcd_rat_poly", "by simp"], ["", "end"]]}