{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization/Missing_Polynomial_Factorial.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization", "problem_names": ["lemma gcd_poly_code_code[code]: \"gcd_poly_code p q =\n           (if p = 0 then normalize q else if q = 0 then normalize p else let\n              c1 = content p;\n              c2 = content q;\n              p' = map_poly (\\<lambda> x. x div c1) p;\n              q' = map_poly (\\<lambda> x. x div c2) q\n              in smult (gcd c1 c2) (gcd_poly_code_aux p' q'))\"", "lemma gcd_smult: fixes f g :: \"'a :: {factorial_ring_gcd,semiring_gcd_mult_normalize} poly\"\n  defines cf: \"cf \\<equiv> content f\"\n  and cg: \"cg \\<equiv> content g\"\nshows \"gcd (smult a f) g = (if a = 0 \\<or> f = 0 then normalize g else\n  smult (gcd a (cg div (gcd cf cg))) (gcd f g))\"", "lemma gcd_smult_ex: assumes \"a \\<noteq> 0\"\n  shows \"\\<exists> b. gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> 0\"", "lemma primitive_part_idemp[simp]:\n  fixes f :: \"'a :: {semiring_gcd,normalization_semidom_multiplicative} poly\"\n  shows \"primitive_part (primitive_part f) = primitive_part f\"", "lemma content_gcd_primitive:\n   \"f \\<noteq> 0 \\<Longrightarrow> content (gcd (primitive_part f) g) = 1\"\n   \"f \\<noteq> 0 \\<Longrightarrow> content (gcd (primitive_part f) (primitive_part g)) = 1\"", "lemma content_gcd_content: \"content (gcd f g) = gcd (content f) (content g)\"\n  (is \"?l = ?r\")", "lemma gcd_primitive_part:\n  \"gcd (primitive_part f) (primitive_part g) = normalize (primitive_part (gcd f g))\"", "lemma primitive_part_gcd: \"primitive_part (gcd f g)\n  = unit_factor (gcd f g) * gcd (primitive_part f) (primitive_part g)\"", "lemma primitive_part_normalize: \n  fixes f :: \"'a :: {semiring_gcd,idom_divide,normalization_semidom_multiplicative} poly\"\n  shows \"primitive_part (normalize f) = normalize (primitive_part f)\"", "lemma length_coeffs_primitive_part[simp]: \"length (coeffs (primitive_part f)) = length (coeffs f)\"", "lemma degree_unit_factor[simp]: \"degree (unit_factor f) = 0\"", "lemma degree_normalize[simp]: \"degree (normalize f) = degree f\"", "lemma content_iff: \"x dvd content p \\<longleftrightarrow> (\\<forall> c \\<in> set (coeffs p). x dvd c)\"", "lemma is_unit_field_poly[simp]: \"(p::'a::field poly) dvd 1 \\<longleftrightarrow> p \\<noteq> 0 \\<and> degree p = 0\"", "lemma primitiveI:\n  assumes \"(\\<And>x. (\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y) \\<Longrightarrow> x dvd 1)\"\n  shows \"primitive f\"", "lemma primitiveD:\n  assumes \"primitive f\"\n  shows \"(\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y) \\<Longrightarrow> x dvd 1\"", "lemma not_primitiveE:\n  assumes \"\\<not> primitive f\"\n      and \"\\<And>x. (\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y) \\<Longrightarrow> \\<not> x dvd 1 \\<Longrightarrow> thesis\"\n  shows thesis", "lemma primitive_iff_content_eq_1[simp]:\n  fixes f :: \"'a :: semiring_gcd poly\"\n  shows \"primitive f \\<longleftrightarrow> content f = 1\"", "lemma primitive_prod_list:\n  fixes fs :: \"'a :: {factorial_semiring,semiring_Gcd,normalization_semidom_multiplicative} poly list\"\n  assumes \"primitive (prod_list fs)\" and \"f \\<in> set fs\" shows \"primitive f\"", "lemma irreducible_imp_primitive:\n  fixes f :: \"'a :: {idom,semiring_gcd} poly\"\n  assumes irr: \"irreducible f\" and deg: \"degree f \\<noteq> 0\" shows \"primitive f\"", "lemma irreducible_primitive_connect:\n  fixes f :: \"'a :: {idom,semiring_gcd} poly\"\n  assumes cf: \"primitive f\" shows \"irreducible\\<^sub>d f \\<longleftrightarrow> irreducible f\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma deg_not_zero_imp_not_unit: \n  fixes f:: \"'a::{idom_divide,semidom_divide_unit_factor} poly\"\n  assumes deg_f: \"degree f > 0\"\n  shows \"\\<not> is_unit f\"", "lemma content_pCons[simp]: \"content (pCons a p) = gcd a (content p)\"", "lemma content_field_poly:\n  fixes f :: \"'a :: {field,semiring_gcd} poly\"\n  shows \"content f = (if f = 0 then 0 else 1)\""], "translations": [["", "lemma gcd_poly_code_code[code]: \"gcd_poly_code p q =\n           (if p = 0 then normalize q else if q = 0 then normalize p else let\n              c1 = content p;\n              c2 = content q;\n              p' = map_poly (\\<lambda> x. x div c1) p;\n              q' = map_poly (\\<lambda> x. x div c2) q\n              in smult (gcd c1 c2) (gcd_poly_code_aux p' q'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd_poly_code p q =\n    (if p = 0 then normalize q\n     else if q = 0 then normalize p\n          else let c1 = content p; c2 = content q;\n                   p' = map_poly (\\<lambda>x. x div c1) p;\n                   q' = map_poly (\\<lambda>x. x div c2) q\n               in smult (gcd c1 c2) (gcd_poly_code_aux p' q'))", "unfolding gcd_poly_code_def Let_def primitive_part_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if p = 0 then normalize q\n     else if q = 0 then normalize p\n          else smult (gcd (content p) (content q))\n                (gcd_poly_code_aux\n                  (map_poly (\\<lambda>x. x div content p) p)\n                  (map_poly (\\<lambda>x. x div content q) q))) =\n    (if p = 0 then normalize q\n     else if q = 0 then normalize p\n          else smult (gcd (content p) (content q))\n                (gcd_poly_code_aux\n                  (map_poly (\\<lambda>x. x div content p) p)\n                  (map_poly (\\<lambda>x. x div content q) q)))", "by simp"], ["", "lemma gcd_smult: fixes f g :: \"'a :: {factorial_ring_gcd,semiring_gcd_mult_normalize} poly\"\n  defines cf: \"cf \\<equiv> content f\"\n  and cg: \"cg \\<equiv> content g\"\nshows \"gcd (smult a f) g = (if a = 0 \\<or> f = 0 then normalize g else\n  smult (gcd a (cg div (gcd cf cg))) (gcd f g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "proof (cases \"a = 0 \\<or> f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "case False"], ["proof (state)\nthis:\n  \\<not> (a = (0::'a) \\<or> f = 0)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "let ?c = \"content\""], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "let ?pp = primitive_part"], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "let ?ua = \"unit_factor a\""], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "let ?na = \"normalize a\""], ["proof (state)\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "define H where \"H = gcd (?c f) (?c g)\""], ["proof (state)\nthis:\n  H = gcd (content f) (content g)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"H dvd ?c f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H dvd content f", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (content f) (content g) dvd content f", "by auto"], ["proof (state)\nthis:\n  H dvd content f\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "then"], ["proof (chain)\npicking this:\n  H dvd content f", "obtain F where fh: \"?c f = H * F\""], ["proof (prove)\nusing this:\n  H dvd content f\n\ngoal (1 subgoal):\n 1. (\\<And>F. content f = H * F \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. content f = H * k\n\ngoal (1 subgoal):\n 1. (\\<And>F. content f = H * F \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  content f = H * F\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "from False"], ["proof (chain)\npicking this:\n  \\<not> (a = (0::'a) \\<or> f = 0)", "have cf0: \"?c f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> (a = (0::'a) \\<or> f = 0)\n\ngoal (1 subgoal):\n 1. content f \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  content f \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "hence H: \"H \\<noteq> 0\""], ["proof (prove)\nusing this:\n  content f \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. H \\<noteq> (0::'a)", "unfolding H_def"], ["proof (prove)\nusing this:\n  content f \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. gcd (content f) (content g) \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  H \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "from arg_cong[OF fh, of \"\\<lambda> f. f div H\"] H"], ["proof (chain)\npicking this:\n  content f div H = H * F div H\n  H \\<noteq> (0::'a)", "have F: \"F = ?c f div H\""], ["proof (prove)\nusing this:\n  content f div H = H * F div H\n  H \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. F = content f div H", "by auto"], ["proof (state)\nthis:\n  F = content f div H\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"H dvd ?c g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H dvd content g", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (content f) (content g) dvd content g", "by auto"], ["proof (state)\nthis:\n  H dvd content g\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "then"], ["proof (chain)\npicking this:\n  H dvd content g", "obtain G where gh: \"?c g = H * G\""], ["proof (prove)\nusing this:\n  H dvd content g\n\ngoal (1 subgoal):\n 1. (\\<And>G. content g = H * G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dvd_def"], ["proof (prove)\nusing this:\n  \\<exists>k. content g = H * k\n\ngoal (1 subgoal):\n 1. (\\<And>G. content g = H * G \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  content g = H * G\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "from arg_cong[OF gh, of \"\\<lambda> f. f div H\"] H"], ["proof (chain)\npicking this:\n  content g div H = H * G div H\n  H \\<noteq> (0::'a)", "have G: \"G = ?c g div H\""], ["proof (prove)\nusing this:\n  content g div H = H * G div H\n  H \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. G = content g div H", "by auto"], ["proof (state)\nthis:\n  G = content g div H\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"coprime F G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime F G", "using H"], ["proof (prove)\nusing this:\n  H \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coprime F G", "unfolding F G H_def"], ["proof (prove)\nusing this:\n  gcd (content f) (content g) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. coprime (content f div gcd (content f) (content g))\n     (content g div gcd (content f) (content g))", "using cf0 div_gcd_coprime"], ["proof (prove)\nusing this:\n  gcd (content f) (content g) \\<noteq> (0::'a)\n  content f \\<noteq> (0::'a)\n  ?a \\<noteq> (0::?'a) \\<or> ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  coprime (?a div gcd ?a ?b) (?b div gcd ?a ?b)\n\ngoal (1 subgoal):\n 1. coprime (content f div gcd (content f) (content g))\n     (content g div gcd (content f) (content g))", "by blast"], ["proof (state)\nthis:\n  coprime F G\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"is_unit ?ua\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit (unit_factor a)", "using False"], ["proof (prove)\nusing this:\n  \\<not> (a = (0::'a) \\<or> f = 0)\n\ngoal (1 subgoal):\n 1. is_unit (unit_factor a)", "by simp"], ["proof (state)\nthis:\n  is_unit (unit_factor a)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "then"], ["proof (chain)\npicking this:\n  is_unit (unit_factor a)", "have ua: \"is_unit [: ?ua :]\""], ["proof (prove)\nusing this:\n  is_unit (unit_factor a)\n\ngoal (1 subgoal):\n 1. is_unit [:unit_factor a:]", "by (simp add: is_unit_const_poly_iff)"], ["proof (state)\nthis:\n  is_unit [:unit_factor a:]\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"gcd (smult a f) g = smult (gcd (?na * ?c f) (?c g))\n     (gcd (smult ?ua (?pp f)) (?pp g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    smult (gcd (normalize a * content f) (content g))\n     (gcd (smult (unit_factor a) (primitive_part f)) (primitive_part g))", "unfolding gcd_poly_decompose[of \"smult a f\"]\n    content_smult primitive_part_smult"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (gcd (normalize a * content f) (content g))\n     (gcd (smult (unit_factor a) (primitive_part f)) (primitive_part g)) =\n    smult (gcd (normalize a * content f) (content g))\n     (gcd (smult (unit_factor a) (primitive_part f)) (primitive_part g))", "by simp"], ["proof (state)\nthis:\n  gcd (smult a f) g =\n  smult (gcd (normalize a * content f) (content g))\n   (gcd (smult (unit_factor a) (primitive_part f)) (primitive_part g))\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  gcd (smult a f) g =\n  smult (gcd (normalize a * content f) (content g))\n   (gcd (smult (unit_factor a) (primitive_part f)) (primitive_part g))\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"smult ?ua (?pp f) = ?pp f * [: ?ua :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (unit_factor a) (primitive_part f) =\n    primitive_part f * [:unit_factor a:]", "by simp"], ["proof (state)\nthis:\n  smult (unit_factor a) (primitive_part f) =\n  primitive_part f * [:unit_factor a:]\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  smult (unit_factor a) (primitive_part f) =\n  primitive_part f * [:unit_factor a:]\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"gcd \\<dots> (?pp g) = gcd (?pp f) (?pp g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (primitive_part f * [:unit_factor a:]) (primitive_part g) =\n    gcd (primitive_part f) (primitive_part g)", "unfolding gcd_mult_unit1[OF ua]"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (primitive_part f) (primitive_part g) =\n    gcd (primitive_part f) (primitive_part g)", ".."], ["proof (state)\nthis:\n  gcd (primitive_part f * [:unit_factor a:]) (primitive_part g) =\n  gcd (primitive_part f) (primitive_part g)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  gcd (primitive_part f * [:unit_factor a:]) (primitive_part g) =\n  gcd (primitive_part f) (primitive_part g)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"gcd (?na * ?c f) (?c g) = gcd ((?na * F) * H) (G * H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (normalize a * content f) (content g) =\n    gcd (normalize a * F * H) (G * H)", "unfolding fh gh"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (normalize a * (H * F)) (H * G) = gcd (normalize a * F * H) (G * H)", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  gcd (normalize a * content f) (content g) =\n  gcd (normalize a * F * H) (G * H)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  gcd (normalize a * content f) (content g) =\n  gcd (normalize a * F * H) (G * H)\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"\\<dots> = gcd (?na * F) G * normalize H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (normalize a * F * H) (G * H) =\n    gcd (normalize a * F) G * normalize H", "unfolding gcd_mult_right gcd.commute[of G]"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (gcd (normalize a * F) G * H) =\n    gcd (normalize a * F) G * normalize H", "by (simp add: normalize_mult)"], ["proof (state)\nthis:\n  gcd (normalize a * F * H) (G * H) = gcd (normalize a * F) G * normalize H\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  gcd (normalize a * F * H) (G * H) = gcd (normalize a * F) G * normalize H\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"normalize H = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize H = H", "by (metis H_def normalize_gcd)"], ["proof (state)\nthis:\n  normalize H = H\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "finally"], ["proof (chain)\npicking this:\n  gcd (smult a f) g =\n  smult (gcd (normalize a * F) G * H)\n   (gcd (primitive_part f) (primitive_part g))", "have \"gcd (smult a f) g = smult (gcd (?na * F) G) (smult  H (gcd (?pp f) (?pp g)))\""], ["proof (prove)\nusing this:\n  gcd (smult a f) g =\n  smult (gcd (normalize a * F) G * H)\n   (gcd (primitive_part f) (primitive_part g))\n\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    smult (gcd (normalize a * F) G)\n     (smult H (gcd (primitive_part f) (primitive_part g)))", "by simp"], ["proof (state)\nthis:\n  gcd (smult a f) g =\n  smult (gcd (normalize a * F) G)\n   (smult H (gcd (primitive_part f) (primitive_part g)))\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  gcd (smult a f) g =\n  smult (gcd (normalize a * F) G)\n   (smult H (gcd (primitive_part f) (primitive_part g)))\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"smult H (gcd (?pp f) (?pp g)) = gcd f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smult H (gcd (primitive_part f) (primitive_part g)) = gcd f g", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult (gcd (content f) (content g))\n     (gcd (primitive_part f) (primitive_part g)) =\n    gcd f g", "by (rule gcd_poly_decompose[symmetric])"], ["proof (state)\nthis:\n  smult H (gcd (primitive_part f) (primitive_part g)) = gcd f g\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  smult H (gcd (primitive_part f) (primitive_part g)) = gcd f g\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"gcd (?na * F) G = gcd (F * ?na) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (normalize a * F) G = gcd (F * normalize a) G", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  gcd (normalize a * F) G = gcd (F * normalize a) G\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "also"], ["proof (state)\nthis:\n  gcd (normalize a * F) G = gcd (F * normalize a) G\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "have \"\\<dots> = gcd ?na G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (F * normalize a) G = gcd (normalize a) G", "using \\<open>coprime F G\\<close>"], ["proof (prove)\nusing this:\n  coprime F G\n\ngoal (1 subgoal):\n 1. gcd (F * normalize a) G = gcd (normalize a) G", "by (simp add: gcd_mult_right_left_cancel ac_simps)"], ["proof (state)\nthis:\n  gcd (F * normalize a) G = gcd (normalize a) G\n\ngoal (2 subgoals):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n 2. \\<not> (a = (0::'a) \\<or> f = 0) \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "finally"], ["proof (chain)\npicking this:\n  gcd (smult a f) g = smult (gcd (normalize a) G) (gcd f g)", "show ?thesis"], ["proof (prove)\nusing this:\n  gcd (smult a f) g = smult (gcd (normalize a) G) (gcd f g)\n\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "unfolding G H_def cg cf"], ["proof (prove)\nusing this:\n  gcd (smult a f) g =\n  smult (gcd (normalize a) (content g div gcd (content f) (content g)))\n   (gcd f g)\n\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (content g div gcd (content f) (content g)))\n           (gcd f g))", "using False"], ["proof (prove)\nusing this:\n  gcd (smult a f) g =\n  smult (gcd (normalize a) (content g div gcd (content f) (content g)))\n   (gcd f g)\n  \\<not> (a = (0::'a) \\<or> f = 0)\n\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (content g div gcd (content f) (content g)))\n           (gcd f g))", "by simp"], ["proof (state)\nthis:\n  gcd (smult a f) g =\n  (if a = (0::'a) \\<or> f = 0 then normalize g\n   else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n\ngoal (1 subgoal):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "case True"], ["proof (state)\nthis:\n  a = (0::'a) \\<or> f = 0\n\ngoal (1 subgoal):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "hence \"gcd (smult a f) g = normalize g\""], ["proof (prove)\nusing this:\n  a = (0::'a) \\<or> f = 0\n\ngoal (1 subgoal):\n 1. gcd (smult a f) g = normalize g", "by (cases \"a = 0\", auto)"], ["proof (state)\nthis:\n  gcd (smult a f) g = normalize g\n\ngoal (1 subgoal):\n 1. a = (0::'a) \\<or> f = 0 \\<Longrightarrow>\n    gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "thus ?thesis"], ["proof (prove)\nusing this:\n  gcd (smult a f) g = normalize g\n\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "using True"], ["proof (prove)\nusing this:\n  gcd (smult a f) g = normalize g\n  a = (0::'a) \\<or> f = 0\n\ngoal (1 subgoal):\n 1. gcd (smult a f) g =\n    (if a = (0::'a) \\<or> f = 0 then normalize g\n     else smult (gcd a (cg div gcd cf cg)) (gcd f g))", "by simp"], ["proof (state)\nthis:\n  gcd (smult a f) g =\n  (if a = (0::'a) \\<or> f = 0 then normalize g\n   else smult (gcd a (cg div gcd cf cg)) (gcd f g))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gcd_smult_ex: assumes \"a \\<noteq> 0\"\n  shows \"\\<exists> b. gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "case True"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = 0\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "by (intro exI[of _ 1], auto)"], ["proof (state)\nthis:\n  \\<exists>b.\n     gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "hence id: \"(a = 0 \\<or> f = 0) = False\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (a = (0::'a) \\<or> f = 0) = False", "using assms"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (a = (0::'a) \\<or> f = 0) = False", "by auto"], ["proof (state)\nthis:\n  (a = (0::'a) \\<or> f = 0) = False\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)", "unfolding gcd_smult id if_False"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       smult (gcd a (content g div gcd (content f) (content g))) (gcd f g) =\n       smult b (gcd f g) \\<and>\n       b \\<noteq> (0::'a)", "by (intro exI conjI, rule refl, insert assms, auto)"], ["proof (state)\nthis:\n  \\<exists>b.\n     gcd (smult a f) g = smult b (gcd f g) \\<and> b \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primitive_part_idemp[simp]:\n  fixes f :: \"'a :: {semiring_gcd,normalization_semidom_multiplicative} poly\"\n  shows \"primitive_part (primitive_part f) = primitive_part f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive_part (primitive_part f) = primitive_part f", "by (metis content_primitive_part[of f] primitive_part_eq_0_iff primitive_part_prim)"], ["", "lemma content_gcd_primitive:\n   \"f \\<noteq> 0 \\<Longrightarrow> content (gcd (primitive_part f) g) = 1\"\n   \"f \\<noteq> 0 \\<Longrightarrow> content (gcd (primitive_part f) (primitive_part g)) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<noteq> 0 \\<Longrightarrow>\n     content (gcd (primitive_part f) g) = (1::'a)) &&&\n    (f \\<noteq> 0 \\<Longrightarrow>\n     content (gcd (primitive_part f) (primitive_part g)) = (1::'a))", "by (metis (no_types, lifting) content_dvd_contentI content_primitive_part gcd_dvd1 is_unit_content_iff)+"], ["", "lemma content_gcd_content: \"content (gcd f g) = gcd (content f) (content g)\"\n  (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "let ?c = \"content\""], ["proof (state)\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "have \"?l = normalize (gcd (?c f) (?c g)) *\n    ?c (gcd (primitive_part f) (primitive_part g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content (gcd f g) =\n    normalize (gcd (content f) (content g)) *\n    content (gcd (primitive_part f) (primitive_part g))", "unfolding gcd_poly_decompose[of f g] content_smult"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (gcd (content f) (content g)) *\n    content (gcd (primitive_part f) (primitive_part g)) =\n    normalize (gcd (content f) (content g)) *\n    content (gcd (primitive_part f) (primitive_part g))", ".."], ["proof (state)\nthis:\n  content (gcd f g) =\n  normalize (gcd (content f) (content g)) *\n  content (gcd (primitive_part f) (primitive_part g))\n\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "also"], ["proof (state)\nthis:\n  content (gcd f g) =\n  normalize (gcd (content f) (content g)) *\n  content (gcd (primitive_part f) (primitive_part g))\n\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "have \"\\<dots> = gcd (?c f) (?c g) *\n    ?c (gcd (primitive_part f) (primitive_part g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (gcd (content f) (content g)) *\n    content (gcd (primitive_part f) (primitive_part g)) =\n    gcd (content f) (content g) *\n    content (gcd (primitive_part f) (primitive_part g))", "by simp"], ["proof (state)\nthis:\n  normalize (gcd (content f) (content g)) *\n  content (gcd (primitive_part f) (primitive_part g)) =\n  gcd (content f) (content g) *\n  content (gcd (primitive_part f) (primitive_part g))\n\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "also"], ["proof (state)\nthis:\n  normalize (gcd (content f) (content g)) *\n  content (gcd (primitive_part f) (primitive_part g)) =\n  gcd (content f) (content g) *\n  content (gcd (primitive_part f) (primitive_part g))\n\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "have \"\\<dots> = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (content f) (content g) *\n    content (gcd (primitive_part f) (primitive_part g)) =\n    gcd (content f) (content g)", "using content_gcd_primitive[of f g]"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<Longrightarrow>\n  content (gcd (primitive_part f) g) = (1::'a)\n  f \\<noteq> 0 \\<Longrightarrow>\n  content (gcd (primitive_part f) (primitive_part g)) = (1::'a)\n\ngoal (1 subgoal):\n 1. gcd (content f) (content g) *\n    content (gcd (primitive_part f) (primitive_part g)) =\n    gcd (content f) (content g)", "by (metis (no_types, lifting) content_dvd_contentI content_eq_zero_iff\n    content_primitive_part gcd_dvd2 gcd_eq_0_iff is_unit_content_iff mult_cancel_left1)"], ["proof (state)\nthis:\n  gcd (content f) (content g) *\n  content (gcd (primitive_part f) (primitive_part g)) =\n  gcd (content f) (content g)\n\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "finally"], ["proof (chain)\npicking this:\n  content (gcd f g) = gcd (content f) (content g)", "show ?thesis"], ["proof (prove)\nusing this:\n  content (gcd f g) = gcd (content f) (content g)\n\ngoal (1 subgoal):\n 1. content (gcd f g) = gcd (content f) (content g)", "."], ["proof (state)\nthis:\n  content (gcd f g) = gcd (content f) (content g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gcd_primitive_part:\n  \"gcd (primitive_part f) (primitive_part g) = normalize (primitive_part (gcd f g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "proof(cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "case True"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "unfolding gcd_poly_decompose[of f g] gcd_0_left primitive_part_0 True"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (primitive_part g) = normalize (primitive_part (normalize g))", "by (simp add: associatedI primitive_part_dvd_primitive_partI)"], ["proof (state)\nthis:\n  gcd (primitive_part f) (primitive_part g) =\n  normalize (primitive_part (gcd f g))\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "have \"normalize 1 = normalize (unit_factor (gcd (content f) (content g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (1::'a) =\n    normalize (unit_factor (gcd (content f) (content g)))", "by (simp add: False)"], ["proof (state)\nthis:\n  normalize (1::'a) = normalize (unit_factor (gcd (content f) (content g)))\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "then"], ["proof (chain)\npicking this:\n  normalize (1::'a) = normalize (unit_factor (gcd (content f) (content g)))", "show ?thesis"], ["proof (prove)\nusing this:\n  normalize (1::'a) = normalize (unit_factor (gcd (content f) (content g)))\n\ngoal (1 subgoal):\n 1. gcd (primitive_part f) (primitive_part g) =\n    normalize (primitive_part (gcd f g))", "unfolding gcd_poly_decompose[of f g]"], ["proof (prove)\nusing this:\n  normalize (1::'a) = normalize (unit_factor (gcd (content f) (content g)))\n\ngoal (1 subgoal):\n 1. gcd (primitive_part f) (primitive_part g) =\n    normalize\n     (primitive_part\n       (smult (gcd (content f) (content g))\n         (gcd (primitive_part f) (primitive_part g))))", "by (metis (no_types) Polynomial.normalize_smult content_gcd_primitive(1)[OF False] content_times_primitive_part normalize_gcd primitive_part_smult)"], ["proof (state)\nthis:\n  gcd (primitive_part f) (primitive_part g) =\n  normalize (primitive_part (gcd f g))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primitive_part_gcd: \"primitive_part (gcd f g)\n  = unit_factor (gcd f g) * gcd (primitive_part f) (primitive_part g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive_part (gcd f g) =\n    unit_factor (gcd f g) * gcd (primitive_part f) (primitive_part g)", "unfolding gcd_primitive_part"], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive_part (gcd f g) =\n    unit_factor (gcd f g) * normalize (primitive_part (gcd f g))", "by (metis (no_types, lifting)\n  content_times_primitive_part gcd.normalize_idem mult_cancel_left2 mult_smult_left\n  normalize_eq_0_iff normalize_mult_unit_factor primitive_part_eq_0_iff\n  smult_content_normalize_primitive_part unit_factor_mult_normalize)"], ["", "lemma primitive_part_normalize: \n  fixes f :: \"'a :: {semiring_gcd,idom_divide,normalization_semidom_multiplicative} poly\"\n  shows \"primitive_part (normalize f) = normalize (primitive_part f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive_part (normalize f) = normalize (primitive_part f)", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "case True"], ["proof (state)\nthis:\n  f = 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = 0\n\ngoal (1 subgoal):\n 1. primitive_part (normalize f) = normalize (primitive_part f)", "by simp"], ["proof (state)\nthis:\n  primitive_part (normalize f) = normalize (primitive_part f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "have \"normalize (content (normalize (primitive_part f))) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize (content (normalize (primitive_part f))) = (1::'a)", "using content_primitive_part[OF False] content_dvd content_const\n          content_dvd_contentI dvd_normalize_iff is_unit_content_iff"], ["proof (prove)\nusing this:\n  content (primitive_part f) = (1::'a)\n  [:content ?p:] dvd ?p\n  content [:?c:] = normalize ?c\n  ?p dvd ?q \\<Longrightarrow> content ?p dvd content ?q\n  (?a dvd normalize ?b) = (?a dvd ?b)\n  is_unit (content ?p) = (content ?p = (1::?'a))\n\ngoal (1 subgoal):\n 1. normalize (content (normalize (primitive_part f))) = (1::'a)", "by (metis (no_types))"], ["proof (state)\nthis:\n  normalize (content (normalize (primitive_part f))) = (1::'a)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "then"], ["proof (chain)\npicking this:\n  normalize (content (normalize (primitive_part f))) = (1::'a)", "have \"content (normalize (primitive_part f)) = 1\""], ["proof (prove)\nusing this:\n  normalize (content (normalize (primitive_part f))) = (1::'a)\n\ngoal (1 subgoal):\n 1. content (normalize (primitive_part f)) = (1::'a)", "by fastforce"], ["proof (state)\nthis:\n  content (normalize (primitive_part f)) = (1::'a)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "then"], ["proof (chain)\npicking this:\n  content (normalize (primitive_part f)) = (1::'a)", "have \"content (normalize f) = 1 * content f\""], ["proof (prove)\nusing this:\n  content (normalize (primitive_part f)) = (1::'a)\n\ngoal (1 subgoal):\n 1. content (normalize f) = (1::'a) * content f", "by (metis (no_types) content_smult mult.commute normalize_content\n    smult_content_normalize_primitive_part)"], ["proof (state)\nthis:\n  content (normalize f) = (1::'a) * content f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "then"], ["proof (chain)\npicking this:\n  content (normalize f) = (1::'a) * content f", "have \"content f = content (normalize f)\""], ["proof (prove)\nusing this:\n  content (normalize f) = (1::'a) * content f\n\ngoal (1 subgoal):\n 1. content f = content (normalize f)", "by simp"], ["proof (state)\nthis:\n  content f = content (normalize f)\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    primitive_part (normalize f) = normalize (primitive_part f)", "then"], ["proof (chain)\npicking this:\n  content f = content (normalize f)", "show ?thesis"], ["proof (prove)\nusing this:\n  content f = content (normalize f)\n\ngoal (1 subgoal):\n 1. primitive_part (normalize f) = normalize (primitive_part f)", "unfolding smult_content_normalize_primitive_part[of f,symmetric]"], ["proof (prove)\nusing this:\n  content f = content (smult (content f) (normalize (primitive_part f)))\n\ngoal (1 subgoal):\n 1. primitive_part (smult (content f) (normalize (primitive_part f))) =\n    normalize (primitive_part f)", "by (metis (no_types) False content_times_primitive_part mult.commute mult_cancel_left\n                                   mult_smult_right smult_content_normalize_primitive_part)"], ["proof (state)\nthis:\n  primitive_part (normalize f) = normalize (primitive_part f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_coeffs_primitive_part[simp]: \"length (coeffs (primitive_part f)) = length (coeffs f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (coeffs (primitive_part f)) = length (coeffs f)", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    length (coeffs (primitive_part f)) = length (coeffs f)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (primitive_part f)) = length (coeffs f)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    length (coeffs (primitive_part f)) = length (coeffs f)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (primitive_part f)) = length (coeffs f)", "hence \"length (coeffs f) \\<noteq> 0\" \"length (coeffs (primitive_part f)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. length (coeffs f) \\<noteq> 0 &&&\n    length (coeffs (primitive_part f)) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  length (coeffs f) \\<noteq> 0\n  length (coeffs (primitive_part f)) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    length (coeffs (primitive_part f)) = length (coeffs f)\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    length (coeffs (primitive_part f)) = length (coeffs f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  length (coeffs f) \\<noteq> 0\n  length (coeffs (primitive_part f)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. length (coeffs (primitive_part f)) = length (coeffs f)", "using degree_primitive_part[of f, unfolded degree_eq_length_coeffs]"], ["proof (prove)\nusing this:\n  length (coeffs f) \\<noteq> 0\n  length (coeffs (primitive_part f)) \\<noteq> 0\n  length (coeffs (primitive_part f)) - 1 = length (coeffs f) - 1\n\ngoal (1 subgoal):\n 1. length (coeffs (primitive_part f)) = length (coeffs f)", "by linarith"], ["proof (state)\nthis:\n  length (coeffs (primitive_part f)) = length (coeffs f)\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow>\n    length (coeffs (primitive_part f)) = length (coeffs f)", "qed simp"], ["", "lemma degree_unit_factor[simp]: \"degree (unit_factor f) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (unit_factor f) = 0", "by (simp add: monom_0 unit_factor_poly_def)"], ["", "lemma degree_normalize[simp]: \"degree (normalize f) = degree f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (normalize f) = degree f", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> degree (normalize f) = degree f\n 2. f \\<noteq> 0 \\<Longrightarrow> degree (normalize f) = degree f", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> degree (normalize f) = degree f\n 2. f \\<noteq> 0 \\<Longrightarrow> degree (normalize f) = degree f", "have \"degree f = degree (unit_factor f * normalize f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree f = degree (unit_factor f * normalize f)", "by simp"], ["proof (state)\nthis:\n  degree f = degree (unit_factor f * normalize f)\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> degree (normalize f) = degree f\n 2. f \\<noteq> 0 \\<Longrightarrow> degree (normalize f) = degree f", "also"], ["proof (state)\nthis:\n  degree f = degree (unit_factor f * normalize f)\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> degree (normalize f) = degree f\n 2. f \\<noteq> 0 \\<Longrightarrow> degree (normalize f) = degree f", "have \"\\<dots> = degree (unit_factor f) + degree (normalize f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (unit_factor f * normalize f) =\n    degree (unit_factor f) + degree (normalize f)", "by (rule degree_mult_eq, insert False, auto)"], ["proof (state)\nthis:\n  degree (unit_factor f * normalize f) =\n  degree (unit_factor f) + degree (normalize f)\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> degree (normalize f) = degree f\n 2. f \\<noteq> 0 \\<Longrightarrow> degree (normalize f) = degree f", "finally"], ["proof (chain)\npicking this:\n  degree f = degree (unit_factor f) + degree (normalize f)", "show ?thesis"], ["proof (prove)\nusing this:\n  degree f = degree (unit_factor f) + degree (normalize f)\n\ngoal (1 subgoal):\n 1. degree (normalize f) = degree f", "by simp"], ["proof (state)\nthis:\n  degree (normalize f) = degree f\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> degree (normalize f) = degree f", "qed simp"], ["", "lemma content_iff: \"x dvd content p \\<longleftrightarrow> (\\<forall> c \\<in> set (coeffs p). x dvd c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x dvd content p) = (\\<forall>c\\<in>set (coeffs p). x dvd c)", "by (simp add: content_def dvd_gcd_list_iff)"], ["", "lemma is_unit_field_poly[simp]: \"(p::'a::field poly) dvd 1 \\<longleftrightarrow> p \\<noteq> 0 \\<and> degree p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit p = (p \\<noteq> 0 \\<and> degree p = 0)", "proof(intro iffI conjI, unfold conj_imp_eq_imp_imp)"], ["proof (state)\ngoal (3 subgoals):\n 1. is_unit p \\<Longrightarrow> p \\<noteq> 0\n 2. is_unit p \\<Longrightarrow> degree p = 0\n 3. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "assume \"is_unit p\""], ["proof (state)\nthis:\n  is_unit p\n\ngoal (3 subgoals):\n 1. is_unit p \\<Longrightarrow> p \\<noteq> 0\n 2. is_unit p \\<Longrightarrow> degree p = 0\n 3. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "then"], ["proof (chain)\npicking this:\n  is_unit p", "obtain q where *: \"p * q = 1\""], ["proof (prove)\nusing this:\n  is_unit p\n\ngoal (1 subgoal):\n 1. (\\<And>q. p * q = 1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim dvdE, auto)"], ["proof (state)\nthis:\n  p * q = 1\n\ngoal (3 subgoals):\n 1. is_unit p \\<Longrightarrow> p \\<noteq> 0\n 2. is_unit p \\<Longrightarrow> degree p = 0\n 3. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "from *"], ["proof (chain)\npicking this:\n  p * q = 1", "show p0: \"p \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p * q = 1\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. is_unit p \\<Longrightarrow> degree p = 0\n 2. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "from *"], ["proof (chain)\npicking this:\n  p * q = 1", "have q0: \"q \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p * q = 1\n\ngoal (1 subgoal):\n 1. q \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> 0\n\ngoal (2 subgoals):\n 1. is_unit p \\<Longrightarrow> degree p = 0\n 2. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "from * degree_mult_eq[OF p0 q0]"], ["proof (chain)\npicking this:\n  p * q = 1\n  degree (p * q) = degree p + degree q", "show \"degree p = 0\""], ["proof (prove)\nusing this:\n  p * q = 1\n  degree (p * q) = degree p + degree q\n\ngoal (1 subgoal):\n 1. degree p = 0", "by auto"], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "assume \"degree p = 0\""], ["proof (state)\nthis:\n  degree p = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "from degree0_coeffs[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>a. p = [:a:]", "obtain c where c: \"p = [:c:]\""], ["proof (prove)\nusing this:\n  \\<exists>a. p = [:a:]\n\ngoal (1 subgoal):\n 1. (\\<And>c. p = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  p = [:c:]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "assume \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "with c"], ["proof (chain)\npicking this:\n  p = [:c:]\n  p \\<noteq> 0", "have \"c \\<noteq> 0\""], ["proof (prove)\nusing this:\n  p = [:c:]\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "with c"], ["proof (chain)\npicking this:\n  p = [:c:]\n  c \\<noteq> (0::'a)", "have \"1 = p * [:1/c:]\""], ["proof (prove)\nusing this:\n  p = [:c:]\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. 1 = p * [:(1::'a) / c:]", "by auto"], ["proof (state)\nthis:\n  1 = p * [:(1::'a) / c:]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0; degree p = 0\\<rbrakk> \\<Longrightarrow> is_unit p", "from dvdI[OF this]"], ["proof (chain)\npicking this:\n  is_unit p", "show \"is_unit p\""], ["proof (prove)\nusing this:\n  is_unit p\n\ngoal (1 subgoal):\n 1. is_unit p", "."], ["proof (state)\nthis:\n  is_unit p\n\ngoal:\nNo subgoals!", "qed"], ["", "definition primitive where\n  \"primitive f \\<longleftrightarrow> (\\<forall>x. (\\<forall>y \\<in> set (coeffs f). x dvd y) \\<longrightarrow> x dvd 1)\""], ["", "lemma primitiveI:\n  assumes \"(\\<And>x. (\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y) \\<Longrightarrow> x dvd 1)\"\n  shows \"primitive f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive f", "by (insert assms, auto simp: primitive_def)"], ["", "lemma primitiveD:\n  assumes \"primitive f\"\n  shows \"(\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y) \\<Longrightarrow> x dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y) \\<Longrightarrow>\n    x dvd (1::'a)", "by (insert assms, auto simp: primitive_def)"], ["", "lemma not_primitiveE:\n  assumes \"\\<not> primitive f\"\n      and \"\\<And>x. (\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y) \\<Longrightarrow> \\<not> x dvd 1 \\<Longrightarrow> thesis\"\n  shows thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "by (insert assms, auto simp: primitive_def)"], ["", "lemma primitive_iff_content_eq_1[simp]:\n  fixes f :: \"'a :: semiring_gcd poly\"\n  shows \"primitive f \\<longleftrightarrow> content f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive f = (content f = (1::'a))", "proof(intro iffI primitiveI)"], ["proof (state)\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>content f = (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> is_unit x", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>content f = (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> is_unit x", "assume \"(\\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y)\""], ["proof (state)\nthis:\n  ?y \\<in> set (coeffs f) \\<Longrightarrow> x dvd ?y\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>content f = (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> is_unit x", "from gcd_list_greatest[of \"coeffs f\", OF this]"], ["proof (chain)\npicking this:\n  (\\<And>b.\n      b \\<in> set (coeffs f) \\<Longrightarrow>\n      b \\<in> set (coeffs f)) \\<Longrightarrow>\n  x dvd gcd_list (coeffs f)", "have \"x dvd content f\""], ["proof (prove)\nusing this:\n  (\\<And>b.\n      b \\<in> set (coeffs f) \\<Longrightarrow>\n      b \\<in> set (coeffs f)) \\<Longrightarrow>\n  x dvd gcd_list (coeffs f)\n\ngoal (1 subgoal):\n 1. x dvd content f", "by (simp add: content_def)"], ["proof (state)\nthis:\n  x dvd content f\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>content f = (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> is_unit x", "also"], ["proof (state)\nthis:\n  x dvd content f\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>content f = (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> is_unit x", "assume \"content f = 1\""], ["proof (state)\nthis:\n  content f = (1::'a)\n\ngoal (2 subgoals):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)\n 2. \\<And>x.\n       \\<lbrakk>content f = (1::'a);\n        \\<And>y. y \\<in> set (coeffs f) \\<Longrightarrow> x dvd y\\<rbrakk>\n       \\<Longrightarrow> is_unit x", "finally"], ["proof (chain)\npicking this:\n  is_unit x", "show \"x dvd 1\""], ["proof (prove)\nusing this:\n  is_unit x\n\ngoal (1 subgoal):\n 1. is_unit x", "."], ["proof (state)\nthis:\n  is_unit x\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)", "assume \"primitive f\""], ["proof (state)\nthis:\n  primitive f\n\ngoal (1 subgoal):\n 1. primitive f \\<Longrightarrow> content f = (1::'a)", "from primitiveD[OF this list_gcd[of _ \"coeffs f\"], folded content_def]"], ["proof (chain)\npicking this:\n  (\\<And>y.\n      y \\<in> set (coeffs f) \\<Longrightarrow>\n      y \\<in> set (coeffs f)) \\<Longrightarrow>\n  is_unit (content f)", "show \"content f = 1\""], ["proof (prove)\nusing this:\n  (\\<And>y.\n      y \\<in> set (coeffs f) \\<Longrightarrow>\n      y \\<in> set (coeffs f)) \\<Longrightarrow>\n  is_unit (content f)\n\ngoal (1 subgoal):\n 1. content f = (1::'a)", "by simp"], ["proof (state)\nthis:\n  content f = (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma primitive_prod_list:\n  fixes fs :: \"'a :: {factorial_semiring,semiring_Gcd,normalization_semidom_multiplicative} poly list\"\n  assumes \"primitive (prod_list fs)\" and \"f \\<in> set fs\" shows \"primitive f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive f", "proof (insert assms, induct fs arbitrary: f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>primitive (prod_list []); f \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> primitive f\n 2. \\<And>a fs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>primitive (prod_list fs);\n                    f \\<in> set fs\\<rbrakk>\n                   \\<Longrightarrow> primitive f;\n        primitive (prod_list (a # fs)); f \\<in> set (a # fs)\\<rbrakk>\n       \\<Longrightarrow> primitive f", "case (Cons f' fs)"], ["proof (state)\nthis:\n  \\<lbrakk>primitive (prod_list fs); ?f \\<in> set fs\\<rbrakk>\n  \\<Longrightarrow> primitive ?f\n  primitive (prod_list (f' # fs))\n  f \\<in> set (f' # fs)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>primitive (prod_list []); f \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> primitive f\n 2. \\<And>a fs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>primitive (prod_list fs);\n                    f \\<in> set fs\\<rbrakk>\n                   \\<Longrightarrow> primitive f;\n        primitive (prod_list (a # fs)); f \\<in> set (a # fs)\\<rbrakk>\n       \\<Longrightarrow> primitive f", "from Cons.prems"], ["proof (chain)\npicking this:\n  primitive (prod_list (f' # fs))\n  f \\<in> set (f' # fs)", "have \"is_unit (content f' * content (prod_list fs))\""], ["proof (prove)\nusing this:\n  primitive (prod_list (f' # fs))\n  f \\<in> set (f' # fs)\n\ngoal (1 subgoal):\n 1. is_unit (content f' * content (prod_list fs))", "by (auto simp: content_mult)"], ["proof (state)\nthis:\n  is_unit (content f' * content (prod_list fs))\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>primitive (prod_list []); f \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> primitive f\n 2. \\<And>a fs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>primitive (prod_list fs);\n                    f \\<in> set fs\\<rbrakk>\n                   \\<Longrightarrow> primitive f;\n        primitive (prod_list (a # fs)); f \\<in> set (a # fs)\\<rbrakk>\n       \\<Longrightarrow> primitive f", "from this[unfolded is_unit_mult_iff]"], ["proof (chain)\npicking this:\n  is_unit (content f') \\<and> is_unit (content (prod_list fs))", "have \"content f' = 1\" and \"content (prod_list fs) = 1\""], ["proof (prove)\nusing this:\n  is_unit (content f') \\<and> is_unit (content (prod_list fs))\n\ngoal (1 subgoal):\n 1. content f' = (1::'a) &&& content (prod_list fs) = (1::'a)", "by auto"], ["proof (state)\nthis:\n  content f' = (1::'a)\n  content (prod_list fs) = (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>primitive (prod_list []); f \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> primitive f\n 2. \\<And>a fs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>primitive (prod_list fs);\n                    f \\<in> set fs\\<rbrakk>\n                   \\<Longrightarrow> primitive f;\n        primitive (prod_list (a # fs)); f \\<in> set (a # fs)\\<rbrakk>\n       \\<Longrightarrow> primitive f", "moreover"], ["proof (state)\nthis:\n  content f' = (1::'a)\n  content (prod_list fs) = (1::'a)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>primitive (prod_list []); f \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> primitive f\n 2. \\<And>a fs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>primitive (prod_list fs);\n                    f \\<in> set fs\\<rbrakk>\n                   \\<Longrightarrow> primitive f;\n        primitive (prod_list (a # fs)); f \\<in> set (a # fs)\\<rbrakk>\n       \\<Longrightarrow> primitive f", "from Cons.prems"], ["proof (chain)\npicking this:\n  primitive (prod_list (f' # fs))\n  f \\<in> set (f' # fs)", "have \"f = f' \\<or> f \\<in> set fs\""], ["proof (prove)\nusing this:\n  primitive (prod_list (f' # fs))\n  f \\<in> set (f' # fs)\n\ngoal (1 subgoal):\n 1. f = f' \\<or> f \\<in> set fs", "by auto"], ["proof (state)\nthis:\n  f = f' \\<or> f \\<in> set fs\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>primitive (prod_list []); f \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> primitive f\n 2. \\<And>a fs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>primitive (prod_list fs);\n                    f \\<in> set fs\\<rbrakk>\n                   \\<Longrightarrow> primitive f;\n        primitive (prod_list (a # fs)); f \\<in> set (a # fs)\\<rbrakk>\n       \\<Longrightarrow> primitive f", "ultimately"], ["proof (chain)\npicking this:\n  content f' = (1::'a)\n  content (prod_list fs) = (1::'a)\n  f = f' \\<or> f \\<in> set fs", "show ?case"], ["proof (prove)\nusing this:\n  content f' = (1::'a)\n  content (prod_list fs) = (1::'a)\n  f = f' \\<or> f \\<in> set fs\n\ngoal (1 subgoal):\n 1. primitive f", "using Cons.hyps[of f]"], ["proof (prove)\nusing this:\n  content f' = (1::'a)\n  content (prod_list fs) = (1::'a)\n  f = f' \\<or> f \\<in> set fs\n  \\<lbrakk>primitive (prod_list fs); f \\<in> set fs\\<rbrakk>\n  \\<Longrightarrow> primitive f\n\ngoal (1 subgoal):\n 1. primitive f", "by auto"], ["proof (state)\nthis:\n  primitive f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>primitive (prod_list []); f \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> primitive f", "qed auto"], ["", "lemma irreducible_imp_primitive:\n  fixes f :: \"'a :: {idom,semiring_gcd} poly\"\n  assumes irr: \"irreducible f\" and deg: \"degree f \\<noteq> 0\" shows \"primitive f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. primitive f", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "assume not: \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> primitive f\n\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> primitive f", "have \"\\<not> [:content f:] dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> primitive f\n\ngoal (1 subgoal):\n 1. \\<not> [:content f:] dvd 1", "by simp"], ["proof (state)\nthis:\n  \\<not> [:content f:] dvd 1\n\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> [:content f:] dvd 1\n\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "have \"f = [:content f:] * primitive_part f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = [:content f:] * primitive_part f", "by simp"], ["proof (state)\nthis:\n  f = [:content f:] * primitive_part f\n\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "note Factorial_Ring.irreducibleD[OF irr this]"], ["proof (state)\nthis:\n  [:content f:] dvd 1 \\<or> primitive_part f dvd 1\n\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> [:content f:] dvd 1\n  [:content f:] dvd 1 \\<or> primitive_part f dvd 1", "have \"primitive_part f dvd 1\""], ["proof (prove)\nusing this:\n  \\<not> [:content f:] dvd 1\n  [:content f:] dvd 1 \\<or> primitive_part f dvd 1\n\ngoal (1 subgoal):\n 1. primitive_part f dvd 1", "by auto"], ["proof (state)\nthis:\n  primitive_part f dvd 1\n\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "from this[unfolded poly_dvd_1]"], ["proof (chain)\npicking this:\n  degree (primitive_part f) = 0 \\<and> is_unit (coeff (primitive_part f) 0)", "have \"degree f = 0\""], ["proof (prove)\nusing this:\n  degree (primitive_part f) = 0 \\<and> is_unit (coeff (primitive_part f) 0)\n\ngoal (1 subgoal):\n 1. degree f = 0", "by auto"], ["proof (state)\nthis:\n  degree f = 0\n\ngoal (1 subgoal):\n 1. \\<not> primitive f \\<Longrightarrow> False", "with deg"], ["proof (chain)\npicking this:\n  degree f \\<noteq> 0\n  degree f = 0", "show False"], ["proof (prove)\nusing this:\n  degree f \\<noteq> 0\n  degree f = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma irreducible_primitive_connect:\n  fixes f :: \"'a :: {idom,semiring_gcd} poly\"\n  assumes cf: \"primitive f\" shows \"irreducible\\<^sub>d f \\<longleftrightarrow> irreducible f\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f = irreducible f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. irreducible\\<^sub>d f \\<Longrightarrow> irreducible f\n 2. irreducible f \\<Longrightarrow> irreducible\\<^sub>d f", "assume l: ?l"], ["proof (state)\nthis:\n  irreducible\\<^sub>d f\n\ngoal (2 subgoals):\n 1. irreducible\\<^sub>d f \\<Longrightarrow> irreducible f\n 2. irreducible f \\<Longrightarrow> irreducible\\<^sub>d f", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible f", "proof(rule ccontr, elim not_irreducibleE)"], ["proof (state)\ngoal (3 subgoals):\n 1. f = 0 \\<Longrightarrow> False\n 2. f dvd 1 \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "from l"], ["proof (chain)\npicking this:\n  irreducible\\<^sub>d f", "have deg: \"degree f > 0\""], ["proof (prove)\nusing this:\n  irreducible\\<^sub>d f\n\ngoal (1 subgoal):\n 1. 0 < degree f", "by (auto dest: irreducible\\<^sub>dD)"], ["proof (state)\nthis:\n  0 < degree f\n\ngoal (3 subgoals):\n 1. f = 0 \\<Longrightarrow> False\n 2. f dvd 1 \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "from cf"], ["proof (chain)\npicking this:\n  primitive f", "have f0: \"f \\<noteq> 0\""], ["proof (prove)\nusing this:\n  primitive f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (3 subgoals):\n 1. f = 0 \\<Longrightarrow> False\n 2. f dvd 1 \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f \\<noteq> 0", "show \"f = 0 \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  f = 0 \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. f dvd 1 \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "show \"f dvd 1 \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f dvd 1 \\<Longrightarrow> False", "using deg"], ["proof (prove)\nusing this:\n  0 < degree f\n\ngoal (1 subgoal):\n 1. f dvd 1 \\<Longrightarrow> False", "by (auto simp:poly_dvd_1)"], ["proof (state)\nthis:\n  f dvd 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "assume fab: \"f = a * b\" and a1: \"\\<not> a dvd 1\" and b1: \"\\<not> b dvd 1\""], ["proof (state)\nthis:\n  f = a * b\n  \\<not> a dvd 1\n  \\<not> b dvd 1\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f = a * b\n  \\<not> a dvd 1\n  \\<not> b dvd 1", "have af: \"a dvd f\" and bf: \"b dvd f\""], ["proof (prove)\nusing this:\n  f = a * b\n  \\<not> a dvd 1\n  \\<not> b dvd 1\n\ngoal (1 subgoal):\n 1. a dvd f &&& b dvd f", "by auto"], ["proof (state)\nthis:\n  a dvd f\n  b dvd f\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "with f0"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  a dvd f\n  b dvd f", "have a0: \"a \\<noteq> 0\" and b0: \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  a dvd f\n  b dvd f\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0 &&& b \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> 0\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "from irreducible\\<^sub>dD(2)[OF l, of a] af dvd_imp_degree_le[OF af f0]"], ["proof (chain)\npicking this:\n  \\<lbrakk>degree a < degree f; degree ?r < degree f\\<rbrakk>\n  \\<Longrightarrow> f \\<noteq> a * ?r\n  a dvd f\n  degree a \\<le> degree f", "have \"degree a = 0 \\<or> degree a = degree f\""], ["proof (prove)\nusing this:\n  \\<lbrakk>degree a < degree f; degree ?r < degree f\\<rbrakk>\n  \\<Longrightarrow> f \\<noteq> a * ?r\n  a dvd f\n  degree a \\<le> degree f\n\ngoal (1 subgoal):\n 1. degree a = 0 \\<or> degree a = degree f", "by (metis degree_smult_le irreducible\\<^sub>d_dvd_smult l le_antisym Nat.neq0_conv)"], ["proof (state)\nthis:\n  degree a = 0 \\<or> degree a = degree f\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>f = a * b; \\<not> a dvd 1; \\<not> b dvd 1\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  degree a = 0 \\<or> degree a = degree f", "show False"], ["proof (prove)\nusing this:\n  degree a = 0 \\<or> degree a = degree f\n\ngoal (1 subgoal):\n 1. False", "proof(elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> False\n 2. degree a = degree f \\<Longrightarrow> False", "assume \"degree a = 0\""], ["proof (state)\nthis:\n  degree a = 0\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> False\n 2. degree a = degree f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  degree a = 0", "obtain c where ac: \"a = [:c:]\""], ["proof (prove)\nusing this:\n  degree a = 0\n\ngoal (1 subgoal):\n 1. (\\<And>c. a = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: degree0_coeffs)"], ["proof (state)\nthis:\n  a = [:c:]\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> False\n 2. degree a = degree f \\<Longrightarrow> False", "from fab[unfolded ac]"], ["proof (chain)\npicking this:\n  f = [:c:] * b", "have \"c dvd content f\""], ["proof (prove)\nusing this:\n  f = [:c:] * b\n\ngoal (1 subgoal):\n 1. c dvd content f", "by (simp add: content_iff coeffs_smult)"], ["proof (state)\nthis:\n  c dvd content f\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> False\n 2. degree a = degree f \\<Longrightarrow> False", "with cf"], ["proof (chain)\npicking this:\n  primitive f\n  c dvd content f", "have \"c dvd 1\""], ["proof (prove)\nusing this:\n  primitive f\n  c dvd content f\n\ngoal (1 subgoal):\n 1. is_unit c", "by simp"], ["proof (state)\nthis:\n  is_unit c\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> False\n 2. degree a = degree f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_unit c", "have \"a dvd 1\""], ["proof (prove)\nusing this:\n  is_unit c\n\ngoal (1 subgoal):\n 1. a dvd 1", "by (auto simp: ac)"], ["proof (state)\nthis:\n  a dvd 1\n\ngoal (2 subgoals):\n 1. degree a = 0 \\<Longrightarrow> False\n 2. degree a = degree f \\<Longrightarrow> False", "with a1"], ["proof (chain)\npicking this:\n  \\<not> a dvd 1\n  a dvd 1", "show False"], ["proof (prove)\nusing this:\n  \\<not> a dvd 1\n  a dvd 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "assume dega: \"degree a = degree f\""], ["proof (state)\nthis:\n  degree a = degree f\n\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "with f0 degree_mult_eq[OF a0 b0] fab"], ["proof (chain)\npicking this:\n  f \\<noteq> 0\n  degree (a * b) = degree a + degree b\n  f = a * b\n  degree a = degree f", "have \"degree b = 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  degree (a * b) = degree a + degree b\n  f = a * b\n  degree a = degree f\n\ngoal (1 subgoal):\n 1. degree b = 0", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  degree b = 0\n\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  degree b = 0", "obtain c where bc: \"b = [:c:]\""], ["proof (prove)\nusing this:\n  degree b = 0\n\ngoal (1 subgoal):\n 1. (\\<And>c. b = [:c:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: degree0_coeffs)"], ["proof (state)\nthis:\n  b = [:c:]\n\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "from fab[unfolded bc]"], ["proof (chain)\npicking this:\n  f = a * [:c:]", "have \"c dvd content f\""], ["proof (prove)\nusing this:\n  f = a * [:c:]\n\ngoal (1 subgoal):\n 1. c dvd content f", "by (simp add: content_iff coeffs_smult)"], ["proof (state)\nthis:\n  c dvd content f\n\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "with cf"], ["proof (chain)\npicking this:\n  primitive f\n  c dvd content f", "have \"c dvd 1\""], ["proof (prove)\nusing this:\n  primitive f\n  c dvd content f\n\ngoal (1 subgoal):\n 1. is_unit c", "by simp"], ["proof (state)\nthis:\n  is_unit c\n\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_unit c", "have \"b dvd 1\""], ["proof (prove)\nusing this:\n  is_unit c\n\ngoal (1 subgoal):\n 1. b dvd 1", "by (auto simp: bc)"], ["proof (state)\nthis:\n  b dvd 1\n\ngoal (1 subgoal):\n 1. degree a = degree f \\<Longrightarrow> False", "with b1"], ["proof (chain)\npicking this:\n  \\<not> b dvd 1\n  b dvd 1", "show False"], ["proof (prove)\nusing this:\n  \\<not> b dvd 1\n  b dvd 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  irreducible f\n\ngoal (1 subgoal):\n 1. irreducible f \\<Longrightarrow> irreducible\\<^sub>d f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. irreducible f \\<Longrightarrow> irreducible\\<^sub>d f", "assume r: ?r"], ["proof (state)\nthis:\n  irreducible f\n\ngoal (1 subgoal):\n 1. irreducible f \\<Longrightarrow> irreducible\\<^sub>d f", "show ?l"], ["proof (prove)\ngoal (1 subgoal):\n 1. irreducible\\<^sub>d f", "proof(intro irreducible\\<^sub>dI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < degree f\n 2. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "show \"degree f > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < degree f", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < degree f \\<Longrightarrow> False", "assume \"\\<not>degree f > 0\""], ["proof (state)\nthis:\n  \\<not> 0 < degree f\n\ngoal (1 subgoal):\n 1. \\<not> 0 < degree f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> 0 < degree f", "obtain f0 where f: \"f = [:f0:]\""], ["proof (prove)\nusing this:\n  \\<not> 0 < degree f\n\ngoal (1 subgoal):\n 1. (\\<And>f0. f = [:f0:] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: degree0_coeffs)"], ["proof (state)\nthis:\n  f = [:f0:]\n\ngoal (1 subgoal):\n 1. \\<not> 0 < degree f \\<Longrightarrow> False", "from cf[unfolded this]"], ["proof (chain)\npicking this:\n  primitive [:f0:]", "have \"normalize f0 = 1\""], ["proof (prove)\nusing this:\n  primitive [:f0:]\n\ngoal (1 subgoal):\n 1. normalize f0 = (1::'a)", "by auto"], ["proof (state)\nthis:\n  normalize f0 = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < degree f \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  normalize f0 = (1::'a)", "have \"f0 dvd 1\""], ["proof (prove)\nusing this:\n  normalize f0 = (1::'a)\n\ngoal (1 subgoal):\n 1. is_unit f0", "by (unfold normalize_1_iff)"], ["proof (state)\nthis:\n  is_unit f0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < degree f \\<Longrightarrow> False", "with r[unfolded f irreducible_const_poly_iff]"], ["proof (chain)\npicking this:\n  irreducible f0\n  is_unit f0", "show False"], ["proof (prove)\nusing this:\n  irreducible f0\n  is_unit f0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < degree f\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "fix g h"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "assume deg_g: \"degree g > 0\" and deg_gf: \"degree g < degree f\" and fgh: \"f = g * h\""], ["proof (state)\nthis:\n  0 < degree g\n  degree g < degree f\n  f = g * h\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "with r"], ["proof (chain)\npicking this:\n  irreducible f\n  0 < degree g\n  degree g < degree f\n  f = g * h", "have \"g dvd 1 \\<or> h dvd 1\""], ["proof (prove)\nusing this:\n  irreducible f\n  0 < degree g\n  degree g < degree f\n  f = g * h\n\ngoal (1 subgoal):\n 1. g dvd 1 \\<or> h dvd 1", "by auto"], ["proof (state)\nthis:\n  g dvd 1 \\<or> h dvd 1\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "with deg_g"], ["proof (chain)\npicking this:\n  0 < degree g\n  g dvd 1 \\<or> h dvd 1", "have \"degree h = 0\""], ["proof (prove)\nusing this:\n  0 < degree g\n  g dvd 1 \\<or> h dvd 1\n\ngoal (1 subgoal):\n 1. degree h = 0", "by (auto simp: poly_dvd_1)"], ["proof (state)\nthis:\n  degree h = 0\n\ngoal (1 subgoal):\n 1. \\<And>q r.\n       \\<lbrakk>0 < degree q; degree q < degree f; 0 < degree r;\n        degree r < degree f; f = q * r\\<rbrakk>\n       \\<Longrightarrow> False", "with deg_gf[unfolded fgh] degree_mult_eq[of g h]"], ["proof (chain)\npicking this:\n  degree g < degree (g * h)\n  \\<lbrakk>g \\<noteq> 0; h \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> degree (g * h) = degree g + degree h\n  degree h = 0", "show False"], ["proof (prove)\nusing this:\n  degree g < degree (g * h)\n  \\<lbrakk>g \\<noteq> 0; h \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> degree (g * h) = degree g + degree h\n  degree h = 0\n\ngoal (1 subgoal):\n 1. False", "by (cases \"g = 0 \\<or> h = 0\", auto)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  irreducible\\<^sub>d f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma deg_not_zero_imp_not_unit: \n  fixes f:: \"'a::{idom_divide,semidom_divide_unit_factor} poly\"\n  assumes deg_f: \"degree f > 0\"\n  shows \"\\<not> is_unit f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_unit f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_unit f", "have \"degree (normalize f) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < degree (normalize f)", "using deg_f degree_normalize"], ["proof (prove)\nusing this:\n  0 < degree f\n  degree (normalize ?f) = degree ?f\n\ngoal (1 subgoal):\n 1. 0 < degree (normalize f)", "by auto"], ["proof (state)\nthis:\n  0 < degree (normalize f)\n\ngoal (1 subgoal):\n 1. \\<not> is_unit f", "hence \"normalize f \\<noteq> 1\""], ["proof (prove)\nusing this:\n  0 < degree (normalize f)\n\ngoal (1 subgoal):\n 1. normalize f \\<noteq> 1", "by fastforce"], ["proof (state)\nthis:\n  normalize f \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<not> is_unit f", "thus \"\\<not> is_unit f\""], ["proof (prove)\nusing this:\n  normalize f \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<not> is_unit f", "using normalize_1_iff"], ["proof (prove)\nusing this:\n  normalize f \\<noteq> 1\n  (normalize ?a = (1::?'a)) = is_unit ?a\n\ngoal (1 subgoal):\n 1. \\<not> is_unit f", "by auto"], ["proof (state)\nthis:\n  \\<not> is_unit f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_pCons[simp]: \"content (pCons a p) = gcd a (content p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content (pCons a p) = gcd a (content p)", "proof(induct p arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. content [:a:] = gcd a (content 0)\n 2. \\<And>a p aa.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        \\<And>a. content (pCons a p) = gcd a (content p)\\<rbrakk>\n       \\<Longrightarrow> content (pCons aa (pCons a p)) =\n                         gcd aa (content (pCons a p))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>a. content [:a:] = gcd a (content 0)\n 2. \\<And>a p aa.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        \\<And>a. content (pCons a p) = gcd a (content p)\\<rbrakk>\n       \\<Longrightarrow> content (pCons aa (pCons a p)) =\n                         gcd aa (content (pCons a p))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. content [:a:] = gcd a (content 0)", "by simp"], ["proof (state)\nthis:\n  content [:a:] = gcd a (content 0)\n\ngoal (1 subgoal):\n 1. \\<And>a p aa.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        \\<And>a. content (pCons a p) = gcd a (content p)\\<rbrakk>\n       \\<Longrightarrow> content (pCons aa (pCons a p)) =\n                         gcd aa (content (pCons a p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p aa.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        \\<And>a. content (pCons a p) = gcd a (content p)\\<rbrakk>\n       \\<Longrightarrow> content (pCons aa (pCons a p)) =\n                         gcd aa (content (pCons a p))", "case (pCons c p)"], ["proof (state)\nthis:\n  c \\<noteq> (0::'a) \\<or> p \\<noteq> 0\n  content (pCons ?a p) = gcd ?a (content p)\n\ngoal (1 subgoal):\n 1. \\<And>a p aa.\n       \\<lbrakk>a \\<noteq> (0::'a) \\<or> p \\<noteq> 0;\n        \\<And>a. content (pCons a p) = gcd a (content p)\\<rbrakk>\n       \\<Longrightarrow> content (pCons aa (pCons a p)) =\n                         gcd aa (content (pCons a p))", "then"], ["proof (chain)\npicking this:\n  c \\<noteq> (0::'a) \\<or> p \\<noteq> 0\n  content (pCons ?a p) = gcd ?a (content p)", "show ?case"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a) \\<or> p \\<noteq> 0\n  content (pCons ?a p) = gcd ?a (content p)\n\ngoal (1 subgoal):\n 1. content (pCons a (pCons c p)) = gcd a (content (pCons c p))", "by (cases \"p = 0\", auto simp: content_def cCons_def)"], ["proof (state)\nthis:\n  content (pCons a (pCons c p)) = gcd a (content (pCons c p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma content_field_poly:\n  fixes f :: \"'a :: {field,semiring_gcd} poly\"\n  shows \"content f = (if f = 0 then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. content f = (if f = 0 then 0::'a else (1::'a))", "by(induct f, auto simp: dvd_field_iff is_unit_normalize)"], ["", "end"]]}