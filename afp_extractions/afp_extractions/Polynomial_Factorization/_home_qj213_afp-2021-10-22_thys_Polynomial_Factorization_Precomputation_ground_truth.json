{"file_name": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization/Precomputation.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Polynomial_Factorization", "problem_names": ["lemma lookup_tabulate: \"x \\<in> set xs \\<Longrightarrow> Mapping.lookup (Mapping.tabulate xs f) x = Some (f x)\"", "lemma lookup_tabulate2: \"Mapping.lookup (Mapping.tabulate xs f) x = Some y \\<Longrightarrow> y = f x\"", "lemma memo_int[simp]: \"memo_int low up f = f\"", "lemma memo_nat[simp]: \"memo_nat low up f = f\"", "lemma memo[simp]: \"memo xs f = f\""], "translations": [["", "lemma lookup_tabulate: \"x \\<in> set xs \\<Longrightarrow> Mapping.lookup (Mapping.tabulate xs f) x = Some (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow>\n    Mapping.lookup (Mapping.tabulate xs f) x = Some (f x)", "by (transfer, simp add: map_of_map_Pair_key)"], ["", "lemma lookup_tabulate2: \"Mapping.lookup (Mapping.tabulate xs f) x = Some y \\<Longrightarrow> y = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Mapping.lookup (Mapping.tabulate xs f) x = Some y \\<Longrightarrow>\n    y = f x", "by transfer (metis map_of_map_Pair_key option.distinct(1) option.sel)"], ["", "definition memo_int :: \"int \\<Rightarrow> int \\<Rightarrow> (int \\<Rightarrow> 'a) \\<Rightarrow> (int \\<Rightarrow> 'a)\" where\n  \"memo_int low up f \\<equiv> let m = Mapping.tabulate [low .. up] f\n     in (\\<lambda> x. if x \\<ge> low \\<and> x \\<le> up then the (Mapping.lookup m x) else f x)\""], ["", "lemma memo_int[simp]: \"memo_int low up f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. memo_int low up f = f", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. memo_int low up f x = f x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. memo_int low up f x = f x", "show \"memo_int low up f x = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. memo_int low up f x = f x", "proof (cases \"x \\<ge> low \\<and> x \\<le> up\")"], ["proof (state)\ngoal (2 subgoals):\n 1. low \\<le> x \\<and> x \\<le> up \\<Longrightarrow>\n    memo_int low up f x = f x\n 2. \\<not> (low \\<le> x \\<and> x \\<le> up) \\<Longrightarrow>\n    memo_int low up f x = f x", "case False"], ["proof (state)\nthis:\n  \\<not> (low \\<le> x \\<and> x \\<le> up)\n\ngoal (2 subgoals):\n 1. low \\<le> x \\<and> x \\<le> up \\<Longrightarrow>\n    memo_int low up f x = f x\n 2. \\<not> (low \\<le> x \\<and> x \\<le> up) \\<Longrightarrow>\n    memo_int low up f x = f x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (low \\<le> x \\<and> x \\<le> up)\n\ngoal (1 subgoal):\n 1. memo_int low up f x = f x", "unfolding memo_int_def"], ["proof (prove)\nusing this:\n  \\<not> (low \\<le> x \\<and> x \\<le> up)\n\ngoal (1 subgoal):\n 1. (let m = Mapping.tabulate [low..up] f\n     in (\\<lambda>x.\n            if low \\<le> x \\<and> x \\<le> up then the (Mapping.lookup m x)\n            else f x))\n     x =\n    f x", "by auto"], ["proof (state)\nthis:\n  memo_int low up f x = f x\n\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x \\<le> up \\<Longrightarrow>\n    memo_int low up f x = f x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x \\<le> up \\<Longrightarrow>\n    memo_int low up f x = f x", "case True"], ["proof (state)\nthis:\n  low \\<le> x \\<and> x \\<le> up\n\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x \\<le> up \\<Longrightarrow>\n    memo_int low up f x = f x", "from True"], ["proof (chain)\npicking this:\n  low \\<le> x \\<and> x \\<le> up", "have x: \"x \\<in> set [low .. up]\""], ["proof (prove)\nusing this:\n  low \\<le> x \\<and> x \\<le> up\n\ngoal (1 subgoal):\n 1. x \\<in> set [low..up]", "by auto"], ["proof (state)\nthis:\n  x \\<in> set [low..up]\n\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x \\<le> up \\<Longrightarrow>\n    memo_int low up f x = f x", "with True lookup_tabulate[OF this, of f]"], ["proof (chain)\npicking this:\n  low \\<le> x \\<and> x \\<le> up\n  Mapping.lookup (Mapping.tabulate [low..up] f) x = Some (f x)\n  x \\<in> set [low..up]", "show ?thesis"], ["proof (prove)\nusing this:\n  low \\<le> x \\<and> x \\<le> up\n  Mapping.lookup (Mapping.tabulate [low..up] f) x = Some (f x)\n  x \\<in> set [low..up]\n\ngoal (1 subgoal):\n 1. memo_int low up f x = f x", "unfolding memo_int_def"], ["proof (prove)\nusing this:\n  low \\<le> x \\<and> x \\<le> up\n  Mapping.lookup (Mapping.tabulate [low..up] f) x = Some (f x)\n  x \\<in> set [low..up]\n\ngoal (1 subgoal):\n 1. (let m = Mapping.tabulate [low..up] f\n     in (\\<lambda>x.\n            if low \\<le> x \\<and> x \\<le> up then the (Mapping.lookup m x)\n            else f x))\n     x =\n    f x", "by auto"], ["proof (state)\nthis:\n  memo_int low up f x = f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  memo_int low up f x = f x\n\ngoal:\nNo subgoals!", "qed"], ["", "definition memo_nat :: \"nat \\<Rightarrow> nat \\<Rightarrow> (nat \\<Rightarrow> 'a) \\<Rightarrow> (nat \\<Rightarrow> 'a)\" where\n  \"memo_nat low up f \\<equiv> let m = Mapping.tabulate [low ..< up] f\n     in (\\<lambda> x. if x \\<ge> low \\<and> x < up then the (Mapping.lookup m x) else f x)\""], ["", "lemma memo_nat[simp]: \"memo_nat low up f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. memo_nat low up f = f", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. memo_nat low up f x = f x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. memo_nat low up f x = f x", "show \"memo_nat low up f x = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. memo_nat low up f x = f x", "proof (cases \"x \\<ge> low \\<and> x < up\")"], ["proof (state)\ngoal (2 subgoals):\n 1. low \\<le> x \\<and> x < up \\<Longrightarrow> memo_nat low up f x = f x\n 2. \\<not> (low \\<le> x \\<and> x < up) \\<Longrightarrow>\n    memo_nat low up f x = f x", "case False"], ["proof (state)\nthis:\n  \\<not> (low \\<le> x \\<and> x < up)\n\ngoal (2 subgoals):\n 1. low \\<le> x \\<and> x < up \\<Longrightarrow> memo_nat low up f x = f x\n 2. \\<not> (low \\<le> x \\<and> x < up) \\<Longrightarrow>\n    memo_nat low up f x = f x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (low \\<le> x \\<and> x < up)\n\ngoal (1 subgoal):\n 1. memo_nat low up f x = f x", "unfolding memo_nat_def"], ["proof (prove)\nusing this:\n  \\<not> (low \\<le> x \\<and> x < up)\n\ngoal (1 subgoal):\n 1. (let m = Mapping.tabulate [low..<up] f\n     in (\\<lambda>x.\n            if low \\<le> x \\<and> x < up then the (Mapping.lookup m x)\n            else f x))\n     x =\n    f x", "by auto"], ["proof (state)\nthis:\n  memo_nat low up f x = f x\n\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x < up \\<Longrightarrow> memo_nat low up f x = f x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x < up \\<Longrightarrow> memo_nat low up f x = f x", "case True"], ["proof (state)\nthis:\n  low \\<le> x \\<and> x < up\n\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x < up \\<Longrightarrow> memo_nat low up f x = f x", "from True"], ["proof (chain)\npicking this:\n  low \\<le> x \\<and> x < up", "have x: \"x \\<in> set [low ..< up]\""], ["proof (prove)\nusing this:\n  low \\<le> x \\<and> x < up\n\ngoal (1 subgoal):\n 1. x \\<in> set [low..<up]", "by auto"], ["proof (state)\nthis:\n  x \\<in> set [low..<up]\n\ngoal (1 subgoal):\n 1. low \\<le> x \\<and> x < up \\<Longrightarrow> memo_nat low up f x = f x", "with True lookup_tabulate[OF this, of f]"], ["proof (chain)\npicking this:\n  low \\<le> x \\<and> x < up\n  Mapping.lookup (Mapping.tabulate [low..<up] f) x = Some (f x)\n  x \\<in> set [low..<up]", "show ?thesis"], ["proof (prove)\nusing this:\n  low \\<le> x \\<and> x < up\n  Mapping.lookup (Mapping.tabulate [low..<up] f) x = Some (f x)\n  x \\<in> set [low..<up]\n\ngoal (1 subgoal):\n 1. memo_nat low up f x = f x", "unfolding memo_nat_def"], ["proof (prove)\nusing this:\n  low \\<le> x \\<and> x < up\n  Mapping.lookup (Mapping.tabulate [low..<up] f) x = Some (f x)\n  x \\<in> set [low..<up]\n\ngoal (1 subgoal):\n 1. (let m = Mapping.tabulate [low..<up] f\n     in (\\<lambda>x.\n            if low \\<le> x \\<and> x < up then the (Mapping.lookup m x)\n            else f x))\n     x =\n    f x", "by auto"], ["proof (state)\nthis:\n  memo_nat low up f x = f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  memo_nat low up f x = f x\n\ngoal:\nNo subgoals!", "qed"], ["", "definition memo :: \"'a list \\<Rightarrow> ('a \\<Rightarrow> 'b) \\<Rightarrow> ('a \\<Rightarrow> 'b)\" where\n  \"memo xs f \\<equiv> let m = Mapping.tabulate xs f\n     in (\\<lambda> x. case Mapping.lookup m x of None \\<Rightarrow> f x | Some y \\<Rightarrow> y)\""], ["", "lemma memo[simp]: \"memo xs f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. memo xs f = f", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. memo xs f x = f x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. memo xs f x = f x", "show \"memo xs f x = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. memo xs f x = f x", "proof (cases \"Mapping.lookup (Mapping.tabulate xs f) x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Mapping.lookup (Mapping.tabulate xs f) x = None \\<Longrightarrow>\n    memo xs f x = f x\n 2. \\<And>a.\n       Mapping.lookup (Mapping.tabulate xs f) x = Some a \\<Longrightarrow>\n       memo xs f x = f x", "case None"], ["proof (state)\nthis:\n  Mapping.lookup (Mapping.tabulate xs f) x = None\n\ngoal (2 subgoals):\n 1. Mapping.lookup (Mapping.tabulate xs f) x = None \\<Longrightarrow>\n    memo xs f x = f x\n 2. \\<And>a.\n       Mapping.lookup (Mapping.tabulate xs f) x = Some a \\<Longrightarrow>\n       memo xs f x = f x", "thus ?thesis"], ["proof (prove)\nusing this:\n  Mapping.lookup (Mapping.tabulate xs f) x = None\n\ngoal (1 subgoal):\n 1. memo xs f x = f x", "unfolding memo_def"], ["proof (prove)\nusing this:\n  Mapping.lookup (Mapping.tabulate xs f) x = None\n\ngoal (1 subgoal):\n 1. (let m = Mapping.tabulate xs f\n     in (\\<lambda>x.\n            case Mapping.lookup m x of None \\<Rightarrow> f x\n            | Some y \\<Rightarrow> y))\n     x =\n    f x", "by auto"], ["proof (state)\nthis:\n  memo xs f x = f x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       Mapping.lookup (Mapping.tabulate xs f) x = Some a \\<Longrightarrow>\n       memo xs f x = f x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       Mapping.lookup (Mapping.tabulate xs f) x = Some a \\<Longrightarrow>\n       memo xs f x = f x", "case (Some y)"], ["proof (state)\nthis:\n  Mapping.lookup (Mapping.tabulate xs f) x = Some y\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       Mapping.lookup (Mapping.tabulate xs f) x = Some a \\<Longrightarrow>\n       memo xs f x = f x", "with lookup_tabulate2[OF this]"], ["proof (chain)\npicking this:\n  y = f x\n  Mapping.lookup (Mapping.tabulate xs f) x = Some y", "show ?thesis"], ["proof (prove)\nusing this:\n  y = f x\n  Mapping.lookup (Mapping.tabulate xs f) x = Some y\n\ngoal (1 subgoal):\n 1. memo xs f x = f x", "unfolding memo_def"], ["proof (prove)\nusing this:\n  y = f x\n  Mapping.lookup (Mapping.tabulate xs f) x = Some y\n\ngoal (1 subgoal):\n 1. (let m = Mapping.tabulate xs f\n     in (\\<lambda>x.\n            case Mapping.lookup m x of None \\<Rightarrow> f x\n            | Some y \\<Rightarrow> y))\n     x =\n    f x", "by auto"], ["proof (state)\nthis:\n  memo xs f x = f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  memo xs f x = f x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}