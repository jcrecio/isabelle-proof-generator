{"file_name": "/home/qj213/afp-2021-10-22/thys/Containers/Containers_Auxiliary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Containers", "problem_names": ["lemma insert_bind_set: \"insert a A \\<bind> f = f a \\<union> (A \\<bind> f)\"", "lemma set_bind_iff:\n  \"set (List.bind xs f) = Set.bind (set xs) (set \\<circ> f)\"", "lemma set_bind_conv_fold: \"set xs \\<bind> f = fold ((\\<union>) \\<circ> f) xs {}\"", "lemma card_gt_1D:\n  assumes \"card A > 1\"\n  shows \"\\<exists>x y. x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y\"", "lemma card_eq_1_iff: \"card A = 1 \\<longleftrightarrow> (\\<exists>x. A = {x})\"", "lemma card_eq_Suc_0_ex1: \"card A = Suc 0 \\<longleftrightarrow> (\\<exists>!x. x \\<in> A)\"", "lemma sorted_last: \"\\<lbrakk> sorted xs; x \\<in> set xs \\<rbrakk> \\<Longrightarrow> x \\<le> last xs\"", "lemma empty_filter_conv: \"[] = filter P xs \\<longleftrightarrow> (\\<forall>x\\<in>set xs. \\<not> P x)\"", "lemma ID_code [code, code_unfold]: \"ID = (\\<lambda>x. x)\"", "lemma ID_Some: \"ID (Some x) = Some x\"", "lemma ID_None: \"ID None = None\"", "lemma less_eq_prod_simps [simp]:\n  \"(x1, x2) \\<sqsubseteq> (y1, y2) \\<longleftrightarrow> x1 \\<sqsubset>\\<^sub>a y1 \\<or> x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubseteq>\\<^sub>b y2\"", "lemma less_prod_simps [simp]:\n  \"(x1, x2) \\<sqsubset> (y1, y2) \\<longleftrightarrow> x1 \\<sqsubset>\\<^sub>a y1 \\<or> x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubset>\\<^sub>b y2\"", "lemma linorder_prod:\n  \"class.linorder (\\<sqsubseteq>) (\\<sqsubset>)\""], "translations": [["", "lemma insert_bind_set: \"insert a A \\<bind> f = f a \\<union> (A \\<bind> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert a A \\<bind> f = f a \\<union> (A \\<bind> f)", "by(auto simp add: Set.bind_def)"], ["", "lemma set_bind_iff:\n  \"set (List.bind xs f) = Set.bind (set xs) (set \\<circ> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (xs \\<bind> f) = set xs \\<bind> set \\<circ> f", "by(induct xs)(simp_all add: insert_bind_set)"], ["", "lemma set_bind_conv_fold: \"set xs \\<bind> f = fold ((\\<union>) \\<circ> f) xs {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<bind> f = fold ((\\<union>) \\<circ> f) xs {}", "by(induct xs rule: rev_induct)(simp_all add: insert_bind_set)"], ["", "lemma card_gt_1D:\n  assumes \"card A > 1\"\n  shows \"\\<exists>x y. x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y. x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x y.\n       x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y \\<Longrightarrow>\n    False", "from assms"], ["proof (chain)\npicking this:\n  1 < card A", "have \"A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  1 < card A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<nexists>x y.\n       x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  A \\<noteq> {}", "obtain x where \"x \\<in> A\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<nexists>x y.\n       x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<nexists>x y.\n       x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y \\<Longrightarrow>\n    False", "assume \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<nexists>x y. x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<nexists>x y.\n       x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> A\n  \\<nexists>x y. x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y", "have \"A = {x}\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  \\<nexists>x y. x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y\n\ngoal (1 subgoal):\n 1. A = {x}", "by auto"], ["proof (state)\nthis:\n  A = {x}\n\ngoal (1 subgoal):\n 1. \\<nexists>x y.\n       x \\<in> A \\<and> y \\<in> A \\<and> x \\<noteq> y \\<Longrightarrow>\n    False", "with assms"], ["proof (chain)\npicking this:\n  1 < card A\n  A = {x}", "show False"], ["proof (prove)\nusing this:\n  1 < card A\n  A = {x}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_eq_1_iff: \"card A = 1 \\<longleftrightarrow> (\\<exists>x. A = {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card A = 1) = (\\<exists>x. A = {x})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. card A = 1 \\<Longrightarrow> \\<exists>x. A = {x}\n 2. \\<exists>x. A = {x} \\<Longrightarrow> card A = 1", "assume card: \"card A = 1\""], ["proof (state)\nthis:\n  card A = 1\n\ngoal (2 subgoals):\n 1. card A = 1 \\<Longrightarrow> \\<exists>x. A = {x}\n 2. \\<exists>x. A = {x} \\<Longrightarrow> card A = 1", "hence [simp]: \"finite A\""], ["proof (prove)\nusing this:\n  card A = 1\n\ngoal (1 subgoal):\n 1. finite A", "using card_gt_0_iff[of A]"], ["proof (prove)\nusing this:\n  card A = 1\n  (0 < card A) = (A \\<noteq> {} \\<and> finite A)\n\ngoal (1 subgoal):\n 1. finite A", "by simp"], ["proof (state)\nthis:\n  finite A\n\ngoal (2 subgoals):\n 1. card A = 1 \\<Longrightarrow> \\<exists>x. A = {x}\n 2. \\<exists>x. A = {x} \\<Longrightarrow> card A = 1", "have \"A = {THE x. x \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = {THE x. x \\<in> A}", "proof(intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> {THE x. x \\<in> A}\n 2. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> {THE x. x \\<in> A}\n 2. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "assume x: \"x \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> {THE x. x \\<in> A}\n 2. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "hence \"(THE x. x \\<in> A) = x\""], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. (THE x. x \\<in> A) = x", "proof(rule the_equality)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> A \\<Longrightarrow> xa = x", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> A \\<Longrightarrow> xa = x", "assume x': \"x' \\<in> A\""], ["proof (state)\nthis:\n  x' \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> A \\<Longrightarrow> xa = x", "show \"x' = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' = x", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<Longrightarrow> False", "assume neq: \"x' \\<noteq> x\""], ["proof (state)\nthis:\n  x' \\<noteq> x\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<Longrightarrow> False", "from x x'"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x' \\<in> A", "have eq: \"A = insert x (insert x' (A - {x, x'}))\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  x' \\<in> A\n\ngoal (1 subgoal):\n 1. A = insert x (insert x' (A - {x, x'}))", "by auto"], ["proof (state)\nthis:\n  A = insert x (insert x' (A - {x, x'}))\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<Longrightarrow> False", "have \"card A = 2 + card (A - {x, x'})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A = 2 + card (A - {x, x'})", "using neq"], ["proof (prove)\nusing this:\n  x' \\<noteq> x\n\ngoal (1 subgoal):\n 1. card A = 2 + card (A - {x, x'})", "by(subst eq)(simp)"], ["proof (state)\nthis:\n  card A = 2 + card (A - {x, x'})\n\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<Longrightarrow> False", "with card"], ["proof (chain)\npicking this:\n  card A = 1\n  card A = 2 + card (A - {x, x'})", "show False"], ["proof (prove)\nusing this:\n  card A = 1\n  card A = 2 + card (A - {x, x'})\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x' = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (THE x. x \\<in> A) = x\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> {THE x. x \\<in> A}\n 2. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "thus \"x \\<in> {THE x. x \\<in> A}\""], ["proof (prove)\nusing this:\n  (THE x. x \\<in> A) = x\n\ngoal (1 subgoal):\n 1. x \\<in> {THE x. x \\<in> A}", "by simp"], ["proof (state)\nthis:\n  x \\<in> {THE x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "assume \"x \\<in> {THE x. x \\<in> A}\""], ["proof (state)\nthis:\n  x \\<in> {THE x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "hence x: \"x = (THE x. x \\<in> A)\""], ["proof (prove)\nusing this:\n  x \\<in> {THE x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. x = (THE x. x \\<in> A)", "by simp"], ["proof (state)\nthis:\n  x = (THE x. x \\<in> A)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "from card"], ["proof (chain)\npicking this:\n  card A = 1", "have \"A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  card A = 1\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "then"], ["proof (chain)\npicking this:\n  A \\<noteq> {}", "obtain x' where x': \"x' \\<in> A\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x'. x' \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  x' \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {THE x. x \\<in> A} \\<Longrightarrow> x \\<in> A", "thus \"x \\<in> A\""], ["proof (prove)\nusing this:\n  x' \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "unfolding x"], ["proof (prove)\nusing this:\n  x' \\<in> A\n\ngoal (1 subgoal):\n 1. (THE x. x \\<in> A) \\<in> A", "proof(rule theI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x = x'", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x = x'", "assume x: \"x \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x = x'", "show \"x = x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = x'", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow> False", "assume neq: \"x \\<noteq> x'\""], ["proof (state)\nthis:\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow> False", "from x x'"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x' \\<in> A", "have eq: \"A = insert x (insert x' (A - {x, x'}))\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  x' \\<in> A\n\ngoal (1 subgoal):\n 1. A = insert x (insert x' (A - {x, x'}))", "by auto"], ["proof (state)\nthis:\n  A = insert x (insert x' (A - {x, x'}))\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow> False", "have \"card A = 2 + card (A - {x, x'})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A = 2 + card (A - {x, x'})", "using neq"], ["proof (prove)\nusing this:\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. card A = 2 + card (A - {x, x'})", "by(subst eq)(simp)"], ["proof (state)\nthis:\n  card A = 2 + card (A - {x, x'})\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' \\<Longrightarrow> False", "with card"], ["proof (chain)\npicking this:\n  card A = 1\n  card A = 2 + card (A - {x, x'})", "show False"], ["proof (prove)\nusing this:\n  card A = 1\n  card A = 2 + card (A - {x, x'})\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = x'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A = {THE x. x \\<in> A}\n\ngoal (2 subgoals):\n 1. card A = 1 \\<Longrightarrow> \\<exists>x. A = {x}\n 2. \\<exists>x. A = {x} \\<Longrightarrow> card A = 1", "thus \"\\<exists>x. A = {x}\""], ["proof (prove)\nusing this:\n  A = {THE x. x \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<exists>x. A = {x}", ".."], ["proof (state)\nthis:\n  \\<exists>x. A = {x}\n\ngoal (1 subgoal):\n 1. \\<exists>x. A = {x} \\<Longrightarrow> card A = 1", "qed auto"], ["", "lemma card_eq_Suc_0_ex1: \"card A = Suc 0 \\<longleftrightarrow> (\\<exists>!x. x \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (card A = Suc 0) = (\\<exists>!x. x \\<in> A)", "by(auto simp only: One_nat_def[symmetric] card_eq_1_iff)"], ["", "context linorder begin"], ["", "lemma sorted_last: \"\\<lbrakk> sorted xs; x \\<in> set xs \\<rbrakk> \\<Longrightarrow> x \\<le> last xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> x \\<le> last xs", "by(cases xs rule: rev_cases)(auto simp add: sorted_append)"], ["", "end"], ["", "lemma empty_filter_conv: \"[] = filter P xs \\<longleftrightarrow> (\\<forall>x\\<in>set xs. \\<not> P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] = filter P xs) = (\\<forall>x\\<in>set xs. \\<not> P x)", "by(auto dest: sym simp add: filter_empty_conv)"], ["", "definition ID :: \"'a \\<Rightarrow> 'a\" where \"ID = id\""], ["", "lemma ID_code [code, code_unfold]: \"ID = (\\<lambda>x. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ID = (\\<lambda>x. x)", "by(simp add: ID_def id_def)"], ["", "lemma ID_Some: \"ID (Some x) = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ID (Some x) = Some x", "by(simp add: ID_def)"], ["", "lemma ID_None: \"ID None = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ID None = None", "by(simp add: ID_def)"], ["", "text \\<open>lexicographic order on pairs\\<close>"], ["", "context\n  fixes leq_a :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\\<^sub>a\" 50) \n  and less_a :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubset>\\<^sub>a\" 50) \n  and leq_b :: \"'b \\<Rightarrow> 'b \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\\<^sub>b\" 50) \n  and less_b :: \"'b \\<Rightarrow> 'b \\<Rightarrow> bool\" (infix \"\\<sqsubset>\\<^sub>b\" 50) \nbegin"], ["", "definition less_eq_prod :: \"('a \\<times> 'b) \\<Rightarrow> ('a \\<times> 'b) \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nwhere \"less_eq_prod = (\\<lambda>(x1, x2) (y1, y2). x1 \\<sqsubset>\\<^sub>a y1 \\<or> x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubseteq>\\<^sub>b y2)\""], ["", "definition less_prod :: \"('a \\<times> 'b) \\<Rightarrow> ('a \\<times> 'b) \\<Rightarrow> bool\" (infix \"\\<sqsubset>\" 50)\nwhere \"less_prod = (\\<lambda>(x1, x2) (y1, y2). x1 \\<sqsubset>\\<^sub>a y1 \\<or> x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubset>\\<^sub>b y2)\""], ["", "lemma less_eq_prod_simps [simp]:\n  \"(x1, x2) \\<sqsubseteq> (y1, y2) \\<longleftrightarrow> x1 \\<sqsubset>\\<^sub>a y1 \\<or> x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubseteq>\\<^sub>b y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x1, x2) \\<sqsubseteq> (y1, y2)) =\n    (x1 \\<sqsubset>\\<^sub>a y1 \\<or>\n     x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubseteq>\\<^sub>b y2)", "by(simp add: less_eq_prod_def)"], ["", "lemma less_prod_simps [simp]:\n  \"(x1, x2) \\<sqsubset> (y1, y2) \\<longleftrightarrow> x1 \\<sqsubset>\\<^sub>a y1 \\<or> x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubset>\\<^sub>b y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x1, x2) \\<sqsubset> (y1, y2)) =\n    (x1 \\<sqsubset>\\<^sub>a y1 \\<or>\n     x1 \\<sqsubseteq>\\<^sub>a y1 \\<and> x2 \\<sqsubset>\\<^sub>b y2)", "by(simp add: less_prod_def)"], ["", "end"], ["", "context\n  fixes leq_a :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\\<^sub>a\" 50) \n  and less_a :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<sqsubset>\\<^sub>a\" 50) \n  and leq_b :: \"'b \\<Rightarrow> 'b \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\\<^sub>b\" 50) \n  and less_b :: \"'b \\<Rightarrow> 'b \\<Rightarrow> bool\" (infix \"\\<sqsubset>\\<^sub>b\" 50) \n  assumes lin_a: \"class.linorder leq_a less_a\" \n  and lin_b: \"class.linorder leq_b less_b\"\nbegin"], ["", "abbreviation (input) less_eq_prod' :: \"('a \\<times> 'b) \\<Rightarrow> ('a \\<times> 'b) \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nwhere \"less_eq_prod' \\<equiv> less_eq_prod leq_a less_a leq_b\""], ["", "abbreviation (input) less_prod' :: \"('a \\<times> 'b) \\<Rightarrow> ('a \\<times> 'b) \\<Rightarrow> bool\" (infix \"\\<sqsubset>\" 50)\nwhere \"less_prod' \\<equiv> less_prod leq_a less_a less_b\""], ["", "lemma linorder_prod:\n  \"class.linorder (\\<sqsubseteq>) (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder\n     (less_eq_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubseteq>\\<^sub>b))\n     (less_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubset>\\<^sub>b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder\n     (less_eq_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubseteq>\\<^sub>b))\n     (less_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubset>\\<^sub>b))", "interpret a: linorder \"(\\<sqsubseteq>\\<^sub>a)\" \"(\\<sqsubset>\\<^sub>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)", "by(fact lin_a)"], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder\n     (less_eq_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubseteq>\\<^sub>b))\n     (less_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubset>\\<^sub>b))", "interpret b: linorder \"(\\<sqsubseteq>\\<^sub>b)\" \"(\\<sqsubset>\\<^sub>b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (\\<sqsubseteq>\\<^sub>b) (\\<sqsubset>\\<^sub>b)", "by(fact lin_b)"], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder\n     (less_eq_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubseteq>\\<^sub>b))\n     (less_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubset>\\<^sub>b))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder\n     (less_eq_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubseteq>\\<^sub>b))\n     (less_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n       (\\<sqsubset>\\<^sub>b))", "by unfold_locales auto"], ["proof (state)\nthis:\n  class.linorder\n   (less_eq_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n     (\\<sqsubseteq>\\<^sub>b))\n   (less_prod (\\<sqsubseteq>\\<^sub>a) (\\<sqsubset>\\<^sub>a)\n     (\\<sqsubset>\\<^sub>b))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "hide_const less_eq_prod' less_prod'"], ["", "end"]]}