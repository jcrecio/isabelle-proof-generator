{"file_name": "/home/qj213/afp-2021-10-22/thys/Containers/Examples/Map_To_Mapping_Ex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Containers", "problem_names": ["lemmas mapping_filter_code [code] = map_filter_simps[containers_identify]", "lemmas [code] = test_def[containers_identify]", "lemmas [code] = iter.simps[containers_identify]", "lemmas [code] = dom_test_def[containers_identify]"], "translations": [["", "lemmas mapping_filter_code [code] = map_filter_simps[containers_identify]"], ["", "definition test :: \"(nat \\<Rightarrow> int option) \\<Rightarrow> nat list \\<Rightarrow> int list\"\nwhere\n  \"test f xs = \n  (if f = Map.empty then [] else List.map_filter (f(2 := None)(1 \\<mapsto> -1)) xs)\""], ["", "lift_definition test' :: \"(nat, int) mapping \\<Rightarrow> nat list \\<Rightarrow> int list\" is test"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas [code] = test_def[containers_identify]"], ["", "export_code test' checking SML"], ["", "fun iter :: \"('a \\<Rightarrow> 'a option) \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> 'a option\"\nwhere\n  \"iter m 0 x = Some x\"\n| \"iter m (Suc n) x = Option.bind (m x) (iter m n)\""], ["", "lift_definition iter' :: \"('a, 'a) mapping \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> 'a option\" is iter"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas [code] = iter.simps[containers_identify]"], ["", "export_code iter' in SML"], ["", "definition dom_test :: \"bool\"\nwhere \"dom_test \\<longleftrightarrow> (dom [(1 :: int) \\<mapsto> ([()] :: unit list)] = {1})\""], ["", "lemmas [code] = dom_test_def[containers_identify]"], ["", "ML \\<open>val true = @{code dom_test}\\<close>"], ["", "end"]]}