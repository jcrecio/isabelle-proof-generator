{"file_name": "/home/qj213/afp-2021-10-22/thys/Containers/Examples/Containers_TwoSat_Ex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Containers", "problem_names": ["lemma abort_parametric [transfer_rule]: includes lifting_syntax shows (* Move to Isabelle distribution *)\n  \"((=) ===> ((=) ===> A) ===> A) Code.abort Code.abort\"", "lemma uprod_eq_simps [simp, code]:\n  \"uprod_eq eq (Upair a b) (Upair c d) \\<longleftrightarrow> \n   Rep_equal eq a c \\<and> Rep_equal eq b d \\<or> Rep_equal eq b c \\<and> Rep_equal eq a d\"", "lemma uprod_compare_simps [simp, code]:\n  \"uprod_compare compare (Upair a b) (Upair c d) =\n   (let (x, y) = case Rep_compare compare a b of Lt \\<Rightarrow> (a, b) | _ \\<Rightarrow> (b, a);\n        (x', y') = case Rep_compare compare c d of Lt \\<Rightarrow> (c, d) | _ \\<Rightarrow> (d, c)\n    in case Rep_compare compare x x' of Eq \\<Rightarrow> Rep_compare compare y y' | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\"\n  for compare", "lemma comparator_uprod_compare: \"comparator (uprod_compare compare)\" for compare", "lemma succs_of_clause_split: \"P (succs_of_clause l x) \\<longleftrightarrow> (\\<forall>l1 l2. x = Upair l1 l2 \\<longrightarrow> P (succs_of_clause l (Upair l1 l2)))\"", "lemma commute_succs_of_clause: \"comp_fun_commute (succs_of_clause l)\"", "lemma idem_succs_of_clause: \"comp_fun_idem (succs_of_clause l)\"", "lemma succ_imp_graph_alt_def: \n  \"succ_imp_graph cnf l = Finite_Set.fold (succs_of_clause l) {} cnf\"", "lemma succ_imp_graph_correct: \n  \"finite cnf \\<Longrightarrow> succ_imp_graph cnf l = {l'. (l, l') \\<in> imp_graph cnf}\"", "lemma imp_graph_code:\n  \"imp_graph cnf = \n  (if finite cnf then {(l, l'). l' \\<in> succ_imp_graph cnf l} \n   else Code.abort (STR ''Infinite or invalid 2CNF formula'') (\\<lambda>_. imp_graph cnf))\"", "lemmas [code] = imp_graph_code[containers_identify]", "lemma UNIV_lit: \"UNIV = range (\\<lambda>(x, pos). Lit x pos)\"", "lemma finite_vars_of_cnf: \"finite cnf \\<Longrightarrow> finite (vars_of_cnf cnf)\"", "lemma satisfiable_code:\n  \"satisfiable cnf \\<longleftrightarrow> \n  (if finite cnf \\<and> is_2sat cnf then \n   let G = imp_graph cnf in \\<forall>x\\<in>vars_of_cnf cnf. \\<not> (reachable G (Pos x) (Neg x) \\<and> reachable G (Neg x) (Pos x))\n   else Code.abort (STR ''Infinite or invalid 2CNF formula'') (\\<lambda>_. satisfiable cnf))\"", "lemmas [code] = satisfiable_code[containers_identify]", "lemma succ_imp_graph_outside: \"succ_imp_graph cnf l = {}\" if \"var l \\<notin> vars_of_cnf cnf\"", "lemma comp_fun_idem_insert_mapping: \"comp_fun_idem insert_mapping\"", "lemma comp_fun_idem_insert_clause: \"comp_fun_idem insert_clause\"", "lemma tabulate_graph_code [code]:\n  \"tabulate_graph cnf = \n  (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf \n   else Code.abort (STR ''Infinite clause set'') (\\<lambda>_. tabulate_graph cnf))\"", "lemma succ_imp_graph_impl_code [code]:\n  \"succ_imp_graph cnf =\n  (if finite cnf then let m = tabulate_graph cnf\n   in (\\<lambda>l. case Mapping.lookup m l of None \\<Rightarrow> {} | Some succs' \\<Rightarrow> succs')\n   else Code.abort (STR ''Infinite clause set'') (\\<lambda>_. succ_imp_graph cnf))\""], "translations": [["", "lemma abort_parametric [transfer_rule]: includes lifting_syntax shows (* Move to Isabelle distribution *)\n  \"((=) ===> ((=) ===> A) ===> A) Code.abort Code.abort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) ===> ((=) ===> A) ===> A) Code.abort Code.abort", "unfolding Code.abort_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) ===> ((=) ===> A) ===> A) (\\<lambda>uu f. f ())\n     (\\<lambda>uu f. f ())", "by transfer_prover"], ["", "instantiation uprod :: (finite_UNIV) finite_UNIV begin"], ["", "definition finite_UNIV_uprod :: \"('a uprod, bool) phantom\"\nwhere \"finite_UNIV_uprod = Phantom('a uprod) (of_phantom (finite_UNIV :: ('a, bool) phantom))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a uprod, finite_UNIV_class)", "by standard(auto simp add: finite_UNIV_uprod_def finite_UNIV)"], ["", "end"], ["", "instantiation uprod :: (card_UNIV) card_UNIV begin"], ["", "definition card_UNIV_uprod :: \"('a uprod, nat) phantom\"\nwhere \"card_UNIV_uprod = (let n = of_phantom (card_UNIV :: ('a, nat) phantom) in Phantom('a uprod) (n * (n + 1) div 2))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a uprod, card_UNIV_class)", "by standard(auto simp add: card_UNIV_uprod_def card_UNIV Let_def card_UNIV_uprod)"], ["", "end"], ["", "text \\<open>\n  To instantiate the @{class ceq} type class for @{typ \"'a uprod\"}, we must make a small detour.\n  As @{typ \"'a uprod\"}'s type definition uses HOL equality, we cannot implement a new notion of \n  equality that is parametrised by the equality relation. Instead, we define the subtype of all binary\n  relations that contains only @{term \"(=)\"}, and define the parametrised equality relation @{term uprod_ceq}\n  on the subtype. Then, the instantiation can pass the equality relation from @{term \"CEQ('a :: ceq)\"}\n  to @{term uprod_ceq} because the type class axioms ensure that the obtained relation is equivalent\n  to @{term \"(=)\"}.\n\\<close>"], ["", "typedef 'a equal = \"{(=) :: 'a \\<Rightarrow> 'a \\<Rightarrow> bool}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(=)}", "by simp"], ["", "setup_lifting type_definition_equal"], ["", "lift_definition uprod_eq :: \"'a equal \\<Rightarrow> 'a uprod \\<Rightarrow> 'a uprod \\<Rightarrow> bool\"\nis \"\\<lambda>eq (a, b) (c, d). eq a c \\<and> eq b d \\<or> eq b c \\<and> eq a d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun prod1 prod2 prod3 prod4.\n       \\<lbrakk>fun \\<in> {(=)}; eq_upair prod1 prod2;\n        eq_upair prod3 prod4\\<rbrakk>\n       \\<Longrightarrow> (case prod1 of\n                          (a, b) \\<Rightarrow>\n                            \\<lambda>(c, d).\n                               fun a c \\<and> fun b d \\<or>\n                               fun b c \\<and> fun a d)\n                          prod3 =\n                         (case prod2 of\n                          (a, b) \\<Rightarrow>\n                            \\<lambda>(c, d).\n                               fun a c \\<and> fun b d \\<or>\n                               fun b c \\<and> fun a d)\n                          prod4", "by auto"], ["", "lemma uprod_eq_simps [simp, code]:\n  \"uprod_eq eq (Upair a b) (Upair c d) \\<longleftrightarrow> \n   Rep_equal eq a c \\<and> Rep_equal eq b d \\<or> Rep_equal eq b c \\<and> Rep_equal eq a d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uprod_eq eq (Upair a b) (Upair c d) =\n    (Rep_equal eq a c \\<and> Rep_equal eq b d \\<or>\n     Rep_equal eq b c \\<and> Rep_equal eq a d)", "supply Upair.transfer[transfer_rule]"], ["proof (prove)\ngoal (1 subgoal):\n 1. uprod_eq eq (Upair a b) (Upair c d) =\n    (Rep_equal eq a c \\<and> Rep_equal eq b d \\<or>\n     Rep_equal eq b c \\<and> Rep_equal eq a d)", "by transfer simp"], ["", "lift_definition (code_dt) ceq_equal :: \"'a :: ceq equal option\" is \"CEQ('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred_option (\\<lambda>x. x \\<in> {(=)}) CEQ('a)", "apply(cases \"CEQ('a)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. CEQ('a) = None \\<Longrightarrow>\n    pred_option (\\<lambda>x. x \\<in> {(=)}) CEQ('a)\n 2. \\<And>a.\n       CEQ('a) = Some a \\<Longrightarrow>\n       pred_option (\\<lambda>x. x \\<in> {(=)}) CEQ('a)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. CEQ('a) = None \\<Longrightarrow>\n    pred_option (\\<lambda>x. x \\<in> {(=)}) CEQ('a)", "by(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       CEQ('a) = Some a \\<Longrightarrow>\n       pred_option (\\<lambda>x. x \\<in> {(=)}) CEQ('a)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. CEQ('a) = Some a_ \\<Longrightarrow>\n    pred_option (\\<lambda>x. x \\<in> {(=)}) CEQ('a)", "by(rule forw_subst[where P=\"pred_option _\"], assumption)(simp (no_asm_use); simp add: ceq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instantiation uprod :: (ceq) ceq begin"], ["", "definition ceq_uprod\nwhere \"ceq_uprod = map_option uprod_eq ceq_equal\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a uprod, ceq_class)", "apply(standard)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>eqa. CEQ('a uprod) = Some eqa \\<Longrightarrow> eqa = (=)", "apply(clarsimp simp add: ceq_uprod_def split: option.split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z. ceq_equal = Some z \\<Longrightarrow> uprod_eq z = (=)", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<in> {(=)}; CEQ('a) = Some z\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>(a, b) (c, d).\n                             z a c \\<and> z b d \\<or> z b c \\<and> z a d) =\n                         eq_upair", "apply(auto simp add: fun_eq_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "text \\<open>\n  For comparison, we do a similar trick as for @{class ceq}.\n\\<close>"], ["", "typedef 'a compare = \"{f :: 'a comparator. comparator f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. comparator f}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. comparator f}", "have \"partial_order_on UNIV {(x, y). x = y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_order_on UNIV {(x, y). x = y}", "by(simp add: partial_order_on_def preorder_on_def refl_on_def trans_def antisym_def)"], ["proof (state)\nthis:\n  partial_order_on UNIV {(x, y). x = y}\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. comparator f}", "then"], ["proof (chain)\npicking this:\n  partial_order_on UNIV {(x, y). x = y}", "obtain ord :: \"('a \\<times> 'a) set\" where lin: \"linear_order ord\""], ["proof (prove)\nusing this:\n  partial_order_on UNIV {(x, y). x = y}\n\ngoal (1 subgoal):\n 1. (\\<And>ord. linear_order ord \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule porder_extend_to_linorder)"], ["proof (state)\nthis:\n  linear_order ord\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. comparator f}", "define f :: \"'a comparator\" where\n    \"f x y = (if (x, y) \\<in> ord \\<and> (y, x) \\<in> ord then Eq else if (x, y) \\<in> ord then Lt else Gt)\" for x y"], ["proof (state)\nthis:\n  f ?x ?y =\n  (if (?x, ?y) \\<in> ord \\<and> (?y, ?x) \\<in> ord then Eq\n   else if (?x, ?y) \\<in> ord then Lt else Gt)\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. comparator f}", "have \"comparator f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator f", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y. invert_order (f x y) = f y x\n 2. \\<And>x y. f x y = Eq \\<Longrightarrow> x = y\n 3. \\<And>x y z.\n       \\<lbrakk>f x y = Lt; f y z = Lt\\<rbrakk> \\<Longrightarrow> f x z = Lt", "show \"invert_order (f x y) = f y x\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. invert_order (f x y) = f y x", "using lin"], ["proof (prove)\nusing this:\n  linear_order ord\n\ngoal (1 subgoal):\n 1. invert_order (f x y) = f y x", "by(cases \"x = y\")(auto simp add: f_def linear_order_on_def partial_order_on_def preorder_on_def refl_on_def total_on_def)"], ["proof (state)\nthis:\n  invert_order (f ?x1 ?y1) = f ?y1 ?x1\n\ngoal (2 subgoals):\n 1. \\<And>x y. f x y = Eq \\<Longrightarrow> x = y\n 2. \\<And>x y z.\n       \\<lbrakk>f x y = Lt; f y z = Lt\\<rbrakk> \\<Longrightarrow> f x z = Lt", "show \"x = y\" if \"f x y = Eq\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using that lin"], ["proof (prove)\nusing this:\n  f x y = Eq\n  linear_order ord\n\ngoal (1 subgoal):\n 1. x = y", "by(auto simp add: f_def linear_order_on_def partial_order_on_def antisym_def split: if_split_asm)"], ["proof (state)\nthis:\n  f ?x1 ?y1 = Eq \\<Longrightarrow> ?x1 = ?y1\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>f x y = Lt; f y z = Lt\\<rbrakk> \\<Longrightarrow> f x z = Lt", "show \"f x z = Lt\" if \"f x y = Lt\" \"f y z = Lt\" for x y z"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x z = Lt", "using that lin"], ["proof (prove)\nusing this:\n  f x y = Lt\n  f y z = Lt\n  linear_order ord\n\ngoal (1 subgoal):\n 1. f x z = Lt", "by(auto simp add: f_def linear_order_on_def partial_order_on_def preorder_on_def split: if_split_asm dest: transD)"], ["proof (state)\nthis:\n  \\<lbrakk>f ?x1 ?y1 = Lt; f ?y1 ?z1 = Lt\\<rbrakk>\n  \\<Longrightarrow> f ?x1 ?z1 = Lt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  comparator f\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. comparator f}", "thus ?thesis"], ["proof (prove)\nusing this:\n  comparator f\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. comparator f}", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> {f. comparator f}\n\ngoal:\nNo subgoals!", "qed"], ["", "setup_lifting type_definition_compare"], ["", "lift_definition (code_dt) ccompare_comparator :: \"'a :: ccompare compare option\"\nis \"CCOMPARE('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred_option comparator ccompare", "apply(cases \"CCOMPARE('a)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. ccompare = None \\<Longrightarrow> pred_option comparator ccompare\n 2. \\<And>a.\n       ccompare = Some a \\<Longrightarrow> pred_option comparator ccompare", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccompare = None \\<Longrightarrow> pred_option comparator ccompare", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       ccompare = Some a \\<Longrightarrow> pred_option comparator ccompare", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccompare = Some a_ \\<Longrightarrow> pred_option comparator ccompare", "by(rule forw_subst[where P=\"pred_option _\"], assumption)(simp (no_asm_use); simp add: ccompare)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lift_definition uprod_compare :: \"'a compare \\<Rightarrow> 'a uprod comparator\"\nis \"\\<lambda>compare (a, b) (c, d).\n  let (x, y) = case compare a b of Lt \\<Rightarrow> (a, b) | _ \\<Rightarrow> (b, a);\n      (x', y') = case compare c d of Lt \\<Rightarrow> (c, d) | _ \\<Rightarrow> (d, c)\n  in case compare x x' of Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt | Eq \\<Rightarrow> compare y y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun prod1 prod2 prod3 prod4.\n       \\<lbrakk>comparator fun; eq_upair prod1 prod2;\n        eq_upair prod3 prod4\\<rbrakk>\n       \\<Longrightarrow> (case prod1 of\n                          (a, b) \\<Rightarrow>\n                            \\<lambda>(c, d).\n                               let (x, y) =\n                                     case fun a b of Lt \\<Rightarrow> (a, b)\n                                     | _ \\<Rightarrow> (b, a);\n                                   (x', y') =\n                                     case fun c d of Lt \\<Rightarrow> (c, d)\n                                     | _ \\<Rightarrow> (d, c)\n                               in case fun x x' of Eq \\<Rightarrow> fun y y'\n                                  | Lt \\<Rightarrow> Lt\n                                  | Gt \\<Rightarrow> Gt)\n                          prod3 =\n                         (case prod2 of\n                          (a, b) \\<Rightarrow>\n                            \\<lambda>(c, d).\n                               let (x, y) =\n                                     case fun a b of Lt \\<Rightarrow> (a, b)\n                                     | _ \\<Rightarrow> (b, a);\n                                   (x', y') =\n                                     case fun c d of Lt \\<Rightarrow> (c, d)\n                                     | _ \\<Rightarrow> (d, c)\n                               in case fun x x' of Eq \\<Rightarrow> fun y y'\n                                  | Lt \\<Rightarrow> Lt\n                                  | Gt \\<Rightarrow> Gt)\n                          prod4", "subgoal for compare ab ab' cd cd'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>comparator compare; eq_upair ab ab'; eq_upair cd cd'\\<rbrakk>\n    \\<Longrightarrow> (case ab of\n                       (a, b) \\<Rightarrow>\n                         \\<lambda>(c, d).\n                            let (x, y) =\n                                  case compare a b of\n                                  Lt \\<Rightarrow> (a, b)\n                                  | _ \\<Rightarrow> (b, a);\n                                (x', y') =\n                                  case compare c d of\n                                  Lt \\<Rightarrow> (c, d)\n                                  | _ \\<Rightarrow> (d, c)\n                            in case compare x x' of\n                               Eq \\<Rightarrow> compare y y'\n                               | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n                       cd =\n                      (case ab' of\n                       (a, b) \\<Rightarrow>\n                         \\<lambda>(c, d).\n                            let (x, y) =\n                                  case compare a b of\n                                  Lt \\<Rightarrow> (a, b)\n                                  | _ \\<Rightarrow> (b, a);\n                                (x', y') =\n                                  case compare c d of\n                                  Lt \\<Rightarrow> (c, d)\n                                  | _ \\<Rightarrow> (d, c)\n                            in case compare x x' of\n                               Eq \\<Rightarrow> compare y y'\n                               | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n                       cd'", "proof(cases ab; cases ab'; cases cd; cases cd'; hypsubst; clarsimp; elim disjE conjE; clarsimp)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "fix a b c d"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "assume compare: \"comparator compare\""], ["proof (state)\nthis:\n  comparator compare\n\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "then"], ["proof (chain)\npicking this:\n  comparator compare", "interpret comparator compare"], ["proof (prove)\nusing this:\n  comparator compare\n\ngoal (1 subgoal):\n 1. comparator compare", "."], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "let ?xy = \"case compare a b of Lt \\<Rightarrow> (a, b) | _ \\<Rightarrow> (b, a)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "let ?xy' = \"case compare c d of Lt \\<Rightarrow> (c, d) | _ \\<Rightarrow> (d, c)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "let ?yx = \"case compare b a of Lt \\<Rightarrow> (b, a) | _ \\<Rightarrow> (a, b)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "let ?yx' = \"case compare d c of Lt \\<Rightarrow> (d, c) | _ \\<Rightarrow> (c, d)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "have [simp]: \"?xy = ?yx\" \"?xy' = ?yx'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case compare a b of Lt \\<Rightarrow> (a, b) | _ \\<Rightarrow> (b, a)) =\n    (case compare b a of Lt \\<Rightarrow> (b, a)\n     | _ \\<Rightarrow> (a, b)) &&&\n    (case compare c d of Lt \\<Rightarrow> (c, d) | _ \\<Rightarrow> (d, c)) =\n    (case compare d c of Lt \\<Rightarrow> (d, c) | _ \\<Rightarrow> (c, d))", "by(auto split: order.split simp add: eq Gt_lt_conv Lt_lt_conv)"], ["proof (state)\nthis:\n  (case compare a b of Lt \\<Rightarrow> (a, b) | _ \\<Rightarrow> (b, a)) =\n  (case compare b a of Lt \\<Rightarrow> (b, a) | _ \\<Rightarrow> (a, b))\n  (case compare c d of Lt \\<Rightarrow> (c, d) | _ \\<Rightarrow> (d, c)) =\n  (case compare d c of Lt \\<Rightarrow> (d, c) | _ \\<Rightarrow> (c, d))\n\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "let ?side = \"\\<lambda>xy xy'. case xy of (x, y) \\<Rightarrow> case xy' of (x', y') \\<Rightarrow> (case compare x x' of Eq \\<Rightarrow> compare y y' | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 2. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (ac, bc);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n 3. \\<And>aa ba ac bc.\n       \\<lbrakk>comparator compare; ab' = (aa, ba); cd = (bc, ac);\n        cd' = (ac, bc); ab = (ba, aa)\\<rbrakk>\n       \\<Longrightarrow> (case case compare ba aa of\n                               Lt \\<Rightarrow> (ba, aa)\n                               | _ \\<Rightarrow> (aa, ba) of\n                          (x, y) \\<Rightarrow>\n                            case case compare bc ac of\n                                 Lt \\<Rightarrow> (bc, ac)\n                                 | _ \\<Rightarrow> (ac, bc) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n                         (case case compare aa ba of\n                               Lt \\<Rightarrow> (aa, ba)\n                               | _ \\<Rightarrow> (ba, aa) of\n                          (x, y) \\<Rightarrow>\n                            case case compare ac bc of\n                                 Lt \\<Rightarrow> (ac, bc)\n                                 | _ \\<Rightarrow> (bc, ac) of\n                            (x', y') \\<Rightarrow>\n                              case compare x x' of\n                              Eq \\<Rightarrow> compare y y'\n                              | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "show \"?side ?xy ?xy' = ?side ?xy ?yx'\" \"?side ?yx ?xy' = ?side ?xy ?xy'\" \"?side ?yx ?yx' = ?side ?xy ?xy'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case case compare a b of Lt \\<Rightarrow> (a, b)\n          | _ \\<Rightarrow> (b, a) of\n     (x, y) \\<Rightarrow>\n       case case compare c d of Lt \\<Rightarrow> (c, d)\n            | _ \\<Rightarrow> (d, c) of\n       (x', y') \\<Rightarrow>\n         case compare x x' of Eq \\<Rightarrow> compare y y'\n         | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n    (case case compare a b of Lt \\<Rightarrow> (a, b)\n          | _ \\<Rightarrow> (b, a) of\n     (x, y) \\<Rightarrow>\n       case case compare d c of Lt \\<Rightarrow> (d, c)\n            | _ \\<Rightarrow> (c, d) of\n       (x', y') \\<Rightarrow>\n         case compare x x' of Eq \\<Rightarrow> compare y y'\n         | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) &&&\n    (case case compare b a of Lt \\<Rightarrow> (b, a)\n          | _ \\<Rightarrow> (a, b) of\n     (x, y) \\<Rightarrow>\n       case case compare c d of Lt \\<Rightarrow> (c, d)\n            | _ \\<Rightarrow> (d, c) of\n       (x', y') \\<Rightarrow>\n         case compare x x' of Eq \\<Rightarrow> compare y y'\n         | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n    (case case compare a b of Lt \\<Rightarrow> (a, b)\n          | _ \\<Rightarrow> (b, a) of\n     (x, y) \\<Rightarrow>\n       case case compare c d of Lt \\<Rightarrow> (c, d)\n            | _ \\<Rightarrow> (d, c) of\n       (x', y') \\<Rightarrow>\n         case compare x x' of Eq \\<Rightarrow> compare y y'\n         | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) &&&\n    (case case compare b a of Lt \\<Rightarrow> (b, a)\n          | _ \\<Rightarrow> (a, b) of\n     (x, y) \\<Rightarrow>\n       case case compare d c of Lt \\<Rightarrow> (d, c)\n            | _ \\<Rightarrow> (c, d) of\n       (x', y') \\<Rightarrow>\n         case compare x x' of Eq \\<Rightarrow> compare y y'\n         | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n    (case case compare a b of Lt \\<Rightarrow> (a, b)\n          | _ \\<Rightarrow> (b, a) of\n     (x, y) \\<Rightarrow>\n       case case compare c d of Lt \\<Rightarrow> (c, d)\n            | _ \\<Rightarrow> (d, c) of\n       (x', y') \\<Rightarrow>\n         case compare x x' of Eq \\<Rightarrow> compare y y'\n         | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)", "by simp_all"], ["proof (state)\nthis:\n  (case case compare a b of Lt \\<Rightarrow> (a, b)\n        | _ \\<Rightarrow> (b, a) of\n   (x, y) \\<Rightarrow>\n     case case compare c d of Lt \\<Rightarrow> (c, d)\n          | _ \\<Rightarrow> (d, c) of\n     (x', y') \\<Rightarrow>\n       case compare x x' of Eq \\<Rightarrow> compare y y'\n       | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n  (case case compare a b of Lt \\<Rightarrow> (a, b)\n        | _ \\<Rightarrow> (b, a) of\n   (x, y) \\<Rightarrow>\n     case case compare d c of Lt \\<Rightarrow> (d, c)\n          | _ \\<Rightarrow> (c, d) of\n     (x', y') \\<Rightarrow>\n       case compare x x' of Eq \\<Rightarrow> compare y y'\n       | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n  (case case compare b a of Lt \\<Rightarrow> (b, a)\n        | _ \\<Rightarrow> (a, b) of\n   (x, y) \\<Rightarrow>\n     case case compare c d of Lt \\<Rightarrow> (c, d)\n          | _ \\<Rightarrow> (d, c) of\n     (x', y') \\<Rightarrow>\n       case compare x x' of Eq \\<Rightarrow> compare y y'\n       | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n  (case case compare a b of Lt \\<Rightarrow> (a, b)\n        | _ \\<Rightarrow> (b, a) of\n   (x, y) \\<Rightarrow>\n     case case compare c d of Lt \\<Rightarrow> (c, d)\n          | _ \\<Rightarrow> (d, c) of\n     (x', y') \\<Rightarrow>\n       case compare x x' of Eq \\<Rightarrow> compare y y'\n       | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n  (case case compare b a of Lt \\<Rightarrow> (b, a)\n        | _ \\<Rightarrow> (a, b) of\n   (x, y) \\<Rightarrow>\n     case case compare d c of Lt \\<Rightarrow> (d, c)\n          | _ \\<Rightarrow> (c, d) of\n     (x', y') \\<Rightarrow>\n       case compare x x' of Eq \\<Rightarrow> compare y y'\n       | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt) =\n  (case case compare a b of Lt \\<Rightarrow> (a, b)\n        | _ \\<Rightarrow> (b, a) of\n   (x, y) \\<Rightarrow>\n     case case compare c d of Lt \\<Rightarrow> (c, d)\n          | _ \\<Rightarrow> (d, c) of\n     (x', y') \\<Rightarrow>\n       case compare x x' of Eq \\<Rightarrow> compare y y'\n       | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma uprod_compare_simps [simp, code]:\n  \"uprod_compare compare (Upair a b) (Upair c d) =\n   (let (x, y) = case Rep_compare compare a b of Lt \\<Rightarrow> (a, b) | _ \\<Rightarrow> (b, a);\n        (x', y') = case Rep_compare compare c d of Lt \\<Rightarrow> (c, d) | _ \\<Rightarrow> (d, c)\n    in case Rep_compare compare x x' of Eq \\<Rightarrow> Rep_compare compare y y' | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\"\n  for compare"], ["proof (prove)\ngoal (1 subgoal):\n 1. uprod_compare compare (Upair a b) (Upair c d) =\n    (let (x, y) =\n           case Rep_compare compare a b of Lt \\<Rightarrow> (a, b)\n           | _ \\<Rightarrow> (b, a);\n         (x', y') =\n           case Rep_compare compare c d of Lt \\<Rightarrow> (c, d)\n           | _ \\<Rightarrow> (d, c)\n     in case Rep_compare compare x x' of\n        Eq \\<Rightarrow> Rep_compare compare y y' | Lt \\<Rightarrow> Lt\n        | Gt \\<Rightarrow> Gt)", "supply Upair.transfer[transfer_rule]"], ["proof (prove)\ngoal (1 subgoal):\n 1. uprod_compare compare (Upair a b) (Upair c d) =\n    (let (x, y) =\n           case Rep_compare compare a b of Lt \\<Rightarrow> (a, b)\n           | _ \\<Rightarrow> (b, a);\n         (x', y') =\n           case Rep_compare compare c d of Lt \\<Rightarrow> (c, d)\n           | _ \\<Rightarrow> (d, c)\n     in case Rep_compare compare x x' of\n        Eq \\<Rightarrow> Rep_compare compare y y' | Lt \\<Rightarrow> Lt\n        | Gt \\<Rightarrow> Gt)", "by transfer simp"], ["", "lemma comparator_uprod_compare: \"comparator (uprod_compare compare)\" for compare"], ["proof (prove)\ngoal (1 subgoal):\n 1. comparator (uprod_compare compare)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       invert_order (uprod_compare compare x y) = uprod_compare compare y x\n 2. \\<And>x y. uprod_compare compare x y = Eq \\<Longrightarrow> x = y\n 3. \\<And>x y z.\n       \\<lbrakk>uprod_compare compare x y = Lt;\n        uprod_compare compare y z = Lt\\<rbrakk>\n       \\<Longrightarrow> uprod_compare compare x z = Lt", "show \"invert_order (uprod_compare compare x y) = uprod_compare compare y x\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. invert_order (uprod_compare compare x y) = uprod_compare compare y x", "proof(transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>compare x y.\n       comparator compare \\<Longrightarrow>\n       invert_order\n        ((case x of\n          (a, b) \\<Rightarrow>\n            \\<lambda>(c, d).\n               let (x, y) =\n                     case compare a b of Lt \\<Rightarrow> (a, b)\n                     | _ \\<Rightarrow> (b, a);\n                   (x', y') =\n                     case compare c d of Lt \\<Rightarrow> (c, d)\n                     | _ \\<Rightarrow> (d, c)\n               in case compare x x' of Eq \\<Rightarrow> compare y y'\n                  | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n          y) =\n       (case y of\n        (a, b) \\<Rightarrow>\n          \\<lambda>(c, d).\n             let (x, y) =\n                   case compare a b of Lt \\<Rightarrow> (a, b)\n                   | _ \\<Rightarrow> (b, a);\n                 (x', y') =\n                   case compare c d of Lt \\<Rightarrow> (c, d)\n                   | _ \\<Rightarrow> (d, c)\n             in case compare x x' of Eq \\<Rightarrow> compare y y'\n                | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n        x", "case (1 compare x y)"], ["proof (state)\nthis:\n  comparator compare\n\ngoal (1 subgoal):\n 1. \\<And>compare x y.\n       comparator compare \\<Longrightarrow>\n       invert_order\n        ((case x of\n          (a, b) \\<Rightarrow>\n            \\<lambda>(c, d).\n               let (x, y) =\n                     case compare a b of Lt \\<Rightarrow> (a, b)\n                     | _ \\<Rightarrow> (b, a);\n                   (x', y') =\n                     case compare c d of Lt \\<Rightarrow> (c, d)\n                     | _ \\<Rightarrow> (d, c)\n               in case compare x x' of Eq \\<Rightarrow> compare y y'\n                  | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n          y) =\n       (case y of\n        (a, b) \\<Rightarrow>\n          \\<lambda>(c, d).\n             let (x, y) =\n                   case compare a b of Lt \\<Rightarrow> (a, b)\n                   | _ \\<Rightarrow> (b, a);\n                 (x', y') =\n                   case compare c d of Lt \\<Rightarrow> (c, d)\n                   | _ \\<Rightarrow> (d, c)\n             in case compare x x' of Eq \\<Rightarrow> compare y y'\n                | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n        x", "then"], ["proof (chain)\npicking this:\n  comparator compare", "interpret comparator compare"], ["proof (prove)\nusing this:\n  comparator compare\n\ngoal (1 subgoal):\n 1. comparator compare", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>compare x y.\n       comparator compare \\<Longrightarrow>\n       invert_order\n        ((case x of\n          (a, b) \\<Rightarrow>\n            \\<lambda>(c, d).\n               let (x, y) =\n                     case compare a b of Lt \\<Rightarrow> (a, b)\n                     | _ \\<Rightarrow> (b, a);\n                   (x', y') =\n                     case compare c d of Lt \\<Rightarrow> (c, d)\n                     | _ \\<Rightarrow> (d, c)\n               in case compare x x' of Eq \\<Rightarrow> compare y y'\n                  | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n          y) =\n       (case y of\n        (a, b) \\<Rightarrow>\n          \\<lambda>(c, d).\n             let (x, y) =\n                   case compare a b of Lt \\<Rightarrow> (a, b)\n                   | _ \\<Rightarrow> (b, a);\n                 (x', y') =\n                   case compare c d of Lt \\<Rightarrow> (c, d)\n                   | _ \\<Rightarrow> (d, c)\n             in case compare x x' of Eq \\<Rightarrow> compare y y'\n                | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n        x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. invert_order\n     ((case x of\n       (a, b) \\<Rightarrow>\n         \\<lambda>(c, d).\n            let (x, y) =\n                  case compare a b of Lt \\<Rightarrow> (a, b)\n                  | _ \\<Rightarrow> (b, a);\n                (x', y') =\n                  case compare c d of Lt \\<Rightarrow> (c, d)\n                  | _ \\<Rightarrow> (d, c)\n            in case compare x x' of Eq \\<Rightarrow> compare y y'\n               | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n       y) =\n    (case y of\n     (a, b) \\<Rightarrow>\n       \\<lambda>(c, d).\n          let (x, y) =\n                case compare a b of Lt \\<Rightarrow> (a, b)\n                | _ \\<Rightarrow> (b, a);\n              (x', y') =\n                case compare c d of Lt \\<Rightarrow> (c, d)\n                | _ \\<Rightarrow> (d, c)\n          in case compare x x' of Eq \\<Rightarrow> compare y y'\n             | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n     x", "by(auto split!: order.split prod.split simp add: eq Gt_lt_conv Lt_lt_conv sym dest: order.asym)"], ["proof (state)\nthis:\n  invert_order\n   ((case x of\n     (a, b) \\<Rightarrow>\n       \\<lambda>(c, d).\n          let (x, y) =\n                case compare a b of Lt \\<Rightarrow> (a, b)\n                | _ \\<Rightarrow> (b, a);\n              (x', y') =\n                case compare c d of Lt \\<Rightarrow> (c, d)\n                | _ \\<Rightarrow> (d, c)\n          in case compare x x' of Eq \\<Rightarrow> compare y y'\n             | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n     y) =\n  (case y of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invert_order (uprod_compare compare ?x ?y) = uprod_compare compare ?y ?x\n\ngoal (2 subgoals):\n 1. \\<And>x y. uprod_compare compare x y = Eq \\<Longrightarrow> x = y\n 2. \\<And>x y z.\n       \\<lbrakk>uprod_compare compare x y = Lt;\n        uprod_compare compare y z = Lt\\<rbrakk>\n       \\<Longrightarrow> uprod_compare compare x z = Lt", "show \"x = y\" if \"uprod_compare compare x y = Eq\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using that"], ["proof (prove)\nusing this:\n  uprod_compare compare x y = Eq\n\ngoal (1 subgoal):\n 1. x = y", "proof(transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>compare x y.\n       \\<lbrakk>comparator compare;\n        (case x of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         y =\n        Eq\\<rbrakk>\n       \\<Longrightarrow> eq_upair x y", "case (1 compare x y)"], ["proof (state)\nthis:\n  comparator compare\n  (case x of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   y =\n  Eq\n\ngoal (1 subgoal):\n 1. \\<And>compare x y.\n       \\<lbrakk>comparator compare;\n        (case x of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         y =\n        Eq\\<rbrakk>\n       \\<Longrightarrow> eq_upair x y", "from 1(1)"], ["proof (chain)\npicking this:\n  comparator compare", "interpret comparator compare"], ["proof (prove)\nusing this:\n  comparator compare\n\ngoal (1 subgoal):\n 1. comparator compare", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>compare x y.\n       \\<lbrakk>comparator compare;\n        (case x of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         y =\n        Eq\\<rbrakk>\n       \\<Longrightarrow> eq_upair x y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_upair x y", "using 1(2)"], ["proof (prove)\nusing this:\n  (case x of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   y =\n  Eq\n\ngoal (1 subgoal):\n 1. eq_upair x y", "by(clarsimp split: order.split_asm prod.split_asm simp add: eq)"], ["proof (state)\nthis:\n  eq_upair x y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  uprod_compare compare ?x ?y = Eq \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>uprod_compare compare x y = Lt;\n        uprod_compare compare y z = Lt\\<rbrakk>\n       \\<Longrightarrow> uprod_compare compare x z = Lt", "show \"uprod_compare compare x z = Lt\" \n    if \"uprod_compare compare x y = Lt\" \"uprod_compare compare y z = Lt\" for x y z"], ["proof (prove)\ngoal (1 subgoal):\n 1. uprod_compare compare x z = Lt", "using that"], ["proof (prove)\nusing this:\n  uprod_compare compare x y = Lt\n  uprod_compare compare y z = Lt\n\ngoal (1 subgoal):\n 1. uprod_compare compare x z = Lt", "proof(transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>compare x y z.\n       \\<lbrakk>comparator compare;\n        (case x of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         y =\n        Lt;\n        (case y of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         z =\n        Lt\\<rbrakk>\n       \\<Longrightarrow> (case x of\n                          (a, b) \\<Rightarrow>\n                            \\<lambda>(c, d).\n                               let (x, y) =\n                                     case compare a b of\n                                     Lt \\<Rightarrow> (a, b)\n                                     | _ \\<Rightarrow> (b, a);\n                                   (x', y') =\n                                     case compare c d of\n                                     Lt \\<Rightarrow> (c, d)\n                                     | _ \\<Rightarrow> (d, c)\n                               in case compare x x' of\n                                  Eq \\<Rightarrow> compare y y'\n                                  | Lt \\<Rightarrow> Lt\n                                  | Gt \\<Rightarrow> Gt)\n                          z =\n                         Lt", "case (1 compare x y z)"], ["proof (state)\nthis:\n  comparator compare\n  (case x of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   y =\n  Lt\n  (case y of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   z =\n  Lt\n\ngoal (1 subgoal):\n 1. \\<And>compare x y z.\n       \\<lbrakk>comparator compare;\n        (case x of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         y =\n        Lt;\n        (case y of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         z =\n        Lt\\<rbrakk>\n       \\<Longrightarrow> (case x of\n                          (a, b) \\<Rightarrow>\n                            \\<lambda>(c, d).\n                               let (x, y) =\n                                     case compare a b of\n                                     Lt \\<Rightarrow> (a, b)\n                                     | _ \\<Rightarrow> (b, a);\n                                   (x', y') =\n                                     case compare c d of\n                                     Lt \\<Rightarrow> (c, d)\n                                     | _ \\<Rightarrow> (d, c)\n                               in case compare x x' of\n                                  Eq \\<Rightarrow> compare y y'\n                                  | Lt \\<Rightarrow> Lt\n                                  | Gt \\<Rightarrow> Gt)\n                          z =\n                         Lt", "from 1(1)"], ["proof (chain)\npicking this:\n  comparator compare", "interpret comparator compare"], ["proof (prove)\nusing this:\n  comparator compare\n\ngoal (1 subgoal):\n 1. comparator compare", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>compare x y z.\n       \\<lbrakk>comparator compare;\n        (case x of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         y =\n        Lt;\n        (case y of\n         (a, b) \\<Rightarrow>\n           \\<lambda>(c, d).\n              let (x, y) =\n                    case compare a b of Lt \\<Rightarrow> (a, b)\n                    | _ \\<Rightarrow> (b, a);\n                  (x', y') =\n                    case compare c d of Lt \\<Rightarrow> (c, d)\n                    | _ \\<Rightarrow> (d, c)\n              in case compare x x' of Eq \\<Rightarrow> compare y y'\n                 | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n         z =\n        Lt\\<rbrakk>\n       \\<Longrightarrow> (case x of\n                          (a, b) \\<Rightarrow>\n                            \\<lambda>(c, d).\n                               let (x, y) =\n                                     case compare a b of\n                                     Lt \\<Rightarrow> (a, b)\n                                     | _ \\<Rightarrow> (b, a);\n                                   (x', y') =\n                                     case compare c d of\n                                     Lt \\<Rightarrow> (c, d)\n                                     | _ \\<Rightarrow> (d, c)\n                               in case compare x x' of\n                                  Eq \\<Rightarrow> compare y y'\n                                  | Lt \\<Rightarrow> Lt\n                                  | Gt \\<Rightarrow> Gt)\n                          z =\n                         Lt", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case x of\n     (a, b) \\<Rightarrow>\n       \\<lambda>(c, d).\n          let (x, y) =\n                case compare a b of Lt \\<Rightarrow> (a, b)\n                | _ \\<Rightarrow> (b, a);\n              (x', y') =\n                case compare c d of Lt \\<Rightarrow> (c, d)\n                | _ \\<Rightarrow> (d, c)\n          in case compare x x' of Eq \\<Rightarrow> compare y y'\n             | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n     z =\n    Lt", "using 1(2-)"], ["proof (prove)\nusing this:\n  (case x of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   y =\n  Lt\n  (case y of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   z =\n  Lt\n\ngoal (1 subgoal):\n 1. (case x of\n     (a, b) \\<Rightarrow>\n       \\<lambda>(c, d).\n          let (x, y) =\n                case compare a b of Lt \\<Rightarrow> (a, b)\n                | _ \\<Rightarrow> (b, a);\n              (x', y') =\n                case compare c d of Lt \\<Rightarrow> (c, d)\n                | _ \\<Rightarrow> (d, c)\n          in case compare x x' of Eq \\<Rightarrow> compare y y'\n             | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n     z =\n    Lt", "by(auto split!: order.splits prod.split_asm simp add: eq Gt_lt_conv Lt_lt_conv elim: trans)"], ["proof (state)\nthis:\n  (case x of\n   (a, b) \\<Rightarrow>\n     \\<lambda>(c, d).\n        let (x, y) =\n              case compare a b of Lt \\<Rightarrow> (a, b)\n              | _ \\<Rightarrow> (b, a);\n            (x', y') =\n              case compare c d of Lt \\<Rightarrow> (c, d)\n              | _ \\<Rightarrow> (d, c)\n        in case compare x x' of Eq \\<Rightarrow> compare y y'\n           | Lt \\<Rightarrow> Lt | Gt \\<Rightarrow> Gt)\n   z =\n  Lt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>uprod_compare compare ?x ?y = Lt;\n   uprod_compare compare ?y ?z = Lt\\<rbrakk>\n  \\<Longrightarrow> uprod_compare compare ?x ?z = Lt\n\ngoal:\nNo subgoals!", "qed"], ["", "instantiation uprod :: (ccompare) ccompare begin"], ["", "definition ccompare_uprod\nwhere \"ccompare_uprod = map_option uprod_compare (ccompare_comparator :: 'a compare option)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a uprod, ccompare_class)", "by standard(clarsimp simp add: ccompare_uprod_def comparator_uprod_compare)"], ["", "end"], ["", "instantiation uprod :: (set_impl) set_impl begin"], ["", "definition \"SET_IMPL('a uprod) = Phantom('a uprod) (of_phantom SET_IMPL('a))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a uprod, set_impl_class)", ".."], ["", "end"], ["", "(* Graph uses successor representation with function \n  -> let's write a code equation for imp_graph\n  -> let's first define the successor operation for an individual vertex.\n*)"], ["", "function succs_of_clause :: \"lit \\<Rightarrow> lit uprod \\<Rightarrow> lit set \\<Rightarrow> lit set\" where\n  \"succs_of_clause l (Upair l1 l2) = (if l = negate l1 then insert l2 else if l = negate l2 then insert l1 else id)\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>l l1 l2.\n           x = (l, Upair l1 l2) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>l l1 l2 la l1a l2a.\n       (l, Upair l1 l2) = (la, Upair l1a l2a) \\<Longrightarrow>\n       (if l = negate l1 then insert l2\n        else if l = negate l2 then insert l1 else id) =\n       (if la = negate l1a then insert l2a\n        else if la = negate l2a then insert l1a else id)", "by(metis surj_pair uprod_exhaust) auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All succs_of_clause_dom", "by lexicographic_order"], ["", "lemma succs_of_clause_split: \"P (succs_of_clause l x) \\<longleftrightarrow> (\\<forall>l1 l2. x = Upair l1 l2 \\<longrightarrow> P (succs_of_clause l (Upair l1 l2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (succs_of_clause l x) =\n    (\\<forall>l1 l2.\n        x = Upair l1 l2 \\<longrightarrow>\n        P (succs_of_clause l (Upair l1 l2)))", "by(cases x)(auto simp only:)"], ["", "context begin"], ["", "lemma commute_succs_of_clause: \"comp_fun_commute (succs_of_clause l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (succs_of_clause l)", "by unfold_locales(auto split: succs_of_clause_split)"], ["", "interpretation comp_fun_commute \"succs_of_clause l\" for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (succs_of_clause l)", "by(rule commute_succs_of_clause)"], ["", "lemma idem_succs_of_clause: \"comp_fun_idem (succs_of_clause l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem (succs_of_clause l)", "by unfold_locales(auto split: succs_of_clause_split)"], ["", "interpretation comp_fun_idem \"succs_of_clause l\" for l"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem (succs_of_clause l)", "by(rule idem_succs_of_clause)"], ["", "lift_definition succs_loop_body :: \"lit \\<Rightarrow> (lit uprod, lit set) comp_fun_idem\" is\n  \"succs_of_clause\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>lit. comp_fun_idem (succs_of_clause lit)", "by(rule idem_succs_of_clause)"], ["", "definition succ_imp_graph :: \"cnf \\<Rightarrow> lit \\<Rightarrow> lit set\"\n  where \"succ_imp_graph cnf l = set_fold_cfi (succs_loop_body l) {} cnf\""], ["", "lemma succ_imp_graph_alt_def: \n  \"succ_imp_graph cnf l = Finite_Set.fold (succs_of_clause l) {} cnf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_imp_graph cnf l = Finite_Set.fold (succs_of_clause l) {} cnf", "unfolding succ_imp_graph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_fold_cfi (succs_loop_body l) {} cnf =\n    Finite_Set.fold (succs_of_clause l) {} cnf", "by transfer simp"], ["", "lemma succ_imp_graph_correct: \n  \"finite cnf \\<Longrightarrow> succ_imp_graph cnf l = {l'. (l, l') \\<in> imp_graph cnf}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite cnf \\<Longrightarrow>\n    succ_imp_graph cnf l = {l'. (l, l') \\<in> imp_graph cnf}", "by(induction rule: finite_induct)(auto split: succs_of_clause_split simp add: succ_imp_graph_alt_def)"], ["", "end"], ["", "lemma imp_graph_code:\n  \"imp_graph cnf = \n  (if finite cnf then {(l, l'). l' \\<in> succ_imp_graph cnf l} \n   else Code.abort (STR ''Infinite or invalid 2CNF formula'') (\\<lambda>_. imp_graph cnf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. imp_graph cnf =\n    (if finite cnf then {(l, l'). l' \\<in> succ_imp_graph cnf l}\n     else Code.abort STR ''Infinite or invalid 2CNF formula''\n           (\\<lambda>_. imp_graph cnf))", "by(auto simp add: succ_imp_graph_correct)"], ["", "lift_definition imp_graph_impl :: \"cnf \\<Rightarrow> lit graph\" is imp_graph"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemmas [code] = imp_graph_code[containers_identify]"], ["", "lemma UNIV_lit: \"UNIV = range (\\<lambda>(x, pos). Lit x pos)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = range (\\<lambda>(x, pos). Lit x pos)", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> range (\\<lambda>x. case x of (x, xa) \\<Rightarrow> Lit x xa)", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> range (\\<lambda>x. case x of (x, xa) \\<Rightarrow> Lit x xa)", "by(cases x; auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instantiation lit :: finite_UNIV begin"], ["", "definition \"finite_UNIV_lit = Phantom(lit) False\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(lit, finite_UNIV_class)", "by(standard)(auto simp add: finite_UNIV_lit_def UNIV_lit inj_on_def UNIV_Times_UNIV[symmetric] finite_cartesian_product_iff simp del: UNIV_Times_UNIV dest!: finite_imageD)"], ["", "end"], ["", "derive (eq) ceq lit"], ["", "derive (rbt) set_impl lit"], ["", "derive ccompare lit"], ["", "export_code imp_graph_impl checking SML"], ["", "lemma finite_vars_of_cnf: \"finite cnf \\<Longrightarrow> finite (vars_of_cnf cnf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite cnf \\<Longrightarrow> finite (vars_of_cnf cnf)", "by(clarsimp simp add: vars_of_cnf_def)"], ["", "lemma satisfiable_code:\n  \"satisfiable cnf \\<longleftrightarrow> \n  (if finite cnf \\<and> is_2sat cnf then \n   let G = imp_graph cnf in \\<forall>x\\<in>vars_of_cnf cnf. \\<not> (reachable G (Pos x) (Neg x) \\<and> reachable G (Neg x) (Pos x))\n   else Code.abort (STR ''Infinite or invalid 2CNF formula'') (\\<lambda>_. satisfiable cnf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfiable cnf =\n    (if finite cnf \\<and> is_2sat cnf\n     then let G = imp_graph cnf\n          in \\<forall>x\\<in>vars_of_cnf cnf.\n                \\<not> (reachable G (Pos x) (Neg x) \\<and>\n                        reachable G (Neg x) (Pos x))\n     else Code.abort STR ''Infinite or invalid 2CNF formula''\n           (\\<lambda>_. satisfiable cnf))", "by(simp add: reachable_def finite_2sat_iff finite_vars_of_cnf Let_def)"], ["", "lemmas [code] = satisfiable_code[containers_identify]"], ["", "export_code satisfiable checking SML"], ["", "subsection \\<open>Memoize the implication graph's successor function\\<close>"], ["", "lemma succ_imp_graph_outside: \"succ_imp_graph cnf l = {}\" if \"var l \\<notin> vars_of_cnf cnf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_imp_graph cnf l = {}", "proof(cases \"finite cnf\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}\n 2. infinite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}", "case True"], ["proof (state)\nthis:\n  finite cnf\n\ngoal (2 subgoals):\n 1. finite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}\n 2. infinite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}", "interpret comp_fun_idem \"succs_of_clause l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem (succs_of_clause l)", "by(rule idem_succs_of_clause)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}\n 2. infinite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_imp_graph cnf l = {}", "using True that"], ["proof (prove)\nusing this:\n  finite cnf\n  var l \\<notin> vars_of_cnf cnf\n\ngoal (1 subgoal):\n 1. succ_imp_graph cnf l = {}", "by induction(auto simp add: succ_imp_graph_alt_def vars_of_cnf_def split: if_split_asm succs_of_clause_split)"], ["proof (state)\nthis:\n  succ_imp_graph cnf l = {}\n\ngoal (1 subgoal):\n 1. infinite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}", "case False"], ["proof (state)\nthis:\n  infinite cnf\n\ngoal (1 subgoal):\n 1. infinite cnf \\<Longrightarrow> succ_imp_graph cnf l = {}", "then"], ["proof (chain)\npicking this:\n  infinite cnf", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite cnf\n\ngoal (1 subgoal):\n 1. succ_imp_graph cnf l = {}", "by(simp add: succ_imp_graph_alt_def)"], ["proof (state)\nthis:\n  succ_imp_graph cnf l = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lift_definition tabulate_graph :: \"cnf \\<Rightarrow> (lit, lit set) mapping\" is\n  \"\\<lambda>cnf x. if x \\<notin> Domain (imp_graph cnf) then None else Some (imp_graph cnf `` {x})\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "primrec insert_mapping :: \"'k \\<times> 'v \\<Rightarrow> ('k, 'v set) mapping \\<Rightarrow> ('k, 'v set) mapping\" where\n  \"insert_mapping (k, v) m = (case Mapping.lookup m k of None \\<Rightarrow> Mapping.update k {v} m | Some V \\<Rightarrow> Mapping.update k (insert v V) m)\""], ["", "lemma comp_fun_idem_insert_mapping: \"comp_fun_idem insert_mapping\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem insert_mapping", "unfolding insert_mapping_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem\n     (\\<lambda>uu.\n         case uu of\n         (k, v) \\<Rightarrow>\n           \\<lambda>m.\n              case Mapping.lookup m k of\n              None \\<Rightarrow> Mapping.update k {v} m\n              | Some V \\<Rightarrow> Mapping.update k (insert v V) m)", "by(unfold_locales; transfer; auto simp add: Map_To_Mapping.map_apply_def fun_eq_iff split!: option.split)"], ["", "context begin"], ["", "interpretation comp_fun_idem insert_mapping"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem insert_mapping", "by(rule comp_fun_idem_insert_mapping)"], ["", "function insert_clause :: \"clause \\<Rightarrow> (lit, lit set) mapping \\<Rightarrow> (lit, lit set) mapping\" where\n  \"insert_clause (Upair l1 l2) = insert_mapping (negate l1, l2) \\<circ> insert_mapping (negate l2, l1)\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>l1 l2. x = Upair l1 l2 \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>l1 l2 l1a l2a.\n       Upair l1 l2 = Upair l1a l2a \\<Longrightarrow>\n       insert_mapping (negate l1, l2) \\<circ>\n       insert_mapping (negate l2, l1) =\n       insert_mapping (negate l1a, l2a) \\<circ>\n       insert_mapping (negate l2a, l1a)", "by(metis uprod_exhaust)(auto simp add: comp_fun_commute)"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All insert_clause_dom", "by lexicographic_order"], ["", "lemma comp_fun_idem_insert_clause: \"comp_fun_idem insert_clause\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem insert_clause", "apply(unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x.\n       insert_clause y \\<circ> insert_clause x =\n       insert_clause x \\<circ> insert_clause y\n 2. \\<And>x. insert_clause x \\<circ> insert_clause x = insert_clause x", "subgoal for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_clause x \\<circ> insert_clause y =\n    insert_clause y \\<circ> insert_clause x", "by(cases x; cases y; simp; metis commute_left_comp comp_fun_commute rewriteL_comp_comp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. insert_clause x \\<circ> insert_clause x = insert_clause x", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_clause x \\<circ> insert_clause x = insert_clause x", "by(cases x; simp; metis (no_types, hide_lams) commute_left_comp comp_assoc comp_fun_idem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lift_definition insert_clause' :: \"(clause, (lit, lit set) mapping) comp_fun_idem\" is \"insert_clause\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem insert_clause", "by(rule comp_fun_idem_insert_clause)"], ["", "lemma tabulate_graph_code [code]:\n  \"tabulate_graph cnf = \n  (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf \n   else Code.abort (STR ''Infinite clause set'') (\\<lambda>_. tabulate_graph cnf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tabulate_graph cnf =\n    (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf\n     else Code.abort STR ''Infinite clause set''\n           (\\<lambda>_. tabulate_graph cnf))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tabulate_graph cnf =\n    (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf\n     else Code.abort STR ''Infinite clause set''\n           (\\<lambda>_. tabulate_graph cnf))", "interpret comp_fun_idem insert_clause"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_idem insert_clause", "by(rule comp_fun_idem_insert_clause)"], ["proof (state)\ngoal (1 subgoal):\n 1. tabulate_graph cnf =\n    (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf\n     else Code.abort STR ''Infinite clause set''\n           (\\<lambda>_. tabulate_graph cnf))", "have * [symmetric]: \"Finite_Set.fold insert_clause Mapping.empty cnf = tabulate_graph cnf\"\n    if \"finite cnf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold insert_clause Mapping.empty cnf = tabulate_graph cnf", "using that"], ["proof (prove)\nusing this:\n  finite cnf\n\ngoal (1 subgoal):\n 1. Finite_Set.fold insert_clause Mapping.empty cnf = tabulate_graph cnf", "proof(induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. Finite_Set.fold insert_clause Mapping.empty {} = tabulate_graph {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Finite_Set.fold insert_clause Mapping.empty F =\n        tabulate_graph F\\<rbrakk>\n       \\<Longrightarrow> Finite_Set.fold insert_clause Mapping.empty\n                          (insert x F) =\n                         tabulate_graph (insert x F)", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. Finite_Set.fold insert_clause Mapping.empty {} = tabulate_graph {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Finite_Set.fold insert_clause Mapping.empty F =\n        tabulate_graph F\\<rbrakk>\n       \\<Longrightarrow> Finite_Set.fold insert_clause Mapping.empty\n                          (insert x F) =\n                         tabulate_graph (insert x F)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold insert_clause Mapping.empty {} = tabulate_graph {}", "by(simp)(transfer; auto simp add: fun_eq_iff Map_To_Mapping.map_empty_def vars_of_cnf_def)"], ["proof (state)\nthis:\n  Finite_Set.fold insert_clause Mapping.empty {} = tabulate_graph {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Finite_Set.fold insert_clause Mapping.empty F =\n        tabulate_graph F\\<rbrakk>\n       \\<Longrightarrow> Finite_Set.fold insert_clause Mapping.empty\n                          (insert x F) =\n                         tabulate_graph (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Finite_Set.fold insert_clause Mapping.empty F =\n        tabulate_graph F\\<rbrakk>\n       \\<Longrightarrow> Finite_Set.fold insert_clause Mapping.empty\n                          (insert x F) =\n                         tabulate_graph (insert x F)", "case (insert C cnf)"], ["proof (state)\nthis:\n  finite cnf\n  C \\<notin> cnf\n  Finite_Set.fold insert_clause Mapping.empty cnf = tabulate_graph cnf\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        Finite_Set.fold insert_clause Mapping.empty F =\n        tabulate_graph F\\<rbrakk>\n       \\<Longrightarrow> Finite_Set.fold insert_clause Mapping.empty\n                          (insert x F) =\n                         tabulate_graph (insert x F)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold insert_clause Mapping.empty (insert C cnf) =\n    tabulate_graph (insert C cnf)", "by(cases C; simp add: insert; transfer)(auto simp add: fun_eq_iff Map_To_Mapping.map_apply_def split!: option.split)"], ["proof (state)\nthis:\n  Finite_Set.fold insert_clause Mapping.empty (insert C cnf) =\n  tabulate_graph (insert C cnf)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite cnf \\<Longrightarrow>\n  tabulate_graph cnf = Finite_Set.fold insert_clause Mapping.empty cnf\n\ngoal (1 subgoal):\n 1. tabulate_graph cnf =\n    (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf\n     else Code.abort STR ''Infinite clause set''\n           (\\<lambda>_. tabulate_graph cnf))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tabulate_graph cnf =\n    (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf\n     else Code.abort STR ''Infinite clause set''\n           (\\<lambda>_. tabulate_graph cnf))", "by(clarsimp)(transfer fixing: cnf; rule *)"], ["proof (state)\nthis:\n  tabulate_graph cnf =\n  (if finite cnf then set_fold_cfi insert_clause' Mapping.empty cnf\n   else Code.abort STR ''Infinite clause set''\n         (\\<lambda>_. tabulate_graph cnf))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma succ_imp_graph_impl_code [code]:\n  \"succ_imp_graph cnf =\n  (if finite cnf then let m = tabulate_graph cnf\n   in (\\<lambda>l. case Mapping.lookup m l of None \\<Rightarrow> {} | Some succs' \\<Rightarrow> succs')\n   else Code.abort (STR ''Infinite clause set'') (\\<lambda>_. succ_imp_graph cnf))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_imp_graph cnf =\n    (if finite cnf\n     then let m = tabulate_graph cnf\n          in (\\<lambda>l.\n                 case Mapping.lookup m l of None \\<Rightarrow> {}\n                 | Some succs' \\<Rightarrow> succs')\n     else Code.abort STR ''Infinite clause set''\n           (\\<lambda>_. succ_imp_graph cnf))", "by transfer(auto simp add: succ_imp_graph_correct fun_eq_iff Map_To_Mapping.map_apply_def dest: succ_imp_graph_outside)"], ["", "end"], ["", "derive (rbt) mapping_impl lit"], ["", "export_code satisfiable checking SML Scala Haskell? OCaml?"], ["", "end"]]}