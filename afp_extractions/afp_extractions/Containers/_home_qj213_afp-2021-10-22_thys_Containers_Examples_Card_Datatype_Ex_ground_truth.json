{"file_name": "/home/qj213/afp-2021-10-22/thys/Containers/Examples/Card_Datatype_Ex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Containers", "problem_names": ["lemma inj_foo [simp]: \n  \"inj Foo\" \n  \"inj Bar\" \"inj (Bar x)\" \n  \"inj FooBar\" \"inj (FooBar x)\" \"inj (FooBar x y)\"", "lemma UNIV_foo: \n  \"(UNIV :: ('a, 'b) foo set) = \n  rangeC {Foo} \\<union> \n  rangeC (rangeC {Bar}) \\<union> \n  rangeC (rangeC (rangeC {FooBar})) \\<union> \n  rangeC {\\<lambda>_::unit. Stop}\"", "lemma finite_UNIV_foo:\n  \"finite (UNIV :: ('a, 'b) foo set) \\<longleftrightarrow> finite (UNIV :: 'a set) \\<and> finite (UNIV :: 'b set)\"", "lemma CARD_foo [card_simps]:\n  \"CARD(('a, 'b) foo) = card_foo CARD('a) CARD('b)\"", "lemma inj_bar [simp]:\n  \"inj Bar2\"\n  \"inj Bar3\"\n  \"inj (Bar3 x)\"\n  \"inj (Bar3 x y)\"\n  \"inj Bar4\"\n  \"inj (Bar4 z)\"\n  \"inj (Bar4 z u)\"", "lemma UNIV_bar: \n  \"(UNIV :: ('a, 'b) bar set) =\n  rangeC {\\<lambda>_::unit. Bar1} \\<union>\n  rangeC {Bar2} \\<union>\n  rangeC (rangeC (rangeC {Bar3})) \\<union>\n  rangeC (rangeC (rangeC {Bar4}))\"", "lemma finite_UNIV_bar:\n  \"finite (UNIV :: ('a, 'b) bar set) \\<longleftrightarrow> finite (UNIV :: 'a set) \\<and> finite (UNIV :: 'b set)\"", "lemma CARD_bar [card_simps]:\n  \"CARD(('a, 'b) bar) = card_bar CARD('a) CARD('b)\"", "lemma inj_expr [simp]:\n  \"inj Node\"\n  \"inj (Node a)\"\n  \"inj (Node a l)\"", "lemma finite_UNIV_tree: \"finite (UNIV :: 'a tree set) \\<longleftrightarrow> False\"", "lemma CARD_tree [card_simps]:\n  \"CARD('a tree) = card_tree CARD('a)\""], "translations": [["", "lemma inj_foo [simp]: \n  \"inj Foo\" \n  \"inj Bar\" \"inj (Bar x)\" \n  \"inj FooBar\" \"inj (FooBar x)\" \"inj (FooBar x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inj Foo &&& inj Bar &&& inj (Bar x)) &&&\n    inj FooBar &&& inj (FooBar x) &&& inj (FooBar x y)", "by(simp_all add: inj_on_def fun_eq_iff)"], ["", "context includes card_datatype begin"], ["", "lemma UNIV_foo: \n  \"(UNIV :: ('a, 'b) foo set) = \n  rangeC {Foo} \\<union> \n  rangeC (rangeC {Bar}) \\<union> \n  rangeC (rangeC (rangeC {FooBar})) \\<union> \n  rangeC {\\<lambda>_::unit. Stop}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV =\n    rangeC {Foo} \\<union> rangeC (rangeC {Bar}) \\<union>\n    rangeC (rangeC (rangeC {FooBar})) \\<union>\n    rangeC {\\<lambda>_. Stop}", "apply(rule UNIV_eq_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rangeC {Foo} \\<union> rangeC (rangeC {Bar}) \\<union>\n               rangeC (rangeC (rangeC {FooBar})) \\<union>\n               rangeC {\\<lambda>_. Stop}", "apply(case_tac x)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x x1.\n       x = Foo x1 \\<Longrightarrow>\n       x \\<in> rangeC {Foo} \\<union> rangeC (rangeC {Bar}) \\<union>\n               rangeC (rangeC (rangeC {FooBar})) \\<union>\n               rangeC {\\<lambda>_. Stop}\n 2. \\<And>x x21 x22.\n       x = Bar x21 x22 \\<Longrightarrow>\n       x \\<in> rangeC {Foo} \\<union> rangeC (rangeC {Bar}) \\<union>\n               rangeC (rangeC (rangeC {FooBar})) \\<union>\n               rangeC {\\<lambda>_. Stop}\n 3. \\<And>x x31 x32 x33.\n       x = FooBar x31 x32 x33 \\<Longrightarrow>\n       x \\<in> rangeC {Foo} \\<union> rangeC (rangeC {Bar}) \\<union>\n               rangeC (rangeC (rangeC {FooBar})) \\<union>\n               rangeC {\\<lambda>_. Stop}\n 4. \\<And>x.\n       x = Stop \\<Longrightarrow>\n       x \\<in> rangeC {Foo} \\<union> rangeC (rangeC {Bar}) \\<union>\n               rangeC (rangeC (rangeC {FooBar})) \\<union>\n               rangeC {\\<lambda>_. Stop}", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_UNIV_foo:\n  \"finite (UNIV :: ('a, 'b) foo set) \\<longleftrightarrow> finite (UNIV :: 'a set) \\<and> finite (UNIV :: 'b set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV = (finite UNIV \\<and> finite UNIV)", "by(simp add: UNIV_foo)"], ["", "definition card_foo :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\"\nwhere \"card_foo a b = (if a = 0 \\<or> b = 0 then 0 else a + a * b + a * b * card_sum a b + 1)\""], ["", "lemma CARD_foo [card_simps]:\n  \"CARD(('a, 'b) foo) = card_foo CARD('a) CARD('b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD(('a, 'b) foo) = card_foo CARD('a) CARD('b)", "by(simp add: card_foo_def UNIV_foo Let_def card_simps)"], ["", "end"], ["", "datatype ('a, 'b) bar \n  = Bar1 \n  | Bar2 \"'a \\<Rightarrow> 'b\"\n  | Bar3 \"('a, 'b) foo\" \"'a \\<Rightarrow> char \\<Rightarrow> 'b \\<Rightarrow> 'a\" \"('a \\<times> 'b) option\" \n  | Bar4 char 'a bool"], ["", "lemma inj_bar [simp]:\n  \"inj Bar2\"\n  \"inj Bar3\"\n  \"inj (Bar3 x)\"\n  \"inj (Bar3 x y)\"\n  \"inj Bar4\"\n  \"inj (Bar4 z)\"\n  \"inj (Bar4 z u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inj Bar2 &&& inj Bar3 &&& inj (Bar3 x)) &&&\n    (inj (Bar3 x y) &&& inj Bar4) &&& inj (Bar4 z) &&& inj (Bar4 z u)", "by(simp_all add: inj_on_def fun_eq_iff)"], ["", "context includes card_datatype begin"], ["", "lemma UNIV_bar: \n  \"(UNIV :: ('a, 'b) bar set) =\n  rangeC {\\<lambda>_::unit. Bar1} \\<union>\n  rangeC {Bar2} \\<union>\n  rangeC (rangeC (rangeC {Bar3})) \\<union>\n  rangeC (rangeC (rangeC {Bar4}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV =\n    rangeC {\\<lambda>_. Bar1} \\<union> rangeC {Bar2} \\<union>\n    rangeC (rangeC (rangeC {Bar3})) \\<union>\n    rangeC (rangeC (rangeC {Bar4}))", "apply(rule UNIV_eq_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> rangeC {\\<lambda>_. Bar1} \\<union> rangeC {Bar2} \\<union>\n               rangeC (rangeC (rangeC {Bar3})) \\<union>\n               rangeC (rangeC (rangeC {Bar4}))", "apply(case_tac x)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x = Bar1 \\<Longrightarrow>\n       x \\<in> rangeC {\\<lambda>_. Bar1} \\<union> rangeC {Bar2} \\<union>\n               rangeC (rangeC (rangeC {Bar3})) \\<union>\n               rangeC (rangeC (rangeC {Bar4}))\n 2. \\<And>x x2.\n       x = Bar2 x2 \\<Longrightarrow>\n       x \\<in> rangeC {\\<lambda>_. Bar1} \\<union> rangeC {Bar2} \\<union>\n               rangeC (rangeC (rangeC {Bar3})) \\<union>\n               rangeC (rangeC (rangeC {Bar4}))\n 3. \\<And>x x31 x32 x33.\n       x = Bar3 x31 x32 x33 \\<Longrightarrow>\n       x \\<in> rangeC {\\<lambda>_. Bar1} \\<union> rangeC {Bar2} \\<union>\n               rangeC (rangeC (rangeC {Bar3})) \\<union>\n               rangeC (rangeC (rangeC {Bar4}))\n 4. \\<And>x x41 x42 x43.\n       x = Bar4 x41 x42 x43 \\<Longrightarrow>\n       x \\<in> rangeC {\\<lambda>_. Bar1} \\<union> rangeC {Bar2} \\<union>\n               rangeC (rangeC (rangeC {Bar3})) \\<union>\n               rangeC (rangeC (rangeC {Bar4}))", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_UNIV_bar:\n  \"finite (UNIV :: ('a, 'b) bar set) \\<longleftrightarrow> finite (UNIV :: 'a set) \\<and> finite (UNIV :: 'b set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV = (finite UNIV \\<and> finite UNIV)", "by(auto simp add: UNIV_bar finite_UNIV_fun finite_prod finite_UNIV_foo)"], ["", "definition card_bar :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\"\nwhere\n  \"card_bar a b = \n  (if a = 0 \\<or> b = 0 then 0\n   else 1 + card_fun a b + card_foo a b * card_fun a (card_fun CARD(char) (card_fun b a)) * card_option (card_prod a b) + CARD(char) * a * CARD(bool))\""], ["", "lemma CARD_bar [card_simps]:\n  \"CARD(('a, 'b) bar) = card_bar CARD('a) CARD('b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD(('a, 'b) bar) = card_bar CARD('a) CARD('b)", "by(simp add: UNIV_bar card_bar_def finite_UNIV_bar finite_UNIV_foo finite_prod finite_UNIV_fun card_simps del: card_prod)"], ["", "end"], ["", "subsection \\<open>Infinite types\\<close>"], ["", "datatype 'a tree = Leaf | Node 'a \"'a tree\" \"'a tree\""], ["", "lemma inj_expr [simp]:\n  \"inj Node\"\n  \"inj (Node a)\"\n  \"inj (Node a l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj Node &&& inj (Node a) &&& inj (Node a l)", "by(simp_all add: inj_on_def fun_eq_iff)"], ["", "context includes card_datatype begin"], ["", "lemma finite_UNIV_tree: \"finite (UNIV :: 'a tree set) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV = False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite UNIV = False", "have \"rangeIt Leaf (Node (undefined :: 'a) Leaf) \\<subseteq> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rangeIt Leaf (Node undefined Leaf) \\<subseteq> UNIV", "by simp"], ["proof (state)\nthis:\n  rangeIt Leaf (Node undefined Leaf) \\<subseteq> UNIV\n\ngoal (1 subgoal):\n 1. finite UNIV = False", "from finite_subset[OF this]"], ["proof (chain)\npicking this:\n  finite UNIV \\<Longrightarrow> finite (rangeIt Leaf (Node undefined Leaf))", "show ?thesis"], ["proof (prove)\nusing this:\n  finite UNIV \\<Longrightarrow> finite (rangeIt Leaf (Node undefined Leaf))\n\ngoal (1 subgoal):\n 1. finite UNIV = False", "by auto"], ["proof (state)\nthis:\n  finite UNIV = False\n\ngoal:\nNo subgoals!", "qed"], ["", "definition card_tree :: \"nat \\<Rightarrow> nat\"\nwhere \"card_tree _ = 0\""], ["", "lemma CARD_tree [card_simps]:\n  \"CARD('a tree) = card_tree CARD('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a tree) = card_tree CARD('a)", "by(simp add: card_tree_def finite_UNIV_tree)"], ["", "end"], ["", "end"]]}