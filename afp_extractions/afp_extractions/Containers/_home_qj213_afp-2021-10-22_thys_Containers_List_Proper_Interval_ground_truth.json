{"file_name": "/home/qj213/afp-2021-10-22/thys/Containers/List_Proper_Interval.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Containers", "problem_names": ["lemma Nil_less_conv_neq_Nil: \"[] < xs \\<longleftrightarrow> xs \\<noteq> []\"", "lemma less_append_same_iff:\n  fixes xs :: \"'a :: preorder list\"\n  shows \"xs < xs @ ys \\<longleftrightarrow> [] < ys\"", "lemma less_append_same2_iff:\n  fixes xs :: \"'a :: preorder list\"\n  shows \"xs @ ys < xs @ zs \\<longleftrightarrow> ys < zs\"", "lemma Cons_less_iff:\n  fixes x :: \"'a :: preorder\" shows\n  \"x # xs < ys \\<longleftrightarrow> (\\<exists>y ys'. ys = y # ys' \\<and> (x < y \\<or> x = y \\<and> xs < ys'))\"", "lemma proper_interval_list_aux_simps [code]:\n  \"proper_interval_list_aux xs [] \\<longleftrightarrow> False\"\n  \"proper_interval_list_aux [] (y # ys) \\<longleftrightarrow> ys \\<noteq> [] \\<or> proper_interval None (Some y)\"\n  \"proper_interval_list_aux (x # xs) (y # ys) \\<longleftrightarrow> x < y \\<or> x = y \\<and> proper_interval_list_aux xs ys\""], "translations": [["", "lemma Nil_less_conv_neq_Nil: \"[] < xs \\<longleftrightarrow> xs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] < xs) = (xs \\<noteq> [])", "by(cases xs) simp_all"], ["", "lemma less_append_same_iff:\n  fixes xs :: \"'a :: preorder list\"\n  shows \"xs < xs @ ys \\<longleftrightarrow> [] < ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs < xs @ ys) = ([] < ys)", "by(induct xs) simp_all"], ["", "lemma less_append_same2_iff:\n  fixes xs :: \"'a :: preorder list\"\n  shows \"xs @ ys < xs @ zs \\<longleftrightarrow> ys < zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ys < xs @ zs) = (ys < zs)", "by(induct xs) simp_all"], ["", "lemma Cons_less_iff:\n  fixes x :: \"'a :: preorder\" shows\n  \"x # xs < ys \\<longleftrightarrow> (\\<exists>y ys'. ys = y # ys' \\<and> (x < y \\<or> x = y \\<and> xs < ys'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs < ys) =\n    (\\<exists>y ys'.\n        ys = y # ys' \\<and> (x < y \\<or> x = y \\<and> xs < ys'))", "by(cases ys) auto"], ["", "instantiation list :: (\"{proper_interval, order}\") proper_interval begin"], ["", "definition proper_interval_list_aux :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere proper_interval_list_aux_correct:\n  \"proper_interval_list_aux xs ys \\<longleftrightarrow> (\\<exists>zs. xs < zs \\<and> zs < ys)\""], ["", "lemma proper_interval_list_aux_simps [code]:\n  \"proper_interval_list_aux xs [] \\<longleftrightarrow> False\"\n  \"proper_interval_list_aux [] (y # ys) \\<longleftrightarrow> ys \\<noteq> [] \\<or> proper_interval None (Some y)\"\n  \"proper_interval_list_aux (x # xs) (y # ys) \\<longleftrightarrow> x < y \\<or> x = y \\<and> proper_interval_list_aux xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.proper_interval_list_aux xs [] = False &&&\n    local.proper_interval_list_aux [] (y # ys) =\n    (ys \\<noteq> [] \\<or> proper_interval None (Some y)) &&&\n    local.proper_interval_list_aux (x # xs) (y # ys) =\n    (x < y \\<or> x = y \\<and> local.proper_interval_list_aux xs ys)", "apply(simp_all add: proper_interval_list_aux_correct proper_interval_simps Nil_less_conv_neq_Nil)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<exists>zs. zs \\<noteq> [] \\<and> zs < y # ys) =\n    (ys = [] \\<longrightarrow> (\\<exists>z. z < y))\n 2. (\\<exists>zs>x # xs. zs < y # ys) =\n    (x < y \\<or> x = y \\<and> (\\<exists>zs>xs. zs < ys))", "apply(fastforce simp add: neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>zs>x # xs. zs < y # ys) =\n    (x < y \\<or> x = y \\<and> (\\<exists>zs>xs. zs < ys))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>zs>x # xs. zs < y # ys \\<Longrightarrow>\n    x < y \\<or> x = y \\<and> (\\<exists>zs>xs. zs < ys)\n 2. x < y \\<or> x = y \\<and> (\\<exists>zs>xs. zs < ys) \\<Longrightarrow>\n    \\<exists>zs>x # xs. zs < y # ys", "apply(fastforce simp add: Cons_less_iff intro: less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<or> x = y \\<and> (\\<exists>zs>xs. zs < ys) \\<Longrightarrow>\n    \\<exists>zs>x # xs. zs < y # ys", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow> \\<exists>zs>x # xs. zs < y # ys\n 2. x = y \\<and> (\\<exists>zs>xs. zs < ys) \\<Longrightarrow>\n    \\<exists>zs>x # xs. zs < y # ys", "apply(rule exI[where x=\"x # xs @ [undefined]\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    x # xs < x # xs @ [undefined] \\<and> x # xs @ [undefined] < y # ys\n 2. x = y \\<and> (\\<exists>zs>xs. zs < ys) \\<Longrightarrow>\n    \\<exists>zs>x # xs. zs < y # ys", "apply(simp add: less_append_same_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<and> (\\<exists>zs>xs. zs < ys) \\<Longrightarrow>\n    \\<exists>zs>x # xs. zs < y # ys", "apply(auto 4 3 simp add: Cons_less_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun proper_interval_list :: \"'a list option \\<Rightarrow> 'a list option \\<Rightarrow> bool\" where\n  \"proper_interval_list None None \\<longleftrightarrow> True\"\n| \"proper_interval_list None (Some xs) \\<longleftrightarrow> (xs \\<noteq> [])\"\n| \"proper_interval_list (Some xs) None \\<longleftrightarrow> True\"\n| \"proper_interval_list (Some xs) (Some ys) \\<longleftrightarrow> proper_interval_list_aux xs ys\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a list, proper_interval_class)", "proof(intro_classes)"], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "fix xs ys :: \"'a list\""], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "show \"proper_interval None (Some ys) \\<longleftrightarrow> (\\<exists>zs. zs < ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval None (Some ys) = (\\<exists>zs. zs < ys)", "by(auto simp add: Nil_less_conv_neq_Nil intro: exI[where x=\"[]\"])"], ["proof (state)\nthis:\n  proper_interval None (Some ys) = (\\<exists>zs. zs < ys)\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "show \"proper_interval (Some xs) None \\<longleftrightarrow> (\\<exists>zs. xs < zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval (Some xs) None = (\\<exists>zs. xs < zs)", "by(simp add: exI[where x=\"xs @ [undefined]\"] less_append_same_iff)"], ["proof (state)\nthis:\n  proper_interval (Some xs) None = (\\<exists>zs. xs < zs)\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "show \"proper_interval (Some xs) (Some ys) \\<longleftrightarrow> (\\<exists>zs. xs < zs \\<and> zs < ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval (Some xs) (Some ys) = (\\<exists>zs>xs. zs < ys)", "by(simp add: proper_interval_list_aux_correct)"], ["proof (state)\nthis:\n  proper_interval (Some xs) (Some ys) = (\\<exists>zs>xs. zs < ys)\n\ngoal (1 subgoal):\n 1. proper_interval None None = True", "qed simp"], ["", "end"], ["", "end"]]}