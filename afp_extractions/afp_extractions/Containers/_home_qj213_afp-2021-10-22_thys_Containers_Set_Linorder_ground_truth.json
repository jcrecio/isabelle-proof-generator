{"file_name": "/home/qj213/afp-2021-10-22/thys/Containers/Set_Linorder.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Containers", "problem_names": ["lemma not_in_complement_partition:\n  \"\\<not> finite (UNIV :: 'a set)\n  \\<Longrightarrow> (A :: 'a set) \\<notin> infinite_complement_partition \\<longleftrightarrow> - A \\<in> infinite_complement_partition\"", "lemma not_in_complement_partition_False:\n  \"\\<lbrakk> (A :: 'a set) \\<in> infinite_complement_partition; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \n  \\<Longrightarrow> - A \\<in> infinite_complement_partition = False\"", "lemma infinite_complement_partition_finite [simp]:\n  \"finite (UNIV :: 'a set) \\<Longrightarrow> infinite_complement_partition = (UNIV :: 'a set set)\"", "lemma Compl_eq_empty_iff: \"- A = {} \\<longleftrightarrow> A = UNIV\"", "lemma set_less_aux_irrefl [iff]: \"\\<not> A \\<sqsubset>' A\"", "lemma set_less_eq_aux_refl [iff]: \"A \\<sqsubseteq>' A \\<longleftrightarrow> A \\<in> infinite_complement_partition\"", "lemma set_less_aux_empty [simp]: \"\\<not> A \\<sqsubset>' {}\"", "lemma set_less_eq_aux_empty [simp]: \"A \\<sqsubseteq>' {} \\<longleftrightarrow> A = {}\"", "lemma set_less_aux_antisym: \"\\<lbrakk> A \\<sqsubset>' B; B \\<sqsubset>' A \\<rbrakk> \\<Longrightarrow> False\"", "lemma set_less_aux_conv_set_less_eq_aux:\n  \"A \\<sqsubset>' B \\<longleftrightarrow> A \\<sqsubseteq>' B \\<and> \\<not> B \\<sqsubseteq>' A\"", "lemma set_less_eq_aux_antisym: \"\\<lbrakk> A \\<sqsubseteq>' B; B \\<sqsubseteq>' A \\<rbrakk> \\<Longrightarrow> A = B\"", "lemma set_less_aux_finiteD: \"A \\<sqsubset>' B \\<Longrightarrow> finite A \\<and> B \\<in> infinite_complement_partition\"", "lemma set_less_eq_aux_infinite_complement_partitionD:\n  \"A \\<sqsubseteq>' B \\<Longrightarrow> A \\<in> infinite_complement_partition \\<and> B \\<in> infinite_complement_partition\"", "lemma Compl_set_less_aux_Compl:\n  \"finite (UNIV :: 'a set) \\<Longrightarrow> - A \\<sqsubset>' - B \\<longleftrightarrow> B \\<sqsubset>' A\"", "lemma Compl_set_less_eq_aux_Compl: \n  \"finite (UNIV :: 'a set) \\<Longrightarrow> - A \\<sqsubseteq>' - B \\<longleftrightarrow> B \\<sqsubseteq>' A\"", "lemma set_less_aux_insert_same:\n  \"x \\<in> A \\<longleftrightarrow> x \\<in> B \\<Longrightarrow> insert x A \\<sqsubset>' insert x B \\<longleftrightarrow> A \\<sqsubset>' B\"", "lemma set_less_eq_aux_insert_same:\n  \"\\<lbrakk> A \\<in> infinite_complement_partition; insert x B \\<in> infinite_complement_partition;\n    x \\<in> A \\<longleftrightarrow> x \\<in> B \\<rbrakk>\n  \\<Longrightarrow> insert x A \\<sqsubseteq>' insert x B \\<longleftrightarrow> A \\<sqsubseteq>' B\"", "lemma set_less_aux_singleton_iff: \"A \\<sqsubset>' {x} \\<longleftrightarrow> finite A \\<and> (\\<forall>a\\<in>A. x < a)\"", "lemma wlog_le [case_names sym le]:\n  assumes \"\\<And>a b. P a b \\<Longrightarrow> P b a\"\n  and \"\\<And>a b. a \\<le> b \\<Longrightarrow> P a b\"\n  shows \"P b a\"", "lemma empty_set_less_aux [simp]: \"{} \\<sqsubset>' A \\<longleftrightarrow> A \\<noteq> {} \\<and> finite A\"", "lemma empty_set_less_eq_aux [simp]: \"{} \\<sqsubseteq>' A \\<longleftrightarrow> finite A\"", "lemma set_less_aux_trans:\n  assumes AB: \"A \\<sqsubset>' B\" and BC: \"B \\<sqsubset>' C\"\n  shows \"A \\<sqsubset>' C\"", "lemma set_less_eq_aux_trans [trans]:\n  \"\\<lbrakk> A \\<sqsubseteq>' B; B \\<sqsubseteq>' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' C\"", "lemma set_less_trans_set_less_eq [trans]:\n  \"\\<lbrakk> A \\<sqsubset>' B; B \\<sqsubseteq>' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubset>' C\"", "lemma set_less_eq_aux_porder: \"partial_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>' B}\"", "lemma psubset_finite_imp_set_less_aux:\n  assumes AsB: \"A \\<subset> B\" and B: \"finite B\"\n  shows \"A \\<sqsubset>' B\"", "lemma subset_finite_imp_set_less_eq_aux:\n  \"\\<lbrakk> A \\<subseteq> B; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' B\"", "lemma empty_set_less_aux_finite_iff: \n  \"finite A \\<Longrightarrow> {} \\<sqsubset>' A \\<longleftrightarrow> A \\<noteq> {}\"", "lemma set_less_aux_finite_total:\n  assumes A: \"finite A\" and B: \"finite B\"\n  shows \"A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\"", "lemma set_less_eq_aux_finite_total:\n  \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' B \\<or> A = B \\<or> B \\<sqsubseteq>' A\"", "lemma set_less_eq_aux_finite_total2:\n  \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' B \\<or> B \\<sqsubseteq>' A\"", "lemma set_less_aux_rec:\n  assumes A: \"finite A\" and B: \"finite B\"\n  and A': \"A \\<noteq> {}\" and B': \"B \\<noteq> {}\"\n  shows \"A \\<sqsubset>' B \\<longleftrightarrow> Min B < Min A \\<or> Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A}\"", "lemma set_less_eq_aux_rec:\n  assumes \"finite A\" \"finite B\" \"A \\<noteq> {}\" \"B \\<noteq> {}\"\n  shows \"A \\<sqsubseteq>' B \\<longleftrightarrow> Min B < Min A \\<or> Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A}\"", "lemma set_less_aux_Min_antimono:\n  \"\\<lbrakk> Min A < Min B;  finite A; finite B; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> B \\<sqsubset>' A\"", "lemma sorted_Cons_Min: \"sorted (x # xs) \\<Longrightarrow> Min (insert x (set xs)) = x\"", "lemma set_less_aux_code:\n  \"\\<lbrakk> sorted xs; distinct xs; sorted ys; distinct ys \\<rbrakk>\n  \\<Longrightarrow> set xs \\<sqsubset>' set ys \\<longleftrightarrow> ord.lexordp (>) xs ys\"", "lemma set_less_eq_aux_code:\n  assumes \"sorted xs\" \"distinct xs\" \"sorted ys\" \"distinct ys\"\n  shows \"set xs \\<sqsubseteq>' set ys \\<longleftrightarrow> ord.lexordp_eq (>) xs ys\"", "lemma set_less_eq_aux'_refl:\n  \"A \\<sqsubseteq>'' A \\<longleftrightarrow> A \\<in> infinite_complement_partition\"", "lemma set_less_eq_aux'_antisym: \"\\<lbrakk> A \\<sqsubseteq>'' B; B \\<sqsubseteq>'' A \\<rbrakk> \\<Longrightarrow> A = B\"", "lemma set_less_eq_aux'_infinite_complement_partitionD:\n  \"A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<in> infinite_complement_partition \\<and> B \\<in> infinite_complement_partition\"", "lemma empty_set_less_eq_def [simp]: \"{} \\<sqsubseteq>'' B \\<longleftrightarrow> B \\<in> infinite_complement_partition\"", "lemma set_less_eq_aux'_trans: \"\\<lbrakk> A \\<sqsubseteq>'' B; B \\<sqsubseteq>'' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>'' C\"", "lemma set_less_eq_aux'_porder: \"partial_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>'' B}\"", "lemma set_less_eq_aux''_spec:\n  shows \"linear_order {(a, b). a \\<le> b} \\<Longrightarrow> linear_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>''' B}\"\n  (is \"PROP ?thesis1\")\n  and \"order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). A \\<sqsubseteq>''' B}\" (is ?thesis2)", "lemma set_less_eq_aux''_linear_order:\n  \"linear_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>''' B}\"", "lemma set_less_eq_aux''_refl [iff]: \"A \\<sqsubseteq>''' A \\<longleftrightarrow> A \\<in> infinite_complement_partition\"", "lemma set_less_eq_aux'_into_set_less_eq_aux'':\n  assumes \"A \\<sqsubseteq>'' B\" \n  shows \"A \\<sqsubseteq>''' B\"", "lemma finite_set_less_eq_aux''_finite:\n  assumes \"finite A\" and \"finite B\"\n  shows \"A \\<sqsubseteq>''' B \\<longleftrightarrow> A \\<sqsubseteq>'' B\"", "lemma set_less_eq_aux''_finite:\n  \"finite (UNIV :: 'a set) \\<Longrightarrow> set_less_eq_aux'' = set_less_eq_aux\"", "lemma set_less_eq_aux''_antisym:\n  \"\\<lbrakk> A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' A; \n     A \\<in> infinite_complement_partition; B \\<in> infinite_complement_partition \\<rbrakk>\n  \\<Longrightarrow> A = B\"", "lemma set_less_eq_aux''_trans: \"\\<lbrakk> A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>''' C\"", "lemma set_less_eq_aux''_total:\n  \"\\<lbrakk> A \\<in> infinite_complement_partition; B \\<in> infinite_complement_partition \\<rbrakk>\n  \\<Longrightarrow> A \\<sqsubseteq>''' B \\<or> B \\<sqsubseteq>''' A\"", "lemma set_less_eq_def2:\n  \"A \\<sqsubseteq> B \\<longleftrightarrow>\n  (if finite (UNIV :: 'a set) then A \\<sqsubseteq>''' B \n   else if A \\<in> infinite_complement_partition then A \\<sqsubseteq>''' B \\<or> B \\<notin> infinite_complement_partition\n   else B \\<notin> infinite_complement_partition \\<and> - B \\<sqsubseteq>''' - A)\"", "lemma set_less_eq_refl [iff]: \"A \\<sqsubseteq> A\"", "lemma set_less_eq_antisym: \"\\<lbrakk> A \\<sqsubseteq> B; B \\<sqsubseteq> A \\<rbrakk> \\<Longrightarrow> A = B\"", "lemma set_less_eq_trans: \"\\<lbrakk> A \\<sqsubseteq> B; B \\<sqsubseteq> C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq> C\"", "lemma set_less_eq_total: \"A \\<sqsubseteq> B \\<or> B \\<sqsubseteq> A\"", "lemma set_less_eq_linorder: \"class.linorder (\\<sqsubseteq>) (\\<sqsubset>)\"", "lemma set_less_eq_conv_set_less: \"set_less_eq A B \\<longleftrightarrow> A = B \\<or> set_less A B\"", "lemma Compl_set_less_eq_Compl: \"- A \\<sqsubseteq> - B \\<longleftrightarrow> B \\<sqsubseteq> A\"", "lemma Compl_set_less_Compl: \"- A \\<sqsubset> - B \\<longleftrightarrow> B \\<sqsubset> A\"", "lemma set_less_eq_finite_iff: \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq> B \\<longleftrightarrow> A \\<sqsubseteq>' B\"", "lemma set_less_finite_iff: \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubset> B \\<longleftrightarrow> A \\<sqsubset>' B\"", "lemma infinite_set_less_eq_Complement:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq> - B\"", "lemma infinite_set_less_Complement:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> A \\<sqsubset> - B\"", "lemma infinite_Complement_set_less_eq:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> \\<not> - A \\<sqsubseteq> B\"", "lemma infinite_Complement_set_less:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> \\<not> - A \\<sqsubset> B\"", "lemma empty_set_less_eq [iff]: \"{} \\<sqsubseteq> A\"", "lemma set_less_eq_empty [iff]: \"A \\<sqsubseteq> {} \\<longleftrightarrow> A = {}\"", "lemma empty_set_less_iff [iff]: \"{} \\<sqsubset> A \\<longleftrightarrow> A \\<noteq> {}\"", "lemma not_set_less_empty [simp]: \"\\<not> A \\<sqsubset> {}\"", "lemma set_less_eq_UNIV [iff]: \"A \\<sqsubseteq> UNIV\"", "lemma UNIV_set_less_eq [iff]: \"UNIV \\<sqsubseteq> A \\<longleftrightarrow> A = UNIV\"", "lemma set_less_UNIV_iff [iff]: \"A \\<sqsubset> UNIV \\<longleftrightarrow> A \\<noteq> UNIV\"", "lemma not_UNIV_set_less [simp]: \"\\<not> UNIV \\<sqsubset> A\"", "lemmas [code] =\n  proper_intrvl.set_less_eq_aux_Compl.simps\n  proper_intrvl.set_less_aux_Compl.simps\n  proper_intrvl.Compl_set_less_eq_aux.simps\n  proper_intrvl.Compl_set_less_aux.simps", "theorem assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\"\n  and ys: \"sorted ys\" \"distinct ys\"\n  shows set_less_eq_aux_Compl2_conv_set_less_eq_aux_Compl:\n  \"set xs \\<sqsubseteq>' - set ys \\<longleftrightarrow> set_less_eq_aux_Compl None xs ys\" (is ?Compl2)\n  and Compl1_set_less_eq_aux_conv_Compl_set_less_eq_aux:\n  \"- set xs \\<sqsubseteq>' set ys \\<longleftrightarrow> Compl_set_less_eq_aux None xs ys\" (is ?Compl1)", "lemma set_less_aux_Compl_iff:\n  \"set_less_aux_Compl ao xs ys \\<longleftrightarrow> set_less_eq_aux_Compl ao xs ys \\<and> \\<not> Compl_set_less_eq_aux ao ys xs\"", "lemma Compl_set_less_aux_Compl_iff:\n  \"Compl_set_less_aux ao xs ys \\<longleftrightarrow> Compl_set_less_eq_aux ao xs ys \\<and> \\<not> set_less_eq_aux_Compl ao ys xs\"", "theorem assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\"\n  and ys: \"sorted ys\" \"distinct ys\"\n  shows set_less_aux_Compl2_conv_set_less_aux_Compl:\n  \"set xs \\<sqsubset>' - set ys \\<longleftrightarrow> set_less_aux_Compl None xs ys\" (is ?Compl2)\n  and Compl1_set_less_aux_conv_Compl_set_less_aux:\n  \"- set xs \\<sqsubset>' set ys \\<longleftrightarrow> Compl_set_less_aux None xs ys\" (is ?Compl1)", "lemma length_last_Nil [code]: \"length_last [] = (0, undefined)\"", "lemma length_last_Cons_code [symmetric, code]:\n  \"fold (\\<lambda>x (n, _) . (n + 1, x)) xs (1, x) = length_last (x # xs)\"", "lemmas [code] = \n  proper_intrvl.exhaustive_above.simps\n  proper_intrvl.exhaustive.simps\n  proper_intrvl.proper_interval_set_aux.simps\n  proper_intrvl.proper_interval_set_Compl_aux.simps\n  proper_intrvl.proper_interval_Compl_set_aux.simps", "lemma exhaustive_above_iff:\n  \"\\<lbrakk> sorted xs; distinct xs; \\<forall>x'\\<in>set xs. x < x' \\<rbrakk> \\<Longrightarrow> exhaustive_above x xs \\<longleftrightarrow> set xs = {z. z > x}\"", "lemma exhaustive_correct:\n  assumes \"sorted xs\" \"distinct xs\"\n  shows \"exhaustive xs \\<longleftrightarrow> set xs = UNIV\"", "theorem proper_interval_set_aux:\n  assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\" \n  and ys: \"sorted ys\" \"distinct ys\"\n  shows \"proper_interval_set_aux xs ys \\<longleftrightarrow> (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\"", "lemma proper_interval_set_Compl_aux:\n  assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\" \n  and ys: \"sorted ys\" \"distinct ys\" \n  shows \"proper_interval_set_Compl_aux None 0 xs ys \\<longleftrightarrow> (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)\"", "lemma proper_interval_Compl_set_aux:\n  assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\" \n  and ys: \"sorted ys\" \"distinct ys\" \n  shows \"proper_interval_Compl_set_aux None xs ys \\<longleftrightarrow> (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\"", "lemma proper_interval_integer_simps [code]:\n  includes integer.lifting fixes x y :: integer and xo yo :: \"integer option\" shows\n  \"proper_interval (Some x) (Some y) = (1 < y - x)\"\n  \"proper_interval None yo = True\"\n  \"proper_interval xo None = True\"", "lemma proper_interval_natural_simps [code]:\n  includes natural.lifting fixes x y :: natural and xo :: \"natural option\" shows\n  \"proper_interval xo None = True\"\n  \"proper_interval None (Some y) \\<longleftrightarrow> y > 0\"\n  \"proper_interval (Some x) (Some y) \\<longleftrightarrow> y - x > 1\"", "lemma char_less_iff_nat_of_char: \"x < y \\<longleftrightarrow> of_char x < (of_char y :: nat)\"", "lemma nat_of_char_inject [simp]: \"of_char x = (of_char y :: nat) \\<longleftrightarrow> x = y\"", "lemma char_le_iff_nat_of_char: \"x \\<le> y \\<longleftrightarrow> of_char x \\<le> (of_char y :: nat)\"", "lemma length_last_fusion_code [code]:\n  \"length_last_fusion g s =\n  (if list.has_next g s then\n     let (x, s') = list.next g s\n     in fold_fusion g (\\<lambda>x (n, _). (n + 1, x)) s' (1, x)\n   else (0, undefined))\"", "lemma set_less_eq_aux_Compl_fusion_code:\n  \"set_less_eq_aux_Compl_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n   (list.has_next g1 s1 \\<longrightarrow> list.has_next g2 s2 \\<longrightarrow>\n    (let (x, s1') = list.next g1 s1;\n         (y, s2') = list.next g2 s2\n     in if x < y then proper_interval ao (Some x) \\<or> set_less_eq_aux_Compl_fusion g1 g2 (Some x) s1' s2\n        else if y < x then proper_interval ao (Some y) \\<or> set_less_eq_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n        else proper_interval ao (Some y)))\"", "lemma Compl_set_less_eq_aux_fusion_code:\n  \"Compl_set_less_eq_aux_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n  (if list.has_next g1 s1 then\n     let (x, s1') = list.next g1 s1\n     in if list.has_next g2 s2 then\n          let (y, s2') = list.next g2 s2\n          in if x < y then \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some x) s1' s2\n             else if y < x then \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some y) s1 s2'\n             else \\<not> proper_interval ao (Some y)\n        else \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some x) s1' s2\n   else if list.has_next g2 s2 then\n     let (y, s2') = list.next g2 s2\n     in \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some y) s1 s2'\n   else \\<not> proper_interval ao None)\"", "lemma set_less_aux_Compl_fusion_code:\n  \"set_less_aux_Compl_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n  (if list.has_next g1 s1 then\n     let (x, s1') = list.next g1 s1\n     in if list.has_next g2 s2 then\n          let (y, s2') = list.next g2 s2\n          in if x < y then proper_interval ao (Some x) \\<or> set_less_aux_Compl_fusion g1 g2 (Some x) s1' s2\n             else if y < x then proper_interval ao (Some y) \\<or> set_less_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n             else proper_interval ao (Some y)\n        else proper_interval ao (Some x) \\<or> set_less_aux_Compl_fusion g1 g2 (Some x) s1' s2\n   else if list.has_next g2 s2 then\n     let (y, s2') = list.next g2 s2\n     in proper_interval ao (Some y) \\<or> set_less_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n   else proper_interval ao None)\"", "lemma Compl_set_less_aux_fusion_code:\n  \"Compl_set_less_aux_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n   list.has_next g1 s1 \\<and> list.has_next g2 s2 \\<and>\n  (let (x, s1') = list.next g1 s1;\n       (y, s2') = list.next g2 s2\n   in if x < y then \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_aux_fusion g1 g2 (Some x) s1' s2\n      else if y < x then \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_aux_fusion g1 g2 (Some y) s1 s2'\n      else \\<not> proper_interval ao (Some y))\"", "lemma exhaustive_above_fusion_code:\n  \"exhaustive_above_fusion g y s \\<longleftrightarrow>\n  (if list.has_next g s then\n     let (x, s') = list.next g s\n     in \\<not> proper_interval (Some y) (Some x) \\<and> exhaustive_above_fusion g x s'\n   else \\<not> proper_interval (Some y) None)\"", "lemma exhaustive_fusion_code:\n  \"exhaustive_fusion g s =\n  (list.has_next g s \\<and> \n   (let (x, s') = list.next g s\n    in \\<not> proper_interval None (Some x) \\<and> exhaustive_above_fusion g x s'))\"", "lemma proper_interval_set_aux_fusion_code:\n  \"proper_interval_set_aux_fusion g1 g2 s1 s2 \\<longleftrightarrow>\n   list.has_next g2 s2 \\<and>\n  (let (y, s2') = list.next g2 s2\n   in if list.has_next g1 s1 then\n        let (x, s1') = list.next g1 s1\n        in if x < y then False\n           else if y < x then proper_interval (Some y) (Some x) \\<or> list.has_next g2 s2' \\<or> \\<not> exhaustive_above_fusion g1 x s1'\n           else proper_interval_set_aux_fusion g1 g2 s1' s2'\n      else list.has_next g2 s2' \\<or> proper_interval (Some y) None)\"", "lemma proper_interval_set_Compl_aux_fusion_code:\n  \"proper_interval_set_Compl_aux_fusion g1 g2 ao n s1 s2 \\<longleftrightarrow>\n  (if list.has_next g1 s1 then\n     let (x, s1') = list.next g1 s1\n     in if list.has_next g2 s2 then\n          let (y, s2') = list.next g2 s2\n          in if x < y then \n               proper_interval ao (Some x) \\<or> \n               proper_interval_set_Compl_aux_fusion g1 g2 (Some x) (n + 1) s1' s2\n             else if y < x then \n               proper_interval ao (Some y) \\<or> \n               proper_interval_set_Compl_aux_fusion g1 g2 (Some y) (n + 1) s1 s2'\n             else\n               proper_interval ao (Some x) \\<and>\n               (let m = CARD('a) - n \n                in m - length_fusion g2 s2' \\<noteq> 2 \\<or> m - length_fusion g1 s1' \\<noteq> 2)\n        else \n          let m = CARD('a) - n; (len_x, x') = length_last_fusion g1 s1\n          in m \\<noteq> len_x \\<and> (m = len_x + 1 \\<longrightarrow> \\<not> proper_interval (Some x') None)\n\n   else if list.has_next g2 s2 then\n     let (y, s2') = list.next g2 s2;\n         m = CARD('a) - n;\n         (len_y, y') = length_last_fusion g2 s2\n     in m \\<noteq> len_y \\<and> (m = len_y + 1 \\<longrightarrow> \\<not> proper_interval (Some y') None)\n   else CARD('a) > n + 1)\"", "lemma proper_interval_Compl_set_aux_fusion_code:\n  \"proper_interval_Compl_set_aux_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n   list.has_next g1 s1 \\<and> list.has_next g2 s2 \\<and>\n   (let (x, s1') = list.next g1 s1;\n        (y, s2') = list.next g2 s2\n    in if x < y then\n         \\<not> proper_interval ao (Some x) \\<and> proper_interval_Compl_set_aux_fusion g1 g2 (Some x) s1' s2\n       else if y < x then\n         \\<not> proper_interval ao (Some y) \\<and> proper_interval_Compl_set_aux_fusion g1 g2 (Some y) s1 s2'\n       else \\<not> proper_interval ao (Some x) \\<and> (list.has_next g2 s2' \\<or> list.has_next g1 s1'))\"", "lemmas [code] =\n  set_less_eq_aux_Compl_fusion_code proper_intrvl.set_less_eq_aux_Compl_fusion_code\n  Compl_set_less_eq_aux_fusion_code proper_intrvl.Compl_set_less_eq_aux_fusion_code\n  set_less_aux_Compl_fusion_code proper_intrvl.set_less_aux_Compl_fusion_code\n  Compl_set_less_aux_fusion_code proper_intrvl.Compl_set_less_aux_fusion_code\n  exhaustive_above_fusion_code proper_intrvl.exhaustive_above_fusion_code\n  exhaustive_fusion_code proper_intrvl.exhaustive_fusion_code\n  proper_interval_set_aux_fusion_code proper_intrvl.proper_interval_set_aux_fusion_code\n  proper_interval_set_Compl_aux_fusion_code proper_intrvl.proper_interval_set_Compl_aux_fusion_code\n  proper_interval_Compl_set_aux_fusion_code proper_intrvl.proper_interval_Compl_set_aux_fusion_code", "lemmas [symmetric, code_unfold] =\n  set_less_eq_aux_Compl_fusion_def proper_intrvl.set_less_eq_aux_Compl_fusion_def\n  Compl_set_less_eq_aux_fusion_def proper_intrvl.Compl_set_less_eq_aux_fusion_def\n  set_less_aux_Compl_fusion_def proper_intrvl.set_less_aux_Compl_fusion_def\n  Compl_set_less_aux_fusion_def proper_intrvl.Compl_set_less_aux_fusion_def\n  exhaustive_above_fusion_def proper_intrvl.exhaustive_above_fusion_def\n  exhaustive_fusion_def proper_intrvl.exhaustive_fusion_def\n  proper_interval_set_aux_fusion_def proper_intrvl.proper_interval_set_aux_fusion_def\n  proper_interval_set_Compl_aux_fusion_def proper_intrvl.proper_interval_set_Compl_aux_fusion_def\n  proper_interval_Compl_set_aux_fusion_def proper_intrvl.proper_interval_Compl_set_aux_fusion_def"], "translations": [["", "lemma not_in_complement_partition:\n  \"\\<not> finite (UNIV :: 'a set)\n  \\<Longrightarrow> (A :: 'a set) \\<notin> infinite_complement_partition \\<longleftrightarrow> - A \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV \\<Longrightarrow>\n    (A \\<notin> infinite_complement_partition) =\n    (- A \\<in> infinite_complement_partition)", "by(metis complement_partition)"], ["", "lemma not_in_complement_partition_False:\n  \"\\<lbrakk> (A :: 'a set) \\<in> infinite_complement_partition; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \n  \\<Longrightarrow> - A \\<in> infinite_complement_partition = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> infinite_complement_partition; infinite UNIV\\<rbrakk>\n    \\<Longrightarrow> (- A \\<in> infinite_complement_partition) = False", "by(simp add: not_in_complement_partition)"], ["", "lemma infinite_complement_partition_finite [simp]:\n  \"finite (UNIV :: 'a set) \\<Longrightarrow> infinite_complement_partition = (UNIV :: 'a set set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV \\<Longrightarrow> infinite_complement_partition = UNIV", "by(auto intro: finite_subset finite_complement_partition)"], ["", "lemma Compl_eq_empty_iff: \"- A = {} \\<longleftrightarrow> A = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- A = {}) = (A = UNIV)", "by auto"], ["", "subsubsection \\<open>A lexicographic-style order on finite subsets\\<close>"], ["", "context ord begin"], ["", "definition set_less_aux :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" (infix \"\\<sqsubset>''\" 50)\nwhere \"A \\<sqsubset>' B \\<longleftrightarrow> finite A \\<and> finite B \\<and> (\\<exists>y \\<in> B - A. \\<forall>z \\<in> (A - B) \\<union> (B - A). y \\<le> z \\<and> (z \\<le> y \\<longrightarrow> y = z))\""], ["", "definition set_less_eq_aux :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>''\" 50)\nwhere \"A \\<sqsubseteq>' B \\<longleftrightarrow> A \\<in> infinite_complement_partition \\<and> A = B \\<or> A \\<sqsubset>' B\""], ["", "lemma set_less_aux_irrefl [iff]: \"\\<not> A \\<sqsubset>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubset>' A", "by(auto simp add: set_less_aux_def)"], ["", "lemma set_less_eq_aux_refl [iff]: \"A \\<sqsubseteq>' A \\<longleftrightarrow> A \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>' A) = (A \\<in> infinite_complement_partition)", "by(simp add: set_less_eq_aux_def)"], ["", "lemma set_less_aux_empty [simp]: \"\\<not> A \\<sqsubset>' {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubset>' {}", "by(auto simp add: set_less_aux_def intro: finite_subset finite_complement_partition)"], ["", "lemma set_less_eq_aux_empty [simp]: \"A \\<sqsubseteq>' {} \\<longleftrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>' {}) = (A = {})", "by(auto simp add: set_less_eq_aux_def finite_complement_partition)"], ["", "lemma set_less_aux_antisym: \"\\<lbrakk> A \\<sqsubset>' B; B \\<sqsubset>' A \\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubset>' B; B \\<sqsubset>' A\\<rbrakk>\n    \\<Longrightarrow> False", "by(auto simp add: set_less_aux_def split: if_split_asm)"], ["", "lemma set_less_aux_conv_set_less_eq_aux:\n  \"A \\<sqsubset>' B \\<longleftrightarrow> A \\<sqsubseteq>' B \\<and> \\<not> B \\<sqsubseteq>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubset>' B) =\n    (A \\<sqsubseteq>' B \\<and> \\<not> B \\<sqsubseteq>' A)", "by(auto simp add: set_less_eq_aux_def dest: set_less_aux_antisym)"], ["", "lemma set_less_eq_aux_antisym: \"\\<lbrakk> A \\<sqsubseteq>' B; B \\<sqsubseteq>' A \\<rbrakk> \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>' B; B \\<sqsubseteq>' A\\<rbrakk>\n    \\<Longrightarrow> A = B", "by(auto simp add: set_less_eq_aux_def dest: set_less_aux_antisym)"], ["", "lemma set_less_aux_finiteD: \"A \\<sqsubset>' B \\<Longrightarrow> finite A \\<and> B \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B \\<Longrightarrow>\n    finite A \\<and> B \\<in> infinite_complement_partition", "by(auto simp add: set_less_aux_def finite_complement_partition)"], ["", "lemma set_less_eq_aux_infinite_complement_partitionD:\n  \"A \\<sqsubseteq>' B \\<Longrightarrow> A \\<in> infinite_complement_partition \\<and> B \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>' B \\<Longrightarrow>\n    A \\<in> infinite_complement_partition \\<and>\n    B \\<in> infinite_complement_partition", "by(auto simp add: set_less_eq_aux_def dest: set_less_aux_finiteD intro: finite_complement_partition)"], ["", "lemma Compl_set_less_aux_Compl:\n  \"finite (UNIV :: 'a set) \\<Longrightarrow> - A \\<sqsubset>' - B \\<longleftrightarrow> B \\<sqsubset>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV \\<Longrightarrow>\n    (- A \\<sqsubset>' - B) = (B \\<sqsubset>' A)", "by(auto simp add: set_less_aux_def finite_subset[OF subset_UNIV])"], ["", "lemma Compl_set_less_eq_aux_Compl: \n  \"finite (UNIV :: 'a set) \\<Longrightarrow> - A \\<sqsubseteq>' - B \\<longleftrightarrow> B \\<sqsubseteq>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV \\<Longrightarrow>\n    (- A \\<sqsubseteq>' - B) = (B \\<sqsubseteq>' A)", "by(auto simp add: set_less_eq_aux_def Compl_set_less_aux_Compl)"], ["", "lemma set_less_aux_insert_same:\n  \"x \\<in> A \\<longleftrightarrow> x \\<in> B \\<Longrightarrow> insert x A \\<sqsubset>' insert x B \\<longleftrightarrow> A \\<sqsubset>' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> A) = (x \\<in> B) \\<Longrightarrow>\n    (insert x A \\<sqsubset>' insert x B) = (A \\<sqsubset>' B)", "by(auto simp add: set_less_aux_def)"], ["", "lemma set_less_eq_aux_insert_same:\n  \"\\<lbrakk> A \\<in> infinite_complement_partition; insert x B \\<in> infinite_complement_partition;\n    x \\<in> A \\<longleftrightarrow> x \\<in> B \\<rbrakk>\n  \\<Longrightarrow> insert x A \\<sqsubseteq>' insert x B \\<longleftrightarrow> A \\<sqsubseteq>' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> infinite_complement_partition;\n     insert x B \\<in> infinite_complement_partition;\n     (x \\<in> A) = (x \\<in> B)\\<rbrakk>\n    \\<Longrightarrow> (insert x A \\<sqsubseteq>' insert x B) =\n                      (A \\<sqsubseteq>' B)", "by(auto simp add: set_less_eq_aux_def set_less_aux_insert_same)"], ["", "end"], ["", "context order begin"], ["", "lemma set_less_aux_singleton_iff: \"A \\<sqsubset>' {x} \\<longleftrightarrow> finite A \\<and> (\\<forall>a\\<in>A. x < a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubset>' {x}) = (finite A \\<and> (\\<forall>a\\<in>A. x < a))", "by(auto simp add: set_less_aux_def less_le Bex_def)"], ["", "end"], ["", "context linorder begin"], ["", "lemma wlog_le [case_names sym le]:\n  assumes \"\\<And>a b. P a b \\<Longrightarrow> P b a\"\n  and \"\\<And>a b. a \\<le> b \\<Longrightarrow> P a b\"\n  shows \"P b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P b a", "by (metis assms linear)"], ["", "lemma empty_set_less_aux [simp]: \"{} \\<sqsubset>' A \\<longleftrightarrow> A \\<noteq> {} \\<and> finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<sqsubset>' A) = (A \\<noteq> {} \\<and> finite A)", "by(auto 4 3 simp add: set_less_aux_def intro!: Min_eqI intro: bexI[where x=\"Min A\"] order_trans[where y=\"Min A\"] Min_in)"], ["", "lemma empty_set_less_eq_aux [simp]: \"{} \\<sqsubseteq>' A \\<longleftrightarrow> finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<sqsubseteq>' A) = finite A", "by(auto simp add: set_less_eq_aux_def finite_complement_partition)"], ["", "lemma set_less_aux_trans:\n  assumes AB: \"A \\<sqsubset>' B\" and BC: \"B \\<sqsubset>' C\"\n  shows \"A \\<sqsubset>' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "from AB BC"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' B\n  B \\<sqsubset>' C", "have A: \"finite A\" and B: \"finite B\" and C: \"finite C\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' B\n  B \\<sqsubset>' C\n\ngoal (1 subgoal):\n 1. finite A &&& finite B &&& finite C", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  finite A\n  finite B\n  finite C\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "from AB A B"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' B\n  finite A\n  finite B", "obtain ab where ab: \"ab \\<in> B - A\"\n    and minAB: \"\\<And>x. \\<lbrakk> x \\<in> A; x \\<notin> B \\<rbrakk> \\<Longrightarrow> ab \\<le> x \\<and> (x \\<le> ab \\<longrightarrow> ab = x)\"\n    and minBA: \"\\<And>x. \\<lbrakk> x \\<in> B; x \\<notin> A \\<rbrakk> \\<Longrightarrow> ab \\<le> x \\<and> (x \\<le> ab \\<longrightarrow> ab = x)\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' B\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. (\\<And>ab.\n        \\<lbrakk>ab \\<in> B - A;\n         \\<And>x.\n            \\<lbrakk>x \\<in> A; x \\<notin> B\\<rbrakk>\n            \\<Longrightarrow> ab \\<le> x \\<and>\n                              (x \\<le> ab \\<longrightarrow> ab = x);\n         \\<And>x.\n            \\<lbrakk>x \\<in> B; x \\<notin> A\\<rbrakk>\n            \\<Longrightarrow> ab \\<le> x \\<and>\n                              (x \\<le> ab \\<longrightarrow> ab = x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_less_aux_def"], ["proof (prove)\nusing this:\n  finite A \\<and>\n  finite B \\<and>\n  (\\<exists>y\\<in>B - A.\n      \\<forall>z\\<in>A - B \\<union> (B - A).\n         y \\<le> z \\<and> (z \\<le> y \\<longrightarrow> y = z))\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. (\\<And>ab.\n        \\<lbrakk>ab \\<in> B - A;\n         \\<And>x.\n            \\<lbrakk>x \\<in> A; x \\<notin> B\\<rbrakk>\n            \\<Longrightarrow> ab \\<le> x \\<and>\n                              (x \\<le> ab \\<longrightarrow> ab = x);\n         \\<And>x.\n            \\<lbrakk>x \\<in> B; x \\<notin> A\\<rbrakk>\n            \\<Longrightarrow> ab \\<le> x \\<and>\n                              (x \\<le> ab \\<longrightarrow> ab = x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ab \\<in> B - A\n  \\<lbrakk>?x \\<in> A; ?x \\<notin> B\\<rbrakk>\n  \\<Longrightarrow> ab \\<le> ?x \\<and>\n                    (?x \\<le> ab \\<longrightarrow> ab = ?x)\n  \\<lbrakk>?x \\<in> B; ?x \\<notin> A\\<rbrakk>\n  \\<Longrightarrow> ab \\<le> ?x \\<and>\n                    (?x \\<le> ab \\<longrightarrow> ab = ?x)\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "from BC B C"], ["proof (chain)\npicking this:\n  B \\<sqsubset>' C\n  finite B\n  finite C", "obtain bc where bc: \"bc \\<in> C - B\"\n    and minBC: \"\\<And>x. \\<lbrakk> x \\<in> B; x \\<notin> C \\<rbrakk> \\<Longrightarrow> bc \\<le> x \\<and> (x \\<le> bc \\<longrightarrow> bc = x)\"\n    and minCB: \"\\<And>x. \\<lbrakk> x \\<in> C; x \\<notin> B \\<rbrakk> \\<Longrightarrow> bc \\<le> x \\<and> (x \\<le> bc \\<longrightarrow> bc = x)\""], ["proof (prove)\nusing this:\n  B \\<sqsubset>' C\n  finite B\n  finite C\n\ngoal (1 subgoal):\n 1. (\\<And>bc.\n        \\<lbrakk>bc \\<in> C - B;\n         \\<And>x.\n            \\<lbrakk>x \\<in> B; x \\<notin> C\\<rbrakk>\n            \\<Longrightarrow> bc \\<le> x \\<and>\n                              (x \\<le> bc \\<longrightarrow> bc = x);\n         \\<And>x.\n            \\<lbrakk>x \\<in> C; x \\<notin> B\\<rbrakk>\n            \\<Longrightarrow> bc \\<le> x \\<and>\n                              (x \\<le> bc \\<longrightarrow> bc = x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_less_aux_def"], ["proof (prove)\nusing this:\n  finite B \\<and>\n  finite C \\<and>\n  (\\<exists>y\\<in>C - B.\n      \\<forall>z\\<in>B - C \\<union> (C - B).\n         y \\<le> z \\<and> (z \\<le> y \\<longrightarrow> y = z))\n  finite B\n  finite C\n\ngoal (1 subgoal):\n 1. (\\<And>bc.\n        \\<lbrakk>bc \\<in> C - B;\n         \\<And>x.\n            \\<lbrakk>x \\<in> B; x \\<notin> C\\<rbrakk>\n            \\<Longrightarrow> bc \\<le> x \\<and>\n                              (x \\<le> bc \\<longrightarrow> bc = x);\n         \\<And>x.\n            \\<lbrakk>x \\<in> C; x \\<notin> B\\<rbrakk>\n            \\<Longrightarrow> bc \\<le> x \\<and>\n                              (x \\<le> bc \\<longrightarrow> bc = x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bc \\<in> C - B\n  \\<lbrakk>?x \\<in> B; ?x \\<notin> C\\<rbrakk>\n  \\<Longrightarrow> bc \\<le> ?x \\<and>\n                    (?x \\<le> bc \\<longrightarrow> bc = ?x)\n  \\<lbrakk>?x \\<in> C; ?x \\<notin> B\\<rbrakk>\n  \\<Longrightarrow> bc \\<le> ?x \\<and>\n                    (?x \\<le> bc \\<longrightarrow> bc = ?x)\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "proof(cases \"ab \\<le> bc\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "case True"], ["proof (state)\nthis:\n  ab \\<le> bc\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "hence \"ab \\<in> C - A\" \"ab \\<notin> A - C\""], ["proof (prove)\nusing this:\n  ab \\<le> bc\n\ngoal (1 subgoal):\n 1. ab \\<in> C - A &&& ab \\<notin> A - C", "using ab bc"], ["proof (prove)\nusing this:\n  ab \\<le> bc\n  ab \\<in> B - A\n  bc \\<in> C - B\n\ngoal (1 subgoal):\n 1. ab \\<in> C - A &&& ab \\<notin> A - C", "by(auto dest: minBC antisym)"], ["proof (state)\nthis:\n  ab \\<in> C - A\n  ab \\<notin> A - C\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "moreover"], ["proof (state)\nthis:\n  ab \\<in> C - A\n  ab \\<notin> A - C\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "{"], ["proof (state)\nthis:\n  ab \\<in> C - A\n  ab \\<notin> A - C\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "assume x: \"x \\<in> (C - A) \\<union> (A - C)\""], ["proof (state)\nthis:\n  x \\<in> C - A \\<union> (A - C)\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "hence \"ab \\<le> x\""], ["proof (prove)\nusing this:\n  x \\<in> C - A \\<union> (A - C)\n\ngoal (1 subgoal):\n 1. ab \\<le> x", "by(cases \"x \\<in> B\")(auto dest: minAB minBA minBC minCB intro: order_trans[OF True])"], ["proof (state)\nthis:\n  ab \\<le> x\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "moreover"], ["proof (state)\nthis:\n  ab \\<le> x\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "hence \"ab \\<noteq> x \\<longrightarrow> \\<not> x \\<le> ab\""], ["proof (prove)\nusing this:\n  ab \\<le> x\n\ngoal (1 subgoal):\n 1. ab \\<noteq> x \\<longrightarrow> \\<not> x \\<le> ab", "using ab bc x"], ["proof (prove)\nusing this:\n  ab \\<le> x\n  ab \\<in> B - A\n  bc \\<in> C - B\n  x \\<in> C - A \\<union> (A - C)\n\ngoal (1 subgoal):\n 1. ab \\<noteq> x \\<longrightarrow> \\<not> x \\<le> ab", "by(cases \"x \\<in> B\")(auto dest: antisym)"], ["proof (state)\nthis:\n  ab \\<noteq> x \\<longrightarrow> \\<not> x \\<le> ab\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "moreover"], ["proof (state)\nthis:\n  ab \\<noteq> x \\<longrightarrow> \\<not> x \\<le> ab\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "note calculation"], ["proof (state)\nthis:\n  ab \\<le> x\n  ab \\<noteq> x \\<longrightarrow> \\<not> x \\<le> ab\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> ab \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  ab \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> ab\n\ngoal (2 subgoals):\n 1. ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C\n 2. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "ultimately"], ["proof (chain)\npicking this:\n  ab \\<in> C - A\n  ab \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> ab \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  ab \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> ab", "show ?thesis"], ["proof (prove)\nusing this:\n  ab \\<in> C - A\n  ab \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> ab \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  ab \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> ab\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "using A C"], ["proof (prove)\nusing this:\n  ab \\<in> C - A\n  ab \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> ab \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  ab \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> ab\n  finite A\n  finite C\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "unfolding set_less_aux_def"], ["proof (prove)\nusing this:\n  ab \\<in> C - A\n  ab \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> ab \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  ab \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> ab\n  finite A\n  finite C\n\ngoal (1 subgoal):\n 1. finite A \\<and>\n    finite C \\<and>\n    (\\<exists>y\\<in>C - A.\n        \\<forall>z\\<in>A - C \\<union> (C - A).\n           y \\<le> z \\<and> (z \\<le> y \\<longrightarrow> y = z))", "by auto"], ["proof (state)\nthis:\n  A \\<sqsubset>' C\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "case False"], ["proof (state)\nthis:\n  \\<not> ab \\<le> bc\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "with linear[of ab bc]"], ["proof (chain)\npicking this:\n  ab \\<le> bc \\<or> bc \\<le> ab\n  \\<not> ab \\<le> bc", "have \"bc \\<le> ab\""], ["proof (prove)\nusing this:\n  ab \\<le> bc \\<or> bc \\<le> ab\n  \\<not> ab \\<le> bc\n\ngoal (1 subgoal):\n 1. bc \\<le> ab", "by simp"], ["proof (state)\nthis:\n  bc \\<le> ab\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "with ab bc"], ["proof (chain)\npicking this:\n  ab \\<in> B - A\n  bc \\<in> C - B\n  bc \\<le> ab", "have \"bc \\<in> C - A\" \"bc \\<notin> A - C\""], ["proof (prove)\nusing this:\n  ab \\<in> B - A\n  bc \\<in> C - B\n  bc \\<le> ab\n\ngoal (1 subgoal):\n 1. bc \\<in> C - A &&& bc \\<notin> A - C", "by(auto dest: minAB antisym)"], ["proof (state)\nthis:\n  bc \\<in> C - A\n  bc \\<notin> A - C\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "moreover"], ["proof (state)\nthis:\n  bc \\<in> C - A\n  bc \\<notin> A - C\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "{"], ["proof (state)\nthis:\n  bc \\<in> C - A\n  bc \\<notin> A - C\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "assume x: \"x \\<in> (C - A) \\<union> (A - C)\""], ["proof (state)\nthis:\n  x \\<in> C - A \\<union> (A - C)\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "hence \"bc \\<le> x\""], ["proof (prove)\nusing this:\n  x \\<in> C - A \\<union> (A - C)\n\ngoal (1 subgoal):\n 1. bc \\<le> x", "by(cases \"x \\<in> B\")(auto dest: minAB minBA minBC minCB intro: order_trans[OF \\<open>bc \\<le> ab\\<close>])"], ["proof (state)\nthis:\n  bc \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "moreover"], ["proof (state)\nthis:\n  bc \\<le> x\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "hence \"bc \\<noteq> x \\<longrightarrow> \\<not> x \\<le> bc\""], ["proof (prove)\nusing this:\n  bc \\<le> x\n\ngoal (1 subgoal):\n 1. bc \\<noteq> x \\<longrightarrow> \\<not> x \\<le> bc", "using ab bc x"], ["proof (prove)\nusing this:\n  bc \\<le> x\n  ab \\<in> B - A\n  bc \\<in> C - B\n  x \\<in> C - A \\<union> (A - C)\n\ngoal (1 subgoal):\n 1. bc \\<noteq> x \\<longrightarrow> \\<not> x \\<le> bc", "by(cases \"x \\<in> B\")(auto dest: antisym)"], ["proof (state)\nthis:\n  bc \\<noteq> x \\<longrightarrow> \\<not> x \\<le> bc\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "moreover"], ["proof (state)\nthis:\n  bc \\<noteq> x \\<longrightarrow> \\<not> x \\<le> bc\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "note calculation"], ["proof (state)\nthis:\n  bc \\<le> x\n  bc \\<noteq> x \\<longrightarrow> \\<not> x \\<le> bc\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> bc \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  bc \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> bc\n\ngoal (1 subgoal):\n 1. \\<not> ab \\<le> bc \\<Longrightarrow> A \\<sqsubset>' C", "ultimately"], ["proof (chain)\npicking this:\n  bc \\<in> C - A\n  bc \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> bc \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  bc \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> bc", "show ?thesis"], ["proof (prove)\nusing this:\n  bc \\<in> C - A\n  bc \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> bc \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  bc \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> bc\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "using A C"], ["proof (prove)\nusing this:\n  bc \\<in> C - A\n  bc \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> bc \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  bc \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> bc\n  finite A\n  finite C\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' C", "unfolding set_less_aux_def"], ["proof (prove)\nusing this:\n  bc \\<in> C - A\n  bc \\<notin> A - C\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow> bc \\<le> ?x2\n  ?x2 \\<in> C - A \\<union> (A - C) \\<Longrightarrow>\n  bc \\<noteq> ?x2 \\<longrightarrow> \\<not> ?x2 \\<le> bc\n  finite A\n  finite C\n\ngoal (1 subgoal):\n 1. finite A \\<and>\n    finite C \\<and>\n    (\\<exists>y\\<in>C - A.\n        \\<forall>z\\<in>A - C \\<union> (C - A).\n           y \\<le> z \\<and> (z \\<le> y \\<longrightarrow> y = z))", "by auto"], ["proof (state)\nthis:\n  A \\<sqsubset>' C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A \\<sqsubset>' C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_less_eq_aux_trans [trans]:\n  \"\\<lbrakk> A \\<sqsubseteq>' B; B \\<sqsubseteq>' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>' B; B \\<sqsubseteq>' C\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>' C", "by(auto simp add: set_less_eq_aux_def dest: set_less_aux_trans)"], ["", "lemma set_less_trans_set_less_eq [trans]:\n  \"\\<lbrakk> A \\<sqsubset>' B; B \\<sqsubseteq>' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubset>' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubset>' B; B \\<sqsubseteq>' C\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubset>' C", "by(auto simp add: set_less_eq_aux_def dest: set_less_aux_trans)"], ["", "lemma set_less_eq_aux_porder: \"partial_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>' B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>' B}", "by(auto simp add: preorder_on_def partial_order_on_def intro!: refl_onI transI antisymI dest: set_less_eq_aux_infinite_complement_partitionD intro: set_less_eq_aux_antisym set_less_eq_aux_trans del: equalityI)"], ["", "lemma psubset_finite_imp_set_less_aux:\n  assumes AsB: \"A \\<subset> B\" and B: \"finite B\"\n  shows \"A \\<sqsubset>' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "from AsB B"], ["proof (chain)\npicking this:\n  A \\<subset> B\n  finite B", "have A: \"finite A\""], ["proof (prove)\nusing this:\n  A \\<subset> B\n  finite B\n\ngoal (1 subgoal):\n 1. finite A", "by(auto intro: finite_subset)"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "moreover"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "from AsB B"], ["proof (chain)\npicking this:\n  A \\<subset> B\n  finite B", "have \"Min (B - A) \\<in> B - A\""], ["proof (prove)\nusing this:\n  A \\<subset> B\n  finite B\n\ngoal (1 subgoal):\n 1. Min (B - A) \\<in> B - A", "by - (rule Min_in, auto)"], ["proof (state)\nthis:\n  Min (B - A) \\<in> B - A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "ultimately"], ["proof (chain)\npicking this:\n  finite A\n  Min (B - A) \\<in> B - A", "show ?thesis"], ["proof (prove)\nusing this:\n  finite A\n  Min (B - A) \\<in> B - A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "using B AsB"], ["proof (prove)\nusing this:\n  finite A\n  Min (B - A) \\<in> B - A\n  finite B\n  A \\<subset> B\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "by(auto simp add: set_less_aux_def intro!: rev_bexI[where x=\"Min (B - A)\"] Min_eqI dest: Min_ge_iff[THEN iffD1, rotated 2])"], ["proof (state)\nthis:\n  A \\<sqsubset>' B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_finite_imp_set_less_eq_aux:\n  \"\\<lbrakk> A \\<subseteq> B; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; finite B\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>' B", "by(cases \"A = B\")(auto simp add: set_less_eq_aux_def finite_complement_partition intro: psubset_finite_imp_set_less_aux)"], ["", "lemma empty_set_less_aux_finite_iff: \n  \"finite A \\<Longrightarrow> {} \\<sqsubset>' A \\<longleftrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> ({} \\<sqsubset>' A) = (A \\<noteq> {})", "by(auto intro: psubset_finite_imp_set_less_aux)"], ["", "lemma set_less_aux_finite_total:\n  assumes A: \"finite A\" and B: \"finite B\"\n  shows \"A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "proof(cases \"A \\<subseteq> B \\<or> B \\<subseteq> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<subseteq> B \\<or> B \\<subseteq> A \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\n 2. \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A) \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "case True"], ["proof (state)\nthis:\n  A \\<subseteq> B \\<or> B \\<subseteq> A\n\ngoal (2 subgoals):\n 1. A \\<subseteq> B \\<or> B \\<subseteq> A \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\n 2. \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A) \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "thus ?thesis"], ["proof (prove)\nusing this:\n  A \\<subseteq> B \\<or> B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "using A B psubset_finite_imp_set_less_aux[of A B] psubset_finite_imp_set_less_aux[of B A]"], ["proof (prove)\nusing this:\n  A \\<subseteq> B \\<or> B \\<subseteq> A\n  finite A\n  finite B\n  \\<lbrakk>A \\<subset> B; finite B\\<rbrakk>\n  \\<Longrightarrow> A \\<sqsubset>' B\n  \\<lbrakk>B \\<subset> A; finite A\\<rbrakk>\n  \\<Longrightarrow> B \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "by auto"], ["proof (state)\nthis:\n  A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A) \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A) \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "case False"], ["proof (state)\nthis:\n  \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A)\n\ngoal (1 subgoal):\n 1. \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A) \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "hence A': \"\\<not> A \\<subseteq> B\" and B': \"\\<not> B \\<subseteq> A\" and AnB: \"A \\<noteq> B\""], ["proof (prove)\nusing this:\n  \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A)\n\ngoal (1 subgoal):\n 1. \\<not> A \\<subseteq> B &&& \\<not> B \\<subseteq> A &&& A \\<noteq> B", "by auto"], ["proof (state)\nthis:\n  \\<not> A \\<subseteq> B\n  \\<not> B \\<subseteq> A\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. \\<not> (A \\<subseteq> B \\<or> B \\<subseteq> A) \\<Longrightarrow>\n    A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> A \\<subseteq> B\n  \\<not> B \\<subseteq> A\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "using A B"], ["proof (prove)\nusing this:\n  \\<not> A \\<subseteq> B\n  \\<not> B \\<subseteq> A\n  A \\<noteq> B\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "proof(induct \"Min (B - A)\" \"Min (A - B)\" arbitrary: A B rule: wlog_le)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<And>Aa Ba.\n                   \\<lbrakk>Min (A - B) = Min (Ba - Aa);\n                    Min (B - A) = Min (Aa - Ba); \\<not> Aa \\<subseteq> Ba;\n                    \\<not> Ba \\<subseteq> Aa; Aa \\<noteq> Ba; finite Aa;\n                    finite Ba\\<rbrakk>\n                   \\<Longrightarrow> Aa \\<sqsubset>' Ba \\<or>\n                                     Aa = Ba \\<or> Ba \\<sqsubset>' Aa;\n        \\<not> A \\<subseteq> B; \\<not> B \\<subseteq> A; A \\<noteq> B;\n        finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\n 2. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "case (sym m n)"], ["proof (state)\nthis:\n  \\<lbrakk>Min (m - n) = Min (?B - ?A); Min (n - m) = Min (?A - ?B);\n   \\<not> ?A \\<subseteq> ?B; \\<not> ?B \\<subseteq> ?A; ?A \\<noteq> ?B;\n   finite ?A; finite ?B\\<rbrakk>\n  \\<Longrightarrow> ?A \\<sqsubset>' ?B \\<or>\n                    ?A = ?B \\<or> ?B \\<sqsubset>' ?A\n  \\<not> m \\<subseteq> n\n  \\<not> n \\<subseteq> m\n  m \\<noteq> n\n  finite m\n  finite n\n\ngoal (2 subgoals):\n 1. \\<And>A B.\n       \\<lbrakk>\\<And>Aa Ba.\n                   \\<lbrakk>Min (A - B) = Min (Ba - Aa);\n                    Min (B - A) = Min (Aa - Ba); \\<not> Aa \\<subseteq> Ba;\n                    \\<not> Ba \\<subseteq> Aa; Aa \\<noteq> Ba; finite Aa;\n                    finite Ba\\<rbrakk>\n                   \\<Longrightarrow> Aa \\<sqsubset>' Ba \\<or>\n                                     Aa = Ba \\<or> Ba \\<sqsubset>' Aa;\n        \\<not> A \\<subseteq> B; \\<not> B \\<subseteq> A; A \\<noteq> B;\n        finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\n 2. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "from sym.hyps[OF refl refl] sym.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> n \\<subseteq> m; \\<not> m \\<subseteq> n; n \\<noteq> m;\n   finite n; finite m\\<rbrakk>\n  \\<Longrightarrow> n \\<sqsubset>' m \\<or> n = m \\<or> m \\<sqsubset>' n\n  \\<not> m \\<subseteq> n\n  \\<not> n \\<subseteq> m\n  m \\<noteq> n\n  finite m\n  finite n", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> n \\<subseteq> m; \\<not> m \\<subseteq> n; n \\<noteq> m;\n   finite n; finite m\\<rbrakk>\n  \\<Longrightarrow> n \\<sqsubset>' m \\<or> n = m \\<or> m \\<sqsubset>' n\n  \\<not> m \\<subseteq> n\n  \\<not> n \\<subseteq> m\n  m \\<noteq> n\n  finite m\n  finite n\n\ngoal (1 subgoal):\n 1. m \\<sqsubset>' n \\<or> m = n \\<or> n \\<sqsubset>' m", "by blast"], ["proof (state)\nthis:\n  m \\<sqsubset>' n \\<or> m = n \\<or> n \\<sqsubset>' m\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "case (le A B)"], ["proof (state)\nthis:\n  Min (B - A) \\<le> Min (A - B)\n  \\<not> A \\<subseteq> B\n  \\<not> B \\<subseteq> A\n  A \\<noteq> B\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "note A = \\<open>finite A\\<close> and B = \\<open>finite B\\<close>\n      and A' = \\<open>\\<not> A \\<subseteq> B\\<close> and B' = \\<open>\\<not> B \\<subseteq> A\\<close>"], ["proof (state)\nthis:\n  finite A\n  finite B\n  \\<not> A \\<subseteq> B\n  \\<not> B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "{"], ["proof (state)\nthis:\n  finite A\n  finite B\n  \\<not> A \\<subseteq> B\n  \\<not> B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "assume z: \"z \\<in> (A - B) \\<union> (B - A)\""], ["proof (state)\nthis:\n  z \\<in> A - B \\<union> (B - A)\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "hence \"Min (B - A) \\<le> z \\<and> (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)\""], ["proof (prove)\nusing this:\n  z \\<in> A - B \\<union> (B - A)\n\ngoal (1 subgoal):\n 1. Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. z \\<in> A - B \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)\n 2. z \\<in> B - A \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "assume \"z \\<in> B - A\""], ["proof (state)\nthis:\n  z \\<in> B - A\n\ngoal (2 subgoals):\n 1. z \\<in> A - B \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)\n 2. z \\<in> B - A \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "hence \"Min (B - A) \\<le> z\""], ["proof (prove)\nusing this:\n  z \\<in> B - A\n\ngoal (1 subgoal):\n 1. Min (B - A) \\<le> z", "by(simp add: B)"], ["proof (state)\nthis:\n  Min (B - A) \\<le> z\n\ngoal (2 subgoals):\n 1. z \\<in> A - B \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)\n 2. z \\<in> B - A \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Min (B - A) \\<le> z\n\ngoal (1 subgoal):\n 1. Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "by auto"], ["proof (state)\nthis:\n  Min (B - A) \\<le> z \\<and>\n  (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)\n\ngoal (1 subgoal):\n 1. z \\<in> A - B \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<in> A - B \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "assume \"z \\<in> A - B\""], ["proof (state)\nthis:\n  z \\<in> A - B\n\ngoal (1 subgoal):\n 1. z \\<in> A - B \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "hence \"Min (A - B) \\<le> z\""], ["proof (prove)\nusing this:\n  z \\<in> A - B\n\ngoal (1 subgoal):\n 1. Min (A - B) \\<le> z", "by(simp add: A)"], ["proof (state)\nthis:\n  Min (A - B) \\<le> z\n\ngoal (1 subgoal):\n 1. z \\<in> A - B \\<Longrightarrow>\n    Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "with le.hyps"], ["proof (chain)\npicking this:\n  Min (B - A) \\<le> Min (A - B)\n  Min (A - B) \\<le> z", "show ?thesis"], ["proof (prove)\nusing this:\n  Min (B - A) \\<le> Min (A - B)\n  Min (A - B) \\<le> z\n\ngoal (1 subgoal):\n 1. Min (B - A) \\<le> z \\<and>\n    (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)", "by(auto)"], ["proof (state)\nthis:\n  Min (B - A) \\<le> z \\<and>\n  (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Min (B - A) \\<le> z \\<and>\n  (z \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = z)\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "}"], ["proof (state)\nthis:\n  ?z2 \\<in> A - B \\<union> (B - A) \\<Longrightarrow>\n  Min (B - A) \\<le> ?z2 \\<and>\n  (?z2 \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = ?z2)\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "moreover"], ["proof (state)\nthis:\n  ?z2 \\<in> A - B \\<union> (B - A) \\<Longrightarrow>\n  Min (B - A) \\<le> ?z2 \\<and>\n  (?z2 \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = ?z2)\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "have \"Min (B - A) \\<in> B - A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (B - A) \\<in> B - A", "by(rule Min_in)(simp_all add: B B')"], ["proof (state)\nthis:\n  Min (B - A) \\<in> B - A\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "ultimately"], ["proof (chain)\npicking this:\n  ?z2 \\<in> A - B \\<union> (B - A) \\<Longrightarrow>\n  Min (B - A) \\<le> ?z2 \\<and>\n  (?z2 \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = ?z2)\n  Min (B - A) \\<in> B - A", "have \"A \\<sqsubset>' B\""], ["proof (prove)\nusing this:\n  ?z2 \\<in> A - B \\<union> (B - A) \\<Longrightarrow>\n  Min (B - A) \\<le> ?z2 \\<and>\n  (?z2 \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = ?z2)\n  Min (B - A) \\<in> B - A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "using A B"], ["proof (prove)\nusing this:\n  ?z2 \\<in> A - B \\<union> (B - A) \\<Longrightarrow>\n  Min (B - A) \\<le> ?z2 \\<and>\n  (?z2 \\<le> Min (B - A) \\<longrightarrow> Min (B - A) = ?z2)\n  Min (B - A) \\<in> B - A\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  A \\<sqsubset>' B\n\ngoal (1 subgoal):\n 1. \\<And>A B.\n       \\<lbrakk>Min (B - A) \\<le> Min (A - B); \\<not> A \\<subseteq> B;\n        \\<not> B \\<subseteq> A; A \\<noteq> B; finite A; finite B\\<rbrakk>\n       \\<Longrightarrow> A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", "thus ?case"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' B\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A", ".."], ["proof (state)\nthis:\n  A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A \\<sqsubset>' B \\<or> A = B \\<or> B \\<sqsubset>' A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_less_eq_aux_finite_total:\n  \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' B \\<or> A = B \\<or> B \\<sqsubseteq>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>' B \\<or>\n                      A = B \\<or> B \\<sqsubseteq>' A", "by(drule (1) set_less_aux_finite_total)(auto simp add: set_less_eq_aux_def)"], ["", "lemma set_less_eq_aux_finite_total2:\n  \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>' B \\<or> B \\<sqsubseteq>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>' B \\<or> B \\<sqsubseteq>' A", "by(drule (1) set_less_eq_aux_finite_total)(auto simp add: finite_complement_partition)"], ["", "lemma set_less_aux_rec:\n  assumes A: \"finite A\" and B: \"finite B\"\n  and A': \"A \\<noteq> {}\" and B': \"B \\<noteq> {}\"\n  shows \"A \\<sqsubset>' B \\<longleftrightarrow> Min B < Min A \\<or> Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "proof(cases \"Min A = Min B\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Min A = Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})\n 2. Min A \\<noteq> Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "case True"], ["proof (state)\nthis:\n  Min A = Min B\n\ngoal (2 subgoals):\n 1. Min A = Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})\n 2. Min A \\<noteq> Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "from A A' B B'"], ["proof (chain)\npicking this:\n  finite A\n  A \\<noteq> {}\n  finite B\n  B \\<noteq> {}", "have \"insert (Min A) A = A\" \"insert (Min B) B = B\""], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  finite B\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. insert (Min A) A = A &&& insert (Min B) B = B", "by(auto simp add: ex_in_conv[symmetric] exI)"], ["proof (state)\nthis:\n  insert (Min A) A = A\n  insert (Min B) B = B\n\ngoal (2 subgoals):\n 1. Min A = Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})\n 2. Min A \\<noteq> Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "with True"], ["proof (chain)\npicking this:\n  Min A = Min B\n  insert (Min A) A = A\n  insert (Min B) B = B", "show ?thesis"], ["proof (prove)\nusing this:\n  Min A = Min B\n  insert (Min A) A = A\n  insert (Min B) B = B\n\ngoal (1 subgoal):\n 1. (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "by(subst (2) set_less_aux_insert_same[symmetric, where x=\"Min A\"]) simp_all"], ["proof (state)\nthis:\n  (A \\<sqsubset>' B) =\n  (Min B < Min A \\<or>\n   Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})\n\ngoal (1 subgoal):\n 1. Min A \\<noteq> Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Min A \\<noteq> Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "case False"], ["proof (state)\nthis:\n  Min A \\<noteq> Min B\n\ngoal (1 subgoal):\n 1. Min A \\<noteq> Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "have \"A \\<sqsubset>' B \\<longleftrightarrow> Min B < Min A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubset>' B) = (Min B < Min A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "assume AB: \"A \\<sqsubset>' B\""], ["proof (state)\nthis:\n  A \\<sqsubset>' B\n\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "with B A"], ["proof (chain)\npicking this:\n  finite B\n  finite A\n  A \\<sqsubset>' B", "obtain ab where ab: \"ab \\<in> B - A\"\n      and AB: \"\\<And>x. \\<lbrakk> x \\<in> A; x \\<notin> B \\<rbrakk> \\<Longrightarrow> ab \\<le> x\""], ["proof (prove)\nusing this:\n  finite B\n  finite A\n  A \\<sqsubset>' B\n\ngoal (1 subgoal):\n 1. (\\<And>ab.\n        \\<lbrakk>ab \\<in> B - A;\n         \\<And>x.\n            \\<lbrakk>x \\<in> A; x \\<notin> B\\<rbrakk>\n            \\<Longrightarrow> ab \\<le> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  ab \\<in> B - A\n  \\<lbrakk>?x \\<in> A; ?x \\<notin> B\\<rbrakk> \\<Longrightarrow> ab \\<le> ?x\n\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "{"], ["proof (state)\nthis:\n  ab \\<in> B - A\n  \\<lbrakk>?x \\<in> A; ?x \\<notin> B\\<rbrakk> \\<Longrightarrow> ab \\<le> ?x\n\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "hence \"Min B \\<le> a\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. Min B \\<le> a", "using A A' B B' ab"], ["proof (prove)\nusing this:\n  a \\<in> A\n  finite A\n  A \\<noteq> {}\n  finite B\n  B \\<noteq> {}\n  ab \\<in> B - A\n\ngoal (1 subgoal):\n 1. Min B \\<le> a", "by(cases \"a \\<in> B\")(auto intro: order_trans[where y=ab] dest: AB)"], ["proof (state)\nthis:\n  Min B \\<le> a\n\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> A \\<Longrightarrow> Min B \\<le> ?a2\n\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "hence \"Min B \\<le> Min A\""], ["proof (prove)\nusing this:\n  ?a2 \\<in> A \\<Longrightarrow> Min B \\<le> ?a2\n\ngoal (1 subgoal):\n 1. Min B \\<le> Min A", "using A A'"], ["proof (prove)\nusing this:\n  ?a2 \\<in> A \\<Longrightarrow> Min B \\<le> ?a2\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min B \\<le> Min A", "by simp"], ["proof (state)\nthis:\n  Min B \\<le> Min A\n\ngoal (2 subgoals):\n 1. A \\<sqsubset>' B \\<Longrightarrow> Min B < Min A\n 2. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "with False"], ["proof (chain)\npicking this:\n  Min A \\<noteq> Min B\n  Min B \\<le> Min A", "show \"Min B < Min A\""], ["proof (prove)\nusing this:\n  Min A \\<noteq> Min B\n  Min B \\<le> Min A\n\ngoal (1 subgoal):\n 1. Min B < Min A", "using False"], ["proof (prove)\nusing this:\n  Min A \\<noteq> Min B\n  Min B \\<le> Min A\n  Min A \\<noteq> Min B\n\ngoal (1 subgoal):\n 1. Min B < Min A", "by auto"], ["proof (state)\nthis:\n  Min B < Min A\n\ngoal (1 subgoal):\n 1. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "assume \"Min B < Min A\""], ["proof (state)\nthis:\n  Min B < Min A\n\ngoal (1 subgoal):\n 1. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "hence \"\\<forall>z\\<in>A - B \\<union> (B - A). Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)\""], ["proof (prove)\nusing this:\n  Min B < Min A\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>A - B \\<union> (B - A).\n       Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)", "using A B A' B'"], ["proof (prove)\nusing this:\n  Min B < Min A\n  finite A\n  finite B\n  A \\<noteq> {}\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>A - B \\<union> (B - A).\n       Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)", "by(auto 4 4 intro: Min_in Min_eqI dest: bspec bspec[where x=\"Min B\"])"], ["proof (state)\nthis:\n  \\<forall>z\\<in>A - B \\<union> (B - A).\n     Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)\n\ngoal (1 subgoal):\n 1. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "moreover"], ["proof (state)\nthis:\n  \\<forall>z\\<in>A - B \\<union> (B - A).\n     Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)\n\ngoal (1 subgoal):\n 1. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "have \"Min B \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min B \\<notin> A", "using \\<open>Min B < Min A\\<close>"], ["proof (prove)\nusing this:\n  Min B < Min A\n\ngoal (1 subgoal):\n 1. Min B \\<notin> A", "by (metis A Min_le not_less)"], ["proof (state)\nthis:\n  Min B \\<notin> A\n\ngoal (1 subgoal):\n 1. Min B < Min A \\<Longrightarrow> A \\<sqsubset>' B", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>z\\<in>A - B \\<union> (B - A).\n     Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)\n  Min B \\<notin> A", "show \"A \\<sqsubset>' B\""], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A - B \\<union> (B - A).\n     Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)\n  Min B \\<notin> A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "using A B A' B'"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A - B \\<union> (B - A).\n     Min B \\<le> z \\<and> (z \\<le> Min B \\<longrightarrow> Min B = z)\n  Min B \\<notin> A\n  finite A\n  finite B\n  A \\<noteq> {}\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' B", "by(simp add: set_less_aux_def bexI[where x=\"Min B\"])"], ["proof (state)\nthis:\n  A \\<sqsubset>' B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (A \\<sqsubset>' B) = (Min B < Min A)\n\ngoal (1 subgoal):\n 1. Min A \\<noteq> Min B \\<Longrightarrow>\n    (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "thus ?thesis"], ["proof (prove)\nusing this:\n  (A \\<sqsubset>' B) = (Min B < Min A)\n\ngoal (1 subgoal):\n 1. (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "using False"], ["proof (prove)\nusing this:\n  (A \\<sqsubset>' B) = (Min B < Min A)\n  Min A \\<noteq> Min B\n\ngoal (1 subgoal):\n 1. (A \\<sqsubset>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})", "by simp"], ["proof (state)\nthis:\n  (A \\<sqsubset>' B) =\n  (Min B < Min A \\<or>\n   Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_less_eq_aux_rec:\n  assumes \"finite A\" \"finite B\" \"A \\<noteq> {}\" \"B \\<noteq> {}\"\n  shows \"A \\<sqsubseteq>' B \\<longleftrightarrow> Min B < Min A \\<or> Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "proof(cases \"A = B\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A = B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})\n 2. A \\<noteq> B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "case True"], ["proof (state)\nthis:\n  A = B\n\ngoal (2 subgoals):\n 1. A = B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})\n 2. A \\<noteq> B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = B\n\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "using assms"], ["proof (prove)\nusing this:\n  A = B\n  finite A\n  finite B\n  A \\<noteq> {}\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "by(simp add: finite_complement_partition)"], ["proof (state)\nthis:\n  (A \\<sqsubseteq>' B) =\n  (Min B < Min A \\<or>\n   Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})\n\ngoal (1 subgoal):\n 1. A \\<noteq> B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "case False"], ["proof (state)\nthis:\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<noteq> B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "moreover"], ["proof (state)\nthis:\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. A \\<noteq> B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "hence \"Min A = Min B \\<Longrightarrow> A - {Min A} \\<noteq> B - {Min B}\""], ["proof (prove)\nusing this:\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. Min A = Min B \\<Longrightarrow> A - {Min A} \\<noteq> B - {Min B}", "by (metis (lifting) assms Min_in insert_Diff)"], ["proof (state)\nthis:\n  Min A = Min B \\<Longrightarrow> A - {Min A} \\<noteq> B - {Min B}\n\ngoal (1 subgoal):\n 1. A \\<noteq> B \\<Longrightarrow>\n    (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "ultimately"], ["proof (chain)\npicking this:\n  A \\<noteq> B\n  Min A = Min B \\<Longrightarrow> A - {Min A} \\<noteq> B - {Min B}", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<noteq> B\n  Min A = Min B \\<Longrightarrow> A - {Min A} \\<noteq> B - {Min B}\n\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "using set_less_aux_rec[OF assms]"], ["proof (prove)\nusing this:\n  A \\<noteq> B\n  Min A = Min B \\<Longrightarrow> A - {Min A} \\<noteq> B - {Min B}\n  (A \\<sqsubset>' B) =\n  (Min B < Min A \\<or>\n   Min A = Min B \\<and> A - {Min A} \\<sqsubset>' B - {Min A})\n\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>' B) =\n    (Min B < Min A \\<or>\n     Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})", "by(simp add: set_less_eq_aux_def cong: conj_cong)"], ["proof (state)\nthis:\n  (A \\<sqsubseteq>' B) =\n  (Min B < Min A \\<or>\n   Min A = Min B \\<and> A - {Min A} \\<sqsubseteq>' B - {Min A})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_less_aux_Min_antimono:\n  \"\\<lbrakk> Min A < Min B;  finite A; finite B; A \\<noteq> {} \\<rbrakk> \\<Longrightarrow> B \\<sqsubset>' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Min A < Min B; finite A; finite B; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> B \\<sqsubset>' A", "using set_less_aux_rec[of B A]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite B; finite A; B \\<noteq> {}; A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> (B \\<sqsubset>' A) =\n                    (Min A < Min B \\<or>\n                     Min B = Min A \\<and>\n                     B - {Min B} \\<sqsubset>' A - {Min B})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Min A < Min B; finite A; finite B; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> B \\<sqsubset>' A", "by(cases \"B = {}\")(simp_all add: empty_set_less_aux_finite_iff)"], ["", "lemma sorted_Cons_Min: \"sorted (x # xs) \\<Longrightarrow> Min (insert x (set xs)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted (x # xs) \\<Longrightarrow> Min (insert x (set xs)) = x", "by(auto simp add: intro: Min_eqI)"], ["", "lemma set_less_aux_code:\n  \"\\<lbrakk> sorted xs; distinct xs; sorted ys; distinct ys \\<rbrakk>\n  \\<Longrightarrow> set xs \\<sqsubset>' set ys \\<longleftrightarrow> ord.lexordp (>) xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; distinct xs; sorted ys; distinct ys\\<rbrakk>\n    \\<Longrightarrow> (set xs \\<sqsubset>' set ys) =\n                      ord.lexordp (\\<lambda>x y. y < x) xs ys", "apply(induct xs ys rule: list_induct2')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>sorted []; distinct []; sorted []; distinct []\\<rbrakk>\n    \\<Longrightarrow> (set [] \\<sqsubset>' set []) =\n                      ord.lexordp (\\<lambda>x y. y < x) [] []\n 2. \\<And>x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs); sorted [];\n        distinct []\\<rbrakk>\n       \\<Longrightarrow> (set (x # xs) \\<sqsubset>' set []) =\n                         ord.lexordp (\\<lambda>x y. y < x) (x # xs) []\n 3. \\<And>y ys.\n       \\<lbrakk>sorted []; distinct []; sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (set [] \\<sqsubset>' set (y # ys)) =\n                         ord.lexordp (\\<lambda>x y. y < x) [] (y # ys)\n 4. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted ys;\n                 distinct ys\\<rbrakk>\n                \\<Longrightarrow> (set xs \\<sqsubset>' set ys) =\n                                  ord.lexordp (\\<lambda>x y. y < x) xs ys;\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (set (x # xs) \\<sqsubset>' set (y # ys)) =\n                         ord.lexordp (\\<lambda>x y. y < x) (x # xs) (y # ys)", "apply(simp_all add: empty_set_less_aux_finite_iff sorted_Cons_Min set_less_aux_rec neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>(set xs \\<sqsubset>' set ys) =\n                ord.lexordp (\\<lambda>x y. y < x) xs ys;\n        (\\<forall>xa\\<in>set xs. x \\<le> xa) \\<and> sorted xs;\n        x \\<notin> set xs \\<and> distinct xs;\n        (\\<forall>x\\<in>set ys. y \\<le> x) \\<and> sorted ys;\n        y \\<notin> set ys \\<and> distinct ys\\<rbrakk>\n       \\<Longrightarrow> (y < x \\<or>\n                          x = y \\<and>\n                          set xs \\<sqsubset>' insert y (set ys) - {x}) =\n                         (y < x \\<or>\n                          \\<not> x < y \\<and>\n                          ord.lexordp (\\<lambda>x y. y < x) xs ys)", "apply(auto cong: conj_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_less_eq_aux_code:\n  assumes \"sorted xs\" \"distinct xs\" \"sorted ys\" \"distinct ys\"\n  shows \"set xs \\<sqsubseteq>' set ys \\<longleftrightarrow> ord.lexordp_eq (>) xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set xs \\<sqsubseteq>' set ys) =\n    ord.lexordp_eq (\\<lambda>x y. y < x) xs ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (set xs \\<sqsubseteq>' set ys) =\n    ord.lexordp_eq (\\<lambda>x y. y < x) xs ys", "have dual: \"class.linorder (\\<ge>) (>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)", "by(rule linorder.dual_linorder) unfold_locales"], ["proof (state)\nthis:\n  class.linorder (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x)\n\ngoal (1 subgoal):\n 1. (set xs \\<sqsubseteq>' set ys) =\n    ord.lexordp_eq (\\<lambda>x y. y < x) xs ys", "from assms"], ["proof (chain)\npicking this:\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n\ngoal (1 subgoal):\n 1. (set xs \\<sqsubseteq>' set ys) =\n    ord.lexordp_eq (\\<lambda>x y. y < x) xs ys", "by(auto simp add: set_less_eq_aux_def finite_complement_partition linorder.lexordp_eq_conv_lexord[OF dual] set_less_aux_code intro: sorted_distinct_set_unique)"], ["proof (state)\nthis:\n  (set xs \\<sqsubseteq>' set ys) =\n  ord.lexordp_eq (\\<lambda>x y. y < x) xs ys\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection \\<open>Extending @{term set_less_eq_aux} to have @{term \"{}\"} as least element\\<close>"], ["", "context ord begin"], ["", "definition set_less_eq_aux' :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>''''\" 50)\nwhere \"A \\<sqsubseteq>'' B \\<longleftrightarrow> A \\<sqsubseteq>' B \\<or> A = {} \\<and> B \\<in> infinite_complement_partition\""], ["", "lemma set_less_eq_aux'_refl:\n  \"A \\<sqsubseteq>'' A \\<longleftrightarrow> A \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>'' A) = (A \\<in> infinite_complement_partition)", "by(auto simp add: set_less_eq_aux'_def)"], ["", "lemma set_less_eq_aux'_antisym: \"\\<lbrakk> A \\<sqsubseteq>'' B; B \\<sqsubseteq>'' A \\<rbrakk> \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>'' B; B \\<sqsubseteq>'' A\\<rbrakk>\n    \\<Longrightarrow> A = B", "by(auto simp add: set_less_eq_aux'_def intro: set_less_eq_aux_antisym del: equalityI)"], ["", "lemma set_less_eq_aux'_infinite_complement_partitionD:\n  \"A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<in> infinite_complement_partition \\<and> B \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>'' B \\<Longrightarrow>\n    A \\<in> infinite_complement_partition \\<and>\n    B \\<in> infinite_complement_partition", "by(auto simp add: set_less_eq_aux'_def intro: finite_complement_partition dest: set_less_eq_aux_infinite_complement_partitionD)"], ["", "lemma empty_set_less_eq_def [simp]: \"{} \\<sqsubseteq>'' B \\<longleftrightarrow> B \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<sqsubseteq>'' B) = (B \\<in> infinite_complement_partition)", "by(auto simp add: set_less_eq_aux'_def dest: set_less_eq_aux_infinite_complement_partitionD)"], ["", "end"], ["", "context linorder begin"], ["", "lemma set_less_eq_aux'_trans: \"\\<lbrakk> A \\<sqsubseteq>'' B; B \\<sqsubseteq>'' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>'' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>'' B; B \\<sqsubseteq>'' C\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>'' C", "by(auto simp add: set_less_eq_aux'_def del: equalityI intro: set_less_eq_aux_trans dest: set_less_eq_aux_infinite_complement_partitionD)"], ["", "lemma set_less_eq_aux'_porder: \"partial_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>'' B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partial_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>'' B}", "by(auto simp add: partial_order_on_def preorder_on_def intro!: refl_onI transI antisymI dest: set_less_eq_aux'_antisym set_less_eq_aux'_infinite_complement_partitionD simp add: set_less_eq_aux'_refl intro: set_less_eq_aux'_trans)"], ["", "end"], ["", "subsubsection \\<open>Extend @{term set_less_eq_aux'} to a total order on @{term infinite_complement_partition}\\<close>"], ["", "context ord begin"], ["", "definition set_less_eq_aux'' :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>''''''\" 50)\nwhere \"set_less_eq_aux'' =\n  (SOME sleq. \n    (linear_order_on UNIV {(a, b). a \\<le> b} \\<longrightarrow> linear_order_on infinite_complement_partition {(A, B). sleq A B}) \\<and> order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B})\""], ["", "lemma set_less_eq_aux''_spec:\n  shows \"linear_order {(a, b). a \\<le> b} \\<Longrightarrow> linear_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>''' B}\"\n  (is \"PROP ?thesis1\")\n  and \"order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). A \\<sqsubseteq>''' B}\" (is ?thesis2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n     linear_order_on infinite_complement_partition\n      {(A, B). A \\<sqsubseteq>''' B}) &&&\n    order_consistent {(A, B). A \\<sqsubseteq>'' B}\n     {(A, B). A \\<sqsubseteq>''' B}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    linear_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>''' B}\n 2. order_consistent {(A, B). A \\<sqsubseteq>'' B}\n     {(A, B). A \\<sqsubseteq>''' B}", "let ?P = \"\\<lambda>sleq. (linear_order {(a, b). a \\<le> b} \\<longrightarrow> linear_order_on infinite_complement_partition {(A, B). sleq A B}) \\<and> \n                  order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\""], ["proof (state)\ngoal (2 subgoals):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    linear_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>''' B}\n 2. order_consistent {(A, B). A \\<sqsubseteq>'' B}\n     {(A, B). A \\<sqsubseteq>''' B}", "have \"Ex ?P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "proof(cases \"linear_order {(a, b). a \\<le> b}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\n 2. \\<not> linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "case False"], ["proof (state)\nthis:\n  \\<not> linear_order {(x, y). x \\<le> y}\n\ngoal (2 subgoals):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\n 2. \\<not> linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "have \"antisym {(a, b). a \\<sqsubseteq>'' b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisym {(a, b). a \\<sqsubseteq>'' b}", "by (rule antisymI) (simp add: set_less_eq_aux'_antisym)"], ["proof (state)\nthis:\n  antisym {(a, b). a \\<sqsubseteq>'' b}\n\ngoal (2 subgoals):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\n 2. \\<not> linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "then"], ["proof (chain)\npicking this:\n  antisym {(a, b). a \\<sqsubseteq>'' b}", "show ?thesis"], ["proof (prove)\nusing this:\n  antisym {(a, b). a \\<sqsubseteq>'' b}\n\ngoal (1 subgoal):\n 1. \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "using False"], ["proof (prove)\nusing this:\n  antisym {(a, b). a \\<sqsubseteq>'' b}\n  \\<not> linear_order {(x, y). x \\<le> y}\n\ngoal (1 subgoal):\n 1. \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "by (auto intro: antisym_order_consistent_self)"], ["proof (state)\nthis:\n  \\<exists>sleq.\n     (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n      linear_order_on infinite_complement_partition\n       {(A, B). sleq A B}) \\<and>\n     order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\n\ngoal (1 subgoal):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "case True"], ["proof (state)\nthis:\n  linear_order {(x, y). x \\<le> y}\n\ngoal (1 subgoal):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "hence \"partial_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>'' B}\""], ["proof (prove)\nusing this:\n  linear_order {(x, y). x \\<le> y}\n\ngoal (1 subgoal):\n 1. partial_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>'' B}", "by(rule linorder.set_less_eq_aux'_porder[OF linear_order_imp_linorder])"], ["proof (state)\nthis:\n  partial_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>'' B}\n\ngoal (1 subgoal):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "then"], ["proof (chain)\npicking this:\n  partial_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>'' B}", "obtain s where \"linear_order_on infinite_complement_partition s\"\n      and \"order_consistent {(A, B). A \\<sqsubseteq>'' B} s\""], ["proof (prove)\nusing this:\n  partial_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>'' B}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>linear_order_on infinite_complement_partition s;\n         order_consistent {(A, B). A \\<sqsubseteq>'' B} s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(rule porder_extend_to_linorder)"], ["proof (state)\nthis:\n  linear_order_on infinite_complement_partition s\n  order_consistent {(A, B). A \\<sqsubseteq>'' B} s\n\ngoal (1 subgoal):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "thus ?thesis"], ["proof (prove)\nusing this:\n  linear_order_on infinite_complement_partition s\n  order_consistent {(A, B). A \\<sqsubseteq>'' B} s\n\ngoal (1 subgoal):\n 1. \\<exists>sleq.\n       (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n        linear_order_on infinite_complement_partition\n         {(A, B). sleq A B}) \\<and>\n       order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}", "by(auto intro: exI[where x=\"\\<lambda>A B. (A, B) \\<in> s\"])"], ["proof (state)\nthis:\n  \\<exists>sleq.\n     (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n      linear_order_on infinite_complement_partition\n       {(A, B). sleq A B}) \\<and>\n     order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>sleq.\n     (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n      linear_order_on infinite_complement_partition\n       {(A, B). sleq A B}) \\<and>\n     order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\n\ngoal (2 subgoals):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    linear_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>''' B}\n 2. order_consistent {(A, B). A \\<sqsubseteq>'' B}\n     {(A, B). A \\<sqsubseteq>''' B}", "hence \"?P (Eps ?P)\""], ["proof (prove)\nusing this:\n  \\<exists>sleq.\n     (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n      linear_order_on infinite_complement_partition\n       {(A, B). sleq A B}) \\<and>\n     order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B}\n\ngoal (1 subgoal):\n 1. (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n     linear_order_on infinite_complement_partition\n      {(A, B).\n       (SOME sleq.\n           (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n            linear_order_on infinite_complement_partition\n             {(A, B). sleq A B}) \\<and>\n           order_consistent {(A, B). A \\<sqsubseteq>'' B}\n            {(A, B). sleq A B})\n        A B}) \\<and>\n    order_consistent {(A, B). A \\<sqsubseteq>'' B}\n     {(A, B).\n      (SOME sleq.\n          (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n           linear_order_on infinite_complement_partition\n            {(A, B). sleq A B}) \\<and>\n          order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B})\n       A B}", "by(rule someI_ex)"], ["proof (state)\nthis:\n  (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n   linear_order_on infinite_complement_partition\n    {(A, B).\n     (SOME sleq.\n         (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n          linear_order_on infinite_complement_partition\n           {(A, B). sleq A B}) \\<and>\n         order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B})\n      A B}) \\<and>\n  order_consistent {(A, B). A \\<sqsubseteq>'' B}\n   {(A, B).\n    (SOME sleq.\n        (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n         linear_order_on infinite_complement_partition\n          {(A, B). sleq A B}) \\<and>\n        order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B})\n     A B}\n\ngoal (2 subgoals):\n 1. linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n    linear_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>''' B}\n 2. order_consistent {(A, B). A \\<sqsubseteq>'' B}\n     {(A, B). A \\<sqsubseteq>''' B}", "thus \"PROP ?thesis1\" ?thesis2"], ["proof (prove)\nusing this:\n  (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n   linear_order_on infinite_complement_partition\n    {(A, B).\n     (SOME sleq.\n         (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n          linear_order_on infinite_complement_partition\n           {(A, B). sleq A B}) \\<and>\n         order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B})\n      A B}) \\<and>\n  order_consistent {(A, B). A \\<sqsubseteq>'' B}\n   {(A, B).\n    (SOME sleq.\n        (linear_order {(x, y). x \\<le> y} \\<longrightarrow>\n         linear_order_on infinite_complement_partition\n          {(A, B). sleq A B}) \\<and>\n        order_consistent {(A, B). A \\<sqsubseteq>'' B} {(A, B). sleq A B})\n     A B}\n\ngoal (1 subgoal):\n 1. (linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n     linear_order_on infinite_complement_partition\n      {(A, B). A \\<sqsubseteq>''' B}) &&&\n    order_consistent {(A, B). A \\<sqsubseteq>'' B}\n     {(A, B). A \\<sqsubseteq>''' B}", "by(simp_all add: set_less_eq_aux''_def)"], ["proof (state)\nthis:\n  linear_order {(x, y). x \\<le> y} \\<Longrightarrow>\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n  order_consistent {(A, B). A \\<sqsubseteq>'' B}\n   {(A, B). A \\<sqsubseteq>''' B}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context linorder begin"], ["", "lemma set_less_eq_aux''_linear_order:\n  \"linear_order_on infinite_complement_partition {(A, B). A \\<sqsubseteq>''' B}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_order_on infinite_complement_partition\n     {(A, B). A \\<sqsubseteq>''' B}", "by(rule set_less_eq_aux''_spec)(rule linear_order)"], ["", "lemma set_less_eq_aux''_refl [iff]: \"A \\<sqsubseteq>''' A \\<longleftrightarrow> A \\<in> infinite_complement_partition\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>''' A) = (A \\<in> infinite_complement_partition)", "using set_less_eq_aux''_linear_order"], ["proof (prove)\nusing this:\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>''' A) = (A \\<in> infinite_complement_partition)", "by(auto simp add: linear_order_on_def partial_order_on_def preorder_on_def dest: refl_onD refl_onD1)"], ["", "lemma set_less_eq_aux'_into_set_less_eq_aux'':\n  assumes \"A \\<sqsubseteq>'' B\" \n  shows \"A \\<sqsubseteq>''' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>''' B", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubseteq>''' B \\<Longrightarrow> False", "assume nleq: \"\\<not> ?thesis\""], ["proof (state)\nthis:\n  \\<not> A \\<sqsubseteq>''' B\n\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubseteq>''' B \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> A \\<sqsubseteq>''' B\n\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubseteq>''' B \\<Longrightarrow> False", "from assms"], ["proof (chain)\npicking this:\n  A \\<sqsubseteq>'' B", "have A: \"A \\<in> infinite_complement_partition\" \n    and B: \"B \\<in> infinite_complement_partition\""], ["proof (prove)\nusing this:\n  A \\<sqsubseteq>'' B\n\ngoal (1 subgoal):\n 1. A \\<in> infinite_complement_partition &&&\n    B \\<in> infinite_complement_partition", "by(auto dest: set_less_eq_aux'_infinite_complement_partitionD)"], ["proof (state)\nthis:\n  A \\<in> infinite_complement_partition\n  B \\<in> infinite_complement_partition\n\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubseteq>''' B \\<Longrightarrow> False", "with set_less_eq_aux''_linear_order"], ["proof (chain)\npicking this:\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n  A \\<in> infinite_complement_partition\n  B \\<in> infinite_complement_partition", "have \"A \\<sqsubseteq>''' B \\<or> A = B \\<or> B \\<sqsubseteq>''' A\""], ["proof (prove)\nusing this:\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n  A \\<in> infinite_complement_partition\n  B \\<in> infinite_complement_partition\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>''' B \\<or> A = B \\<or> B \\<sqsubseteq>''' A", "by(auto simp add: linear_order_on_def dest: total_onD)"], ["proof (state)\nthis:\n  A \\<sqsubseteq>''' B \\<or> A = B \\<or> B \\<sqsubseteq>''' A\n\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubseteq>''' B \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> A \\<sqsubseteq>''' B\n  A \\<sqsubseteq>''' B \\<or> A = B \\<or> B \\<sqsubseteq>''' A", "have \"B \\<sqsubseteq>''' A\""], ["proof (prove)\nusing this:\n  \\<not> A \\<sqsubseteq>''' B\n  A \\<sqsubseteq>''' B \\<or> A = B \\<or> B \\<sqsubseteq>''' A\n\ngoal (1 subgoal):\n 1. B \\<sqsubseteq>''' A", "using B"], ["proof (prove)\nusing this:\n  \\<not> A \\<sqsubseteq>''' B\n  A \\<sqsubseteq>''' B \\<or> A = B \\<or> B \\<sqsubseteq>''' A\n  B \\<in> infinite_complement_partition\n\ngoal (1 subgoal):\n 1. B \\<sqsubseteq>''' A", "by auto"], ["proof (state)\nthis:\n  B \\<sqsubseteq>''' A\n\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubseteq>''' B \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  A \\<sqsubseteq>'' B\n  B \\<sqsubseteq>''' A", "have \"A = B\""], ["proof (prove)\nusing this:\n  A \\<sqsubseteq>'' B\n  B \\<sqsubseteq>''' A\n\ngoal (1 subgoal):\n 1. A = B", "using set_less_eq_aux''_spec(2)"], ["proof (prove)\nusing this:\n  A \\<sqsubseteq>'' B\n  B \\<sqsubseteq>''' A\n  order_consistent {(A, B). A \\<sqsubseteq>'' B}\n   {(A, B). A \\<sqsubseteq>''' B}\n\ngoal (1 subgoal):\n 1. A = B", "by(simp add: order_consistent_def)"], ["proof (state)\nthis:\n  A = B\n\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubseteq>''' B \\<Longrightarrow> False", "with A nleq"], ["proof (chain)\npicking this:\n  A \\<in> infinite_complement_partition\n  \\<not> A \\<sqsubseteq>''' B\n  A = B", "show False"], ["proof (prove)\nusing this:\n  A \\<in> infinite_complement_partition\n  \\<not> A \\<sqsubseteq>''' B\n  A = B\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_set_less_eq_aux''_finite:\n  assumes \"finite A\" and \"finite B\"\n  shows \"A \\<sqsubseteq>''' B \\<longleftrightarrow> A \\<sqsubseteq>'' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq>''' B) = (A \\<sqsubseteq>'' B)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>''' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>''' B", "assume \"A \\<sqsubseteq>''' B\""], ["proof (state)\nthis:\n  A \\<sqsubseteq>''' B\n\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>''' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>''' B", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B", "have \"A \\<sqsubseteq>' B \\<or> B \\<sqsubseteq>' A\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>' B \\<or> B \\<sqsubseteq>' A", "by(rule set_less_eq_aux_finite_total2)"], ["proof (state)\nthis:\n  A \\<sqsubseteq>' B \\<or> B \\<sqsubseteq>' A\n\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>''' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>''' B", "hence \"A \\<sqsubseteq>'' B \\<or> B \\<sqsubseteq>'' A\""], ["proof (prove)\nusing this:\n  A \\<sqsubseteq>' B \\<or> B \\<sqsubseteq>' A\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>'' B \\<or> B \\<sqsubseteq>'' A", "by(auto simp add: set_less_eq_aux'_def)"], ["proof (state)\nthis:\n  A \\<sqsubseteq>'' B \\<or> B \\<sqsubseteq>'' A\n\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>''' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>''' B", "thus \"A \\<sqsubseteq>'' B\""], ["proof (prove)\nusing this:\n  A \\<sqsubseteq>'' B \\<or> B \\<sqsubseteq>'' A\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>'' B", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. B \\<sqsubseteq>'' A \\<Longrightarrow> A \\<sqsubseteq>'' B", "assume \"B \\<sqsubseteq>'' A\""], ["proof (state)\nthis:\n  B \\<sqsubseteq>'' A\n\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. B \\<sqsubseteq>'' A \\<Longrightarrow> A \\<sqsubseteq>'' B", "hence \"B \\<sqsubseteq>''' A\""], ["proof (prove)\nusing this:\n  B \\<sqsubseteq>'' A\n\ngoal (1 subgoal):\n 1. B \\<sqsubseteq>''' A", "by(rule set_less_eq_aux'_into_set_less_eq_aux'')"], ["proof (state)\nthis:\n  B \\<sqsubseteq>''' A\n\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. B \\<sqsubseteq>'' A \\<Longrightarrow> A \\<sqsubseteq>'' B", "with \\<open>A \\<sqsubseteq>''' B\\<close> set_less_eq_aux''_linear_order"], ["proof (chain)\npicking this:\n  A \\<sqsubseteq>''' B\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n  B \\<sqsubseteq>''' A", "have \"A = B\""], ["proof (prove)\nusing this:\n  A \\<sqsubseteq>''' B\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n  B \\<sqsubseteq>''' A\n\ngoal (1 subgoal):\n 1. A = B", "by(auto simp add: linear_order_on_def partial_order_on_def dest: antisymD)"], ["proof (state)\nthis:\n  A = B\n\ngoal (2 subgoals):\n 1. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>'' B\n 2. B \\<sqsubseteq>'' A \\<Longrightarrow> A \\<sqsubseteq>'' B", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = B\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>'' B", "using assms"], ["proof (prove)\nusing this:\n  A = B\n  finite A\n  finite B\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>'' B", "by(simp add: finite_complement_partition set_less_eq_aux'_def)"], ["proof (state)\nthis:\n  A \\<sqsubseteq>'' B\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>'' B", "qed"], ["proof (state)\nthis:\n  A \\<sqsubseteq>'' B\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>'' B \\<Longrightarrow> A \\<sqsubseteq>''' B", "qed(rule set_less_eq_aux'_into_set_less_eq_aux'')"], ["", "lemma set_less_eq_aux''_finite:\n  \"finite (UNIV :: 'a set) \\<Longrightarrow> set_less_eq_aux'' = set_less_eq_aux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV \\<Longrightarrow> (\\<sqsubseteq>''') = (\\<sqsubseteq>')", "by(auto simp add: fun_eq_iff finite_set_less_eq_aux''_finite set_less_eq_aux'_def finite_subset[OF subset_UNIV])"], ["", "lemma set_less_eq_aux''_antisym:\n  \"\\<lbrakk> A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' A; \n     A \\<in> infinite_complement_partition; B \\<in> infinite_complement_partition \\<rbrakk>\n  \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' A;\n     A \\<in> infinite_complement_partition;\n     B \\<in> infinite_complement_partition\\<rbrakk>\n    \\<Longrightarrow> A = B", "using set_less_eq_aux''_linear_order"], ["proof (prove)\nusing this:\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' A;\n     A \\<in> infinite_complement_partition;\n     B \\<in> infinite_complement_partition\\<rbrakk>\n    \\<Longrightarrow> A = B", "by(auto simp add: linear_order_on_def partial_order_on_def dest: antisymD del: equalityI)"], ["", "lemma set_less_eq_aux''_trans: \"\\<lbrakk> A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq>''' C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' C\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>''' C", "using set_less_eq_aux''_linear_order"], ["proof (prove)\nusing this:\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq>''' B; B \\<sqsubseteq>''' C\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>''' C", "by(auto simp add: linear_order_on_def partial_order_on_def preorder_on_def dest: transD)"], ["", "lemma set_less_eq_aux''_total:\n  \"\\<lbrakk> A \\<in> infinite_complement_partition; B \\<in> infinite_complement_partition \\<rbrakk>\n  \\<Longrightarrow> A \\<sqsubseteq>''' B \\<or> B \\<sqsubseteq>''' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> infinite_complement_partition;\n     B \\<in> infinite_complement_partition\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>''' B \\<or> B \\<sqsubseteq>''' A", "using set_less_eq_aux''_linear_order"], ["proof (prove)\nusing this:\n  linear_order_on infinite_complement_partition\n   {(A, B). A \\<sqsubseteq>''' B}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> infinite_complement_partition;\n     B \\<in> infinite_complement_partition\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq>''' B \\<or> B \\<sqsubseteq>''' A", "by(auto simp add: linear_order_on_def dest: total_onD)"], ["", "end"], ["", "subsubsection \\<open>Extend @{term set_less_eq_aux''} to cofinite sets\\<close>"], ["", "context ord begin"], ["", "definition set_less_eq :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 50)\nwhere \n  \"A \\<sqsubseteq> B \\<longleftrightarrow> \n  (if A \\<in> infinite_complement_partition then A \\<sqsubseteq>''' B \\<or> B \\<notin> infinite_complement_partition\n   else B \\<notin> infinite_complement_partition \\<and> - B \\<sqsubseteq>''' - A)\""], ["", "definition set_less :: \"'a set \\<Rightarrow> 'a set \\<Rightarrow> bool\" (infix \"\\<sqsubset>\" 50)\nwhere \"A \\<sqsubset> B \\<longleftrightarrow> A \\<sqsubseteq> B \\<and> \\<not> B \\<sqsubseteq> A\""], ["", "lemma set_less_eq_def2:\n  \"A \\<sqsubseteq> B \\<longleftrightarrow>\n  (if finite (UNIV :: 'a set) then A \\<sqsubseteq>''' B \n   else if A \\<in> infinite_complement_partition then A \\<sqsubseteq>''' B \\<or> B \\<notin> infinite_complement_partition\n   else B \\<notin> infinite_complement_partition \\<and> - B \\<sqsubseteq>''' - A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq> B) =\n    (if finite UNIV then A \\<sqsubseteq>''' B\n     else if A \\<in> infinite_complement_partition\n          then A \\<sqsubseteq>''' B \\<or>\n               B \\<notin> infinite_complement_partition\n          else B \\<notin> infinite_complement_partition \\<and>\n               - B \\<sqsubseteq>''' - A)", "by(simp add: set_less_eq_def)"], ["", "end"], ["", "context linorder begin"], ["", "lemma set_less_eq_refl [iff]: \"A \\<sqsubseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubseteq> A", "by(auto simp add: set_less_eq_def2 not_in_complement_partition)"], ["", "lemma set_less_eq_antisym: \"\\<lbrakk> A \\<sqsubseteq> B; B \\<sqsubseteq> A \\<rbrakk> \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq> B; B \\<sqsubseteq> A\\<rbrakk>\n    \\<Longrightarrow> A = B", "by(auto simp add: set_less_eq_def2 set_less_eq_aux''_finite not_in_complement_partition not_in_complement_partition_False del: equalityI split: if_split_asm dest: set_less_eq_aux_antisym set_less_eq_aux''_antisym)"], ["", "lemma set_less_eq_trans: \"\\<lbrakk> A \\<sqsubseteq> B; B \\<sqsubseteq> C \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<sqsubseteq> B; B \\<sqsubseteq> C\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq> C", "by(auto simp add: set_less_eq_def split: if_split_asm intro: set_less_eq_aux''_trans)"], ["", "lemma set_less_eq_total: \"A \\<sqsubseteq> B \\<or> B \\<sqsubseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubseteq> B \\<or> B \\<sqsubseteq> A", "by(auto simp add: set_less_eq_def2 set_less_eq_aux''_finite not_in_complement_partition not_in_complement_partition_False intro: set_less_eq_aux_finite_total2 finite_subset[OF subset_UNIV] del: disjCI dest: set_less_eq_aux''_total)"], ["", "lemma set_less_eq_linorder: \"class.linorder (\\<sqsubseteq>) (\\<sqsubset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (\\<sqsubseteq>) (\\<sqsubset>)", "by(unfold_locales)(auto simp add: set_less_def set_less_eq_antisym set_less_eq_total intro: set_less_eq_trans)"], ["", "lemma set_less_eq_conv_set_less: \"set_less_eq A B \\<longleftrightarrow> A = B \\<or> set_less A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq> B) = (A = B \\<or> A \\<sqsubset> B)", "by(auto simp add: set_less_def del: equalityI dest: set_less_eq_antisym)"], ["", "lemma Compl_set_less_eq_Compl: \"- A \\<sqsubseteq> - B \\<longleftrightarrow> B \\<sqsubseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- A \\<sqsubseteq> - B) = (B \\<sqsubseteq> A)", "by(auto simp add: set_less_eq_def2 not_in_complement_partition_False not_in_complement_partition set_less_eq_aux''_finite Compl_set_less_eq_aux_Compl)"], ["", "lemma Compl_set_less_Compl: \"- A \\<sqsubset> - B \\<longleftrightarrow> B \\<sqsubset> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- A \\<sqsubset> - B) = (B \\<sqsubset> A)", "by(simp add: set_less_def Compl_set_less_eq_Compl)"], ["", "lemma set_less_eq_finite_iff: \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq> B \\<longleftrightarrow> A \\<sqsubseteq>' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B\\<rbrakk>\n    \\<Longrightarrow> (A \\<sqsubseteq> B) = (A \\<sqsubseteq>' B)", "by(auto simp add: set_less_eq_def finite_complement_partition set_less_eq_aux'_def finite_set_less_eq_aux''_finite)"], ["", "lemma set_less_finite_iff: \"\\<lbrakk> finite A; finite B \\<rbrakk> \\<Longrightarrow> A \\<sqsubset> B \\<longleftrightarrow> A \\<sqsubset>' B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B\\<rbrakk>\n    \\<Longrightarrow> (A \\<sqsubset> B) = (A \\<sqsubset>' B)", "by(simp add: set_less_def set_less_aux_conv_set_less_eq_aux set_less_eq_finite_iff)"], ["", "lemma infinite_set_less_eq_Complement:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> A \\<sqsubseteq> - B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubseteq> - B", "by(simp add: set_less_eq_def finite_complement_partition not_in_complement_partition)"], ["", "lemma infinite_set_less_Complement:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> A \\<sqsubset> - B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n    \\<Longrightarrow> A \\<sqsubset> - B", "by(auto simp add: set_less_def dest: set_less_eq_antisym intro: infinite_set_less_eq_Complement)"], ["", "lemma infinite_Complement_set_less_eq:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> \\<not> - A \\<sqsubseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n    \\<Longrightarrow> \\<not> - A \\<sqsubseteq> B", "using infinite_set_less_eq_Complement[of A B] Compl_set_less_eq_Compl[of A \"- B\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n  \\<Longrightarrow> A \\<sqsubseteq> - B\n  (- A \\<sqsubseteq> - (- B)) = (- B \\<sqsubseteq> A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n    \\<Longrightarrow> \\<not> - A \\<sqsubseteq> B", "by(auto dest: set_less_eq_antisym)"], ["", "lemma infinite_Complement_set_less:\n  \"\\<lbrakk> finite A; finite B; \\<not> finite (UNIV :: 'a set) \\<rbrakk> \\<Longrightarrow> \\<not> - A \\<sqsubset> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n    \\<Longrightarrow> \\<not> - A \\<sqsubset> B", "using infinite_Complement_set_less_eq[of A B]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n  \\<Longrightarrow> \\<not> - A \\<sqsubseteq> B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; infinite UNIV\\<rbrakk>\n    \\<Longrightarrow> \\<not> - A \\<sqsubset> B", "by(simp add: set_less_def)"], ["", "lemma empty_set_less_eq [iff]: \"{} \\<sqsubseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<sqsubseteq> A", "by(auto simp add: set_less_eq_def finite_complement_partition intro: set_less_eq_aux'_into_set_less_eq_aux'')"], ["", "lemma set_less_eq_empty [iff]: \"A \\<sqsubseteq> {} \\<longleftrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubseteq> {}) = (A = {})", "by (metis empty_set_less_eq set_less_eq_antisym)"], ["", "lemma empty_set_less_iff [iff]: \"{} \\<sqsubset> A \\<longleftrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<sqsubset> A) = (A \\<noteq> {})", "by(simp add: set_less_def)"], ["", "lemma not_set_less_empty [simp]: \"\\<not> A \\<sqsubset> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A \\<sqsubset> {}", "by(simp add: set_less_def)"], ["", "lemma set_less_eq_UNIV [iff]: \"A \\<sqsubseteq> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubseteq> UNIV", "using Compl_set_less_eq_Compl[of \"- A\" \"{}\"]"], ["proof (prove)\nusing this:\n  (- (- A) \\<sqsubseteq> - {}) = ({} \\<sqsubseteq> - A)\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq> UNIV", "by simp"], ["", "lemma UNIV_set_less_eq [iff]: \"UNIV \\<sqsubseteq> A \\<longleftrightarrow> A = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (UNIV \\<sqsubseteq> A) = (A = UNIV)", "using Compl_set_less_eq_Compl[of \"{}\" \"- A\"]"], ["proof (prove)\nusing this:\n  (- {} \\<sqsubseteq> - (- A)) = (- A \\<sqsubseteq> {})\n\ngoal (1 subgoal):\n 1. (UNIV \\<sqsubseteq> A) = (A = UNIV)", "by(simp add: Compl_eq_empty_iff)"], ["", "lemma set_less_UNIV_iff [iff]: \"A \\<sqsubset> UNIV \\<longleftrightarrow> A \\<noteq> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<sqsubset> UNIV) = (A \\<noteq> UNIV)", "by(simp add: set_less_def)"], ["", "lemma not_UNIV_set_less [simp]: \"\\<not> UNIV \\<sqsubset> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> UNIV \\<sqsubset> A", "by(simp add: set_less_def)"], ["", "end"], ["", "subsection \\<open>Implementation based on sorted lists\\<close>"], ["", "type_synonym 'a proper_interval = \"'a option \\<Rightarrow> 'a option \\<Rightarrow> bool\""], ["", "class proper_intrvl = ord +\n  fixes proper_interval :: \"'a proper_interval\""], ["", "class proper_interval = proper_intrvl +\n  assumes proper_interval_simps:\n  \"proper_interval None None = True\"\n  \"proper_interval None (Some y) = (\\<exists>z. z < y)\"\n  \"proper_interval (Some x) None = (\\<exists>z. x < z)\"\n  \"proper_interval (Some x) (Some y) = (\\<exists>z. x < z \\<and> z < y)\""], ["", "context proper_intrvl begin"], ["", "function set_less_eq_aux_Compl :: \"'a option \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"set_less_eq_aux_Compl ao [] ys \\<longleftrightarrow> True\"\n| \"set_less_eq_aux_Compl ao xs [] \\<longleftrightarrow> True\"\n| \"set_less_eq_aux_Compl ao (x # xs) (y # ys) \\<longleftrightarrow>\n  (if x < y then proper_interval ao (Some x) \\<or> set_less_eq_aux_Compl (Some x) xs (y # ys)\n   else if y < x then proper_interval ao (Some y) \\<or> set_less_eq_aux_Compl (Some y) (x # xs) ys\n   else proper_interval ao (Some y))\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>ao ys. x = (ao, [], ys) \\<Longrightarrow> P;\n        \\<And>ao xs. x = (ao, xs, []) \\<Longrightarrow> P;\n        \\<And>ao xa xs y ys.\n           x = (ao, xa # xs, y # ys) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>ao ys aoa ysa.\n       (ao, [], ys) = (aoa, [], ysa) \\<Longrightarrow> True = True\n 3. \\<And>ao ys aoa xs.\n       (ao, [], ys) = (aoa, xs, []) \\<Longrightarrow> True = True\n 4. \\<And>ao ys aoa x xs y ysa.\n       (ao, [], ys) = (aoa, x # xs, y # ysa) \\<Longrightarrow>\n       True =\n       (if x < y\n        then proper_interval aoa (Some x) \\<or>\n             set_less_eq_aux_Compl_sumC (Some x, xs, y # ysa)\n        else if y < x\n             then proper_interval aoa (Some y) \\<or>\n                  set_less_eq_aux_Compl_sumC (Some y, x # xs, ysa)\n             else proper_interval aoa (Some y))\n 5. \\<And>ao xs aoa xsa.\n       (ao, xs, []) = (aoa, xsa, []) \\<Longrightarrow> True = True\n 6. \\<And>ao xs aoa x xsa y ys.\n       (ao, xs, []) = (aoa, x # xsa, y # ys) \\<Longrightarrow>\n       True =\n       (if x < y\n        then proper_interval aoa (Some x) \\<or>\n             set_less_eq_aux_Compl_sumC (Some x, xsa, y # ys)\n        else if y < x\n             then proper_interval aoa (Some y) \\<or>\n                  set_less_eq_aux_Compl_sumC (Some y, x # xsa, ys)\n             else proper_interval aoa (Some y))\n 7. \\<And>ao x xs y ys aoa xa xsa ya ysa.\n       (ao, x # xs, y # ys) = (aoa, xa # xsa, ya # ysa) \\<Longrightarrow>\n       (if x < y\n        then proper_interval ao (Some x) \\<or>\n             set_less_eq_aux_Compl_sumC (Some x, xs, y # ys)\n        else if y < x\n             then proper_interval ao (Some y) \\<or>\n                  set_less_eq_aux_Compl_sumC (Some y, x # xs, ys)\n             else proper_interval ao (Some y)) =\n       (if xa < ya\n        then proper_interval aoa (Some xa) \\<or>\n             set_less_eq_aux_Compl_sumC (Some xa, xsa, ya # ysa)\n        else if ya < xa\n             then proper_interval aoa (Some ya) \\<or>\n                  set_less_eq_aux_Compl_sumC (Some ya, xa # xsa, ysa)\n             else proper_interval aoa (Some ya))", "by(pat_completeness) simp_all"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. set_less_eq_aux_Compl_dom x", "by(lexicographic_order)"], ["", "fun Compl_set_less_eq_aux :: \"'a option \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"Compl_set_less_eq_aux ao [] [] \\<longleftrightarrow> \\<not> proper_interval ao None\"\n| \"Compl_set_less_eq_aux ao [] (y # ys) \\<longleftrightarrow> \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_eq_aux (Some y) [] ys\"\n| \"Compl_set_less_eq_aux ao (x # xs) [] \\<longleftrightarrow> \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_eq_aux (Some x) xs []\"\n| \"Compl_set_less_eq_aux ao (x # xs) (y # ys) \\<longleftrightarrow>\n  (if x < y then \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_eq_aux (Some x) xs (y # ys)\n   else if y < x then \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_eq_aux (Some y) (x # xs) ys\n   else \\<not> proper_interval ao (Some y))\""], ["", "fun set_less_aux_Compl :: \"'a option \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"set_less_aux_Compl ao [] [] \\<longleftrightarrow> proper_interval ao None\"\n| \"set_less_aux_Compl ao [] (y # ys) \\<longleftrightarrow> proper_interval ao (Some y) \\<or> set_less_aux_Compl (Some y) [] ys\"\n| \"set_less_aux_Compl ao (x # xs) [] \\<longleftrightarrow> proper_interval ao (Some x) \\<or> set_less_aux_Compl (Some x) xs []\"\n| \"set_less_aux_Compl ao (x # xs) (y # ys) \\<longleftrightarrow>\n  (if x < y then proper_interval ao (Some x) \\<or> set_less_aux_Compl (Some x) xs (y # ys)\n   else if y < x then proper_interval ao (Some y) \\<or> set_less_aux_Compl (Some y) (x # xs) ys\n   else proper_interval ao (Some y))\""], ["", "function Compl_set_less_aux :: \"'a option \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"Compl_set_less_aux ao [] ys \\<longleftrightarrow> False\"\n| \"Compl_set_less_aux ao xs [] \\<longleftrightarrow> False\"\n| \"Compl_set_less_aux ao (x # xs) (y # ys) \\<longleftrightarrow>\n  (if x < y then \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_aux (Some x) xs (y # ys)\n   else if y < x then \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_aux (Some y) (x # xs) ys\n   else \\<not> proper_interval ao (Some y))\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>ao ys. x = (ao, [], ys) \\<Longrightarrow> P;\n        \\<And>ao xs. x = (ao, xs, []) \\<Longrightarrow> P;\n        \\<And>ao xa xs y ys.\n           x = (ao, xa # xs, y # ys) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>ao ys aoa ysa.\n       (ao, [], ys) = (aoa, [], ysa) \\<Longrightarrow> False = False\n 3. \\<And>ao ys aoa xs.\n       (ao, [], ys) = (aoa, xs, []) \\<Longrightarrow> False = False\n 4. \\<And>ao ys aoa x xs y ysa.\n       (ao, [], ys) = (aoa, x # xs, y # ysa) \\<Longrightarrow>\n       False =\n       (if x < y\n        then \\<not> proper_interval aoa (Some x) \\<and>\n             Compl_set_less_aux_sumC (Some x, xs, y # ysa)\n        else if y < x\n             then \\<not> proper_interval aoa (Some y) \\<and>\n                  Compl_set_less_aux_sumC (Some y, x # xs, ysa)\n             else \\<not> proper_interval aoa (Some y))\n 5. \\<And>ao xs aoa xsa.\n       (ao, xs, []) = (aoa, xsa, []) \\<Longrightarrow> False = False\n 6. \\<And>ao xs aoa x xsa y ys.\n       (ao, xs, []) = (aoa, x # xsa, y # ys) \\<Longrightarrow>\n       False =\n       (if x < y\n        then \\<not> proper_interval aoa (Some x) \\<and>\n             Compl_set_less_aux_sumC (Some x, xsa, y # ys)\n        else if y < x\n             then \\<not> proper_interval aoa (Some y) \\<and>\n                  Compl_set_less_aux_sumC (Some y, x # xsa, ys)\n             else \\<not> proper_interval aoa (Some y))\n 7. \\<And>ao x xs y ys aoa xa xsa ya ysa.\n       (ao, x # xs, y # ys) = (aoa, xa # xsa, ya # ysa) \\<Longrightarrow>\n       (if x < y\n        then \\<not> proper_interval ao (Some x) \\<and>\n             Compl_set_less_aux_sumC (Some x, xs, y # ys)\n        else if y < x\n             then \\<not> proper_interval ao (Some y) \\<and>\n                  Compl_set_less_aux_sumC (Some y, x # xs, ys)\n             else \\<not> proper_interval ao (Some y)) =\n       (if xa < ya\n        then \\<not> proper_interval aoa (Some xa) \\<and>\n             Compl_set_less_aux_sumC (Some xa, xsa, ya # ysa)\n        else if ya < xa\n             then \\<not> proper_interval aoa (Some ya) \\<and>\n                  Compl_set_less_aux_sumC (Some ya, xa # xsa, ysa)\n             else \\<not> proper_interval aoa (Some ya))", "by pat_completeness simp_all"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. Compl_set_less_aux_dom x", "by lexicographic_order"], ["", "end"], ["", "lemmas [code] =\n  proper_intrvl.set_less_eq_aux_Compl.simps\n  proper_intrvl.set_less_aux_Compl.simps\n  proper_intrvl.Compl_set_less_eq_aux.simps\n  proper_intrvl.Compl_set_less_aux.simps"], ["", "class linorder_proper_interval = linorder + proper_interval \nbegin"], ["", "theorem assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\"\n  and ys: \"sorted ys\" \"distinct ys\"\n  shows set_less_eq_aux_Compl2_conv_set_less_eq_aux_Compl:\n  \"set xs \\<sqsubseteq>' - set ys \\<longleftrightarrow> set_less_eq_aux_Compl None xs ys\" (is ?Compl2)\n  and Compl1_set_less_eq_aux_conv_Compl_set_less_eq_aux:\n  \"- set xs \\<sqsubseteq>' set ys \\<longleftrightarrow> Compl_set_less_eq_aux None xs ys\" (is ?Compl1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys &&&\n    (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "note fin' [simp] = finite_subset[OF subset_UNIV fin]"], ["proof (state)\nthis:\n  finite ?A\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "define above where \"above = case_option UNIV (Collect \\<circ> less)\""], ["proof (state)\nthis:\n  above = case_option UNIV (Collect \\<circ> (<))\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "have above_simps [simp]: \"above None = UNIV\" \"\\<And>x. above (Some x) = {y. x < y}\"\n    and above_upclosed: \"\\<And>x y ao. \\<lbrakk> x \\<in> above ao; x < y \\<rbrakk> \\<Longrightarrow> y \\<in> above ao\"\n    and proper_interval_Some2: \"\\<And>x ao. proper_interval ao (Some x) \\<longleftrightarrow> (\\<exists>z\\<in>above ao. z < x)\"\n    and proper_interval_None2: \"\\<And>ao. proper_interval ao None \\<longleftrightarrow> above ao \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((above None = UNIV &&& (\\<And>x. above (Some x) = {y. x < y})) &&&\n     (\\<And>x y ao.\n         \\<lbrakk>x \\<in> above ao; x < y\\<rbrakk>\n         \\<Longrightarrow> y \\<in> above ao)) &&&\n    (\\<And>x ao.\n        proper_interval ao (Some x) = (\\<exists>z\\<in>above ao. z < x)) &&&\n    (\\<And>ao. proper_interval ao None = (above ao \\<noteq> {}))", "by(simp_all add: proper_interval_simps above_def split: option.splits)"], ["proof (state)\nthis:\n  above None = UNIV\n  above (Some ?x) = {y. ?x < y}\n  \\<lbrakk>?x \\<in> above ?ao; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> above ?ao\n  proper_interval ?ao (Some ?x) = (\\<exists>z\\<in>above ?ao. z < ?x)\n  proper_interval ?ao None = (above ?ao \\<noteq> {})\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "{"], ["proof (state)\nthis:\n  above None = UNIV\n  above (Some ?x) = {y. ?x < y}\n  \\<lbrakk>?x \\<in> above ?ao; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> above ?ao\n  proper_interval ?ao (Some ?x) = (\\<exists>z\\<in>above ?ao. z < ?x)\n  proper_interval ?ao None = (above ?ao \\<noteq> {})\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "fix ao x A B"], ["proof (state)\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "assume ex: \"proper_interval ao (Some x)\"\n      and A: \"\\<forall>a \\<in> A. x \\<le> a\"\n      and B: \"\\<forall>b \\<in> B. x \\<le> b\""], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n  \\<forall>a\\<in>A. x \\<le> a\n  \\<forall>b\\<in>B. x \\<le> b\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "from ex"], ["proof (chain)\npicking this:\n  proper_interval ao (Some x)", "obtain z where z_ao: \"z \\<in> above ao\" and z: \"z < x\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < x\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "with A"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>A. x \\<le> a\n  z \\<in> above ao\n  z < x", "have A_eq: \"A \\<inter> above ao = A\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. x \\<le> a\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao = A", "by(auto simp add: above_upclosed)"], ["proof (state)\nthis:\n  A \\<inter> above ao = A\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "from z_ao z B"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z < x\n  \\<forall>b\\<in>B. x \\<le> b", "have B_eq: \"B \\<inter> above ao = B\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  \\<forall>b\\<in>B. x \\<le> b\n\ngoal (1 subgoal):\n 1. B \\<inter> above ao = B", "by(auto simp add: above_upclosed)"], ["proof (state)\nthis:\n  B \\<inter> above ao = B\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "define w where \"w = Min (above ao)\""], ["proof (state)\nthis:\n  w = Min (above ao)\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "with z_ao"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  w = Min (above ao)", "have \"w \\<le> z\" \"\\<forall>z \\<in> above ao. w \\<le> z\" \"w \\<in> above ao\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  w = Min (above ao)\n\ngoal (1 subgoal):\n 1. w \\<le> z &&& \\<forall>z\\<in>above ao. w \\<le> z &&& w \\<in> above ao", "by(auto simp add: Min_le_iff intro: Min_in)"], ["proof (state)\nthis:\n  w \\<le> z\n  \\<forall>z\\<in>above ao. w \\<le> z\n  w \\<in> above ao\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "hence \"A \\<inter> above ao \\<sqsubset>' (- B) \\<inter> above ao\" (is \"?lhs \\<sqsubset>' ?rhs\")"], ["proof (prove)\nusing this:\n  w \\<le> z\n  \\<forall>z\\<in>above ao. w \\<le> z\n  w \\<in> above ao\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<sqsubset>' - B \\<inter> above ao", "using A B z"], ["proof (prove)\nusing this:\n  w \\<le> z\n  \\<forall>z\\<in>above ao. w \\<le> z\n  w \\<in> above ao\n  \\<forall>a\\<in>A. x \\<le> a\n  \\<forall>b\\<in>B. x \\<le> b\n  z < x\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<sqsubset>' - B \\<inter> above ao", "by(auto simp add: set_less_aux_def intro!: bexI[where x=\"w\"])"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<sqsubset>' - B \\<inter> above ao\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "hence \"A \\<sqsubseteq>' ?rhs\""], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<sqsubset>' - B \\<inter> above ao\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>' - B \\<inter> above ao", "unfolding A_eq"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' - B \\<inter> above ao\n\ngoal (1 subgoal):\n 1. A \\<sqsubseteq>' - B \\<inter> above ao", "by(simp add: set_less_eq_aux_def)"], ["proof (state)\nthis:\n  A \\<sqsubseteq>' - B \\<inter> above ao\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "moreover"], ["proof (state)\nthis:\n  A \\<sqsubseteq>' - B \\<inter> above ao\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "from z_ao z A B"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z < x\n  \\<forall>a\\<in>A. x \\<le> a\n  \\<forall>b\\<in>B. x \\<le> b", "have \"z \\<in> - A \\<inter> above ao\" \"z \\<notin> B\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  \\<forall>a\\<in>A. x \\<le> a\n  \\<forall>b\\<in>B. x \\<le> b\n\ngoal (1 subgoal):\n 1. z \\<in> - A \\<inter> above ao &&& z \\<notin> B", "by auto"], ["proof (state)\nthis:\n  z \\<in> - A \\<inter> above ao\n  z \\<notin> B\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "hence neq: \"- A \\<inter> above ao \\<noteq> B \\<inter> above ao\""], ["proof (prove)\nusing this:\n  z \\<in> - A \\<inter> above ao\n  z \\<notin> B\n\ngoal (1 subgoal):\n 1. - A \\<inter> above ao \\<noteq> B \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  - A \\<inter> above ao \\<noteq> B \\<inter> above ao\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "have \"\\<not> - A \\<inter> above ao \\<sqsubset>' B \\<inter> above ao\" (is \"\\<not> ?lhs' \\<sqsubset>' ?rhs'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> - A \\<inter> above ao \\<sqsubset>' B \\<inter> above ao", "using A B z z_ao"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. x \\<le> a\n  \\<forall>b\\<in>B. x \\<le> b\n  z < x\n  z \\<in> above ao\n\ngoal (1 subgoal):\n 1. \\<not> - A \\<inter> above ao \\<sqsubset>' B \\<inter> above ao", "by(force simp add: set_less_aux_def not_less dest: bspec[where x=z])"], ["proof (state)\nthis:\n  \\<not> - A \\<inter> above ao \\<sqsubset>' B \\<inter> above ao\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "with neq"], ["proof (chain)\npicking this:\n  - A \\<inter> above ao \\<noteq> B \\<inter> above ao\n  \\<not> - A \\<inter> above ao \\<sqsubset>' B \\<inter> above ao", "have \"\\<not> ?lhs' \\<sqsubseteq>' B\""], ["proof (prove)\nusing this:\n  - A \\<inter> above ao \\<noteq> B \\<inter> above ao\n  \\<not> - A \\<inter> above ao \\<sqsubset>' B \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> - A \\<inter> above ao \\<sqsubseteq>' B", "unfolding B_eq"], ["proof (prove)\nusing this:\n  - A \\<inter> above ao \\<noteq> B\n  \\<not> - A \\<inter> above ao \\<sqsubset>' B\n\ngoal (1 subgoal):\n 1. \\<not> - A \\<inter> above ao \\<sqsubseteq>' B", "by(auto simp add: set_less_eq_aux_def)"], ["proof (state)\nthis:\n  \\<not> - A \\<inter> above ao \\<sqsubseteq>' B\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "moreover"], ["proof (state)\nthis:\n  \\<not> - A \\<inter> above ao \\<sqsubseteq>' B\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "note calculation"], ["proof (state)\nthis:\n  A \\<sqsubseteq>' - B \\<inter> above ao\n  \\<not> - A \\<inter> above ao \\<sqsubseteq>' B\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "}"], ["proof (state)\nthis:\n  \\<lbrakk>proper_interval ?ao2 (Some ?x2); \\<forall>a\\<in>?A2. ?x2 \\<le> a;\n   \\<forall>b\\<in>?B2. ?x2 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> ?A2 \\<sqsubseteq>' - ?B2 \\<inter> above ?ao2\n  \\<lbrakk>proper_interval ?ao2 (Some ?x2); \\<forall>a\\<in>?A2. ?x2 \\<le> a;\n   \\<forall>b\\<in>?B2. ?x2 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> \\<not> - ?A2 \\<inter> above ?ao2 \\<sqsubseteq>' ?B2\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "note proper_interval_set_less_eqI = this(1)\n    and proper_interval_not_set_less_eq_auxI = this(2)"], ["proof (state)\nthis:\n  \\<lbrakk>proper_interval ?ao2 (Some ?x2); \\<forall>a\\<in>?A2. ?x2 \\<le> a;\n   \\<forall>b\\<in>?B2. ?x2 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> ?A2 \\<sqsubseteq>' - ?B2 \\<inter> above ?ao2\n  \\<lbrakk>proper_interval ?ao2 (Some ?x2); \\<forall>a\\<in>?A2. ?x2 \\<le> a;\n   \\<forall>b\\<in>?B2. ?x2 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> \\<not> - ?A2 \\<inter> above ?ao2 \\<sqsubseteq>' ?B2\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "{"], ["proof (state)\nthis:\n  \\<lbrakk>proper_interval ?ao2 (Some ?x2); \\<forall>a\\<in>?A2. ?x2 \\<le> a;\n   \\<forall>b\\<in>?B2. ?x2 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> ?A2 \\<sqsubseteq>' - ?B2 \\<inter> above ?ao2\n  \\<lbrakk>proper_interval ?ao2 (Some ?x2); \\<forall>a\\<in>?A2. ?x2 \\<le> a;\n   \\<forall>b\\<in>?B2. ?x2 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> \\<not> - ?A2 \\<inter> above ?ao2 \\<sqsubseteq>' ?B2\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "fix ao"], ["proof (state)\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "assume \"set xs \\<union> set ys \\<subseteq> above ao\""], ["proof (state)\nthis:\n  set xs \\<union> set ys \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "with xs ys"], ["proof (chain)\npicking this:\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n  set xs \\<union> set ys \\<subseteq> above ao", "have \"set_less_eq_aux_Compl ao xs ys \\<longleftrightarrow> set xs \\<sqsubseteq>' (- set ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n  set xs \\<union> set ys \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao xs ys =\n    (set xs \\<sqsubseteq>' - set ys \\<inter> above ao)", "proof(induction ao xs ys rule: set_less_eq_aux_Compl.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ao ys.\n       \\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n        set [] \\<union> set ys \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao [] ys =\n                         (set [] \\<sqsubseteq>' - set ys \\<inter> above ao)\n 2. \\<And>ao xs.\n       \\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n        set xs \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao xs [] =\n                         (set xs \\<sqsubseteq>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "case 1"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  sorted ys_\n  distinct ys_\n  set [] \\<union> set ys_ \\<subseteq> above ao_\n\ngoal (3 subgoals):\n 1. \\<And>ao ys.\n       \\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n        set [] \\<union> set ys \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao [] ys =\n                         (set [] \\<sqsubseteq>' - set ys \\<inter> above ao)\n 2. \\<And>ao xs.\n       \\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n        set xs \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao xs [] =\n                         (set xs \\<sqsubseteq>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "thus ?case"], ["proof (prove)\nusing this:\n  sorted []\n  distinct []\n  sorted ys_\n  distinct ys_\n  set [] \\<union> set ys_ \\<subseteq> above ao_\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao_ [] ys_ =\n    (set [] \\<sqsubseteq>' - set ys_ \\<inter> above ao_)", "by simp"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao_ [] ys_ =\n  (set [] \\<sqsubseteq>' - set ys_ \\<inter> above ao_)\n\ngoal (2 subgoals):\n 1. \\<And>ao xs.\n       \\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n        set xs \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao xs [] =\n                         (set xs \\<sqsubseteq>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ao xs.\n       \\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n        set xs \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao xs [] =\n                         (set xs \\<sqsubseteq>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "case 2"], ["proof (state)\nthis:\n  sorted xs_\n  distinct xs_\n  sorted []\n  distinct []\n  set xs_ \\<union> set [] \\<subseteq> above ao_\n\ngoal (2 subgoals):\n 1. \\<And>ao xs.\n       \\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n        set xs \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao xs [] =\n                         (set xs \\<sqsubseteq>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "thus ?case"], ["proof (prove)\nusing this:\n  sorted xs_\n  distinct xs_\n  sorted []\n  distinct []\n  set xs_ \\<union> set [] \\<subseteq> above ao_\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao_ xs_ [] =\n    (set xs_ \\<sqsubseteq>' - set [] \\<inter> above ao_)", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao_ xs_ [] =\n  (set xs_ \\<sqsubseteq>' - set [] \\<inter> above ao_)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "case (3 ao x xs y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n   distinct (y # ys);\n   set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n  \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs (y # ys) =\n                    (set xs \\<sqsubseteq>'\n                     - set (y # ys) \\<inter> above (Some x))\n  \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n   sorted ys; distinct ys;\n   set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n  \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                    (set (x # xs) \\<sqsubseteq>'\n                     - set ys \\<inter> above (Some y))\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "note ao = \\<open>set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "hence x_ao: \"x \\<in> above ao\" and y_ao: \"y \\<in> above ao\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> above ao &&& y \\<in> above ao", "by simp_all"], ["proof (state)\nthis:\n  x \\<in> above ao\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "note yys = \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close>"], ["proof (state)\nthis:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "hence ys: \"sorted ys\" \"distinct ys\" and y_Min: \"\\<forall>y' \\<in> set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. (sorted ys &&& distinct ys) &&& \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "note xxs = \\<open>sorted (x # xs)\\<close> \\<open>distinct (x # xs)\\<close>"], ["proof (state)\nthis:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "hence xs: \"sorted xs\" \"distinct xs\" and x_Min: \"\\<forall>x' \\<in> set xs. x < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. (sorted xs &&& distinct xs) &&& \\<forall>x'\\<in>set xs. x < x'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted xs\n  distinct xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "let ?lhs = \"set (x # xs)\" and ?rhs = \"- set (y # ys) \\<inter> above ao\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> set_less_eq_aux_Compl (Some x) xs\n                                   (y # ys) =\n                                  (set xs \\<sqsubseteq>'\n                                   - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> set_less_eq_aux_Compl (Some y) (x # xs) ys =\n                          (set (x # xs) \\<sqsubseteq>'\n                           - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n                         (set (x # xs) \\<sqsubseteq>'\n                          - set (y # ys) \\<inter> above ao)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "proof(cases \"x < y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  x < y\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "proof(cases \"proper_interval ao (Some x)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "hence \"?lhs \\<sqsubseteq>' ?rhs\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "using x_Min y_Min \\<open>x < y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n  x < y\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "by(auto intro!: proper_interval_set_less_eqI)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "with True"], ["proof (chain)\npicking this:\n  proper_interval ao (Some x)\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "using \\<open>x < y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  x < y\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<union> set (y # ys) \\<subseteq> above (Some x)", "using True x_Min y_Min"], ["proof (prove)\nusing this:\n  x < y\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set xs \\<union> set (y # ys) \\<subseteq> above (Some x)", "by auto"], ["proof (state)\nthis:\n  set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "with True xs yys"], ["proof (chain)\npicking this:\n  x < y\n  sorted xs\n  distinct xs\n  sorted (y # ys)\n  distinct (y # ys)\n  set xs \\<union> set (y # ys) \\<subseteq> above (Some x)", "have IH: \"set_less_eq_aux_Compl (Some x) xs (y # ys) = \n            (set xs \\<sqsubseteq>' - set (y # ys) \\<inter> above (Some x))\""], ["proof (prove)\nusing this:\n  x < y\n  sorted xs\n  distinct xs\n  sorted (y # ys)\n  distinct (y # ys)\n  set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl (Some x) xs (y # ys) =\n    (set xs \\<sqsubseteq>' - set (y # ys) \\<inter> above (Some x))", "by(rule \"3.IH\")"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl (Some x) xs (y # ys) =\n  (set xs \\<sqsubseteq>' - set (y # ys) \\<inter> above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "from True y_Min x_ao"], ["proof (chain)\npicking this:\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'\n  x \\<in> above ao", "have \"x \\<in> - set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> - set (y # ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  x \\<in> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "hence \"?rhs \\<noteq> {}\""], ["proof (prove)\nusing this:\n  x \\<in> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"Min ?lhs = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x", "using x_Min x_ao"], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs. x < x'\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (set (x # xs)) = x\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  Min (set (x # xs)) = x\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"Min ?rhs = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (- set (y # ys) \\<inter> above ao) = x", "using \\<open>x < y\\<close> y_Min x_ao False"], ["proof (prove)\nusing this:\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'\n  x \\<in> above ao\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. Min (- set (y # ys) \\<inter> above ao) = x", "by(auto intro!: Min_eqI simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  Min (- set (y # ys) \\<inter> above ao) = x\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  Min (- set (y # ys) \\<inter> above ao) = x\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"set xs = set xs - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs = set xs - {x}", "using ao x_Min"], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set xs = set xs - {x}", "by auto"], ["proof (state)\nthis:\n  set xs = set xs - {x}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  set xs = set xs - {x}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"- set (y # ys) \\<inter> above (Some x) = - set (y # ys) \\<inter> above ao - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above (Some x) =\n    - set (y # ys) \\<inter> above ao - {x}", "using False x_ao"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above (Some x) =\n    - set (y # ys) \\<inter> above ao - {x}", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  - set (y # ys) \\<inter> above ao \\<noteq> {}\n  Min (set (x # xs)) = x\n  Min (- set (y # ys) \\<inter> above ao) = x\n  set xs = set xs - {x}\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}", "show ?thesis"], ["proof (prove)\nusing this:\n  - set (y # ys) \\<inter> above ao \\<noteq> {}\n  Min (set (x # xs)) = x\n  Min (- set (y # ys) \\<inter> above ao) = x\n  set xs = set xs - {x}\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "using True False IH"], ["proof (prove)\nusing this:\n  - set (y # ys) \\<inter> above ao \\<noteq> {}\n  Min (set (x # xs)) = x\n  Min (- set (y # ys) \\<inter> above ao) = x\n  set xs = set xs - {x}\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}\n  x < y\n  \\<not> proper_interval ao (Some x)\n  set_less_eq_aux_Compl (Some x) xs (y # ys) =\n  (set xs \\<sqsubseteq>' - set (y # ys) \\<inter> above (Some x))\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "by(simp del: set_simps)(subst (2) set_less_eq_aux_rec, simp_all add: x_ao)"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "proof(cases \"y < x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  y < x\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "proof(cases \"proper_interval ao (Some y)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "hence \"?lhs \\<sqsubseteq>' ?rhs\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "using x_Min y_Min \\<open>\\<not> x < y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "by(auto intro!: proper_interval_set_less_eqI)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "with True"], ["proof (chain)\npicking this:\n  proper_interval ao (Some y)\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "using \\<open>\\<not> x < y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<union> set ys \\<subseteq> above (Some y)", "using \\<open>y < x\\<close> x_Min y_Min"], ["proof (prove)\nusing this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<union> set ys \\<subseteq> above (Some y)", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "with \\<open>\\<not> x < y\\<close> \\<open>y < x\\<close> xxs ys"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  y < x\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted ys\n  distinct ys\n  set (x # xs) \\<union> set ys \\<subseteq> above (Some y)", "have IH: \"set_less_eq_aux_Compl (Some y) (x # xs) ys = \n              (set (x # xs) \\<sqsubseteq>' - set ys \\<inter> above (Some y))\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  y < x\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted ys\n  distinct ys\n  set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl (Some y) (x # xs) ys =\n    (set (x # xs) \\<sqsubseteq>' - set ys \\<inter> above (Some y))", "by(rule \"3.IH\")"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl (Some y) (x # xs) ys =\n  (set (x # xs) \\<sqsubseteq>' - set ys \\<inter> above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl (Some y) (x # xs) ys =\n  (set (x # xs) \\<sqsubseteq>' - set ys \\<inter> above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"- set ys \\<inter> above (Some y) = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao", "using y_ao False"], ["proof (prove)\nusing this:\n  y \\<in> above ao\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao", "by(auto intro: above_upclosed simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  set_less_eq_aux_Compl (Some y) (x # xs) ys =\n  (set (x # xs) \\<sqsubseteq>' - set ys \\<inter> above (Some y))\n  - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  set_less_eq_aux_Compl (Some y) (x # xs) ys =\n  (set (x # xs) \\<sqsubseteq>' - set ys \\<inter> above (Some y))\n  - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "using \\<open>\\<not> x < y\\<close> True False"], ["proof (prove)\nusing this:\n  set_less_eq_aux_Compl (Some y) (x # xs) ys =\n  (set (x # xs) \\<sqsubseteq>' - set ys \\<inter> above (Some y))\n  - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao\n  \\<not> x < y\n  y < x\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "with \\<open>\\<not> x < y\\<close>"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  \\<not> y < x", "have \"x = y\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "{"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "assume \"proper_interval ao (Some y)\""], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "hence \"?lhs \\<sqsubseteq>' ?rhs\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "using x_Min y_Min \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n  x = y\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "by(auto intro!: proper_interval_set_less_eqI)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "}"], ["proof (state)\nthis:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "{"], ["proof (state)\nthis:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "assume \"?lhs \\<sqsubseteq>' ?rhs\""], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "have \"?lhs \\<noteq> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<noteq> - set (y # ys) \\<inter> above ao", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. set (x # xs) = - set (y # ys) \\<inter> above ao \\<Longrightarrow> False", "assume eq: \"?lhs = ?rhs\""], ["proof (state)\nthis:\n  set (x # xs) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) = - set (y # ys) \\<inter> above ao \\<Longrightarrow> False", "have \"x \\<in> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (x # xs)", "using x_ao"], ["proof (prove)\nusing this:\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> set (x # xs)", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. set (x # xs) = - set (y # ys) \\<inter> above ao \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  x \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. set (x # xs) = - set (y # ys) \\<inter> above ao \\<Longrightarrow> False", "note eq"], ["proof (state)\nthis:\n  set (x # xs) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) = - set (y # ys) \\<inter> above ao \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  set (x # xs) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) = - set (y # ys) \\<inter> above ao \\<Longrightarrow> False", "note \\<open>x = y\\<close>"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. set (x # xs) = - set (y # ys) \\<inter> above ao \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  y \\<in> - set (y # ys) \\<inter> above ao", "show False"], ["proof (prove)\nusing this:\n  y \\<in> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (x # xs) \\<noteq> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  set (x # xs) \\<noteq> - set (y # ys) \\<inter> above ao", "obtain z where \"z \\<in> above ao\" \"z < y\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  set (x # xs) \\<noteq> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>x = y\\<close> y_ao"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  set (x # xs) \\<noteq> - set (y # ys) \\<inter> above ao\n  x = y\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: set_less_eq_aux_def set_less_aux_def not_le dest!: bspec[where x=y])"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "hence \"proper_interval ao (Some y)\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < y\n\ngoal (1 subgoal):\n 1. proper_interval ao (Some y)", "by(auto simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "}"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubseteq>'\n  - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  set (x # xs) \\<sqsubseteq>'\n  - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n  proper_interval ao (Some y)", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  set (x # xs) \\<sqsubseteq>'\n  - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "using \\<open>x = y\\<close> \\<open>\\<not> x < y\\<close> \\<open>\\<not> y < x\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n  set (x # xs) \\<sqsubseteq>'\n  - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n  proper_interval ao (Some y)\n  x = y\n  \\<not> x < y\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n    (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)", "by auto"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao (x # xs) (y # ys) =\n  (set (x # xs) \\<sqsubseteq>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_less_eq_aux_Compl ao xs ys =\n  (set xs \\<sqsubseteq>' - set ys \\<inter> above ao)\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "}"], ["proof (state)\nthis:\n  set xs \\<union> set ys \\<subseteq> above ?ao2 \\<Longrightarrow>\n  set_less_eq_aux_Compl ?ao2 xs ys =\n  (set xs \\<sqsubseteq>' - set ys \\<inter> above ?ao2)\n\ngoal (2 subgoals):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n 2. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "from this[of None]"], ["proof (chain)\npicking this:\n  set xs \\<union> set ys \\<subseteq> above None \\<Longrightarrow>\n  set_less_eq_aux_Compl None xs ys =\n  (set xs \\<sqsubseteq>' - set ys \\<inter> above None)", "show ?Compl2"], ["proof (prove)\nusing this:\n  set xs \\<union> set ys \\<subseteq> above None \\<Longrightarrow>\n  set_less_eq_aux_Compl None xs ys =\n  (set xs \\<sqsubseteq>' - set ys \\<inter> above None)\n\ngoal (1 subgoal):\n 1. (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys", "by simp"], ["proof (state)\nthis:\n  (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n\ngoal (1 subgoal):\n 1. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "{"], ["proof (state)\nthis:\n  (set xs \\<sqsubseteq>' - set ys) = set_less_eq_aux_Compl None xs ys\n\ngoal (1 subgoal):\n 1. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "fix ao"], ["proof (state)\ngoal (1 subgoal):\n 1. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "assume \"set xs \\<union> set ys \\<subseteq> above ao\""], ["proof (state)\nthis:\n  set xs \\<union> set ys \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "with xs ys"], ["proof (chain)\npicking this:\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n  set xs \\<union> set ys \\<subseteq> above ao", "have \"Compl_set_less_eq_aux ao xs ys \\<longleftrightarrow> (- set xs) \\<inter> above ao \\<sqsubseteq>' set ys\""], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n  set xs \\<union> set ys \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao xs ys =\n    (- set xs \\<inter> above ao \\<sqsubseteq>' set ys)", "proof(induction ao xs ys rule: Compl_set_less_eq_aux.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>ao.\n       \\<lbrakk>sorted []; distinct []; sorted []; distinct [];\n        set [] \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] [] =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>' set [])\n 2. \\<And>ao y ys.\n       \\<lbrakk>\\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n                 set [] \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some y) [] ys =\n                                  (- set [] \\<inter>\n                                   above (Some y) \\<sqsubseteq>'\n                                   set ys);\n        sorted []; distinct []; sorted (y # ys); distinct (y # ys);\n        set [] \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] (y # ys) =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))\n 3. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 4. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "case 1"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  sorted []\n  distinct []\n  set [] \\<union> set [] \\<subseteq> above ao_\n\ngoal (4 subgoals):\n 1. \\<And>ao.\n       \\<lbrakk>sorted []; distinct []; sorted []; distinct [];\n        set [] \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] [] =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>' set [])\n 2. \\<And>ao y ys.\n       \\<lbrakk>\\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n                 set [] \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some y) [] ys =\n                                  (- set [] \\<inter>\n                                   above (Some y) \\<sqsubseteq>'\n                                   set ys);\n        sorted []; distinct []; sorted (y # ys); distinct (y # ys);\n        set [] \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] (y # ys) =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))\n 3. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 4. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "thus ?case"], ["proof (prove)\nusing this:\n  sorted []\n  distinct []\n  sorted []\n  distinct []\n  set [] \\<union> set [] \\<subseteq> above ao_\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao_ [] [] =\n    (- set [] \\<inter> above ao_ \\<sqsubseteq>' set [])", "by(simp add: proper_interval_None2)"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao_ [] [] =\n  (- set [] \\<inter> above ao_ \\<sqsubseteq>' set [])\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>\\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n                 set [] \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some y) [] ys =\n                                  (- set [] \\<inter>\n                                   above (Some y) \\<sqsubseteq>'\n                                   set ys);\n        sorted []; distinct []; sorted (y # ys); distinct (y # ys);\n        set [] \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] (y # ys) =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))\n 2. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>\\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n                 set [] \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some y) [] ys =\n                                  (- set [] \\<inter>\n                                   above (Some y) \\<sqsubseteq>'\n                                   set ys);\n        sorted []; distinct []; sorted (y # ys); distinct (y # ys);\n        set [] \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] (y # ys) =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))\n 2. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "case (2 ao y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n   set [] \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n  \\<Longrightarrow> Compl_set_less_eq_aux (Some y) [] ys =\n                    (- set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n  sorted []\n  distinct []\n  sorted (y # ys)\n  distinct (y # ys)\n  set [] \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>\\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n                 set [] \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some y) [] ys =\n                                  (- set [] \\<inter>\n                                   above (Some y) \\<sqsubseteq>'\n                                   set ys);\n        sorted []; distinct []; sorted (y # ys); distinct (y # ys);\n        set [] \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] (y # ys) =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))\n 2. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "from \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close>"], ["proof (chain)\npicking this:\n  sorted (y # ys)\n  distinct (y # ys)", "have ys: \"sorted ys\" \"distinct ys\" and y_Min: \"\\<forall>y' \\<in> set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. (sorted ys &&& distinct ys) &&& \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>\\<lbrakk>sorted []; distinct []; sorted ys; distinct ys;\n                 set [] \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some y) [] ys =\n                                  (- set [] \\<inter>\n                                   above (Some y) \\<sqsubseteq>'\n                                   set ys);\n        sorted []; distinct []; sorted (y # ys); distinct (y # ys);\n        set [] \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao [] (y # ys) =\n                         (- set [] \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))\n 2. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "proof(cases \"proper_interval ao (Some y)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "hence \"\\<not> - set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys)\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> - set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "using y_Min"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. \\<not> - set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "by -(erule proper_interval_not_set_less_eq_auxI, auto)"], ["proof (state)\nthis:\n  \\<not> - set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> - set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "using True"], ["proof (prove)\nusing this:\n  \\<not> - set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "by simp"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao [] (y # ys) =\n  (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "note ao = \\<open>set [] \\<union> set (y # ys) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  set [] \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "hence y_ao: \"y \\<in> above ao\""], ["proof (prove)\nusing this:\n  set [] \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. y \\<in> above ao", "by simp"], ["proof (state)\nthis:\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "from ao y_Min"], ["proof (chain)\npicking this:\n  set [] \\<union> set (y # ys) \\<subseteq> above ao\n  \\<forall>y'\\<in>set ys. y < y'", "have \"set [] \\<union> set ys \\<subseteq> above (Some y)\""], ["proof (prove)\nusing this:\n  set [] \\<union> set (y # ys) \\<subseteq> above ao\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set [] \\<union> set ys \\<subseteq> above (Some y)", "by auto"], ["proof (state)\nthis:\n  set [] \\<union> set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "with \\<open>sorted []\\<close> \\<open>distinct []\\<close> ys"], ["proof (chain)\npicking this:\n  sorted []\n  distinct []\n  sorted ys\n  distinct ys\n  set [] \\<union> set ys \\<subseteq> above (Some y)", "have \"Compl_set_less_eq_aux (Some y) [] ys \\<longleftrightarrow> - set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys\""], ["proof (prove)\nusing this:\n  sorted []\n  distinct []\n  sorted ys\n  distinct ys\n  set [] \\<union> set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux (Some y) [] ys =\n    (- set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys)", "by(rule \"2.IH\")"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some y) [] ys =\n  (- set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some y) [] ys =\n  (- set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"above ao \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. above ao \\<noteq> {}", "using y_ao"], ["proof (prove)\nusing this:\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"Min (above ao) = y\" \n          and \"Min (set (y # ys)) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (above ao) = y &&& Min (set (y # ys)) = y", "using y_ao False ao"], ["proof (prove)\nusing this:\n  y \\<in> above ao\n  \\<not> proper_interval ao (Some y)\n  set [] \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. Min (above ao) = y &&& Min (set (y # ys)) = y", "by(auto intro!: Min_eqI simp add: proper_interval_Some2 not_less)"], ["proof (state)\nthis:\n  Min (above ao) = y\n  Min (set (y # ys)) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  Min (above ao) = y\n  Min (set (y # ys)) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"above ao - {y} = above (Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. above ao - {y} = above (Some y)", "using False y_ao"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some y)\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. above ao - {y} = above (Some y)", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  above ao - {y} = above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  above ao - {y} = above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"set ys - {y} = set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ys - {y} = set ys", "using y_Min y_ao"], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. set ys - {y} = set ys", "by(auto)"], ["proof (state)\nthis:\n  set ys - {y} = set ys\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  Compl_set_less_eq_aux (Some y) [] ys =\n  (- set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n  above ao \\<noteq> {}\n  Min (above ao) = y\n  Min (set (y # ys)) = y\n  above ao - {y} = above (Some y)\n  set ys - {y} = set ys", "show ?thesis"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some y) [] ys =\n  (- set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n  above ao \\<noteq> {}\n  Min (above ao) = y\n  Min (set (y # ys)) = y\n  above ao - {y} = above (Some y)\n  set ys - {y} = set ys\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "using False y_ao"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some y) [] ys =\n  (- set [] \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n  above ao \\<noteq> {}\n  Min (above ao) = y\n  Min (set (y # ys)) = y\n  above ao - {y} = above (Some y)\n  set ys - {y} = set ys\n  \\<not> proper_interval ao (Some y)\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao [] (y # ys) =\n    (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "by(simp)(subst (2) set_less_eq_aux_rec, simp_all)"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao [] (y # ys) =\n  (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao [] (y # ys) =\n  (- set [] \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "case (3 ao x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n   set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n  \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                    (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set [])\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted []\n  distinct []\n  set (x # xs) \\<union> set [] \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "from \\<open>sorted (x # xs)\\<close> \\<open>distinct (x # xs)\\<close>"], ["proof (chain)\npicking this:\n  sorted (x # xs)\n  distinct (x # xs)", "have xs: \"sorted xs\" \"distinct xs\" and x_Min: \"\\<forall>x'\\<in>set xs. x < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. (sorted xs &&& distinct xs) &&& \\<forall>x'\\<in>set xs. x < x'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted xs\n  distinct xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>\\<lbrakk>sorted xs; distinct xs; sorted []; distinct [];\n                 set xs \\<union> set [] \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs [] =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set []);\n        sorted (x # xs); distinct (x # xs); sorted []; distinct [];\n        set (x # xs) \\<union> set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) [] =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set [])\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "proof(cases \"proper_interval ao (Some x)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "then"], ["proof (chain)\npicking this:\n  proper_interval ao (Some x)", "obtain z where \"z \\<in> above ao\" \"z < x\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < x\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "hence \"z \\<in> - set (x # xs) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. z \\<in> - set (x # xs) \\<inter> above ao", "using x_Min"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. z \\<in> - set (x # xs) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  z \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "thus ?thesis"], ["proof (prove)\nusing this:\n  z \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "using True"], ["proof (prove)\nusing this:\n  z \\<in> - set (x # xs) \\<inter> above ao\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "by auto"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) [] =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "note ao = \\<open>set (x # xs) \\<union> set [] \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  set (x # xs) \\<union> set [] \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "hence x_ao: \"x \\<in> above ao\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set [] \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> above ao", "by simp"], ["proof (state)\nthis:\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "from ao"], ["proof (chain)\npicking this:\n  set (x # xs) \\<union> set [] \\<subseteq> above ao", "have \"set xs \\<union> set [] \\<subseteq> above (Some x)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set [] \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set xs \\<union> set [] \\<subseteq> above (Some x)", "using x_Min"], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set [] \\<subseteq> above ao\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set xs \\<union> set [] \\<subseteq> above (Some x)", "by auto"], ["proof (state)\nthis:\n  set xs \\<union> set [] \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "with xs \\<open>sorted []\\<close> \\<open>distinct []\\<close>"], ["proof (chain)\npicking this:\n  sorted xs\n  distinct xs\n  sorted []\n  distinct []\n  set xs \\<union> set [] \\<subseteq> above (Some x)", "have \"Compl_set_less_eq_aux (Some x) xs [] \\<longleftrightarrow>\n          - set xs \\<inter> above (Some x) \\<sqsubseteq>' set []\""], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  sorted []\n  distinct []\n  set xs \\<union> set [] \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux (Some x) xs [] =\n    (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set [])", "by(rule \"3.IH\")"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some x) xs [] =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set [])\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "moreover"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some x) xs [] =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set [])\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "have \"- set (x # xs) \\<inter> above ao = - set xs \\<inter> above (Some x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao = - set xs \\<inter> above (Some x)", "using False x_ao"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao = - set xs \\<inter> above (Some x)", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao = - set xs \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "ultimately"], ["proof (chain)\npicking this:\n  Compl_set_less_eq_aux (Some x) xs [] =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set [])\n  - set (x # xs) \\<inter> above ao = - set xs \\<inter> above (Some x)", "show ?thesis"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some x) xs [] =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set [])\n  - set (x # xs) \\<inter> above ao = - set xs \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "using False"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some x) xs [] =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set [])\n  - set (x # xs) \\<inter> above ao = - set xs \\<inter> above (Some x)\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) [] =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])", "by simp"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) [] =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) [] =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set [])\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "case (4 ao x xs y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n   distinct (y # ys);\n   set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n  \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs (y # ys) =\n                    (- set xs \\<inter> above (Some x) \\<sqsubseteq>'\n                     set (y # ys))\n  \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n   sorted ys; distinct ys;\n   set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n  \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                    (- set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>'\n                     set ys)\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "note ao = \\<open>set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "hence x_ao: \"x \\<in> above ao\" and y_ao: \"y \\<in> above ao\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> above ao &&& y \\<in> above ao", "by simp_all"], ["proof (state)\nthis:\n  x \\<in> above ao\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "note xxs = \\<open>sorted (x # xs)\\<close> \\<open>distinct (x # xs)\\<close>"], ["proof (state)\nthis:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "hence xs: \"sorted xs\" \"distinct xs\" and x_Min: \"\\<forall>x'\\<in>set xs. x < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. (sorted xs &&& distinct xs) &&& \\<forall>x'\\<in>set xs. x < x'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted xs\n  distinct xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "note yys = \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close>"], ["proof (state)\nthis:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "hence ys: \"sorted ys\" \"distinct ys\" and y_Min: \"\\<forall>y'\\<in>set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. (sorted ys &&& distinct ys) &&& \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "let ?lhs = \"- set (x # xs) \\<inter> above ao\" and ?rhs = \"set (y # ys)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs; sorted (y # ys);\n                 distinct (y # ys);\n                 set xs \\<union> set (y # ys)\n                 \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> Compl_set_less_eq_aux (Some x) xs\n                                   (y # ys) =\n                                  (- set xs \\<inter>\n                                   above (Some x) \\<sqsubseteq>'\n                                   set (y # ys));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         sorted ys; distinct ys;\n         set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> Compl_set_less_eq_aux (Some y) (x # xs) ys =\n                          (- set (x # xs) \\<inter>\n                           above (Some y) \\<sqsubseteq>'\n                           set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys);\n        set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n                         (- set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n                          set (y # ys))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "proof(cases \"x < y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> x < y \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case True"], ["proof (state)\nthis:\n  x < y\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> x < y \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "proof(cases \"proper_interval ao (Some x)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "hence \"\\<not> ?lhs \\<sqsubseteq>' ?rhs\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "using x_Min y_Min \\<open>x < y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n  x < y\n\ngoal (1 subgoal):\n 1. \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "by -(erule proper_interval_not_set_less_eq_auxI, auto)"], ["proof (state)\nthis:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "using True \\<open>x < y\\<close>"], ["proof (prove)\nusing this:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n  proper_interval ao (Some x)\n  x < y\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "by simp"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<union> set (y # ys) \\<subseteq> above (Some x)", "using ao x_Min y_Min True"], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n  x < y\n\ngoal (1 subgoal):\n 1. set xs \\<union> set (y # ys) \\<subseteq> above (Some x)", "by auto"], ["proof (state)\nthis:\n  set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "with True xs yys"], ["proof (chain)\npicking this:\n  x < y\n  sorted xs\n  distinct xs\n  sorted (y # ys)\n  distinct (y # ys)\n  set xs \\<union> set (y # ys) \\<subseteq> above (Some x)", "have \"Compl_set_less_eq_aux (Some x) xs (y # ys) \\<longleftrightarrow> \n            - set xs \\<inter> above (Some x) \\<sqsubseteq>' set (y # ys)\""], ["proof (prove)\nusing this:\n  x < y\n  sorted xs\n  distinct xs\n  sorted (y # ys)\n  distinct (y # ys)\n  set xs \\<union> set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux (Some x) xs (y # ys) =\n    (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set (y # ys))", "by(rule \"4.IH\")"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some x) xs (y # ys) =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some x) xs (y # ys) =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"- set xs \\<inter> above (Some x) = ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao", "using x_ao False"], ["proof (prove)\nusing this:\n  x \\<in> above ao\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao", "by(auto intro: above_upclosed simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  Compl_set_less_eq_aux (Some x) xs (y # ys) =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set (y # ys))\n  - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some x) xs (y # ys) =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set (y # ys))\n  - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "using False True"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some x) xs (y # ys) =\n  (- set xs \\<inter> above (Some x) \\<sqsubseteq>' set (y # ys))\n  - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao\n  \\<not> proper_interval ao (Some x)\n  x < y\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "by simp"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "proof(cases \"y < x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case True"], ["proof (state)\nthis:\n  y < x\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "proof(cases \"proper_interval ao (Some y)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "hence \"\\<not> ?lhs \\<sqsubseteq>' ?rhs\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "using x_Min y_Min \\<open>y < x\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n  y < x\n\ngoal (1 subgoal):\n 1. \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "by -(erule proper_interval_not_set_less_eq_auxI, auto)"], ["proof (state)\nthis:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "using True \\<open>y < x\\<close> \\<open>\\<not> x < y\\<close>"], ["proof (prove)\nusing this:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n  proper_interval ao (Some y)\n  y < x\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "by simp"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "from ao True x_Min y_Min"], ["proof (chain)\npicking this:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'", "have \"set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<union> set ys \\<subseteq> above (Some y)", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "with \\<open>\\<not> x < y\\<close> True xxs ys"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  y < x\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted ys\n  distinct ys\n  set (x # xs) \\<union> set ys \\<subseteq> above (Some y)", "have \"Compl_set_less_eq_aux (Some y) (x # xs) ys \\<longleftrightarrow>\n              - set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>' set ys\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  y < x\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted ys\n  distinct ys\n  set (x # xs) \\<union> set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux (Some y) (x # xs) ys =\n    (- set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>' set ys)", "by(rule \"4.IH\")"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some y) (x # xs) ys =\n  (- set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux (Some y) (x # xs) ys =\n  (- set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"y \\<in> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> - set (x # xs) \\<inter> above ao", "using True x_Min y_ao"], ["proof (prove)\nusing this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. y \\<in> - set (x # xs) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  y \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "hence \"?lhs \\<noteq> {}\""], ["proof (prove)\nusing this:\n  y \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"Min ?lhs = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (- set (x # xs) \\<inter> above ao) = y", "using True False x_Min y_ao"], ["proof (prove)\nusing this:\n  y < x\n  \\<not> proper_interval ao (Some y)\n  \\<forall>x'\\<in>set xs. x < x'\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. Min (- set (x # xs) \\<inter> above ao) = y", "by(auto intro!: Min_eqI simp add: not_le not_less proper_interval_Some2)"], ["proof (state)\nthis:\n  Min (- set (x # xs) \\<inter> above ao) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  Min (- set (x # xs) \\<inter> above ao) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"Min ?rhs = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (y # ys)) = y", "using y_Min y_ao"], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. Min (set (y # ys)) = y", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (set (y # ys)) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  Min (set (y # ys)) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"- set (x # xs) \\<inter> above (Some y) = ?lhs - {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above (Some y) =\n    - set (x # xs) \\<inter> above ao - {y}", "using y_ao False"], ["proof (prove)\nusing this:\n  y \\<in> above ao\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above (Some y) =\n    - set (x # xs) \\<inter> above ao - {y}", "by(auto intro: above_upclosed simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above (Some y) =\n  - set (x # xs) \\<inter> above ao - {y}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above (Some y) =\n  - set (x # xs) \\<inter> above ao - {y}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"set ys = set ys - {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ys = set ys - {y}", "using y_ao y_Min"], ["proof (prove)\nusing this:\n  y \\<in> above ao\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set ys = set ys - {y}", "by(auto intro: above_upclosed)"], ["proof (state)\nthis:\n  set ys = set ys - {y}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  Compl_set_less_eq_aux (Some y) (x # xs) ys =\n  (- set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n  Min (- set (x # xs) \\<inter> above ao) = y\n  Min (set (y # ys)) = y\n  - set (x # xs) \\<inter> above (Some y) =\n  - set (x # xs) \\<inter> above ao - {y}\n  set ys = set ys - {y}", "show ?thesis"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some y) (x # xs) ys =\n  (- set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n  Min (- set (x # xs) \\<inter> above ao) = y\n  Min (set (y # ys)) = y\n  - set (x # xs) \\<inter> above (Some y) =\n  - set (x # xs) \\<inter> above ao - {y}\n  set ys = set ys - {y}\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "using True False \\<open>\\<not> x < y\\<close> y_ao"], ["proof (prove)\nusing this:\n  Compl_set_less_eq_aux (Some y) (x # xs) ys =\n  (- set (x # xs) \\<inter> above (Some y) \\<sqsubseteq>' set ys)\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n  Min (- set (x # xs) \\<inter> above ao) = y\n  Min (set (y # ys)) = y\n  - set (x # xs) \\<inter> above (Some y) =\n  - set (x # xs) \\<inter> above ao - {y}\n  set ys = set ys - {y}\n  y < x\n  \\<not> proper_interval ao (Some y)\n  \\<not> x < y\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "by(simp)(subst (2) set_less_eq_aux_rec, simp_all)"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "with \\<open>\\<not> x < y\\<close>"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  \\<not> y < x", "have \"x = y\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "{"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "assume \"proper_interval ao (Some y)\""], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "hence \"\\<not> ?lhs \\<sqsubseteq>' ?rhs\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "using x_Min y_Min \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n  \\<forall>x'\\<in>set xs. x < x'\n  \\<forall>y'\\<in>set ys. y < y'\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)", "by -(erule proper_interval_not_set_less_eq_auxI, auto)"], ["proof (state)\nthis:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "}"], ["proof (state)\nthis:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "{"], ["proof (state)\nthis:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "assume \"\\<not> ?lhs \\<sqsubseteq>' ?rhs\""], ["proof (state)\nthis:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "also"], ["proof (state)\nthis:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "have \"?rhs = set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (y # ys) = set (y # ys) \\<inter> above ao", "using ao"], ["proof (prove)\nusing this:\n  set (x # xs) \\<union> set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set (y # ys) = set (y # ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  set (y # ys) = set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "finally"], ["proof (chain)\npicking this:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n         set (y # ys) \\<inter> above ao", "obtain z where \"z \\<in> above ao\" \"z < y\""], ["proof (prove)\nusing this:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n         set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>x = y\\<close> x_ao x_Min[unfolded Ball_def]"], ["proof (prove)\nusing this:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n         set (y # ys) \\<inter> above ao\n  x = y\n  x \\<in> above ao\n  \\<forall>xa. xa \\<in> set xs \\<longrightarrow> x < xa\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp add: set_less_eq_aux_def set_less_aux_def simp add: less_le not_le dest!: bspec[where x=y])"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "hence \"proper_interval ao (Some y)\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < y\n\ngoal (1 subgoal):\n 1. proper_interval ao (Some y)", "by(auto simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "}"], ["proof (state)\nthis:\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n         set (y # ys) \\<Longrightarrow>\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n         set (y # ys) \\<Longrightarrow>\n  proper_interval ao (Some y)", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n         set (y # ys) \\<Longrightarrow>\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "using \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some y) \\<Longrightarrow>\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys)\n  \\<not> - set (x # xs) \\<inter> above ao \\<sqsubseteq>'\n         set (y # ys) \\<Longrightarrow>\n  proper_interval ao (Some y)\n  x = y\n\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n    (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))", "by auto"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao (x # xs) (y # ys) =\n  (- set (x # xs) \\<inter> above ao \\<sqsubseteq>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Compl_set_less_eq_aux ao xs ys =\n  (- set xs \\<inter> above ao \\<sqsubseteq>' set ys)\n\ngoal (1 subgoal):\n 1. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "}"], ["proof (state)\nthis:\n  set xs \\<union> set ys \\<subseteq> above ?ao2 \\<Longrightarrow>\n  Compl_set_less_eq_aux ?ao2 xs ys =\n  (- set xs \\<inter> above ?ao2 \\<sqsubseteq>' set ys)\n\ngoal (1 subgoal):\n 1. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "from this[of None]"], ["proof (chain)\npicking this:\n  set xs \\<union> set ys \\<subseteq> above None \\<Longrightarrow>\n  Compl_set_less_eq_aux None xs ys =\n  (- set xs \\<inter> above None \\<sqsubseteq>' set ys)", "show ?Compl1"], ["proof (prove)\nusing this:\n  set xs \\<union> set ys \\<subseteq> above None \\<Longrightarrow>\n  Compl_set_less_eq_aux None xs ys =\n  (- set xs \\<inter> above None \\<sqsubseteq>' set ys)\n\ngoal (1 subgoal):\n 1. (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys", "by simp"], ["proof (state)\nthis:\n  (- set xs \\<sqsubseteq>' set ys) = Compl_set_less_eq_aux None xs ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_less_aux_Compl_iff:\n  \"set_less_aux_Compl ao xs ys \\<longleftrightarrow> set_less_eq_aux_Compl ao xs ys \\<and> \\<not> Compl_set_less_eq_aux ao ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_aux_Compl ao xs ys =\n    (set_less_eq_aux_Compl ao xs ys \\<and>\n     \\<not> Compl_set_less_eq_aux ao ys xs)", "by(induct ao xs ys rule: set_less_aux_Compl.induct)(auto simp add: not_less_iff_gr_or_eq)"], ["", "lemma Compl_set_less_aux_Compl_iff:\n  \"Compl_set_less_aux ao xs ys \\<longleftrightarrow> Compl_set_less_eq_aux ao xs ys \\<and> \\<not> set_less_eq_aux_Compl ao ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_aux ao xs ys =\n    (Compl_set_less_eq_aux ao xs ys \\<and>\n     \\<not> set_less_eq_aux_Compl ao ys xs)", "by(induct ao xs ys rule: Compl_set_less_aux.induct)(auto simp add: not_less_iff_gr_or_eq)"], ["", "theorem assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\"\n  and ys: \"sorted ys\" \"distinct ys\"\n  shows set_less_aux_Compl2_conv_set_less_aux_Compl:\n  \"set xs \\<sqsubset>' - set ys \\<longleftrightarrow> set_less_aux_Compl None xs ys\" (is ?Compl2)\n  and Compl1_set_less_aux_conv_Compl_set_less_aux:\n  \"- set xs \\<sqsubset>' set ys \\<longleftrightarrow> Compl_set_less_aux None xs ys\" (is ?Compl1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (set xs \\<sqsubset>' - set ys) = set_less_aux_Compl None xs ys &&&\n    (- set xs \\<sqsubset>' set ys) = Compl_set_less_aux None xs ys", "using assms"], ["proof (prove)\nusing this:\n  finite UNIV\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n\ngoal (1 subgoal):\n 1. (set xs \\<sqsubset>' - set ys) = set_less_aux_Compl None xs ys &&&\n    (- set xs \\<sqsubset>' set ys) = Compl_set_less_aux None xs ys", "by(simp_all only: set_less_aux_conv_set_less_eq_aux set_less_aux_Compl_iff Compl_set_less_aux_Compl_iff set_less_eq_aux_Compl2_conv_set_less_eq_aux_Compl Compl1_set_less_eq_aux_conv_Compl_set_less_eq_aux)"], ["", "end"], ["", "subsection \\<open>Implementation of proper intervals for sets\\<close>"], ["", "definition length_last :: \"'a list \\<Rightarrow> nat \\<times> 'a\"\nwhere \"length_last xs = (length xs, last xs)\""], ["", "lemma length_last_Nil [code]: \"length_last [] = (0, undefined)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length_last [] = (0, undefined)", "by(simp add: length_last_def last_def)"], ["", "lemma length_last_Cons_code [symmetric, code]:\n  \"fold (\\<lambda>x (n, _) . (n + 1, x)) xs (1, x) = length_last (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold (\\<lambda>x (n, uu_). (n + 1, x)) xs (1, x) = length_last (x # xs)", "by(induct xs rule: rev_induct)(simp_all add: length_last_def)"], ["", "context proper_intrvl begin"], ["", "fun exhaustive_above :: \"'a \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"exhaustive_above x [] \\<longleftrightarrow> \\<not> proper_interval (Some x) None\"\n| \"exhaustive_above x (y # ys) \\<longleftrightarrow> \\<not> proper_interval (Some x) (Some y) \\<and> exhaustive_above y ys\""], ["", "fun exhaustive :: \"'a list \\<Rightarrow> bool\" where \n  \"exhaustive [] = False\"\n| \"exhaustive (x # xs) \\<longleftrightarrow> \\<not> proper_interval None (Some x) \\<and> exhaustive_above x xs\""], ["", "fun proper_interval_set_aux :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"proper_interval_set_aux xs [] \\<longleftrightarrow> False\"\n| \"proper_interval_set_aux [] (y # ys) \\<longleftrightarrow> ys \\<noteq> [] \\<or> proper_interval (Some y) None\"\n| \"proper_interval_set_aux (x # xs) (y # ys) \\<longleftrightarrow>\n  (if x < y then False\n   else if y < x then proper_interval (Some y) (Some x) \\<or> ys \\<noteq> [] \\<or> \\<not> exhaustive_above x xs\n   else proper_interval_set_aux xs ys)\""], ["", "fun proper_interval_set_Compl_aux :: \"'a option \\<Rightarrow> nat \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"proper_interval_set_Compl_aux ao n [] [] \\<longleftrightarrow>\n   CARD('a) > n + 1\"\n| \"proper_interval_set_Compl_aux ao n [] (y # ys) \\<longleftrightarrow>\n   (let m = CARD('a) - n; (len_y, y') = length_last (y # ys)\n    in m \\<noteq> len_y \\<and> (m = len_y + 1 \\<longrightarrow> \\<not> proper_interval (Some y') None))\"\n| \"proper_interval_set_Compl_aux ao n (x # xs) [] \\<longleftrightarrow>\n   (let m = CARD('a) - n; (len_x, x') = length_last (x # xs)\n    in m \\<noteq> len_x \\<and> (m = len_x + 1 \\<longrightarrow> \\<not> proper_interval (Some x') None))\"\n| \"proper_interval_set_Compl_aux ao n (x # xs) (y # ys) \\<longleftrightarrow>\n  (if x < y then \n     proper_interval ao (Some x) \\<or> \n     proper_interval_set_Compl_aux (Some x) (n + 1) xs (y # ys)\n   else if y < x then \n     proper_interval ao (Some y) \\<or> \n     proper_interval_set_Compl_aux (Some y) (n + 1) (x # xs) ys\n   else proper_interval ao (Some x) \\<and> \n     (let m = card (UNIV :: 'a set) - n in m - length ys \\<noteq> 2 \\<or> m - length xs \\<noteq> 2))\""], ["", "fun proper_interval_Compl_set_aux :: \"'a option \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"proper_interval_Compl_set_aux ao (x # xs) (y # ys) \\<longleftrightarrow>\n  (if x < y then \n     \\<not> proper_interval ao (Some x) \\<and> \n     proper_interval_Compl_set_aux (Some x) xs (y # ys)\n   else if y < x then\n     \\<not> proper_interval ao (Some y) \\<and>\n     proper_interval_Compl_set_aux (Some y) (x # xs) ys\n   else \\<not> proper_interval ao (Some x) \\<and> (ys = [] \\<longrightarrow> xs \\<noteq> []))\"\n| \"proper_interval_Compl_set_aux ao _ _ \\<longleftrightarrow> False\""], ["", "end"], ["", "lemmas [code] = \n  proper_intrvl.exhaustive_above.simps\n  proper_intrvl.exhaustive.simps\n  proper_intrvl.proper_interval_set_aux.simps\n  proper_intrvl.proper_interval_set_Compl_aux.simps\n  proper_intrvl.proper_interval_Compl_set_aux.simps"], ["", "context linorder_proper_interval begin"], ["", "lemma exhaustive_above_iff:\n  \"\\<lbrakk> sorted xs; distinct xs; \\<forall>x'\\<in>set xs. x < x' \\<rbrakk> \\<Longrightarrow> exhaustive_above x xs \\<longleftrightarrow> set xs = {z. z > x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted xs; distinct xs; \\<forall>x'\\<in>set xs. x < x'\\<rbrakk>\n    \\<Longrightarrow> exhaustive_above x xs = (set xs = {z. x < z})", "proof(induction x xs rule: exhaustive_above.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>sorted []; distinct []; Ball (set []) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x [] = (set [] = Collect ((<) x))\n 2. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "case 1"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  \\<forall>a\\<in>set []. x_ < a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>sorted []; distinct []; Ball (set []) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x [] = (set [] = Collect ((<) x))\n 2. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "thus ?case"], ["proof (prove)\nusing this:\n  sorted []\n  distinct []\n  \\<forall>a\\<in>set []. x_ < a\n\ngoal (1 subgoal):\n 1. exhaustive_above x_ [] = (set [] = {a. x_ < a})", "by(simp add: proper_interval_simps)"], ["proof (state)\nthis:\n  exhaustive_above x_ [] = (set [] = {a. x_ < a})\n\ngoal (1 subgoal):\n 1. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "case (2 x y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>sorted ys; distinct ys; \\<forall>a\\<in>set ys. y < a\\<rbrakk>\n  \\<Longrightarrow> exhaustive_above y ys = (set ys = {a. y < a})\n  sorted (y # ys)\n  distinct (y # ys)\n  \\<forall>a\\<in>set (y # ys). x < a\n\ngoal (1 subgoal):\n 1. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "from \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close>"], ["proof (chain)\npicking this:\n  sorted (y # ys)\n  distinct (y # ys)", "have ys: \"sorted ys\" \"distinct ys\" and y: \"\\<forall>y'\\<in>set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. (sorted ys &&& distinct ys) &&& \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "hence \"exhaustive_above y ys = (set ys = {z. y < z})\""], ["proof (prove)\nusing this:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. exhaustive_above y ys = (set ys = {z. y < z})", "by(rule \"2.IH\")"], ["proof (state)\nthis:\n  exhaustive_above y ys = (set ys = {z. y < z})\n\ngoal (1 subgoal):\n 1. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "moreover"], ["proof (state)\nthis:\n  exhaustive_above y ys = (set ys = {z. y < z})\n\ngoal (1 subgoal):\n 1. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "from \\<open>\\<forall>y'\\<in>set (y # ys). x < y'\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>y'\\<in>set (y # ys). x < y'", "have \"x < y\""], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set (y # ys). x < y'\n\ngoal (1 subgoal):\n 1. x < y", "by simp"], ["proof (state)\nthis:\n  x < y\n\ngoal (1 subgoal):\n 1. \\<And>x y ys.\n       \\<lbrakk>\\<lbrakk>sorted ys; distinct ys;\n                 Ball (set ys) ((<) y)\\<rbrakk>\n                \\<Longrightarrow> exhaustive_above y ys =\n                                  (set ys = Collect ((<) y));\n        sorted (y # ys); distinct (y # ys);\n        Ball (set (y # ys)) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> exhaustive_above x (y # ys) =\n                         (set (y # ys) = Collect ((<) x))", "ultimately"], ["proof (chain)\npicking this:\n  exhaustive_above y ys = (set ys = {z. y < z})\n  x < y", "show ?case"], ["proof (prove)\nusing this:\n  exhaustive_above y ys = (set ys = {z. y < z})\n  x < y\n\ngoal (1 subgoal):\n 1. exhaustive_above x (y # ys) = (set (y # ys) = {a. x < a})", "using y"], ["proof (prove)\nusing this:\n  exhaustive_above y ys = (set ys = {z. y < z})\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. exhaustive_above x (y # ys) = (set (y # ys) = {a. x < a})", "by(fastforce simp add: proper_interval_simps)"], ["proof (state)\nthis:\n  exhaustive_above x (y # ys) = (set (y # ys) = {a. x < a})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exhaustive_correct:\n  assumes \"sorted xs\" \"distinct xs\"\n  shows \"exhaustive xs \\<longleftrightarrow> set xs = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exhaustive xs = (set xs = UNIV)", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> exhaustive xs = (set xs = UNIV)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow> exhaustive xs = (set xs = UNIV)", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> exhaustive xs = (set xs = UNIV)\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow> exhaustive xs = (set xs = UNIV)", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. exhaustive xs = (set xs = UNIV)", "by auto"], ["proof (state)\nthis:\n  exhaustive xs = (set xs = UNIV)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow> exhaustive xs = (set xs = UNIV)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow> exhaustive xs = (set xs = UNIV)", "case Cons"], ["proof (state)\nthis:\n  xs = a_ # list_\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow> exhaustive xs = (set xs = UNIV)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. exhaustive xs = (set xs = UNIV)", "using assms"], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. exhaustive xs = (set xs = UNIV)", "unfolding Cons exhaustive.simps"], ["proof (prove)\nusing this:\n  sorted (a_ # list_)\n  distinct (a_ # list_)\n\ngoal (1 subgoal):\n 1. (\\<not> proper_interval None (Some a_) \\<and>\n     exhaustive_above a_ list_) =\n    (set (a_ # list_) = UNIV)", "apply(subst exhaustive_above_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>sorted (a_ # list_); distinct (a_ # list_)\\<rbrakk>\n    \\<Longrightarrow> sorted list_\n 2. \\<lbrakk>sorted (a_ # list_); distinct (a_ # list_)\\<rbrakk>\n    \\<Longrightarrow> distinct list_\n 3. \\<lbrakk>sorted (a_ # list_); distinct (a_ # list_)\\<rbrakk>\n    \\<Longrightarrow> Ball (set list_) ((<) a_)\n 4. \\<lbrakk>sorted (a_ # list_); distinct (a_ # list_)\\<rbrakk>\n    \\<Longrightarrow> (\\<not> proper_interval None (Some a_) \\<and>\n                       set list_ = Collect ((<) a_)) =\n                      (set (a_ # list_) = UNIV)", "apply(auto simp add: less_le proper_interval_simps not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>\\<forall>x\\<in>set list_. a_ \\<le> x; sorted list_;\n        a_ \\<notin> set list_; distinct list_; insert a_ (set list_) = UNIV;\n        z \\<le> a_\\<rbrakk>\n       \\<Longrightarrow> z = a_", "by (metis List.set_simps(2) UNIV_I eq_iff set_ConsD)"], ["proof (state)\nthis:\n  exhaustive xs = (set xs = UNIV)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem proper_interval_set_aux:\n  assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\" \n  and ys: \"sorted ys\" \"distinct ys\"\n  shows \"proper_interval_set_aux xs ys \\<longleftrightarrow> (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "note [simp] = finite_subset[OF subset_UNIV fin]"], ["proof (state)\nthis:\n  finite ?A\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "using xs ys"], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "proof(induction xs ys rule: proper_interval_set_aux.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>sorted xs; distinct xs; sorted []; distinct []\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux xs [] =\n                         (\\<exists>A.\n                             set xs \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set [])\n 2. \\<And>y ys.\n       \\<lbrakk>sorted []; distinct []; sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux [] (y # ys) =\n                         (\\<exists>A.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))\n 3. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "case 1"], ["proof (state)\nthis:\n  sorted xs_\n  distinct xs_\n  sorted []\n  distinct []\n\ngoal (3 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>sorted xs; distinct xs; sorted []; distinct []\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux xs [] =\n                         (\\<exists>A.\n                             set xs \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set [])\n 2. \\<And>y ys.\n       \\<lbrakk>sorted []; distinct []; sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux [] (y # ys) =\n                         (\\<exists>A.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))\n 3. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "thus ?case"], ["proof (prove)\nusing this:\n  sorted xs_\n  distinct xs_\n  sorted []\n  distinct []\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs_ [] =\n    (\\<exists>A. set xs_ \\<sqsubset>' A \\<and> A \\<sqsubset>' set [])", "by simp"], ["proof (state)\nthis:\n  proper_interval_set_aux xs_ [] =\n  (\\<exists>A. set xs_ \\<sqsubset>' A \\<and> A \\<sqsubset>' set [])\n\ngoal (2 subgoals):\n 1. \\<And>y ys.\n       \\<lbrakk>sorted []; distinct []; sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux [] (y # ys) =\n                         (\\<exists>A.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))\n 2. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y ys.\n       \\<lbrakk>sorted []; distinct []; sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux [] (y # ys) =\n                         (\\<exists>A.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))\n 2. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "case (2 y ys)"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (2 subgoals):\n 1. \\<And>y ys.\n       \\<lbrakk>sorted []; distinct []; sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux [] (y # ys) =\n                         (\\<exists>A.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))\n 2. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "hence \"\\<forall>y'\\<in>set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted []\n  distinct []\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (2 subgoals):\n 1. \\<And>y ys.\n       \\<lbrakk>sorted []; distinct []; sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux [] (y # ys) =\n                         (\\<exists>A.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))\n 2. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux [] (y # ys) =\n    (\\<exists>A. set [] \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "by(cases ys)(auto simp add: proper_interval_simps set_less_aux_singleton_iff intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  proper_interval_set_aux [] (y # ys) =\n  (\\<exists>A. set [] \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "case (3 x xs y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs; sorted ys;\n   distinct ys\\<rbrakk>\n  \\<Longrightarrow> proper_interval_set_aux xs ys =\n                    (\\<exists>A.\n                        set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "from \\<open>sorted (x # xs)\\<close> \\<open>distinct (x # xs)\\<close>"], ["proof (chain)\npicking this:\n  sorted (x # xs)\n  distinct (x # xs)", "have xs: \"sorted xs\" \"distinct xs\" and x: \"\\<forall>x'\\<in>set xs. x < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. (sorted xs &&& distinct xs) &&& \\<forall>x'\\<in>set xs. x < x'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted xs\n  distinct xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "from \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close>"], ["proof (chain)\npicking this:\n  sorted (y # ys)\n  distinct (y # ys)", "have ys: \"sorted ys\" \"distinct ys\" and y: \"\\<forall>y'\\<in>set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. (sorted ys &&& distinct ys) &&& \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "have Minxxs: \"Min (set (x # xs)) = x\" and xnxs: \"x \\<notin> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x &&& x \\<notin> set xs", "using x"], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x &&& x \\<notin> set xs", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (set (x # xs)) = x\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "have Minyys: \"Min (set (y # ys)) = y\" and ynys: \"y \\<notin> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (y # ys)) = y &&& y \\<notin> set ys", "using y"], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. Min (set (y # ys)) = y &&& y \\<notin> set ys", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (set (y # ys)) = y\n  y \\<notin> set ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>\\<lbrakk>\\<not> x < y; \\<not> y < x; sorted xs; distinct xs;\n                 sorted ys; distinct ys\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_aux xs ys =\n                                  (\\<exists>A.\nset xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys);\n        sorted (x # xs); distinct (x # xs); sorted (y # ys);\n        distinct (y # ys)\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_aux (x # xs) (y # ys) =\n                         (\\<exists>A.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' set (y # ys))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "proof(cases \"x < y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "case True"], ["proof (state)\nthis:\n  x < y\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "hence \"set (y # ys) \\<sqsubset>' set (x # xs)\""], ["proof (prove)\nusing this:\n  x < y\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<sqsubset>' set (x # xs)", "using Minxxs Minyys"], ["proof (prove)\nusing this:\n  x < y\n  Min (set (x # xs)) = x\n  Min (set (y # ys)) = y\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<sqsubset>' set (x # xs)", "by -(rule set_less_aux_Min_antimono, simp_all)"], ["proof (state)\nthis:\n  set (y # ys) \\<sqsubset>' set (x # xs)\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (y # ys) \\<sqsubset>' set (x # xs)\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "using True"], ["proof (prove)\nusing this:\n  set (y # ys) \\<sqsubset>' set (x # xs)\n  x < y\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "by(auto dest: set_less_aux_trans set_less_aux_antisym)"], ["proof (state)\nthis:\n  proper_interval_set_aux (x # xs) (y # ys) =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "proof(cases \"y < x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "case True"], ["proof (state)\nthis:\n  y < x\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "{"], ["proof (state)\nthis:\n  y < x\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "assume \"proper_interval (Some y) (Some x)\""], ["proof (state)\nthis:\n  proper_interval (Some y) (Some x)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "then"], ["proof (chain)\npicking this:\n  proper_interval (Some y) (Some x)", "obtain z where z: \"y < z\" \"z < x\""], ["proof (prove)\nusing this:\n  proper_interval (Some y) (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>y < z; z < x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: proper_interval_simps)"], ["proof (state)\nthis:\n  y < z\n  z < x\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "hence \"set (x # xs) \\<sqsubset>' {z}\""], ["proof (prove)\nusing this:\n  y < z\n  z < x\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {z}", "using x"], ["proof (prove)\nusing this:\n  y < z\n  z < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {z}", "by -(rule set_less_aux_Min_antimono, auto)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "have \"{z} \\<sqsubset>' set (y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z} \\<sqsubset>' set (y # ys)", "using z y Minyys"], ["proof (prove)\nusing this:\n  y < z\n  z < x\n  \\<forall>y'\\<in>set ys. y < y'\n  Min (set (y # ys)) = y\n\ngoal (1 subgoal):\n 1. {z} \\<sqsubset>' set (y # ys)", "by -(rule set_less_aux_Min_antimono, auto)"], ["proof (state)\nthis:\n  {z} \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' {z}\n  {z} \\<sqsubset>' set (y # ys)", "have \"\\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' {z}\n  {z} \\<sqsubset>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)", "by blast"], ["proof (state)\nthis:\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "}"], ["proof (state)\nthis:\n  proper_interval (Some y) (Some x) \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  proper_interval (Some y) (Some x) \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "{"], ["proof (state)\nthis:\n  proper_interval (Some y) (Some x) \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "assume \"ys \\<noteq> []\""], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "hence \"{y} \\<sqsubset>' set (y # ys)\""], ["proof (prove)\nusing this:\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. {y} \\<sqsubset>' set (y # ys)", "using y"], ["proof (prove)\nusing this:\n  ys \\<noteq> []\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. {y} \\<sqsubset>' set (y # ys)", "by -(rule psubset_finite_imp_set_less_aux, auto simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  {y} \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  {y} \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "have \"set (x # xs) \\<sqsubset>' {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {y}", "using False True x"], ["proof (prove)\nusing this:\n  \\<not> x < y\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {y}", "by -(rule set_less_aux_Min_antimono, auto)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {y}\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  {y} \\<sqsubset>' set (y # ys)\n  set (x # xs) \\<sqsubset>' {y}", "have \"\\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\""], ["proof (prove)\nusing this:\n  {y} \\<sqsubset>' set (y # ys)\n  set (x # xs) \\<sqsubset>' {y}\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)", "by blast"], ["proof (state)\nthis:\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "}"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "{"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "assume \"\\<not> exhaustive_above x xs\""], ["proof (state)\nthis:\n  \\<not> exhaustive_above x xs\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "then"], ["proof (chain)\npicking this:\n  \\<not> exhaustive_above x xs", "obtain z where z: \"z > x\" \"z \\<notin> set xs\""], ["proof (prove)\nusing this:\n  \\<not> exhaustive_above x xs\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>x < z; z \\<notin> set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x"], ["proof (prove)\nusing this:\n  \\<not> exhaustive_above x xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>x < z; z \\<notin> set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: exhaustive_above_iff[OF xs x])"], ["proof (state)\nthis:\n  x < z\n  z \\<notin> set xs\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "let ?A = \"insert z (set (x # xs))\""], ["proof (state)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "have \"set (x # xs) \\<sqsubset>' ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' insert z (set (x # xs))", "using z"], ["proof (prove)\nusing this:\n  x < z\n  z \\<notin> set xs\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' insert z (set (x # xs))", "by -(rule psubset_finite_imp_set_less_aux, auto)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' insert z (set (x # xs))\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' insert z (set (x # xs))\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "have \"?A \\<sqsubset>' set (y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert z (set (x # xs)) \\<sqsubset>' set (y # ys)", "using Minyys False True z x"], ["proof (prove)\nusing this:\n  Min (set (y # ys)) = y\n  \\<not> x < y\n  y < x\n  x < z\n  z \\<notin> set xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. insert z (set (x # xs)) \\<sqsubset>' set (y # ys)", "by -(rule set_less_aux_Min_antimono, auto)"], ["proof (state)\nthis:\n  insert z (set (x # xs)) \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' insert z (set (x # xs))\n  insert z (set (x # xs)) \\<sqsubset>' set (y # ys)", "have \"\\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' insert z (set (x # xs))\n  insert z (set (x # xs)) \\<sqsubset>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)", "by blast"], ["proof (state)\nthis:\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "}"], ["proof (state)\nthis:\n  \\<not> exhaustive_above x xs \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  \\<not> exhaustive_above x xs \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "{"], ["proof (state)\nthis:\n  \\<not> exhaustive_above x xs \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "fix A"], ["proof (state)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "assume A: \"set (x # xs) \\<sqsubset>' A\" and A': \"A \\<sqsubset>' {y}\"\n            and pi: \"\\<not> proper_interval (Some y) (Some x)\""], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' {y}\n  \\<not> proper_interval (Some y) (Some x)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "from A"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A", "have nempty: \"A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "have \"y \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> A \\<Longrightarrow> False", "assume \"y \\<in> A\""], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. y \\<in> A \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. y \\<in> A \\<Longrightarrow> False", "with A'"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' {y}\n  y \\<in> A", "have \"A \\<noteq> {y}\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' {y}\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {y}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {y}\n\ngoal (1 subgoal):\n 1. y \\<in> A \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> A\n  A \\<noteq> {y}", "have \"{y} \\<sqsubset>' A\""], ["proof (prove)\nusing this:\n  y \\<in> A\n  A \\<noteq> {y}\n\ngoal (1 subgoal):\n 1. {y} \\<sqsubset>' A", "by -(rule psubset_finite_imp_set_less_aux, auto)"], ["proof (state)\nthis:\n  {y} \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. y \\<in> A \\<Longrightarrow> False", "with A'"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' {y}\n  {y} \\<sqsubset>' A", "show False"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' {y}\n  {y} \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. False", "by(rule set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<notin> A\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "have \"y < Min A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y < Min A", "unfolding not_le[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Min A \\<le> y", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. Min A \\<le> y \\<Longrightarrow> False", "assume \"Min A \\<le> y\""], ["proof (state)\nthis:\n  Min A \\<le> y\n\ngoal (1 subgoal):\n 1. Min A \\<le> y \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  Min A \\<le> y\n\ngoal (1 subgoal):\n 1. Min A \\<le> y \\<Longrightarrow> False", "have \"Min A \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min A \\<noteq> y", "using \\<open>y \\<notin> A\\<close> nempty"], ["proof (prove)\nusing this:\n  y \\<notin> A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min A \\<noteq> y", "by clarsimp"], ["proof (state)\nthis:\n  Min A \\<noteq> y\n\ngoal (1 subgoal):\n 1. Min A \\<le> y \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  Min A \\<le> y\n  Min A \\<noteq> y", "have \"Min A < Min {y}\""], ["proof (prove)\nusing this:\n  Min A \\<le> y\n  Min A \\<noteq> y\n\ngoal (1 subgoal):\n 1. Min A < Min {y}", "by simp"], ["proof (state)\nthis:\n  Min A < Min {y}\n\ngoal (1 subgoal):\n 1. Min A \\<le> y \\<Longrightarrow> False", "hence \"{y} \\<sqsubset>' A\""], ["proof (prove)\nusing this:\n  Min A < Min {y}\n\ngoal (1 subgoal):\n 1. {y} \\<sqsubset>' A", "by(rule set_less_aux_Min_antimono)(simp_all add: nempty)"], ["proof (state)\nthis:\n  {y} \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. Min A \\<le> y \\<Longrightarrow> False", "with A'"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' {y}\n  {y} \\<sqsubset>' A", "show False"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' {y}\n  {y} \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. False", "by(rule set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y < Min A\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "with pi nempty"], ["proof (chain)\npicking this:\n  \\<not> proper_interval (Some y) (Some x)\n  A \\<noteq> {}\n  y < Min A", "have \"x \\<le> Min A\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval (Some y) (Some x)\n  A \\<noteq> {}\n  y < Min A\n\ngoal (1 subgoal):\n 1. x \\<le> Min A", "by(auto simp add: proper_interval_simps)"], ["proof (state)\nthis:\n  x \\<le> Min A\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "moreover"], ["proof (state)\nthis:\n  x \\<le> Min A\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "from A"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A", "obtain z where z: \"z \\<in> A\" \"z \\<notin> set (x # xs)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> A; z \\<notin> set (x # xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  z \\<in> A\n  z \\<notin> set (x # xs)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "with \\<open>x \\<le> Min A\\<close> nempty"], ["proof (chain)\npicking this:\n  x \\<le> Min A\n  A \\<noteq> {}\n  z \\<in> A\n  z \\<notin> set (x # xs)", "have \"x < z\""], ["proof (prove)\nusing this:\n  x \\<le> Min A\n  A \\<noteq> {}\n  z \\<in> A\n  z \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. x < z", "by auto"], ["proof (state)\nthis:\n  x < z\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "with z"], ["proof (chain)\npicking this:\n  z \\<in> A\n  z \\<notin> set (x # xs)\n  x < z", "have \"\\<not> exhaustive_above x xs\""], ["proof (prove)\nusing this:\n  z \\<in> A\n  z \\<notin> set (x # xs)\n  x < z\n\ngoal (1 subgoal):\n 1. \\<not> exhaustive_above x xs", "by(auto simp add: exhaustive_above_iff[OF xs x])"], ["proof (state)\nthis:\n  \\<not> exhaustive_above x xs\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>set (x # xs) \\<sqsubset>' ?A2; ?A2 \\<sqsubset>' {y};\n   \\<not> proper_interval (Some y) (Some x)\\<rbrakk>\n  \\<Longrightarrow> \\<not> exhaustive_above x xs\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "ultimately"], ["proof (chain)\npicking this:\n  proper_interval (Some y) (Some x) \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  ys \\<noteq> [] \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  \\<not> exhaustive_above x xs \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  \\<lbrakk>set (x # xs) \\<sqsubset>' ?A2; ?A2 \\<sqsubset>' {y};\n   \\<not> proper_interval (Some y) (Some x)\\<rbrakk>\n  \\<Longrightarrow> \\<not> exhaustive_above x xs", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval (Some y) (Some x) \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  ys \\<noteq> [] \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  \\<not> exhaustive_above x xs \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  \\<lbrakk>set (x # xs) \\<sqsubset>' ?A2; ?A2 \\<sqsubset>' {y};\n   \\<not> proper_interval (Some y) (Some x)\\<rbrakk>\n  \\<Longrightarrow> \\<not> exhaustive_above x xs\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "using True False"], ["proof (prove)\nusing this:\n  proper_interval (Some y) (Some x) \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  ys \\<noteq> [] \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  \\<not> exhaustive_above x xs \\<Longrightarrow>\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n  \\<lbrakk>set (x # xs) \\<sqsubset>' ?A2; ?A2 \\<sqsubset>' {y};\n   \\<not> proper_interval (Some y) (Some x)\\<rbrakk>\n  \\<Longrightarrow> \\<not> exhaustive_above x xs\n  y < x\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "by fastforce"], ["proof (state)\nthis:\n  proper_interval_set_aux (x # xs) (y # ys) =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "case False"], ["proof (state)\nthis:\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "with \\<open>\\<not> x < y\\<close>"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  \\<not> y < x", "have \"x = y\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "from \\<open>\\<not> x < y\\<close> False"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  \\<not> y < x", "have \"proper_interval_set_aux xs ys = (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "using xs ys"], ["proof (prove)\nusing this:\n  \\<not> x < y\n  \\<not> y < x\n  sorted xs\n  distinct xs\n  sorted ys\n  distinct ys\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "by(rule \"3.IH\")"], ["proof (state)\nthis:\n  proper_interval_set_aux xs ys =\n  (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "also"], ["proof (state)\nthis:\n  proper_interval_set_aux xs ys =\n  (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "have \"\\<dots> = (\\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\"\n          (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "assume ?lhs"], ["proof (state)\nthis:\n  \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "then"], ["proof (chain)\npicking this:\n  \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "obtain A where A: \"set xs \\<sqsubset>' A\" \n            and A': \"A \\<sqsubset>' set ys\""], ["proof (prove)\nusing this:\n  \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set xs \\<sqsubset>' A; A \\<sqsubset>' set ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set xs \\<sqsubset>' A\n  A \\<sqsubset>' set ys\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "hence nempty: \"A \\<noteq> {}\" \"ys \\<noteq> []\""], ["proof (prove)\nusing this:\n  set xs \\<sqsubset>' A\n  A \\<sqsubset>' set ys\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} &&& ys \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n  ys \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "let ?A = \"insert y A\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "assume \"Min A \\<le> y\""], ["proof (state)\nthis:\n  Min A \\<le> y\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "also"], ["proof (state)\nthis:\n  Min A \\<le> y\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "from y nempty"], ["proof (chain)\npicking this:\n  \\<forall>y'\\<in>set ys. y < y'\n  A \\<noteq> {}\n  ys \\<noteq> []", "have \"y < Min (set ys)\""], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n  A \\<noteq> {}\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. y < Min (set ys)", "by auto"], ["proof (state)\nthis:\n  y < Min (set ys)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "finally"], ["proof (chain)\npicking this:\n  Min A < Min (set ys)", "have \"set ys \\<sqsubset>' A\""], ["proof (prove)\nusing this:\n  Min A < Min (set ys)\n\ngoal (1 subgoal):\n 1. set ys \\<sqsubset>' A", "by(rule set_less_aux_Min_antimono)(simp_all add: nempty)"], ["proof (state)\nthis:\n  set ys \\<sqsubset>' A\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "with A'"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' set ys\n  set ys \\<sqsubset>' A", "have False"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' set ys\n  set ys \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. False", "by(rule set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "}"], ["proof (state)\nthis:\n  Min A \\<le> y \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "hence MinA: \"y < Min A\""], ["proof (prove)\nusing this:\n  Min A \\<le> y \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. y < Min A", "by(metis not_le)"], ["proof (state)\nthis:\n  y < Min A\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "with nempty"], ["proof (chain)\npicking this:\n  A \\<noteq> {}\n  ys \\<noteq> []\n  y < Min A", "have \"y \\<notin> A\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  ys \\<noteq> []\n  y < Min A\n\ngoal (1 subgoal):\n 1. y \\<notin> A", "by auto"], ["proof (state)\nthis:\n  y \\<notin> A\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "moreover"], ["proof (state)\nthis:\n  y \\<notin> A\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "with MinA nempty"], ["proof (chain)\npicking this:\n  y < Min A\n  A \\<noteq> {}\n  ys \\<noteq> []\n  y \\<notin> A", "have MinyA: \"Min ?A = y\""], ["proof (prove)\nusing this:\n  y < Min A\n  A \\<noteq> {}\n  ys \\<noteq> []\n  y \\<notin> A\n\ngoal (1 subgoal):\n 1. Min (insert y A) = y", "by -(rule Min_eqI, auto)"], ["proof (state)\nthis:\n  Min (insert y A) = y\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "ultimately"], ["proof (chain)\npicking this:\n  y \\<notin> A\n  Min (insert y A) = y", "have A1: \"set (x # xs) \\<sqsubset>' ?A\""], ["proof (prove)\nusing this:\n  y \\<notin> A\n  Min (insert y A) = y\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' insert y A", "using \\<open>x = y\\<close> A Minxxs xnxs"], ["proof (prove)\nusing this:\n  y \\<notin> A\n  Min (insert y A) = y\n  x = y\n  set xs \\<sqsubset>' A\n  Min (set (x # xs)) = x\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' insert y A", "by(subst set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' insert y A\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' insert y A\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "have \"?A \\<sqsubset>' set (y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert y A \\<sqsubset>' set (y # ys)", "using \\<open>x = y\\<close> MinyA \\<open>y \\<notin> A\\<close> A' Minyys ynys"], ["proof (prove)\nusing this:\n  x = y\n  Min (insert y A) = y\n  y \\<notin> A\n  A \\<sqsubset>' set ys\n  Min (set (y # ys)) = y\n  y \\<notin> set ys\n\ngoal (1 subgoal):\n 1. insert y A \\<sqsubset>' set (y # ys)", "by(subst set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  insert y A \\<sqsubset>' set (y # ys)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys \\<Longrightarrow>\n    \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n 2. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' insert y A\n  insert y A \\<sqsubset>' set (y # ys)", "show ?rhs"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' insert y A\n  insert y A \\<sqsubset>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)", "by blast"], ["proof (state)\nthis:\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "assume \"?rhs\""], ["proof (state)\nthis:\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "then"], ["proof (chain)\npicking this:\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)", "obtain A where A: \"set (x # xs) \\<sqsubset>' A\"\n            and A': \"A \\<sqsubset>' set (y # ys)\""], ["proof (prove)\nusing this:\n  \\<exists>A. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys)\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set (x # xs) \\<sqsubset>' A;\n         A \\<sqsubset>' set (y # ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' set (y # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "let ?A = \"A - {x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "from A"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A", "have nempty: \"A \\<noteq> {}\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "{"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "assume \"x < Min A\""], ["proof (state)\nthis:\n  x < Min A\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "hence \"Min (set (x # xs)) < Min A\""], ["proof (prove)\nusing this:\n  x < Min A\n\ngoal (1 subgoal):\n 1. Min (set (x # xs)) < Min A", "unfolding Minxxs"], ["proof (prove)\nusing this:\n  x < Min A\n\ngoal (1 subgoal):\n 1. x < Min A", "."], ["proof (state)\nthis:\n  Min (set (x # xs)) < Min A\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "hence \"A \\<sqsubset>' set (x # xs)\""], ["proof (prove)\nusing this:\n  Min (set (x # xs)) < Min A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' set (x # xs)", "by(rule set_less_aux_Min_antimono) simp_all"], ["proof (state)\nthis:\n  A \\<sqsubset>' set (x # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "with A"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' set (x # xs)", "have False"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' set (x # xs)\n\ngoal (1 subgoal):\n 1. False", "by(rule set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "}"], ["proof (state)\nthis:\n  x < Min A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "moreover"], ["proof (state)\nthis:\n  x < Min A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "{"], ["proof (state)\nthis:\n  x < Min A \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "assume \"Min A < x\""], ["proof (state)\nthis:\n  Min A < x\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "hence \"Min A < Min (set (y # ys))\""], ["proof (prove)\nusing this:\n  Min A < x\n\ngoal (1 subgoal):\n 1. Min A < Min (set (y # ys))", "unfolding \\<open>x = y\\<close> Minyys"], ["proof (prove)\nusing this:\n  Min A < y\n\ngoal (1 subgoal):\n 1. Min A < y", "."], ["proof (state)\nthis:\n  Min A < Min (set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "hence \"set (y # ys) \\<sqsubset>' A\""], ["proof (prove)\nusing this:\n  Min A < Min (set (y # ys))\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<sqsubset>' A", "by(rule set_less_aux_Min_antimono)(simp_all add: nempty)"], ["proof (state)\nthis:\n  set (y # ys) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "with A'"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' set (y # ys)\n  set (y # ys) \\<sqsubset>' A", "have False"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' set (y # ys)\n  set (y # ys) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. False", "by(rule set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "}"], ["proof (state)\nthis:\n  Min A < x \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "ultimately"], ["proof (chain)\npicking this:\n  x < Min A \\<Longrightarrow> False\n  Min A < x \\<Longrightarrow> False", "have MinA: \"Min A = x\""], ["proof (prove)\nusing this:\n  x < Min A \\<Longrightarrow> False\n  Min A < x \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Min A = x", "by(metis less_linear)"], ["proof (state)\nthis:\n  Min A = x\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "hence \"x \\<in> A\""], ["proof (prove)\nusing this:\n  Min A = x\n\ngoal (1 subgoal):\n 1. x \\<in> A", "using nempty"], ["proof (prove)\nusing this:\n  Min A = x\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by(metis Min_in \\<open>finite A\\<close>)"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "from A nempty Minxxs xnxs"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<noteq> {}\n  Min (set (x # xs)) = x\n  x \\<notin> set xs", "have \"set xs \\<sqsubset>' ?A\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<noteq> {}\n  Min (set (x # xs)) = x\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. set xs \\<sqsubset>' A - {x}", "by(subst (asm) set_less_aux_rec)(auto simp add: MinA)"], ["proof (state)\nthis:\n  set xs \\<sqsubset>' A - {x}\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "moreover"], ["proof (state)\nthis:\n  set xs \\<sqsubset>' A - {x}\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "from A' \\<open>x = y\\<close> nempty Minyys MinA ynys"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' set (y # ys)\n  x = y\n  A \\<noteq> {}\n  Min (set (y # ys)) = y\n  Min A = x\n  y \\<notin> set ys", "have \"?A \\<sqsubset>' set ys\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' set (y # ys)\n  x = y\n  A \\<noteq> {}\n  Min (set (y # ys)) = y\n  Min A = x\n  y \\<notin> set ys\n\ngoal (1 subgoal):\n 1. A - {x} \\<sqsubset>' set ys", "by(subst (asm) set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  A - {x} \\<sqsubset>' set ys\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' set (y # ys) \\<Longrightarrow>\n    \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "ultimately"], ["proof (chain)\npicking this:\n  set xs \\<sqsubset>' A - {x}\n  A - {x} \\<sqsubset>' set ys", "show ?lhs"], ["proof (prove)\nusing this:\n  set xs \\<sqsubset>' A - {x}\n  A - {x} \\<sqsubset>' set ys\n\ngoal (1 subgoal):\n 1. \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys", "by blast"], ["proof (state)\nthis:\n  \\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys) =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "finally"], ["proof (chain)\npicking this:\n  proper_interval_set_aux xs ys =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval_set_aux xs ys =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "using \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval_set_aux xs ys =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n  x = y\n\ngoal (1 subgoal):\n 1. proper_interval_set_aux (x # xs) (y # ys) =\n    (\\<exists>A.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))", "by simp"], ["proof (state)\nthis:\n  proper_interval_set_aux (x # xs) (y # ys) =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_set_aux (x # xs) (y # ys) =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_set_aux (x # xs) (y # ys) =\n  (\\<exists>A.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' set (y # ys))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_set_aux xs ys =\n  (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proper_interval_set_Compl_aux:\n  assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\" \n  and ys: \"sorted ys\" \"distinct ys\" \n  shows \"proper_interval_set_Compl_aux None 0 xs ys \\<longleftrightarrow> (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "note [simp] = finite_subset[OF subset_UNIV fin]"], ["proof (state)\nthis:\n  finite ?A\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "define above where \"above = case_option UNIV (Collect \\<circ> less)\""], ["proof (state)\nthis:\n  above = case_option UNIV (Collect \\<circ> (<))\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "have above_simps [simp]: \"above None = UNIV\" \"\\<And>x. above (Some x) = {y. x < y}\"\n    and above_upclosed: \"\\<And>x y ao. \\<lbrakk> x \\<in> above ao; x < y \\<rbrakk> \\<Longrightarrow> y \\<in> above ao\"\n    and proper_interval_Some2: \"\\<And>x ao. proper_interval ao (Some x) \\<longleftrightarrow> (\\<exists>z\\<in>above ao. z < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (above None = UNIV &&& (\\<And>x. above (Some x) = {y. x < y})) &&&\n    (\\<And>x y ao.\n        \\<lbrakk>x \\<in> above ao; x < y\\<rbrakk>\n        \\<Longrightarrow> y \\<in> above ao) &&&\n    (\\<And>x ao.\n        proper_interval ao (Some x) = (\\<exists>z\\<in>above ao. z < x))", "by(simp_all add: proper_interval_simps above_def split: option.splits)"], ["proof (state)\nthis:\n  above None = UNIV\n  above (Some ?x) = {y. ?x < y}\n  \\<lbrakk>?x \\<in> above ?ao; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> above ?ao\n  proper_interval ?ao (Some ?x) = (\\<exists>z\\<in>above ?ao. z < ?x)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "{"], ["proof (state)\nthis:\n  above None = UNIV\n  above (Some ?x) = {y. ?x < y}\n  \\<lbrakk>?x \\<in> above ?ao; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> above ?ao\n  proper_interval ?ao (Some ?x) = (\\<exists>z\\<in>above ?ao. z < ?x)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "fix ao n"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "assume \"set xs \\<subseteq> above ao\" \"set ys \\<subseteq> above ao\""], ["proof (state)\nthis:\n  set xs \\<subseteq> above ao\n  set ys \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "from xs \\<open>set xs \\<subseteq> above ao\\<close> ys \\<open>set ys \\<subseteq> above ao\\<close>"], ["proof (chain)\npicking this:\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above ao\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above ao", "have \"proper_interval_set_Compl_aux ao (card (UNIV - above ao)) xs ys \\<longleftrightarrow>\n          (\\<exists>A \\<subseteq> above ao. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys \\<inter> above ao)\""], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above ao\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) xs ys =\n    (\\<exists>A\\<subseteq>above ao.\n        set xs \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set ys \\<inter> above ao)", "proof(induct ao n\\<equiv>\"card (UNIV - above ao)\" xs ys rule: proper_interval_set_Compl_aux.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>ao.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 3. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 4. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "case (1 ao)"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n\ngoal (4 subgoals):\n 1. \\<And>ao.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 3. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 4. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have \"card (UNIV - above ao) + 1 < CARD('a) \\<longleftrightarrow> (\\<exists>A \\<subseteq> above ao. A \\<noteq> {} \\<and> A \\<sqsubset>' above ao)\"\n        (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (card (UNIV - above ao) + 1 < CARD('a)) =\n    (\\<exists>A\\<subseteq>above ao.\n        A \\<noteq> {} \\<and> A \\<sqsubset>' above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "assume ?lhs"], ["proof (state)\nthis:\n  card (UNIV - above ao) + 1 < CARD('a)\n\ngoal (2 subgoals):\n 1. card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "hence \"card (UNIV - (UNIV - above ao)) > 1\""], ["proof (prove)\nusing this:\n  card (UNIV - above ao) + 1 < CARD('a)\n\ngoal (1 subgoal):\n 1. 1 < card (UNIV - (UNIV - above ao))", "by(simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  1 < card (UNIV - (UNIV - above ao))\n\ngoal (2 subgoals):\n 1. card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "from card_gt_1D[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>x y.\n     x \\<in> UNIV - (UNIV - above ao) \\<and>\n     y \\<in> UNIV - (UNIV - above ao) \\<and> x \\<noteq> y", "obtain x y where above: \"x \\<in> above ao\" \"y \\<in> above ao\"\n          and neq: \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  \\<exists>x y.\n     x \\<in> UNIV - (UNIV - above ao) \\<and>\n     y \\<in> UNIV - (UNIV - above ao) \\<and> x \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> above ao; y \\<in> above ao; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> above ao\n  y \\<in> above ao\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "hence \"{x} \\<sqsubset>' {x, y} \\<inter> above ao\""], ["proof (prove)\nusing this:\n  x \\<in> above ao\n  y \\<in> above ao\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. {x} \\<sqsubset>' {x, y} \\<inter> above ao", "by(simp_all add: psubsetI psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  {x} \\<sqsubset>' {x, y} \\<inter> above ao\n\ngoal (2 subgoals):\n 1. card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "also"], ["proof (state)\nthis:\n  {x} \\<sqsubset>' {x, y} \\<inter> above ao\n\ngoal (2 subgoals):\n 1. card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "have \"\\<dots> \\<sqsubseteq>' above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x, y} \\<inter> above ao \\<sqsubseteq>' above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  {x, y} \\<inter> above ao \\<sqsubseteq>' above ao\n\ngoal (2 subgoals):\n 1. card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "finally"], ["proof (chain)\npicking this:\n  {x} \\<sqsubset>' above ao", "show ?rhs"], ["proof (prove)\nusing this:\n  {x} \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao", "using above"], ["proof (prove)\nusing this:\n  {x} \\<sqsubset>' above ao\n  x \\<in> above ao\n  y \\<in> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' above ao", "obtain A where nempty: \"A \\<inter> above ao \\<noteq> {}\"\n          and subset: \"A \\<subseteq> above ao\"\n          and less: \"A \\<sqsubset>' above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<inter> above ao \\<noteq> {}; A \\<subseteq> above ao;\n         A \\<sqsubset>' above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<noteq> {}\n  A \\<subseteq> above ao\n  A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "from nempty"], ["proof (chain)\npicking this:\n  A \\<inter> above ao \\<noteq> {}", "obtain x where x: \"x \\<in> A\" \"x \\<in> above ao\""], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A; x \\<in> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> A\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' above ao \\<Longrightarrow>\n    card (UNIV - above ao) + 1 < CARD('a)", "show ?lhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (UNIV - above ao) + 1 < CARD('a)", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "assume \"\\<not> ?lhs\""], ["proof (state)\nthis:\n  \\<not> card (UNIV - above ao) + 1 < CARD('a)\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> card (UNIV - above ao) + 1 < CARD('a)\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "have \"CARD('a) \\<ge> card (UNIV - above ao)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (UNIV - above ao) \\<le> CARD('a)", "by(rule card_mono) simp_all"], ["proof (state)\nthis:\n  card (UNIV - above ao) \\<le> CARD('a)\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  card (UNIV - above ao) \\<le> CARD('a)\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "from card_Un_disjoint[of \"UNIV - above ao\" \"above ao\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite (UNIV - above ao); finite (above ao);\n   (UNIV - above ao) \\<inter> above ao = {}\\<rbrakk>\n  \\<Longrightarrow> card (UNIV - above ao \\<union> above ao) =\n                    card (UNIV - above ao) + card (above ao)", "have \"CARD('a) = card (UNIV - above ao) + card (above ao)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (UNIV - above ao); finite (above ao);\n   (UNIV - above ao) \\<inter> above ao = {}\\<rbrakk>\n  \\<Longrightarrow> card (UNIV - above ao \\<union> above ao) =\n                    card (UNIV - above ao) + card (above ao)\n\ngoal (1 subgoal):\n 1. CARD('a) = card (UNIV - above ao) + card (above ao)", "by auto"], ["proof (state)\nthis:\n  CARD('a) = card (UNIV - above ao) + card (above ao)\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> card (UNIV - above ao) + 1 < CARD('a)\n  card (UNIV - above ao) \\<le> CARD('a)\n  CARD('a) = card (UNIV - above ao) + card (above ao)", "have \"card (above ao) = 1\""], ["proof (prove)\nusing this:\n  \\<not> card (UNIV - above ao) + 1 < CARD('a)\n  card (UNIV - above ao) \\<le> CARD('a)\n  CARD('a) = card (UNIV - above ao) + card (above ao)\n\ngoal (1 subgoal):\n 1. card (above ao) = 1", "using x"], ["proof (prove)\nusing this:\n  \\<not> card (UNIV - above ao) + 1 < CARD('a)\n  card (UNIV - above ao) \\<le> CARD('a)\n  CARD('a) = card (UNIV - above ao) + card (above ao)\n  x \\<in> A\n  x \\<in> above ao\n\ngoal (1 subgoal):\n 1. card (above ao) = 1", "by(cases \"card (above ao)\")(auto simp add: not_less_eq less_Suc_eq_le)"], ["proof (state)\nthis:\n  card (above ao) = 1\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "with x"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x \\<in> above ao\n  card (above ao) = 1", "have \"above ao = {x}\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  x \\<in> above ao\n  card (above ao) = 1\n\ngoal (1 subgoal):\n 1. above ao = {x}", "unfolding card_eq_1_iff"], ["proof (prove)\nusing this:\n  x \\<in> A\n  x \\<in> above ao\n  \\<exists>x. above ao = {x}\n\ngoal (1 subgoal):\n 1. above ao = {x}", "by auto"], ["proof (state)\nthis:\n  above ao = {x}\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  above ao = {x}\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "with x subset"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x \\<in> above ao\n  A \\<subseteq> above ao\n  above ao = {x}", "have A: \"A = {x}\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  x \\<in> above ao\n  A \\<subseteq> above ao\n  above ao = {x}\n\ngoal (1 subgoal):\n 1. A = {x}", "by auto"], ["proof (state)\nthis:\n  A = {x}\n\ngoal (1 subgoal):\n 1. \\<not> card (UNIV - above ao) + 1 < CARD('a) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  above ao = {x}\n  A = {x}", "show False"], ["proof (prove)\nusing this:\n  above ao = {x}\n  A = {x}\n\ngoal (1 subgoal):\n 1. False", "using less"], ["proof (prove)\nusing this:\n  above ao = {x}\n  A = {x}\n  A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (UNIV - above ao) + 1 < CARD('a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (card (UNIV - above ao) + 1 < CARD('a)) =\n  (\\<exists>A\\<subseteq>above ao.\n      A \\<noteq> {} \\<and> A \\<sqsubset>' above ao)\n\ngoal (4 subgoals):\n 1. \\<And>ao.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 3. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 4. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "thus ?case"], ["proof (prove)\nusing this:\n  (card (UNIV - above ao) + 1 < CARD('a)) =\n  (\\<exists>A\\<subseteq>above ao.\n      A \\<noteq> {} \\<and> A \\<sqsubset>' above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) [] [] =\n    (\\<exists>A\\<subseteq>above ao.\n        set [] \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set [] \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) [] [] =\n  (\\<exists>A\\<subseteq>above ao.\n      set [] \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set [] \\<inter> above ao)\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "case (2 ao y ys)"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "note ys = \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close> \\<open>set (y # ys) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have len_ys: \"length ys = card (set ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = card (set ys)", "using ys"], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. length ys = card (set ys)", "by(auto simp add: List.card_set intro: sym)"], ["proof (state)\nthis:\n  length ys = card (set ys)\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "define m where \"m = CARD('a) - card (UNIV - above ao)\""], ["proof (state)\nthis:\n  m = CARD('a) - card (UNIV - above ao)\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have \"CARD('a) = card (above ao) + card (UNIV - above ao)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a) = card (above ao) + card (UNIV - above ao)", "using card_Un_disjoint[of \"above ao\" \"UNIV - above ao\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (above ao); finite (UNIV - above ao);\n   above ao \\<inter> (UNIV - above ao) = {}\\<rbrakk>\n  \\<Longrightarrow> card (above ao \\<union> (UNIV - above ao)) =\n                    card (above ao) + card (UNIV - above ao)\n\ngoal (1 subgoal):\n 1. CARD('a) = card (above ao) + card (UNIV - above ao)", "by auto"], ["proof (state)\nthis:\n  CARD('a) = card (above ao) + card (UNIV - above ao)\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "hence m_eq: \"m = card (above ao)\""], ["proof (prove)\nusing this:\n  CARD('a) = card (above ao) + card (UNIV - above ao)\n\ngoal (1 subgoal):\n 1. m = card (above ao)", "unfolding m_def"], ["proof (prove)\nusing this:\n  CARD('a) = card (above ao) + card (UNIV - above ao)\n\ngoal (1 subgoal):\n 1. CARD('a) - card (UNIV - above ao) = card (above ao)", "by simp"], ["proof (state)\nthis:\n  m = card (above ao)\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have \"m \\<noteq> length ys + 1 \\<and> (m = length ys + 2 \\<longrightarrow> \\<not> proper_interval (Some (last (y # ys))) None) \\<longleftrightarrow>\n        (\\<exists>A \\<subseteq> above ao. A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\" (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (m \\<noteq> length ys + 1 \\<and>\n     (m = length ys + 2 \\<longrightarrow>\n      \\<not> proper_interval (Some (last (y # ys))) None)) =\n    (\\<exists>A\\<subseteq>above ao.\n        A \\<noteq> {} \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "assume ?lhs"], ["proof (state)\nthis:\n  m \\<noteq> length ys + 1 \\<and>\n  (m = length ys + 2 \\<longrightarrow>\n   \\<not> proper_interval (Some (last (y # ys))) None)\n\ngoal (2 subgoals):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "hence m: \"m \\<noteq> length ys + 1\"\n          and pi: \"m = length ys + 2 \\<Longrightarrow> \\<not> proper_interval (Some (last (y # ys))) None\""], ["proof (prove)\nusing this:\n  m \\<noteq> length ys + 1 \\<and>\n  (m = length ys + 2 \\<longrightarrow>\n   \\<not> proper_interval (Some (last (y # ys))) None)\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 1 &&&\n    (m = length ys + 2 \\<Longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "by simp_all"], ["proof (state)\nthis:\n  m \\<noteq> length ys + 1\n  m = length ys + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (y # ys))) None\n\ngoal (2 subgoals):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "have \"length ys + 1 = card (set (y # ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys + 1 = card (set (y # ys))", "using ys len_ys"], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n\ngoal (1 subgoal):\n 1. length ys + 1 = card (set (y # ys))", "by simp"], ["proof (state)\nthis:\n  length ys + 1 = card (set (y # ys))\n\ngoal (2 subgoals):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "also"], ["proof (state)\nthis:\n  length ys + 1 = card (set (y # ys))\n\ngoal (2 subgoals):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "have \"\\<dots> \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (y # ys)) \\<le> m", "unfolding m_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (y # ys)) \\<le> card (above ao)", "by(rule card_mono)(simp, rule ys)"], ["proof (state)\nthis:\n  card (set (y # ys)) \\<le> m\n\ngoal (2 subgoals):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "finally"], ["proof (chain)\npicking this:\n  length ys + 1 \\<le> m", "have \"length ys + 2 \\<le> m\""], ["proof (prove)\nusing this:\n  length ys + 1 \\<le> m\n\ngoal (1 subgoal):\n 1. length ys + 2 \\<le> m", "using m"], ["proof (prove)\nusing this:\n  length ys + 1 \\<le> m\n  m \\<noteq> length ys + 1\n\ngoal (1 subgoal):\n 1. length ys + 2 \\<le> m", "by simp"], ["proof (state)\nthis:\n  length ys + 2 \\<le> m\n\ngoal (2 subgoals):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "show ?rhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "proof(cases \"m = length ys + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "case True"], ["proof (state)\nthis:\n  m = length ys + 2\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"card (UNIV - (UNIV - above ao) - set (y # ys)) = 1\""], ["proof (prove)\nusing this:\n  m = length ys + 2\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (y # ys)) = 1", "using ys len_ys"], ["proof (prove)\nusing this:\n  m = length ys + 2\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (y # ys)) = 1", "by(subst card_Diff_subset)(auto simp add: m_def card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) = 1\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "then"], ["proof (chain)\npicking this:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) = 1", "obtain z where z: \"z \\<in> above ao\" \"z \\<noteq> y\" \"z \\<notin> set ys\""], ["proof (prove)\nusing this:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z \\<noteq> y; z \\<notin> set ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding card_eq_1_iff"], ["proof (prove)\nusing this:\n  \\<exists>x. UNIV - (UNIV - above ao) - set (y # ys) = {x}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z \\<noteq> y; z \\<notin> set ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z \\<noteq> y\n  z \\<notin> set ys\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "from True"], ["proof (chain)\npicking this:\n  m = length ys + 2", "have \"\\<not> proper_interval (Some (last (y # ys))) None\""], ["proof (prove)\nusing this:\n  m = length ys + 2\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval (Some (last (y # ys))) None", "by(rule pi)"], ["proof (state)\nthis:\n  \\<not> proper_interval (Some (last (y # ys))) None\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"z \\<le> last (y # ys)\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval (Some (last (y # ys))) None\n\ngoal (1 subgoal):\n 1. z \\<le> last (y # ys)", "by(simp add: proper_interval_simps not_less del: last.simps)"], ["proof (state)\nthis:\n  z \\<le> last (y # ys)\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  z \\<le> last (y # ys)\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have ly: \"last (y # ys) \\<in> set (y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (y # ys) \\<in> set (y # ys)", "by(rule last_in_set) simp"], ["proof (state)\nthis:\n  last (y # ys) \\<in> set (y # ys)\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "with z"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z \\<noteq> y\n  z \\<notin> set ys\n  last (y # ys) \\<in> set (y # ys)", "have \"z \\<noteq> last (y # ys)\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z \\<noteq> y\n  z \\<notin> set ys\n  last (y # ys) \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. z \\<noteq> last (y # ys)", "by auto"], ["proof (state)\nthis:\n  z \\<noteq> last (y # ys)\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  z \\<le> last (y # ys)\n  z \\<noteq> last (y # ys)", "have \"z < last (y # ys)\""], ["proof (prove)\nusing this:\n  z \\<le> last (y # ys)\n  z \\<noteq> last (y # ys)\n\ngoal (1 subgoal):\n 1. z < last (y # ys)", "by simp"], ["proof (state)\nthis:\n  z < last (y # ys)\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"{last (y # ys)} \\<sqsubset>' {z}\""], ["proof (prove)\nusing this:\n  z < last (y # ys)\n\ngoal (1 subgoal):\n 1. {last (y # ys)} \\<sqsubset>' {z}", "using z ly ys"], ["proof (prove)\nusing this:\n  z < last (y # ys)\n  z \\<in> above ao\n  z \\<noteq> y\n  z \\<notin> set ys\n  last (y # ys) \\<in> set (y # ys)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. {last (y # ys)} \\<sqsubset>' {z}", "by(auto 4 3 simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  {last (y # ys)} \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "also"], ["proof (state)\nthis:\n  {last (y # ys)} \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"\\<dots> \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "using z"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z \\<noteq> y\n  z \\<notin> set ys\n\ngoal (1 subgoal):\n 1. {z} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  {z} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "also"], ["proof (state)\nthis:\n  {z} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"{last (y # ys)} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {last (y # ys)} \\<noteq> {}", "using ly ys"], ["proof (prove)\nusing this:\n  last (y # ys) \\<in> set (y # ys)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. {last (y # ys)} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  {last (y # ys)} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  {last (y # ys)} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"{last (y # ys)} \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {last (y # ys)} \\<subseteq> above ao", "using ys"], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. {last (y # ys)} \\<subseteq> above ao", "by auto"], ["proof (state)\nthis:\n  {last (y # ys)} \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. m = length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  {last (y # ys)} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {last (y # ys)} \\<noteq> {}\n  {last (y # ys)} \\<subseteq> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  {last (y # ys)} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {last (y # ys)} \\<noteq> {}\n  {last (y # ys)} \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "case False"], ["proof (state)\nthis:\n  m \\<noteq> length ys + 2\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "with \\<open>length ys + 2 \\<le> m\\<close> ys len_ys"], ["proof (chain)\npicking this:\n  length ys + 2 \\<le> m\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n  m \\<noteq> length ys + 2", "have \"card (UNIV - (UNIV - above ao) - set (y # ys)) > 1\""], ["proof (prove)\nusing this:\n  length ys + 2 \\<le> m\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n  m \\<noteq> length ys + 2\n\ngoal (1 subgoal):\n 1. 1 < card (UNIV - (UNIV - above ao) - set (y # ys))", "by(subst card_Diff_subset)(auto simp add: card_Diff_subset m_def)"], ["proof (state)\nthis:\n  1 < card (UNIV - (UNIV - above ao) - set (y # ys))\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "from card_gt_1D[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>x ya.\n     x \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and>\n     ya \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and> x \\<noteq> ya", "obtain x x' where x: \"x \\<in> above ao\" \"x \\<noteq> y\" \"x \\<notin> set ys\"\n            and x': \"x' \\<in> above ao\" \"x' \\<noteq> y\" \"x' \\<notin> set ys\"\n            and neq: \"x \\<noteq> x'\""], ["proof (prove)\nusing this:\n  \\<exists>x ya.\n     x \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and>\n     ya \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and> x \\<noteq> ya\n\ngoal (1 subgoal):\n 1. (\\<And>x x'.\n        \\<lbrakk>x \\<in> above ao; x \\<noteq> y; x \\<notin> set ys;\n         x' \\<in> above ao; x' \\<noteq> y; x' \\<notin> set ys;\n         x \\<noteq> x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> above ao\n  x \\<noteq> y\n  x \\<notin> set ys\n  x' \\<in> above ao\n  x' \\<noteq> y\n  x' \\<notin> set ys\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"{x} \\<sqsubset>' {x, x'} \\<inter> above ao\""], ["proof (prove)\nusing this:\n  x \\<in> above ao\n  x \\<noteq> y\n  x \\<notin> set ys\n  x' \\<in> above ao\n  x' \\<noteq> y\n  x' \\<notin> set ys\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. {x} \\<sqsubset>' {x, x'} \\<inter> above ao", "by(simp_all add: psubsetI psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  {x} \\<sqsubset>' {x, x'} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "also"], ["proof (state)\nthis:\n  {x} \\<sqsubset>' {x, x'} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"\\<dots> \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x, x'} \\<inter> above ao \\<sqsubseteq>'\n    - set (y # ys) \\<inter> above ao", "using x x' ys"], ["proof (prove)\nusing this:\n  x \\<in> above ao\n  x \\<noteq> y\n  x \\<notin> set ys\n  x' \\<in> above ao\n  x' \\<noteq> y\n  x' \\<notin> set ys\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. {x, x'} \\<inter> above ao \\<sqsubseteq>'\n    - set (y # ys) \\<inter> above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  {x, x'} \\<inter> above ao \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "also"], ["proof (state)\nthis:\n  {x, x'} \\<inter> above ao \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"{x} \\<inter> above ao \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<inter> above ao \\<noteq> {}", "using x"], ["proof (prove)\nusing this:\n  x \\<in> above ao\n  x \\<noteq> y\n  x \\<notin> set ys\n\ngoal (1 subgoal):\n 1. {x} \\<inter> above ao \\<noteq> {}", "by simp"], ["proof (state)\nthis:\n  {x} \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  {x} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {x} \\<inter> above ao \\<noteq> {}", "show ?rhs"], ["proof (prove)\nusing this:\n  {x} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {x} \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "obtain A where nempty: \"A \\<noteq> {}\"\n          and less: \"A \\<sqsubset>' - set (y # ys) \\<inter> above ao\"\n          and subset: \"A \\<subseteq> above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<noteq> {};\n         A \\<sqsubset>' - set (y # ys) \\<inter> above ao;\n         A \\<subseteq> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A \\<noteq> {}\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "have \"card (set (y # ys)) \\<le> card (above ao)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (y # ys)) \\<le> card (above ao)", "using ys(3)"], ["proof (prove)\nusing this:\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. card (set (y # ys)) \\<le> card (above ao)", "by(simp add: card_mono)"], ["proof (state)\nthis:\n  card (set (y # ys)) \\<le> card (above ao)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "hence \"length ys + 1 \\<le> m\""], ["proof (prove)\nusing this:\n  card (set (y # ys)) \\<le> card (above ao)\n\ngoal (1 subgoal):\n 1. length ys + 1 \\<le> m", "unfolding m_eq"], ["proof (prove)\nusing this:\n  card (set (y # ys)) \\<le> card (above ao)\n\ngoal (1 subgoal):\n 1. length ys + 1 \\<le> card (above ao)", "using ys"], ["proof (prove)\nusing this:\n  card (set (y # ys)) \\<le> card (above ao)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. length ys + 1 \\<le> card (above ao)", "by(simp add: len_ys)"], ["proof (state)\nthis:\n  length ys + 1 \\<le> m\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "have \"m \\<noteq> length ys + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. m = length ys + 1 \\<Longrightarrow> False", "assume \"m = length ys + 1\""], ["proof (state)\nthis:\n  m = length ys + 1\n\ngoal (1 subgoal):\n 1. m = length ys + 1 \\<Longrightarrow> False", "hence \"card (above ao) \\<le> card (set (y # ys))\""], ["proof (prove)\nusing this:\n  m = length ys + 1\n\ngoal (1 subgoal):\n 1. card (above ao) \\<le> card (set (y # ys))", "unfolding m_eq"], ["proof (prove)\nusing this:\n  card (above ao) = length ys + 1\n\ngoal (1 subgoal):\n 1. card (above ao) \\<le> card (set (y # ys))", "using ys len_ys"], ["proof (prove)\nusing this:\n  card (above ao) = length ys + 1\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n\ngoal (1 subgoal):\n 1. card (above ao) \\<le> card (set (y # ys))", "by auto"], ["proof (state)\nthis:\n  card (above ao) \\<le> card (set (y # ys))\n\ngoal (1 subgoal):\n 1. m = length ys + 1 \\<Longrightarrow> False", "from card_seteq[OF _ _ this] ys"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite (above ao); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n  \\<Longrightarrow> set (y # ys) = above ao\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao", "have \"set (y # ys) = above ao\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (above ao); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n  \\<Longrightarrow> set (y # ys) = above ao\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set (y # ys) = above ao", "by simp"], ["proof (state)\nthis:\n  set (y # ys) = above ao\n\ngoal (1 subgoal):\n 1. m = length ys + 1 \\<Longrightarrow> False", "with nempty less"], ["proof (chain)\npicking this:\n  A \\<noteq> {}\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  set (y # ys) = above ao", "show False"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  set (y # ys) = above ao\n\ngoal (1 subgoal):\n 1. False", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m \\<noteq> length ys + 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "moreover"], ["proof (state)\nthis:\n  m \\<noteq> length ys + 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "{"], ["proof (state)\nthis:\n  m \\<noteq> length ys + 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "assume \"m = length ys + 2\""], ["proof (state)\nthis:\n  m = length ys + 2\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "hence \"card (above ao - set (y # ys)) = 1\""], ["proof (prove)\nusing this:\n  m = length ys + 2\n\ngoal (1 subgoal):\n 1. card (above ao - set (y # ys)) = 1", "using ys len_ys m_eq"], ["proof (prove)\nusing this:\n  m = length ys + 2\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n  m = card (above ao)\n\ngoal (1 subgoal):\n 1. card (above ao - set (y # ys)) = 1", "by(auto simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (above ao - set (y # ys)) = 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "then"], ["proof (chain)\npicking this:\n  card (above ao - set (y # ys)) = 1", "obtain z where z: \"above ao - set (y # ys) = {z}\""], ["proof (prove)\nusing this:\n  card (above ao - set (y # ys)) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        above ao - set (y # ys) = {z} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding card_eq_1_iff"], ["proof (prove)\nusing this:\n  \\<exists>x. above ao - set (y # ys) = {x}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        above ao - set (y # ys) = {z} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  above ao - set (y # ys) = {z}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "hence eq_z: \"- set (y # ys) \\<inter> above ao = {z}\""], ["proof (prove)\nusing this:\n  above ao - set (y # ys) = {z}\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao = {z}", "by auto"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao = {z}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "with less"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  - set (y # ys) \\<inter> above ao = {z}", "have \"A \\<sqsubset>' {z}\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  - set (y # ys) \\<inter> above ao = {z}\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' {z}", "by simp"], ["proof (state)\nthis:\n  A \\<sqsubset>' {z}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "have \"\\<not> proper_interval (Some (last (y # ys))) None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> proper_interval (Some (last (y # ys))) None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "assume \"proper_interval (Some (last (y # ys))) None\""], ["proof (state)\nthis:\n  proper_interval (Some (last (y # ys))) None\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  proper_interval (Some (last (y # ys))) None", "obtain z' where z': \"last (y # ys) < z'\""], ["proof (prove)\nusing this:\n  proper_interval (Some (last (y # ys))) None\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        last (y # ys) < z' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp add: proper_interval_simps)"], ["proof (state)\nthis:\n  last (y # ys) < z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "have \"last (y # ys) \\<in> set (y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (y # ys) \\<in> set (y # ys)", "by(rule last_in_set) simp"], ["proof (state)\nthis:\n  last (y # ys) \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "with ys z'"], ["proof (chain)\npicking this:\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  last (y # ys) < z'\n  last (y # ys) \\<in> set (y # ys)", "have \"z' \\<in> above ao\" \"z' \\<notin> set (y # ys)\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n  last (y # ys) < z'\n  last (y # ys) \\<in> set (y # ys)\n\ngoal (1 subgoal):\n 1. z' \\<in> above ao &&& z' \\<notin> set (y # ys)", "by(auto simp del: last.simps sorted.simps(2) intro: above_upclosed dest: sorted_last)"], ["proof (state)\nthis:\n  z' \\<in> above ao\n  z' \\<notin> set (y # ys)\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "with eq_z"], ["proof (chain)\npicking this:\n  - set (y # ys) \\<inter> above ao = {z}\n  z' \\<in> above ao\n  z' \\<notin> set (y # ys)", "have \"z = z'\""], ["proof (prove)\nusing this:\n  - set (y # ys) \\<inter> above ao = {z}\n  z' \\<in> above ao\n  z' \\<notin> set (y # ys)\n\ngoal (1 subgoal):\n 1. z = z'", "by fastforce"], ["proof (state)\nthis:\n  z = z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "from z'"], ["proof (chain)\npicking this:\n  last (y # ys) < z'", "have \"\\<And>x. x \\<in> set (y # ys) \\<Longrightarrow> x < z'\""], ["proof (prove)\nusing this:\n  last (y # ys) < z'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (y # ys) \\<Longrightarrow> x < z'", "using ys"], ["proof (prove)\nusing this:\n  last (y # ys) < z'\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (y # ys) \\<Longrightarrow> x < z'", "by(auto dest: sorted_last simp del: sorted.simps(2))"], ["proof (state)\nthis:\n  ?x \\<in> set (y # ys) \\<Longrightarrow> ?x < z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "with eq_z \\<open>z = z'\\<close>"], ["proof (chain)\npicking this:\n  - set (y # ys) \\<inter> above ao = {z}\n  z = z'\n  ?x \\<in> set (y # ys) \\<Longrightarrow> ?x < z'", "have \"\\<And>x. x \\<in> above ao \\<Longrightarrow> x \\<le> z'\""], ["proof (prove)\nusing this:\n  - set (y # ys) \\<inter> above ao = {z}\n  z = z'\n  ?x \\<in> set (y # ys) \\<Longrightarrow> ?x < z'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> above ao \\<Longrightarrow> x \\<le> z'", "by(fastforce)"], ["proof (state)\nthis:\n  ?x \\<in> above ao \\<Longrightarrow> ?x \\<le> z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (y # ys))) None \\<Longrightarrow> False", "with \\<open>A \\<sqsubset>' {z}\\<close> nempty \\<open>z = z'\\<close> subset"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' {z}\n  A \\<noteq> {}\n  z = z'\n  A \\<subseteq> above ao\n  ?x \\<in> above ao \\<Longrightarrow> ?x \\<le> z'", "show False"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' {z}\n  A \\<noteq> {}\n  z = z'\n  A \\<subseteq> above ao\n  ?x \\<in> above ao \\<Longrightarrow> ?x \\<le> z'\n\ngoal (1 subgoal):\n 1. False", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> proper_interval (Some (last (y # ys))) None\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "}"], ["proof (state)\nthis:\n  m = length ys + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (y # ys))) None\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       A \\<noteq> {} \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "ultimately"], ["proof (chain)\npicking this:\n  m \\<noteq> length ys + 1\n  m = length ys + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (y # ys))) None", "show ?lhs"], ["proof (prove)\nusing this:\n  m \\<noteq> length ys + 1\n  m = length ys + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (y # ys))) None\n\ngoal (1 subgoal):\n 1. m \\<noteq> length ys + 1 \\<and>\n    (m = length ys + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (y # ys))) None)", "by simp"], ["proof (state)\nthis:\n  m \\<noteq> length ys + 1 \\<and>\n  (m = length ys + 2 \\<longrightarrow>\n   \\<not> proper_interval (Some (last (y # ys))) None)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (m \\<noteq> length ys + 1 \\<and>\n   (m = length ys + 2 \\<longrightarrow>\n    \\<not> proper_interval (Some (last (y # ys))) None)) =\n  (\\<exists>A\\<subseteq>above ao.\n      A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (3 subgoals):\n 1. \\<And>ao y ys.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted (y # ys); distinct (y # ys);\n        set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) [] (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set [] \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)\n 2. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 3. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "thus ?case"], ["proof (prove)\nusing this:\n  (m \\<noteq> length ys + 1 \\<and>\n   (m = length ys + 2 \\<longrightarrow>\n    \\<not> proper_interval (Some (last (y # ys))) None)) =\n  (\\<exists>A\\<subseteq>above ao.\n      A \\<noteq> {} \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) [] (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set [] \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by(simp add: length_last_def m_def Let_def)"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) [] (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set [] \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "case (3 ao x xs)"], ["proof (state)\nthis:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "note xs = \\<open>sorted (x # xs)\\<close> \\<open>distinct (x # xs)\\<close> \\<open>set (x # xs) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have len_xs: \"length xs = card (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = card (set xs)", "using xs"], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. length xs = card (set xs)", "by(auto simp add: List.card_set intro: sym)"], ["proof (state)\nthis:\n  length xs = card (set xs)\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "define m where \"m = CARD('a) - card (UNIV - above ao)\""], ["proof (state)\nthis:\n  m = CARD('a) - card (UNIV - above ao)\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have \"CARD('a) = card (above ao) + card (UNIV - above ao)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a) = card (above ao) + card (UNIV - above ao)", "using card_Un_disjoint[of \"above ao\" \"UNIV - above ao\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (above ao); finite (UNIV - above ao);\n   above ao \\<inter> (UNIV - above ao) = {}\\<rbrakk>\n  \\<Longrightarrow> card (above ao \\<union> (UNIV - above ao)) =\n                    card (above ao) + card (UNIV - above ao)\n\ngoal (1 subgoal):\n 1. CARD('a) = card (above ao) + card (UNIV - above ao)", "by auto"], ["proof (state)\nthis:\n  CARD('a) = card (above ao) + card (UNIV - above ao)\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "hence m_eq: \"m = card (above ao)\""], ["proof (prove)\nusing this:\n  CARD('a) = card (above ao) + card (UNIV - above ao)\n\ngoal (1 subgoal):\n 1. m = card (above ao)", "unfolding m_def"], ["proof (prove)\nusing this:\n  CARD('a) = card (above ao) + card (UNIV - above ao)\n\ngoal (1 subgoal):\n 1. CARD('a) - card (UNIV - above ao) = card (above ao)", "by simp"], ["proof (state)\nthis:\n  m = card (above ao)\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have \"m \\<noteq> length xs + 1 \\<and> (m = length xs + 2 \\<longrightarrow> \\<not> proper_interval (Some (last (x # xs))) None) \\<longleftrightarrow>\n        (\\<exists>A \\<subseteq> above ao. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao)\" (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (m \\<noteq> length xs + 1 \\<and>\n     (m = length xs + 2 \\<longrightarrow>\n      \\<not> proper_interval (Some (last (x # xs))) None)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "assume ?lhs"], ["proof (state)\nthis:\n  m \\<noteq> length xs + 1 \\<and>\n  (m = length xs + 2 \\<longrightarrow>\n   \\<not> proper_interval (Some (last (x # xs))) None)\n\ngoal (2 subgoals):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "hence m: \"m \\<noteq> length xs + 1\"\n          and pi: \"m = length xs + 2 \\<Longrightarrow> \\<not> proper_interval (Some (last (x # xs))) None\""], ["proof (prove)\nusing this:\n  m \\<noteq> length xs + 1 \\<and>\n  (m = length xs + 2 \\<longrightarrow>\n   \\<not> proper_interval (Some (last (x # xs))) None)\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 1 &&&\n    (m = length xs + 2 \\<Longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "by simp_all"], ["proof (state)\nthis:\n  m \\<noteq> length xs + 1\n  m = length xs + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (x # xs))) None\n\ngoal (2 subgoals):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "have \"length xs + 1 = card (set (x # xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs + 1 = card (set (x # xs))", "using xs len_xs"], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n\ngoal (1 subgoal):\n 1. length xs + 1 = card (set (x # xs))", "by simp"], ["proof (state)\nthis:\n  length xs + 1 = card (set (x # xs))\n\ngoal (2 subgoals):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "also"], ["proof (state)\nthis:\n  length xs + 1 = card (set (x # xs))\n\ngoal (2 subgoals):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "have \"\\<dots> \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (x # xs)) \\<le> m", "unfolding m_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (x # xs)) \\<le> card (above ao)", "by(rule card_mono)(simp, rule xs)"], ["proof (state)\nthis:\n  card (set (x # xs)) \\<le> m\n\ngoal (2 subgoals):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "finally"], ["proof (chain)\npicking this:\n  length xs + 1 \\<le> m", "have \"length xs + 2 \\<le> m\""], ["proof (prove)\nusing this:\n  length xs + 1 \\<le> m\n\ngoal (1 subgoal):\n 1. length xs + 2 \\<le> m", "using m"], ["proof (prove)\nusing this:\n  length xs + 1 \\<le> m\n  m \\<noteq> length xs + 1\n\ngoal (1 subgoal):\n 1. length xs + 2 \\<le> m", "by simp"], ["proof (state)\nthis:\n  length xs + 2 \\<le> m\n\ngoal (2 subgoals):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "show ?rhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "proof(cases \"m = length xs + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "case True"], ["proof (state)\nthis:\n  m = length xs + 2\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence \"card (UNIV - (UNIV - above ao) - set (x # xs)) = 1\""], ["proof (prove)\nusing this:\n  m = length xs + 2\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (x # xs)) = 1", "using xs len_xs"], ["proof (prove)\nusing this:\n  m = length xs + 2\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (x # xs)) = 1", "by(subst card_Diff_subset)(auto simp add: m_def card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) = 1\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "then"], ["proof (chain)\npicking this:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) = 1", "obtain z where z: \"z \\<in> above ao\" \"z \\<noteq> x\" \"z \\<notin> set xs\""], ["proof (prove)\nusing this:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z \\<noteq> x; z \\<notin> set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding card_eq_1_iff"], ["proof (prove)\nusing this:\n  \\<exists>xa. UNIV - (UNIV - above ao) - set (x # xs) = {xa}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z \\<noteq> x; z \\<notin> set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z \\<noteq> x\n  z \\<notin> set xs\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "define A where \"A = insert z {y. y \\<in> set (x # xs) \\<and> y < z}\""], ["proof (state)\nthis:\n  A = insert z {y \\<in> set (x # xs). y < z}\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "from True"], ["proof (chain)\npicking this:\n  m = length xs + 2", "have \"\\<not> proper_interval (Some (last (x # xs))) None\""], ["proof (prove)\nusing this:\n  m = length xs + 2\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval (Some (last (x # xs))) None", "by(rule pi)"], ["proof (state)\nthis:\n  \\<not> proper_interval (Some (last (x # xs))) None\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence \"z \\<le> last (x # xs)\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval (Some (last (x # xs))) None\n\ngoal (1 subgoal):\n 1. z \\<le> last (x # xs)", "by(simp add: proper_interval_simps not_less del: last.simps)"], ["proof (state)\nthis:\n  z \\<le> last (x # xs)\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "moreover"], ["proof (state)\nthis:\n  z \\<le> last (x # xs)\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "have lx: \"last (x # xs) \\<in> set (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (x # xs) \\<in> set (x # xs)", "by(rule last_in_set) simp"], ["proof (state)\nthis:\n  last (x # xs) \\<in> set (x # xs)\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "with z"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z \\<noteq> x\n  z \\<notin> set xs\n  last (x # xs) \\<in> set (x # xs)", "have \"z \\<noteq> last (x # xs)\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z \\<noteq> x\n  z \\<notin> set xs\n  last (x # xs) \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. z \\<noteq> last (x # xs)", "by auto"], ["proof (state)\nthis:\n  z \\<noteq> last (x # xs)\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "ultimately"], ["proof (chain)\npicking this:\n  z \\<le> last (x # xs)\n  z \\<noteq> last (x # xs)", "have \"z < last (x # xs)\""], ["proof (prove)\nusing this:\n  z \\<le> last (x # xs)\n  z \\<noteq> last (x # xs)\n\ngoal (1 subgoal):\n 1. z < last (x # xs)", "by simp"], ["proof (state)\nthis:\n  z < last (x # xs)\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence \"set (x # xs) \\<sqsubset>' A\""], ["proof (prove)\nusing this:\n  z < last (x # xs)\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A", "using z xs"], ["proof (prove)\nusing this:\n  z < last (x # xs)\n  z \\<in> above ao\n  z \\<noteq> x\n  z \\<notin> set xs\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A", "by(auto simp add: A_def set_less_aux_def intro: rev_bexI[where x=z])"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "have \"last (x # xs) \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (x # xs) \\<notin> A", "using xs \\<open>z < last (x # xs)\\<close>"], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  z < last (x # xs)\n\ngoal (1 subgoal):\n 1. last (x # xs) \\<notin> A", "by(auto simp add: A_def simp del: last.simps)"], ["proof (state)\nthis:\n  last (x # xs) \\<notin> A\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence \"A \\<subset> insert (last (x # xs)) A\""], ["proof (prove)\nusing this:\n  last (x # xs) \\<notin> A\n\ngoal (1 subgoal):\n 1. A \\<subset> insert (last (x # xs)) A", "by blast"], ["proof (state)\nthis:\n  A \\<subset> insert (last (x # xs)) A\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence less': \"A \\<sqsubset>' insert (last (x # xs)) A\""], ["proof (prove)\nusing this:\n  A \\<subset> insert (last (x # xs)) A\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' insert (last (x # xs)) A", "by(rule psubset_finite_imp_set_less_aux) simp"], ["proof (state)\nthis:\n  A \\<sqsubset>' insert (last (x # xs)) A\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "have \"\\<dots> \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (last (x # xs)) A \\<subseteq> above ao", "using xs lx z"], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  last (x # xs) \\<in> set (x # xs)\n  z \\<in> above ao\n  z \\<noteq> x\n  z \\<notin> set xs\n\ngoal (1 subgoal):\n 1. insert (last (x # xs)) A \\<subseteq> above ao", "by(auto simp del: last.simps simp add: A_def)"], ["proof (state)\nthis:\n  insert (last (x # xs)) A \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence \"insert (last (x # xs)) A \\<sqsubseteq>' above ao\""], ["proof (prove)\nusing this:\n  insert (last (x # xs)) A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. insert (last (x # xs)) A \\<sqsubseteq>' above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  insert (last (x # xs)) A \\<sqsubseteq>' above ao\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "with less'"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' insert (last (x # xs)) A\n  insert (last (x # xs)) A \\<sqsubseteq>' above ao", "have \"A \\<sqsubset>' above ao\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' insert (last (x # xs)) A\n  insert (last (x # xs)) A \\<sqsubseteq>' above ao\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' above ao", "by(rule set_less_trans_set_less_eq)"], ["proof (state)\nthis:\n  A \\<sqsubset>' above ao\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "moreover"], ["proof (state)\nthis:\n  A \\<sqsubset>' above ao\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "have \"A \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> above ao", "using xs z"], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  z \\<in> above ao\n  z \\<noteq> x\n  z \\<notin> set xs\n\ngoal (1 subgoal):\n 1. A \\<subseteq> above ao", "by(auto simp add: A_def)"], ["proof (state)\nthis:\n  A \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. m = length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n 2. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' above ao\n  A \\<subseteq> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' above ao\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "case False"], ["proof (state)\nthis:\n  m \\<noteq> length xs + 2\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "with \\<open>length xs + 2 \\<le> m\\<close> xs len_xs"], ["proof (chain)\npicking this:\n  length xs + 2 \\<le> m\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n  m \\<noteq> length xs + 2", "have \"card (UNIV - (UNIV - above ao) - set (x # xs)) > 1\""], ["proof (prove)\nusing this:\n  length xs + 2 \\<le> m\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n  m \\<noteq> length xs + 2\n\ngoal (1 subgoal):\n 1. 1 < card (UNIV - (UNIV - above ao) - set (x # xs))", "by(subst card_Diff_subset)(auto simp add: card_Diff_subset m_def)"], ["proof (state)\nthis:\n  1 < card (UNIV - (UNIV - above ao) - set (x # xs))\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "from card_gt_1D[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>xa y.\n     xa \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and>\n     y \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and> xa \\<noteq> y", "obtain y y' where y: \"y \\<in> above ao\" \"y \\<noteq> x\" \"y \\<notin> set xs\"\n            and y': \"y' \\<in> above ao\" \"y' \\<noteq> x\" \"y' \\<notin> set xs\"\n            and neq: \"y \\<noteq> y'\""], ["proof (prove)\nusing this:\n  \\<exists>xa y.\n     xa \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and>\n     y \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and> xa \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<And>y y'.\n        \\<lbrakk>y \\<in> above ao; y \\<noteq> x; y \\<notin> set xs;\n         y' \\<in> above ao; y' \\<noteq> x; y' \\<notin> set xs;\n         y \\<noteq> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in> above ao\n  y \\<noteq> x\n  y \\<notin> set xs\n  y' \\<in> above ao\n  y' \\<noteq> x\n  y' \\<notin> set xs\n  y \\<noteq> y'\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "define A where \"A = insert y (set (x # xs) \\<inter> above ao)\""], ["proof (state)\nthis:\n  A = insert y (set (x # xs) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence \"set (x # xs) \\<subset> A\""], ["proof (prove)\nusing this:\n  A = insert y (set (x # xs) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subset> A", "using y xs"], ["proof (prove)\nusing this:\n  A = insert y (set (x # xs) \\<inter> above ao)\n  y \\<in> above ao\n  y \\<noteq> x\n  y \\<notin> set xs\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subset> A", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<subset> A\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "hence \"set (x # xs) \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<subset> A\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A", "by(fastforce intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "have *: \"\\<dots> \\<subset> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subset> above ao", "using y y' neq"], ["proof (prove)\nusing this:\n  y \\<in> above ao\n  y \\<noteq> x\n  y \\<notin> set xs\n  y' \\<in> above ao\n  y' \\<noteq> x\n  y' \\<notin> set xs\n  y \\<noteq> y'\n\ngoal (1 subgoal):\n 1. A \\<subset> above ao", "by(auto simp add: A_def)"], ["proof (state)\nthis:\n  A \\<subset> above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "moreover"], ["proof (state)\nthis:\n  A \\<subset> above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "from *"], ["proof (chain)\npicking this:\n  A \\<subset> above ao", "have \"A \\<sqsubset>' above ao\""], ["proof (prove)\nusing this:\n  A \\<subset> above ao\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' above ao", "by(auto intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subset> above ao\n  A \\<sqsubset>' above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subset> above ao\n  A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao", "obtain A where lessA: \"set (x # xs) \\<sqsubset>' A\"\n          and Aless: \"A \\<sqsubset>' above ao\" and subset: \"A \\<subseteq> above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set (x # xs) \\<sqsubset>' A; A \\<sqsubset>' above ao;\n         A \\<subseteq> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' above ao\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "have \"card (set (x # xs)) \\<le> card (above ao)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set (x # xs)) \\<le> card (above ao)", "using xs(3)"], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. card (set (x # xs)) \\<le> card (above ao)", "by(simp add: card_mono)"], ["proof (state)\nthis:\n  card (set (x # xs)) \\<le> card (above ao)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "hence \"length xs + 1 \\<le> m\""], ["proof (prove)\nusing this:\n  card (set (x # xs)) \\<le> card (above ao)\n\ngoal (1 subgoal):\n 1. length xs + 1 \\<le> m", "unfolding m_eq"], ["proof (prove)\nusing this:\n  card (set (x # xs)) \\<le> card (above ao)\n\ngoal (1 subgoal):\n 1. length xs + 1 \\<le> card (above ao)", "using xs"], ["proof (prove)\nusing this:\n  card (set (x # xs)) \\<le> card (above ao)\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. length xs + 1 \\<le> card (above ao)", "by(simp add: len_xs)"], ["proof (state)\nthis:\n  length xs + 1 \\<le> m\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "have \"m \\<noteq> length xs + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. m = length xs + 1 \\<Longrightarrow> False", "assume \"m = length xs + 1\""], ["proof (state)\nthis:\n  m = length xs + 1\n\ngoal (1 subgoal):\n 1. m = length xs + 1 \\<Longrightarrow> False", "hence \"card (above ao) \\<le> card (set (x # xs))\""], ["proof (prove)\nusing this:\n  m = length xs + 1\n\ngoal (1 subgoal):\n 1. card (above ao) \\<le> card (set (x # xs))", "unfolding m_eq"], ["proof (prove)\nusing this:\n  card (above ao) = length xs + 1\n\ngoal (1 subgoal):\n 1. card (above ao) \\<le> card (set (x # xs))", "using xs len_xs"], ["proof (prove)\nusing this:\n  card (above ao) = length xs + 1\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n\ngoal (1 subgoal):\n 1. card (above ao) \\<le> card (set (x # xs))", "by auto"], ["proof (state)\nthis:\n  card (above ao) \\<le> card (set (x # xs))\n\ngoal (1 subgoal):\n 1. m = length xs + 1 \\<Longrightarrow> False", "from card_seteq[OF _ _ this] xs"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite (above ao); set (x # xs) \\<subseteq> above ao\\<rbrakk>\n  \\<Longrightarrow> set (x # xs) = above ao\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao", "have \"set (x # xs) = above ao\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (above ao); set (x # xs) \\<subseteq> above ao\\<rbrakk>\n  \\<Longrightarrow> set (x # xs) = above ao\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) = above ao", "by simp"], ["proof (state)\nthis:\n  set (x # xs) = above ao\n\ngoal (1 subgoal):\n 1. m = length xs + 1 \\<Longrightarrow> False", "with lessA Aless"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' above ao\n  set (x # xs) = above ao", "show False"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' above ao\n  set (x # xs) = above ao\n\ngoal (1 subgoal):\n 1. False", "by(auto dest: set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m \\<noteq> length xs + 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "moreover"], ["proof (state)\nthis:\n  m \\<noteq> length xs + 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "{"], ["proof (state)\nthis:\n  m \\<noteq> length xs + 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "assume \"m = length xs + 2\""], ["proof (state)\nthis:\n  m = length xs + 2\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "hence \"card (above ao - set (x # xs)) = 1\""], ["proof (prove)\nusing this:\n  m = length xs + 2\n\ngoal (1 subgoal):\n 1. card (above ao - set (x # xs)) = 1", "using xs len_xs m_eq"], ["proof (prove)\nusing this:\n  m = length xs + 2\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n  m = card (above ao)\n\ngoal (1 subgoal):\n 1. card (above ao - set (x # xs)) = 1", "by(auto simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (above ao - set (x # xs)) = 1\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "then"], ["proof (chain)\npicking this:\n  card (above ao - set (x # xs)) = 1", "obtain z where z: \"above ao - set (x # xs) = {z}\""], ["proof (prove)\nusing this:\n  card (above ao - set (x # xs)) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        above ao - set (x # xs) = {z} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding card_eq_1_iff"], ["proof (prove)\nusing this:\n  \\<exists>xa. above ao - set (x # xs) = {xa}\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        above ao - set (x # xs) = {z} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  above ao - set (x # xs) = {z}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "have \"\\<not> proper_interval (Some (last (x # xs))) None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> proper_interval (Some (last (x # xs))) None", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "assume \"proper_interval (Some (last (x # xs))) None\""], ["proof (state)\nthis:\n  proper_interval (Some (last (x # xs))) None\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  proper_interval (Some (last (x # xs))) None", "obtain z' where z': \"last (x # xs) < z'\""], ["proof (prove)\nusing this:\n  proper_interval (Some (last (x # xs))) None\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        last (x # xs) < z' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp add: proper_interval_simps)"], ["proof (state)\nthis:\n  last (x # xs) < z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "have \"last (x # xs) \\<in> set (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last (x # xs) \\<in> set (x # xs)", "by(rule last_in_set) simp"], ["proof (state)\nthis:\n  last (x # xs) \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "with xs z'"], ["proof (chain)\npicking this:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  last (x # xs) < z'\n  last (x # xs) \\<in> set (x # xs)", "have \"z' \\<in> above ao\" \"z' \\<notin> set (x # xs)\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  last (x # xs) < z'\n  last (x # xs) \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. z' \\<in> above ao &&& z' \\<notin> set (x # xs)", "by(auto simp del: last.simps sorted.simps(2) intro: above_upclosed dest: sorted_last)"], ["proof (state)\nthis:\n  z' \\<in> above ao\n  z' \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "with z"], ["proof (chain)\npicking this:\n  above ao - set (x # xs) = {z}\n  z' \\<in> above ao\n  z' \\<notin> set (x # xs)", "have \"z = z'\""], ["proof (prove)\nusing this:\n  above ao - set (x # xs) = {z}\n  z' \\<in> above ao\n  z' \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. z = z'", "by fastforce"], ["proof (state)\nthis:\n  z = z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "from z'"], ["proof (chain)\npicking this:\n  last (x # xs) < z'", "have y_less: \"\\<And>y. y \\<in> set (x # xs) \\<Longrightarrow> y < z'\""], ["proof (prove)\nusing this:\n  last (x # xs) < z'\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set (x # xs) \\<Longrightarrow> y < z'", "using xs"], ["proof (prove)\nusing this:\n  last (x # xs) < z'\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> set (x # xs) \\<Longrightarrow> y < z'", "by(auto simp del: sorted.simps(2) dest: sorted_last)"], ["proof (state)\nthis:\n  ?y \\<in> set (x # xs) \\<Longrightarrow> ?y < z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "with z \\<open>z = z'\\<close>"], ["proof (chain)\npicking this:\n  above ao - set (x # xs) = {z}\n  z = z'\n  ?y \\<in> set (x # xs) \\<Longrightarrow> ?y < z'", "have \"\\<And>y. y \\<in> above ao \\<Longrightarrow> y \\<le> z'\""], ["proof (prove)\nusing this:\n  above ao - set (x # xs) = {z}\n  z = z'\n  ?y \\<in> set (x # xs) \\<Longrightarrow> ?y < z'\n\ngoal (1 subgoal):\n 1. \\<And>y. y \\<in> above ao \\<Longrightarrow> y \\<le> z'", "by(fastforce)"], ["proof (state)\nthis:\n  ?y \\<in> above ao \\<Longrightarrow> ?y \\<le> z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "from lessA subset"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above ao", "obtain y where y: \"y \\<in> A\" \"y \\<in> above ao\" \"y \\<notin> set (x # xs)\"\n              and min: \"\\<And>y'. \\<lbrakk> y' \\<in> set (x # xs); y' \\<in> above ao; y' \\<notin> A \\<rbrakk> \\<Longrightarrow> y \\<le> y'\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> A; y \\<in> above ao; y \\<notin> set (x # xs);\n         \\<And>y'.\n            \\<lbrakk>y' \\<in> set (x # xs); y' \\<in> above ao;\n             y' \\<notin> A\\<rbrakk>\n            \\<Longrightarrow> y \\<le> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  y \\<in> A\n  y \\<in> above ao\n  y \\<notin> set (x # xs)\n  \\<lbrakk>?y' \\<in> set (x # xs); ?y' \\<in> above ao;\n   ?y' \\<notin> A\\<rbrakk>\n  \\<Longrightarrow> y \\<le> ?y'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "with z \\<open>z = z'\\<close>"], ["proof (chain)\npicking this:\n  above ao - set (x # xs) = {z}\n  z = z'\n  y \\<in> A\n  y \\<in> above ao\n  y \\<notin> set (x # xs)\n  \\<lbrakk>?y' \\<in> set (x # xs); ?y' \\<in> above ao;\n   ?y' \\<notin> A\\<rbrakk>\n  \\<Longrightarrow> y \\<le> ?y'", "have \"y = z'\""], ["proof (prove)\nusing this:\n  above ao - set (x # xs) = {z}\n  z = z'\n  y \\<in> A\n  y \\<in> above ao\n  y \\<notin> set (x # xs)\n  \\<lbrakk>?y' \\<in> set (x # xs); ?y' \\<in> above ao;\n   ?y' \\<notin> A\\<rbrakk>\n  \\<Longrightarrow> y \\<le> ?y'\n\ngoal (1 subgoal):\n 1. y = z'", "by auto"], ["proof (state)\nthis:\n  y = z'\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "have \"set (x # xs) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> set (x # xs) \\<Longrightarrow> xa \\<in> A", "fix y'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> set (x # xs) \\<Longrightarrow> xa \\<in> A", "assume y': \"y' \\<in> set (x # xs)\""], ["proof (state)\nthis:\n  y' \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> set (x # xs) \\<Longrightarrow> xa \\<in> A", "show \"y' \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y' \\<in> A", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. y' \\<notin> A \\<Longrightarrow> False", "assume \"y' \\<notin> A\""], ["proof (state)\nthis:\n  y' \\<notin> A\n\ngoal (1 subgoal):\n 1. y' \\<notin> A \\<Longrightarrow> False", "from y' xs"], ["proof (chain)\npicking this:\n  y' \\<in> set (x # xs)\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao", "have \"y' \\<in> above ao\""], ["proof (prove)\nusing this:\n  y' \\<in> set (x # xs)\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. y' \\<in> above ao", "by auto"], ["proof (state)\nthis:\n  y' \\<in> above ao\n\ngoal (1 subgoal):\n 1. y' \\<notin> A \\<Longrightarrow> False", "with y'"], ["proof (chain)\npicking this:\n  y' \\<in> set (x # xs)\n  y' \\<in> above ao", "have \"y \\<le> y'\""], ["proof (prove)\nusing this:\n  y' \\<in> set (x # xs)\n  y' \\<in> above ao\n\ngoal (1 subgoal):\n 1. y \\<le> y'", "using \\<open>y' \\<notin> A\\<close>"], ["proof (prove)\nusing this:\n  y' \\<in> set (x # xs)\n  y' \\<in> above ao\n  y' \\<notin> A\n\ngoal (1 subgoal):\n 1. y \\<le> y'", "by(rule min)"], ["proof (state)\nthis:\n  y \\<le> y'\n\ngoal (1 subgoal):\n 1. y' \\<notin> A \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y \\<le> y'\n\ngoal (1 subgoal):\n 1. y' \\<notin> A \\<Longrightarrow> False", "from y'"], ["proof (chain)\npicking this:\n  y' \\<in> set (x # xs)", "have \"y' < z'\""], ["proof (prove)\nusing this:\n  y' \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. y' < z'", "by(rule y_less)"], ["proof (state)\nthis:\n  y' < z'\n\ngoal (1 subgoal):\n 1. y' \\<notin> A \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  y \\<le> y'\n  y' < z'", "show False"], ["proof (prove)\nusing this:\n  y \\<le> y'\n  y' < z'\n\ngoal (1 subgoal):\n 1. False", "using \\<open>y = z'\\<close>"], ["proof (prove)\nusing this:\n  y \\<le> y'\n  y' < z'\n  y = z'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y' \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "from z xs"], ["proof (chain)\npicking this:\n  above ao - set (x # xs) = {z}\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao", "have \"above ao = insert z (set (x # xs))\""], ["proof (prove)\nusing this:\n  above ao - set (x # xs) = {z}\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. above ao = insert z (set (x # xs))", "by auto"], ["proof (state)\nthis:\n  above ao = insert z (set (x # xs))\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<subseteq> A\n  above ao = insert z (set (x # xs))", "have \"A = above ao\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> A\n  above ao = insert z (set (x # xs))\n\ngoal (1 subgoal):\n 1. A = above ao", "using y \\<open>y = z'\\<close> \\<open>z = z'\\<close> subset"], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> A\n  above ao = insert z (set (x # xs))\n  y \\<in> A\n  y \\<in> above ao\n  y \\<notin> set (x # xs)\n  y = z'\n  z = z'\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. A = above ao", "by auto"], ["proof (state)\nthis:\n  A = above ao\n\ngoal (1 subgoal):\n 1. proper_interval (Some (last (x # xs))) None \\<Longrightarrow> False", "with Aless"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' above ao\n  A = above ao", "show False"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' above ao\n  A = above ao\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> proper_interval (Some (last (x # xs))) None\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "}"], ["proof (state)\nthis:\n  m = length xs + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (x # xs))) None\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' above ao \\<Longrightarrow>\n    m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "ultimately"], ["proof (chain)\npicking this:\n  m \\<noteq> length xs + 1\n  m = length xs + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (x # xs))) None", "show ?lhs"], ["proof (prove)\nusing this:\n  m \\<noteq> length xs + 1\n  m = length xs + 2 \\<Longrightarrow>\n  \\<not> proper_interval (Some (last (x # xs))) None\n\ngoal (1 subgoal):\n 1. m \\<noteq> length xs + 1 \\<and>\n    (m = length xs + 2 \\<longrightarrow>\n     \\<not> proper_interval (Some (last (x # xs))) None)", "by simp"], ["proof (state)\nthis:\n  m \\<noteq> length xs + 1 \\<and>\n  (m = length xs + 2 \\<longrightarrow>\n   \\<not> proper_interval (Some (last (x # xs))) None)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (m \\<noteq> length xs + 1 \\<and>\n   (m = length xs + 2 \\<longrightarrow>\n    \\<not> proper_interval (Some (last (x # xs))) None)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao)\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs.\n       \\<lbrakk>sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted []; distinct [];\n        set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) [] =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>' - set [] \\<inter> above ao)\n 2. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "thus ?case"], ["proof (prove)\nusing this:\n  (m \\<noteq> length xs + 1 \\<and>\n   (m = length xs + 2 \\<longrightarrow>\n    \\<not> proper_interval (Some (last (x # xs))) None)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs) [] =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set [] \\<inter> above ao)", "by(simp add: length_last_def m_def Let_def del: last.simps)"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs) [] =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set [] \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "case (4 ao x xs y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>x < y; card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n   sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n   sorted (y # ys); distinct (y # ys);\n   set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n  \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                     (card (UNIV - above (Some x))) xs (y # ys) =\n                    (\\<exists>A\\<subseteq>above (Some x).\n                        set xs \\<sqsubset>' A \\<and>\n                        A \\<sqsubset>'\n                        - set (y # ys) \\<inter> above (Some x))\n  \\<lbrakk>\\<not> x < y; y < x;\n   card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n   sorted (x # xs); distinct (x # xs);\n   set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n   set ys \\<subseteq> above (Some y)\\<rbrakk>\n  \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                     (card (UNIV - above (Some y))) (x # xs) ys =\n                    (\\<exists>A\\<subseteq>above (Some y).\n                        set (x # xs) \\<sqsubset>' A \\<and>\n                        A \\<sqsubset>' - set ys \\<inter> above (Some y))\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "note xxs = \\<open>sorted (x # xs)\\<close> \\<open>distinct (x # xs)\\<close>\n        and yys = \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close>\n        and xxs_above = \\<open>set (x # xs) \\<subseteq> above ao\\<close>\n        and yys_above = \\<open>set (y # ys) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (x # xs) \\<subseteq> above ao\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "from xxs"], ["proof (chain)\npicking this:\n  sorted (x # xs)\n  distinct (x # xs)", "have xs: \"sorted xs\" \"distinct xs\" and x_Min: \"\\<forall>x'\\<in>set xs. x < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. (sorted xs &&& distinct xs) &&& \\<forall>x'\\<in>set xs. x < x'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted xs\n  distinct xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "from yys"], ["proof (chain)\npicking this:\n  sorted (y # ys)\n  distinct (y # ys)", "have ys: \"sorted ys\" \"distinct ys\" and y_Min: \"\\<forall>y'\\<in>set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. (sorted ys &&& distinct ys) &&& \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have len_xs: \"length xs = card (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = card (set xs)", "using xs"], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. length xs = card (set xs)", "by(auto simp add: List.card_set intro: sym)"], ["proof (state)\nthis:\n  length xs = card (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "have len_ys: \"length ys = card (set ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = card (set ys)", "using ys"], ["proof (prove)\nusing this:\n  sorted ys\n  distinct ys\n\ngoal (1 subgoal):\n 1. length ys = card (set ys)", "by(auto simp add: List.card_set intro: sym)"], ["proof (state)\nthis:\n  length ys = card (set ys)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y;\n                 card (UNIV - above ao) + 1 = card (UNIV - above (Some x));\n                 sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n                 sorted (y # ys); distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_set_Compl_aux (Some x)\n                                   (card (UNIV - above (Some x))) xs\n                                   (y # ys) =\n                                  (\\<exists>A\\<subseteq>above (Some x).\nset xs \\<sqsubset>' A \\<and>\nA \\<sqsubset>' - set (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x;\n         card (UNIV - above ao) + 1 = card (UNIV - above (Some y));\n         sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_set_Compl_aux (Some y)\n                           (card (UNIV - above (Some y))) (x # xs) ys =\n                          (\\<exists>A\\<subseteq>above (Some y).\n                              set (x # xs) \\<sqsubset>' A \\<and>\n                              A \\<sqsubset>'\n                              - set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_set_Compl_aux ao\n                          (card (UNIV - above ao)) (x # xs) (y # ys) =\n                         (\\<exists>A\\<subseteq>above ao.\n                             set (x # xs) \\<sqsubset>' A \\<and>\n                             A \\<sqsubset>'\n                             - set (y # ys) \\<inter> above ao)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof(cases \"x < y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  x < y\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"proper_interval ao (Some x) \\<or>\n          proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs (y # ys) \\<longleftrightarrow>\n          (\\<exists>A \\<subseteq> above ao. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\"\n          (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof(cases \"proper_interval ao (Some x)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "then"], ["proof (chain)\npicking this:\n  proper_interval ao (Some x)", "obtain z where z: \"z \\<in> above ao\" \"z < x\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < x\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < x\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "with xxs"], ["proof (chain)\npicking this:\n  sorted (x # xs)\n  distinct (x # xs)\n  z \\<in> above ao\n  z < x", "have \"\\<forall>x'\\<in>set xs. z < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. \\<forall>x'\\<in>set xs. z < x'", "by(auto)"], ["proof (state)\nthis:\n  \\<forall>x'\\<in>set xs. z < x'\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z < x\n  \\<forall>x'\\<in>set xs. z < x'", "have \"set (x # xs) \\<sqsubset>' {z}\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  \\<forall>x'\\<in>set xs. z < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {z}", "by(auto simp add: set_less_aux_def intro!: bexI[where x=z])"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "{"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "from z yys \\<open>x < y\\<close>"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z < x\n  sorted (y # ys)\n  distinct (y # ys)\n  x < y", "have \"z < y\" \"\\<forall>y'\\<in>set ys. z < y'\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  sorted (y # ys)\n  distinct (y # ys)\n  x < y\n\ngoal (1 subgoal):\n 1. z < y &&& \\<forall>y'\\<in>set ys. z < y'", "by(auto)"], ["proof (state)\nthis:\n  z < y\n  \\<forall>y'\\<in>set ys. z < y'\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "hence subset: \"{z} \\<subseteq> - set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  z < y\n  \\<forall>y'\\<in>set ys. z < y'\n\ngoal (1 subgoal):\n 1. {z} \\<subseteq> - set (y # ys) \\<inter> above ao", "using ys \\<open>x < y\\<close> z"], ["proof (prove)\nusing this:\n  z < y\n  \\<forall>y'\\<in>set ys. z < y'\n  sorted ys\n  distinct ys\n  x < y\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. {z} \\<subseteq> - set (y # ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"x \\<in> \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> - set (y # ys) \\<inter> above ao", "using yys xxs \\<open>x < y\\<close> xxs_above"], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n  sorted (x # xs)\n  distinct (x # xs)\n  x < y\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> - set (y # ys) \\<inter> above ao", "by(auto)"], ["proof (state)\nthis:\n  x \\<in> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n  x \\<in> - set (y # ys) \\<inter> above ao", "have \"{z} \\<subset> \\<dots>\""], ["proof (prove)\nusing this:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n  x \\<in> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {z} \\<subset> - set (y # ys) \\<inter> above ao", "using \\<open>z < x\\<close>"], ["proof (prove)\nusing this:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n  x \\<in> - set (y # ys) \\<inter> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. {z} \\<subset> - set (y # ys) \\<inter> above ao", "by fastforce"], ["proof (state)\nthis:\n  {z} \\<subset> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "hence \"{z} \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  {z} \\<subset> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by(fastforce intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "}"], ["proof (state)\nthis:\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"{z} \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z} \\<subseteq> above ao", "using z"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. {z} \\<subseteq> above ao", "by simp"], ["proof (state)\nthis:\n  {z} \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' {z}\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {z} \\<subseteq> above ao", "have ?rhs"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' {z}\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {z} \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "using True"], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  (proper_interval ao (Some x) \\<or>\n   proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n    (y # ys)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "hence above_eq: \"above ao = insert x (above (Some x))\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. above ao = insert x (above (Some x))", "using xxs_above"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. above ao = insert x (above (Some x))", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"card (above (Some x)) < CARD('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (above (Some x)) < CARD('a)", "by(rule psubset_card_mono)(auto)"], ["proof (state)\nthis:\n  card (above (Some x)) < CARD('a)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  above ao = insert x (above (Some x))\n  card (above (Some x)) < CARD('a)", "have card_eq: \"card (UNIV - above ao) + 1 = card (UNIV - above (Some x))\""], ["proof (prove)\nusing this:\n  above ao = insert x (above (Some x))\n  card (above (Some x)) < CARD('a)\n\ngoal (1 subgoal):\n 1. card (UNIV - above ao) + 1 = card (UNIV - above (Some x))", "by(simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - above ao) + 1 = card (UNIV - above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "from xxs_above x_Min"], ["proof (chain)\npicking this:\n  set (x # xs) \\<subseteq> above ao\n  \\<forall>x'\\<in>set xs. x < x'", "have xs_above: \"set xs \\<subseteq> above (Some x)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> above ao\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> above (Some x)", "by(auto)"], ["proof (state)\nthis:\n  set xs \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "from \\<open>x < y\\<close> y_Min"], ["proof (chain)\npicking this:\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'", "have \"set (y # ys) \\<subseteq> above (Some x)\""], ["proof (prove)\nusing this:\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<subseteq> above (Some x)", "by(auto)"], ["proof (state)\nthis:\n  set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "with \\<open>x < y\\<close> card_eq xs xs_above yys"], ["proof (chain)\npicking this:\n  x < y\n  card (UNIV - above ao) + 1 = card (UNIV - above (Some x))\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above (Some x)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above (Some x)", "have \"proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs (y # ys) \\<longleftrightarrow>\n               (\\<exists>A \\<subseteq> above (Some x). set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x))\""], ["proof (prove)\nusing this:\n  x < y\n  card (UNIV - above ao) + 1 = card (UNIV - above (Some x))\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above (Some x)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above (Some x).\n        set xs \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x))", "by(subst card_eq)(rule 4)"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above (Some x).\n      set xs \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "also"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above (Some x).\n      set xs \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"\\<dots> \\<longleftrightarrow> ?rhs\" (is \"?lhs' \\<longleftrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>A\\<subseteq>above (Some x).\n        set xs \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "assume ?lhs'"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above (Some x).\n     set xs \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above (Some x).\n     set xs \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "obtain A where less_A: \"set xs \\<sqsubset>' A\"\n              and A_less: \"A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\"\n              and subset: \"A \\<subseteq> above (Some x)\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above (Some x).\n     set xs \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set xs \\<sqsubset>' A;\n         A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x);\n         A \\<subseteq> above (Some x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set xs \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\n  A \\<subseteq> above (Some x)\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "let ?A = \"insert x A\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have Min_A': \"Min ?A = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (insert x A) = x", "using xxs_above False subset"], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> above ao\n  \\<not> proper_interval ao (Some x)\n  A \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. Min (insert x A) = x", "by(auto intro!: Min_eqI simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  Min (insert x A) = x\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  Min (insert x A) = x\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"Min (set (x # xs)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x", "using x_Min"], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (set (x # xs)) = x\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  Min (set (x # xs)) = x\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have Amx: \"A - {x} = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A - {x} = A", "using False subset"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  A \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. A - {x} = A", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  A - {x} = A\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  A - {x} = A\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"set xs - {x} = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs - {x} = set xs", "using x_Min"], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set xs - {x} = set xs", "by auto"], ["proof (state)\nthis:\n  set xs - {x} = set xs\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "ultimately"], ["proof (chain)\npicking this:\n  Min (insert x A) = x\n  Min (set (x # xs)) = x\n  A - {x} = A\n  set xs - {x} = set xs", "have less_A': \"set (x # xs) \\<sqsubset>' ?A\""], ["proof (prove)\nusing this:\n  Min (insert x A) = x\n  Min (set (x # xs)) = x\n  A - {x} = A\n  set xs - {x} = set xs\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' insert x A", "using less_A xxs_above x_Min"], ["proof (prove)\nusing this:\n  Min (insert x A) = x\n  Min (set (x # xs)) = x\n  A - {x} = A\n  set xs - {x} = set xs\n  set xs \\<sqsubset>' A\n  set (x # xs) \\<subseteq> above ao\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' insert x A", "by(subst set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' insert x A\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"x \\<in> - insert y (set ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> - insert y (set ys) \\<inter> above ao", "using \\<open>x < y\\<close> xxs_above y_Min"], ["proof (prove)\nusing this:\n  x < y\n  set (x # xs) \\<subseteq> above ao\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. x \\<in> - insert y (set ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  x \\<in> - insert y (set ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "hence \"- insert y (set ys) \\<inter> above ao \\<noteq> {}\""], ["proof (prove)\nusing this:\n  x \\<in> - insert y (set ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - insert y (set ys) \\<inter> above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"Min (- insert y (set ys) \\<inter> above ao) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (- insert y (set ys) \\<inter> above ao) = x", "using yys y_Min xxs_above \\<open>x < y\\<close> False"], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n  \\<forall>y'\\<in>set ys. y < y'\n  set (x # xs) \\<subseteq> above ao\n  x < y\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. Min (- insert y (set ys) \\<inter> above ao) = x", "by(auto intro!: Min_eqI simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  Min (- insert y (set ys) \\<inter> above ao) = x\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  Min (- insert y (set ys) \\<inter> above ao) = x\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"- set (y # ys) \\<inter> above ao - {x} = - set (y # ys) \\<inter> above (Some x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao - {x} =\n    - set (y # ys) \\<inter> above (Some x)", "using yys_above False xxs_above"], ["proof (prove)\nusing this:\n  set (y # ys) \\<subseteq> above ao\n  \\<not> proper_interval ao (Some x)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao - {x} =\n    - set (y # ys) \\<inter> above (Some x)", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao - {x} =\n  - set (y # ys) \\<inter> above (Some x)\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "ultimately"], ["proof (chain)\npicking this:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n  Min (- insert y (set ys) \\<inter> above ao) = x\n  - set (y # ys) \\<inter> above ao - {x} =\n  - set (y # ys) \\<inter> above (Some x)", "have A'_less: \"?A \\<sqsubset>' - set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n  Min (- insert y (set ys) \\<inter> above ao) = x\n  - set (y # ys) \\<inter> above ao - {x} =\n  - set (y # ys) \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. insert x A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "using Min_A' A_less Amx xxs_above"], ["proof (prove)\nusing this:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n  Min (- insert y (set ys) \\<inter> above ao) = x\n  - set (y # ys) \\<inter> above ao - {x} =\n  - set (y # ys) \\<inter> above (Some x)\n  Min (insert x A) = x\n  A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\n  A - {x} = A\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. insert x A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by(subst set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  insert x A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  insert x A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"?A \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert x A \\<subseteq> above ao", "using subset xxs_above"], ["proof (prove)\nusing this:\n  A \\<subseteq> above (Some x)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. insert x A \\<subseteq> above ao", "by(auto intro: above_upclosed)"], ["proof (state)\nthis:\n  insert x A \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>'\n       - set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "ultimately"], ["proof (chain)\npicking this:\n  insert x A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  insert x A \\<subseteq> above ao", "show ?rhs"], ["proof (prove)\nusing this:\n  insert x A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  insert x A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "using less_A'"], ["proof (prove)\nusing this:\n  insert x A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  insert x A \\<subseteq> above ao\n  set (x # xs) \\<sqsubset>' insert x A\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "obtain A where less_A: \"set (x # xs) \\<sqsubset>' A\"\n              and A_less: \"A \\<sqsubset>' - set (y # ys) \\<inter> above ao\" \n              and subset: \"A \\<subseteq> above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set (x # xs) \\<sqsubset>' A;\n         A \\<sqsubset>' - set (y # ys) \\<inter> above ao;\n         A \\<subseteq> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "let ?A = \"A - {x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "from less_A subset xxs_above"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above ao\n  set (x # xs) \\<subseteq> above ao", "have \"set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above ao\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao", "by(simp add: Int_absorb2)"], ["proof (state)\nthis:\n  set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "with False xxs_above subset"], ["proof (chain)\npicking this:\n  \\<not> proper_interval ao (Some x)\n  set (x # xs) \\<subseteq> above ao\n  A \\<subseteq> above ao\n  set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao", "have \"x \\<in> A\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  set (x # xs) \\<subseteq> above ao\n  A \\<subseteq> above ao\n  set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by(auto simp add: set_less_aux_def proper_interval_Some2)"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "hence \"\\<dots> \\<noteq> {}\""], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "from \\<open>x \\<in> A\\<close> False subset"], ["proof (chain)\npicking this:\n  x \\<in> A\n  \\<not> proper_interval ao (Some x)\n  A \\<subseteq> above ao", "have Min_A: \"Min A = x\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  \\<not> proper_interval ao (Some x)\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. Min A = x", "by(auto intro!: Min_eqI simp add: proper_interval_Some2 not_less)"], ["proof (state)\nthis:\n  Min A = x\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  Min A = x\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"Min (set (x # xs)) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x", "using x_Min"], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. Min (set (x # xs)) = x", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (set (x # xs)) = x\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  Min (set (x # xs)) = x\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have eq_A: \"?A \\<subseteq> above (Some x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A - {x} \\<subseteq> above (Some x)", "using xxs_above False subset"], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> above ao\n  \\<not> proper_interval ao (Some x)\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. A - {x} \\<subseteq> above (Some x)", "by(fastforce simp add: proper_interval_Some2 not_less intro: above_upclosed)"], ["proof (state)\nthis:\n  A - {x} \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  A - {x} \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"set xs - {x} = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs - {x} = set xs", "using x_Min"], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set xs - {x} = set xs", "by(auto)"], ["proof (state)\nthis:\n  set xs - {x} = set xs\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "ultimately"], ["proof (chain)\npicking this:\n  A \\<noteq> {}\n  Min A = x\n  Min (set (x # xs)) = x\n  A - {x} \\<subseteq> above (Some x)\n  set xs - {x} = set xs", "have less_A': \"set xs \\<sqsubset>' ?A\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  Min A = x\n  Min (set (x # xs)) = x\n  A - {x} \\<subseteq> above (Some x)\n  set xs - {x} = set xs\n\ngoal (1 subgoal):\n 1. set xs \\<sqsubset>' A - {x}", "using xxs_above less_A"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  Min A = x\n  Min (set (x # xs)) = x\n  A - {x} \\<subseteq> above (Some x)\n  set xs - {x} = set xs\n  set (x # xs) \\<subseteq> above ao\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. set xs \\<sqsubset>' A - {x}", "by(subst (asm) set_less_aux_rec)(simp_all cong: conj_cong)"], ["proof (state)\nthis:\n  set xs \\<sqsubset>' A - {x}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"x \\<in> - insert y (set ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> - insert y (set ys) \\<inter> above ao", "using \\<open>x < y\\<close> xxs_above y_Min"], ["proof (prove)\nusing this:\n  x < y\n  set (x # xs) \\<subseteq> above ao\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. x \\<in> - insert y (set ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  x \\<in> - insert y (set ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "hence \"- insert y (set ys) \\<inter> above ao \\<noteq> {}\""], ["proof (prove)\nusing this:\n  x \\<in> - insert y (set ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - insert y (set ys) \\<inter> above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"Min (- set (y # ys) \\<inter> above ao) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (- set (y # ys) \\<inter> above ao) = x", "using yys y_Min xxs_above \\<open>x < y\\<close> False"], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n  \\<forall>y'\\<in>set ys. y < y'\n  set (x # xs) \\<subseteq> above ao\n  x < y\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. Min (- set (y # ys) \\<inter> above ao) = x", "by(auto intro!: Min_eqI simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  Min (- set (y # ys) \\<inter> above ao) = x\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  Min (- set (y # ys) \\<inter> above ao) = x\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "have \"- set (y # ys) \\<inter> above (Some x) = - set (y # ys) \\<inter> above ao - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above (Some x) =\n    - set (y # ys) \\<inter> above ao - {x}", "by(auto simp add: above_eq)"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "ultimately"], ["proof (chain)\npicking this:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n  Min (- set (y # ys) \\<inter> above ao) = x\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}", "have \"?A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\""], ["proof (prove)\nusing this:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n  Min (- set (y # ys) \\<inter> above ao) = x\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}\n\ngoal (1 subgoal):\n 1. A - {x} \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "using A_less \\<open>A \\<noteq> {}\\<close> eq_A Min_A"], ["proof (prove)\nusing this:\n  - insert y (set ys) \\<inter> above ao \\<noteq> {}\n  Min (- set (y # ys) \\<inter> above ao) = x\n  - set (y # ys) \\<inter> above (Some x) =\n  - set (y # ys) \\<inter> above ao - {x}\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<noteq> {}\n  A - {x} \\<subseteq> above (Some x)\n  Min A = x\n\ngoal (1 subgoal):\n 1. A - {x} \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "by(subst (asm) set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  A - {x} \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "with less_A' eq_A"], ["proof (chain)\npicking this:\n  set xs \\<sqsubset>' A - {x}\n  A - {x} \\<subseteq> above (Some x)\n  A - {x} \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "show ?lhs'"], ["proof (prove)\nusing this:\n  set xs \\<sqsubset>' A - {x}\n  A - {x} \\<subseteq> above (Some x)\n  A - {x} \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above (Some x).\n       set xs \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above (Some x).\n     set xs \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>A\\<subseteq>above (Some x).\n      set xs \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above (Some x)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "finally"], ["proof (chain)\npicking this:\n  proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "using False"], ["proof (prove)\nusing this:\n  proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<or>\n     proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n      (y # ys)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  (proper_interval ao (Some x) \\<or>\n   proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n    (y # ys)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (proper_interval ao (Some x) \\<or>\n   proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n    (y # ys)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (proper_interval ao (Some x) \\<or>\n   proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n    (y # ys)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "using True"], ["proof (prove)\nusing this:\n  (proper_interval ao (Some x) \\<or>\n   proper_interval_set_Compl_aux (Some x) (card (UNIV - above ao) + 1) xs\n    (y # ys)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n  x < y\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof(cases \"y < x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  y < x\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"proper_interval ao (Some y) \\<or> \n                proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1) (x # xs) ys \\<longleftrightarrow>\n               (\\<exists>A \\<subseteq> above ao. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\"\n            (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof(cases \"proper_interval ao (Some y)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "then"], ["proof (chain)\npicking this:\n  proper_interval ao (Some y)", "obtain z where z: \"z \\<in> above ao\" \"z < y\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < y\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "from xxs \\<open>y < x\\<close>"], ["proof (chain)\npicking this:\n  sorted (x # xs)\n  distinct (x # xs)\n  y < x", "have \"\\<forall>x'\\<in>set (x # xs). y < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n  y < x\n\ngoal (1 subgoal):\n 1. \\<forall>x'\\<in>set (x # xs). y < x'", "by(auto)"], ["proof (state)\nthis:\n  \\<forall>x'\\<in>set (x # xs). y < x'\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "hence less_A: \"set (x # xs) \\<sqsubset>' {y}\""], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set (x # xs). y < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {y}", "by(auto simp add: set_less_aux_def intro!: bexI[where x=y])"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {y}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"{y} \\<sqsubset>' {z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y} \\<sqsubset>' {z}", "using z y_Min"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < y\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. {y} \\<sqsubset>' {z}", "by(auto simp add: set_less_aux_def intro: bexI[where x=z])"], ["proof (state)\nthis:\n  {y} \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "also"], ["proof (state)\nthis:\n  {y} \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"\\<dots> \\<subseteq> - set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z} \\<subseteq> - set (y # ys) \\<inter> above ao", "using z y_Min"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < y\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. {z} \\<subseteq> - set (y # ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "hence \"{z} \\<sqsubseteq>' \\<dots>\""], ["proof (prove)\nusing this:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {z} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  {z} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "finally"], ["proof (chain)\npicking this:\n  {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"{y} \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao", "."], ["proof (state)\nthis:\n  {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"{y} \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y} \\<subseteq> above ao", "using yys_above"], ["proof (prove)\nusing this:\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. {y} \\<subseteq> above ao", "by auto"], ["proof (state)\nthis:\n  {y} \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {y} \\<subseteq> above ao", "have ?rhs"], ["proof (prove)\nusing this:\n  {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {y} \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "using less_A"], ["proof (prove)\nusing this:\n  {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  {y} \\<subseteq> above ao\n  set (x # xs) \\<sqsubset>' {y}\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "using True"], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  (proper_interval ao (Some y) \\<or>\n   proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n    (x # xs) ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "hence above_eq: \"above ao = insert y (above (Some y))\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. above ao = insert y (above (Some y))", "using yys_above"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some y)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. above ao = insert y (above (Some y))", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "moreover"], ["proof (state)\nthis:\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"card (above (Some y)) < CARD('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (above (Some y)) < CARD('a)", "by(rule psubset_card_mono)(auto)"], ["proof (state)\nthis:\n  card (above (Some y)) < CARD('a)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "ultimately"], ["proof (chain)\npicking this:\n  above ao = insert y (above (Some y))\n  card (above (Some y)) < CARD('a)", "have card_eq: \"card (UNIV - above ao) + 1 = card (UNIV - above (Some y))\""], ["proof (prove)\nusing this:\n  above ao = insert y (above (Some y))\n  card (above (Some y)) < CARD('a)\n\ngoal (1 subgoal):\n 1. card (UNIV - above ao) + 1 = card (UNIV - above (Some y))", "by(simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - above ao) + 1 = card (UNIV - above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "from yys_above y_Min"], ["proof (chain)\npicking this:\n  set (y # ys) \\<subseteq> above ao\n  \\<forall>y'\\<in>set ys. y < y'", "have ys_above: \"set ys \\<subseteq> above (Some y)\""], ["proof (prove)\nusing this:\n  set (y # ys) \\<subseteq> above ao\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set ys \\<subseteq> above (Some y)", "by(auto)"], ["proof (state)\nthis:\n  set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have eq_ys: \"- set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao", "by(auto simp add: above_eq)"], ["proof (state)\nthis:\n  - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "from \\<open>y < x\\<close> x_Min"], ["proof (chain)\npicking this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'", "have \"set (x # xs) \\<subseteq> above (Some y)\""], ["proof (prove)\nusing this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> above (Some y)", "by(auto)"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "with \\<open>\\<not> x < y\\<close> \\<open>y < x\\<close> card_eq xxs ys ys_above"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  y < x\n  card (UNIV - above ao) + 1 = card (UNIV - above (Some y))\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above (Some y)\n  set (x # xs) \\<subseteq> above (Some y)", "have \"proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1) (x # xs) ys \\<longleftrightarrow>\n              (\\<exists>A \\<subseteq> above (Some y). set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys \\<inter> above (Some y))\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  y < x\n  card (UNIV - above ao) + 1 = card (UNIV - above (Some y))\n  sorted (x # xs)\n  distinct (x # xs)\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above (Some y)\n  set (x # xs) \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n     (x # xs) ys =\n    (\\<exists>A\\<subseteq>above (Some y).\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set ys \\<inter> above (Some y))", "by(subst card_eq)(rule 4)"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n   (x # xs) ys =\n  (\\<exists>A\\<subseteq>above (Some y).\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set ys \\<inter> above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "also"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n   (x # xs) ys =\n  (\\<exists>A\\<subseteq>above (Some y).\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set ys \\<inter> above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"\\<dots> \\<longleftrightarrow> ?rhs\" (is \"?lhs' \\<longleftrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>A\\<subseteq>above (Some y).\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set ys \\<inter> above (Some y)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "assume ?lhs'"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above (Some y).\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set ys \\<inter> above (Some y)\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above (Some y).\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set ys \\<inter> above (Some y)", "obtain A where \"set (x # xs) \\<sqsubset>' A\" and subset: \"A \\<subseteq> above (Some y)\"\n                and \"A \\<sqsubset>' - set ys \\<inter> above (Some y)\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above (Some y).\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set (x # xs) \\<sqsubset>' A; A \\<subseteq> above (Some y);\n         A \\<sqsubset>' - set ys \\<inter> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above (Some y)\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above (Some y)\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "from subset"], ["proof (chain)\npicking this:\n  A \\<subseteq> above (Some y)", "have \"A - {y} = A\""], ["proof (prove)\nusing this:\n  A \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. A - {y} = A", "by auto"], ["proof (state)\nthis:\n  A - {y} = A\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above (Some y)\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n  A - {y} = A", "have \"set (x # xs) \\<sqsubset>' A - {y}\"\n                and \"A - {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above (Some y)\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n  A - {y} = A\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A - {y} &&&\n    A - {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao", "using eq_ys"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above (Some y)\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n  A - {y} = A\n  - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A - {y} &&&\n    A - {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by simp_all"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A - {y}\n  A - {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A - {y}\n  A - {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "from subset"], ["proof (chain)\npicking this:\n  A \\<subseteq> above (Some y)", "have \"A - {y} \\<subseteq> above ao\""], ["proof (prove)\nusing this:\n  A \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. A - {y} \\<subseteq> above ao", "using yys_above"], ["proof (prove)\nusing this:\n  A \\<subseteq> above (Some y)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. A - {y} \\<subseteq> above ao", "by(auto intro: above_upclosed)"], ["proof (state)\nthis:\n  A - {y} \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A - {y}\n  A - {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A - {y} \\<subseteq> above ao", "show ?rhs"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A - {y}\n  A - {y} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A - {y} \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "obtain A where \"set (x # xs) \\<sqsubset>' A\" \n                and A_less: \"A \\<sqsubset>' - set (y # ys) \\<inter> above ao\" \n                and subset: \"A \\<subseteq> above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set (x # xs) \\<sqsubset>' A;\n         A \\<sqsubset>' - set (y # ys) \\<inter> above ao;\n         A \\<subseteq> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "from A_less False yys_above"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  \\<not> proper_interval ao (Some y)\n  set (y # ys) \\<subseteq> above ao", "have \"y \\<notin> A\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  \\<not> proper_interval ao (Some y)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. y \\<notin> A", "by(auto simp add: set_less_aux_def proper_interval_Some2 not_less)"], ["proof (state)\nthis:\n  y \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n  y \\<notin> A", "have \"set (x # xs) \\<sqsubset>' A\"\n                and \"A \\<sqsubset>' - set ys \\<inter> above (Some y)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n  y \\<notin> A\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A &&&\n    A \\<sqsubset>' - set ys \\<inter> above (Some y)", "using eq_ys"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n  y \\<notin> A\n  - set ys \\<inter> above (Some y) = - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A &&&\n    A \\<sqsubset>' - set ys \\<inter> above (Some y)", "by simp_all"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "from \\<open>y \\<notin> A\\<close> subset above_eq"], ["proof (chain)\npicking this:\n  y \\<notin> A\n  A \\<subseteq> above ao\n  above ao = insert y (above (Some y))", "have \"A \\<subseteq> above (Some y)\""], ["proof (prove)\nusing this:\n  y \\<notin> A\n  A \\<subseteq> above ao\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. A \\<subseteq> above (Some y)", "by auto"], ["proof (state)\nthis:\n  A \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n  A \\<subseteq> above (Some y)", "show ?lhs'"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set ys \\<inter> above (Some y)\n  A \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above (Some y).\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set ys \\<inter> above (Some y)", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above (Some y).\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set ys \\<inter> above (Some y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>A\\<subseteq>above (Some y).\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set ys \\<inter> above (Some y)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "finally"], ["proof (chain)\npicking this:\n  proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n   (x # xs) ys =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n   (x # xs) ys =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "using False"], ["proof (prove)\nusing this:\n  proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n   (x # xs) ys =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some y) \\<or>\n     proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n      (x # xs) ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  (proper_interval ao (Some y) \\<or>\n   proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n    (x # xs) ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (proper_interval ao (Some y) \\<or>\n   proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n    (x # xs) ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "with False True"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  y < x\n  (proper_interval ao (Some y) \\<or>\n   proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n    (x # xs) ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x < y\n  y < x\n  (proper_interval ao (Some y) \\<or>\n   proper_interval_set_Compl_aux (Some y) (card (UNIV - above ao) + 1)\n    (x # xs) ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "with \\<open>\\<not> x < y\\<close>"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  \\<not> y < x", "have \"x = y\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. x = y", "by simp"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"proper_interval ao (Some x) \\<and> \n                (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n                 CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2) \\<longleftrightarrow>\n               (\\<exists>A \\<subseteq> above ao. set (x # xs) \\<sqsubset>' A \\<and> A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\"\n            (is \"?below \\<and> ?card \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof(cases \"?below\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some x)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "hence \"- set (y # ys) \\<inter> above ao \\<sqsubset>' set (x # xs)\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao \\<sqsubset>' set (x # xs)", "using \\<open>x = y\\<close> yys_above xxs_above y_Min"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  x = y\n  set (y # ys) \\<subseteq> above ao\n  set (x # xs) \\<subseteq> above ao\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao \\<sqsubset>' set (x # xs)", "by(auto simp add: not_less set_less_aux_def proper_interval_Some2 intro!: bexI[where x=y])"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao \\<sqsubset>' set (x # xs)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "with False"], ["proof (chain)\npicking this:\n  \\<not> proper_interval ao (Some x)\n  - set (y # ys) \\<inter> above ao \\<sqsubset>' set (x # xs)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  - set (y # ys) \\<inter> above ao \\<sqsubset>' set (x # xs)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by(auto dest: set_less_aux_trans)"], ["proof (state)\nthis:\n  (proper_interval ao (Some x) \\<and>\n   (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "then"], ["proof (chain)\npicking this:\n  proper_interval ao (Some x)", "obtain z where z: \"z \\<in> above ao\" \"z < x\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> above ao; z < x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "have \"?card \\<longleftrightarrow> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n     CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "then"], ["proof (chain)\npicking this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "obtain A where less_A: \"set (x # xs)  \\<sqsubset>' A\"\n                and A_less: \"A \\<sqsubset>' - set (y # ys) \\<inter> above ao\"\n                and subset: \"A \\<subseteq> above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>set (x # xs) \\<sqsubset>' A;\n         A \\<sqsubset>' - set (y # ys) \\<inter> above ao;\n         A \\<subseteq> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "{"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "assume c_ys: \"CARD('a) - (card (UNIV - above ao) + length ys) = 2\"\n                  and c_xs: \"CARD('a) - (card (UNIV - above ao) + length xs) = 2\""], ["proof (state)\nthis:\n  CARD('a) - (card (UNIV - above ao) + length ys) = 2\n  CARD('a) - (card (UNIV - above ao) + length xs) = 2\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "from c_ys yys_above len_ys y_Min"], ["proof (chain)\npicking this:\n  CARD('a) - (card (UNIV - above ao) + length ys) = 2\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n  \\<forall>y'\\<in>set ys. y < y'", "have \"card (UNIV - (UNIV - above ao) - set (y # ys)) = 1\""], ["proof (prove)\nusing this:\n  CARD('a) - (card (UNIV - above ao) + length ys) = 2\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (y # ys)) = 1", "by(subst card_Diff_subset)(auto simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) = 1\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "then"], ["proof (chain)\npicking this:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) = 1", "obtain z' where eq_y: \"- set (y # ys) \\<inter> above ao = {z'}\""], ["proof (prove)\nusing this:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        - set (y # ys) \\<inter> above ao = {z'} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding card_eq_1_iff"], ["proof (prove)\nusing this:\n  \\<exists>x. UNIV - (UNIV - above ao) - set (y # ys) = {x}\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        - set (y # ys) \\<inter> above ao = {z'} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao = {z'}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "moreover"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao = {z'}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "from z"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z < x", "have \"z \\<notin> set (y # ys)\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. z \\<notin> set (y # ys)", "using \\<open>x = y\\<close> y_Min"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  x = y\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. z \\<notin> set (y # ys)", "by auto"], ["proof (state)\nthis:\n  z \\<notin> set (y # ys)\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "ultimately"], ["proof (chain)\npicking this:\n  - set (y # ys) \\<inter> above ao = {z'}\n  z \\<notin> set (y # ys)", "have \"z' = z\""], ["proof (prove)\nusing this:\n  - set (y # ys) \\<inter> above ao = {z'}\n  z \\<notin> set (y # ys)\n\ngoal (1 subgoal):\n 1. z' = z", "using z"], ["proof (prove)\nusing this:\n  - set (y # ys) \\<inter> above ao = {z'}\n  z \\<notin> set (y # ys)\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. z' = z", "by fastforce"], ["proof (state)\nthis:\n  z' = z\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "from c_xs xxs_above len_xs x_Min"], ["proof (chain)\npicking this:\n  CARD('a) - (card (UNIV - above ao) + length xs) = 2\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n  \\<forall>x'\\<in>set xs. x < x'", "have \"card (UNIV - (UNIV - above ao) - set (x # xs)) = 1\""], ["proof (prove)\nusing this:\n  CARD('a) - (card (UNIV - above ao) + length xs) = 2\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (x # xs)) = 1", "by(subst card_Diff_subset)(auto simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) = 1\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "then"], ["proof (chain)\npicking this:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) = 1", "obtain z'' where eq_x: \"- set (x # xs) \\<inter> above ao = {z''}\""], ["proof (prove)\nusing this:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>z''.\n        - set (x # xs) \\<inter> above ao = {z''} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding card_eq_1_iff"], ["proof (prove)\nusing this:\n  \\<exists>xa. UNIV - (UNIV - above ao) - set (x # xs) = {xa}\n\ngoal (1 subgoal):\n 1. (\\<And>z''.\n        - set (x # xs) \\<inter> above ao = {z''} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao = {z''}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "moreover"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao = {z''}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "from z"], ["proof (chain)\npicking this:\n  z \\<in> above ao\n  z < x", "have \"z \\<notin> set (x # xs)\""], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. z \\<notin> set (x # xs)", "using x_Min"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. z \\<notin> set (x # xs)", "by auto"], ["proof (state)\nthis:\n  z \\<notin> set (x # xs)\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "ultimately"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao = {z''}\n  z \\<notin> set (x # xs)", "have \"z'' = z\""], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao = {z''}\n  z \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. z'' = z", "using z"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao = {z''}\n  z \\<notin> set (x # xs)\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. z'' = z", "by fastforce"], ["proof (state)\nthis:\n  z'' = z\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "from less_A subset"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above ao", "obtain q where \"q \\<in> A\" \"q \\<in> above ao\" \"q \\<notin> set (x # xs)\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q \\<in> A; q \\<in> above ao;\n         q \\<notin> set (x # xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: set_less_aux_def)"], ["proof (state)\nthis:\n  q \\<in> A\n  q \\<in> above ao\n  q \\<notin> set (x # xs)\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "hence \"q \\<in> {z''}\""], ["proof (prove)\nusing this:\n  q \\<in> A\n  q \\<in> above ao\n  q \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. q \\<in> {z''}", "unfolding eq_x[symmetric]"], ["proof (prove)\nusing this:\n  q \\<in> A\n  q \\<in> above ao\n  q \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. q \\<in> - set (x # xs) \\<inter> above ao", "by simp"], ["proof (state)\nthis:\n  q \\<in> {z''}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "hence \"q = z''\""], ["proof (prove)\nusing this:\n  q \\<in> {z''}\n\ngoal (1 subgoal):\n 1. q = z''", "by simp"], ["proof (state)\nthis:\n  q = z''\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "with \\<open>q \\<in> A\\<close> \\<open>z' = z\\<close> \\<open>z'' = z\\<close> z"], ["proof (chain)\npicking this:\n  q \\<in> A\n  z' = z\n  z'' = z\n  z \\<in> above ao\n  z < x\n  q = z''", "have \"- set (y # ys) \\<inter> above ao \\<subseteq> A\""], ["proof (prove)\nusing this:\n  q \\<in> A\n  z' = z\n  z'' = z\n  z \\<in> above ao\n  z < x\n  q = z''\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao \\<subseteq> A", "unfolding eq_y"], ["proof (prove)\nusing this:\n  q \\<in> A\n  z' = z\n  z'' = z\n  z \\<in> above ao\n  z < x\n  q = z''\n\ngoal (1 subgoal):\n 1. {z'} \\<subseteq> A", "by simp"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao \\<subseteq> A\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "hence \"- set (y # ys) \\<inter> above ao \\<sqsubseteq>' A\""], ["proof (prove)\nusing this:\n  - set (y # ys) \\<inter> above ao \\<subseteq> A\n\ngoal (1 subgoal):\n 1. - set (y # ys) \\<inter> above ao \\<sqsubseteq>' A", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  - set (y # ys) \\<inter> above ao \\<sqsubseteq>' A\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "with A_less"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  - set (y # ys) \\<inter> above ao \\<sqsubseteq>' A", "have False"], ["proof (prove)\nusing this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  - set (y # ys) \\<inter> above ao \\<sqsubseteq>' A\n\ngoal (1 subgoal):\n 1. False", "by(auto dest: set_less_trans_set_less_eq)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "}"], ["proof (state)\nthis:\n  \\<lbrakk>CARD('a) - (card (UNIV - above ao) + length ys) = 2;\n   CARD('a) - (card (UNIV - above ao) + length xs) = 2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "thus ?card"], ["proof (prove)\nusing this:\n  \\<lbrakk>CARD('a) - (card (UNIV - above ao) + length ys) = 2;\n   CARD('a) - (card (UNIV - above ao) + length xs) = 2\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2", "by auto"], ["proof (state)\nthis:\n  CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n  CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "assume ?card (is \"?card_ys \\<or> ?card_xs\")"], ["proof (state)\nthis:\n  CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n  CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "thus ?rhs"], ["proof (prove)\nusing this:\n  CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n  CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "assume ?card_ys"], ["proof (state)\nthis:\n  CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "let ?YS = \"UNIV - (UNIV - above ao) - set (y # ys)\""], ["proof (state)\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "from \\<open>?card_ys\\<close> yys_above len_ys y_Min"], ["proof (chain)\npicking this:\n  CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n  \\<forall>y'\\<in>set ys. y < y'", "have \"card ?YS \\<noteq> 1\""], ["proof (prove)\nusing this:\n  CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2\n  set (y # ys) \\<subseteq> above ao\n  length ys = card (set ys)\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 1", "by(subst card_Diff_subset)(auto simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 1\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 1\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"?YS \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV - (UNIV - above ao) - set (y # ys) \\<noteq> {}", "using True y_Min yys_above \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n  \\<forall>y'\\<in>set ys. y < y'\n  set (y # ys) \\<subseteq> above ao\n  x = y\n\ngoal (1 subgoal):\n 1. UNIV - (UNIV - above ao) - set (y # ys) \\<noteq> {}", "by(fastforce simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  UNIV - (UNIV - above ao) - set (y # ys) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"card ?YS \\<noteq> 0\""], ["proof (prove)\nusing this:\n  UNIV - (UNIV - above ao) - set (y # ys) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 0\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 1\n  card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 0", "have \"card ?YS > 1\""], ["proof (prove)\nusing this:\n  card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 1\n  card (UNIV - (UNIV - above ao) - set (y # ys)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < card (UNIV - (UNIV - above ao) - set (y # ys))", "by(cases \"card ?YS\") simp_all"], ["proof (state)\nthis:\n  1 < card (UNIV - (UNIV - above ao) - set (y # ys))\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "from card_gt_1D[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>x ya.\n     x \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and>\n     ya \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and> x \\<noteq> ya", "obtain x' y' \n                  where x': \"x' \\<in> above ao\" \"x' \\<notin> set (y # ys)\"\n                  and y': \"y' \\<in> above ao\" \"y' \\<notin> set (y # ys)\"\n                  and neq: \"x' \\<noteq> y'\""], ["proof (prove)\nusing this:\n  \\<exists>x ya.\n     x \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and>\n     ya \\<in> UNIV - (UNIV - above ao) - set (y # ys) \\<and> x \\<noteq> ya\n\ngoal (1 subgoal):\n 1. (\\<And>x' y'.\n        \\<lbrakk>x' \\<in> above ao; x' \\<notin> set (y # ys);\n         y' \\<in> above ao; y' \\<notin> set (y # ys);\n         x' \\<noteq> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' \\<in> above ao\n  x' \\<notin> set (y # ys)\n  y' \\<in> above ao\n  y' \\<notin> set (y # ys)\n  x' \\<noteq> y'\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "let ?A = \"{z}\""], ["proof (state)\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"set (x # xs) \\<sqsubset>' ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {z}", "using z x_Min"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' {z}", "by(auto simp add: set_less_aux_def intro!: rev_bexI)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "{"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' {z}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"?A \\<subseteq> - set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z} \\<subseteq> - set (y # ys) \\<inter> above ao", "using z \\<open>x = y\\<close> y_Min"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  x = y\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. {z} \\<subseteq> - set (y # ys) \\<inter> above ao", "by(auto)"], ["proof (state)\nthis:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"x' \\<notin> ?A \\<or> y' \\<notin> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<notin> {z} \\<or> y' \\<notin> {z}", "using neq"], ["proof (prove)\nusing this:\n  x' \\<noteq> y'\n\ngoal (1 subgoal):\n 1. x' \\<notin> {z} \\<or> y' \\<notin> {z}", "by auto"], ["proof (state)\nthis:\n  x' \\<notin> {z} \\<or> y' \\<notin> {z}\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "with x' y'"], ["proof (chain)\npicking this:\n  x' \\<in> above ao\n  x' \\<notin> set (y # ys)\n  y' \\<in> above ao\n  y' \\<notin> set (y # ys)\n  x' \\<notin> {z} \\<or> y' \\<notin> {z}", "have \"?A \\<noteq> - set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  x' \\<in> above ao\n  x' \\<notin> set (y # ys)\n  y' \\<in> above ao\n  y' \\<notin> set (y # ys)\n  x' \\<notin> {z} \\<or> y' \\<notin> {z}\n\ngoal (1 subgoal):\n 1. {z} \\<noteq> - set (y # ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  {z} \\<noteq> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n  {z} \\<noteq> - set (y # ys) \\<inter> above ao", "have \"?A \\<subset> - set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  {z} \\<subseteq> - set (y # ys) \\<inter> above ao\n  {z} \\<noteq> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {z} \\<subset> - set (y # ys) \\<inter> above ao", "by(rule psubsetI)"], ["proof (state)\nthis:\n  {z} \\<subset> - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"?A \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  {z} \\<subset> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by(fastforce intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "}"], ["proof (state)\nthis:\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n 2. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' {z}\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' {z}\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "using z"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' {z}\n  {z} \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "assume ?card_xs"], ["proof (state)\nthis:\n  CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "let ?XS = \"UNIV - (UNIV - above ao) - set (x # xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "from \\<open>?card_xs\\<close> xxs_above len_xs x_Min"], ["proof (chain)\npicking this:\n  CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n  \\<forall>x'\\<in>set xs. x < x'", "have \"card ?XS \\<noteq> 1\""], ["proof (prove)\nusing this:\n  CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2\n  set (x # xs) \\<subseteq> above ao\n  length xs = card (set xs)\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 1", "by(subst card_Diff_subset)(auto simp add: card_Diff_subset)"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"?XS \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV - (UNIV - above ao) - set (x # xs) \\<noteq> {}", "using True x_Min xxs_above"], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n  \\<forall>x'\\<in>set xs. x < x'\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. UNIV - (UNIV - above ao) - set (x # xs) \\<noteq> {}", "by(fastforce simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  UNIV - (UNIV - above ao) - set (x # xs) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"card ?XS \\<noteq> 0\""], ["proof (prove)\nusing this:\n  UNIV - (UNIV - above ao) - set (x # xs) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 1\n  card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 0", "have \"card ?XS > 1\""], ["proof (prove)\nusing this:\n  card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 1\n  card (UNIV - (UNIV - above ao) - set (x # xs)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 < card (UNIV - (UNIV - above ao) - set (x # xs))", "by(cases \"card ?XS\") simp_all"], ["proof (state)\nthis:\n  1 < card (UNIV - (UNIV - above ao) - set (x # xs))\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "from card_gt_1D[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>xa y.\n     xa \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and>\n     y \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and> xa \\<noteq> y", "obtain x' y' \n                  where x': \"x' \\<in> above ao\" \"x' \\<notin> set (x # xs)\"\n                  and y': \"y' \\<in> above ao\" \"y' \\<notin> set (x # xs)\"\n                  and neq: \"x' \\<noteq> y'\""], ["proof (prove)\nusing this:\n  \\<exists>xa y.\n     xa \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and>\n     y \\<in> UNIV - (UNIV - above ao) - set (x # xs) \\<and> xa \\<noteq> y\n\ngoal (1 subgoal):\n 1. (\\<And>x' y'.\n        \\<lbrakk>x' \\<in> above ao; x' \\<notin> set (x # xs);\n         y' \\<in> above ao; y' \\<notin> set (x # xs);\n         x' \\<noteq> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' \\<in> above ao\n  x' \\<notin> set (x # xs)\n  y' \\<in> above ao\n  y' \\<notin> set (x # xs)\n  x' \\<noteq> y'\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "define A\n                  where \"A = (if x' = Min (above ao) then insert y' (set (x # xs)) else insert x' (set (x # xs)))\""], ["proof (state)\nthis:\n  A =\n  (if x' = Min (above ao) then insert y' (set (x # xs))\n   else insert x' (set (x # xs)))\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"set (x # xs) \\<subseteq> A\""], ["proof (prove)\nusing this:\n  A =\n  (if x' = Min (above ao) then insert y' (set (x # xs))\n   else insert x' (set (x # xs)))\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"set (x # xs) \\<noteq> \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<noteq> A", "using neq x' y'"], ["proof (prove)\nusing this:\n  x' \\<noteq> y'\n  x' \\<in> above ao\n  x' \\<notin> set (x # xs)\n  y' \\<in> above ao\n  y' \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<noteq> A", "by(auto simp add: A_def)"], ["proof (state)\nthis:\n  set (x # xs) \\<noteq> A\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<subseteq> A\n  set (x # xs) \\<noteq> A", "have \"set (x # xs) \\<subset> A\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> A\n  set (x # xs) \\<noteq> A\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subset> A", ".."], ["proof (state)\nthis:\n  set (x # xs) \\<subset> A\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"set (x # xs) \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  set (x # xs) \\<subset> A\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<sqsubset>' A", "by(fastforce intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "{"], ["proof (state)\nthis:\n  set (x # xs) \\<sqsubset>' A\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have nempty: \"above ao \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. above ao \\<noteq> {}", "using z"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"A \\<sqsubset>' {Min (above ao)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<sqsubset>' {Min (above ao)}", "using z x' y' neq \\<open>x = y\\<close> x_Min xxs_above"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n  x' \\<in> above ao\n  x' \\<notin> set (x # xs)\n  y' \\<in> above ao\n  y' \\<notin> set (x # xs)\n  x' \\<noteq> y'\n  x = y\n  \\<forall>x'\\<in>set xs. x < x'\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' {Min (above ao)}", "by(auto 6 4 simp add: set_less_aux_def A_def nempty intro!: rev_bexI Min_eqI)"], ["proof (state)\nthis:\n  A \\<sqsubset>' {Min (above ao)}\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "also"], ["proof (state)\nthis:\n  A \\<sqsubset>' {Min (above ao)}\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"Min (above ao) \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (above ao) \\<le> z", "using z"], ["proof (prove)\nusing this:\n  z \\<in> above ao\n  z < x\n\ngoal (1 subgoal):\n 1. Min (above ao) \\<le> z", "by(simp)"], ["proof (state)\nthis:\n  Min (above ao) \\<le> z\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"Min (above ao) < x\""], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n\ngoal (1 subgoal):\n 1. Min (above ao) < x", "using \\<open>z < x\\<close>"], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n  z < x\n\ngoal (1 subgoal):\n 1. Min (above ao) < x", "by(rule le_less_trans)"], ["proof (state)\nthis:\n  Min (above ao) < x\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "with \\<open>x = y\\<close> y_Min"], ["proof (chain)\npicking this:\n  x = y\n  \\<forall>y'\\<in>set ys. y < y'\n  Min (above ao) < x", "have \"Min (above ao) \\<notin> set (y # ys)\""], ["proof (prove)\nusing this:\n  x = y\n  \\<forall>y'\\<in>set ys. y < y'\n  Min (above ao) < x\n\ngoal (1 subgoal):\n 1. Min (above ao) \\<notin> set (y # ys)", "by auto"], ["proof (state)\nthis:\n  Min (above ao) \\<notin> set (y # ys)\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"{Min (above ao)} \\<subseteq> - set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  Min (above ao) \\<notin> set (y # ys)\n\ngoal (1 subgoal):\n 1. {Min (above ao)} \\<subseteq> - set (y # ys) \\<inter> above ao", "by(auto simp add: nempty)"], ["proof (state)\nthis:\n  {Min (above ao)} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "hence \"{Min (above ao)} \\<sqsubseteq>' \\<dots>\""], ["proof (prove)\nusing this:\n  {Min (above ao)} \\<subseteq> - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {Min (above ao)} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  {Min (above ao)} \\<sqsubseteq>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "finally"], ["proof (chain)\npicking this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"A \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "."], ["proof (state)\nthis:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "}"], ["proof (state)\nthis:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "have \"A \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> above ao", "using xxs_above yys_above x' y'"], ["proof (prove)\nusing this:\n  set (x # xs) \\<subseteq> above ao\n  set (y # ys) \\<subseteq> above ao\n  x' \\<in> above ao\n  x' \\<notin> set (x # xs)\n  y' \\<in> above ao\n  y' \\<notin> set (x # xs)\n\ngoal (1 subgoal):\n 1. A \\<subseteq> above ao", "by(auto simp add: A_def)"], ["proof (state)\nthis:\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq>\n    2 \\<Longrightarrow>\n    \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao", "show ?rhs"], ["proof (prove)\nusing this:\n  set (x # xs) \\<sqsubset>' A\n  A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n  A \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A\\<subseteq>above ao.\n       set (x # xs) \\<sqsubset>' A \\<and>\n       A \\<sqsubset>' - set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A\\<subseteq>above ao.\n     set (x # xs) \\<sqsubset>' A \\<and>\n     A \\<sqsubset>' - set (y # ys) \\<inter> above ao\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n   CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n   CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "using True"], ["proof (prove)\nusing this:\n  (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n   CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (proper_interval ao (Some x) \\<and>\n     (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n      CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  (proper_interval ao (Some x) \\<and>\n   (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (proper_interval ao (Some x) \\<and>\n   (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (proper_interval ao (Some x) \\<and>\n   (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "using \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  (proper_interval ao (Some x) \\<and>\n   (CARD('a) - (card (UNIV - above ao) + length ys) \\<noteq> 2 \\<or>\n    CARD('a) - (card (UNIV - above ao) + length xs) \\<noteq> 2)) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n  x = y\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n     (y # ys) =\n    (\\<exists>A\\<subseteq>above ao.\n        set (x # xs) \\<sqsubset>' A \\<and>\n        A \\<sqsubset>' - set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) (x # xs)\n   (y # ys) =\n  (\\<exists>A\\<subseteq>above ao.\n      set (x # xs) \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux ao (card (UNIV - above ao)) xs ys =\n  (\\<exists>A\\<subseteq>above ao.\n      set xs \\<sqsubset>' A \\<and>\n      A \\<sqsubset>' - set ys \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>set xs \\<subseteq> above ?ao2;\n   set ys \\<subseteq> above ?ao2\\<rbrakk>\n  \\<Longrightarrow> proper_interval_set_Compl_aux ?ao2\n                     (card (UNIV - above ?ao2)) xs ys =\n                    (\\<exists>A\\<subseteq>above ?ao2.\n                        set xs \\<sqsubset>' A \\<and>\n                        A \\<sqsubset>' - set ys \\<inter> above ?ao2)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "from this[of None]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set xs \\<subseteq> above None;\n   set ys \\<subseteq> above None\\<rbrakk>\n  \\<Longrightarrow> proper_interval_set_Compl_aux None\n                     (card (UNIV - above None)) xs ys =\n                    (\\<exists>A\\<subseteq>above None.\n                        set xs \\<sqsubset>' A \\<and>\n                        A \\<sqsubset>' - set ys \\<inter> above None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> above None;\n   set ys \\<subseteq> above None\\<rbrakk>\n  \\<Longrightarrow> proper_interval_set_Compl_aux None\n                     (card (UNIV - above None)) xs ys =\n                    (\\<exists>A\\<subseteq>above None.\n                        set xs \\<sqsubset>' A \\<and>\n                        A \\<sqsubset>' - set ys \\<inter> above None)\n\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux None 0 xs ys =\n    (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)", "by(simp)"], ["proof (state)\nthis:\n  proper_interval_set_Compl_aux None 0 xs ys =\n  (\\<exists>A. set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' - set ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proper_interval_Compl_set_aux:\n  assumes fin: \"finite (UNIV :: 'a set)\"\n  and xs: \"sorted xs\" \"distinct xs\" \n  and ys: \"sorted ys\" \"distinct ys\" \n  shows \"proper_interval_Compl_set_aux None xs ys \\<longleftrightarrow> (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "note [simp] = finite_subset[OF subset_UNIV fin]"], ["proof (state)\nthis:\n  finite ?A\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "define above where \"above = case_option UNIV (Collect \\<circ> less)\""], ["proof (state)\nthis:\n  above = case_option UNIV (Collect \\<circ> (<))\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "have above_simps [simp]: \"above None = UNIV\" \"\\<And>x. above (Some x) = {y. x < y}\"\n    and above_upclosed: \"\\<And>x y ao. \\<lbrakk> x \\<in> above ao; x < y \\<rbrakk> \\<Longrightarrow> y \\<in> above ao\"\n    and proper_interval_Some2: \"\\<And>x ao. proper_interval ao (Some x) \\<longleftrightarrow> (\\<exists>z\\<in>above ao. z < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (above None = UNIV &&& (\\<And>x. above (Some x) = {y. x < y})) &&&\n    (\\<And>x y ao.\n        \\<lbrakk>x \\<in> above ao; x < y\\<rbrakk>\n        \\<Longrightarrow> y \\<in> above ao) &&&\n    (\\<And>x ao.\n        proper_interval ao (Some x) = (\\<exists>z\\<in>above ao. z < x))", "by(simp_all add: proper_interval_simps above_def split: option.splits)"], ["proof (state)\nthis:\n  above None = UNIV\n  above (Some ?x) = {y. ?x < y}\n  \\<lbrakk>?x \\<in> above ?ao; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> above ?ao\n  proper_interval ?ao (Some ?x) = (\\<exists>z\\<in>above ?ao. z < ?x)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "{"], ["proof (state)\nthis:\n  above None = UNIV\n  above (Some ?x) = {y. ?x < y}\n  \\<lbrakk>?x \\<in> above ?ao; ?x < ?y\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> above ?ao\n  proper_interval ?ao (Some ?x) = (\\<exists>z\\<in>above ?ao. z < ?x)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "fix ao n"], ["proof (state)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "assume \"set xs \\<subseteq> above ao\" \"set ys \\<subseteq> above ao\""], ["proof (state)\nthis:\n  set xs \\<subseteq> above ao\n  set ys \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "from xs \\<open>set xs \\<subseteq> above ao\\<close> ys \\<open>set ys \\<subseteq> above ao\\<close>"], ["proof (chain)\npicking this:\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above ao\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above ao", "have \"proper_interval_Compl_set_aux ao xs ys \\<longleftrightarrow>\n          (\\<exists>A. - set xs \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and> A \\<inter> above ao \\<sqsubset>' set ys \\<inter> above ao)\""], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above ao\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao xs ys =\n    (\\<exists>A.\n        - set xs \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set ys \\<inter> above ao)", "proof(induction ao xs ys rule: proper_interval_Compl_set_aux.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "case (\"2_1\" ao ys)"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "{"], ["proof (state)\nthis:\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "fix A"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "assume \"above ao \\<sqsubset>' A \\<inter> above ao\""], ["proof (state)\nthis:\n  above ao \\<sqsubset>' A \\<inter> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "also"], ["proof (state)\nthis:\n  above ao \\<sqsubset>' A \\<inter> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "have \"\\<dots> \\<subseteq> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<subseteq> above ao", "by simp"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<subseteq> above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "hence \"A \\<inter> above ao \\<sqsubseteq>' above ao\""], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<sqsubseteq>' above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<sqsubseteq>' above ao\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "finally"], ["proof (chain)\npicking this:\n  above ao \\<sqsubset>' above ao", "have False"], ["proof (prove)\nusing this:\n  above ao \\<sqsubset>' above ao\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "}"], ["proof (state)\nthis:\n  above ao \\<sqsubset>' ?A2 \\<inter> above ao \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uv_.\n       \\<lbrakk>sorted []; distinct []; set [] \\<subseteq> above ao;\n        sorted uv_; distinct uv_; set uv_ \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao [] uv_ =\n                         (\\<exists>A.\n                             - set [] \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set uv_ \\<inter> above ao)\n 3. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "thus ?case"], ["proof (prove)\nusing this:\n  above ao \\<sqsubset>' ?A2 \\<inter> above ao \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao [] ys =\n    (\\<exists>A.\n        - set [] \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set ys \\<inter> above ao)", "by auto"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao [] ys =\n  (\\<exists>A.\n      - set [] \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set ys \\<inter> above ao)\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "case (\"2_2\" ao xs)"], ["proof (state)\nthis:\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above ao\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n\ngoal (2 subgoals):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)\n 2. \\<And>ao uu_.\n       \\<lbrakk>sorted uu_; distinct uu_; set uu_ \\<subseteq> above ao;\n        sorted []; distinct []; set [] \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao uu_ [] =\n                         (\\<exists>A.\n                             - set uu_ \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set [] \\<inter> above ao)", "thus ?case"], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above ao\n  sorted []\n  distinct []\n  set [] \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao xs [] =\n    (\\<exists>A.\n        - set xs \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set [] \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao xs [] =\n  (\\<exists>A.\n      - set xs \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set [] \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "case (1 ao x xs y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>x < y; sorted xs; distinct xs; set xs \\<subseteq> above (Some x);\n   sorted (y # ys); distinct (y # ys);\n   set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n  \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs (y # ys) =\n                    (\\<exists>A.\n                        - set xs \\<inter> above (Some x) \\<sqsubset>'\n                        A \\<inter> above (Some x) \\<and>\n                        A \\<inter> above (Some x) \\<sqsubset>'\n                        set (y # ys) \\<inter> above (Some x))\n  \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n   set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n   set ys \\<subseteq> above (Some y)\\<rbrakk>\n  \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs) ys =\n                    (\\<exists>A.\n                        - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n                        A \\<inter> above (Some y) \\<and>\n                        A \\<inter> above (Some y) \\<sqsubset>'\n                        set ys \\<inter> above (Some y))\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above ao\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "note xxs = \\<open>sorted (x # xs)\\<close> \\<open>distinct (x # xs)\\<close>"], ["proof (state)\nthis:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "hence xs: \"sorted xs\" \"distinct xs\" and x_Min: \"\\<forall>x' \\<in> set xs. x < x'\""], ["proof (prove)\nusing this:\n  sorted (x # xs)\n  distinct (x # xs)\n\ngoal (1 subgoal):\n 1. (sorted xs &&& distinct xs) &&& \\<forall>x'\\<in>set xs. x < x'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted xs\n  distinct xs\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "note yys = \\<open>sorted (y # ys)\\<close> \\<open>distinct (y # ys)\\<close>"], ["proof (state)\nthis:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "hence ys: \"sorted ys\" \"distinct ys\" and y_Min: \"\\<forall>y'\\<in>set ys. y < y'\""], ["proof (prove)\nusing this:\n  sorted (y # ys)\n  distinct (y # ys)\n\ngoal (1 subgoal):\n 1. (sorted ys &&& distinct ys) &&& \\<forall>y'\\<in>set ys. y < y'", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  sorted ys\n  distinct ys\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "note xxs_above = \\<open>set (x # xs) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "note yys_above = \\<open>set (y # ys) \\<subseteq> above ao\\<close>"], ["proof (state)\nthis:\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. \\<And>ao x xs y ys.\n       \\<lbrakk>\\<lbrakk>x < y; sorted xs; distinct xs;\n                 set xs \\<subseteq> above (Some x); sorted (y # ys);\n                 distinct (y # ys);\n                 set (y # ys) \\<subseteq> above (Some x)\\<rbrakk>\n                \\<Longrightarrow> proper_interval_Compl_set_aux (Some x) xs\n                                   (y # ys) =\n                                  (\\<exists>A.\n- set xs \\<inter> above (Some x) \\<sqsubset>'\nA \\<inter> above (Some x) \\<and>\nA \\<inter> above (Some x) \\<sqsubset>'\nset (y # ys) \\<inter> above (Some x));\n        \\<lbrakk>\\<not> x < y; y < x; sorted (x # xs); distinct (x # xs);\n         set (x # xs) \\<subseteq> above (Some y); sorted ys; distinct ys;\n         set ys \\<subseteq> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> proper_interval_Compl_set_aux (Some y) (x # xs)\n                           ys =\n                          (\\<exists>A.\n                              - set (x # xs) \\<inter>\n                              above (Some y) \\<sqsubset>'\n                              A \\<inter> above (Some y) \\<and>\n                              A \\<inter> above (Some y) \\<sqsubset>'\n                              set ys \\<inter> above (Some y));\n        sorted (x # xs); distinct (x # xs);\n        set (x # xs) \\<subseteq> above ao; sorted (y # ys);\n        distinct (y # ys); set (y # ys) \\<subseteq> above ao\\<rbrakk>\n       \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs)\n                          (y # ys) =\n                         (\\<exists>A.\n                             - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                             A \\<inter> above ao \\<and>\n                             A \\<inter> above ao \\<sqsubset>'\n                             set (y # ys) \\<inter> above ao)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof(cases \"x < y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  x < y\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have \"\\<not> proper_interval ao (Some x) \\<and> proper_interval_Compl_set_aux (Some x) xs (y # ys) \\<longleftrightarrow>\n              (\\<exists>A. - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and> A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\"\n          (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof(cases \"proper_interval ao (Some x)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "then"], ["proof (chain)\npicking this:\n  proper_interval ao (Some x)", "obtain z where z: \"z < x\" \"z \\<in> above ao\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z < x; z \\<in> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z < x\n  z \\<in> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence nempty: \"above ao \\<noteq> {}\""], ["proof (prove)\nusing this:\n  z < x\n  z \\<in> above ao\n\ngoal (1 subgoal):\n 1. above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  above ao \\<noteq> {}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "with z"], ["proof (chain)\npicking this:\n  z < x\n  z \\<in> above ao\n  above ao \\<noteq> {}", "have \"Min (above ao) \\<le> z\""], ["proof (prove)\nusing this:\n  z < x\n  z \\<in> above ao\n  above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min (above ao) \\<le> z", "by auto"], ["proof (state)\nthis:\n  Min (above ao) \\<le> z\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence \"Min (above ao) < x\""], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n\ngoal (1 subgoal):\n 1. Min (above ao) < x", "using \\<open>z < x\\<close>"], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n  z < x\n\ngoal (1 subgoal):\n 1. Min (above ao) < x", "by(rule le_less_trans)"], ["proof (state)\nthis:\n  Min (above ao) < x\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence \"set (y # ys) \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  Min (above ao) < x\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>'\n    - set (x # xs) \\<inter> above ao", "using y_Min x_Min z \\<open>x < y\\<close>"], ["proof (prove)\nusing this:\n  Min (above ao) < x\n  \\<forall>y'\\<in>set ys. y < y'\n  \\<forall>x'\\<in>set xs. x < x'\n  z < x\n  z \\<in> above ao\n  x < y\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>'\n    - set (x # xs) \\<inter> above ao", "by(fastforce simp add: set_less_aux_def nempty intro!: Min_eqI bexI[where x=\"Min (above ao)\"])"], ["proof (state)\nthis:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "using True"], ["proof (prove)\nusing this:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "by(auto dest: set_less_aux_trans set_less_aux_antisym)"], ["proof (state)\nthis:\n  (\\<not> proper_interval ao (Some x) \\<and>\n   proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence above_eq: \"above ao = insert x (above (Some x))\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. above ao = insert x (above (Some x))", "using xxs_above"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. above ao = insert x (above (Some x))", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "from x_Min"], ["proof (chain)\npicking this:\n  \\<forall>x'\\<in>set xs. x < x'", "have xs_above: \"set xs \\<subseteq> above (Some x)\""], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> above (Some x)", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "from \\<open>x < y\\<close> y_Min"], ["proof (chain)\npicking this:\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'", "have ys_above: \"set (y # ys) \\<subseteq> above (Some x)\""], ["proof (prove)\nusing this:\n  x < y\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<subseteq> above (Some x)", "by auto"], ["proof (state)\nthis:\n  set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have eq_xs: \"- set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao", "using above_eq"], ["proof (prove)\nusing this:\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have eq_ys: \"set (y # ys) \\<inter> above (Some x) = set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above (Some x) = set (y # ys) \\<inter> above ao", "using y_Min \\<open>x < y\\<close> xxs_above"], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n  x < y\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above (Some x) = set (y # ys) \\<inter> above ao", "by(auto intro: above_upclosed)"], ["proof (state)\nthis:\n  set (y # ys) \\<inter> above (Some x) = set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "from \\<open>x < y\\<close> xs xs_above yys ys_above"], ["proof (chain)\npicking this:\n  x < y\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above (Some x)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above (Some x)", "have \"proper_interval_Compl_set_aux (Some x) xs (y # ys) \\<longleftrightarrow>\n               (\\<exists>A. - set xs \\<inter> above (Some x) \\<sqsubset>' A \\<inter> above (Some x) \\<and>\n                    A \\<inter> above (Some x) \\<sqsubset>' set (y # ys) \\<inter> above (Some x))\""], ["proof (prove)\nusing this:\n  x < y\n  sorted xs\n  distinct xs\n  set xs \\<subseteq> above (Some x)\n  sorted (y # ys)\n  distinct (y # ys)\n  set (y # ys) \\<subseteq> above (Some x)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux (Some x) xs (y # ys) =\n    (\\<exists>A.\n        - set xs \\<inter> above (Some x) \\<sqsubset>'\n        A \\<inter> above (Some x) \\<and>\n        A \\<inter> above (Some x) \\<sqsubset>'\n        set (y # ys) \\<inter> above (Some x))", "by(rule \"1.IH\")"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux (Some x) xs (y # ys) =\n  (\\<exists>A.\n      - set xs \\<inter> above (Some x) \\<sqsubset>'\n      A \\<inter> above (Some x) \\<and>\n      A \\<inter> above (Some x) \\<sqsubset>'\n      set (y # ys) \\<inter> above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "also"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux (Some x) xs (y # ys) =\n  (\\<exists>A.\n      - set xs \\<inter> above (Some x) \\<sqsubset>'\n      A \\<inter> above (Some x) \\<and>\n      A \\<inter> above (Some x) \\<sqsubset>'\n      set (y # ys) \\<inter> above (Some x))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have \"\\<dots> \\<longleftrightarrow> ?rhs\" (is \"?lhs \\<longleftrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>A.\n        - set xs \\<inter> above (Some x) \\<sqsubset>'\n        A \\<inter> above (Some x) \\<and>\n        A \\<inter> above (Some x) \\<sqsubset>'\n        set (y # ys) \\<inter> above (Some x)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "assume ?lhs"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set xs \\<inter> above (Some x) \\<sqsubset>'\n     A \\<inter> above (Some x) \\<and>\n     A \\<inter> above (Some x) \\<sqsubset>'\n     set (y # ys) \\<inter> above (Some x)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A.\n     - set xs \\<inter> above (Some x) \\<sqsubset>'\n     A \\<inter> above (Some x) \\<and>\n     A \\<inter> above (Some x) \\<sqsubset>'\n     set (y # ys) \\<inter> above (Some x)", "obtain A where \"- set xs \\<inter> above (Some x) \\<sqsubset>' A \\<inter> above (Some x)\"\n              and \"A \\<inter> above (Some x) \\<sqsubset>' set (y # ys) \\<inter> above (Some x)\""], ["proof (prove)\nusing this:\n  \\<exists>A.\n     - set xs \\<inter> above (Some x) \\<sqsubset>'\n     A \\<inter> above (Some x) \\<and>\n     A \\<inter> above (Some x) \\<sqsubset>'\n     set (y # ys) \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>- set xs \\<inter> above (Some x) \\<sqsubset>'\n                 A \\<inter> above (Some x);\n         A \\<inter> above (Some x) \\<sqsubset>'\n         set (y # ys) \\<inter> above (Some x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  - set xs \\<inter> above (Some x) \\<sqsubset>' A \\<inter> above (Some x)\n  A \\<inter> above (Some x) \\<sqsubset>'\n  set (y # ys) \\<inter> above (Some x)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  - set xs \\<inter> above (Some x) \\<sqsubset>' A \\<inter> above (Some x)\n  A \\<inter> above (Some x) \\<sqsubset>'\n  set (y # ys) \\<inter> above (Some x)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "have \"A \\<inter> above (Some x) = (A - {x}) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> above (Some x) = (A - {x}) \\<inter> above ao", "using above_eq"], ["proof (prove)\nusing this:\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. A \\<inter> above (Some x) = (A - {x}) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  A \\<inter> above (Some x) = (A - {x}) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "ultimately"], ["proof (chain)\npicking this:\n  - set xs \\<inter> above (Some x) \\<sqsubset>' A \\<inter> above (Some x)\n  A \\<inter> above (Some x) \\<sqsubset>'\n  set (y # ys) \\<inter> above (Some x)\n  A \\<inter> above (Some x) = (A - {x}) \\<inter> above ao", "have \"- set (x # xs) \\<inter> above ao \\<sqsubset>' (A - {x}) \\<inter> above ao\"\n              and \"(A - {x}) \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  - set xs \\<inter> above (Some x) \\<sqsubset>' A \\<inter> above (Some x)\n  A \\<inter> above (Some x) \\<sqsubset>'\n  set (y # ys) \\<inter> above (Some x)\n  A \\<inter> above (Some x) = (A - {x}) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<sqsubset>'\n    (A - {x}) \\<inter> above ao &&&\n    (A - {x}) \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "using eq_xs eq_ys"], ["proof (prove)\nusing this:\n  - set xs \\<inter> above (Some x) \\<sqsubset>' A \\<inter> above (Some x)\n  A \\<inter> above (Some x) \\<sqsubset>'\n  set (y # ys) \\<inter> above (Some x)\n  A \\<inter> above (Some x) = (A - {x}) \\<inter> above ao\n  - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao\n  set (y # ys) \\<inter> above (Some x) = set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<sqsubset>'\n    (A - {x}) \\<inter> above ao &&&\n    (A - {x}) \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "by simp_all"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' (A - {x}) \\<inter> above ao\n  (A - {x}) \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "thus ?rhs"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' (A - {x}) \\<inter> above ao\n  (A - {x}) \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "obtain A where \"- set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\"\n              and A_less: \"A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>- set (x # xs) \\<inter> above ao \\<sqsubset>'\n                 A \\<inter> above ao;\n         A \\<inter> above ao \\<sqsubset>'\n         set (y # ys) \\<inter> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "moreover"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "have \"x \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> False", "assume \"x \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> False", "hence \"set (y # ys) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\""], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao", "using y_Min \\<open>x < y\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> A\n  \\<forall>y'\\<in>set ys. y < y'\n  x < y\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao", "by(auto simp add: above_eq set_less_aux_def intro!: bexI[where x=x])"], ["proof (state)\nthis:\n  set (y # ys) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> False", "with A_less"], ["proof (chain)\npicking this:\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n  set (y # ys) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao", "show False"], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n  set (y # ys) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n\ngoal (1 subgoal):\n 1. False", "by(auto dest: set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "hence \"A \\<inter> above ao = A \\<inter> above (Some x)\""], ["proof (prove)\nusing this:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao = A \\<inter> above (Some x)", "using above_eq"], ["proof (prove)\nusing this:\n  x \\<notin> A\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao = A \\<inter> above (Some x)", "by auto"], ["proof (state)\nthis:\n  A \\<inter> above ao = A \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "ultimately"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n  A \\<inter> above ao = A \\<inter> above (Some x)", "show ?lhs"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n  A \\<inter> above ao = A \\<inter> above (Some x)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "using eq_xs eq_ys"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n  A \\<inter> above ao = A \\<inter> above (Some x)\n  - set xs \\<inter> above (Some x) = - set (x # xs) \\<inter> above ao\n  set (y # ys) \\<inter> above (Some x) = set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set xs \\<inter> above (Some x) \\<sqsubset>'\n       A \\<inter> above (Some x) \\<and>\n       A \\<inter> above (Some x) \\<sqsubset>'\n       set (y # ys) \\<inter> above (Some x)", "by auto"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set xs \\<inter> above (Some x) \\<sqsubset>'\n     A \\<inter> above (Some x) \\<and>\n     A \\<inter> above (Some x) \\<sqsubset>'\n     set (y # ys) \\<inter> above (Some x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>A.\n      - set xs \\<inter> above (Some x) \\<sqsubset>'\n      A \\<inter> above (Some x) \\<and>\n      A \\<inter> above (Some x) \\<sqsubset>'\n      set (y # ys) \\<inter> above (Some x)) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some x) \\<Longrightarrow>\n    (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "finally"], ["proof (chain)\npicking this:\n  proper_interval_Compl_set_aux (Some x) xs (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval_Compl_set_aux (Some x) xs (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "using False"], ["proof (prove)\nusing this:\n  proper_interval_Compl_set_aux (Some x) xs (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<not> proper_interval ao (Some x) \\<and>\n     proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  (\\<not> proper_interval ao (Some x) \\<and>\n   proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<not> proper_interval ao (Some x) \\<and>\n   proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (2 subgoals):\n 1. x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<not> proper_interval ao (Some x) \\<and>\n   proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "using True"], ["proof (prove)\nusing this:\n  (\\<not> proper_interval ao (Some x) \\<and>\n   proper_interval_Compl_set_aux (Some x) xs (y # ys)) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n  x < y\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> x < y\n\ngoal (1 subgoal):\n 1. \\<not> x < y \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof(cases \"y < x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  y < x\n\ngoal (2 subgoals):\n 1. y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "show ?thesis (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof(cases \"proper_interval ao (Some y)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some y)\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "then"], ["proof (chain)\npicking this:\n  proper_interval ao (Some y)", "obtain z where z: \"z < y\" \"z \\<in> above ao\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z < y; z \\<in> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z < y\n  z \\<in> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence nempty: \"above ao \\<noteq> {}\""], ["proof (prove)\nusing this:\n  z < y\n  z \\<in> above ao\n\ngoal (1 subgoal):\n 1. above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  above ao \\<noteq> {}\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "with z"], ["proof (chain)\npicking this:\n  z < y\n  z \\<in> above ao\n  above ao \\<noteq> {}", "have \"Min (above ao) \\<le> z\""], ["proof (prove)\nusing this:\n  z < y\n  z \\<in> above ao\n  above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min (above ao) \\<le> z", "by auto"], ["proof (state)\nthis:\n  Min (above ao) \\<le> z\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence \"Min (above ao) < y\""], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n\ngoal (1 subgoal):\n 1. Min (above ao) < y", "using \\<open>z < y\\<close>"], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n  z < y\n\ngoal (1 subgoal):\n 1. Min (above ao) < y", "by(rule le_less_trans)"], ["proof (state)\nthis:\n  Min (above ao) < y\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence \"set (y # ys) \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  Min (above ao) < y\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>'\n    - set (x # xs) \\<inter> above ao", "using y_Min x_Min z \\<open>y < x\\<close>"], ["proof (prove)\nusing this:\n  Min (above ao) < y\n  \\<forall>y'\\<in>set ys. y < y'\n  \\<forall>x'\\<in>set xs. x < x'\n  z < y\n  z \\<in> above ao\n  y < x\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>'\n    - set (x # xs) \\<inter> above ao", "by(fastforce simp add: set_less_aux_def nempty intro!: Min_eqI bexI[where x=\"Min (above ao)\"])"], ["proof (state)\nthis:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n 2. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "using True \\<open>y < x\\<close>"], ["proof (prove)\nusing this:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n  proper_interval ao (Some y)\n  y < x\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "by(auto dest: set_less_aux_trans set_less_aux_antisym)"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence above_eq: \"above ao = insert y (above (Some y))\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. above ao = insert y (above (Some y))", "using yys_above"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some y)\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. above ao = insert y (above (Some y))", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "from y_Min"], ["proof (chain)\npicking this:\n  \\<forall>y'\\<in>set ys. y < y'", "have ys_above: \"set ys \\<subseteq> above (Some y)\""], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. set ys \\<subseteq> above (Some y)", "by auto"], ["proof (state)\nthis:\n  set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "from \\<open>y < x\\<close> x_Min"], ["proof (chain)\npicking this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'", "have xs_above: \"set (x # xs) \\<subseteq> above (Some y)\""], ["proof (prove)\nusing this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subseteq> above (Some y)", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have \"y \\<in> - set (x # xs) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> - set (x # xs) \\<inter> above ao", "using \\<open>y < x\\<close> x_Min yys_above"], ["proof (prove)\nusing this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. y \\<in> - set (x # xs) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  y \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "hence nempty: \"- set (x # xs) \\<inter> above ao \\<noteq> {}\""], ["proof (prove)\nusing this:\n  y \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have Min_x: \"Min (- set (x # xs) \\<inter> above ao) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (- set (x # xs) \\<inter> above ao) = y", "using above_eq \\<open>y < x\\<close> x_Min"], ["proof (prove)\nusing this:\n  above ao = insert y (above (Some y))\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. Min (- set (x # xs) \\<inter> above ao) = y", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (- set (x # xs) \\<inter> above ao) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have Min_y: \"Min (set (y # ys) \\<inter> above ao) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (set (y # ys) \\<inter> above ao) = y", "using y_Min above_eq"], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. Min (set (y # ys) \\<inter> above ao) = y", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (set (y # ys) \\<inter> above ao) = y\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have eq_xs: \"- set (x # xs) \\<inter> above ao - {y} = - set (x # xs) \\<inter> above (Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao - {y} =\n    - set (x # xs) \\<inter> above (Some y)", "by(auto simp add: above_eq)"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao - {y} =\n  - set (x # xs) \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have eq_ys: \"set ys \\<inter> above ao - {y} = set ys \\<inter> above (Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ys \\<inter> above ao - {y} = set ys \\<inter> above (Some y)", "using y_Min above_eq"], ["proof (prove)\nusing this:\n  \\<forall>y'\\<in>set ys. y < y'\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. set ys \\<inter> above ao - {y} = set ys \\<inter> above (Some y)", "by auto"], ["proof (state)\nthis:\n  set ys \\<inter> above ao - {y} = set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "from \\<open>\\<not> x < y\\<close> \\<open>y < x\\<close> xxs xs_above ys ys_above"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  y < x\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above (Some y)\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above (Some y)", "have \"proper_interval_Compl_set_aux (Some y) (x # xs) ys \\<longleftrightarrow>\n                 (\\<exists>A. - set (x # xs) \\<inter> above (Some y) \\<sqsubset>' A \\<inter> above (Some y) \\<and>\n                      A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y))\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  y < x\n  sorted (x # xs)\n  distinct (x # xs)\n  set (x # xs) \\<subseteq> above (Some y)\n  sorted ys\n  distinct ys\n  set ys \\<subseteq> above (Some y)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux (Some y) (x # xs) ys =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n        A \\<inter> above (Some y) \\<and>\n        A \\<inter> above (Some y) \\<sqsubset>'\n        set ys \\<inter> above (Some y))", "by(rule \"1.IH\")"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux (Some y) (x # xs) ys =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n      A \\<inter> above (Some y) \\<and>\n      A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "also"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux (Some y) (x # xs) ys =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n      A \\<inter> above (Some y) \\<and>\n      A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y))\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "have \"\\<dots> \\<longleftrightarrow> ?rhs\" (is \"?lhs' \\<longleftrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>A.\n        - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n        A \\<inter> above (Some y) \\<and>\n        A \\<inter> above (Some y) \\<sqsubset>'\n        set ys \\<inter> above (Some y)) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "assume ?lhs'"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n     A \\<inter> above (Some y) \\<and>\n     A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n     A \\<inter> above (Some y) \\<and>\n     A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "obtain A where less_A: \"- set (x # xs) \\<inter> above (Some y) \\<sqsubset>' A \\<inter> above (Some y)\"\n                and A_less: \"A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\""], ["proof (prove)\nusing this:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n     A \\<inter> above (Some y) \\<and>\n     A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>- set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n                 A \\<inter> above (Some y);\n         A \\<inter> above (Some y) \\<sqsubset>'\n         set ys \\<inter> above (Some y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n  A \\<inter> above (Some y)\n  A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "let ?A = \"insert y A\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "have Min_A: \"Min (?A \\<inter> above ao) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (insert y A \\<inter> above ao) = y", "using above_eq"], ["proof (prove)\nusing this:\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. Min (insert y A \\<inter> above ao) = y", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (insert y A \\<inter> above ao) = y\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  Min (insert y A \\<inter> above ao) = y\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "have A_eq: \"A \\<inter> above ao - {y} = A \\<inter> above (Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> above ao - {y} = A \\<inter> above (Some y)", "using above_eq"], ["proof (prove)\nusing this:\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao - {y} = A \\<inter> above (Some y)", "by auto"], ["proof (state)\nthis:\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "ultimately"], ["proof (chain)\npicking this:\n  Min (insert y A \\<inter> above ao) = y\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)", "have less_A': \"- set (x # xs) \\<inter> above ao \\<sqsubset>' ?A \\<inter> above ao\""], ["proof (prove)\nusing this:\n  Min (insert y A \\<inter> above ao) = y\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<sqsubset>'\n    insert y A \\<inter> above ao", "using nempty yys_above less_A Min_x eq_xs"], ["proof (prove)\nusing this:\n  Min (insert y A \\<inter> above ao) = y\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n  set (y # ys) \\<subseteq> above ao\n  - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n  A \\<inter> above (Some y)\n  Min (- set (x # xs) \\<inter> above ao) = y\n  - set (x # xs) \\<inter> above ao - {y} =\n  - set (x # xs) \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<sqsubset>'\n    insert y A \\<inter> above ao", "by(subst set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' insert y A \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "have A'_less: \"?A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert y A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "using yys_above nempty Min_A A_eq A_less Min_y eq_ys"], ["proof (prove)\nusing this:\n  set (y # ys) \\<subseteq> above ao\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n  Min (insert y A \\<inter> above ao) = y\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n  A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\n  Min (set (y # ys) \\<inter> above ao) = y\n  set ys \\<inter> above ao - {y} = set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. insert y A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "by(subst set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  insert y A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>'\n       set ys \\<inter> above (Some y) \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "with less_A'"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' insert y A \\<inter> above ao\n  insert y A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "show ?rhs"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' insert y A \\<inter> above ao\n  insert y A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "assume ?rhs"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "then"], ["proof (chain)\npicking this:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "obtain A where less_A: \"- set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\"\n                and A_less: \"A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>- set (x # xs) \\<inter> above ao \\<sqsubset>'\n                 A \\<inter> above ao;\n         A \\<inter> above ao \\<sqsubset>'\n         set (y # ys) \\<inter> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "from less_A"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao", "have nempty': \"A \\<inter> above ao \\<noteq> {}\""], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "have A_eq: \"A \\<inter> above ao - {y} = A \\<inter> above (Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> above ao - {y} = A \\<inter> above (Some y)", "using above_eq"], ["proof (prove)\nusing this:\n  above ao = insert y (above (Some y))\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao - {y} = A \\<inter> above (Some y)", "by auto"], ["proof (state)\nthis:\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "have y_in_xxs: \"y \\<in> - set (x # xs) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> - set (x # xs) \\<inter> above ao", "using \\<open>y < x\\<close> x_Min yys_above"], ["proof (prove)\nusing this:\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n  set (y # ys) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. y \\<in> - set (x # xs) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  y \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "moreover"], ["proof (state)\nthis:\n  y \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "have \"y \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> A", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> A \\<Longrightarrow> False", "assume \"y \\<notin> A\""], ["proof (state)\nthis:\n  y \\<notin> A\n\ngoal (1 subgoal):\n 1. y \\<notin> A \\<Longrightarrow> False", "hence \"A \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  y \\<notin> A\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao", "using \\<open>y < x\\<close> x_Min y_in_xxs"], ["proof (prove)\nusing this:\n  y \\<notin> A\n  y < x\n  \\<forall>x'\\<in>set xs. x < x'\n  y \\<in> - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao", "by(auto simp add: set_less_aux_def above_eq intro: bexI[where x=y])"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. y \\<notin> A \\<Longrightarrow> False", "with less_A"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao", "show False"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. False", "by(rule set_less_aux_antisym)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "hence Min_A: \"Min (A \\<inter> above ao) = y\""], ["proof (prove)\nusing this:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. Min (A \\<inter> above ao) = y", "using above_eq y_Min"], ["proof (prove)\nusing this:\n  y \\<in> A\n  above ao = insert y (above (Some y))\n  \\<forall>y'\\<in>set ys. y < y'\n\ngoal (1 subgoal):\n 1. Min (A \\<inter> above ao) = y", "by(auto intro!: Min_eqI)"], ["proof (state)\nthis:\n  Min (A \\<inter> above ao) = y\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "ultimately"], ["proof (chain)\npicking this:\n  A \\<inter> above ao \\<noteq> {}\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n  y \\<in> - set (x # xs) \\<inter> above ao\n  Min (A \\<inter> above ao) = y", "have less_A': \"- set (x # xs) \\<inter> above (Some y) \\<sqsubset>' A \\<inter> above (Some y)\""], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<noteq> {}\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n  y \\<in> - set (x # xs) \\<inter> above ao\n  Min (A \\<inter> above ao) = y\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n    A \\<inter> above (Some y)", "using nempty less_A Min_x eq_xs"], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<noteq> {}\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n  y \\<in> - set (x # xs) \\<inter> above ao\n  Min (A \\<inter> above ao) = y\n  - set (x # xs) \\<inter> above ao \\<noteq> {}\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  Min (- set (x # xs) \\<inter> above ao) = y\n  - set (x # xs) \\<inter> above ao - {y} =\n  - set (x # xs) \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n    A \\<inter> above (Some y)", "by(subst (asm) set_less_aux_rec)(auto dest: bspec[where x=y])"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n  A \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "have A'_less: \"A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "using A_less nempty' yys_above Min_A Min_y A_eq eq_ys"], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n  A \\<inter> above ao \\<noteq> {}\n  set (y # ys) \\<subseteq> above ao\n  Min (A \\<inter> above ao) = y\n  Min (set (y # ys) \\<inter> above ao) = y\n  A \\<inter> above ao - {y} = A \\<inter> above (Some y)\n  set ys \\<inter> above ao - {y} = set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "by(subst (asm) set_less_aux_rec) simp_all"], ["proof (state)\nthis:\n  A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>'\n       set (y # ys) \\<inter> above ao \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "with less_A'"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n  A \\<inter> above (Some y)\n  A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "show ?lhs'"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n  A \\<inter> above (Some y)\n  A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n       A \\<inter> above (Some y) \\<and>\n       A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)", "by blast"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n     A \\<inter> above (Some y) \\<and>\n     A \\<inter> above (Some y) \\<sqsubset>' set ys \\<inter> above (Some y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above (Some y) \\<sqsubset>'\n      A \\<inter> above (Some y) \\<and>\n      A \\<inter> above (Some y) \\<sqsubset>'\n      set ys \\<inter> above (Some y)) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> proper_interval ao (Some y) \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "finally"], ["proof (chain)\npicking this:\n  proper_interval_Compl_set_aux (Some y) (x # xs) ys =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\nusing this:\n  proper_interval_Compl_set_aux (Some y) (x # xs) ys =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "using \\<open>\\<not> x < y\\<close> \\<open>y < x\\<close> False"], ["proof (prove)\nusing this:\n  proper_interval_Compl_set_aux (Some y) (x # xs) ys =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n  \\<not> x < y\n  y < x\n  \\<not> proper_interval ao (Some y)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "with \\<open>\\<not> x < y\\<close>"], ["proof (chain)\npicking this:\n  \\<not> x < y\n  \\<not> y < x", "have \"x = y\""], ["proof (prove)\nusing this:\n  \\<not> x < y\n  \\<not> y < x\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<not> y < x \\<Longrightarrow>\n    proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "thus ?thesis (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof(cases \"proper_interval ao (Some x)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x = y; proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)\n 2. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "case True"], ["proof (state)\nthis:\n  proper_interval ao (Some x)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = y; proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)\n 2. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "then"], ["proof (chain)\npicking this:\n  proper_interval ao (Some x)", "obtain z where z: \"z < x\" \"z \\<in> above ao\""], ["proof (prove)\nusing this:\n  proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z < x; z \\<in> above ao\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: proper_interval_Some2)"], ["proof (state)\nthis:\n  z < x\n  z \\<in> above ao\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = y; proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)\n 2. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "hence nempty: \"above ao \\<noteq> {}\""], ["proof (prove)\nusing this:\n  z < x\n  z \\<in> above ao\n\ngoal (1 subgoal):\n 1. above ao \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  above ao \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = y; proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)\n 2. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "with z"], ["proof (chain)\npicking this:\n  z < x\n  z \\<in> above ao\n  above ao \\<noteq> {}", "have \"Min (above ao) \\<le> z\""], ["proof (prove)\nusing this:\n  z < x\n  z \\<in> above ao\n  above ao \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min (above ao) \\<le> z", "by auto"], ["proof (state)\nthis:\n  Min (above ao) \\<le> z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = y; proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)\n 2. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "hence \"Min (above ao) < x\""], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n\ngoal (1 subgoal):\n 1. Min (above ao) < x", "using \\<open>z < x\\<close>"], ["proof (prove)\nusing this:\n  Min (above ao) \\<le> z\n  z < x\n\ngoal (1 subgoal):\n 1. Min (above ao) < x", "by(rule le_less_trans)"], ["proof (state)\nthis:\n  Min (above ao) < x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = y; proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)\n 2. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "hence \"set (y # ys) \\<inter> above ao \\<sqsubset>' - set (x # xs) \\<inter> above ao\""], ["proof (prove)\nusing this:\n  Min (above ao) < x\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>'\n    - set (x # xs) \\<inter> above ao", "using y_Min x_Min z \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  Min (above ao) < x\n  \\<forall>y'\\<in>set ys. y < y'\n  \\<forall>x'\\<in>set xs. x < x'\n  z < x\n  z \\<in> above ao\n  x = y\n\ngoal (1 subgoal):\n 1. set (y # ys) \\<inter> above ao \\<sqsubset>'\n    - set (x # xs) \\<inter> above ao", "by(fastforce simp add: set_less_aux_def nempty intro!: Min_eqI bexI[where x=\"Min (above ao)\"])"], ["proof (state)\nthis:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x = y; proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)\n 2. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "using True \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  set (y # ys) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs) \\<inter> above ao\n  proper_interval ao (Some x)\n  x = y\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "by(auto dest: set_less_aux_trans set_less_aux_antisym)"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "case False"], ["proof (state)\nthis:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "hence above_eq: \"above ao = insert x (above (Some x))\""], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n\ngoal (1 subgoal):\n 1. above ao = insert x (above (Some x))", "using xxs_above"], ["proof (prove)\nusing this:\n  \\<not> proper_interval ao (Some x)\n  set (x # xs) \\<subseteq> above ao\n\ngoal (1 subgoal):\n 1. above ao = insert x (above (Some x))", "by(auto simp add: proper_interval_Some2 intro: above_upclosed)"], ["proof (state)\nthis:\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "have \"(ys = [] \\<longrightarrow> xs \\<noteq> []) \\<longleftrightarrow> ?rhs\" (is \"?lhs' \\<longleftrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ys = [] \\<longrightarrow> xs \\<noteq> []) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "proof(intro iffI strip notI)"], ["proof (state)\ngoal (2 subgoals):\n 1. ys = [] \\<longrightarrow> xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "assume ?lhs'"], ["proof (state)\nthis:\n  ys = [] \\<longrightarrow> xs \\<noteq> []\n\ngoal (2 subgoals):\n 1. ys = [] \\<longrightarrow> xs \\<noteq> [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "show ?rhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "proof(cases ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "case Nil"], ["proof (state)\nthis:\n  ys = []\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "with \\<open>?lhs'\\<close>"], ["proof (chain)\npicking this:\n  ys = [] \\<longrightarrow> xs \\<noteq> []\n  ys = []", "obtain x' xs' where xs_eq: \"xs = x' # xs'\""], ["proof (prove)\nusing this:\n  ys = [] \\<longrightarrow> xs \\<noteq> []\n  ys = []\n\ngoal (1 subgoal):\n 1. (\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  xs = x' # xs'\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "with xs"], ["proof (chain)\npicking this:\n  sorted xs\n  distinct xs\n  xs = x' # xs'", "have x'_Min: \"\\<forall>x'' \\<in> set xs'. x' < x''\""], ["proof (prove)\nusing this:\n  sorted xs\n  distinct xs\n  xs = x' # xs'\n\ngoal (1 subgoal):\n 1. \\<forall>x''\\<in>set xs'. x' < x''", "by(auto simp add: less_le)"], ["proof (state)\nthis:\n  \\<forall>x''\\<in>set xs'. x' < x''\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "let ?A = \"- set (x # xs')\""], ["proof (state)\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "have \"- set (x # xs) \\<inter> above ao \\<subseteq> ?A \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao\n    \\<subseteq> - set (x # xs') \\<inter> above ao", "using xs_eq"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao\n    \\<subseteq> - set (x # xs') \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao\n  \\<subseteq> - set (x # xs') \\<inter> above ao\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao\n  \\<subseteq> - set (x # xs') \\<inter> above ao\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "have \"x' \\<notin> - set (x # xs) \\<inter> above ao\" \"x' \\<in> ?A \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<notin> - set (x # xs) \\<inter> above ao &&&\n    x' \\<in> - set (x # xs') \\<inter> above ao", "using xs_eq xxs_above x'_Min x_Min"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  set (x # xs) \\<subseteq> above ao\n  \\<forall>x''\\<in>set xs'. x' < x''\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. x' \\<notin> - set (x # xs) \\<inter> above ao &&&\n    x' \\<in> - set (x # xs') \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  x' \\<notin> - set (x # xs) \\<inter> above ao\n  x' \\<in> - set (x # xs') \\<inter> above ao\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao\n  \\<subseteq> - set (x # xs') \\<inter> above ao\n  x' \\<notin> - set (x # xs) \\<inter> above ao\n  x' \\<in> - set (x # xs') \\<inter> above ao", "have \"- set (x # xs) \\<inter> above ao \\<subset> ?A \\<inter> above ao\""], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao\n  \\<subseteq> - set (x # xs') \\<inter> above ao\n  x' \\<notin> - set (x # xs) \\<inter> above ao\n  x' \\<in> - set (x # xs') \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao\n    \\<subset> - set (x # xs') \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao\n  \\<subset> - set (x # xs') \\<inter> above ao\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "hence \"- set (x # xs) \\<inter> above ao \\<sqsubset>' \\<dots> \""], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao\n  \\<subset> - set (x # xs') \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<sqsubset>'\n    - set (x # xs') \\<inter> above ao", "by(fastforce intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs') \\<inter> above ao\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs') \\<inter> above ao\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "have \"\\<dots> \\<sqsubset>' set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (x # xs') \\<inter> above ao \\<sqsubset>'\n    set (y # ys) \\<inter> above ao", "using Nil \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  ys = []\n  x = y\n\ngoal (1 subgoal):\n 1. - set (x # xs') \\<inter> above ao \\<sqsubset>'\n    set (y # ys) \\<inter> above ao", "by(auto simp add: set_less_aux_def above_eq)"], ["proof (state)\nthis:\n  - set (x # xs') \\<inter> above ao \\<sqsubset>'\n  set (y # ys) \\<inter> above ao\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow>\n    \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs') \\<inter> above ao\n  - set (x # xs') \\<inter> above ao \\<sqsubset>'\n  set (y # ys) \\<inter> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>'\n  - set (x # xs') \\<inter> above ao\n  - set (x # xs') \\<inter> above ao \\<sqsubset>'\n  set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "case (Cons y' ys')"], ["proof (state)\nthis:\n  ys = y' # ys'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "let ?A = \"{y}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "have \"- set (x # xs) \\<inter> above ao \\<sqsubset>' ?A \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<sqsubset>' {y} \\<inter> above ao", "using \\<open>x = y\\<close> x_Min"], ["proof (prove)\nusing this:\n  x = y\n  \\<forall>x'\\<in>set xs. x < x'\n\ngoal (1 subgoal):\n 1. - set (x # xs) \\<inter> above ao \\<sqsubset>' {y} \\<inter> above ao", "by(auto simp add: set_less_aux_def above_eq)"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' {y} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "moreover"], ["proof (state)\nthis:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' {y} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "have \"\\<dots> \\<subset> set (y # ys) \\<inter> above ao\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y} \\<inter> above ao \\<subset> set (y # ys) \\<inter> above ao", "using yys_above yys Cons"], ["proof (prove)\nusing this:\n  set (y # ys) \\<subseteq> above ao\n  sorted (y # ys)\n  distinct (y # ys)\n  ys = y' # ys'\n\ngoal (1 subgoal):\n 1. {y} \\<inter> above ao \\<subset> set (y # ys) \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  {y} \\<inter> above ao \\<subset> set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "hence \"?A \\<inter> above ao \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  {y} \\<inter> above ao \\<subset> set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. {y} \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "by(fastforce intro: psubset_finite_imp_set_less_aux)"], ["proof (state)\nthis:\n  {y} \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       \\<exists>A.\n          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n          A \\<inter> above ao \\<and>\n          A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "ultimately"], ["proof (chain)\npicking this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' {y} \\<inter> above ao\n  {y} \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "show ?thesis"], ["proof (prove)\nusing this:\n  - set (x # xs) \\<inter> above ao \\<sqsubset>' {y} \\<inter> above ao\n  {y} \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<exists>A.\n       - set (x # xs) \\<inter> above ao \\<sqsubset>'\n       A \\<inter> above ao \\<and>\n       A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "by blast"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "assume Nil: \"ys = []\" \"xs = []\" and ?rhs"], ["proof (state)\nthis:\n  ys = []\n  xs = []\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ys = []\n  xs = []\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao", "obtain A where less_A: \"- {x} \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\" \n                and A_less: \"A \\<inter> above ao \\<sqsubset>' {x}\""], ["proof (prove)\nusing this:\n  ys = []\n  xs = []\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>- {x} \\<inter> above ao \\<sqsubset>' A \\<inter> above ao;\n         A \\<inter> above ao \\<sqsubset>' {x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>x = y\\<close> above_eq"], ["proof (prove)\nusing this:\n  ys = []\n  xs = []\n  \\<exists>A.\n     - set (x # xs) \\<inter> above ao \\<sqsubset>'\n     A \\<inter> above ao \\<and>\n     A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao\n  x = y\n  above ao = insert x (above (Some x))\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>- {x} \\<inter> above ao \\<sqsubset>' A \\<inter> above ao;\n         A \\<inter> above ao \\<sqsubset>' {x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  - {x} \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubset>' {x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "have \"x \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> A", "using A_less"], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<sqsubset>' {x}\n\ngoal (1 subgoal):\n 1. x \\<notin> A", "by(auto simp add: set_less_aux_def above_eq)"], ["proof (state)\nthis:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"A \\<inter> above ao \\<subseteq> - {x} \\<inter> above ao\""], ["proof (prove)\nusing this:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<subseteq> - {x} \\<inter> above ao", "by auto"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<subseteq> - {x} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "hence \"A \\<inter> above ao \\<sqsubseteq>' \\<dots>\""], ["proof (prove)\nusing this:\n  A \\<inter> above ao \\<subseteq> - {x} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. A \\<inter> above ao \\<sqsubseteq>' - {x} \\<inter> above ao", "by(auto intro: subset_finite_imp_set_less_eq_aux)"], ["proof (state)\nthis:\n  A \\<inter> above ao \\<sqsubseteq>' - {x} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "with less_A"], ["proof (chain)\npicking this:\n  - {x} \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubseteq>' - {x} \\<inter> above ao", "have \"\\<dots> \\<sqsubset>' \\<dots>\""], ["proof (prove)\nusing this:\n  - {x} \\<inter> above ao \\<sqsubset>' A \\<inter> above ao\n  A \\<inter> above ao \\<sqsubseteq>' - {x} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. - {x} \\<inter> above ao \\<sqsubset>' - {x} \\<inter> above ao", "by(rule set_less_trans_set_less_eq)"], ["proof (state)\nthis:\n  - {x} \\<inter> above ao \\<sqsubset>' - {x} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>A.\n                - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                A \\<inter> above ao \\<and>\n                A \\<inter> above ao \\<sqsubset>'\n                set (y # ys) \\<inter> above ao;\n     ys = []; xs = []\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  - {x} \\<inter> above ao \\<sqsubset>' - {x} \\<inter> above ao\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ys = [] \\<longrightarrow> xs \\<noteq> []) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y; \\<not> proper_interval ao (Some x)\\<rbrakk>\n    \\<Longrightarrow> proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n                      (\\<exists>A.\n                          - set (x # xs) \\<inter> above ao \\<sqsubset>'\n                          A \\<inter> above ao \\<and>\n                          A \\<inter> above ao \\<sqsubset>'\n                          set (y # ys) \\<inter> above ao)", "with \\<open>x = y\\<close> False"], ["proof (chain)\npicking this:\n  x = y\n  \\<not> proper_interval ao (Some x)\n  (ys = [] \\<longrightarrow> xs \\<noteq> []) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = y\n  \\<not> proper_interval ao (Some x)\n  (ys = [] \\<longrightarrow> xs \\<noteq> []) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n    (\\<exists>A.\n        - set (x # xs) \\<inter> above ao \\<sqsubset>'\n        A \\<inter> above ao \\<and>\n        A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)", "by simp"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao (x # xs) (y # ys) =\n  (\\<exists>A.\n      - set (x # xs) \\<inter> above ao \\<sqsubset>'\n      A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set (y # ys) \\<inter> above ao)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux ao xs ys =\n  (\\<exists>A.\n      - set xs \\<inter> above ao \\<sqsubset>' A \\<inter> above ao \\<and>\n      A \\<inter> above ao \\<sqsubset>' set ys \\<inter> above ao)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>set xs \\<subseteq> above ?ao2;\n   set ys \\<subseteq> above ?ao2\\<rbrakk>\n  \\<Longrightarrow> proper_interval_Compl_set_aux ?ao2 xs ys =\n                    (\\<exists>A.\n                        - set xs \\<inter> above ?ao2 \\<sqsubset>'\n                        A \\<inter> above ?ao2 \\<and>\n                        A \\<inter> above ?ao2 \\<sqsubset>'\n                        set ys \\<inter> above ?ao2)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "from this[of None]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set xs \\<subseteq> above None;\n   set ys \\<subseteq> above None\\<rbrakk>\n  \\<Longrightarrow> proper_interval_Compl_set_aux None xs ys =\n                    (\\<exists>A.\n                        - set xs \\<inter> above None \\<sqsubset>'\n                        A \\<inter> above None \\<and>\n                        A \\<inter> above None \\<sqsubset>'\n                        set ys \\<inter> above None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> above None;\n   set ys \\<subseteq> above None\\<rbrakk>\n  \\<Longrightarrow> proper_interval_Compl_set_aux None xs ys =\n                    (\\<exists>A.\n                        - set xs \\<inter> above None \\<sqsubset>'\n                        A \\<inter> above None \\<and>\n                        A \\<inter> above None \\<sqsubset>'\n                        set ys \\<inter> above None)\n\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux None xs ys =\n    (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)", "by simp"], ["proof (state)\nthis:\n  proper_interval_Compl_set_aux None xs ys =\n  (\\<exists>A. - set xs \\<sqsubset>' A \\<and> A \\<sqsubset>' set ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Proper intervals for HOL types\\<close>"], ["", "instantiation unit :: proper_interval begin"], ["", "fun proper_interval_unit :: \"unit proper_interval\" where\n  \"proper_interval_unit None None = True\"\n| \"proper_interval_unit _ _ = False\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(unit, proper_interval_class)", "by intro_classes auto"], ["", "end"], ["", "instantiation bool :: proper_interval begin"], ["", "fun proper_interval_bool :: \"bool proper_interval\" where\n  \"proper_interval_bool (Some x) (Some y) \\<longleftrightarrow> False\"\n| \"proper_interval_bool (Some x) None \\<longleftrightarrow> \\<not> x\"\n| \"proper_interval_bool None (Some y) \\<longleftrightarrow> y\"\n| \"proper_interval_bool None None = True\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(bool, proper_interval_class)", "by intro_classes auto"], ["", "end"], ["", "instantiation nat :: proper_interval begin"], ["", "fun proper_interval_nat :: \"nat proper_interval\" where\n  \"proper_interval_nat no None = True\"\n| \"proper_interval_nat None (Some x) \\<longleftrightarrow> x > 0\"\n| \"proper_interval_nat (Some x) (Some y) \\<longleftrightarrow> y - x > 1\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, proper_interval_class)", "by intro_classes auto"], ["", "end"], ["", "instantiation int :: proper_interval begin"], ["", "fun proper_interval_int :: \"int proper_interval\" where\n  \"proper_interval_int (Some x) (Some y) \\<longleftrightarrow> y - x > 1\"\n| \"proper_interval_int _ _ = True\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, proper_interval_class)", "by intro_classes (auto intro: less_add_one, metis less_add_one minus_less_iff)"], ["", "end"], ["", "instantiation integer :: proper_interval begin"], ["", "context includes integer.lifting begin"], ["", "lift_definition proper_interval_integer :: \"integer proper_interval\" is \"proper_interval\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(integer, proper_interval_class)", "by(intro_classes)(transfer, simp only: proper_interval_simps)+"], ["", "end"], ["", "end"], ["", "lemma proper_interval_integer_simps [code]:\n  includes integer.lifting fixes x y :: integer and xo yo :: \"integer option\" shows\n  \"proper_interval (Some x) (Some y) = (1 < y - x)\"\n  \"proper_interval None yo = True\"\n  \"proper_interval xo None = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval (Some x) (Some y) = (1 < y - x) &&&\n    proper_interval None yo = True &&& proper_interval xo None = True", "by(transfer, simp)+"], ["", "instantiation natural :: proper_interval begin"], ["", "context includes natural.lifting begin"], ["", "lift_definition proper_interval_natural :: \"natural proper_interval\" is \"proper_interval\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(natural, proper_interval_class)", "by(intro_classes)(transfer, simp only: proper_interval_simps)+"], ["", "end"], ["", "end"], ["", "lemma proper_interval_natural_simps [code]:\n  includes natural.lifting fixes x y :: natural and xo :: \"natural option\" shows\n  \"proper_interval xo None = True\"\n  \"proper_interval None (Some y) \\<longleftrightarrow> y > 0\"\n  \"proper_interval (Some x) (Some y) \\<longleftrightarrow> y - x > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval xo None = True &&&\n    proper_interval None (Some y) = (0 < y) &&&\n    proper_interval (Some x) (Some y) = (1 < y - x)", "by(transfer, simp)+"], ["", "lemma char_less_iff_nat_of_char: \"x < y \\<longleftrightarrow> of_char x < (of_char y :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (of_char x < of_char y)", "by (fact less_char_def)"], ["", "lemma nat_of_char_inject [simp]: \"of_char x = (of_char y :: nat) \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_char x = of_char y) = (x = y)", "by (fact of_char_eq_iff)"], ["", "lemma char_le_iff_nat_of_char: \"x \\<le> y \\<longleftrightarrow> of_char x \\<le> (of_char y :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<le> y) = (of_char x \\<le> of_char y)", "by (fact less_eq_char_def)"], ["", "instantiation char :: proper_interval\nbegin"], ["", "fun proper_interval_char :: \"char proper_interval\" where\n  \"proper_interval_char None None \\<longleftrightarrow> True\"\n| \"proper_interval_char None (Some x) \\<longleftrightarrow> x \\<noteq> CHR 0x00\"\n| \"proper_interval_char (Some x) None \\<longleftrightarrow> x \\<noteq> CHR 0xFF\"\n| \"proper_interval_char (Some x) (Some y) \\<longleftrightarrow> of_char y - of_char x > (1 :: nat)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(char, proper_interval_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "fix y :: char"], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "{"], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "assume \"y \\<noteq> CHR 0x00\""], ["proof (state)\nthis:\n  y \\<noteq> CHR 0x00\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "have \"CHR 0x00 < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CHR 0x00 < y", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> CHR 0x00 < y \\<Longrightarrow> False", "assume \"\\<not> CHR 0x00 < y\""], ["proof (state)\nthis:\n  \\<not> CHR 0x00 < y\n\ngoal (1 subgoal):\n 1. \\<not> CHR 0x00 < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> CHR 0x00 < y", "have \"of_char y = (of_char CHR 0x00 :: nat)\""], ["proof (prove)\nusing this:\n  \\<not> CHR 0x00 < y\n\ngoal (1 subgoal):\n 1. of_char y = of_char CHR 0x00", "by (simp add: not_less char_le_iff_nat_of_char)"], ["proof (state)\nthis:\n  of_char y = of_char CHR 0x00\n\ngoal (1 subgoal):\n 1. \\<not> CHR 0x00 < y \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  of_char y = of_char CHR 0x00", "have \"y = CHR 0x00\""], ["proof (prove)\nusing this:\n  of_char y = of_char CHR 0x00\n\ngoal (1 subgoal):\n 1. y = CHR 0x00", "using nat_of_char_inject [of y \"CHR 0x00\"]"], ["proof (prove)\nusing this:\n  of_char y = of_char CHR 0x00\n  (of_char y = of_char CHR 0x00) = (y = CHR 0x00)\n\ngoal (1 subgoal):\n 1. y = CHR 0x00", "by simp"], ["proof (state)\nthis:\n  y = CHR 0x00\n\ngoal (1 subgoal):\n 1. \\<not> CHR 0x00 < y \\<Longrightarrow> False", "with \\<open>y \\<noteq> CHR 0x00\\<close>"], ["proof (chain)\npicking this:\n  y \\<noteq> CHR 0x00\n  y = CHR 0x00", "show False"], ["proof (prove)\nusing this:\n  y \\<noteq> CHR 0x00\n  y = CHR 0x00\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CHR 0x00 < y\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "}"], ["proof (state)\nthis:\n  y \\<noteq> CHR 0x00 \\<Longrightarrow> CHR 0x00 < y\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "moreover"], ["proof (state)\nthis:\n  y \\<noteq> CHR 0x00 \\<Longrightarrow> CHR 0x00 < y\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "{"], ["proof (state)\nthis:\n  y \\<noteq> CHR 0x00 \\<Longrightarrow> CHR 0x00 < y\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "fix z :: char"], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "assume \"z < CHR 0x00\""], ["proof (state)\nthis:\n  z < CHR 0x00\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "hence False"], ["proof (prove)\nusing this:\n  z < CHR 0x00\n\ngoal (1 subgoal):\n 1. False", "by (simp add: char_less_iff_nat_of_char of_char_eq_iff [symmetric])"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "}"], ["proof (state)\nthis:\n  ?z2 < CHR 0x00 \\<Longrightarrow> False\n\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "ultimately"], ["proof (chain)\npicking this:\n  y \\<noteq> CHR 0x00 \\<Longrightarrow> CHR 0x00 < y\n  ?z2 < CHR 0x00 \\<Longrightarrow> False", "show \"proper_interval None (Some y) = (\\<exists>z. z < y)\""], ["proof (prove)\nusing this:\n  y \\<noteq> CHR 0x00 \\<Longrightarrow> CHR 0x00 < y\n  ?z2 < CHR 0x00 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. proper_interval None (Some y) = (\\<exists>z. z < y)", "by auto"], ["proof (state)\nthis:\n  proper_interval None (Some y) = (\\<exists>z. z < y)\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "fix x :: char"], ["proof (state)\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "assume \"x \\<noteq> CHR 0xFF\""], ["proof (state)\nthis:\n  x \\<noteq> CHR 0xFF\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> CHR 0xFF", "have \"x < CHR 0xFF\""], ["proof (prove)\nusing this:\n  x \\<noteq> CHR 0xFF\n\ngoal (1 subgoal):\n 1. x < CHR 0xFF", "by (auto simp add: neq_iff char_less_iff_nat_of_char)\n        (insert nat_of_char_less_256 [of x], simp)"], ["proof (state)\nthis:\n  x < CHR 0xFF\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "hence \"\\<exists>z. x < z\""], ["proof (prove)\nusing this:\n  x < CHR 0xFF\n\ngoal (1 subgoal):\n 1. \\<exists>z. x < z", ".."], ["proof (state)\nthis:\n  \\<exists>z. x < z\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "}"], ["proof (state)\nthis:\n  x \\<noteq> CHR 0xFF \\<Longrightarrow> \\<exists>z. x < z\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "moreover"], ["proof (state)\nthis:\n  x \\<noteq> CHR 0xFF \\<Longrightarrow> \\<exists>z. x < z\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "{"], ["proof (state)\nthis:\n  x \\<noteq> CHR 0xFF \\<Longrightarrow> \\<exists>z. x < z\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "fix z :: char"], ["proof (state)\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "assume \"CHR 0xFF < z\""], ["proof (state)\nthis:\n  CHR 0xFF < z\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "hence \"False\""], ["proof (prove)\nusing this:\n  CHR 0xFF < z\n\ngoal (1 subgoal):\n 1. False", "by (simp add: char_less_iff_nat_of_char)\n        (insert nat_of_char_less_256 [of z], simp)"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "}"], ["proof (state)\nthis:\n  CHR 0xFF < ?z2 \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "ultimately"], ["proof (chain)\npicking this:\n  x \\<noteq> CHR 0xFF \\<Longrightarrow> \\<exists>z. x < z\n  CHR 0xFF < ?z2 \\<Longrightarrow> False", "show \"proper_interval (Some x) None = (\\<exists>z. x < z)\""], ["proof (prove)\nusing this:\n  x \\<noteq> CHR 0xFF \\<Longrightarrow> \\<exists>z. x < z\n  CHR 0xFF < ?z2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. proper_interval (Some x) None = (\\<exists>z. x < z)", "by auto"], ["proof (state)\nthis:\n  proper_interval (Some x) None = (\\<exists>z. x < z)\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "{"], ["proof (state)\nthis:\n  proper_interval (Some x) None = (\\<exists>z. x < z)\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "assume gt: \"of_char y - of_char x > (1 :: nat)\""], ["proof (state)\nthis:\n  1 < of_char y - of_char x\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "let ?z = \"char_of (of_char x + (1 :: nat))\""], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "from gt nat_of_char_less_256 [of y]"], ["proof (chain)\npicking this:\n  1 < of_char y - of_char x\n  of_char y < 256", "have 255: \"of_char x < (255 :: nat)\""], ["proof (prove)\nusing this:\n  1 < of_char y - of_char x\n  of_char y < 256\n\ngoal (1 subgoal):\n 1. of_char x < 255", "by arith"], ["proof (state)\nthis:\n  of_char x < 255\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "with gt"], ["proof (chain)\npicking this:\n  1 < of_char y - of_char x\n  of_char x < 255", "have \"x < ?z\" \"?z < y\""], ["proof (prove)\nusing this:\n  1 < of_char y - of_char x\n  of_char x < 255\n\ngoal (1 subgoal):\n 1. x < char_of (of_char x + 1) &&& char_of (of_char x + 1) < y", "by (simp_all add: char_less_iff_nat_of_char)"], ["proof (state)\nthis:\n  x < char_of (of_char x + 1)\n  char_of (of_char x + 1) < y\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "hence \"\\<exists>z. x < z \\<and> z < y\""], ["proof (prove)\nusing this:\n  x < char_of (of_char x + 1)\n  char_of (of_char x + 1) < y\n\ngoal (1 subgoal):\n 1. \\<exists>z>x. z < y", "by blast"], ["proof (state)\nthis:\n  \\<exists>z>x. z < y\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "}"], ["proof (state)\nthis:\n  1 < of_char y - of_char x \\<Longrightarrow> \\<exists>z>x. z < y\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "moreover"], ["proof (state)\nthis:\n  1 < of_char y - of_char x \\<Longrightarrow> \\<exists>z>x. z < y\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "{"], ["proof (state)\nthis:\n  1 < of_char y - of_char x \\<Longrightarrow> \\<exists>z>x. z < y\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "fix z"], ["proof (state)\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "assume \"x < z\" \"z < y\""], ["proof (state)\nthis:\n  x < z\n  z < y\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "hence \"(1 :: nat) < of_char y - of_char x\""], ["proof (prove)\nusing this:\n  x < z\n  z < y\n\ngoal (1 subgoal):\n 1. 1 < of_char y - of_char x", "by (simp add: char_less_iff_nat_of_char)"], ["proof (state)\nthis:\n  1 < of_char y - of_char x\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>x < ?z2; ?z2 < y\\<rbrakk>\n  \\<Longrightarrow> 1 < of_char y - of_char x\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "ultimately"], ["proof (chain)\npicking this:\n  1 < of_char y - of_char x \\<Longrightarrow> \\<exists>z>x. z < y\n  \\<lbrakk>x < ?z2; ?z2 < y\\<rbrakk>\n  \\<Longrightarrow> 1 < of_char y - of_char x", "show \"proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)\""], ["proof (prove)\nusing this:\n  1 < of_char y - of_char x \\<Longrightarrow> \\<exists>z>x. z < y\n  \\<lbrakk>x < ?z2; ?z2 < y\\<rbrakk>\n  \\<Longrightarrow> 1 < of_char y - of_char x\n\ngoal (1 subgoal):\n 1. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "by auto"], ["proof (state)\nthis:\n  proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)\n\ngoal (1 subgoal):\n 1. proper_interval None None = True", "qed simp"], ["", "end"], ["", "instantiation Enum.finite_1 :: proper_interval begin"], ["", "definition proper_interval_finite_1 :: \"Enum.finite_1 proper_interval\" \nwhere \"proper_interval_finite_1 x y \\<longleftrightarrow> x = None \\<and> y = None\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Enum.finite_1, proper_interval_class)", "by intro_classes (simp_all add: proper_interval_finite_1_def less_finite_1_def)"], ["", "end"], ["", "instantiation Enum.finite_2 :: proper_interval begin"], ["", "fun proper_interval_finite_2 :: \"Enum.finite_2 proper_interval\" where \n  \"proper_interval_finite_2 None None \\<longleftrightarrow> True\"\n| \"proper_interval_finite_2 None (Some x) \\<longleftrightarrow> x = finite_2.a\\<^sub>2\"\n| \"proper_interval_finite_2 (Some x) None \\<longleftrightarrow> x = finite_2.a\\<^sub>1\"\n| \"proper_interval_finite_2 (Some x) (Some y) \\<longleftrightarrow> False\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Enum.finite_2, proper_interval_class)", "by intro_classes (auto simp add: less_finite_2_def)"], ["", "end"], ["", "instantiation Enum.finite_3 :: proper_interval begin"], ["", "fun proper_interval_finite_3 :: \"Enum.finite_3 proper_interval\" where\n  \"proper_interval_finite_3 None None \\<longleftrightarrow> True\"\n| \"proper_interval_finite_3 None (Some x) \\<longleftrightarrow> x \\<noteq> finite_3.a\\<^sub>1\"\n| \"proper_interval_finite_3 (Some x) None \\<longleftrightarrow> x \\<noteq> finite_3.a\\<^sub>3\"\n| \"proper_interval_finite_3 (Some x) (Some y) \\<longleftrightarrow> x = finite_3.a\\<^sub>1 \\<and> y = finite_3.a\\<^sub>3\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Enum.finite_3, proper_interval_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "fix x y :: Enum.finite_3"], ["proof (state)\ngoal (4 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>y. proper_interval None (Some y) = (\\<exists>z. z < y)\n 3. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 4. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "show \"proper_interval None (Some y) = (\\<exists>z. z < y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval None (Some y) = (\\<exists>z. z < y)", "by(cases y)(auto simp add: less_finite_3_def split: finite_3.split)"], ["proof (state)\nthis:\n  proper_interval None (Some y) = (\\<exists>z. z < y)\n\ngoal (3 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x. proper_interval (Some x) None = (\\<exists>z. x < z)\n 3. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "show \"proper_interval (Some x) None = (\\<exists>z. x < z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval (Some x) None = (\\<exists>z. x < z)", "by(cases x)(auto simp add: less_finite_3_def)"], ["proof (state)\nthis:\n  proper_interval (Some x) None = (\\<exists>z. x < z)\n\ngoal (2 subgoals):\n 1. proper_interval None None = True\n 2. \\<And>x y. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "show \"proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)", "by(auto simp add: less_finite_3_def split: finite_3.split_asm)"], ["proof (state)\nthis:\n  proper_interval (Some x) (Some y) = (\\<exists>z>x. z < y)\n\ngoal (1 subgoal):\n 1. proper_interval None None = True", "qed simp"], ["", "end"], ["", "subsection \\<open>List fusion for the order and proper intervals on @{typ \"'a set\"}\\<close>"], ["", "definition length_last_fusion :: \"('a, 's) generator \\<Rightarrow> 's \\<Rightarrow> nat \\<times> 'a\"\nwhere \"length_last_fusion g s = length_last (list.unfoldr g s)\""], ["", "lemma length_last_fusion_code [code]:\n  \"length_last_fusion g s =\n  (if list.has_next g s then\n     let (x, s') = list.next g s\n     in fold_fusion g (\\<lambda>x (n, _). (n + 1, x)) s' (1, x)\n   else (0, undefined))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length_last_fusion g s =\n    (if list.has_next g s\n     then let (x, s') = list.next g s\n          in fold_fusion g (\\<lambda>x (n, uu_). (n + 1, x)) s' (1, x)\n     else (0, undefined))", "unfolding length_last_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length_last (list.unfoldr g s) =\n    (if list.has_next g s\n     then let (x, s') = list.next g s\n          in fold_fusion g (\\<lambda>x (n, uu_). (n + 1, x)) s' (1, x)\n     else (0, undefined))", "by(subst list.unfoldr.simps)(simp add: length_last_Nil length_last_Cons_code fold_fusion_def split_beta)"], ["", "declare length_last_fusion_def [symmetric, code_unfold]"], ["", "context proper_intrvl begin"], ["", "definition set_less_eq_aux_Compl_fusion :: \"('a, 's1) generator \\<Rightarrow> ('a, 's2) generator \\<Rightarrow> 'a option \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\nwhere\n  \"set_less_eq_aux_Compl_fusion g1 g2 ao s1 s2 = \n   set_less_eq_aux_Compl ao (list.unfoldr g1 s1) (list.unfoldr g2 s2)\""], ["", "definition Compl_set_less_eq_aux_fusion :: \"('a, 's1) generator \\<Rightarrow> ('a, 's2) generator \\<Rightarrow> 'a option \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\nwhere\n  \"Compl_set_less_eq_aux_fusion g1 g2 ao s1 s2 = \n   Compl_set_less_eq_aux ao (list.unfoldr g1 s1) (list.unfoldr g2 s2)\""], ["", "definition set_less_aux_Compl_fusion :: \"('a, 's1) generator \\<Rightarrow> ('a, 's2) generator \\<Rightarrow> 'a option \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\nwhere\n  \"set_less_aux_Compl_fusion g1 g2 ao s1 s2 =\n   set_less_aux_Compl ao (list.unfoldr g1 s1) (list.unfoldr g2 s2)\""], ["", "definition Compl_set_less_aux_fusion :: \"('a, 's1) generator \\<Rightarrow> ('a, 's2) generator \\<Rightarrow> 'a option \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\nwhere\n  \"Compl_set_less_aux_fusion g1 g2 ao s1 s2 =\n   Compl_set_less_aux ao (list.unfoldr g1 s1) (list.unfoldr g2 s2)\""], ["", "definition exhaustive_above_fusion :: \"('a, 's) generator \\<Rightarrow> 'a \\<Rightarrow> 's \\<Rightarrow> bool\"\nwhere \"exhaustive_above_fusion g a s = exhaustive_above a (list.unfoldr g s)\""], ["", "definition exhaustive_fusion :: \"('a, 's) generator \\<Rightarrow> 's \\<Rightarrow> bool\"\nwhere \"exhaustive_fusion g s = exhaustive (list.unfoldr g s)\""], ["", "definition proper_interval_set_aux_fusion :: \"('a, 's1) generator \\<Rightarrow> ('a, 's2) generator \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\nwhere\n  \"proper_interval_set_aux_fusion g1 g2 s1 s2 =\n   proper_interval_set_aux (list.unfoldr g1 s1) (list.unfoldr g2 s2)\""], ["", "definition proper_interval_set_Compl_aux_fusion :: \n  \"('a, 's1) generator \\<Rightarrow> ('a, 's2) generator \\<Rightarrow> 'a option \\<Rightarrow> nat \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\nwhere\n  \"proper_interval_set_Compl_aux_fusion g1 g2 ao n s1 s2 =\n   proper_interval_set_Compl_aux ao n (list.unfoldr g1 s1) (list.unfoldr g2 s2)\""], ["", "definition proper_interval_Compl_set_aux_fusion ::\n  \"('a, 's1) generator \\<Rightarrow> ('a, 's2) generator \\<Rightarrow> 'a option \\<Rightarrow> 's1 \\<Rightarrow> 's2 \\<Rightarrow> bool\"\nwhere\n  \"proper_interval_Compl_set_aux_fusion g1 g2 ao s1 s2 =\n   proper_interval_Compl_set_aux ao (list.unfoldr g1 s1) (list.unfoldr g2 s2)\""], ["", "lemma set_less_eq_aux_Compl_fusion_code:\n  \"set_less_eq_aux_Compl_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n   (list.has_next g1 s1 \\<longrightarrow> list.has_next g2 s2 \\<longrightarrow>\n    (let (x, s1') = list.next g1 s1;\n         (y, s2') = list.next g2 s2\n     in if x < y then proper_interval ao (Some x) \\<or> set_less_eq_aux_Compl_fusion g1 g2 (Some x) s1' s2\n        else if y < x then proper_interval ao (Some y) \\<or> set_less_eq_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n        else proper_interval ao (Some y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl_fusion g1 g2 ao s1 s2 =\n    (list.has_next g1 s1 \\<longrightarrow>\n     list.has_next g2 s2 \\<longrightarrow>\n     (let (x, s1') = list.next g1 s1; (y, s2') = list.next g2 s2\n      in if x < y\n         then proper_interval ao (Some x) \\<or>\n              set_less_eq_aux_Compl_fusion g1 g2 (Some x) s1' s2\n         else if y < x\n              then proper_interval ao (Some y) \\<or>\n                   set_less_eq_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n              else proper_interval ao (Some y)))", "unfolding set_less_eq_aux_Compl_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_eq_aux_Compl ao (list.unfoldr g1 s1) (list.unfoldr g2 s2) =\n    (list.has_next g1 s1 \\<longrightarrow>\n     list.has_next g2 s2 \\<longrightarrow>\n     (let (x, s1') = list.next g1 s1; (y, s2') = list.next g2 s2\n      in if x < y\n         then proper_interval ao (Some x) \\<or>\n              set_less_eq_aux_Compl (Some x) (list.unfoldr g1 s1')\n               (list.unfoldr g2 s2)\n         else if y < x\n              then proper_interval ao (Some y) \\<or>\n                   set_less_eq_aux_Compl (Some y) (list.unfoldr g1 s1)\n                    (list.unfoldr g2 s2')\n              else proper_interval ao (Some y)))", "by(subst (1 2 4 5) list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma Compl_set_less_eq_aux_fusion_code:\n  \"Compl_set_less_eq_aux_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n  (if list.has_next g1 s1 then\n     let (x, s1') = list.next g1 s1\n     in if list.has_next g2 s2 then\n          let (y, s2') = list.next g2 s2\n          in if x < y then \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some x) s1' s2\n             else if y < x then \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some y) s1 s2'\n             else \\<not> proper_interval ao (Some y)\n        else \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some x) s1' s2\n   else if list.has_next g2 s2 then\n     let (y, s2') = list.next g2 s2\n     in \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_eq_aux_fusion g1 g2 (Some y) s1 s2'\n   else \\<not> proper_interval ao None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux_fusion g1 g2 ao s1 s2 =\n    (if list.has_next g1 s1\n     then let (x, s1') = list.next g1 s1\n          in if list.has_next g2 s2\n             then let (y, s2') = list.next g2 s2\n                  in if x < y\n                     then \\<not> proper_interval ao (Some x) \\<and>\n                          Compl_set_less_eq_aux_fusion g1 g2 (Some x) s1' s2\n                     else if y < x\n                          then \\<not> proper_interval ao (Some y) \\<and>\n                               Compl_set_less_eq_aux_fusion g1 g2 (Some y)\n                                s1 s2'\n                          else \\<not> proper_interval ao (Some y)\n             else \\<not> proper_interval ao (Some x) \\<and>\n                  Compl_set_less_eq_aux_fusion g1 g2 (Some x) s1' s2\n     else if list.has_next g2 s2\n          then let (y, s2') = list.next g2 s2\n               in \\<not> proper_interval ao (Some y) \\<and>\n                  Compl_set_less_eq_aux_fusion g1 g2 (Some y) s1 s2'\n          else \\<not> proper_interval ao None)", "unfolding Compl_set_less_eq_aux_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_eq_aux ao (list.unfoldr g1 s1) (list.unfoldr g2 s2) =\n    (if list.has_next g1 s1\n     then let (x, s1') = list.next g1 s1\n          in if list.has_next g2 s2\n             then let (y, s2') = list.next g2 s2\n                  in if x < y\n                     then \\<not> proper_interval ao (Some x) \\<and>\n                          Compl_set_less_eq_aux (Some x)\n                           (list.unfoldr g1 s1') (list.unfoldr g2 s2)\n                     else if y < x\n                          then \\<not> proper_interval ao (Some y) \\<and>\n                               Compl_set_less_eq_aux (Some y)\n                                (list.unfoldr g1 s1) (list.unfoldr g2 s2')\n                          else \\<not> proper_interval ao (Some y)\n             else \\<not> proper_interval ao (Some x) \\<and>\n                  Compl_set_less_eq_aux (Some x) (list.unfoldr g1 s1')\n                   (list.unfoldr g2 s2)\n     else if list.has_next g2 s2\n          then let (y, s2') = list.next g2 s2\n               in \\<not> proper_interval ao (Some y) \\<and>\n                  Compl_set_less_eq_aux (Some y) (list.unfoldr g1 s1)\n                   (list.unfoldr g2 s2')\n          else \\<not> proper_interval ao None)", "by(subst (1 2 4 5 8 9) list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma set_less_aux_Compl_fusion_code:\n  \"set_less_aux_Compl_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n  (if list.has_next g1 s1 then\n     let (x, s1') = list.next g1 s1\n     in if list.has_next g2 s2 then\n          let (y, s2') = list.next g2 s2\n          in if x < y then proper_interval ao (Some x) \\<or> set_less_aux_Compl_fusion g1 g2 (Some x) s1' s2\n             else if y < x then proper_interval ao (Some y) \\<or> set_less_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n             else proper_interval ao (Some y)\n        else proper_interval ao (Some x) \\<or> set_less_aux_Compl_fusion g1 g2 (Some x) s1' s2\n   else if list.has_next g2 s2 then\n     let (y, s2') = list.next g2 s2\n     in proper_interval ao (Some y) \\<or> set_less_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n   else proper_interval ao None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_aux_Compl_fusion g1 g2 ao s1 s2 =\n    (if list.has_next g1 s1\n     then let (x, s1') = list.next g1 s1\n          in if list.has_next g2 s2\n             then let (y, s2') = list.next g2 s2\n                  in if x < y\n                     then proper_interval ao (Some x) \\<or>\n                          set_less_aux_Compl_fusion g1 g2 (Some x) s1' s2\n                     else if y < x\n                          then proper_interval ao (Some y) \\<or>\n                               set_less_aux_Compl_fusion g1 g2 (Some y) s1\n                                s2'\n                          else proper_interval ao (Some y)\n             else proper_interval ao (Some x) \\<or>\n                  set_less_aux_Compl_fusion g1 g2 (Some x) s1' s2\n     else if list.has_next g2 s2\n          then let (y, s2') = list.next g2 s2\n               in proper_interval ao (Some y) \\<or>\n                  set_less_aux_Compl_fusion g1 g2 (Some y) s1 s2'\n          else proper_interval ao None)", "unfolding set_less_aux_Compl_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_less_aux_Compl ao (list.unfoldr g1 s1) (list.unfoldr g2 s2) =\n    (if list.has_next g1 s1\n     then let (x, s1') = list.next g1 s1\n          in if list.has_next g2 s2\n             then let (y, s2') = list.next g2 s2\n                  in if x < y\n                     then proper_interval ao (Some x) \\<or>\n                          set_less_aux_Compl (Some x) (list.unfoldr g1 s1')\n                           (list.unfoldr g2 s2)\n                     else if y < x\n                          then proper_interval ao (Some y) \\<or>\n                               set_less_aux_Compl (Some y)\n                                (list.unfoldr g1 s1) (list.unfoldr g2 s2')\n                          else proper_interval ao (Some y)\n             else proper_interval ao (Some x) \\<or>\n                  set_less_aux_Compl (Some x) (list.unfoldr g1 s1')\n                   (list.unfoldr g2 s2)\n     else if list.has_next g2 s2\n          then let (y, s2') = list.next g2 s2\n               in proper_interval ao (Some y) \\<or>\n                  set_less_aux_Compl (Some y) (list.unfoldr g1 s1)\n                   (list.unfoldr g2 s2')\n          else proper_interval ao None)", "by(subst (1 2 4 5 8 9) list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma Compl_set_less_aux_fusion_code:\n  \"Compl_set_less_aux_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n   list.has_next g1 s1 \\<and> list.has_next g2 s2 \\<and>\n  (let (x, s1') = list.next g1 s1;\n       (y, s2') = list.next g2 s2\n   in if x < y then \\<not> proper_interval ao (Some x) \\<and> Compl_set_less_aux_fusion g1 g2 (Some x) s1' s2\n      else if y < x then \\<not> proper_interval ao (Some y) \\<and> Compl_set_less_aux_fusion g1 g2 (Some y) s1 s2'\n      else \\<not> proper_interval ao (Some y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_aux_fusion g1 g2 ao s1 s2 =\n    (list.has_next g1 s1 \\<and>\n     list.has_next g2 s2 \\<and>\n     (let (x, s1') = list.next g1 s1; (y, s2') = list.next g2 s2\n      in if x < y\n         then \\<not> proper_interval ao (Some x) \\<and>\n              Compl_set_less_aux_fusion g1 g2 (Some x) s1' s2\n         else if y < x\n              then \\<not> proper_interval ao (Some y) \\<and>\n                   Compl_set_less_aux_fusion g1 g2 (Some y) s1 s2'\n              else \\<not> proper_interval ao (Some y)))", "unfolding Compl_set_less_aux_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Compl_set_less_aux ao (list.unfoldr g1 s1) (list.unfoldr g2 s2) =\n    (list.has_next g1 s1 \\<and>\n     list.has_next g2 s2 \\<and>\n     (let (x, s1') = list.next g1 s1; (y, s2') = list.next g2 s2\n      in if x < y\n         then \\<not> proper_interval ao (Some x) \\<and>\n              Compl_set_less_aux (Some x) (list.unfoldr g1 s1')\n               (list.unfoldr g2 s2)\n         else if y < x\n              then \\<not> proper_interval ao (Some y) \\<and>\n                   Compl_set_less_aux (Some y) (list.unfoldr g1 s1)\n                    (list.unfoldr g2 s2')\n              else \\<not> proper_interval ao (Some y)))", "by(subst (1 2 4 5) list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma exhaustive_above_fusion_code:\n  \"exhaustive_above_fusion g y s \\<longleftrightarrow>\n  (if list.has_next g s then\n     let (x, s') = list.next g s\n     in \\<not> proper_interval (Some y) (Some x) \\<and> exhaustive_above_fusion g x s'\n   else \\<not> proper_interval (Some y) None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exhaustive_above_fusion g y s =\n    (if list.has_next g s\n     then let (x, s') = list.next g s\n          in \\<not> proper_interval (Some y) (Some x) \\<and>\n             exhaustive_above_fusion g x s'\n     else \\<not> proper_interval (Some y) None)", "unfolding exhaustive_above_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. exhaustive_above y (list.unfoldr g s) =\n    (if list.has_next g s\n     then let (x, s') = list.next g s\n          in \\<not> proper_interval (Some y) (Some x) \\<and>\n             exhaustive_above x (list.unfoldr g s')\n     else \\<not> proper_interval (Some y) None)", "by(subst list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma exhaustive_fusion_code:\n  \"exhaustive_fusion g s =\n  (list.has_next g s \\<and> \n   (let (x, s') = list.next g s\n    in \\<not> proper_interval None (Some x) \\<and> exhaustive_above_fusion g x s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exhaustive_fusion g s =\n    (list.has_next g s \\<and>\n     (let (x, s') = list.next g s\n      in \\<not> proper_interval None (Some x) \\<and>\n         exhaustive_above_fusion g x s'))", "unfolding exhaustive_fusion_def exhaustive_above_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. exhaustive (list.unfoldr g s) =\n    (list.has_next g s \\<and>\n     (let (x, s') = list.next g s\n      in \\<not> proper_interval None (Some x) \\<and>\n         exhaustive_above x (list.unfoldr g s')))", "by(subst (1) list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma proper_interval_set_aux_fusion_code:\n  \"proper_interval_set_aux_fusion g1 g2 s1 s2 \\<longleftrightarrow>\n   list.has_next g2 s2 \\<and>\n  (let (y, s2') = list.next g2 s2\n   in if list.has_next g1 s1 then\n        let (x, s1') = list.next g1 s1\n        in if x < y then False\n           else if y < x then proper_interval (Some y) (Some x) \\<or> list.has_next g2 s2' \\<or> \\<not> exhaustive_above_fusion g1 x s1'\n           else proper_interval_set_aux_fusion g1 g2 s1' s2'\n      else list.has_next g2 s2' \\<or> proper_interval (Some y) None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_aux_fusion g1 g2 s1 s2 =\n    (list.has_next g2 s2 \\<and>\n     (let (y, s2') = list.next g2 s2\n      in if list.has_next g1 s1\n         then let (x, s1') = list.next g1 s1\n              in if x < y then False\n                 else if y < x\n                      then proper_interval (Some y) (Some x) \\<or>\n                           list.has_next g2 s2' \\<or>\n                           \\<not> exhaustive_above_fusion g1 x s1'\n                      else proper_interval_set_aux_fusion g1 g2 s1' s2'\n         else list.has_next g2 s2' \\<or> proper_interval (Some y) None))", "unfolding proper_interval_set_aux_fusion_def exhaustive_above_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_aux (list.unfoldr g1 s1) (list.unfoldr g2 s2) =\n    (list.has_next g2 s2 \\<and>\n     (let (y, s2') = list.next g2 s2\n      in if list.has_next g1 s1\n         then let (x, s1') = list.next g1 s1\n              in if x < y then False\n                 else if y < x\n                      then proper_interval (Some y) (Some x) \\<or>\n                           list.has_next g2 s2' \\<or>\n                           \\<not> exhaustive_above x (list.unfoldr g1 s1')\n                      else proper_interval_set_aux (list.unfoldr g1 s1')\n                            (list.unfoldr g2 s2')\n         else list.has_next g2 s2' \\<or> proper_interval (Some y) None))", "by(subst (1 2) list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma proper_interval_set_Compl_aux_fusion_code:\n  \"proper_interval_set_Compl_aux_fusion g1 g2 ao n s1 s2 \\<longleftrightarrow>\n  (if list.has_next g1 s1 then\n     let (x, s1') = list.next g1 s1\n     in if list.has_next g2 s2 then\n          let (y, s2') = list.next g2 s2\n          in if x < y then \n               proper_interval ao (Some x) \\<or> \n               proper_interval_set_Compl_aux_fusion g1 g2 (Some x) (n + 1) s1' s2\n             else if y < x then \n               proper_interval ao (Some y) \\<or> \n               proper_interval_set_Compl_aux_fusion g1 g2 (Some y) (n + 1) s1 s2'\n             else\n               proper_interval ao (Some x) \\<and>\n               (let m = CARD('a) - n \n                in m - length_fusion g2 s2' \\<noteq> 2 \\<or> m - length_fusion g1 s1' \\<noteq> 2)\n        else \n          let m = CARD('a) - n; (len_x, x') = length_last_fusion g1 s1\n          in m \\<noteq> len_x \\<and> (m = len_x + 1 \\<longrightarrow> \\<not> proper_interval (Some x') None)\n\n   else if list.has_next g2 s2 then\n     let (y, s2') = list.next g2 s2;\n         m = CARD('a) - n;\n         (len_y, y') = length_last_fusion g2 s2\n     in m \\<noteq> len_y \\<and> (m = len_y + 1 \\<longrightarrow> \\<not> proper_interval (Some y') None)\n   else CARD('a) > n + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux_fusion g1 g2 ao n s1 s2 =\n    (if list.has_next g1 s1\n     then let (x, s1') = list.next g1 s1\n          in if list.has_next g2 s2\n             then let (y, s2') = list.next g2 s2\n                  in if x < y\n                     then proper_interval ao (Some x) \\<or>\n                          proper_interval_set_Compl_aux_fusion g1 g2\n                           (Some x) (n + 1) s1' s2\n                     else if y < x\n                          then proper_interval ao (Some y) \\<or>\n                               proper_interval_set_Compl_aux_fusion g1 g2\n                                (Some y) (n + 1) s1 s2'\n                          else proper_interval ao (Some x) \\<and>\n                               (let m = CARD('a) - n\n                                in m - length_fusion g2 s2' \\<noteq> 2 \\<or>\n                                   m - length_fusion g1 s1' \\<noteq> 2)\n             else let m = CARD('a) - n;\n                      (len_x, x') = length_last_fusion g1 s1\n                  in m \\<noteq> len_x \\<and>\n                     (m = len_x + 1 \\<longrightarrow>\n                      \\<not> proper_interval (Some x') None)\n     else if list.has_next g2 s2\n          then let (y, s2') = list.next g2 s2; m = CARD('a) - n;\n                   (len_y, y') = length_last_fusion g2 s2\n               in m \\<noteq> len_y \\<and>\n                  (m = len_y + 1 \\<longrightarrow>\n                   \\<not> proper_interval (Some y') None)\n          else n + 1 < CARD('a))", "unfolding proper_interval_set_Compl_aux_fusion_def length_last_fusion_def length_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_set_Compl_aux ao n (list.unfoldr g1 s1)\n     (list.unfoldr g2 s2) =\n    (if list.has_next g1 s1\n     then let (x, s1') = list.next g1 s1\n          in if list.has_next g2 s2\n             then let (y, s2') = list.next g2 s2\n                  in if x < y\n                     then proper_interval ao (Some x) \\<or>\n                          proper_interval_set_Compl_aux (Some x) (n + 1)\n                           (list.unfoldr g1 s1') (list.unfoldr g2 s2)\n                     else if y < x\n                          then proper_interval ao (Some y) \\<or>\n                               proper_interval_set_Compl_aux (Some y)\n                                (n + 1) (list.unfoldr g1 s1)\n                                (list.unfoldr g2 s2')\n                          else proper_interval ao (Some x) \\<and>\n                               (let m = CARD('a) - n\n                                in m - length (list.unfoldr g2 s2') \\<noteq>\n                                   2 \\<or>\n                                   m - length (list.unfoldr g1 s1') \\<noteq>\n                                   2)\n             else let m = CARD('a) - n;\n                      (len_x, x') = length_last (list.unfoldr g1 s1)\n                  in m \\<noteq> len_x \\<and>\n                     (m = len_x + 1 \\<longrightarrow>\n                      \\<not> proper_interval (Some x') None)\n     else if list.has_next g2 s2\n          then let (y, s2') = list.next g2 s2; m = CARD('a) - n;\n                   (len_y, y') = length_last (list.unfoldr g2 s2)\n               in m \\<noteq> len_y \\<and>\n                  (m = len_y + 1 \\<longrightarrow>\n                   \\<not> proper_interval (Some y') None)\n          else n + 1 < CARD('a))", "by(subst (1 2 4 5 9 10) list.unfoldr.simps)(simp add: split_beta)"], ["", "lemma proper_interval_Compl_set_aux_fusion_code:\n  \"proper_interval_Compl_set_aux_fusion g1 g2 ao s1 s2 \\<longleftrightarrow>\n   list.has_next g1 s1 \\<and> list.has_next g2 s2 \\<and>\n   (let (x, s1') = list.next g1 s1;\n        (y, s2') = list.next g2 s2\n    in if x < y then\n         \\<not> proper_interval ao (Some x) \\<and> proper_interval_Compl_set_aux_fusion g1 g2 (Some x) s1' s2\n       else if y < x then\n         \\<not> proper_interval ao (Some y) \\<and> proper_interval_Compl_set_aux_fusion g1 g2 (Some y) s1 s2'\n       else \\<not> proper_interval ao (Some x) \\<and> (list.has_next g2 s2' \\<or> list.has_next g1 s1'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux_fusion g1 g2 ao s1 s2 =\n    (list.has_next g1 s1 \\<and>\n     list.has_next g2 s2 \\<and>\n     (let (x, s1') = list.next g1 s1; (y, s2') = list.next g2 s2\n      in if x < y\n         then \\<not> proper_interval ao (Some x) \\<and>\n              proper_interval_Compl_set_aux_fusion g1 g2 (Some x) s1' s2\n         else if y < x\n              then \\<not> proper_interval ao (Some y) \\<and>\n                   proper_interval_Compl_set_aux_fusion g1 g2 (Some y) s1\n                    s2'\n              else \\<not> proper_interval ao (Some x) \\<and>\n                   (list.has_next g2 s2' \\<or> list.has_next g1 s1')))", "unfolding proper_interval_Compl_set_aux_fusion_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_interval_Compl_set_aux ao (list.unfoldr g1 s1)\n     (list.unfoldr g2 s2) =\n    (list.has_next g1 s1 \\<and>\n     list.has_next g2 s2 \\<and>\n     (let (x, s1') = list.next g1 s1; (y, s2') = list.next g2 s2\n      in if x < y\n         then \\<not> proper_interval ao (Some x) \\<and>\n              proper_interval_Compl_set_aux (Some x) (list.unfoldr g1 s1')\n               (list.unfoldr g2 s2)\n         else if y < x\n              then \\<not> proper_interval ao (Some y) \\<and>\n                   proper_interval_Compl_set_aux (Some y)\n                    (list.unfoldr g1 s1) (list.unfoldr g2 s2')\n              else \\<not> proper_interval ao (Some x) \\<and>\n                   (list.has_next g2 s2' \\<or> list.has_next g1 s1')))", "by(subst (1 2 4 5) list.unfoldr.simps)(auto simp add: split_beta)"], ["", "end"], ["", "lemmas [code] =\n  set_less_eq_aux_Compl_fusion_code proper_intrvl.set_less_eq_aux_Compl_fusion_code\n  Compl_set_less_eq_aux_fusion_code proper_intrvl.Compl_set_less_eq_aux_fusion_code\n  set_less_aux_Compl_fusion_code proper_intrvl.set_less_aux_Compl_fusion_code\n  Compl_set_less_aux_fusion_code proper_intrvl.Compl_set_less_aux_fusion_code\n  exhaustive_above_fusion_code proper_intrvl.exhaustive_above_fusion_code\n  exhaustive_fusion_code proper_intrvl.exhaustive_fusion_code\n  proper_interval_set_aux_fusion_code proper_intrvl.proper_interval_set_aux_fusion_code\n  proper_interval_set_Compl_aux_fusion_code proper_intrvl.proper_interval_set_Compl_aux_fusion_code\n  proper_interval_Compl_set_aux_fusion_code proper_intrvl.proper_interval_Compl_set_aux_fusion_code"], ["", "lemmas [symmetric, code_unfold] =\n  set_less_eq_aux_Compl_fusion_def proper_intrvl.set_less_eq_aux_Compl_fusion_def\n  Compl_set_less_eq_aux_fusion_def proper_intrvl.Compl_set_less_eq_aux_fusion_def\n  set_less_aux_Compl_fusion_def proper_intrvl.set_less_aux_Compl_fusion_def\n  Compl_set_less_aux_fusion_def proper_intrvl.Compl_set_less_aux_fusion_def\n  exhaustive_above_fusion_def proper_intrvl.exhaustive_above_fusion_def\n  exhaustive_fusion_def proper_intrvl.exhaustive_fusion_def\n  proper_interval_set_aux_fusion_def proper_intrvl.proper_interval_set_aux_fusion_def\n  proper_interval_set_Compl_aux_fusion_def proper_intrvl.proper_interval_set_Compl_aux_fusion_def\n  proper_interval_Compl_set_aux_fusion_def proper_intrvl.proper_interval_Compl_set_aux_fusion_def"], ["", "subsection \\<open>Drop notation\\<close>"], ["", "context ord begin"], ["", "no_notation set_less_aux (infix \"\\<sqsubset>''\" 50)\n  and set_less_eq_aux (infix \"\\<sqsubseteq>''\" 50)\n  and set_less_eq_aux' (infix \"\\<sqsubseteq>''''\" 50)\n  and set_less_eq_aux'' (infix \"\\<sqsubseteq>''''''\" 50)\n  and set_less_eq (infix \"\\<sqsubseteq>\" 50)\n  and set_less (infix \"\\<sqsubset>\" 50)"], ["", "end"], ["", "end"]]}