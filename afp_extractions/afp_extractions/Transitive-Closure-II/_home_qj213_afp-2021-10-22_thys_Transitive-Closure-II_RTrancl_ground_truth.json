{"file_name": "/home/qj213/afp-2021-10-22/thys/Transitive-Closure-II/RTrancl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transitive-Closure-II", "problem_names": ["lemma finite_Rs: assumes init: \"finite init\"\n  shows \"finite (R^* `` init)\"", "lemma mk_rtrancl_main_sound: \"set_of todo \\<union> fin \\<subseteq> R^* `` init \\<Longrightarrow> mk_rtrancl_main todo fin \\<subseteq> R^* `` init\"", "lemma mk_rtrancl_main_complete: \n  \"\\<lbrakk>\\<And> a. a \\<in> init \\<Longrightarrow> \\<exists> b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a\\<rbrakk> \n  \\<Longrightarrow> \\<lbrakk> \\<And> a b . a \\<in> fin \\<Longrightarrow> b \\<in> set_of (r a) \\<Longrightarrow> \\<exists> c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c b\\<rbrakk> \n  \\<Longrightarrow> c \\<in> R^* `` init \n  \\<Longrightarrow> \\<exists> b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\"", "lemma mk_rtrancl_sound: \"mk_rtrancl init \\<subseteq> R^* `` set_of init\"", "lemma mk_rtrancl_complete: assumes a: \"a \\<in> R^* `` set_of init\"\n  shows \"\\<exists> b. b \\<in> mk_rtrancl init \\<and> subsumes b a\"", "lemma mk_rtrancl_no_subsumption: assumes \"subsumes = (=)\"\n  shows \"mk_rtrancl init = R^* `` set_of init\"", "lemma mk_rtrancl_list_main: \"fin = set finl \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r todo finl) = mk_rtrancl_main todo fin\"", "lemma mk_rtrancl_list: \"set (mk_rtrancl_list subsumes r init) = mk_rtrancl init\""], "translations": [["", "lemma finite_Rs: assumes init: \"finite init\"\n  shows \"finite (R^* `` init)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (R\\<^sup>* `` init)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (R\\<^sup>* `` init)", "let ?R = \"\\<lambda> a. {b . (a,b) \\<in> R^*}\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite (R\\<^sup>* `` init)", "let ?S = \"{ ?R a | a . a \\<in> init}\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite (R\\<^sup>* `` init)", "have id: \"R^* `` init = \\<Union> ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` init =\n    \\<Union> {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}", "by auto"], ["proof (state)\nthis:\n  R\\<^sup>* `` init =\n  \\<Union> {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n\ngoal (1 subgoal):\n 1. finite (R\\<^sup>* `` init)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (R\\<^sup>* `` init)", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init})", "proof (rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n 2. \\<And>M.\n       M \\<in> {{b. (a, b) \\<in> R\\<^sup>*} |a.\n                a \\<in> init} \\<Longrightarrow>\n       finite M", "fix M"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n 2. \\<And>M.\n       M \\<in> {{b. (a, b) \\<in> R\\<^sup>*} |a.\n                a \\<in> init} \\<Longrightarrow>\n       finite M", "assume \"M \\<in> ?S\""], ["proof (state)\nthis:\n  M \\<in> {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n\ngoal (2 subgoals):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n 2. \\<And>M.\n       M \\<in> {{b. (a, b) \\<in> R\\<^sup>*} |a.\n                a \\<in> init} \\<Longrightarrow>\n       finite M", "then"], ["proof (chain)\npicking this:\n  M \\<in> {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}", "obtain a where M: \"M = ?R a\""], ["proof (prove)\nusing this:\n  M \\<in> {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        M = {b. (a, b) \\<in> R\\<^sup>*} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M = {b. (a, b) \\<in> R\\<^sup>*}\n\ngoal (2 subgoals):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n 2. \\<And>M.\n       M \\<in> {{b. (a, b) \\<in> R\\<^sup>*} |a.\n                a \\<in> init} \\<Longrightarrow>\n       finite M", "show \"finite M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite M", "unfolding M"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {b. (a, b) \\<in> R\\<^sup>*}", "by (rule rtrancl_fin)"], ["proof (state)\nthis:\n  finite M\n\ngoal (1 subgoal):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}", "show \"finite {{b. (a, b) \\<in> R^*} | a. a \\<in> init}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}", "using init"], ["proof (prove)\nusing this:\n  finite init\n\ngoal (1 subgoal):\n 1. finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}", "by auto"], ["proof (state)\nthis:\n  finite {{b. (a, b) \\<in> R\\<^sup>*} |a. a \\<in> init}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite (R\\<^sup>* `` init)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>a standard work-list algorithm with subsumption\\<close>"], ["", "function mk_rtrancl_main where \n  \"mk_rtrancl_main todo fin = (if set_of todo = {} then fin\n      else (let (a,tod) = sel todo\n             in (if (\\<exists> b \\<in> fin. subsumes b a) then mk_rtrancl_main tod fin\n                 else mk_rtrancl_main (un (r a) tod) (insert a fin))))\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>todo fin.\n           x = (todo, fin) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>todo fin todoa fina.\n       (todo, fin) = (todoa, fina) \\<Longrightarrow>\n       (if set_of todo = {} then fin\n        else let (a, tod) = sel todo\n             in if \\<exists>b\\<in>fin. subsumes b a\n                then mk_rtrancl_main_sumC (tod, fin)\n                else mk_rtrancl_main_sumC (un (r a) tod, insert a fin)) =\n       (if set_of todoa = {} then fina\n        else let (a, tod) = sel todoa\n             in if \\<exists>b\\<in>fina. subsumes b a\n                then mk_rtrancl_main_sumC (tod, fina)\n                else mk_rtrancl_main_sumC (un (r a) tod, insert a fina))", "by pat_completeness auto"], ["", "termination mk_rtrancl_main"], ["proof (prove)\ngoal (1 subgoal):\n 1. All mk_rtrancl_main_dom", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. All mk_rtrancl_main_dom", "let ?r1 = \"\\<lambda> (todo, fin). card (R^* `` (set_of todo) - fin)\""], ["proof (state)\ngoal (1 subgoal):\n 1. All mk_rtrancl_main_dom", "let ?r2 = \"\\<lambda> (todo, fin). size todo\""], ["proof (state)\ngoal (1 subgoal):\n 1. All mk_rtrancl_main_dom", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. All mk_rtrancl_main_dom", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. wf ?R\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin) \\<in> ?R\n 3. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin) \\<in> ?R", "show \"wf (measures [?r1,?r2])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measures\n         [\\<lambda>(todo, fin). card (R\\<^sup>* `` set_of todo - fin),\n          \\<lambda>(todo, fin). size todo])", "by simp"], ["proof (state)\nthis:\n  wf (measures\n       [\\<lambda>(todo, fin). card (R\\<^sup>* `` set_of todo - fin),\n        \\<lambda>(todo, fin). size todo])\n\ngoal (2 subgoals):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "fix todo fin pair tod a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "assume nempty: \"set_of todo \\<noteq> {}\" and pair1: \"pair = sel todo\" and pair2: \"(a,tod) = pair\""], ["proof (state)\nthis:\n  set_of todo \\<noteq> {}\n  pair = sel todo\n  (a, tod) = pair\n\ngoal (2 subgoals):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "from pair1 pair2"], ["proof (chain)\npicking this:\n  pair = sel todo\n  (a, tod) = pair", "have pair: \"sel todo = (a,tod)\""], ["proof (prove)\nusing this:\n  pair = sel todo\n  (a, tod) = pair\n\ngoal (1 subgoal):\n 1. sel todo = (a, tod)", "by simp"], ["proof (state)\nthis:\n  sel todo = (a, tod)\n\ngoal (2 subgoals):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "from set_of_fin"], ["proof (chain)\npicking this:\n  finite (set_of ?b)", "have fin: \"finite (set_of todo)\""], ["proof (prove)\nusing this:\n  finite (set_of ?b)\n\ngoal (1 subgoal):\n 1. finite (set_of todo)", "by auto"], ["proof (state)\nthis:\n  finite (set_of todo)\n\ngoal (2 subgoals):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "note sel = sel[OF nempty pair]"], ["proof (state)\nthis:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (2 subgoals):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<exists>b\\<in>fin. subsumes b xa\\<rbrakk>\n       \\<Longrightarrow> ((y, fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]\n 2. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "show \"((tod,fin),(todo,fin)) \\<in> measures [?r1,?r2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((tod, fin), todo, fin)\n    \\<in> measures\n           [\\<lambda>(todo, fin). card (R\\<^sup>* `` set_of todo - fin),\n            \\<lambda>(todo, fin). size todo]", "proof (rule measures_lesseq[OF _ measures_less], unfold split)"], ["proof (state)\ngoal (2 subgoals):\n 1. card (R\\<^sup>* `` set_of tod - fin)\n    \\<le> card (R\\<^sup>* `` set_of todo - fin)\n 2. size tod < size todo", "from sel"], ["proof (chain)\npicking this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo", "show \"size tod < size todo\""], ["proof (prove)\nusing this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. size tod < size todo", "by simp"], ["proof (state)\nthis:\n  size tod < size todo\n\ngoal (1 subgoal):\n 1. card (R\\<^sup>* `` set_of tod - fin)\n    \\<le> card (R\\<^sup>* `` set_of todo - fin)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. card (R\\<^sup>* `` set_of tod - fin)\n    \\<le> card (R\\<^sup>* `` set_of todo - fin)", "from sel"], ["proof (chain)\npicking this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo", "have subset: \"R^* `` set_of tod - fin \\<subseteq> R^* `` set_of todo - fin\" (is \"?l \\<subseteq> ?r\")"], ["proof (prove)\nusing this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of tod - fin \\<subseteq> R\\<^sup>* `` set_of todo - fin", "by auto"], ["proof (state)\nthis:\n  R\\<^sup>* `` set_of tod - fin \\<subseteq> R\\<^sup>* `` set_of todo - fin\n\ngoal (1 subgoal):\n 1. card (R\\<^sup>* `` set_of tod - fin)\n    \\<le> card (R\\<^sup>* `` set_of todo - fin)", "show \"card ?l \\<le> card ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (R\\<^sup>* `` set_of tod - fin)\n    \\<le> card (R\\<^sup>* `` set_of todo - fin)", "by (rule card_mono[OF _ subset], rule finite_Diff, rule finite_Rs[OF fin])"], ["proof (state)\nthis:\n  card (R\\<^sup>* `` set_of tod - fin)\n  \\<le> card (R\\<^sup>* `` set_of todo - fin)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((tod, fin), todo, fin)\n  \\<in> measures\n         [\\<lambda>(todo, fin). card (R\\<^sup>* `` set_of todo - fin),\n          \\<lambda>(todo, fin). size todo]\n\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "fix todo fin a tod pair"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "assume nempty: \"set_of todo \\<noteq> {}\" and pair1: \"pair = sel todo\" and pair2: \"(a,tod) = pair\" and nmem: \"\\<not> (\\<exists> b \\<in> fin. subsumes b a)\""], ["proof (state)\nthis:\n  set_of todo \\<noteq> {}\n  pair = sel todo\n  (a, tod) = pair\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "from pair1 pair2"], ["proof (chain)\npicking this:\n  pair = sel todo\n  (a, tod) = pair", "have pair: \"sel todo = (a,tod)\""], ["proof (prove)\nusing this:\n  pair = sel todo\n  (a, tod) = pair\n\ngoal (1 subgoal):\n 1. sel todo = (a, tod)", "by auto"], ["proof (state)\nthis:\n  sel todo = (a, tod)\n\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "from nmem subsumes_refl[of a]"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n  subsumes a a", "have nmem: \"a \\<notin> fin\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n  subsumes a a\n\ngoal (1 subgoal):\n 1. a \\<notin> fin", "by auto"], ["proof (state)\nthis:\n  a \\<notin> fin\n\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "from set_of_fin"], ["proof (chain)\npicking this:\n  finite (set_of ?b)", "have fin: \"finite (set_of todo)\""], ["proof (prove)\nusing this:\n  finite (set_of ?b)\n\ngoal (1 subgoal):\n 1. finite (set_of todo)", "by auto"], ["proof (state)\nthis:\n  finite (set_of todo)\n\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "note sel = sel[OF nempty pair]"], ["proof (state)\nthis:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. \\<And>todo fin x xa y.\n       \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n        \\<not> (\\<exists>b\\<in>fin. subsumes b xa)\\<rbrakk>\n       \\<Longrightarrow> ((un (r xa) y, insert xa fin), todo, fin)\n                         \\<in> measures\n                                [\\<lambda>(todo, fin).\n                                    card (R\\<^sup>* `` set_of todo - fin),\n                                 \\<lambda>(todo, fin). size todo]", "show \"((un (r a) tod,insert a fin),(todo,fin)) \\<in> measures [?r1,?r2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((un (r a) tod, insert a fin), todo, fin)\n    \\<in> measures\n           [\\<lambda>(todo, fin). card (R\\<^sup>* `` set_of todo - fin),\n            \\<lambda>(todo, fin). size todo]", "proof (rule measures_less, unfold split, \n        rule psubset_card_mono[OF finite_Diff[OF finite_Rs[OF fin]]])"], ["proof (state)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subset> R\\<^sup>* `` set_of todo - fin", "let ?l = \"R^* `` set_of (un (r a) tod) - insert a fin\""], ["proof (state)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subset> R\\<^sup>* `` set_of todo - fin", "let ?r = \"R^* `` set_of todo - fin\""], ["proof (state)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subset> R\\<^sup>* `` set_of todo - fin", "from sel"], ["proof (chain)\npicking this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo", "have at: \"a \\<in> set_of todo\""], ["proof (prove)\nusing this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. a \\<in> set_of todo", "by auto"], ["proof (state)\nthis:\n  a \\<in> set_of todo\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subset> R\\<^sup>* `` set_of todo - fin", "have ar: \"a \\<in> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> R\\<^sup>* `` set_of todo - fin", "using nmem at"], ["proof (prove)\nusing this:\n  a \\<notin> fin\n  a \\<in> set_of todo\n\ngoal (1 subgoal):\n 1. a \\<in> R\\<^sup>* `` set_of todo - fin", "by auto"], ["proof (state)\nthis:\n  a \\<in> R\\<^sup>* `` set_of todo - fin\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subset> R\\<^sup>* `` set_of todo - fin", "show \"?l \\<subset> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subset> R\\<^sup>* `` set_of todo - fin", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subseteq> R\\<^sup>* `` set_of todo - fin\n 2. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin \\<noteq>\n    R\\<^sup>* `` set_of todo - fin", "show \"?l \\<noteq> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin \\<noteq>\n    R\\<^sup>* `` set_of todo - fin", "using ar"], ["proof (prove)\nusing this:\n  a \\<in> R\\<^sup>* `` set_of todo - fin\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin \\<noteq>\n    R\\<^sup>* `` set_of todo - fin", "by auto"], ["proof (state)\nthis:\n  R\\<^sup>* `` set_of (un (r a) tod) - insert a fin \\<noteq>\n  R\\<^sup>* `` set_of todo - fin\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subseteq> R\\<^sup>* `` set_of todo - fin", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subseteq> R\\<^sup>* `` set_of todo - fin", "have \"R^* `` set_of (r a) \\<subseteq> R^* `` set_of todo\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (r a) \\<subseteq> R\\<^sup>* `` set_of todo", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> R\\<^sup>* `` set_of (r a) \\<Longrightarrow>\n       x \\<in> R\\<^sup>* `` set_of todo", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> R\\<^sup>* `` set_of (r a) \\<Longrightarrow>\n       x \\<in> R\\<^sup>* `` set_of todo", "assume \"b \\<in> R^* `` set_of (r a)\""], ["proof (state)\nthis:\n  b \\<in> R\\<^sup>* `` set_of (r a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> R\\<^sup>* `` set_of (r a) \\<Longrightarrow>\n       x \\<in> R\\<^sup>* `` set_of todo", "then"], ["proof (chain)\npicking this:\n  b \\<in> R\\<^sup>* `` set_of (r a)", "obtain c where cb: \"(c,b) \\<in> R^*\" and ca: \"c \\<in> set_of (r a)\""], ["proof (prove)\nusing this:\n  b \\<in> R\\<^sup>* `` set_of (r a)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>(c, b) \\<in> R\\<^sup>*; c \\<in> set_of (r a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (c, b) \\<in> R\\<^sup>*\n  c \\<in> set_of (r a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> R\\<^sup>* `` set_of (r a) \\<Longrightarrow>\n       x \\<in> R\\<^sup>* `` set_of todo", "hence ab: \"(a,b) \\<in> R O R^*\""], ["proof (prove)\nusing this:\n  (c, b) \\<in> R\\<^sup>*\n  c \\<in> set_of (r a)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> R O R\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> R O R\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> R\\<^sup>* `` set_of (r a) \\<Longrightarrow>\n       x \\<in> R\\<^sup>* `` set_of todo", "have \"(a,b) \\<in> R^*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> R\\<^sup>*", "by (rule subsetD[OF _ ab], regexp)"], ["proof (state)\nthis:\n  (a, b) \\<in> R\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> R\\<^sup>* `` set_of (r a) \\<Longrightarrow>\n       x \\<in> R\\<^sup>* `` set_of todo", "with at"], ["proof (chain)\npicking this:\n  a \\<in> set_of todo\n  (a, b) \\<in> R\\<^sup>*", "show \"b \\<in> R^* `` set_of todo\""], ["proof (prove)\nusing this:\n  a \\<in> set_of todo\n  (a, b) \\<in> R\\<^sup>*\n\ngoal (1 subgoal):\n 1. b \\<in> R\\<^sup>* `` set_of todo", "by auto"], ["proof (state)\nthis:\n  b \\<in> R\\<^sup>* `` set_of todo\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R\\<^sup>* `` set_of (r a) \\<subseteq> R\\<^sup>* `` set_of todo\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subseteq> R\\<^sup>* `` set_of todo - fin", "thus \"?l \\<subseteq> ?r\""], ["proof (prove)\nusing this:\n  R\\<^sup>* `` set_of (r a) \\<subseteq> R\\<^sup>* `` set_of todo\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subseteq> R\\<^sup>* `` set_of todo - fin", "using sel"], ["proof (prove)\nusing this:\n  R\\<^sup>* `` set_of (r a) \\<subseteq> R\\<^sup>* `` set_of todo\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n    \\<subseteq> R\\<^sup>* `` set_of todo - fin", "unfolding un"], ["proof (prove)\nusing this:\n  R\\<^sup>* `` set_of (r a) \\<subseteq> R\\<^sup>* `` set_of todo\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. R\\<^sup>* `` (set_of (r a) \\<union> set_of tod) - insert a fin\n    \\<subseteq> R\\<^sup>* `` set_of todo - fin", "by auto"], ["proof (state)\nthis:\n  R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n  \\<subseteq> R\\<^sup>* `` set_of todo - fin\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R\\<^sup>* `` set_of (un (r a) tod) - insert a fin\n  \\<subset> R\\<^sup>* `` set_of todo - fin\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((un (r a) tod, insert a fin), todo, fin)\n  \\<in> measures\n         [\\<lambda>(todo, fin). card (R\\<^sup>* `` set_of todo - fin),\n          \\<lambda>(todo, fin). size todo]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  All mk_rtrancl_main_dom\n\ngoal:\nNo subgoals!", "qed"], ["", "declare mk_rtrancl_main.simps[simp del]"], ["", "lemma mk_rtrancl_main_sound: \"set_of todo \\<union> fin \\<subseteq> R^* `` init \\<Longrightarrow> mk_rtrancl_main todo fin \\<subseteq> R^* `` init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "proof (induct todo fin rule: mk_rtrancl_main.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    set_of y \\<union> fin\n                    \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> mk_rtrancl_main y fin\n                                     \\<subseteq> R\\<^sup>* `` init;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            set_of (un (r xa) y) \\<union> insert xa fin\n            \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> mk_rtrancl_main (un (r xa) y) (insert xa fin)\n                             \\<subseteq> R\\<^sup>* `` init;\n        set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> mk_rtrancl_main todo fin\n                         \\<subseteq> R\\<^sup>* `` init", "case (1 todo fin)"], ["proof (state)\nthis:\n  \\<lbrakk>set_of todo \\<noteq> {}; ?x = sel todo; (?xa, ?y) = ?x;\n   \\<exists>b\\<in>fin. subsumes b ?xa;\n   set_of ?y \\<union> fin \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n  \\<Longrightarrow> mk_rtrancl_main ?y fin \\<subseteq> R\\<^sup>* `` init\n  \\<lbrakk>set_of todo \\<noteq> {}; ?x = sel todo; (?xa, ?y) = ?x;\n   \\<not> (\\<exists>b\\<in>fin. subsumes b ?xa);\n   set_of (un (r ?xa) ?y) \\<union> insert ?xa fin\n   \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n  \\<Longrightarrow> mk_rtrancl_main (un (r ?xa) ?y) (insert ?xa fin)\n                    \\<subseteq> R\\<^sup>* `` init\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    set_of y \\<union> fin\n                    \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> mk_rtrancl_main y fin\n                                     \\<subseteq> R\\<^sup>* `` init;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            set_of (un (r xa) y) \\<union> insert xa fin\n            \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> mk_rtrancl_main (un (r xa) y) (insert xa fin)\n                             \\<subseteq> R\\<^sup>* `` init;\n        set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> mk_rtrancl_main todo fin\n                         \\<subseteq> R\\<^sup>* `` init", "note simp = mk_rtrancl_main.simps[of todo fin]"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin =\n  (if set_of todo = {} then fin\n   else let (a, tod) = sel todo\n        in if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n           else mk_rtrancl_main (un (r a) tod) (insert a fin))\n\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    set_of y \\<union> fin\n                    \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> mk_rtrancl_main y fin\n                                     \\<subseteq> R\\<^sup>* `` init;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            set_of (un (r xa) y) \\<union> insert xa fin\n            \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> mk_rtrancl_main (un (r xa) y) (insert xa fin)\n                             \\<subseteq> R\\<^sup>* `` init;\n        set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> mk_rtrancl_main todo fin\n                         \\<subseteq> R\\<^sup>* `` init", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "proof (cases \"set_of todo = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. set_of todo = {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n 2. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "case True"], ["proof (state)\nthis:\n  set_of todo = {}\n\ngoal (2 subgoals):\n 1. set_of todo = {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n 2. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "unfolding simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if set_of todo = {} then fin\n     else let (a, tod) = sel todo\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (un (r a) tod) (insert a fin))\n    \\<subseteq> R\\<^sup>* `` init", "using True 1(3)"], ["proof (prove)\nusing this:\n  set_of todo = {}\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. (if set_of todo = {} then fin\n     else let (a, tod) = sel todo\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (un (r a) tod) (insert a fin))\n    \\<subseteq> R\\<^sup>* `` init", "by auto"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "case False"], ["proof (state)\nthis:\n  set_of todo \\<noteq> {}\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "hence nempty: \"(set_of todo = {}) = False\""], ["proof (prove)\nusing this:\n  set_of todo \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (set_of todo = {}) = False", "by auto"], ["proof (state)\nthis:\n  (set_of todo = {}) = False\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "obtain a tod where selt: \"sel todo = (a,tod)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a tod.\n        sel todo = (a, tod) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sel todo = (a, tod)\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "note sel = sel[OF False selt]"], ["proof (state)\nthis:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "note IH1 = 1(1)[OF False refl selt[symmetric]]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>b\\<in>fin. subsumes b a;\n   set_of tod \\<union> fin \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n  \\<Longrightarrow> mk_rtrancl_main tod fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "note IH2 = 1(2)[OF False refl selt[symmetric]]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (\\<exists>b\\<in>fin. subsumes b a);\n   set_of (un (r a) tod) \\<union> insert a fin\n   \\<subseteq> R\\<^sup>* `` init\\<rbrakk>\n  \\<Longrightarrow> mk_rtrancl_main (un (r a) tod) (insert a fin)\n                    \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "note simp = simp nempty if_False Let_def selt"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin =\n  (if set_of todo = {} then fin\n   else let (a, tod) = sel todo\n        in if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n           else mk_rtrancl_main (un (r a) tod) (insert a fin))\n  (set_of todo = {}) = False\n  (if False then ?x else ?y) = ?y\n  Let ?s ?f \\<equiv> ?f ?s\n  sel todo = (a, tod)\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "proof (cases \"\\<exists> b \\<in> fin. subsumes b a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b a \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "case True"], ["proof (state)\nthis:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b a \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "hence \"mk_rtrancl_main todo fin = mk_rtrancl_main tod fin\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin = mk_rtrancl_main tod fin", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (1 subgoal):\n 1. (case (a, tod) of\n     (a, tod) \\<Rightarrow>\n       if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n       else mk_rtrancl_main (un (r a) tod) (insert a fin)) =\n    mk_rtrancl_main tod fin", "by simp"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin = mk_rtrancl_main tod fin\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b a \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "with IH1[OF True] 1(3)"], ["proof (chain)\npicking this:\n  set_of tod \\<union> fin \\<subseteq> R\\<^sup>* `` init \\<Longrightarrow>\n  mk_rtrancl_main tod fin \\<subseteq> R\\<^sup>* `` init\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\n  mk_rtrancl_main todo fin = mk_rtrancl_main tod fin", "show ?thesis"], ["proof (prove)\nusing this:\n  set_of tod \\<union> fin \\<subseteq> R\\<^sup>* `` init \\<Longrightarrow>\n  mk_rtrancl_main tod fin \\<subseteq> R\\<^sup>* `` init\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\n  mk_rtrancl_main todo fin = mk_rtrancl_main tod fin\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "using sel"], ["proof (prove)\nusing this:\n  set_of tod \\<union> fin \\<subseteq> R\\<^sup>* `` init \\<Longrightarrow>\n  mk_rtrancl_main tod fin \\<subseteq> R\\<^sup>* `` init\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\n  mk_rtrancl_main todo fin = mk_rtrancl_main tod fin\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "by auto"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "hence id: \"mk_rtrancl_main todo fin = mk_rtrancl_main (un (r a) tod) (insert a fin)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin = mk_rtrancl_main (un (r a) tod) (insert a fin)", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. (case (a, tod) of\n     (a, tod) \\<Rightarrow>\n       if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n       else mk_rtrancl_main (un (r a) tod) (insert a fin)) =\n    mk_rtrancl_main (un (r a) tod) (insert a fin)", "by simp"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin = mk_rtrancl_main (un (r a) tod) (insert a fin)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl_main (un (r a) tod) (insert a fin)\n    \\<subseteq> R\\<^sup>* `` init", "proof (rule IH2[OF False])"], ["proof (state)\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "from sel 1(3)"], ["proof (chain)\npicking this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init", "have subset: \"set_of todo \\<union> insert a fin \\<subseteq> R^* `` init\""], ["proof (prove)\nusing this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of todo \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init", "by auto"], ["proof (state)\nthis:\n  set_of todo \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "{"], ["proof (state)\nthis:\n  set_of todo \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "assume b: \"b \\<in> set_of (r a)\""], ["proof (state)\nthis:\n  b \\<in> set_of (r a)\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "hence ab: \"(a,b) \\<in> R\""], ["proof (prove)\nusing this:\n  b \\<in> set_of (r a)\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> R", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> R\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "from sel 1(3)"], ["proof (chain)\npicking this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init", "have \"a \\<in> R^* `` init\""], ["proof (prove)\nusing this:\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n  set_of todo \\<union> fin \\<subseteq> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. a \\<in> R\\<^sup>* `` init", "by auto"], ["proof (state)\nthis:\n  a \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "then"], ["proof (chain)\npicking this:\n  a \\<in> R\\<^sup>* `` init", "obtain c where c: \"c \\<in> init\" and ca: \"(c,a) \\<in> R^*\""], ["proof (prove)\nusing this:\n  a \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> init; (c, a) \\<in> R\\<^sup>*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c \\<in> init\n  (c, a) \\<in> R\\<^sup>*\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "from ca ab"], ["proof (chain)\npicking this:\n  (c, a) \\<in> R\\<^sup>*\n  (a, b) \\<in> R", "have cb: \"(c,b) \\<in> R^* O R\""], ["proof (prove)\nusing this:\n  (c, a) \\<in> R\\<^sup>*\n  (a, b) \\<in> R\n\ngoal (1 subgoal):\n 1. (c, b) \\<in> R\\<^sup>* O R", "by auto"], ["proof (state)\nthis:\n  (c, b) \\<in> R\\<^sup>* O R\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "have \"(c,b) \\<in> R^*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c, b) \\<in> R\\<^sup>*", "by (rule subsetD[OF _ cb], regexp)"], ["proof (state)\nthis:\n  (c, b) \\<in> R\\<^sup>*\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "with c"], ["proof (chain)\npicking this:\n  c \\<in> init\n  (c, b) \\<in> R\\<^sup>*", "have \"b \\<in> R^* `` init\""], ["proof (prove)\nusing this:\n  c \\<in> init\n  (c, b) \\<in> R\\<^sup>*\n\ngoal (1 subgoal):\n 1. b \\<in> R\\<^sup>* `` init", "by auto"], ["proof (state)\nthis:\n  b \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "}"], ["proof (state)\nthis:\n  ?b2 \\<in> set_of (r a) \\<Longrightarrow> ?b2 \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "with subset"], ["proof (chain)\npicking this:\n  set_of todo \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init\n  ?b2 \\<in> set_of (r a) \\<Longrightarrow> ?b2 \\<in> R\\<^sup>* `` init", "show \"set_of (un (r a) tod) \\<union> (insert a fin) \\<subseteq> R^* `` init\""], ["proof (prove)\nusing this:\n  set_of todo \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init\n  ?b2 \\<in> set_of (r a) \\<Longrightarrow> ?b2 \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of (un (r a) tod) \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "unfolding un"], ["proof (prove)\nusing this:\n  set_of todo \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init\n  ?b2 \\<in> set_of (r a) \\<Longrightarrow> ?b2 \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. set_of (r a) \\<union> set_of tod \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "using sel"], ["proof (prove)\nusing this:\n  set_of todo \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init\n  ?b2 \\<in> set_of (r a) \\<Longrightarrow> ?b2 \\<in> R\\<^sup>* `` init\n  set_of todo = insert a (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. set_of (r a) \\<union> set_of tod \\<union> insert a fin\n    \\<subseteq> R\\<^sup>* `` init", "by auto"], ["proof (state)\nthis:\n  set_of (un (r a) tod) \\<union> insert a fin \\<subseteq> R\\<^sup>* `` init\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin \\<subseteq> R\\<^sup>* `` init\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mk_rtrancl_main_complete: \n  \"\\<lbrakk>\\<And> a. a \\<in> init \\<Longrightarrow> \\<exists> b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a\\<rbrakk> \n  \\<Longrightarrow> \\<lbrakk> \\<And> a b . a \\<in> fin \\<Longrightarrow> b \\<in> set_of (r a) \\<Longrightarrow> \\<exists> c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c b\\<rbrakk> \n  \\<Longrightarrow> c \\<in> R^* `` init \n  \\<Longrightarrow> \\<exists> b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a.\n                a \\<in> init \\<Longrightarrow>\n                \\<exists>b.\n                   b \\<in> set_of todo \\<union> fin \\<and> subsumes b a;\n     \\<And>a b.\n        \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c.\n                             c \\<in> set_of todo \\<union> fin \\<and>\n                             subsumes c b;\n     c \\<in> R\\<^sup>* `` init\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b.\n                         b \\<in> mk_rtrancl_main todo fin \\<and>\n                         subsumes b c", "proof (induct todo fin rule: mk_rtrancl_main.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    \\<And>a.\n                       a \\<in> init \\<Longrightarrow>\n                       \\<exists>b.\n                          b \\<in> set_of y \\<union> fin \\<and> subsumes b a;\n                    \\<And>a b.\n                       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>c.\n      c \\<in> set_of y \\<union> fin \\<and> subsumes c b;\n                    c \\<in> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>b.\n  b \\<in> mk_rtrancl_main y fin \\<and> subsumes b c;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            \\<And>a.\n               a \\<in> init \\<Longrightarrow>\n               \\<exists>b.\n                  b \\<in> set_of (un (r xa) y) \\<union> insert xa fin \\<and>\n                  subsumes b a;\n            \\<And>a b.\n               \\<lbrakk>a \\<in> insert xa fin; b \\<in> set_of (r a)\\<rbrakk>\n               \\<Longrightarrow> \\<exists>c.\n                                    c \\<in> set_of (un (r xa) y) \\<union>\n      insert xa fin \\<and>\n                                    subsumes c b;\n            c \\<in> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                b \\<in> mk_rtrancl_main (un (r xa) y)\n   (insert xa fin) \\<and>\n                                subsumes b c;\n        \\<And>a.\n           a \\<in> init \\<Longrightarrow>\n           \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a;\n        \\<And>a b.\n           \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c.\n                                c \\<in> set_of todo \\<union> fin \\<and>\n                                subsumes c b;\n        c \\<in> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            b \\<in> mk_rtrancl_main todo fin \\<and>\n                            subsumes b c", "case (1 todo fin)"], ["proof (state)\nthis:\n  \\<lbrakk>set_of todo \\<noteq> {}; ?x = sel todo; (?xa, ?y) = ?x;\n   \\<exists>b\\<in>fin. subsumes b ?xa;\n   \\<And>a.\n      a \\<in> init \\<Longrightarrow>\n      \\<exists>b. b \\<in> set_of ?y \\<union> fin \\<and> subsumes b a;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n      \\<Longrightarrow> \\<exists>c.\n                           c \\<in> set_of ?y \\<union> fin \\<and>\n                           subsumes c b;\n   c \\<in> R\\<^sup>* `` init\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b.\n                       b \\<in> mk_rtrancl_main ?y fin \\<and> subsumes b c\n  \\<lbrakk>set_of todo \\<noteq> {}; ?x = sel todo; (?xa, ?y) = ?x;\n   \\<not> (\\<exists>b\\<in>fin. subsumes b ?xa);\n   \\<And>a.\n      a \\<in> init \\<Longrightarrow>\n      \\<exists>b.\n         b \\<in> set_of (un (r ?xa) ?y) \\<union> insert ?xa fin \\<and>\n         subsumes b a;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> insert ?xa fin; b \\<in> set_of (r a)\\<rbrakk>\n      \\<Longrightarrow> \\<exists>c.\n                           c \\<in> set_of (un (r ?xa) ?y) \\<union>\n                                   insert ?xa fin \\<and>\n                           subsumes c b;\n   c \\<in> R\\<^sup>* `` init\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b.\n                       b \\<in> mk_rtrancl_main (un (r ?xa) ?y)\n                                (insert ?xa fin) \\<and>\n                       subsumes b c\n  ?a \\<in> init \\<Longrightarrow>\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b ?a\n  \\<lbrakk>?a \\<in> fin; ?b \\<in> set_of (r ?a)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       c \\<in> set_of todo \\<union> fin \\<and> subsumes c ?b\n  c \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    \\<And>a.\n                       a \\<in> init \\<Longrightarrow>\n                       \\<exists>b.\n                          b \\<in> set_of y \\<union> fin \\<and> subsumes b a;\n                    \\<And>a b.\n                       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>c.\n      c \\<in> set_of y \\<union> fin \\<and> subsumes c b;\n                    c \\<in> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>b.\n  b \\<in> mk_rtrancl_main y fin \\<and> subsumes b c;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            \\<And>a.\n               a \\<in> init \\<Longrightarrow>\n               \\<exists>b.\n                  b \\<in> set_of (un (r xa) y) \\<union> insert xa fin \\<and>\n                  subsumes b a;\n            \\<And>a b.\n               \\<lbrakk>a \\<in> insert xa fin; b \\<in> set_of (r a)\\<rbrakk>\n               \\<Longrightarrow> \\<exists>c.\n                                    c \\<in> set_of (un (r xa) y) \\<union>\n      insert xa fin \\<and>\n                                    subsumes c b;\n            c \\<in> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                b \\<in> mk_rtrancl_main (un (r xa) y)\n   (insert xa fin) \\<and>\n                                subsumes b c;\n        \\<And>a.\n           a \\<in> init \\<Longrightarrow>\n           \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a;\n        \\<And>a b.\n           \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c.\n                                c \\<in> set_of todo \\<union> fin \\<and>\n                                subsumes c b;\n        c \\<in> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            b \\<in> mk_rtrancl_main todo fin \\<and>\n                            subsumes b c", "from 1(5)"], ["proof (chain)\npicking this:\n  c \\<in> R\\<^sup>* `` init", "have c: \"c \\<in> R^* `` init\""], ["proof (prove)\nusing this:\n  c \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. c \\<in> R\\<^sup>* `` init", "."], ["proof (state)\nthis:\n  c \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    \\<And>a.\n                       a \\<in> init \\<Longrightarrow>\n                       \\<exists>b.\n                          b \\<in> set_of y \\<union> fin \\<and> subsumes b a;\n                    \\<And>a b.\n                       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>c.\n      c \\<in> set_of y \\<union> fin \\<and> subsumes c b;\n                    c \\<in> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>b.\n  b \\<in> mk_rtrancl_main y fin \\<and> subsumes b c;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            \\<And>a.\n               a \\<in> init \\<Longrightarrow>\n               \\<exists>b.\n                  b \\<in> set_of (un (r xa) y) \\<union> insert xa fin \\<and>\n                  subsumes b a;\n            \\<And>a b.\n               \\<lbrakk>a \\<in> insert xa fin; b \\<in> set_of (r a)\\<rbrakk>\n               \\<Longrightarrow> \\<exists>c.\n                                    c \\<in> set_of (un (r xa) y) \\<union>\n      insert xa fin \\<and>\n                                    subsumes c b;\n            c \\<in> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                b \\<in> mk_rtrancl_main (un (r xa) y)\n   (insert xa fin) \\<and>\n                                subsumes b c;\n        \\<And>a.\n           a \\<in> init \\<Longrightarrow>\n           \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a;\n        \\<And>a b.\n           \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c.\n                                c \\<in> set_of todo \\<union> fin \\<and>\n                                subsumes c b;\n        c \\<in> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            b \\<in> mk_rtrancl_main todo fin \\<and>\n                            subsumes b c", "note finr = 1(4)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> fin; ?b \\<in> set_of (r ?a)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>c.\n                       c \\<in> set_of todo \\<union> fin \\<and> subsumes c ?b\n\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    \\<And>a.\n                       a \\<in> init \\<Longrightarrow>\n                       \\<exists>b.\n                          b \\<in> set_of y \\<union> fin \\<and> subsumes b a;\n                    \\<And>a b.\n                       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>c.\n      c \\<in> set_of y \\<union> fin \\<and> subsumes c b;\n                    c \\<in> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>b.\n  b \\<in> mk_rtrancl_main y fin \\<and> subsumes b c;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            \\<And>a.\n               a \\<in> init \\<Longrightarrow>\n               \\<exists>b.\n                  b \\<in> set_of (un (r xa) y) \\<union> insert xa fin \\<and>\n                  subsumes b a;\n            \\<And>a b.\n               \\<lbrakk>a \\<in> insert xa fin; b \\<in> set_of (r a)\\<rbrakk>\n               \\<Longrightarrow> \\<exists>c.\n                                    c \\<in> set_of (un (r xa) y) \\<union>\n      insert xa fin \\<and>\n                                    subsumes c b;\n            c \\<in> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                b \\<in> mk_rtrancl_main (un (r xa) y)\n   (insert xa fin) \\<and>\n                                subsumes b c;\n        \\<And>a.\n           a \\<in> init \\<Longrightarrow>\n           \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a;\n        \\<And>a b.\n           \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c.\n                                c \\<in> set_of todo \\<union> fin \\<and>\n                                subsumes c b;\n        c \\<in> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            b \\<in> mk_rtrancl_main todo fin \\<and>\n                            subsumes b c", "note init = 1(3)"], ["proof (state)\nthis:\n  ?a \\<in> init \\<Longrightarrow>\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b ?a\n\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    \\<And>a.\n                       a \\<in> init \\<Longrightarrow>\n                       \\<exists>b.\n                          b \\<in> set_of y \\<union> fin \\<and> subsumes b a;\n                    \\<And>a b.\n                       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>c.\n      c \\<in> set_of y \\<union> fin \\<and> subsumes c b;\n                    c \\<in> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>b.\n  b \\<in> mk_rtrancl_main y fin \\<and> subsumes b c;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            \\<And>a.\n               a \\<in> init \\<Longrightarrow>\n               \\<exists>b.\n                  b \\<in> set_of (un (r xa) y) \\<union> insert xa fin \\<and>\n                  subsumes b a;\n            \\<And>a b.\n               \\<lbrakk>a \\<in> insert xa fin; b \\<in> set_of (r a)\\<rbrakk>\n               \\<Longrightarrow> \\<exists>c.\n                                    c \\<in> set_of (un (r xa) y) \\<union>\n      insert xa fin \\<and>\n                                    subsumes c b;\n            c \\<in> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                b \\<in> mk_rtrancl_main (un (r xa) y)\n   (insert xa fin) \\<and>\n                                subsumes b c;\n        \\<And>a.\n           a \\<in> init \\<Longrightarrow>\n           \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a;\n        \\<And>a b.\n           \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c.\n                                c \\<in> set_of todo \\<union> fin \\<and>\n                                subsumes c b;\n        c \\<in> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            b \\<in> mk_rtrancl_main todo fin \\<and>\n                            subsumes b c", "note simp = mk_rtrancl_main.simps[of todo fin]"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin =\n  (if set_of todo = {} then fin\n   else let (a, tod) = sel todo\n        in if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n           else mk_rtrancl_main (un (r a) tod) (insert a fin))\n\ngoal (1 subgoal):\n 1. \\<And>todo fin.\n       \\<lbrakk>\\<And>x xa y.\n                   \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo;\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    \\<And>a.\n                       a \\<in> init \\<Longrightarrow>\n                       \\<exists>b.\n                          b \\<in> set_of y \\<union> fin \\<and> subsumes b a;\n                    \\<And>a b.\n                       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>c.\n      c \\<in> set_of y \\<union> fin \\<and> subsumes c b;\n                    c \\<in> R\\<^sup>* `` init\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>b.\n  b \\<in> mk_rtrancl_main y fin \\<and> subsumes b c;\n        \\<And>x xa y.\n           \\<lbrakk>set_of todo \\<noteq> {}; x = sel todo; (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            \\<And>a.\n               a \\<in> init \\<Longrightarrow>\n               \\<exists>b.\n                  b \\<in> set_of (un (r xa) y) \\<union> insert xa fin \\<and>\n                  subsumes b a;\n            \\<And>a b.\n               \\<lbrakk>a \\<in> insert xa fin; b \\<in> set_of (r a)\\<rbrakk>\n               \\<Longrightarrow> \\<exists>c.\n                                    c \\<in> set_of (un (r xa) y) \\<union>\n      insert xa fin \\<and>\n                                    subsumes c b;\n            c \\<in> R\\<^sup>* `` init\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                b \\<in> mk_rtrancl_main (un (r xa) y)\n   (insert xa fin) \\<and>\n                                subsumes b c;\n        \\<And>a.\n           a \\<in> init \\<Longrightarrow>\n           \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a;\n        \\<And>a b.\n           \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>c.\n                                c \\<in> set_of todo \\<union> fin \\<and>\n                                subsumes c b;\n        c \\<in> R\\<^sup>* `` init\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b.\n                            b \\<in> mk_rtrancl_main todo fin \\<and>\n                            subsumes b c", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "proof (cases \"set_of todo = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. set_of todo = {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "case True"], ["proof (state)\nthis:\n  set_of todo = {}\n\ngoal (2 subgoals):\n 1. set_of todo = {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "hence id: \"mk_rtrancl_main todo fin = fin\""], ["proof (prove)\nusing this:\n  set_of todo = {}\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin = fin", "unfolding simp"], ["proof (prove)\nusing this:\n  set_of todo = {}\n\ngoal (1 subgoal):\n 1. (if set_of todo = {} then fin\n     else let (a, tod) = sel todo\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (un (r a) tod) (insert a fin)) =\n    fin", "by simp"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin = fin\n\ngoal (2 subgoals):\n 1. set_of todo = {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "from c"], ["proof (chain)\npicking this:\n  c \\<in> R\\<^sup>* `` init", "obtain a where a: \"a \\<in> init\" and ac: \"(a,c) \\<in> R^*\""], ["proof (prove)\nusing this:\n  c \\<in> R\\<^sup>* `` init\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> init; (a, c) \\<in> R\\<^sup>*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> init\n  (a, c) \\<in> R\\<^sup>*\n\ngoal (2 subgoals):\n 1. set_of todo = {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> fin \\<and> subsumes b c", "using ac"], ["proof (prove)\nusing this:\n  (a, c) \\<in> R\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> fin \\<and> subsumes b c", "proof (induct rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>b. b \\<in> fin \\<and> subsumes b a\n 2. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>b. b \\<in> fin \\<and> subsumes b a\n 2. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "from init[OF a]"], ["proof (chain)\npicking this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> fin \\<and> subsumes b a", "unfolding True"], ["proof (prove)\nusing this:\n  \\<exists>b. b \\<in> {} \\<union> fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> fin \\<and> subsumes b a", "by auto"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "case (step b c)"], ["proof (state)\nthis:\n  (a, b) \\<in> R\\<^sup>*\n  (b, c) \\<in> R\n  \\<exists>ba. ba \\<in> fin \\<and> subsumes ba b\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "from step(3)"], ["proof (chain)\npicking this:\n  \\<exists>ba. ba \\<in> fin \\<and> subsumes ba b", "obtain d where d: \"d \\<in> fin\" and db: \"subsumes d b\""], ["proof (prove)\nusing this:\n  \\<exists>ba. ba \\<in> fin \\<and> subsumes ba b\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>d \\<in> fin; subsumes d b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  d \\<in> fin\n  subsumes d b\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "from step(2)"], ["proof (chain)\npicking this:\n  (b, c) \\<in> R", "have cb: \"c \\<in> set_of (r b)\""], ["proof (prove)\nusing this:\n  (b, c) \\<in> R\n\ngoal (1 subgoal):\n 1. c \\<in> set_of (r b)", "by auto"], ["proof (state)\nthis:\n  c \\<in> set_of (r b)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(a, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "from subsumes_step[OF db cb]"], ["proof (chain)\npicking this:\n  \\<exists>d\\<in>set_of (r d). subsumes d c", "obtain a where a: \"a \\<in> set_of (r d)\" and ac: \"subsumes a c\""], ["proof (prove)\nusing this:\n  \\<exists>d\\<in>set_of (r d). subsumes d c\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> set_of (r d); subsumes a c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> set_of (r d)\n  subsumes a c\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(a__, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "from finr[OF d a]"], ["proof (chain)\npicking this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c a", "obtain e where e: \"e \\<in> fin\" and ea: \"subsumes e a\""], ["proof (prove)\nusing this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c a\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> fin; subsumes e a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding True"], ["proof (prove)\nusing this:\n  \\<exists>c. c \\<in> {} \\<union> fin \\<and> subsumes c a\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> fin; subsumes e a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e \\<in> fin\n  subsumes e a\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(a__, y) \\<in> R\\<^sup>*; (y, z) \\<in> R;\n        \\<exists>b. b \\<in> fin \\<and> subsumes b y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. b \\<in> fin \\<and> subsumes b z", "from subsumes_trans[OF ea ac] e"], ["proof (chain)\npicking this:\n  subsumes e c\n  e \\<in> fin", "show ?case"], ["proof (prove)\nusing this:\n  subsumes e c\n  e \\<in> fin\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> fin \\<and> subsumes b c", "by auto"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> fin \\<and> subsumes b c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "case False"], ["proof (state)\nthis:\n  set_of todo \\<noteq> {}\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "hence nempty: \"(set_of todo = {}) = False\""], ["proof (prove)\nusing this:\n  set_of todo \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (set_of todo = {}) = False", "by simp"], ["proof (state)\nthis:\n  (set_of todo = {}) = False\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "obtain A tod where selt: \"sel todo = (A,tod)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A tod.\n        sel todo = (A, tod) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sel todo = (A, tod)\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "note simp = nempty simp if_False Let_def selt"], ["proof (state)\nthis:\n  (set_of todo = {}) = False\n  mk_rtrancl_main todo fin =\n  (if set_of todo = {} then fin\n   else let (a, tod) = sel todo\n        in if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n           else mk_rtrancl_main (un (r a) tod) (insert a fin))\n  (if False then ?x else ?y) = ?y\n  Let ?s ?f \\<equiv> ?f ?s\n  sel todo = (A, tod)\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "note sel = sel[OF False selt]"], ["proof (state)\nthis:\n  set_of todo = insert A (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "note IH1 = 1(1)[OF False refl selt[symmetric] _ _ _ c]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>b\\<in>fin. subsumes b A;\n   \\<And>a.\n      a \\<in> init \\<Longrightarrow>\n      \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n      \\<Longrightarrow> \\<exists>c.\n                           c \\<in> set_of tod \\<union> fin \\<and>\n                           subsumes c b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b.\n                       b \\<in> mk_rtrancl_main tod fin \\<and> subsumes b c\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "note IH2 = 1(2)[OF False refl selt[symmetric] _ _ _ c]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (\\<exists>b\\<in>fin. subsumes b A);\n   \\<And>a.\n      a \\<in> init \\<Longrightarrow>\n      \\<exists>b.\n         b \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n         subsumes b a;\n   \\<And>a b.\n      \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n      \\<Longrightarrow> \\<exists>c.\n                           c \\<in> set_of (un (r A) tod) \\<union>\n                                   insert A fin \\<and>\n                           subsumes c b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b.\n                       b \\<in> mk_rtrancl_main (un (r A) tod)\n                                (insert A fin) \\<and>\n                       subsumes b c\n\ngoal (1 subgoal):\n 1. set_of todo \\<noteq> {} \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "proof (cases \"\\<exists> b \\<in> fin. subsumes b A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b A \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "case True"], ["proof (state)\nthis:\n  \\<exists>b\\<in>fin. subsumes b A\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b A \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "note oTrue = this"], ["proof (state)\nthis:\n  \\<exists>b\\<in>fin. subsumes b A\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b A \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "hence id: \"mk_rtrancl_main todo fin = mk_rtrancl_main tod fin\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b A\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin = mk_rtrancl_main tod fin", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b A\n\ngoal (1 subgoal):\n 1. (case (A, tod) of\n     (a, tod) \\<Rightarrow>\n       if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n       else mk_rtrancl_main (un (r a) tod) (insert a fin)) =\n    mk_rtrancl_main tod fin", "by simp"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin = mk_rtrancl_main tod fin\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b A \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "from True"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>fin. subsumes b A", "obtain b where b: \"b \\<in> fin\" and ba: \"subsumes b A\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b A\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> fin; subsumes b A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b \\<in> fin\n  subsumes b A\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b A \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl_main tod fin \\<and> subsumes b c", "proof (rule IH1[OF True])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> init \\<Longrightarrow>\n       \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> init \\<Longrightarrow>\n       \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "assume a: \"a \\<in> init\""], ["proof (state)\nthis:\n  a \\<in> init\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> init \\<Longrightarrow>\n       \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "from init[OF a]"], ["proof (chain)\npicking this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a", "obtain c where c: \"c \\<in> set_of todo \\<union> fin\" and ca: \"subsumes c a\""], ["proof (prove)\nusing this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<in> set_of todo \\<union> fin; subsumes c a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c \\<in> set_of todo \\<union> fin\n  subsumes c a\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> init \\<Longrightarrow>\n       \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "show \"\\<exists> b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "proof (cases \"c = A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = A \\<Longrightarrow>\n    \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n 2. c \\<noteq> A \\<Longrightarrow>\n    \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "case False"], ["proof (state)\nthis:\n  c \\<noteq> A\n\ngoal (2 subgoals):\n 1. c = A \\<Longrightarrow>\n    \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n 2. c \\<noteq> A \\<Longrightarrow>\n    \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "thus ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "using c ca sel"], ["proof (prove)\nusing this:\n  c \\<noteq> A\n  c \\<in> set_of todo \\<union> fin\n  subsumes c a\n  set_of todo = insert A (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "by auto"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. c = A \\<Longrightarrow>\n    \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c = A \\<Longrightarrow>\n    \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "case True"], ["proof (state)\nthis:\n  c = A\n\ngoal (1 subgoal):\n 1. c = A \\<Longrightarrow>\n    \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "using b subsumes_trans[OF ba, of a] ca"], ["proof (prove)\nusing this:\n  b \\<in> fin\n  subsumes A a \\<Longrightarrow> subsumes b a\n  subsumes c a\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "unfolding True[symmetric]"], ["proof (prove)\nusing this:\n  b \\<in> fin\n  subsumes c a \\<Longrightarrow> subsumes b a\n  subsumes c a\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a", "by auto"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> set_of tod \\<union> fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "fix a c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "assume a: \"a \\<in> fin\" and c: \"c \\<in> set_of (r a)\""], ["proof (state)\nthis:\n  a \\<in> fin\n  c \\<in> set_of (r a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "from finr[OF a c]"], ["proof (chain)\npicking this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c c", "obtain e where e: \"e \\<in> set_of todo \\<union> fin\" and ec: \"subsumes e c\""], ["proof (prove)\nusing this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c c\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> set_of todo \\<union> fin; subsumes e c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e \\<in> set_of todo \\<union> fin\n  subsumes e c\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of tod \\<union> fin \\<and>\n                            subsumes c b", "show \"\\<exists> d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "proof (cases \"A = e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A = e \\<Longrightarrow>\n    \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c\n 2. A \\<noteq> e \\<Longrightarrow>\n    \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "case False"], ["proof (state)\nthis:\n  A \\<noteq> e\n\ngoal (2 subgoals):\n 1. A = e \\<Longrightarrow>\n    \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c\n 2. A \\<noteq> e \\<Longrightarrow>\n    \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "with e ec"], ["proof (chain)\npicking this:\n  e \\<in> set_of todo \\<union> fin\n  subsumes e c\n  A \\<noteq> e", "show ?thesis"], ["proof (prove)\nusing this:\n  e \\<in> set_of todo \\<union> fin\n  subsumes e c\n  A \\<noteq> e\n\ngoal (1 subgoal):\n 1. \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "using sel"], ["proof (prove)\nusing this:\n  e \\<in> set_of todo \\<union> fin\n  subsumes e c\n  A \\<noteq> e\n  set_of todo = insert A (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "by auto"], ["proof (state)\nthis:\n  \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c\n\ngoal (1 subgoal):\n 1. A = e \\<Longrightarrow>\n    \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A = e \\<Longrightarrow>\n    \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "case True"], ["proof (state)\nthis:\n  A = e\n\ngoal (1 subgoal):\n 1. A = e \\<Longrightarrow>\n    \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "from subsumes_trans[OF ba[unfolded True] ec]"], ["proof (chain)\npicking this:\n  subsumes b c", "show ?thesis"], ["proof (prove)\nusing this:\n  subsumes b c\n\ngoal (1 subgoal):\n 1. \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "using b"], ["proof (prove)\nusing this:\n  subsumes b c\n  b \\<in> fin\n\ngoal (1 subgoal):\n 1. \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c", "by auto"], ["proof (state)\nthis:\n  \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>d. d \\<in> set_of tod \\<union> fin \\<and> subsumes d c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b A)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "hence id: \"mk_rtrancl_main todo fin = mk_rtrancl_main (un (r A) tod) (insert A fin)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b A)\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin = mk_rtrancl_main (un (r A) tod) (insert A fin)", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b A)\n\ngoal (1 subgoal):\n 1. (case (A, tod) of\n     (a, tod) \\<Rightarrow>\n       if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n       else mk_rtrancl_main (un (r a) tod) (insert a fin)) =\n    mk_rtrancl_main (un (r A) tod) (insert A fin)", "by simp"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin = mk_rtrancl_main (un (r A) tod) (insert A fin)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b A) \\<Longrightarrow>\n    \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> mk_rtrancl_main (un (r A) tod) (insert A fin) \\<and>\n       subsumes b c", "proof (rule IH2[OF False])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> init \\<Longrightarrow>\n       \\<exists>b.\n          b \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n          subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of (un (r A) tod) \\<union>\n                                    insert A fin \\<and>\n                            subsumes c b", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> init \\<Longrightarrow>\n       \\<exists>b.\n          b \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n          subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of (un (r A) tod) \\<union>\n                                    insert A fin \\<and>\n                            subsumes c b", "assume a: \"a \\<in> init\""], ["proof (state)\nthis:\n  a \\<in> init\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> init \\<Longrightarrow>\n       \\<exists>b.\n          b \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n          subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of (un (r A) tod) \\<union>\n                                    insert A fin \\<and>\n                            subsumes c b", "from init[OF a]"], ["proof (chain)\npicking this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a", "show \"\\<exists> b. b \\<in> set_of (un (r A) (tod)) \\<union> insert A fin \\<and> subsumes b a\""], ["proof (prove)\nusing this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes b a", "using sel"], ["proof (prove)\nusing this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a\n  set_of todo = insert A (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes b a", "unfolding un"], ["proof (prove)\nusing this:\n  \\<exists>b. b \\<in> set_of todo \\<union> fin \\<and> subsumes b a\n  set_of todo = insert A (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> set_of (r A) \\<union> set_of tod \\<union> insert A fin \\<and>\n       subsumes b a", "by auto"], ["proof (state)\nthis:\n  \\<exists>b.\n     b \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of (un (r A) tod) \\<union>\n                                    insert A fin \\<and>\n                            subsumes c b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of (un (r A) tod) \\<union>\n                                    insert A fin \\<and>\n                            subsumes c b", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of (un (r A) tod) \\<union>\n                                    insert A fin \\<and>\n                            subsumes c b", "assume a: \"a \\<in> insert A fin\" and b: \"b \\<in> set_of (r a)\""], ["proof (state)\nthis:\n  a \\<in> insert A fin\n  b \\<in> set_of (r a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> insert A fin; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of (un (r A) tod) \\<union>\n                                    insert A fin \\<and>\n                            subsumes c b", "show \"\\<exists> c. c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and> subsumes c b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "proof (cases \"a \\<in> fin\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b\n 2. a \\<notin> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "case True"], ["proof (state)\nthis:\n  a \\<in> fin\n\ngoal (2 subgoals):\n 1. a \\<in> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b\n 2. a \\<notin> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "from finr[OF True b]"], ["proof (chain)\npicking this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c b", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c b\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "using sel"], ["proof (prove)\nusing this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c b\n  set_of todo = insert A (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "unfolding un"], ["proof (prove)\nusing this:\n  \\<exists>c. c \\<in> set_of todo \\<union> fin \\<and> subsumes c b\n  set_of todo = insert A (set_of tod) \\<and> size tod < size todo\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       c \\<in> set_of (r A) \\<union> set_of tod \\<union> insert A fin \\<and>\n       subsumes c b", "by auto"], ["proof (state)\nthis:\n  \\<exists>c.\n     c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and> subsumes c b\n\ngoal (1 subgoal):\n 1. a \\<notin> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "case False"], ["proof (state)\nthis:\n  a \\<notin> fin\n\ngoal (1 subgoal):\n 1. a \\<notin> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "with a"], ["proof (chain)\npicking this:\n  a \\<in> insert A fin\n  a \\<notin> fin", "have a: \"A = a\""], ["proof (prove)\nusing this:\n  a \\<in> insert A fin\n  a \\<notin> fin\n\ngoal (1 subgoal):\n 1. A = a", "by simp"], ["proof (state)\nthis:\n  A = a\n\ngoal (1 subgoal):\n 1. a \\<notin> fin \\<Longrightarrow>\n    \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and>\n       subsumes c b", "unfolding a un"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       c \\<in> set_of (r a) \\<union> set_of tod \\<union> insert a fin \\<and>\n       subsumes c b", "using b subsumes_refl[of b]"], ["proof (prove)\nusing this:\n  b \\<in> set_of (r a)\n  subsumes b b\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       c \\<in> set_of (r a) \\<union> set_of tod \\<union> insert a fin \\<and>\n       subsumes c b", "by blast"], ["proof (state)\nthis:\n  \\<exists>c.\n     c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and> subsumes c b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c.\n     c \\<in> set_of (un (r A) tod) \\<union> insert A fin \\<and> subsumes c b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> mk_rtrancl_main todo fin \\<and> subsumes b c\n\ngoal:\nNo subgoals!", "qed"], ["", "definition mk_rtrancl where \"mk_rtrancl init \\<equiv> mk_rtrancl_main init {}\""], ["", "lemma mk_rtrancl_sound: \"mk_rtrancl init \\<subseteq> R^* `` set_of init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl init \\<subseteq> R\\<^sup>* `` set_of init", "unfolding mk_rtrancl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl_main init {} \\<subseteq> R\\<^sup>* `` set_of init", "by (rule mk_rtrancl_main_sound, auto)"], ["", "lemma mk_rtrancl_complete: assumes a: \"a \\<in> R^* `` set_of init\"\n  shows \"\\<exists> b. b \\<in> mk_rtrancl init \\<and> subsumes b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl init \\<and> subsumes b a", "unfolding mk_rtrancl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> mk_rtrancl_main init {} \\<and> subsumes b a", "proof (rule mk_rtrancl_main_complete[OF _ _ a])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> set_of init \\<Longrightarrow>\n       \\<exists>b. b \\<in> set_of init \\<union> {} \\<and> subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> {}; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of init \\<union> {} \\<and>\n                            subsumes c b", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> set_of init \\<Longrightarrow>\n       \\<exists>b. b \\<in> set_of init \\<union> {} \\<and> subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> {}; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of init \\<union> {} \\<and>\n                            subsumes c b", "assume a: \"a \\<in> set_of init\""], ["proof (state)\nthis:\n  a \\<in> set_of init\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> set_of init \\<Longrightarrow>\n       \\<exists>b. b \\<in> set_of init \\<union> {} \\<and> subsumes b a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> {}; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of init \\<union> {} \\<and>\n                            subsumes c b", "thus \"\\<exists> b. b \\<in> set_of init \\<union> {} \\<and> subsumes b a\""], ["proof (prove)\nusing this:\n  a \\<in> set_of init\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of init \\<union> {} \\<and> subsumes b a", "using subsumes_refl[of a]"], ["proof (prove)\nusing this:\n  a \\<in> set_of init\n  subsumes a a\n\ngoal (1 subgoal):\n 1. \\<exists>b. b \\<in> set_of init \\<union> {} \\<and> subsumes b a", "by blast"], ["proof (state)\nthis:\n  \\<exists>b. b \\<in> set_of init \\<union> {} \\<and> subsumes b a\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> {}; b \\<in> set_of (r a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> set_of init \\<union> {} \\<and>\n                            subsumes c b", "qed auto"], ["", "lemma mk_rtrancl_no_subsumption: assumes \"subsumes = (=)\"\n  shows \"mk_rtrancl init = R^* `` set_of init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_rtrancl init = R\\<^sup>* `` set_of init", "using mk_rtrancl_sound[of init] mk_rtrancl_complete[of _ init] assms"], ["proof (prove)\nusing this:\n  mk_rtrancl init \\<subseteq> R\\<^sup>* `` set_of init\n  ?a \\<in> R\\<^sup>* `` set_of init \\<Longrightarrow>\n  \\<exists>b. b \\<in> mk_rtrancl init \\<and> subsumes b ?a\n  subsumes = (=)\n\ngoal (1 subgoal):\n 1. mk_rtrancl init = R\\<^sup>* `` set_of init", "by auto"], ["", "end"], ["", "subsection \\<open>Instantiation using list operations\\<close>"], ["", "text \\<open>It follows an implementation based on lists. \n Here, the working list algorithm is implemented outside the locale so that\n it can be used for code generation. In general, it is not terminating, \n therefore we use partial\\_function instead of function.\\<close>"], ["", "partial_function(tailrec) mk_rtrancl_list_main where \n [code]:  \"mk_rtrancl_list_main subsumes r todo fin = (case todo of [] \\<Rightarrow> fin\n     | Cons a tod \\<Rightarrow> \n             (if (\\<exists> b \\<in> set fin. subsumes b a) then mk_rtrancl_list_main subsumes r tod fin\n                 else mk_rtrancl_list_main subsumes r (r a @ tod) (a # fin)))\""], ["", "definition mk_rtrancl_list where \n  \"mk_rtrancl_list subsumes r init \\<equiv> mk_rtrancl_list_main subsumes r init []\""], ["", "locale subsumption_list = subsumption r subsumes set\n  for r :: \"'a \\<Rightarrow> 'a list\" and subsumes :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\""], ["", "locale relation_subsumption_list = subsumption_list r subsumes for r subsumes +\n  assumes rtrancl_fin: \"\\<And> a. finite {b. (a,b) \\<in> { (a,b) . b \\<in> set (r a)}^*}\""], ["", "abbreviation(input) sel_list where \"sel_list x \\<equiv> case x of Cons h t \\<Rightarrow> (h,t)\""], ["", "sublocale subsumption_list \\<subseteq> subsumption_impl r subsumes set sel_list append length"], ["proof (prove)\ngoal (1 subgoal):\n 1. subsumption_impl r subsumes set\n     (\\<lambda>x. case x of h # t \\<Rightarrow> (h, t)) (@) length", "proof(unfold_locales, rule finite_set)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b a c.\n       \\<lbrakk>set b \\<noteq> {};\n        (case b of h # t \\<Rightarrow> (h, t)) = (a, c)\\<rbrakk>\n       \\<Longrightarrow> set b = insert a (set c) \\<and> length c < length b\n 2. \\<And>a b. set (a @ b) = set a \\<union> set b", "fix b a c"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b a c.\n       \\<lbrakk>set b \\<noteq> {};\n        (case b of h # t \\<Rightarrow> (h, t)) = (a, c)\\<rbrakk>\n       \\<Longrightarrow> set b = insert a (set c) \\<and> length c < length b\n 2. \\<And>a b. set (a @ b) = set a \\<union> set b", "assume \"set b \\<noteq> {}\" and \"sel_list b = (a,c)\""], ["proof (state)\nthis:\n  set b \\<noteq> {}\n  (case b of h # t \\<Rightarrow> (h, t)) = (a, c)\n\ngoal (2 subgoals):\n 1. \\<And>b a c.\n       \\<lbrakk>set b \\<noteq> {};\n        (case b of h # t \\<Rightarrow> (h, t)) = (a, c)\\<rbrakk>\n       \\<Longrightarrow> set b = insert a (set c) \\<and> length c < length b\n 2. \\<And>a b. set (a @ b) = set a \\<union> set b", "thus \"set b = insert a (set c) \\<and> length c < length b\""], ["proof (prove)\nusing this:\n  set b \\<noteq> {}\n  (case b of h # t \\<Rightarrow> (h, t)) = (a, c)\n\ngoal (1 subgoal):\n 1. set b = insert a (set c) \\<and> length c < length b", "by (cases b, auto)"], ["proof (state)\nthis:\n  set b = insert a (set c) \\<and> length c < length b\n\ngoal (1 subgoal):\n 1. \\<And>a b. set (a @ b) = set a \\<union> set b", "qed auto"], ["", "sublocale relation_subsumption_list \\<subseteq> relation_subsumption_impl r subsumes set sel_list append length"], ["proof (prove)\ngoal (1 subgoal):\n 1. relation_subsumption_impl r subsumes set\n     (\\<lambda>x. case x of h # t \\<Rightarrow> (h, t)) (@) length", "by (unfold_locales, rule rtrancl_fin)"], ["", "context relation_subsumption_list\nbegin"], ["", "text \\<open>The main equivalence proof between the generic work list algorithm\nand the one operating on lists\\<close>"], ["", "lemma mk_rtrancl_list_main: \"fin = set finl \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r todo finl) = mk_rtrancl_main todo fin\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin = set finl \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "proof (induct todo fin arbitrary: finl rule: mk_rtrancl_main.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>todo fin finl.\n       \\<lbrakk>\\<And>x xa y finl.\n                   \\<lbrakk>set todo \\<noteq> {};\n                    x = (case todo of x # xa \\<Rightarrow> (x, xa));\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    fin = set finl\\<rbrakk>\n                   \\<Longrightarrow> set\n(mk_rtrancl_list_main subsumes r y finl) =\n                                     mk_rtrancl_main y fin;\n        \\<And>x xa y finl.\n           \\<lbrakk>set todo \\<noteq> {};\n            x = (case todo of x # xa \\<Rightarrow> (x, xa)); (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            insert xa fin = set finl\\<rbrakk>\n           \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r (r xa @ y)\n                                   finl) =\n                             mk_rtrancl_main (r xa @ y) (insert xa fin);\n        fin = set finl\\<rbrakk>\n       \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r todo finl) =\n                         mk_rtrancl_main todo fin", "case (1 todo fin finl)"], ["proof (state)\nthis:\n  \\<lbrakk>set todo \\<noteq> {};\n   ?x = (case todo of h # t \\<Rightarrow> (h, t)); (?xa, ?y) = ?x;\n   \\<exists>b\\<in>fin. subsumes b ?xa; fin = set ?finl\\<rbrakk>\n  \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r ?y ?finl) =\n                    mk_rtrancl_main ?y fin\n  \\<lbrakk>set todo \\<noteq> {};\n   ?x = (case todo of h # t \\<Rightarrow> (h, t)); (?xa, ?y) = ?x;\n   \\<not> (\\<exists>b\\<in>fin. subsumes b ?xa);\n   insert ?xa fin = set ?finl\\<rbrakk>\n  \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r (r ?xa @ ?y)\n                          ?finl) =\n                    mk_rtrancl_main (r ?xa @ ?y) (insert ?xa fin)\n  fin = set finl\n\ngoal (1 subgoal):\n 1. \\<And>todo fin finl.\n       \\<lbrakk>\\<And>x xa y finl.\n                   \\<lbrakk>set todo \\<noteq> {};\n                    x = (case todo of x # xa \\<Rightarrow> (x, xa));\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    fin = set finl\\<rbrakk>\n                   \\<Longrightarrow> set\n(mk_rtrancl_list_main subsumes r y finl) =\n                                     mk_rtrancl_main y fin;\n        \\<And>x xa y finl.\n           \\<lbrakk>set todo \\<noteq> {};\n            x = (case todo of x # xa \\<Rightarrow> (x, xa)); (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            insert xa fin = set finl\\<rbrakk>\n           \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r (r xa @ y)\n                                   finl) =\n                             mk_rtrancl_main (r xa @ y) (insert xa fin);\n        fin = set finl\\<rbrakk>\n       \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r todo finl) =\n                         mk_rtrancl_main todo fin", "note simp = mk_rtrancl_list_main.simps[of _ _ todo finl] mk_rtrancl_main.simps[of todo fin]"], ["proof (state)\nthis:\n  mk_rtrancl_list_main ?subsumes ?r todo finl =\n  (case todo of [] \\<Rightarrow> finl\n   | a # tod \\<Rightarrow>\n       if \\<exists>b\\<in>set finl. ?subsumes b a\n       then mk_rtrancl_list_main ?subsumes ?r tod finl\n       else mk_rtrancl_list_main ?subsumes ?r (?r a @ tod) (a # finl))\n  mk_rtrancl_main todo fin =\n  (if set todo = {} then fin\n   else let (a, tod) = case todo of h # t \\<Rightarrow> (h, t)\n        in if \\<exists>b\\<in>fin. subsumes b a then mk_rtrancl_main tod fin\n           else mk_rtrancl_main (r a @ tod) (insert a fin))\n\ngoal (1 subgoal):\n 1. \\<And>todo fin finl.\n       \\<lbrakk>\\<And>x xa y finl.\n                   \\<lbrakk>set todo \\<noteq> {};\n                    x = (case todo of x # xa \\<Rightarrow> (x, xa));\n                    (xa, y) = x; \\<exists>b\\<in>fin. subsumes b xa;\n                    fin = set finl\\<rbrakk>\n                   \\<Longrightarrow> set\n(mk_rtrancl_list_main subsumes r y finl) =\n                                     mk_rtrancl_main y fin;\n        \\<And>x xa y finl.\n           \\<lbrakk>set todo \\<noteq> {};\n            x = (case todo of x # xa \\<Rightarrow> (x, xa)); (xa, y) = x;\n            \\<not> (\\<exists>b\\<in>fin. subsumes b xa);\n            insert xa fin = set finl\\<rbrakk>\n           \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r (r xa @ y)\n                                   finl) =\n                             mk_rtrancl_main (r xa @ y) (insert xa fin);\n        fin = set finl\\<rbrakk>\n       \\<Longrightarrow> set (mk_rtrancl_list_main subsumes r todo finl) =\n                         mk_rtrancl_main todo fin", "show ?case (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "proof (cases todo)"], ["proof (state)\ngoal (2 subgoals):\n 1. todo = [] \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin\n 2. \\<And>a list.\n       todo = a # list \\<Longrightarrow>\n       set (mk_rtrancl_list_main subsumes r todo finl) =\n       mk_rtrancl_main todo fin", "case Nil"], ["proof (state)\nthis:\n  todo = []\n\ngoal (2 subgoals):\n 1. todo = [] \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin\n 2. \\<And>a list.\n       todo = a # list \\<Longrightarrow>\n       set (mk_rtrancl_list_main subsumes r todo finl) =\n       mk_rtrancl_main todo fin", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "unfolding simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (case todo of [] \\<Rightarrow> finl\n         | a # tod \\<Rightarrow>\n             if \\<exists>b\\<in>set finl. subsumes b a\n             then mk_rtrancl_list_main subsumes r tod finl\n             else mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl)) =\n    (if set todo = {} then fin\n     else let (a, tod) = case todo of x # xa \\<Rightarrow> (x, xa)\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (r a @ tod) (insert a fin))", "unfolding Nil 1(3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (case [] of [] \\<Rightarrow> finl\n         | a # tod \\<Rightarrow>\n             if \\<exists>b\\<in>set finl. subsumes b a\n             then mk_rtrancl_list_main subsumes r tod finl\n             else mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl)) =\n    (if set [] = {} then set finl\n     else let (a, tod) = case [] of x # xa \\<Rightarrow> (x, xa)\n          in if \\<exists>b\\<in>set finl. subsumes b a\n             then mk_rtrancl_main tod (set finl)\n             else mk_rtrancl_main (r a @ tod) (insert a (set finl)))", "by simp"], ["proof (state)\nthis:\n  set (mk_rtrancl_list_main subsumes r todo finl) = mk_rtrancl_main todo fin\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       todo = a # list \\<Longrightarrow>\n       set (mk_rtrancl_list_main subsumes r todo finl) =\n       mk_rtrancl_main todo fin", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       todo = a # list \\<Longrightarrow>\n       set (mk_rtrancl_list_main subsumes r todo finl) =\n       mk_rtrancl_main todo fin", "case (Cons a tod)"], ["proof (state)\nthis:\n  todo = a # tod\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       todo = a # list \\<Longrightarrow>\n       set (mk_rtrancl_list_main subsumes r todo finl) =\n       mk_rtrancl_main todo fin", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "proof (cases \"\\<exists> b \\<in> fin. subsumes b a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b a \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "case True"], ["proof (state)\nthis:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b a \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "from True"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>fin. subsumes b a", "have l: \"?l = set (mk_rtrancl_list_main subsumes r tod finl)\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r todo finl) =\n    set (mk_rtrancl_list_main subsumes r tod finl)", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (1 subgoal):\n 1. set (case todo of [] \\<Rightarrow> finl\n         | a # tod \\<Rightarrow>\n             if \\<exists>b\\<in>set finl. subsumes b a\n             then mk_rtrancl_list_main subsumes r tod finl\n             else mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl)) =\n    set (mk_rtrancl_list_main subsumes r tod finl)", "unfolding Cons 1(3)"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>set finl. subsumes b a\n\ngoal (1 subgoal):\n 1. set (case a # tod of [] \\<Rightarrow> finl\n         | a # tod \\<Rightarrow>\n             if \\<exists>b\\<in>set finl. subsumes b a\n             then mk_rtrancl_list_main subsumes r tod finl\n             else mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl)) =\n    set (mk_rtrancl_list_main subsumes r tod finl)", "by simp"], ["proof (state)\nthis:\n  set (mk_rtrancl_list_main subsumes r todo finl) =\n  set (mk_rtrancl_list_main subsumes r tod finl)\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b a \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "from True"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>fin. subsumes b a", "have r: \"?r = mk_rtrancl_main tod fin\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin = mk_rtrancl_main tod fin", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (1 subgoal):\n 1. (if set todo = {} then fin\n     else let (a, tod) = case todo of x # xa \\<Rightarrow> (x, xa)\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (r a @ tod) (insert a fin)) =\n    mk_rtrancl_main tod fin", "unfolding Cons"], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>fin. subsumes b a\n\ngoal (1 subgoal):\n 1. (if set (a # tod) = {} then fin\n     else let (a, tod) = case a # tod of x # xa \\<Rightarrow> (x, xa)\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (r a @ tod) (insert a fin)) =\n    mk_rtrancl_main tod fin", "by auto"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin = mk_rtrancl_main tod fin\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>fin. subsumes b a \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin\n 2. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "unfolding l r"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r tod finl) = mk_rtrancl_main tod fin", "by (rule 1(1)[OF _ refl _ True], insert 1(3) Cons, auto)"], ["proof (state)\nthis:\n  set (mk_rtrancl_list_main subsumes r todo finl) = mk_rtrancl_main todo fin\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)", "have l: \"?l = set (mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl))\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r todo finl) =\n    set (mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl))", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. set (case todo of [] \\<Rightarrow> finl\n         | a # tod \\<Rightarrow>\n             if \\<exists>b\\<in>set finl. subsumes b a\n             then mk_rtrancl_list_main subsumes r tod finl\n             else mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl)) =\n    set (mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl))", "unfolding Cons 1(3)"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>set finl. subsumes b a)\n\ngoal (1 subgoal):\n 1. set (case a # tod of [] \\<Rightarrow> finl\n         | a # tod \\<Rightarrow>\n             if \\<exists>b\\<in>set finl. subsumes b a\n             then mk_rtrancl_list_main subsumes r tod finl\n             else mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl)) =\n    set (mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl))", "by simp"], ["proof (state)\nthis:\n  set (mk_rtrancl_list_main subsumes r todo finl) =\n  set (mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)", "have r: \"?r = mk_rtrancl_main (r a @ tod) (insert a fin)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. mk_rtrancl_main todo fin = mk_rtrancl_main (r a @ tod) (insert a fin)", "unfolding simp"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. (if set todo = {} then fin\n     else let (a, tod) = case todo of x # xa \\<Rightarrow> (x, xa)\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (r a @ tod) (insert a fin)) =\n    mk_rtrancl_main (r a @ tod) (insert a fin)", "unfolding Cons"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>fin. subsumes b a)\n\ngoal (1 subgoal):\n 1. (if set (a # tod) = {} then fin\n     else let (a, tod) = case a # tod of x # xa \\<Rightarrow> (x, xa)\n          in if \\<exists>b\\<in>fin. subsumes b a\n             then mk_rtrancl_main tod fin\n             else mk_rtrancl_main (r a @ tod) (insert a fin)) =\n    mk_rtrancl_main (r a @ tod) (insert a fin)", "by auto"], ["proof (state)\nthis:\n  mk_rtrancl_main todo fin = mk_rtrancl_main (r a @ tod) (insert a fin)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>fin. subsumes b a) \\<Longrightarrow>\n    set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r todo finl) =\n    mk_rtrancl_main todo fin", "unfolding l r"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r (r a @ tod) (a # finl)) =\n    mk_rtrancl_main (r a @ tod) (insert a fin)", "by (rule 1(2)[OF _ refl _ False], insert 1(3) Cons, auto)"], ["proof (state)\nthis:\n  set (mk_rtrancl_list_main subsumes r todo finl) = mk_rtrancl_main todo fin\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (mk_rtrancl_list_main subsumes r todo finl) = mk_rtrancl_main todo fin\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (mk_rtrancl_list_main subsumes r todo finl) = mk_rtrancl_main todo fin\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mk_rtrancl_list: \"set (mk_rtrancl_list subsumes r init) = mk_rtrancl init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list subsumes r init) = mk_rtrancl init", "unfolding mk_rtrancl_list_def mk_rtrancl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (mk_rtrancl_list_main subsumes r init []) = mk_rtrancl_main init {}", "by (rule mk_rtrancl_list_main, simp)"], ["", "end"], ["", "end"]]}