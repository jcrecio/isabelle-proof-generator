{"file_name": "/home/qj213/afp-2021-10-22/thys/CryptoBasedCompositionalProperties/ListExtras.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CryptoBasedCompositionalProperties", "problem_names": ["lemma mem_memS_eq:  \"x mem l \\<equiv> memS x l\"", "lemma mem_set_1:\nassumes \"a mem l\"\nshows \"a \\<in> set l\"", "lemma mem_set_2:\nassumes \"a \\<in> set l\"\nshows \"a mem l\"", "lemma set_inter_mem: \nassumes \"x mem l1\"\n       and \"x mem l2\"\nshows \"set l1 \\<inter> set l2 \\<noteq> {}\"", "lemma mem_notdisjoint: \nassumes \"x mem l1\"\n       and \"x mem l2\"\nshows \"\\<not> disjoint l1 l2\"", "lemma mem_notdisjoint2:\nassumes h1:\"disjoint (schedule A) (schedule B)\"\n       and h2:\"x mem schedule A\"\nshows \"\\<not> x mem schedule B\"", "lemma Add_Less: \nassumes \"0 < b\"\nshows    \"(Suc a - b < Suc a) = True\"", "lemma list_length_hint1: \nassumes \"l \\<noteq> []\"\nshows    \"0 < length l\"", "lemma list_length_hint1a: \nassumes \"l \\<noteq> []\"\nshows    \"0 < length l\"", "lemma list_length_hint2: \nassumes \"length x  = Suc 0\"\nshows    \"[hd x] = x\"", "lemma list_length_hint2a: \nassumes \"length l = Suc 0\"\nshows    \"tl l = []\"", "lemma list_length_hint3: \nassumes \"length l = Suc 0\"\nshows    \"l \\<noteq> []\"", "lemma list_length_hint4: \nassumes \"length x \\<le> Suc 0\"\n       and \"x \\<noteq> []\"\nshows \"length x = Suc 0\"", "lemma length_nonempty: \nassumes \"x \\<noteq> []\" \nshows    \"Suc 0 \\<le> length x\"", "lemma last_nth_length: \nassumes \"x \\<noteq> []\"\nshows    \"x ! ((length x) - Suc 0) = last x\"", "lemma list_nth_append0:\nassumes \"i < length x\"\nshows    \"x ! i = (x @ z) ! i\"", "lemma list_nth_append1:\nassumes \"i < length x\"\nshows    \"(b # x) ! i = (b # x @ y) ! i\"", "lemma list_nth_append2:\nassumes \"i < Suc (length x)\"\nshows    \"(b # x) ! i = (b # x @ a # y) ! i\"", "lemma list_nth_append3:\nassumes h1:\"\\<not> i < Suc (length x)\"\n       and \"i - Suc (length x) < Suc (length y)\"\nshows \"(a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i\"", "lemma list_nth_append4:\nassumes \"i < Suc (length x + length y)\"\n       and \"\\<not> i - Suc (length x) < Suc (length y)\" \nshows \"False\"", "lemma list_nth_append5:\nassumes \"i - length x < Suc (length y)\" \n       and \"\\<not> i - Suc (length x) < Suc (length y)\"\nshows \"\\<not>  i < Suc (length x + length y)\"", "lemma list_nth_append6:\nassumes \"\\<not> i - length x < Suc (length y)\"\n       and \"\\<not> i - Suc (length x) < Suc (length y)\"\nshows \"\\<not> i < Suc (length x + length y)\"", "lemma list_nth_append6a:\nassumes \"i < Suc (length x + length y)\"\n       and \"\\<not> i - length x < Suc (length y)\"\nshows \"False\"", "lemma list_nth_append7:\nassumes \"i - length x < Suc (length y)\"\n       and \"i - Suc (length x) < Suc (length y)\"\nshows    \"i < Suc (Suc (length x + length y))\"", "lemma list_nth_append8:\nassumes \"\\<not> i < Suc (length x + length y)\"\n       and \"i < Suc (Suc (length x + length y))\"\nshows     \"i = Suc (length x + length y)\"", "lemma list_nth_append9:\nassumes \"i - Suc (length x) < Suc (length y)\"\nshows    \"i < Suc (Suc (length x + length y))\"", "lemma list_nth_append10:\nassumes \"\\<not> i < Suc (length x)\"\n       and \"\\<not> i - Suc (length x) < Suc (length y)\"\nshows    \"\\<not> i < Suc (Suc (length x + length y))\""], "translations": [["", "lemma mem_memS_eq:  \"x mem l \\<equiv> memS x l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mem l \\<equiv> memS x l", "proof (induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. x mem [] = memS x []\n 2. \\<And>a l.\n       x mem l = memS x l \\<Longrightarrow> x mem a # l = memS x (a # l)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. x mem [] = memS x []\n 2. \\<And>a l.\n       x mem l = memS x l \\<Longrightarrow> x mem a # l = memS x (a # l)", "from this"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x mem [] = memS x []", "by (simp add: memS_def)"], ["proof (state)\nthis:\n  x mem [] = memS x []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       x mem l = memS x l \\<Longrightarrow> x mem a # l = memS x (a # l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       x mem l = memS x l \\<Longrightarrow> x mem a # l = memS x (a # l)", "fix a la"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       x mem l = memS x l \\<Longrightarrow> x mem a # l = memS x (a # l)", "case (Cons a la)"], ["proof (state)\nthis:\n  x mem la = memS x la\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       x mem l = memS x l \\<Longrightarrow> x mem a # l = memS x (a # l)", "from Cons"], ["proof (chain)\npicking this:\n  x mem la = memS x la", "show ?case"], ["proof (prove)\nusing this:\n  x mem la = memS x la\n\ngoal (1 subgoal):\n 1. x mem a # la = memS x (a # la)", "by (simp add: memS_def)"], ["proof (state)\nthis:\n  x mem a # la = memS x (a # la)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mem_set_1:\nassumes \"a mem l\"\nshows \"a \\<in> set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set l", "using assms"], ["proof (prove)\nusing this:\n  a mem l\n\ngoal (1 subgoal):\n 1. a \\<in> set l", "by (metis memS_def mem_memS_eq)"], ["", "lemma mem_set_2:\nassumes \"a \\<in> set l\"\nshows \"a mem l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a mem l", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set l\n\ngoal (1 subgoal):\n 1. a mem l", "by (metis (full_types) memS_def mem_memS_eq)"], ["", "lemma set_inter_mem: \nassumes \"x mem l1\"\n       and \"x mem l2\"\nshows \"set l1 \\<inter> set l2 \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l1 \\<inter> set l2 \\<noteq> {}", "using assms"], ["proof (prove)\nusing this:\n  x mem l1\n  x mem l2\n\ngoal (1 subgoal):\n 1. set l1 \\<inter> set l2 \\<noteq> {}", "by (metis IntI empty_iff mem_set_1)"], ["", "lemma mem_notdisjoint: \nassumes \"x mem l1\"\n       and \"x mem l2\"\nshows \"\\<not> disjoint l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> disjoint l1 l2", "using assms"], ["proof (prove)\nusing this:\n  x mem l1\n  x mem l2\n\ngoal (1 subgoal):\n 1. \\<not> disjoint l1 l2", "by (metis disjoint_def set_inter_mem)"], ["", "lemma mem_notdisjoint2:\nassumes h1:\"disjoint (schedule A) (schedule B)\"\n       and h2:\"x mem schedule A\"\nshows \"\\<not> x mem schedule B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "assume \" x mem schedule B\""], ["proof (state)\nthis:\n  x mem schedule B\n\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "from h2 and this"], ["proof (chain)\npicking this:\n  x mem schedule A\n  x mem schedule B", "have \"\\<not>  disjoint (schedule A) (schedule B)\""], ["proof (prove)\nusing this:\n  x mem schedule A\n  x mem schedule B\n\ngoal (1 subgoal):\n 1. \\<not> disjoint (schedule A) (schedule B)", "by (simp add: mem_notdisjoint)"], ["proof (state)\nthis:\n  \\<not> disjoint (schedule A) (schedule B)\n\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "from h1 and this"], ["proof (chain)\npicking this:\n  disjoint (schedule A) (schedule B)\n  \\<not> disjoint (schedule A) (schedule B)", "have \"False\""], ["proof (prove)\nusing this:\n  disjoint (schedule A) (schedule B)\n  \\<not> disjoint (schedule A) (schedule B)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "}"], ["proof (state)\nthis:\n  x mem schedule B \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "then"], ["proof (chain)\npicking this:\n  x mem schedule B \\<Longrightarrow> False", "have \"\\<not> x mem schedule B\""], ["proof (prove)\nusing this:\n  x mem schedule B \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "by blast"], ["proof (state)\nthis:\n  \\<not> x mem schedule B\n\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "then"], ["proof (chain)\npicking this:\n  \\<not> x mem schedule B", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x mem schedule B\n\ngoal (1 subgoal):\n 1. \\<not> x mem schedule B", "by simp"], ["proof (state)\nthis:\n  \\<not> x mem schedule B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Add_Less: \nassumes \"0 < b\"\nshows    \"(Suc a - b < Suc a) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc a - b < Suc a) = True", "using assms"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. (Suc a - b < Suc a) = True", "by auto"], ["", "lemma list_length_hint1: \nassumes \"l \\<noteq> []\"\nshows    \"0 < length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length l", "using assms"], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length l", "by simp"], ["", "lemma list_length_hint1a: \nassumes \"l \\<noteq> []\"\nshows    \"0 < length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length l", "using assms"], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length l", "by simp"], ["", "lemma list_length_hint2: \nassumes \"length x  = Suc 0\"\nshows    \"[hd x] = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [hd x] = x", "using assms"], ["proof (prove)\nusing this:\n  length x = Suc 0\n\ngoal (1 subgoal):\n 1. [hd x] = x", "by (metis Zero_neq_Suc list.sel(1) length_Suc_conv neq_Nil_conv)"], ["", "lemma list_length_hint2a: \nassumes \"length l = Suc 0\"\nshows    \"tl l = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tl l = []", "using assms"], ["proof (prove)\nusing this:\n  length l = Suc 0\n\ngoal (1 subgoal):\n 1. tl l = []", "by (metis list_length_hint2 list.sel(3))"], ["", "lemma list_length_hint3: \nassumes \"length l = Suc 0\"\nshows    \"l \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  length l = Suc 0\n\ngoal (1 subgoal):\n 1. l \\<noteq> []", "by (metis Zero_neq_Suc list.size(3))"], ["", "lemma list_length_hint4: \nassumes \"length x \\<le> Suc 0\"\n       and \"x \\<noteq> []\"\nshows \"length x = Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length x = Suc 0", "using assms"], ["proof (prove)\nusing this:\n  length x \\<le> Suc 0\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. length x = Suc 0", "by (metis le_0_eq le_Suc_eq length_greater_0_conv less_numeral_extra(3))"], ["", "lemma length_nonempty: \nassumes \"x \\<noteq> []\" \nshows    \"Suc 0 \\<le> length x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> length x", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. Suc 0 \\<le> length x", "by (metis length_greater_0_conv less_eq_Suc_le)"], ["", "lemma last_nth_length: \nassumes \"x \\<noteq> []\"\nshows    \"x ! ((length x) - Suc 0) = last x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ! (length x - Suc 0) = last x", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> []\n\ngoal (1 subgoal):\n 1. x ! (length x - Suc 0) = last x", "by (metis One_nat_def last_conv_nth)"], ["", "lemma list_nth_append0:\nassumes \"i < length x\"\nshows    \"x ! i = (x @ z) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ! i = (x @ z) ! i", "using assms"], ["proof (prove)\nusing this:\n  i < length x\n\ngoal (1 subgoal):\n 1. x ! i = (x @ z) ! i", "by (metis nth_append)"], ["", "lemma list_nth_append1:\nassumes \"i < length x\"\nshows    \"(b # x) ! i = (b # x @ y) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b # x) ! i = (b # x @ y) ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (b # x) ! i = (b # x @ y) ! i", "from assms"], ["proof (chain)\npicking this:\n  i < length x", "have \"i < length (b # x)\""], ["proof (prove)\nusing this:\n  i < length x\n\ngoal (1 subgoal):\n 1. i < length (b # x)", "by auto"], ["proof (state)\nthis:\n  i < length (b # x)\n\ngoal (1 subgoal):\n 1. (b # x) ! i = (b # x @ y) ! i", "then"], ["proof (chain)\npicking this:\n  i < length (b # x)", "have sg2: \"(b # x) ! i = ((b # x) @ y) ! i\""], ["proof (prove)\nusing this:\n  i < length (b # x)\n\ngoal (1 subgoal):\n 1. (b # x) ! i = ((b # x) @ y) ! i", "by (rule list_nth_append0)"], ["proof (state)\nthis:\n  (b # x) ! i = ((b # x) @ y) ! i\n\ngoal (1 subgoal):\n 1. (b # x) ! i = (b # x @ y) ! i", "then"], ["proof (chain)\npicking this:\n  (b # x) ! i = ((b # x) @ y) ! i", "show ?thesis"], ["proof (prove)\nusing this:\n  (b # x) ! i = ((b # x) @ y) ! i\n\ngoal (1 subgoal):\n 1. (b # x) ! i = (b # x @ y) ! i", "by simp"], ["proof (state)\nthis:\n  (b # x) ! i = (b # x @ y) ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_nth_append2:\nassumes \"i < Suc (length x)\"\nshows    \"(b # x) ! i = (b # x @ a # y) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b # x) ! i = (b # x @ a # y) ! i", "using assms"], ["proof (prove)\nusing this:\n  i < Suc (length x)\n\ngoal (1 subgoal):\n 1. (b # x) ! i = (b # x @ a # y) ! i", "by (metis Cons_eq_appendI length_Suc_conv list_nth_append0)"], ["", "lemma list_nth_append3:\nassumes h1:\"\\<not> i < Suc (length x)\"\n       and \"i - Suc (length x) < Suc (length y)\"\nshows \"(a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "assume \"i=0\""], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "with h1"], ["proof (chain)\npicking this:\n  \\<not> i < Suc (length x)\n  i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i < Suc (length x)\n  i = 0\n\ngoal (1 subgoal):\n 1. (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "fix ii"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "assume \"i = Suc ii\""], ["proof (state)\nthis:\n  i = Suc ii\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "with h1"], ["proof (chain)\npicking this:\n  \\<not> i < Suc (length x)\n  i = Suc ii", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i < Suc (length x)\n  i = Suc ii\n\ngoal (1 subgoal):\n 1. (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (a # y) ! (i - Suc (length x)) = (b # x @ a # y) ! i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_nth_append4:\nassumes \"i < Suc (length x + length y)\"\n       and \"\\<not> i - Suc (length x) < Suc (length y)\" \nshows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  i < Suc (length x + length y)\n  \\<not> i - Suc (length x) < Suc (length y)\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["", "lemma list_nth_append5:\nassumes \"i - length x < Suc (length y)\" \n       and \"\\<not> i - Suc (length x) < Suc (length y)\"\nshows \"\\<not>  i < Suc (length x + length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i < Suc (length x + length y)", "using assms"], ["proof (prove)\nusing this:\n  i - length x < Suc (length y)\n  \\<not> i - Suc (length x) < Suc (length y)\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc (length x + length y)", "by arith"], ["", "lemma list_nth_append6:\nassumes \"\\<not> i - length x < Suc (length y)\"\n       and \"\\<not> i - Suc (length x) < Suc (length y)\"\nshows \"\\<not> i < Suc (length x + length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i < Suc (length x + length y)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> i - length x < Suc (length y)\n  \\<not> i - Suc (length x) < Suc (length y)\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc (length x + length y)", "by arith"], ["", "lemma list_nth_append6a:\nassumes \"i < Suc (length x + length y)\"\n       and \"\\<not> i - length x < Suc (length y)\"\nshows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  i < Suc (length x + length y)\n  \\<not> i - length x < Suc (length y)\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["", "lemma list_nth_append7:\nassumes \"i - length x < Suc (length y)\"\n       and \"i - Suc (length x) < Suc (length y)\"\nshows    \"i < Suc (Suc (length x + length y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < Suc (Suc (length x + length y))", "using assms"], ["proof (prove)\nusing this:\n  i - length x < Suc (length y)\n  i - Suc (length x) < Suc (length y)\n\ngoal (1 subgoal):\n 1. i < Suc (Suc (length x + length y))", "by arith"], ["", "lemma list_nth_append8:\nassumes \"\\<not> i < Suc (length x + length y)\"\n       and \"i < Suc (Suc (length x + length y))\"\nshows     \"i = Suc (length x + length y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Suc (length x + length y)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> i < Suc (length x + length y)\n  i < Suc (Suc (length x + length y))\n\ngoal (1 subgoal):\n 1. i = Suc (length x + length y)", "by arith"], ["", "lemma list_nth_append9:\nassumes \"i - Suc (length x) < Suc (length y)\"\nshows    \"i < Suc (Suc (length x + length y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < Suc (Suc (length x + length y))", "using assms"], ["proof (prove)\nusing this:\n  i - Suc (length x) < Suc (length y)\n\ngoal (1 subgoal):\n 1. i < Suc (Suc (length x + length y))", "by arith"], ["", "lemma list_nth_append10:\nassumes \"\\<not> i < Suc (length x)\"\n       and \"\\<not> i - Suc (length x) < Suc (length y)\"\nshows    \"\\<not> i < Suc (Suc (length x + length y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i < Suc (Suc (length x + length y))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> i < Suc (length x)\n  \\<not> i - Suc (length x) < Suc (length y)\n\ngoal (1 subgoal):\n 1. \\<not> i < Suc (Suc (length x + length y))", "by arith"], ["", "end"]]}