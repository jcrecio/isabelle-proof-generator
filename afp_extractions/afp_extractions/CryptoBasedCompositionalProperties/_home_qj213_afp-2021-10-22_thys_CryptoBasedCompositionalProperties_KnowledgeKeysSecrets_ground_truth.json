{"file_name": "/home/qj213/afp-2021-10-22/thys/CryptoBasedCompositionalProperties/KnowledgeKeysSecrets.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CryptoBasedCompositionalProperties", "problem_names": ["lemma eoutKnowCorrect_L1k:\nassumes \"eoutKnowCorrect C (kKS m)\"  \n       and \"eout  C (kE m)\"\nshows    \"m \\<in> (specKeys C) \\<or> (know C (kKS m))\"", "lemma eoutKnowCorrect_L1s:\nassumes \"eoutKnowCorrect C (sKS m)\" \n       and \"eout  C (sE m)\"\nshows    \"m \\<in> (specSecrets C) \\<or> (know C (sKS m))\"", "lemma eoutKnowsECorrect_L1:\nassumes \"eoutKnowsECorrect C e\" \n       and \"eout  C e\"\nshows \"(\\<exists> k. e = (kE k) \\<and> (k \\<in> specKeys C)) \\<or> \n            (\\<exists> s. e = (sE s) \\<and> (s \\<in> specSecrets C)) \\<or>\n            (knows C [e])\"", "lemma know2knows_k: \nassumes \"know A (kKS m)\"\nshows    \"knows A [kE m]\"", "lemma knows2know_k: \nassumes \"knows A [kE m]\" \nshows    \"know A (kKS m)\"", "lemma know2knowsPQ_k: \nassumes \"know P (kKS m) \\<or> know Q (kKS m)\"\nshows    \"knows P [kE m] \\<or> knows Q [kE m]\"", "lemma knows2knowPQ_k: \nassumes \"knows P [kE m] \\<or> knows Q [kE m]\"\nshows     \"know P (kKS m) \\<or> know Q (kKS m)\"", "lemma knows1k: \n \"know A (kKS m) = knows A [kE m]\"", "lemma know2knows_neg_k: \nassumes  \"\\<not> know A (kKS m)\"\nshows     \"\\<not> knows A [kE m]\"", "lemma knows2know_neg_k: \nassumes \"\\<not> knows A [kE m]\" \nshows    \"\\<not> know A (kKS m)\"", "lemma know2knows_s: \nassumes \"know A (sKS m)\"\nshows    \"knows A [sE m]\"", "lemma knows2know_s: \nassumes \"knows A [sE m]\" \nshows    \"know A (sKS m)\"", "lemma know2knowsPQ_s: \nassumes \"know P (sKS m) \\<or> know Q (sKS m)\"\nshows    \"knows P [sE m] \\<or> knows Q [sE m]\"", "lemma knows2knowPQ_s: \nassumes \"knows P [sE m] \\<or> knows Q [sE m]\"\nshows    \"know P (sKS m) \\<or> know Q (sKS m)\"", "lemma knows1s:\n  \"know A (sKS m) = knows A [sE m]\"", "lemma know2knows_neg_s: \nassumes \"\\<not> know A (sKS m)\"\nshows    \"\\<not> knows A [sE m]\"", "lemma knows2know_neg_s: \nassumes \"\\<not> knows A [sE m]\" \nshows    \"\\<not> know A (sKS m)\"", "lemma knows2: \nassumes \"e2 = e1 @ e \\<or> e2 = e @ e1\" \n       and \"knows A e2\" \nshows    \"knows A e\"", "lemma correctCompositionInLoc_exprChannel:\nassumes \"subcomponents PQ = {P, Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"ch : ins P\"\n       and \"exprChannel ch m\"\n       and \"\\<forall> x. x \\<in> ins PQ \\<longrightarrow> \\<not> exprChannel x m\"\nshows    \"ch : loc PQ\"", "lemma eout_know_nonKS_k: \nassumes \"m \\<notin> specKeys A\"\n        and \"eout A (kE m)\"\n        and \"eoutKnowCorrect A (kKS m)\"\nshows     \"know A (kKS m)\"", "lemma  eout_know_nonKS_s:\nassumes \"m \\<notin> specSecrets A\"\n        and \"eout A (sE m)\"\n        and \"eoutKnowCorrect A (sKS m)\"\nshows    \"know A (sKS m)\"", "lemma not_know_k_not_ine:\nassumes \"\\<not> know A (kKS m)\"\nshows    \"\\<not> ine A (kE m)\"", "lemma not_know_s_not_ine:\nassumes \"\\<not> know A (sKS m)\"\nshows    \"\\<not> ine A (sE m)\"", "lemma not_know_k_not_eout:\nassumes \"m \\<notin> specKeys A\"\n        and \"\\<not> know A (kKS m)\" \n        and \"eoutKnowCorrect A (kKS m)\"\nshows     \"\\<not> eout A (kE m)\"", "lemma not_know_s_not_eout:\nassumes \"m \\<notin> specSecrets A\"\n        and \"\\<not> know A (sKS m)\"\n        and \"eoutKnowCorrect A (sKS m)\"\nshows     \"\\<not> eout A (sE m)\"", "lemma adv_not_know1:\nassumes \"out P \\<subseteq> ins A\"\n        and \"\\<not> know A (kKS m)\" \nshows    \"\\<not> eout P (kE m)\"", "lemma  adv_not_know2:\nassumes \"out P \\<subseteq> ins A\"\n       and \"\\<not> know A (sKS m)\"\nshows    \"\\<not> eout P (sE m)\"", "lemma LocalSecrets_L1:\nassumes \"(kKS) key \\<in> LocalSecrets P\"  \n       and \"(kKS key) \\<notin> \\<Union>(LocalSecrets ` subcomponents P)\"\nshows    \"kKS key \\<notin> specKeysSecrets P\"", "lemma LocalSecrets_L2:\nassumes \"kKS key \\<in> LocalSecrets P\"  \n       and \"kKS key \\<in> specKeysSecrets P\"\nshows    \"kKS key \\<in> \\<Union>(LocalSecrets ` subcomponents P)\"", "lemma know_composition1:\nassumes notKSP:\"m \\<notin> specKeysSecrets P\"\n       and notKSQ:\"m \\<notin> specKeysSecrets Q\"\n       and \"know P m\"\n       and subPQ:\"subcomponents PQ = {P,Q}\" \n       and cCompI:\"correctCompositionIn PQ\"\n       and cCompKS:\"correctCompositionKS PQ\"\nshows    \"know PQ m\"", "lemma know_composition2:\nassumes \"m \\<notin> specKeysSecrets P\"\n       and \"m \\<notin> specKeysSecrets Q\"\n       and \"know Q m\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\"\nshows    \"know PQ m\"", "lemma know_composition:\nassumes \"m \\<notin> specKeysSecrets P\"\n        and \"m \\<notin> specKeysSecrets Q\"\n        and \"know P m \\<or> know Q m\"\n        and \"subcomponents PQ = {P,Q}\" \n        and \"correctCompositionIn PQ\"\n        and \"correctCompositionKS PQ\"\nshows    \"know PQ m\"", "theorem know_composition_neg_ine_k:\nassumes \"\\<not> know P (kKS key)\"\n       and \"\\<not> know Q (kKS key)\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\nshows    \"\\<not> (ine PQ (kE key))\"", "theorem know_composition_neg_ine_s:\nassumes \"\\<not> know P (sKS secret)\"\n       and \"\\<not> know Q (sKS secret)\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\nshows    \"\\<not> (ine PQ (sE secret))\"", "lemma know_composition_neg1:\nassumes notknowP:\"\\<not> know P m\"\n       and notknowQ:\"\\<not> know Q m\"\n       and subPQ:\"subcomponents PQ = {P,Q}\"\n       and cCompLoc:\"correctCompositionLoc PQ\"\n       and cCompI:\"correctCompositionIn PQ\"\nshows    \"\\<not> know PQ m\"", "lemma know_decomposition:\nassumes knowPQ:\"know PQ m\"\n       and subPQ:\"subcomponents PQ = {P,Q}\" \n       and cCompI:\"correctCompositionIn PQ\"\n       and cCompLoc:\"correctCompositionLoc PQ\"\nshows \"know P m \\<or> know Q m\"", "lemma eout_knows_nonKS_k:\n assumes \"m \\<notin> (specKeys A)\"\n         and \"eout A (kE m)\"\n         and \"eoutKnowsECorrect A (kE m)\"\n   shows \"knows A [kE m]\"", "lemma eout_knows_nonKS_s:\n assumes h1:\"m \\<notin> specSecrets A\"\n         and h2:\"eout A (sE m)\"\n         and h3:\"eoutKnowsECorrect A (sE m)\"\n   shows \"knows A [sE m]\"", "lemma not_knows_k_not_ine:\nassumes \"\\<not> knows A [kE m]\"\nshows    \"\\<not> ine A (kE m)\"", "lemma not_knows_s_not_ine:\nassumes \"\\<not> knows A [sE m]\"\nshows    \"\\<not> ine A (sE m)\"", "lemma not_knows_k_not_eout:\nassumes \"m \\<notin> specKeys A\"\n       and \"\\<not> knows A [kE m]\"\n       and \"eoutKnowsECorrect A (kE m)\"\nshows    \"\\<not> eout A (kE m)\"", "lemma not_knows_s_not_eout:\nassumes \"m \\<notin> specSecrets A\"\n       and \"\\<not> knows A [sE m]\"\n       and \"eoutKnowsECorrect A (sE m)\"\nshows    \"\\<not> eout A (sE m)\"", "lemma  adv_not_knows1:\nassumes \"out P \\<subseteq> ins A\"\n       and \"\\<not> knows A [kE m]\"\nshows    \"\\<not> eout P (kE m)\"", "lemma adv_not_knows2:\nassumes \"out P  \\<subseteq> ins A\"\n        and \"\\<not> knows A [sE m]\" \nshows    \"\\<not> eout P (sE m)\"", "lemma knows_decomposition_1_k:\nassumes \"kKS a \\<notin> specKeysSecrets P\"\n       and \"kKS a \\<notin> specKeysSecrets Q\"\n       and \"subcomponents PQ = {P, Q}\"\n       and \"knows PQ [kE a]\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionLoc PQ\"\nshows \"knows P [kE a] \\<or> knows Q [kE a]\"", "lemma knows_decomposition_1_s:\nassumes \"sKS a \\<notin> specKeysSecrets P\"\n       and \"sKS a \\<notin> specKeysSecrets Q\"\n       and \"subcomponents PQ = {P, Q}\"\n       and \"knows PQ [sE a]\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionLoc PQ\"\nshows \"knows P [sE a] \\<or> knows Q [sE a]\"", "lemma knows_decomposition_1:\nassumes \"subcomponents PQ = {P, Q}\"\n       and \"knows PQ [a]\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionLoc PQ\"\n       and \"(\\<exists> z. a = kE z) \\<or> (\\<exists> z. a = sE z)\"\n       and \"\\<forall> z. a = kE z \\<longrightarrow> \n         kKS z \\<notin> specKeysSecrets P \\<and> kKS z \\<notin> specKeysSecrets Q\"\n       and h7:\"\\<forall> z. a = sE z \\<longrightarrow> \n         sKS z \\<notin> specKeysSecrets P \\<and> sKS z \\<notin> specKeysSecrets Q\"\nshows \"knows P [a] \\<or> knows Q [a]\"", "lemma knows_composition1_k:\nassumes \"(kKS m) \\<notin> specKeysSecrets P\"\n       and \"(kKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows P [kE m]\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\" \n       and \"correctCompositionKS PQ\"\nshows \"knows PQ [kE m]\"", "lemma knows_composition1_s:\nassumes \"(sKS m) \\<notin> specKeysSecrets P\"\n       and \"(sKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows P [sE m]\"\n       and \"subcomponents PQ = {P,Q}\" \n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\"\nshows \"knows PQ [sE m]\"", "lemma knows_composition2_k:\nassumes \"(kKS m) \\<notin> specKeysSecrets P\"\n       and \"(kKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows Q [kE m]\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\" \n       and \"correctCompositionKS PQ\"\nshows \"knows PQ [kE m]\"", "lemma knows_composition2_s:\nassumes \"(sKS m) \\<notin> specKeysSecrets P\"\n       and \"(sKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows Q [sE m]\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\" \nshows \"knows PQ [sE m]\"", "lemma knows_composition_neg1_k:\nassumes \"kKS m \\<notin> specKeysSecrets P\"\n       and \"kKS m \\<notin> specKeysSecrets Q\"\n       and \"\\<not> knows P [kE m]\"\n       and \"\\<not> knows Q [kE m]\" \n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionLoc PQ\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\" \nshows \"\\<not> knows PQ [kE m]\"", "lemma knows_composition_neg1_s:\nassumes \"sKS m \\<notin> specKeysSecrets P\"\n       and \"sKS m \\<notin> specKeysSecrets Q\"\n       and \"\\<not> knows P [sE m]\"\n       and \"\\<not> knows Q [sE m]\" \n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionLoc PQ\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\" \nshows \"\\<not> knows PQ [sE m]\"", "lemma knows_concat_1:\nassumes \"knows P (a # e)\"\nshows    \"knows P [a]\"", "lemma knows_concat_2:\nassumes \"knows P (a # e)\"\nshows    \"knows P e\"", "lemma knows_concat_3:\nassumes \"knows P [a]\"\n       and \"knows P e\"\nshows \"knows P (a # e)\"", "lemma not_knows_conc_knows_elem_not_knows_tail:\nassumes \"\\<not> knows P (a # e)\"\n       and \"knows P [a]\"\nshows \"\\<not> knows P e\"", "lemma not_knows_conc_not_knows_elem_tail:\nassumes \"\\<not> knows P (a#e)\"\nshows    \"\\<not> knows P [a] \\<or> \\<not> knows P e\"", "lemma not_knows_elem_not_knows_conc:\nassumes \"\\<not> knows P [a]\"\nshows    \"\\<not> knows P (a # e)\"", "lemma not_knows_tail_not_knows_conc:\nassumes \"\\<not> knows P e\"\nshows    \"\\<not> knows P (a # e)\"", "lemma knows_composition3:\n fixes e::\"Expression list\"\n assumes \"knows P e\"\n     and subPQ:\"subcomponents PQ = {P,Q}\"\n     and cCompI:\"correctCompositionIn PQ\"\n     and cCompKS:\"correctCompositionKS PQ\"\n     and \"\\<forall> (m::Expression). ((m mem e) \\<longrightarrow> \n            ((\\<exists> z1. m = (kE z1)) \\<or> (\\<exists> z2. m = (sE z2))))\"\n     and \"notSpecKeysSecretsExpr P e\"\n     and \"notSpecKeysSecretsExpr Q e\" \n shows \"knows PQ e\"", "lemma knows_composition4:\n assumes \"knows Q e\"\n     and subPQ:\"subcomponents PQ = {P,Q}\" \n     and cCompI:\"correctCompositionIn PQ\"\n     and cCompKS:\"correctCompositionKS PQ\"\n     and \"\\<forall> m. m mem e \\<longrightarrow> ((\\<exists> z. m = kE z) \\<or> (\\<exists> z. m = sE z))\"\n     and \"notSpecKeysSecretsExpr P e\"\n     and \"notSpecKeysSecretsExpr Q e\" \n shows \"knows PQ e\"", "lemma knows_composition5:\nassumes \"knows P e \\<or> knows Q e\" \n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\"\n       and \"\\<forall> m. m mem e \\<longrightarrow> ((\\<exists> z. m = kE z) \\<or> (\\<exists> z. m = sE z))\"\n       and \"notSpecKeysSecretsExpr P e\"\n       and \"notSpecKeysSecretsExpr Q e\" \nshows \"knows PQ e\""], "translations": [["", "lemma eoutKnowCorrect_L1k:\nassumes \"eoutKnowCorrect C (kKS m)\"  \n       and \"eout  C (kE m)\"\nshows    \"m \\<in> (specKeys C) \\<or> (know C (kKS m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> specKeys C \\<or> know C (kKS m)", "using assms"], ["proof (prove)\nusing this:\n  eoutKnowCorrect C (kKS m)\n  eout C (kE m)\n\ngoal (1 subgoal):\n 1. m \\<in> specKeys C \\<or> know C (kKS m)", "by (metis eout_know_k)"], ["", "lemma eoutKnowCorrect_L1s:\nassumes \"eoutKnowCorrect C (sKS m)\" \n       and \"eout  C (sE m)\"\nshows    \"m \\<in> (specSecrets C) \\<or> (know C (sKS m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> specSecrets C \\<or> know C (sKS m)", "using assms"], ["proof (prove)\nusing this:\n  eoutKnowCorrect C (sKS m)\n  eout C (sE m)\n\ngoal (1 subgoal):\n 1. m \\<in> specSecrets C \\<or> know C (sKS m)", "by (metis eout_know_s)"], ["", "lemma eoutKnowsECorrect_L1:\nassumes \"eoutKnowsECorrect C e\" \n       and \"eout  C e\"\nshows \"(\\<exists> k. e = (kE k) \\<and> (k \\<in> specKeys C)) \\<or> \n            (\\<exists> s. e = (sE s) \\<and> (s \\<in> specSecrets C)) \\<or>\n            (knows C [e])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>k. e = kE k \\<and> k \\<in> specKeys C) \\<or>\n    (\\<exists>s. e = sE s \\<and> s \\<in> specSecrets C) \\<or> knows C [e]", "using assms"], ["proof (prove)\nusing this:\n  eoutKnowsECorrect C e\n  eout C e\n\ngoal (1 subgoal):\n 1. (\\<exists>k. e = kE k \\<and> k \\<in> specKeys C) \\<or>\n    (\\<exists>s. e = sE s \\<and> s \\<in> specSecrets C) \\<or> knows C [e]", "by (metis eoutKnowsECorrect_def)"], ["", "lemma know2knows_k: \nassumes \"know A (kKS m)\"\nshows    \"knows A [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows A [kE m]", "using assms"], ["proof (prove)\nusing this:\n  know A (kKS m)\n\ngoal (1 subgoal):\n 1. knows A [kE m]", "by (metis KS2Expression.simps(1) know1k)"], ["", "lemma knows2know_k: \nassumes \"knows A [kE m]\" \nshows    \"know A (kKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know A (kKS m)", "using assms"], ["proof (prove)\nusing this:\n  knows A [kE m]\n\ngoal (1 subgoal):\n 1. know A (kKS m)", "by (metis KS2Expression.simps(1) know1k)"], ["", "lemma know2knowsPQ_k: \nassumes \"know P (kKS m) \\<or> know Q (kKS m)\"\nshows    \"knows P [kE m] \\<or> knows Q [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P [kE m] \\<or> knows Q [kE m]", "using assms"], ["proof (prove)\nusing this:\n  know P (kKS m) \\<or> know Q (kKS m)\n\ngoal (1 subgoal):\n 1. knows P [kE m] \\<or> knows Q [kE m]", "by (metis know2knows_k)"], ["", "lemma knows2knowPQ_k: \nassumes \"knows P [kE m] \\<or> knows Q [kE m]\"\nshows     \"know P (kKS m) \\<or> know Q (kKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know P (kKS m) \\<or> know Q (kKS m)", "using assms"], ["proof (prove)\nusing this:\n  knows P [kE m] \\<or> knows Q [kE m]\n\ngoal (1 subgoal):\n 1. know P (kKS m) \\<or> know Q (kKS m)", "by (metis knows2know_k)"], ["", "lemma knows1k: \n \"know A (kKS m) = knows A [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know A (kKS m) = knows A [kE m]", "by (metis know2knows_k knows2know_k)"], ["", "lemma know2knows_neg_k: \nassumes  \"\\<not> know A (kKS m)\"\nshows     \"\\<not> knows A [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows A [kE m]", "using assms"], ["proof (prove)\nusing this:\n  \\<not> know A (kKS m)\n\ngoal (1 subgoal):\n 1. \\<not> knows A [kE m]", "by (metis knows1k)"], ["", "lemma knows2know_neg_k: \nassumes \"\\<not> knows A [kE m]\" \nshows    \"\\<not> know A (kKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> know A (kKS m)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows A [kE m]\n\ngoal (1 subgoal):\n 1. \\<not> know A (kKS m)", "by (metis know2knowsPQ_k)"], ["", "lemma know2knows_s: \nassumes \"know A (sKS m)\"\nshows    \"knows A [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows A [sE m]", "using assms"], ["proof (prove)\nusing this:\n  know A (sKS m)\n\ngoal (1 subgoal):\n 1. knows A [sE m]", "by (metis KS2Expression.simps(2) know1s)"], ["", "lemma knows2know_s: \nassumes \"knows A [sE m]\" \nshows    \"know A (sKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know A (sKS m)", "using assms"], ["proof (prove)\nusing this:\n  knows A [sE m]\n\ngoal (1 subgoal):\n 1. know A (sKS m)", "by (metis KS2Expression.simps(2) know1s)"], ["", "lemma know2knowsPQ_s: \nassumes \"know P (sKS m) \\<or> know Q (sKS m)\"\nshows    \"knows P [sE m] \\<or> knows Q [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P [sE m] \\<or> knows Q [sE m]", "using assms"], ["proof (prove)\nusing this:\n  know P (sKS m) \\<or> know Q (sKS m)\n\ngoal (1 subgoal):\n 1. knows P [sE m] \\<or> knows Q [sE m]", "by (metis know2knows_s)"], ["", "lemma knows2knowPQ_s: \nassumes \"knows P [sE m] \\<or> knows Q [sE m]\"\nshows    \"know P (sKS m) \\<or> know Q (sKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know P (sKS m) \\<or> know Q (sKS m)", "using assms"], ["proof (prove)\nusing this:\n  knows P [sE m] \\<or> knows Q [sE m]\n\ngoal (1 subgoal):\n 1. know P (sKS m) \\<or> know Q (sKS m)", "by (metis knows2know_s)"], ["", "lemma knows1s:\n  \"know A (sKS m) = knows A [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know A (sKS m) = knows A [sE m]", "by (metis know2knows_s knows2know_s)"], ["", "lemma know2knows_neg_s: \nassumes \"\\<not> know A (sKS m)\"\nshows    \"\\<not> knows A [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows A [sE m]", "using assms"], ["proof (prove)\nusing this:\n  \\<not> know A (sKS m)\n\ngoal (1 subgoal):\n 1. \\<not> knows A [sE m]", "by (metis knows2know_s)"], ["", "lemma knows2know_neg_s: \nassumes \"\\<not> knows A [sE m]\" \nshows    \"\\<not> know A (sKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> know A (sKS m)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows A [sE m]\n\ngoal (1 subgoal):\n 1. \\<not> know A (sKS m)", "by (metis  know2knows_s)"], ["", "lemma knows2: \nassumes \"e2 = e1 @ e \\<or> e2 = e @ e1\" \n       and \"knows A e2\" \nshows    \"knows A e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows A e", "using assms"], ["proof (prove)\nusing this:\n  e2 = e1 @ e \\<or> e2 = e @ e1\n  knows A e2\n\ngoal (1 subgoal):\n 1. knows A e", "by (metis knows2a knows2b)"], ["", "lemma correctCompositionInLoc_exprChannel:\nassumes \"subcomponents PQ = {P, Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"ch : ins P\"\n       and \"exprChannel ch m\"\n       and \"\\<forall> x. x \\<in> ins PQ \\<longrightarrow> \\<not> exprChannel x m\"\nshows    \"ch : loc PQ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ch \\<in> loc PQ", "using assms"], ["proof (prove)\nusing this:\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  ch \\<in> ins P\n  exprChannel ch m\n  \\<forall>x. x \\<in> ins PQ \\<longrightarrow> \\<not> exprChannel x m\n\ngoal (1 subgoal):\n 1. ch \\<in> loc PQ", "by (simp add: correctCompositionIn_def, auto)"], ["", "lemma eout_know_nonKS_k: \nassumes \"m \\<notin> specKeys A\"\n        and \"eout A (kE m)\"\n        and \"eoutKnowCorrect A (kKS m)\"\nshows     \"know A (kKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know A (kKS m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specKeys A\n  eout A (kE m)\n  eoutKnowCorrect A (kKS m)\n\ngoal (1 subgoal):\n 1. know A (kKS m)", "by (metis eoutKnowCorrect_L1k)"], ["", "lemma  eout_know_nonKS_s:\nassumes \"m \\<notin> specSecrets A\"\n        and \"eout A (sE m)\"\n        and \"eoutKnowCorrect A (sKS m)\"\nshows    \"know A (sKS m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know A (sKS m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specSecrets A\n  eout A (sE m)\n  eoutKnowCorrect A (sKS m)\n\ngoal (1 subgoal):\n 1. know A (sKS m)", "by (metis eoutKnowCorrect_L1s)"], ["", "lemma not_know_k_not_ine:\nassumes \"\\<not> know A (kKS m)\"\nshows    \"\\<not> ine A (kE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ine A (kE m)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> know A (kKS m)\n\ngoal (1 subgoal):\n 1. \\<not> ine A (kE m)", "by simp"], ["", "lemma not_know_s_not_ine:\nassumes \"\\<not> know A (sKS m)\"\nshows    \"\\<not> ine A (sE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ine A (sE m)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> know A (sKS m)\n\ngoal (1 subgoal):\n 1. \\<not> ine A (sE m)", "by simp"], ["", "lemma not_know_k_not_eout:\nassumes \"m \\<notin> specKeys A\"\n        and \"\\<not> know A (kKS m)\" \n        and \"eoutKnowCorrect A (kKS m)\"\nshows     \"\\<not> eout A (kE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout A (kE m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specKeys A\n  \\<not> know A (kKS m)\n  eoutKnowCorrect A (kKS m)\n\ngoal (1 subgoal):\n 1. \\<not> eout A (kE m)", "by (metis eout_know_k)"], ["", "lemma not_know_s_not_eout:\nassumes \"m \\<notin> specSecrets A\"\n        and \"\\<not> know A (sKS m)\"\n        and \"eoutKnowCorrect A (sKS m)\"\nshows     \"\\<not> eout A (sE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout A (sE m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specSecrets A\n  \\<not> know A (sKS m)\n  eoutKnowCorrect A (sKS m)\n\ngoal (1 subgoal):\n 1. \\<not> eout A (sE m)", "by (metis eout_know_nonKS_s)"], ["", "lemma adv_not_know1:\nassumes \"out P \\<subseteq> ins A\"\n        and \"\\<not> know A (kKS m)\" \nshows    \"\\<not> eout P (kE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout P (kE m)", "using assms"], ["proof (prove)\nusing this:\n  out P \\<subseteq> ins A\n  \\<not> know A (kKS m)\n\ngoal (1 subgoal):\n 1. \\<not> eout P (kE m)", "by (metis (full_types) eout_def ine_ins_neg1 not_know_k_not_ine rev_subsetD)"], ["", "lemma  adv_not_know2:\nassumes \"out P \\<subseteq> ins A\"\n       and \"\\<not> know A (sKS m)\"\nshows    \"\\<not> eout P (sE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout P (sE m)", "using assms"], ["proof (prove)\nusing this:\n  out P \\<subseteq> ins A\n  \\<not> know A (sKS m)\n\ngoal (1 subgoal):\n 1. \\<not> eout P (sE m)", "by (metis (full_types) eout_def ine_ins_neg1 not_know_s_not_ine rev_subsetD)"], ["", "lemma LocalSecrets_L1:\nassumes \"(kKS) key \\<in> LocalSecrets P\"  \n       and \"(kKS key) \\<notin> \\<Union>(LocalSecrets ` subcomponents P)\"\nshows    \"kKS key \\<notin> specKeysSecrets P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kKS key \\<notin> specKeysSecrets P", "using assms"], ["proof (prove)\nusing this:\n  kKS key \\<in> LocalSecrets P\n  kKS key \\<notin> \\<Union> (LocalSecrets ` subcomponents P)\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> specKeysSecrets P", "by (simp only: LocalSecretsDef, auto)"], ["", "lemma LocalSecrets_L2:\nassumes \"kKS key \\<in> LocalSecrets P\"  \n       and \"kKS key \\<in> specKeysSecrets P\"\nshows    \"kKS key \\<in> \\<Union>(LocalSecrets ` subcomponents P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kKS key \\<in> \\<Union> (LocalSecrets ` subcomponents P)", "using assms"], ["proof (prove)\nusing this:\n  kKS key \\<in> LocalSecrets P\n  kKS key \\<in> specKeysSecrets P\n\ngoal (1 subgoal):\n 1. kKS key \\<in> \\<Union> (LocalSecrets ` subcomponents P)", "by (simp only: LocalSecretsDef, auto)"], ["", "lemma know_composition1:\nassumes notKSP:\"m \\<notin> specKeysSecrets P\"\n       and notKSQ:\"m \\<notin> specKeysSecrets Q\"\n       and \"know P m\"\n       and subPQ:\"subcomponents PQ = {P,Q}\" \n       and cCompI:\"correctCompositionIn PQ\"\n       and cCompKS:\"correctCompositionKS PQ\"\nshows    \"know PQ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know PQ m", "proof (cases m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> know PQ m", "fix key"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> know PQ m", "assume a1:\"m = kKS key\""], ["proof (state)\nthis:\n  m = kKS key\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> know PQ m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. know PQ m", "proof (cases  \"ine P (kE key)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ine P (kE key) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "assume a11:\"ine P (kE key)\""], ["proof (state)\nthis:\n  ine P (kE key)\n\ngoal (2 subgoals):\n 1. ine P (kE key) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "from this"], ["proof (chain)\npicking this:\n  ine P (kE key)", "have a11ext:\"ine P (kE key) | ine Q (kE key)\""], ["proof (prove)\nusing this:\n  ine P (kE key)\n\ngoal (1 subgoal):\n 1. ine P (kE key) \\<or> ine Q (kE key)", "by simp"], ["proof (state)\nthis:\n  ine P (kE key) \\<or> ine Q (kE key)\n\ngoal (2 subgoals):\n 1. ine P (kE key) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "from subPQ and cCompKS and notKSP and notKSQ"], ["proof (chain)\npicking this:\n  subcomponents PQ = {P, Q}\n  correctCompositionKS PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q", "have \"m \\<notin> specKeysSecrets PQ\""], ["proof (prove)\nusing this:\n  subcomponents PQ = {P, Q}\n  correctCompositionKS PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n\ngoal (1 subgoal):\n 1. m \\<notin> specKeysSecrets PQ", "by (rule correctCompositionKS_neg1)"], ["proof (state)\nthis:\n  m \\<notin> specKeysSecrets PQ\n\ngoal (2 subgoals):\n 1. ine P (kE key) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "from this and a1"], ["proof (chain)\npicking this:\n  m \\<notin> specKeysSecrets PQ\n  m = kKS key", "have sg1:\"kKS key \\<notin> specKeysSecrets PQ\""], ["proof (prove)\nusing this:\n  m \\<notin> specKeysSecrets PQ\n  m = kKS key\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> specKeysSecrets PQ", "by simp"], ["proof (state)\nthis:\n  kKS key \\<notin> specKeysSecrets PQ\n\ngoal (2 subgoals):\n 1. ine P (kE key) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "from a1 and a11ext and cCompKS"], ["proof (chain)\npicking this:\n  m = kKS key\n  ine P (kE key) \\<or> ine Q (kE key)\n  correctCompositionKS PQ", "show ?thesis"], ["proof (prove)\nusing this:\n  m = kKS key\n  ine P (kE key) \\<or> ine Q (kE key)\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "proof (cases \"loc PQ = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ = {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m\n 2. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "assume a11locE:\"loc PQ = {}\""], ["proof (state)\nthis:\n  loc PQ = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ = {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m\n 2. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "from a11ext and subPQ and cCompI and a11locE"], ["proof (chain)\npicking this:\n  ine P (kE key) \\<or> ine Q (kE key)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  loc PQ = {}", "have \"ine PQ (kE key)\""], ["proof (prove)\nusing this:\n  ine P (kE key) \\<or> ine Q (kE key)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  loc PQ = {}\n\ngoal (1 subgoal):\n 1. ine PQ (kE key)", "by (rule TBtheorem4a_empty)"], ["proof (state)\nthis:\n  ine PQ (kE key)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ = {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m\n 2. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "from this and a1"], ["proof (chain)\npicking this:\n  ine PQ (kE key)\n  m = kKS key", "show ?thesis"], ["proof (prove)\nusing this:\n  ine PQ (kE key)\n  m = kKS key\n\ngoal (1 subgoal):\n 1. know PQ m", "by auto"], ["proof (state)\nthis:\n  know PQ m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "assume a11locNE:\"loc PQ \\<noteq> {}\""], ["proof (state)\nthis:\n  loc PQ \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = kKS key; ine P (kE key) \\<or> ine Q (kE key);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "from a1 and a11 and sg1 and assms"], ["proof (chain)\npicking this:\n  m = kKS key\n  ine P (kE key)\n  kKS key \\<notin> specKeysSecrets PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "show ?thesis"], ["proof (prove)\nusing this:\n  m = kKS key\n  ine P (kE key)\n  kKS key \\<notin> specKeysSecrets PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "apply (simp add: ine_def, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ch.\n       \\<lbrakk>kKS key \\<notin> specKeysSecrets P;\n        kKS key \\<notin> specKeysSecrets Q; m = kKS key; ine P (kE key);\n        kKS key \\<notin> specKeysSecrets PQ; subcomponents PQ = {P, Q};\n        correctCompositionIn PQ; correctCompositionKS PQ; ch \\<in> ins P;\n        exprChannel ch (kE key); kKS key \\<notin> LocalSecrets PQ\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            ch \\<in> ins PQ \\<and> exprChannel ch (kE key)", "by (simp add: correctCompositionKS_exprChannel_k_Pex)"], ["proof (state)\nthis:\n  know PQ m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know PQ m\n\ngoal (1 subgoal):\n 1. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "assume a12:\"\\<not> ine P (kE key)\""], ["proof (state)\nthis:\n  \\<not> ine P (kE key)\n\ngoal (1 subgoal):\n 1. \\<not> ine P (kE key) \\<Longrightarrow> know PQ m", "from this and a1 and assms"], ["proof (chain)\npicking this:\n  \\<not> ine P (kE key)\n  m = kKS key\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ine P (kE key)\n  m = kKS key\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "by (auto, simp add:  LocalSecretsComposition1)"], ["proof (state)\nthis:\n  know PQ m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know PQ m\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know PQ m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know PQ m", "fix secret"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know PQ m", "assume a2:\"m = sKS secret\""], ["proof (state)\nthis:\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know PQ m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. know PQ m", "proof (cases  \"ine P (sE secret)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ine P (sE secret) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "assume a21:\"ine P (sE secret)\""], ["proof (state)\nthis:\n  ine P (sE secret)\n\ngoal (2 subgoals):\n 1. ine P (sE secret) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "from this"], ["proof (chain)\npicking this:\n  ine P (sE secret)", "have a21ext:\"ine P (sE secret) | ine Q (sE secret)\""], ["proof (prove)\nusing this:\n  ine P (sE secret)\n\ngoal (1 subgoal):\n 1. ine P (sE secret) \\<or> ine Q (sE secret)", "by simp"], ["proof (state)\nthis:\n  ine P (sE secret) \\<or> ine Q (sE secret)\n\ngoal (2 subgoals):\n 1. ine P (sE secret) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "from subPQ and cCompKS and notKSP and notKSQ"], ["proof (chain)\npicking this:\n  subcomponents PQ = {P, Q}\n  correctCompositionKS PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q", "have \"m \\<notin> specKeysSecrets PQ\""], ["proof (prove)\nusing this:\n  subcomponents PQ = {P, Q}\n  correctCompositionKS PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n\ngoal (1 subgoal):\n 1. m \\<notin> specKeysSecrets PQ", "by (rule correctCompositionKS_neg1)"], ["proof (state)\nthis:\n  m \\<notin> specKeysSecrets PQ\n\ngoal (2 subgoals):\n 1. ine P (sE secret) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "from this and a2"], ["proof (chain)\npicking this:\n  m \\<notin> specKeysSecrets PQ\n  m = sKS secret", "have sg2:\"sKS secret \\<notin> specKeysSecrets PQ\""], ["proof (prove)\nusing this:\n  m \\<notin> specKeysSecrets PQ\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> specKeysSecrets PQ", "by simp"], ["proof (state)\nthis:\n  sKS secret \\<notin> specKeysSecrets PQ\n\ngoal (2 subgoals):\n 1. ine P (sE secret) \\<Longrightarrow> know PQ m\n 2. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "from a2 and a21ext and cCompKS"], ["proof (chain)\npicking this:\n  m = sKS secret\n  ine P (sE secret) \\<or> ine Q (sE secret)\n  correctCompositionKS PQ", "show ?thesis"], ["proof (prove)\nusing this:\n  m = sKS secret\n  ine P (sE secret) \\<or> ine Q (sE secret)\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "proof (cases \"loc PQ = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ = {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m\n 2. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "assume a21locE:\"loc PQ = {}\""], ["proof (state)\nthis:\n  loc PQ = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ = {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m\n 2. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "from a21ext and subPQ and cCompI and a21locE"], ["proof (chain)\npicking this:\n  ine P (sE secret) \\<or> ine Q (sE secret)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  loc PQ = {}", "have \"ine PQ (sE secret)\""], ["proof (prove)\nusing this:\n  ine P (sE secret) \\<or> ine Q (sE secret)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  loc PQ = {}\n\ngoal (1 subgoal):\n 1. ine PQ (sE secret)", "by (rule TBtheorem4a_empty)"], ["proof (state)\nthis:\n  ine PQ (sE secret)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ = {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m\n 2. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "from this and a2"], ["proof (chain)\npicking this:\n  ine PQ (sE secret)\n  m = sKS secret", "show ?thesis"], ["proof (prove)\nusing this:\n  ine PQ (sE secret)\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. know PQ m", "by auto"], ["proof (state)\nthis:\n  know PQ m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "assume a21locNE:\"loc PQ \\<noteq> {}\""], ["proof (state)\nthis:\n  loc PQ \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = sKS secret; ine P (sE secret) \\<or> ine Q (sE secret);\n     correctCompositionKS PQ; loc PQ \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> know PQ m", "from a2 and a21 and sg2 and assms"], ["proof (chain)\npicking this:\n  m = sKS secret\n  ine P (sE secret)\n  sKS secret \\<notin> specKeysSecrets PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "show ?thesis"], ["proof (prove)\nusing this:\n  m = sKS secret\n  ine P (sE secret)\n  sKS secret \\<notin> specKeysSecrets PQ\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "apply (simp add: ine_def, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ch.\n       \\<lbrakk>sKS secret \\<notin> specKeysSecrets P;\n        sKS secret \\<notin> specKeysSecrets Q; m = sKS secret;\n        ine P (sE secret); sKS secret \\<notin> specKeysSecrets PQ;\n        subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ; ch \\<in> ins P; exprChannel ch (sE secret);\n        sKS secret \\<notin> LocalSecrets PQ\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ch.\n                            ch \\<in> ins PQ \\<and>\n                            exprChannel ch (sE secret)", "by (simp add: correctCompositionKS_exprChannel_s_Pex)"], ["proof (state)\nthis:\n  know PQ m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know PQ m\n\ngoal (1 subgoal):\n 1. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "assume a12:\"\\<not> ine P (sE secret)\""], ["proof (state)\nthis:\n  \\<not> ine P (sE secret)\n\ngoal (1 subgoal):\n 1. \\<not> ine P (sE secret) \\<Longrightarrow> know PQ m", "from this and a2 and assms"], ["proof (chain)\npicking this:\n  \\<not> ine P (sE secret)\n  m = sKS secret\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ine P (sE secret)\n  m = sKS secret\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "by (metis LocalSecretsComposition1 know.simps(2))"], ["proof (state)\nthis:\n  know PQ m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know PQ m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma know_composition2:\nassumes \"m \\<notin> specKeysSecrets P\"\n       and \"m \\<notin> specKeysSecrets Q\"\n       and \"know Q m\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\"\nshows    \"know PQ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know PQ m", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know Q m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "by (metis insert_commute know_composition1)"], ["", "lemma know_composition:\nassumes \"m \\<notin> specKeysSecrets P\"\n        and \"m \\<notin> specKeysSecrets Q\"\n        and \"know P m \\<or> know Q m\"\n        and \"subcomponents PQ = {P,Q}\" \n        and \"correctCompositionIn PQ\"\n        and \"correctCompositionKS PQ\"\nshows    \"know PQ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know PQ m", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specKeysSecrets P\n  m \\<notin> specKeysSecrets Q\n  know P m \\<or> know Q m\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. know PQ m", "by (metis know_composition1 know_composition2)"], ["", "theorem know_composition_neg_ine_k:\nassumes \"\\<not> know P (kKS key)\"\n       and \"\\<not> know Q (kKS key)\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\nshows    \"\\<not> (ine PQ (kE key))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ine PQ (kE key)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> know P (kKS key)\n  \\<not> know Q (kKS key)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n\ngoal (1 subgoal):\n 1. \\<not> ine PQ (kE key)", "by (metis TBtheorem3a not_know_k_not_ine)"], ["", "theorem know_composition_neg_ine_s:\nassumes \"\\<not> know P (sKS secret)\"\n       and \"\\<not> know Q (sKS secret)\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\nshows    \"\\<not> (ine PQ (sE secret))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ine PQ (sE secret)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> know P (sKS secret)\n  \\<not> know Q (sKS secret)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n\ngoal (1 subgoal):\n 1. \\<not> ine PQ (sE secret)", "by (metis TBtheorem3a not_know_s_not_ine)"], ["", "lemma know_composition_neg1:\nassumes notknowP:\"\\<not> know P m\"\n       and notknowQ:\"\\<not> know Q m\"\n       and subPQ:\"subcomponents PQ = {P,Q}\"\n       and cCompLoc:\"correctCompositionLoc PQ\"\n       and cCompI:\"correctCompositionIn PQ\"\nshows    \"\\<not> know PQ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> know PQ m", "proof (cases m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "fix key"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "assume a1:\"m = kKS key\""], ["proof (state)\nthis:\n  m = kKS key\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from notknowP and a1"], ["proof (chain)\npicking this:\n  \\<not> know P m\n  m = kKS key", "have sg1:\"\\<not> know P (kKS key)\""], ["proof (prove)\nusing this:\n  \\<not> know P m\n  m = kKS key\n\ngoal (1 subgoal):\n 1. \\<not> know P (kKS key)", "by simp"], ["proof (state)\nthis:\n  \\<not> know P (kKS key)\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "then"], ["proof (chain)\npicking this:\n  \\<not> know P (kKS key)", "have sg1a:\"\\<not> ine P (kE key)\""], ["proof (prove)\nusing this:\n  \\<not> know P (kKS key)\n\ngoal (1 subgoal):\n 1. \\<not> ine P (kE key)", "by simp"], ["proof (state)\nthis:\n  \\<not> ine P (kE key)\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg1"], ["proof (chain)\npicking this:\n  \\<not> know P (kKS key)", "have sg1b:\"kKS key \\<notin> LocalSecrets P\""], ["proof (prove)\nusing this:\n  \\<not> know P (kKS key)\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets P", "by simp"], ["proof (state)\nthis:\n  kKS key \\<notin> LocalSecrets P\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from notknowQ and a1"], ["proof (chain)\npicking this:\n  \\<not> know Q m\n  m = kKS key", "have sg2:\"\\<not> know Q (kKS key)\""], ["proof (prove)\nusing this:\n  \\<not> know Q m\n  m = kKS key\n\ngoal (1 subgoal):\n 1. \\<not> know Q (kKS key)", "by simp"], ["proof (state)\nthis:\n  \\<not> know Q (kKS key)\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "then"], ["proof (chain)\npicking this:\n  \\<not> know Q (kKS key)", "have sg2a:\"\\<not> ine Q (kE key)\""], ["proof (prove)\nusing this:\n  \\<not> know Q (kKS key)\n\ngoal (1 subgoal):\n 1. \\<not> ine Q (kE key)", "by simp"], ["proof (state)\nthis:\n  \\<not> ine Q (kE key)\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg2"], ["proof (chain)\npicking this:\n  \\<not> know Q (kKS key)", "have sg2b:\"kKS key \\<notin> LocalSecrets Q\""], ["proof (prove)\nusing this:\n  \\<not> know Q (kKS key)\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets Q", "by simp"], ["proof (state)\nthis:\n  kKS key \\<notin> LocalSecrets Q\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg1 and sg2 and subPQ and cCompI"], ["proof (chain)\npicking this:\n  \\<not> know P (kKS key)\n  \\<not> know Q (kKS key)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ", "have sg3:\"\\<not> ine PQ (kE key)\""], ["proof (prove)\nusing this:\n  \\<not> know P (kKS key)\n  \\<not> know Q (kKS key)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n\ngoal (1 subgoal):\n 1. \\<not> ine PQ (kE key)", "by (rule know_composition_neg_ine_k)"], ["proof (state)\nthis:\n  \\<not> ine PQ (kE key)\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from subPQ and cCompLoc and sg1a and sg2a and sg1b and sg2b"], ["proof (chain)\npicking this:\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine P (kE key)\n  \\<not> ine Q (kE key)\n  kKS key \\<notin> LocalSecrets P\n  kKS key \\<notin> LocalSecrets Q", "have sg4:\n  \"kKS key \\<notin> LocalSecrets PQ\""], ["proof (prove)\nusing this:\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine P (kE key)\n  \\<not> ine Q (kE key)\n  kKS key \\<notin> LocalSecrets P\n  kKS key \\<notin> LocalSecrets Q\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets PQ", "by (rule LocalSecretsComposition_neg1_k)"], ["proof (state)\nthis:\n  kKS key \\<notin> LocalSecrets PQ\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> \\<not> know PQ m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg3 and sg4 and a1"], ["proof (chain)\npicking this:\n  \\<not> ine PQ (kE key)\n  kKS key \\<notin> LocalSecrets PQ\n  m = kKS key", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ine PQ (kE key)\n  kKS key \\<notin> LocalSecrets PQ\n  m = kKS key\n\ngoal (1 subgoal):\n 1. \\<not> know PQ m", "by simp"], ["proof (state)\nthis:\n  \\<not> know PQ m\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "fix secret"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "assume a2:\"m = sKS secret\""], ["proof (state)\nthis:\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from notknowP and a2"], ["proof (chain)\npicking this:\n  \\<not> know P m\n  m = sKS secret", "have sg1:\"\\<not> know P (sKS secret)\""], ["proof (prove)\nusing this:\n  \\<not> know P m\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. \\<not> know P (sKS secret)", "by simp"], ["proof (state)\nthis:\n  \\<not> know P (sKS secret)\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "then"], ["proof (chain)\npicking this:\n  \\<not> know P (sKS secret)", "have sg1a:\"\\<not> ine P (sE secret)\""], ["proof (prove)\nusing this:\n  \\<not> know P (sKS secret)\n\ngoal (1 subgoal):\n 1. \\<not> ine P (sE secret)", "by simp"], ["proof (state)\nthis:\n  \\<not> ine P (sE secret)\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg1"], ["proof (chain)\npicking this:\n  \\<not> know P (sKS secret)", "have sg1b:\"sKS secret \\<notin> LocalSecrets P\""], ["proof (prove)\nusing this:\n  \\<not> know P (sKS secret)\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets P", "by simp"], ["proof (state)\nthis:\n  sKS secret \\<notin> LocalSecrets P\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from notknowQ and a2"], ["proof (chain)\npicking this:\n  \\<not> know Q m\n  m = sKS secret", "have sg2:\"\\<not> know Q (sKS secret)\""], ["proof (prove)\nusing this:\n  \\<not> know Q m\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. \\<not> know Q (sKS secret)", "by simp"], ["proof (state)\nthis:\n  \\<not> know Q (sKS secret)\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "then"], ["proof (chain)\npicking this:\n  \\<not> know Q (sKS secret)", "have sg2a:\"\\<not> ine Q (sE secret)\""], ["proof (prove)\nusing this:\n  \\<not> know Q (sKS secret)\n\ngoal (1 subgoal):\n 1. \\<not> ine Q (sE secret)", "by simp"], ["proof (state)\nthis:\n  \\<not> ine Q (sE secret)\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg2"], ["proof (chain)\npicking this:\n  \\<not> know Q (sKS secret)", "have sg2b:\"sKS secret \\<notin> LocalSecrets Q\""], ["proof (prove)\nusing this:\n  \\<not> know Q (sKS secret)\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets Q", "by simp"], ["proof (state)\nthis:\n  sKS secret \\<notin> LocalSecrets Q\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg1 and sg2 and subPQ and cCompI"], ["proof (chain)\npicking this:\n  \\<not> know P (sKS secret)\n  \\<not> know Q (sKS secret)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ", "have sg3:\"\\<not> ine PQ (sE secret)\""], ["proof (prove)\nusing this:\n  \\<not> know P (sKS secret)\n  \\<not> know Q (sKS secret)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n\ngoal (1 subgoal):\n 1. \\<not> ine PQ (sE secret)", "by (rule know_composition_neg_ine_s)"], ["proof (state)\nthis:\n  \\<not> ine PQ (sE secret)\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from subPQ and cCompLoc and sg1a and sg2a and sg1b and sg2b"], ["proof (chain)\npicking this:\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine P (sE secret)\n  \\<not> ine Q (sE secret)\n  sKS secret \\<notin> LocalSecrets P\n  sKS secret \\<notin> LocalSecrets Q", "have sg4:\n  \"sKS secret \\<notin> LocalSecrets PQ\""], ["proof (prove)\nusing this:\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine P (sE secret)\n  \\<not> ine Q (sE secret)\n  sKS secret \\<notin> LocalSecrets P\n  sKS secret \\<notin> LocalSecrets Q\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets PQ", "by (rule LocalSecretsComposition_neg1_s)"], ["proof (state)\nthis:\n  sKS secret \\<notin> LocalSecrets PQ\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> \\<not> know PQ m", "from sg3 and sg4 and a2"], ["proof (chain)\npicking this:\n  \\<not> ine PQ (sE secret)\n  sKS secret \\<notin> LocalSecrets PQ\n  m = sKS secret", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ine PQ (sE secret)\n  sKS secret \\<notin> LocalSecrets PQ\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. \\<not> know PQ m", "by simp"], ["proof (state)\nthis:\n  \\<not> know PQ m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma know_decomposition:\nassumes knowPQ:\"know PQ m\"\n       and subPQ:\"subcomponents PQ = {P,Q}\" \n       and cCompI:\"correctCompositionIn PQ\"\n       and cCompLoc:\"correctCompositionLoc PQ\"\nshows \"know P m \\<or> know Q m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "proof (cases m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> know P m \\<or> know Q m", "fix key"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> know P m \\<or> know Q m", "assume a1:\"m = kKS key\""], ["proof (state)\nthis:\n  m = kKS key\n\ngoal (2 subgoals):\n 1. \\<And>x1. m = kKS x1 \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<And>x2. m = sKS x2 \\<Longrightarrow> know P m \\<or> know Q m", "from this"], ["proof (chain)\npicking this:\n  m = kKS key", "show ?thesis"], ["proof (prove)\nusing this:\n  m = kKS key\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "proof (cases \"ine PQ (kE key)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m = kKS key; ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<lbrakk>m = kKS key; \\<not> ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "assume a11:\"ine PQ (kE key)\""], ["proof (state)\nthis:\n  ine PQ (kE key)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = kKS key; ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<lbrakk>m = kKS key; \\<not> ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "from this and subPQ and cCompI and a1"], ["proof (chain)\npicking this:\n  ine PQ (kE key)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  m = kKS key", "have \n     \"ine P (kE key)  \\<or> ine Q (kE key)\""], ["proof (prove)\nusing this:\n  ine PQ (kE key)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  m = kKS key\n\ngoal (1 subgoal):\n 1. ine P (kE key) \\<or> ine Q (kE key)", "by (simp add: TBtheorem1a)"], ["proof (state)\nthis:\n  ine P (kE key) \\<or> ine Q (kE key)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = kKS key; ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<lbrakk>m = kKS key; \\<not> ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "from this and a1"], ["proof (chain)\npicking this:\n  ine P (kE key) \\<or> ine Q (kE key)\n  m = kKS key", "show ?thesis"], ["proof (prove)\nusing this:\n  ine P (kE key) \\<or> ine Q (kE key)\n  m = kKS key\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by auto"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = kKS key; \\<not> ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>m = kKS key; \\<not> ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "assume a12:\"\\<not> ine PQ (kE key)\""], ["proof (state)\nthis:\n  \\<not> ine PQ (kE key)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = kKS key; \\<not> ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "from this and knowPQ and a1"], ["proof (chain)\npicking this:\n  \\<not> ine PQ (kE key)\n  know PQ m\n  m = kKS key", "have sg2:\"kKS key \\<in> LocalSecrets PQ\""], ["proof (prove)\nusing this:\n  \\<not> ine PQ (kE key)\n  know PQ m\n  m = kKS key\n\ngoal (1 subgoal):\n 1. kKS key \\<in> LocalSecrets PQ", "by auto"], ["proof (state)\nthis:\n  kKS key \\<in> LocalSecrets PQ\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = kKS key; \\<not> ine PQ (kE key)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "proof (cases \"know Q m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. know Q m \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "assume \"know Q m\""], ["proof (state)\nthis:\n  know Q m\n\ngoal (2 subgoals):\n 1. know Q m \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "from this"], ["proof (chain)\npicking this:\n  know Q m", "show ?thesis"], ["proof (prove)\nusing this:\n  know Q m\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by simp"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "assume not_knowQm:\"\\<not> know Q m\""], ["proof (state)\nthis:\n  \\<not> know Q m\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "from not_knowQm and a1"], ["proof (chain)\npicking this:\n  \\<not> know Q m\n  m = kKS key", "have sg3a:\"\\<not> ine Q (kE key)\""], ["proof (prove)\nusing this:\n  \\<not> know Q m\n  m = kKS key\n\ngoal (1 subgoal):\n 1. \\<not> ine Q (kE key)", "by simp"], ["proof (state)\nthis:\n  \\<not> ine Q (kE key)\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "from not_knowQm and a1"], ["proof (chain)\npicking this:\n  \\<not> know Q m\n  m = kKS key", "have sg3b:\"kKS key \\<notin> LocalSecrets Q\""], ["proof (prove)\nusing this:\n  \\<not> know Q m\n  m = kKS key\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets Q", "by simp"], ["proof (state)\nthis:\n  kKS key \\<notin> LocalSecrets Q\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "proof (cases \"kKS key \\<in> LocalSecrets P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. kKS key \\<in> LocalSecrets P \\<Longrightarrow> know P m \\<or> know Q m\n 2. kKS key \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "assume \"kKS key \\<in> LocalSecrets P\""], ["proof (state)\nthis:\n  kKS key \\<in> LocalSecrets P\n\ngoal (2 subgoals):\n 1. kKS key \\<in> LocalSecrets P \\<Longrightarrow> know P m \\<or> know Q m\n 2. kKS key \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "from this and a1"], ["proof (chain)\npicking this:\n  kKS key \\<in> LocalSecrets P\n  m = kKS key", "show ?thesis"], ["proof (prove)\nusing this:\n  kKS key \\<in> LocalSecrets P\n  m = kKS key\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by simp"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "assume \"kKS key \\<notin> LocalSecrets P\""], ["proof (state)\nthis:\n  kKS key \\<notin> LocalSecrets P\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "from sg2 and subPQ and cCompLoc and sg3a and this and sg3b"], ["proof (chain)\npicking this:\n  kKS key \\<in> LocalSecrets PQ\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine Q (kE key)\n  kKS key \\<notin> LocalSecrets P\n  kKS key \\<notin> LocalSecrets Q", "have \"ine P (kE key)\""], ["proof (prove)\nusing this:\n  kKS key \\<in> LocalSecrets PQ\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine Q (kE key)\n  kKS key \\<notin> LocalSecrets P\n  kKS key \\<notin> LocalSecrets Q\n\ngoal (1 subgoal):\n 1. ine P (kE key)", "by (simp add: LocalSecretsComposition_ine1_k)"], ["proof (state)\nthis:\n  ine P (kE key)\n\ngoal (1 subgoal):\n 1. kKS key \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "from this and a1"], ["proof (chain)\npicking this:\n  ine P (kE key)\n  m = kKS key", "show ?thesis"], ["proof (prove)\nusing this:\n  ine P (kE key)\n  m = kKS key\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by simp"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know P m \\<or> know Q m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know P m \\<or> know Q m", "fix secret"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know P m \\<or> know Q m", "assume a2:\"m = sKS secret\""], ["proof (state)\nthis:\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. \\<And>x2. m = sKS x2 \\<Longrightarrow> know P m \\<or> know Q m", "from this"], ["proof (chain)\npicking this:\n  m = sKS secret", "show ?thesis"], ["proof (prove)\nusing this:\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "proof (cases \"ine PQ (sE secret)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m = sKS secret; ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<lbrakk>m = sKS secret; \\<not> ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "assume a21:\"ine PQ (sE secret)\""], ["proof (state)\nthis:\n  ine PQ (sE secret)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = sKS secret; ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<lbrakk>m = sKS secret; \\<not> ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "from this and subPQ and cCompI and a2"], ["proof (chain)\npicking this:\n  ine PQ (sE secret)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  m = sKS secret", "have\n     \"ine P (sE secret)  \\<or> ine Q (sE secret)\""], ["proof (prove)\nusing this:\n  ine PQ (sE secret)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. ine P (sE secret) \\<or> ine Q (sE secret)", "by (simp add: TBtheorem1a)"], ["proof (state)\nthis:\n  ine P (sE secret) \\<or> ine Q (sE secret)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m = sKS secret; ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<lbrakk>m = sKS secret; \\<not> ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "from this and a2"], ["proof (chain)\npicking this:\n  ine P (sE secret) \\<or> ine Q (sE secret)\n  m = sKS secret", "show ?thesis"], ["proof (prove)\nusing this:\n  ine P (sE secret) \\<or> ine Q (sE secret)\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by auto"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = sKS secret; \\<not> ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>m = sKS secret; \\<not> ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "assume a22:\"\\<not> ine PQ (sE secret)\""], ["proof (state)\nthis:\n  \\<not> ine PQ (sE secret)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = sKS secret; \\<not> ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "from this and knowPQ and a2"], ["proof (chain)\npicking this:\n  \\<not> ine PQ (sE secret)\n  know PQ m\n  m = sKS secret", "have sg5:\n     \"sKS secret \\<in> LocalSecrets PQ\""], ["proof (prove)\nusing this:\n  \\<not> ine PQ (sE secret)\n  know PQ m\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. sKS secret \\<in> LocalSecrets PQ", "by auto"], ["proof (state)\nthis:\n  sKS secret \\<in> LocalSecrets PQ\n\ngoal (1 subgoal):\n 1. \\<lbrakk>m = sKS secret; \\<not> ine PQ (sE secret)\\<rbrakk>\n    \\<Longrightarrow> know P m \\<or> know Q m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "proof (cases \"know Q m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. know Q m \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "assume \"know Q m\""], ["proof (state)\nthis:\n  know Q m\n\ngoal (2 subgoals):\n 1. know Q m \\<Longrightarrow> know P m \\<or> know Q m\n 2. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "from this"], ["proof (chain)\npicking this:\n  know Q m", "show ?thesis"], ["proof (prove)\nusing this:\n  know Q m\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by simp"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "assume not_knowQm:\"\\<not> know Q m\""], ["proof (state)\nthis:\n  \\<not> know Q m\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "from not_knowQm and a2"], ["proof (chain)\npicking this:\n  \\<not> know Q m\n  m = sKS secret", "have sg6a:\"\\<not> ine Q (sE secret)\""], ["proof (prove)\nusing this:\n  \\<not> know Q m\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. \\<not> ine Q (sE secret)", "by simp"], ["proof (state)\nthis:\n  \\<not> ine Q (sE secret)\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "from not_knowQm and a2"], ["proof (chain)\npicking this:\n  \\<not> know Q m\n  m = sKS secret", "have sg6b:\"sKS secret \\<notin> LocalSecrets Q\""], ["proof (prove)\nusing this:\n  \\<not> know Q m\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets Q", "by simp"], ["proof (state)\nthis:\n  sKS secret \\<notin> LocalSecrets Q\n\ngoal (1 subgoal):\n 1. \\<not> know Q m \\<Longrightarrow> know P m \\<or> know Q m", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "proof (cases \"sKS secret \\<in> LocalSecrets P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sKS secret \\<in> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m\n 2. sKS secret \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "assume \"sKS secret \\<in> LocalSecrets P\""], ["proof (state)\nthis:\n  sKS secret \\<in> LocalSecrets P\n\ngoal (2 subgoals):\n 1. sKS secret \\<in> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m\n 2. sKS secret \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "from this and a2"], ["proof (chain)\npicking this:\n  sKS secret \\<in> LocalSecrets P\n  m = sKS secret", "show ?thesis"], ["proof (prove)\nusing this:\n  sKS secret \\<in> LocalSecrets P\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by simp"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "assume \"sKS secret \\<notin> LocalSecrets P\""], ["proof (state)\nthis:\n  sKS secret \\<notin> LocalSecrets P\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "from sg5 and subPQ and cCompLoc and sg6a and this and sg6b"], ["proof (chain)\npicking this:\n  sKS secret \\<in> LocalSecrets PQ\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine Q (sE secret)\n  sKS secret \\<notin> LocalSecrets P\n  sKS secret \\<notin> LocalSecrets Q", "have \n         \"ine P (sE secret)\""], ["proof (prove)\nusing this:\n  sKS secret \\<in> LocalSecrets PQ\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  \\<not> ine Q (sE secret)\n  sKS secret \\<notin> LocalSecrets P\n  sKS secret \\<notin> LocalSecrets Q\n\ngoal (1 subgoal):\n 1. ine P (sE secret)", "by (simp add: LocalSecretsComposition_ine1_s)"], ["proof (state)\nthis:\n  ine P (sE secret)\n\ngoal (1 subgoal):\n 1. sKS secret \\<notin> LocalSecrets P \\<Longrightarrow>\n    know P m \\<or> know Q m", "from this and a2"], ["proof (chain)\npicking this:\n  ine P (sE secret)\n  m = sKS secret", "show ?thesis"], ["proof (prove)\nusing this:\n  ine P (sE secret)\n  m = sKS secret\n\ngoal (1 subgoal):\n 1. know P m \\<or> know Q m", "by simp"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  know P m \\<or> know Q m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eout_knows_nonKS_k:\n assumes \"m \\<notin> (specKeys A)\"\n         and \"eout A (kE m)\"\n         and \"eoutKnowsECorrect A (kE m)\"\n   shows \"knows A [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows A [kE m]", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specKeys A\n  eout A (kE m)\n  eoutKnowsECorrect A (kE m)\n\ngoal (1 subgoal):\n 1. knows A [kE m]", "by (metis Expression.distinct(1) Expression.inject(1) eoutKnowsECorrect_L1)"], ["", "lemma eout_knows_nonKS_s:\n assumes h1:\"m \\<notin> specSecrets A\"\n         and h2:\"eout A (sE m)\"\n         and h3:\"eoutKnowsECorrect A (sE m)\"\n   shows \"knows A [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows A [sE m]", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specSecrets A\n  eout A (sE m)\n  eoutKnowsECorrect A (sE m)\n\ngoal (1 subgoal):\n 1. knows A [sE m]", "by (metis Expression.distinct(1) Expression.inject(2) eoutKnowsECorrect_def)"], ["", "lemma not_knows_k_not_ine:\nassumes \"\\<not> knows A [kE m]\"\nshows    \"\\<not> ine A (kE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ine A (kE m)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows A [kE m]\n\ngoal (1 subgoal):\n 1. \\<not> ine A (kE m)", "by (metis knows2know_neg_k not_know_k_not_ine)"], ["", "lemma not_knows_s_not_ine:\nassumes \"\\<not> knows A [sE m]\"\nshows    \"\\<not> ine A (sE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ine A (sE m)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows A [sE m]\n\ngoal (1 subgoal):\n 1. \\<not> ine A (sE m)", "by (metis knows2know_neg_s not_know_s_not_ine)"], ["", "lemma not_knows_k_not_eout:\nassumes \"m \\<notin> specKeys A\"\n       and \"\\<not> knows A [kE m]\"\n       and \"eoutKnowsECorrect A (kE m)\"\nshows    \"\\<not> eout A (kE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout A (kE m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specKeys A\n  \\<not> knows A [kE m]\n  eoutKnowsECorrect A (kE m)\n\ngoal (1 subgoal):\n 1. \\<not> eout A (kE m)", "by (metis eout_knows_nonKS_k)"], ["", "lemma not_knows_s_not_eout:\nassumes \"m \\<notin> specSecrets A\"\n       and \"\\<not> knows A [sE m]\"\n       and \"eoutKnowsECorrect A (sE m)\"\nshows    \"\\<not> eout A (sE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout A (sE m)", "using assms"], ["proof (prove)\nusing this:\n  m \\<notin> specSecrets A\n  \\<not> knows A [sE m]\n  eoutKnowsECorrect A (sE m)\n\ngoal (1 subgoal):\n 1. \\<not> eout A (sE m)", "by (metis eout_knows_nonKS_s)"], ["", "lemma  adv_not_knows1:\nassumes \"out P \\<subseteq> ins A\"\n       and \"\\<not> knows A [kE m]\"\nshows    \"\\<not> eout P (kE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout P (kE m)", "using assms"], ["proof (prove)\nusing this:\n  out P \\<subseteq> ins A\n  \\<not> knows A [kE m]\n\ngoal (1 subgoal):\n 1. \\<not> eout P (kE m)", "by (metis adv_not_know1 knows2know_neg_k)"], ["", "lemma adv_not_knows2:\nassumes \"out P  \\<subseteq> ins A\"\n        and \"\\<not> knows A [sE m]\" \nshows    \"\\<not> eout P (sE m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> eout P (sE m)", "using assms"], ["proof (prove)\nusing this:\n  out P \\<subseteq> ins A\n  \\<not> knows A [sE m]\n\ngoal (1 subgoal):\n 1. \\<not> eout P (sE m)", "by (metis adv_not_know2 knows2know_neg_s)"], ["", "lemma knows_decomposition_1_k:\nassumes \"kKS a \\<notin> specKeysSecrets P\"\n       and \"kKS a \\<notin> specKeysSecrets Q\"\n       and \"subcomponents PQ = {P, Q}\"\n       and \"knows PQ [kE a]\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionLoc PQ\"\nshows \"knows P [kE a] \\<or> knows Q [kE a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P [kE a] \\<or> knows Q [kE a]", "using assms"], ["proof (prove)\nusing this:\n  kKS a \\<notin> specKeysSecrets P\n  kKS a \\<notin> specKeysSecrets Q\n  subcomponents PQ = {P, Q}\n  knows PQ [kE a]\n  correctCompositionIn PQ\n  correctCompositionLoc PQ\n\ngoal (1 subgoal):\n 1. knows P [kE a] \\<or> knows Q [kE a]", "by (metis know_decomposition knows1k)"], ["", "lemma knows_decomposition_1_s:\nassumes \"sKS a \\<notin> specKeysSecrets P\"\n       and \"sKS a \\<notin> specKeysSecrets Q\"\n       and \"subcomponents PQ = {P, Q}\"\n       and \"knows PQ [sE a]\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionLoc PQ\"\nshows \"knows P [sE a] \\<or> knows Q [sE a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P [sE a] \\<or> knows Q [sE a]", "using assms"], ["proof (prove)\nusing this:\n  sKS a \\<notin> specKeysSecrets P\n  sKS a \\<notin> specKeysSecrets Q\n  subcomponents PQ = {P, Q}\n  knows PQ [sE a]\n  correctCompositionIn PQ\n  correctCompositionLoc PQ\n\ngoal (1 subgoal):\n 1. knows P [sE a] \\<or> knows Q [sE a]", "by (metis know_decomposition knows1s)"], ["", "lemma knows_decomposition_1:\nassumes \"subcomponents PQ = {P, Q}\"\n       and \"knows PQ [a]\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionLoc PQ\"\n       and \"(\\<exists> z. a = kE z) \\<or> (\\<exists> z. a = sE z)\"\n       and \"\\<forall> z. a = kE z \\<longrightarrow> \n         kKS z \\<notin> specKeysSecrets P \\<and> kKS z \\<notin> specKeysSecrets Q\"\n       and h7:\"\\<forall> z. a = sE z \\<longrightarrow> \n         sKS z \\<notin> specKeysSecrets P \\<and> sKS z \\<notin> specKeysSecrets Q\"\nshows \"knows P [a] \\<or> knows Q [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P [a] \\<or> knows Q [a]", "using assms"], ["proof (prove)\nusing this:\n  subcomponents PQ = {P, Q}\n  knows PQ [a]\n  correctCompositionIn PQ\n  correctCompositionLoc PQ\n  (\\<exists>z. a = kE z) \\<or> (\\<exists>z. a = sE z)\n  \\<forall>z.\n     a = kE z \\<longrightarrow>\n     kKS z \\<notin> specKeysSecrets P \\<and>\n     kKS z \\<notin> specKeysSecrets Q\n  \\<forall>z.\n     a = sE z \\<longrightarrow>\n     sKS z \\<notin> specKeysSecrets P \\<and>\n     sKS z \\<notin> specKeysSecrets Q\n\ngoal (1 subgoal):\n 1. knows P [a] \\<or> knows Q [a]", "by (metis knows_decomposition_1_k knows_decomposition_1_s)"], ["", "lemma knows_composition1_k:\nassumes \"(kKS m) \\<notin> specKeysSecrets P\"\n       and \"(kKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows P [kE m]\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\" \n       and \"correctCompositionKS PQ\"\nshows \"knows PQ [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows PQ [kE m]", "using assms"], ["proof (prove)\nusing this:\n  kKS m \\<notin> specKeysSecrets P\n  kKS m \\<notin> specKeysSecrets Q\n  knows P [kE m]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [kE m]", "by (metis know_composition knows1k)"], ["", "lemma knows_composition1_s:\nassumes \"(sKS m) \\<notin> specKeysSecrets P\"\n       and \"(sKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows P [sE m]\"\n       and \"subcomponents PQ = {P,Q}\" \n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\"\nshows \"knows PQ [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows PQ [sE m]", "using assms"], ["proof (prove)\nusing this:\n  sKS m \\<notin> specKeysSecrets P\n  sKS m \\<notin> specKeysSecrets Q\n  knows P [sE m]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [sE m]", "by (metis know_composition knows1s)"], ["", "lemma knows_composition2_k:\nassumes \"(kKS m) \\<notin> specKeysSecrets P\"\n       and \"(kKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows Q [kE m]\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\" \n       and \"correctCompositionKS PQ\"\nshows \"knows PQ [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows PQ [kE m]", "using assms"], ["proof (prove)\nusing this:\n  kKS m \\<notin> specKeysSecrets P\n  kKS m \\<notin> specKeysSecrets Q\n  knows Q [kE m]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [kE m]", "by (metis know2knowsPQ_k know_composition knows2know_k)"], ["", "lemma knows_composition2_s:\nassumes \"(sKS m) \\<notin> specKeysSecrets P\"\n       and \"(sKS m) \\<notin> specKeysSecrets Q\"\n       and \"knows Q [sE m]\"\n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\" \nshows \"knows PQ [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows PQ [sE m]", "using assms"], ["proof (prove)\nusing this:\n  sKS m \\<notin> specKeysSecrets P\n  sKS m \\<notin> specKeysSecrets Q\n  knows Q [sE m]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [sE m]", "by (metis know2knowsPQ_s know_composition knows2know_s)"], ["", "lemma knows_composition_neg1_k:\nassumes \"kKS m \\<notin> specKeysSecrets P\"\n       and \"kKS m \\<notin> specKeysSecrets Q\"\n       and \"\\<not> knows P [kE m]\"\n       and \"\\<not> knows Q [kE m]\" \n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionLoc PQ\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\" \nshows \"\\<not> knows PQ [kE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows PQ [kE m]", "using assms"], ["proof (prove)\nusing this:\n  kKS m \\<notin> specKeysSecrets P\n  kKS m \\<notin> specKeysSecrets Q\n  \\<not> knows P [kE m]\n  \\<not> knows Q [kE m]\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. \\<not> knows PQ [kE m]", "by (metis know_decomposition knows1k)"], ["", "lemma knows_composition_neg1_s:\nassumes \"sKS m \\<notin> specKeysSecrets P\"\n       and \"sKS m \\<notin> specKeysSecrets Q\"\n       and \"\\<not> knows P [sE m]\"\n       and \"\\<not> knows Q [sE m]\" \n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionLoc PQ\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\" \nshows \"\\<not> knows PQ [sE m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows PQ [sE m]", "using assms"], ["proof (prove)\nusing this:\n  sKS m \\<notin> specKeysSecrets P\n  sKS m \\<notin> specKeysSecrets Q\n  \\<not> knows P [sE m]\n  \\<not> knows Q [sE m]\n  subcomponents PQ = {P, Q}\n  correctCompositionLoc PQ\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. \\<not> knows PQ [sE m]", "by (metis knows_decomposition_1_s)"], ["", "lemma knows_concat_1:\nassumes \"knows P (a # e)\"\nshows    \"knows P [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P [a]", "using assms"], ["proof (prove)\nusing this:\n  knows P (a # e)\n\ngoal (1 subgoal):\n 1. knows P [a]", "by (metis append_Cons append_Nil knows2)"], ["", "lemma knows_concat_2:\nassumes \"knows P (a # e)\"\nshows    \"knows P e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P e", "using assms"], ["proof (prove)\nusing this:\n  knows P (a # e)\n\ngoal (1 subgoal):\n 1. knows P e", "by (metis append_Cons append_Nil knows2a)"], ["", "lemma knows_concat_3:\nassumes \"knows P [a]\"\n       and \"knows P e\"\nshows \"knows P (a # e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows P (a # e)", "using assms"], ["proof (prove)\nusing this:\n  knows P [a]\n  knows P e\n\ngoal (1 subgoal):\n 1. knows P (a # e)", "by (metis append_Cons append_Nil knows3)"], ["", "lemma not_knows_conc_knows_elem_not_knows_tail:\nassumes \"\\<not> knows P (a # e)\"\n       and \"knows P [a]\"\nshows \"\\<not> knows P e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows P e", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows P (a # e)\n  knows P [a]\n\ngoal (1 subgoal):\n 1. \\<not> knows P e", "by (metis knows_concat_3)"], ["", "lemma not_knows_conc_not_knows_elem_tail:\nassumes \"\\<not> knows P (a#e)\"\nshows    \"\\<not> knows P [a] \\<or> \\<not> knows P e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows P [a] \\<or> \\<not> knows P e", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows P (a # e)\n\ngoal (1 subgoal):\n 1. \\<not> knows P [a] \\<or> \\<not> knows P e", "by (metis append_Cons append_Nil knows3)"], ["", "lemma not_knows_elem_not_knows_conc:\nassumes \"\\<not> knows P [a]\"\nshows    \"\\<not> knows P (a # e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows P (a # e)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows P [a]\n\ngoal (1 subgoal):\n 1. \\<not> knows P (a # e)", "by (metis knows_concat_1)"], ["", "lemma not_knows_tail_not_knows_conc:\nassumes \"\\<not> knows P e\"\nshows    \"\\<not> knows P (a # e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> knows P (a # e)", "using assms"], ["proof (prove)\nusing this:\n  \\<not> knows P e\n\ngoal (1 subgoal):\n 1. \\<not> knows P (a # e)", "by (metis knows_concat_2)"], ["", "lemma knows_composition3:\n fixes e::\"Expression list\"\n assumes \"knows P e\"\n     and subPQ:\"subcomponents PQ = {P,Q}\"\n     and cCompI:\"correctCompositionIn PQ\"\n     and cCompKS:\"correctCompositionKS PQ\"\n     and \"\\<forall> (m::Expression). ((m mem e) \\<longrightarrow> \n            ((\\<exists> z1. m = (kE z1)) \\<or> (\\<exists> z2. m = (sE z2))))\"\n     and \"notSpecKeysSecretsExpr P e\"\n     and \"notSpecKeysSecretsExpr Q e\" \n shows \"knows PQ e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows PQ e", "using assms"], ["proof (prove)\nusing this:\n  knows P e\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem e \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P e\n  notSpecKeysSecretsExpr Q e\n\ngoal (1 subgoal):\n 1. knows PQ e", "proof (induct e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>knows P []; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem [] \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P []; notSpecKeysSecretsExpr Q []\\<rbrakk>\n    \\<Longrightarrow> knows PQ []\n 2. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "case Nil"], ["proof (state)\nthis:\n  knows P []\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem [] \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P []\n  notSpecKeysSecretsExpr Q []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>knows P []; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem [] \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P []; notSpecKeysSecretsExpr Q []\\<rbrakk>\n    \\<Longrightarrow> knows PQ []\n 2. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from this"], ["proof (chain)\npicking this:\n  knows P []\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem [] \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P []\n  notSpecKeysSecretsExpr Q []", "show ?case"], ["proof (prove)\nusing this:\n  knows P []\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem [] \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P []\n  notSpecKeysSecretsExpr Q []\n\ngoal (1 subgoal):\n 1. knows PQ []", "by (simp only: knows_emptyexpression)"], ["proof (state)\nthis:\n  knows PQ []\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "fix a l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "case (Cons a l)"], ["proof (state)\nthis:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg1:\"knows P [a]\""], ["proof (prove)\nusing this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. knows P [a]", "by (simp add: knows_concat_1)"], ["proof (state)\nthis:\n  knows P [a]\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg2:\"knows P l\""], ["proof (prove)\nusing this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. knows P l", "by (simp only: knows_concat_2)"], ["proof (state)\nthis:\n  knows P l\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from sg1"], ["proof (chain)\npicking this:\n  knows P [a]", "have sg3:\"a mem (a # l)\""], ["proof (prove)\nusing this:\n  knows P [a]\n\ngoal (1 subgoal):\n 1. a mem a # l", "by simp"], ["proof (state)\nthis:\n  a mem a # l\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons and sg2"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows P l", "have sg2a:\"knows PQ l\""], ["proof (prove)\nusing this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows P l\n\ngoal (1 subgoal):\n 1. knows PQ l", "by (simp add: notSpecKeysSecretsExpr_L2)"], ["proof (state)\nthis:\n  knows PQ l\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows P e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows P (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons and sg1 and sg2 and sg3"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows P [a]\n  knows P l\n  a mem a # l", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows P [a]\n  knows P l\n  a mem a # l\n\ngoal (1 subgoal):\n 1. knows PQ (a # l)", "proof (cases \"\\<exists> z1. a = kE z1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "assume \"\\<exists> z1. a = (kE z1)\""], ["proof (state)\nthis:\n  \\<exists>z1. a = kE z1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>z1. a = kE z1", "obtain z where a1:\"a = (kE z)\""], ["proof (prove)\nusing this:\n  \\<exists>z1. a = kE z1\n\ngoal (1 subgoal):\n 1. (\\<And>z. a = kE z \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  a = kE z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a1 and Cons"], ["proof (chain)\npicking this:\n  a = kE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg4:\"(kKS z) \\<notin> specKeysSecrets P\""], ["proof (prove)\nusing this:\n  a = kE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. kKS z \\<notin> specKeysSecrets P", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  kKS z \\<notin> specKeysSecrets P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a1 and Cons"], ["proof (chain)\npicking this:\n  a = kE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg5:\"(kKS z) \\<notin> specKeysSecrets Q\""], ["proof (prove)\nusing this:\n  a = kE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. kKS z \\<notin> specKeysSecrets Q", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  kKS z \\<notin> specKeysSecrets Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg1 and a1"], ["proof (chain)\npicking this:\n  knows P [a]\n  a = kE z", "have sg6:\"knows P [kE z]\""], ["proof (prove)\nusing this:\n  knows P [a]\n  a = kE z\n\ngoal (1 subgoal):\n 1. knows P [kE z]", "by simp"], ["proof (state)\nthis:\n  knows P [kE z]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg4 and sg5 and sg6 and subPQ and cCompI and cCompKS"], ["proof (chain)\npicking this:\n  kKS z \\<notin> specKeysSecrets P\n  kKS z \\<notin> specKeysSecrets Q\n  knows P [kE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "have \"knows PQ [kE z]\""], ["proof (prove)\nusing this:\n  kKS z \\<notin> specKeysSecrets P\n  kKS z \\<notin> specKeysSecrets Q\n  knows P [kE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [kE z]", "by (rule knows_composition1_k)"], ["proof (state)\nthis:\n  knows PQ [kE z]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this and sg2a and a1"], ["proof (chain)\npicking this:\n  knows PQ [kE z]\n  knows PQ l\n  a = kE z", "show ?case"], ["proof (prove)\nusing this:\n  knows PQ [kE z]\n  knows PQ l\n  a = kE z\n\ngoal (1 subgoal):\n 1. knows PQ (a # l)", "by (simp add: knows_concat_3)"], ["proof (state)\nthis:\n  knows PQ (a # l)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "assume \"\\<not> (\\<exists>z1. a = kE z1)\""], ["proof (state)\nthis:\n  \\<nexists>z1. a = kE z1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this and Cons and sg3"], ["proof (chain)\npicking this:\n  \\<nexists>z1. a = kE z1\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  a mem a # l", "have \"\\<exists> z2. a = (sE z2)\""], ["proof (prove)\nusing this:\n  \\<nexists>z1. a = kE z1\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  a mem a # l\n\ngoal (1 subgoal):\n 1. \\<exists>z2. a = sE z2", "by auto"], ["proof (state)\nthis:\n  \\<exists>z2. a = sE z2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>z2. a = sE z2", "obtain z where a2:\"a = (sE z)\""], ["proof (prove)\nusing this:\n  \\<exists>z2. a = sE z2\n\ngoal (1 subgoal):\n 1. (\\<And>z. a = sE z \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  a = sE z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a2 and Cons"], ["proof (chain)\npicking this:\n  a = sE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg8:\"(sKS z) \\<notin> specKeysSecrets P\""], ["proof (prove)\nusing this:\n  a = sE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. sKS z \\<notin> specKeysSecrets P", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  sKS z \\<notin> specKeysSecrets P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a2 and Cons"], ["proof (chain)\npicking this:\n  a = sE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg9:\"(sKS z) \\<notin> specKeysSecrets Q\""], ["proof (prove)\nusing this:\n  a = sE z\n  \\<lbrakk>knows P l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows P (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. sKS z \\<notin> specKeysSecrets Q", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  sKS z \\<notin> specKeysSecrets Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg1 and a2"], ["proof (chain)\npicking this:\n  knows P [a]\n  a = sE z", "have sg10:\"knows P [sE z]\""], ["proof (prove)\nusing this:\n  knows P [a]\n  a = sE z\n\ngoal (1 subgoal):\n 1. knows P [sE z]", "by simp"], ["proof (state)\nthis:\n  knows P [sE z]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg8 and sg9 and sg10 and subPQ and cCompI and cCompKS"], ["proof (chain)\npicking this:\n  sKS z \\<notin> specKeysSecrets P\n  sKS z \\<notin> specKeysSecrets Q\n  knows P [sE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "have \"knows PQ [sE z]\""], ["proof (prove)\nusing this:\n  sKS z \\<notin> specKeysSecrets P\n  sKS z \\<notin> specKeysSecrets Q\n  knows P [sE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [sE z]", "by (rule knows_composition1_s)"], ["proof (state)\nthis:\n  knows PQ [sE z]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows P l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows P (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z1. m = kE z1) \\<or> (\\<exists>z2. m = sE z2);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows P [a]; knows P l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this and sg2a and a2"], ["proof (chain)\npicking this:\n  knows PQ [sE z]\n  knows PQ l\n  a = sE z", "show ?case"], ["proof (prove)\nusing this:\n  knows PQ [sE z]\n  knows PQ l\n  a = sE z\n\ngoal (1 subgoal):\n 1. knows PQ (a # l)", "by (simp add: knows_concat_3)"], ["proof (state)\nthis:\n  knows PQ (a # l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  knows PQ (a # l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma knows_composition4:\n assumes \"knows Q e\"\n     and subPQ:\"subcomponents PQ = {P,Q}\" \n     and cCompI:\"correctCompositionIn PQ\"\n     and cCompKS:\"correctCompositionKS PQ\"\n     and \"\\<forall> m. m mem e \\<longrightarrow> ((\\<exists> z. m = kE z) \\<or> (\\<exists> z. m = sE z))\"\n     and \"notSpecKeysSecretsExpr P e\"\n     and \"notSpecKeysSecretsExpr Q e\" \n shows \"knows PQ e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows PQ e", "using assms"], ["proof (prove)\nusing this:\n  knows Q e\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem e \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P e\n  notSpecKeysSecretsExpr Q e\n\ngoal (1 subgoal):\n 1. knows PQ e", "proof (induct e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>knows Q []; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem [] \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P []; notSpecKeysSecretsExpr Q []\\<rbrakk>\n    \\<Longrightarrow> knows PQ []\n 2. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "case Nil"], ["proof (state)\nthis:\n  knows Q []\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem [] \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P []\n  notSpecKeysSecretsExpr Q []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>knows Q []; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem [] \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P []; notSpecKeysSecretsExpr Q []\\<rbrakk>\n    \\<Longrightarrow> knows PQ []\n 2. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from this"], ["proof (chain)\npicking this:\n  knows Q []\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem [] \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P []\n  notSpecKeysSecretsExpr Q []", "show ?case"], ["proof (prove)\nusing this:\n  knows Q []\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem [] \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P []\n  notSpecKeysSecretsExpr Q []\n\ngoal (1 subgoal):\n 1. knows PQ []", "by (simp only: knows_emptyexpression)"], ["proof (state)\nthis:\n  knows PQ []\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "fix a l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "case (Cons a l)"], ["proof (state)\nthis:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg1:\"knows Q [a]\""], ["proof (prove)\nusing this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. knows Q [a]", "by (simp add: knows_concat_1)"], ["proof (state)\nthis:\n  knows Q [a]\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg2:\"knows Q l\""], ["proof (prove)\nusing this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. knows Q l", "by (simp only: knows_concat_2)"], ["proof (state)\nthis:\n  knows Q l\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from sg1"], ["proof (chain)\npicking this:\n  knows Q [a]", "have sg3:\"a mem (a # l)\""], ["proof (prove)\nusing this:\n  knows Q [a]\n\ngoal (1 subgoal):\n 1. a mem a # l", "by simp"], ["proof (state)\nthis:\n  a mem a # l\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons and sg2"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows Q l", "have sg2a:\"knows PQ l\""], ["proof (prove)\nusing this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows Q l\n\ngoal (1 subgoal):\n 1. knows PQ l", "by (simp add: notSpecKeysSecretsExpr_L2)"], ["proof (state)\nthis:\n  knows PQ l\n\ngoal (1 subgoal):\n 1. \\<And>a e.\n       \\<lbrakk>\\<lbrakk>knows Q e; subcomponents PQ = {P, Q};\n                 correctCompositionIn PQ; correctCompositionKS PQ;\n                 \\<forall>m.\n                    m mem e \\<longrightarrow>\n                    (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n                 notSpecKeysSecretsExpr P e;\n                 notSpecKeysSecretsExpr Q e\\<rbrakk>\n                \\<Longrightarrow> knows PQ e;\n        knows Q (a # e); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n        correctCompositionKS PQ;\n        \\<forall>m.\n           m mem a # e \\<longrightarrow>\n           (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n        notSpecKeysSecretsExpr P (a # e);\n        notSpecKeysSecretsExpr Q (a # e)\\<rbrakk>\n       \\<Longrightarrow> knows PQ (a # e)", "from Cons and sg1 and sg2 and sg3"], ["proof (chain)\npicking this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows Q [a]\n  knows Q l\n  a mem a # l", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  knows Q [a]\n  knows Q l\n  a mem a # l\n\ngoal (1 subgoal):\n 1. knows PQ (a # l)", "proof (cases \"\\<exists> z1. a = kE z1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "assume \"\\<exists> z1. a = (kE z1)\""], ["proof (state)\nthis:\n  \\<exists>z1. a = kE z1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>z1. a = kE z1", "obtain z where a1:\"a = (kE z)\""], ["proof (prove)\nusing this:\n  \\<exists>z1. a = kE z1\n\ngoal (1 subgoal):\n 1. (\\<And>z. a = kE z \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  a = kE z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a1 and Cons"], ["proof (chain)\npicking this:\n  a = kE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg4:\"(kKS z) \\<notin> specKeysSecrets P\""], ["proof (prove)\nusing this:\n  a = kE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. kKS z \\<notin> specKeysSecrets P", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  kKS z \\<notin> specKeysSecrets P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a1 and Cons"], ["proof (chain)\npicking this:\n  a = kE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg5:\"(kKS z) \\<notin> specKeysSecrets Q\""], ["proof (prove)\nusing this:\n  a = kE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. kKS z \\<notin> specKeysSecrets Q", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  kKS z \\<notin> specKeysSecrets Q\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg1 and a1"], ["proof (chain)\npicking this:\n  knows Q [a]\n  a = kE z", "have sg6:\"knows Q [kE z]\""], ["proof (prove)\nusing this:\n  knows Q [a]\n  a = kE z\n\ngoal (1 subgoal):\n 1. knows Q [kE z]", "by simp"], ["proof (state)\nthis:\n  knows Q [kE z]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg4 and sg5 and sg6 and subPQ and cCompI and cCompKS"], ["proof (chain)\npicking this:\n  kKS z \\<notin> specKeysSecrets P\n  kKS z \\<notin> specKeysSecrets Q\n  knows Q [kE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "have \"knows PQ [kE z]\""], ["proof (prove)\nusing this:\n  kKS z \\<notin> specKeysSecrets P\n  kKS z \\<notin> specKeysSecrets Q\n  knows Q [kE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [kE z]", "by (rule knows_composition2_k)"], ["proof (state)\nthis:\n  knows PQ [kE z]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<exists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)\n 2. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this and sg2a and a1"], ["proof (chain)\npicking this:\n  knows PQ [kE z]\n  knows PQ l\n  a = kE z", "show ?case"], ["proof (prove)\nusing this:\n  knows PQ [kE z]\n  knows PQ l\n  a = kE z\n\ngoal (1 subgoal):\n 1. knows PQ (a # l)", "by (simp add: knows_concat_3)"], ["proof (state)\nthis:\n  knows PQ (a # l)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "assume \"\\<not> (\\<exists>z1. a = kE z1)\""], ["proof (state)\nthis:\n  \\<nexists>z1. a = kE z1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this and Cons and sg3"], ["proof (chain)\npicking this:\n  \\<nexists>z1. a = kE z1\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  a mem a # l", "have \"\\<exists> z2. a = (sE z2)\""], ["proof (prove)\nusing this:\n  \\<nexists>z1. a = kE z1\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n  a mem a # l\n\ngoal (1 subgoal):\n 1. \\<exists>z2. a = sE z2", "by auto"], ["proof (state)\nthis:\n  \\<exists>z2. a = sE z2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>z2. a = sE z2", "obtain z where a2:\"a = (sE z)\""], ["proof (prove)\nusing this:\n  \\<exists>z2. a = sE z2\n\ngoal (1 subgoal):\n 1. (\\<And>z. a = sE z \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  a = sE z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a2 and Cons"], ["proof (chain)\npicking this:\n  a = sE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg8:\"(sKS z) \\<notin> specKeysSecrets P\""], ["proof (prove)\nusing this:\n  a = sE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. sKS z \\<notin> specKeysSecrets P", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  sKS z \\<notin> specKeysSecrets P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from a2 and Cons"], ["proof (chain)\npicking this:\n  a = sE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)", "have sg9:\"(sKS z) \\<notin> specKeysSecrets Q\""], ["proof (prove)\nusing this:\n  a = sE z\n  \\<lbrakk>knows Q l; subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n   correctCompositionKS PQ;\n   \\<forall>m.\n      m mem l \\<longrightarrow>\n      (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n   notSpecKeysSecretsExpr P l; notSpecKeysSecretsExpr Q l\\<rbrakk>\n  \\<Longrightarrow> knows PQ l\n  knows Q (a # l)\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem a # l \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P (a # l)\n  notSpecKeysSecretsExpr Q (a # l)\n\ngoal (1 subgoal):\n 1. sKS z \\<notin> specKeysSecrets Q", "by (simp add: notSpecKeysSecretsExpr_def)"], ["proof (state)\nthis:\n  sKS z \\<notin> specKeysSecrets Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg1 and a2"], ["proof (chain)\npicking this:\n  knows Q [a]\n  a = sE z", "have sg10:\"knows Q [sE z]\""], ["proof (prove)\nusing this:\n  knows Q [a]\n  a = sE z\n\ngoal (1 subgoal):\n 1. knows Q [sE z]", "by simp"], ["proof (state)\nthis:\n  knows Q [sE z]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from sg8 and sg9 and sg10 and subPQ and cCompI and cCompKS"], ["proof (chain)\npicking this:\n  sKS z \\<notin> specKeysSecrets P\n  sKS z \\<notin> specKeysSecrets Q\n  knows Q [sE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ", "have \"knows PQ [sE z]\""], ["proof (prove)\nusing this:\n  sKS z \\<notin> specKeysSecrets P\n  sKS z \\<notin> specKeysSecrets Q\n  knows Q [sE z]\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n\ngoal (1 subgoal):\n 1. knows PQ [sE z]", "by (rule knows_composition2_s)"], ["proof (state)\nthis:\n  knows PQ [sE z]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>knows Q l; subcomponents PQ = {P, Q};\n              correctCompositionIn PQ; correctCompositionKS PQ;\n              \\<forall>m.\n                 m mem l \\<longrightarrow>\n                 (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n              notSpecKeysSecretsExpr P l;\n              notSpecKeysSecretsExpr Q l\\<rbrakk>\n             \\<Longrightarrow> knows PQ l;\n     knows Q (a # l); subcomponents PQ = {P, Q}; correctCompositionIn PQ;\n     correctCompositionKS PQ;\n     \\<forall>m.\n        m mem a # l \\<longrightarrow>\n        (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z);\n     notSpecKeysSecretsExpr P (a # l); notSpecKeysSecretsExpr Q (a # l);\n     knows Q [a]; knows Q l; a mem a # l; \\<nexists>z1. a = kE z1\\<rbrakk>\n    \\<Longrightarrow> knows PQ (a # l)", "from this and sg2a and a2"], ["proof (chain)\npicking this:\n  knows PQ [sE z]\n  knows PQ l\n  a = sE z", "show ?case"], ["proof (prove)\nusing this:\n  knows PQ [sE z]\n  knows PQ l\n  a = sE z\n\ngoal (1 subgoal):\n 1. knows PQ (a # l)", "by (simp add: knows_concat_3)"], ["proof (state)\nthis:\n  knows PQ (a # l)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  knows PQ (a # l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma knows_composition5:\nassumes \"knows P e \\<or> knows Q e\" \n       and \"subcomponents PQ = {P,Q}\"\n       and \"correctCompositionIn PQ\"\n       and \"correctCompositionKS PQ\"\n       and \"\\<forall> m. m mem e \\<longrightarrow> ((\\<exists> z. m = kE z) \\<or> (\\<exists> z. m = sE z))\"\n       and \"notSpecKeysSecretsExpr P e\"\n       and \"notSpecKeysSecretsExpr Q e\" \nshows \"knows PQ e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knows PQ e", "using assms"], ["proof (prove)\nusing this:\n  knows P e \\<or> knows Q e\n  subcomponents PQ = {P, Q}\n  correctCompositionIn PQ\n  correctCompositionKS PQ\n  \\<forall>m.\n     m mem e \\<longrightarrow>\n     (\\<exists>z. m = kE z) \\<or> (\\<exists>z. m = sE z)\n  notSpecKeysSecretsExpr P e\n  notSpecKeysSecretsExpr Q e\n\ngoal (1 subgoal):\n 1. knows PQ e", "by (metis knows_composition3 knows_composition4)"], ["", "end"]]}