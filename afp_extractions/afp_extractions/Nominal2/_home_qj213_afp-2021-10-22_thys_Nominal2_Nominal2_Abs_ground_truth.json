{"file_name": "/home/qj213/afp-2021-10-22/thys/Nominal2/Nominal2_Abs.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Nominal2", "problem_names": ["lemmas alphas = alpha_set.simps alpha_res.simps alpha_lst.simps", "lemma [mono]:\n  shows \"R1 \\<le> R2 \\<Longrightarrow> alpha_set bs R1 \\<le> alpha_set bs R2\"\n  and   \"R1 \\<le> R2 \\<Longrightarrow> alpha_res bs R1 \\<le> alpha_res bs R2\"\n  and   \"R1 \\<le> R2 \\<Longrightarrow> alpha_lst cs R1 \\<le> alpha_lst cs R2\"", "lemma alpha_eqvt[eqvt]:\n  shows \"(bs, x) \\<approx>set R f q (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>set (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(bs, x) \\<approx>res R f q (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>res (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(ds, x) \\<approx>lst R f q (es, y) \\<Longrightarrow> (p \\<bullet> ds, p \\<bullet> x) \\<approx>lst (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> es, p \\<bullet> y)\"", "lemma alpha_refl:\n  assumes a: \"R x x\"\n  shows \"(bs, x) \\<approx>set R f 0 (bs, x)\"\n  and   \"(bs, x) \\<approx>res R f 0 (bs, x)\"\n  and   \"(cs, x) \\<approx>lst R f 0 (cs, x)\"", "lemma alpha_sym:\n  assumes a: \"R (p \\<bullet> x) y \\<Longrightarrow> R (- p \\<bullet> y) x\"\n  shows \"(bs, x) \\<approx>set R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>set R f (- p) (bs, x)\"\n  and   \"(bs, x) \\<approx>res R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>res R f (- p) (bs, x)\"\n  and   \"(ds, x) \\<approx>lst R f p (es, y) \\<Longrightarrow> (es, y) \\<approx>lst R f (- p) (ds, x)\"", "lemma alpha_trans:\n  assumes a: \"\\<lbrakk>R (p \\<bullet> x) y; R (q \\<bullet> y) z\\<rbrakk> \\<Longrightarrow> R ((q + p) \\<bullet> x) z\"\n  shows \"\\<lbrakk>(bs, x) \\<approx>set R f p (cs, y); (cs, y) \\<approx>set R f q (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>set R f (q + p) (ds, z)\"\n  and   \"\\<lbrakk>(bs, x) \\<approx>res R f p (cs, y); (cs, y) \\<approx>res R f q (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>res R f (q + p) (ds, z)\"\n  and   \"\\<lbrakk>(es, x) \\<approx>lst R f p (gs, y); (gs, y) \\<approx>lst R f q (hs, z)\\<rbrakk> \\<Longrightarrow> (es, x) \\<approx>lst R f (q + p) (hs, z)\"", "lemma alpha_sym_eqvt:\n  assumes a: \"R (p \\<bullet> x) y \\<Longrightarrow> R y (p \\<bullet> x)\"\n  and     b: \"p \\<bullet> R = R\"\n  shows \"(bs, x) \\<approx>set R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>set R f (- p) (bs, x)\"\n  and   \"(bs, x) \\<approx>res R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>res R f (- p) (bs, x)\"\n  and   \"(ds, x) \\<approx>lst R f p (es, y) \\<Longrightarrow> (es, y) \\<approx>lst R f (- p) (ds, x)\"", "lemma alpha_set_trans_eqvt:\n  assumes b: \"(cs, y) \\<approx>set R f q (ds, z)\"\n  and     a: \"(bs, x) \\<approx>set R f p (cs, y)\"\n  and     d: \"q \\<bullet> R = R\"\n  and     c: \"\\<lbrakk>R (p \\<bullet> x) y; R y (- q \\<bullet> z)\\<rbrakk> \\<Longrightarrow> R (p \\<bullet> x) (- q \\<bullet> z)\"\n  shows \"(bs, x) \\<approx>set R f (q + p) (ds, z)\"", "lemma alpha_res_trans_eqvt:\n  assumes  b: \"(cs, y) \\<approx>res R f q (ds, z)\"\n  and     a: \"(bs, x) \\<approx>res R f p (cs, y)\"\n  and     d: \"q \\<bullet> R = R\"\n  and     c: \"\\<lbrakk>R (p \\<bullet> x) y; R y (- q \\<bullet> z)\\<rbrakk> \\<Longrightarrow> R (p \\<bullet> x) (- q \\<bullet> z)\"\n  shows \"(bs, x) \\<approx>res R f (q + p) (ds, z)\"", "lemma alpha_lst_trans_eqvt:\n  assumes b: \"(cs, y) \\<approx>lst R f q (ds, z)\"\n  and     a: \"(bs, x) \\<approx>lst R f p (cs, y)\"\n  and     d: \"q \\<bullet> R = R\"\n  and     c: \"\\<lbrakk>R (p \\<bullet> x) y; R y (- q \\<bullet> z)\\<rbrakk> \\<Longrightarrow> R (p \\<bullet> x) (- q \\<bullet> z)\"\n  shows \"(bs, x) \\<approx>lst R f (q + p) (ds, z)\"", "lemmas alpha_trans_eqvt = alpha_set_trans_eqvt alpha_res_trans_eqvt alpha_lst_trans_eqvt", "lemmas alphas_abs = alpha_abs_set.simps alpha_abs_res.simps alpha_abs_lst.simps", "lemma alphas_abs_refl:\n  shows \"(bs, x) \\<approx>abs_set (bs, x)\"\n  and   \"(bs, x) \\<approx>abs_res (bs, x)\"\n  and   \"(cs, x) \\<approx>abs_lst (cs, x)\"", "lemma alphas_abs_sym:\n  shows \"(bs, x) \\<approx>abs_set (cs, y) \\<Longrightarrow> (cs, y) \\<approx>abs_set (bs, x)\"\n  and   \"(bs, x) \\<approx>abs_res (cs, y) \\<Longrightarrow> (cs, y) \\<approx>abs_res (bs, x)\"\n  and   \"(ds, x) \\<approx>abs_lst (es, y) \\<Longrightarrow> (es, y) \\<approx>abs_lst (ds, x)\"", "lemma alphas_abs_trans:\n  shows \"\\<lbrakk>(bs, x) \\<approx>abs_set (cs, y); (cs, y) \\<approx>abs_set (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>abs_set (ds, z)\"\n  and   \"\\<lbrakk>(bs, x) \\<approx>abs_res (cs, y); (cs, y) \\<approx>abs_res (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>abs_res (ds, z)\"\n  and   \"\\<lbrakk>(es, x) \\<approx>abs_lst (gs, y); (gs, y) \\<approx>abs_lst (hs, z)\\<rbrakk> \\<Longrightarrow> (es, x) \\<approx>abs_lst (hs, z)\"", "lemma alphas_abs_eqvt:\n  shows \"(bs, x) \\<approx>abs_set (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>abs_set (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(bs, x) \\<approx>abs_res (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>abs_res (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(ds, x) \\<approx>abs_lst (es, y) \\<Longrightarrow> (p \\<bullet> ds, p \\<bullet> x) \\<approx>abs_lst (p \\<bullet> es, p \\<bullet> y)\"", "lemma disjoint_right_eq:\n  assumes a: \"A \\<union> B1 = A \\<union> B2\"\n  and     b: \"A \\<inter> B1 = {}\" \"A \\<inter> B2 = {}\"\n  shows \"B1 = B2\"", "lemma supp_property_res:\n  assumes a: \"(as, x) \\<approx>res (=) supp p (as', x')\"\n  shows \"p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'\"", "lemma alpha_abs_res_stronger1_aux:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>res (=) supp p (as', x') \\<and> supp p \\<subseteq> (supp x \\<inter> as) \\<union> (supp x' \\<inter> as')\"", "lemma alpha_abs_res_minimal:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p (as', x')\"\n  shows \"(as \\<inter> supp x, x) \\<approx>res (=) supp p (as' \\<inter> supp x', x')\"", "lemma alpha_abs_res_abs_set:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p (as', x')\"\n  shows \"(as \\<inter> supp x, x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')\"", "lemma alpha_abs_set_abs_res:\n  assumes asm: \"(as \\<inter> supp x, x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')\"\n  shows \"(as, x) \\<approx>res (=) supp p (as', x')\"", "lemma alpha_abs_res_stronger1:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>res (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as'\"", "lemma alpha_abs_set_stronger1:\n  assumes asm: \"(as, x) \\<approx>set (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>set (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as'\"", "lemma alpha_abs_lst_stronger1:\n  assumes asm: \"(as, x) \\<approx>lst (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>lst (=) supp p (as', x') \\<and> supp p \\<subseteq> set as \\<union> set as'\"", "lemma alphas_abs_stronger:\n  shows \"(as, x) \\<approx>abs_set (as', x') \\<longleftrightarrow> (\\<exists>p. (as, x) \\<approx>set (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as')\"\n  and   \"(as, x) \\<approx>abs_res (as', x') \\<longleftrightarrow> (\\<exists>p. (as, x) \\<approx>res (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as')\"\n  and   \"(bs, x) \\<approx>abs_lst (bs', x') \\<longleftrightarrow>\n   (\\<exists>p. (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and> supp p \\<subseteq> set bs \\<union> set bs')\"", "lemma alpha_res_alpha_set:\n  \"(bs, x) \\<approx>res (=) supp p (cs, y) \\<longleftrightarrow> (bs \\<inter> supp x, x) \\<approx>set (=) supp p (cs \\<inter> supp y, y)\"", "lemma [quot_respect]:\n  shows \"((=) ===> (=) ===> alpha_abs_set) Pair Pair\"\n  and   \"((=) ===> (=) ===> alpha_abs_res) Pair Pair\"\n  and   \"((=) ===> (=) ===> alpha_abs_lst) Pair Pair\"", "lemma [quot_respect]:\n  shows \"((=) ===> alpha_abs_set ===> alpha_abs_set) permute permute\"\n  and   \"((=) ===> alpha_abs_res ===> alpha_abs_res) permute permute\"\n  and   \"((=) ===> alpha_abs_lst ===> alpha_abs_lst) permute permute\"", "lemma Abs_eq_iff:\n  shows \"[bs]set. x = [bs']set. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>set (=) supp p (bs', y))\"\n  and   \"[bs]res. x = [bs']res. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>res (=) supp p (bs', y))\"\n  and   \"[cs]lst. x = [cs']lst. y \\<longleftrightarrow> (\\<exists>p. (cs, x) \\<approx>lst (=) supp p (cs', y))\"", "lemma Abs_eq_iff2:\n  shows \"[bs]set. x = [bs']set. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>set ((=)) supp p (bs', y) \\<and> supp p \\<subseteq> bs \\<union> bs')\"\n  and   \"[bs]res. x = [bs']res. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>res ((=)) supp p (bs', y) \\<and> supp p \\<subseteq> bs \\<union> bs')\"\n  and   \"[cs]lst. x = [cs']lst. y \\<longleftrightarrow> (\\<exists>p. (cs, x) \\<approx>lst ((=)) supp p (cs', y) \\<and> supp p \\<subseteq> set cs \\<union> set cs')\"", "lemma Abs_eq_res_set:\n  shows \"[bs]res. x = [cs]res. y \\<longleftrightarrow> [bs \\<inter> supp x]set. x = [cs \\<inter> supp y]set. y\"", "lemma Abs_eq_res_supp:\n  assumes asm: \"supp x \\<subseteq> bs\"\n  shows \"[as]res. x = [as \\<inter> bs]res. x\"", "lemma Abs_exhausts[cases type]:\n  shows \"(\\<And>as (x::'a::pt). y1 = [as]set. x \\<Longrightarrow> P1) \\<Longrightarrow> P1\"\n  and   \"(\\<And>as (x::'a::pt). y2 = [as]res. x \\<Longrightarrow> P2) \\<Longrightarrow> P2\"\n  and   \"(\\<And>bs (x::'a::pt). y3 = [bs]lst. x \\<Longrightarrow> P3) \\<Longrightarrow> P3\"", "lemma permute_Abs_set[simp]:\n  fixes x::\"'a::pt\"\n  shows \"(p \\<bullet> ([as]set. x)) = [p \\<bullet> as]set. (p \\<bullet> x)\"", "lemma permute_Abs_res[simp]:\n  fixes x::\"'a::pt\"\n  shows \"(p \\<bullet> ([as]res. x)) = [p \\<bullet> as]res. (p \\<bullet> x)\"", "lemma permute_Abs_lst[simp]:\n  fixes x::\"'a::pt\"\n  shows \"(p \\<bullet> ([as]lst. x)) = [p \\<bullet> as]lst. (p \\<bullet> x)\"", "lemmas permute_Abs[eqvt] = permute_Abs_set permute_Abs_res permute_Abs_lst", "lemma Abs_swap1:\n  assumes a1: \"a \\<notin> (supp x) - bs\"\n  and     a2: \"b \\<notin> (supp x) - bs\"\n  shows \"[bs]set. x = [(a \\<rightleftharpoons> b) \\<bullet> bs]set. ((a \\<rightleftharpoons> b) \\<bullet> x)\"\n  and   \"[bs]res. x = [(a \\<rightleftharpoons> b) \\<bullet> bs]res. ((a \\<rightleftharpoons> b) \\<bullet> x)\"", "lemma Abs_swap2:\n  assumes a1: \"a \\<notin> (supp x) - (set bs)\"\n  and     a2: \"b \\<notin> (supp x) - (set bs)\"\n  shows \"[bs]lst. x = [(a \\<rightleftharpoons> b) \\<bullet> bs]lst. ((a \\<rightleftharpoons> b) \\<bullet> x)\"", "lemma Abs_supports:\n  shows \"((supp x) - as) supports ([as]set. x)\"\n  and   \"((supp x) - as) supports ([as]res. x)\"\n  and   \"((supp x) - set bs) supports ([bs]lst. x)\"", "lemma supp_funs_eqvt[eqvt]:\n  shows \"(p \\<bullet> supp_set x) = supp_set (p \\<bullet> x)\"\n  and   \"(p \\<bullet> supp_res y) = supp_res (p \\<bullet> y)\"\n  and   \"(p \\<bullet> supp_lst z) = supp_lst (p \\<bullet> z)\"", "lemma Abs_fresh_aux:\n  shows \"a \\<sharp> [bs]set. x \\<Longrightarrow> a \\<sharp> supp_set ([bs]set. x)\"\n  and   \"a \\<sharp> [bs]res. x \\<Longrightarrow> a \\<sharp> supp_res ([bs]res. x)\"\n  and   \"a \\<sharp> [cs]lst. x \\<Longrightarrow> a \\<sharp> supp_lst ([cs]lst. x)\"", "lemma Abs_supp_subset1:\n  assumes a: \"finite (supp x)\"\n  shows \"(supp x) - as \\<subseteq> supp ([as]set. x)\"\n  and   \"(supp x) - as \\<subseteq> supp ([as]res. x)\"\n  and   \"(supp x) - (set bs) \\<subseteq> supp ([bs]lst. x)\"", "lemma Abs_supp_subset2:\n  assumes a: \"finite (supp x)\"\n  shows \"supp ([as]set. x) \\<subseteq> (supp x) - as\"\n  and   \"supp ([as]res. x) \\<subseteq> (supp x) - as\"\n  and   \"supp ([bs]lst. x) \\<subseteq> (supp x) - (set bs)\"", "lemma Abs_finite_supp:\n  assumes a: \"finite (supp x)\"\n  shows \"supp ([as]set. x) = (supp x) - as\"\n  and   \"supp ([as]res. x) = (supp x) - as\"\n  and   \"supp ([bs]lst. x) = (supp x) - (set bs)\"", "lemma supp_Abs:\n  fixes x::\"'a::fs\"\n  shows \"supp ([as]set. x) = (supp x) - as\"\n  and   \"supp ([as]res. x) = (supp x) - as\"\n  and   \"supp ([bs]lst. x) = (supp x) - (set bs)\"", "lemma Abs_fresh_iff:\n  fixes x::\"'a::fs\"\n  shows \"a \\<sharp> [bs]set. x \\<longleftrightarrow> a \\<in> bs \\<or> (a \\<notin> bs \\<and> a \\<sharp> x)\"\n  and   \"a \\<sharp> [bs]res. x \\<longleftrightarrow> a \\<in> bs \\<or> (a \\<notin> bs \\<and> a \\<sharp> x)\"\n  and   \"a \\<sharp> [cs]lst. x \\<longleftrightarrow> a \\<in> (set cs) \\<or> (a \\<notin> (set cs) \\<and> a \\<sharp> x)\"", "lemma Abs_fresh_star_iff:\n  fixes x::\"'a::fs\"\n  shows \"as \\<sharp>* ([bs]set. x) \\<longleftrightarrow> (as - bs) \\<sharp>* x\"\n  and   \"as \\<sharp>* ([bs]res. x) \\<longleftrightarrow> (as - bs) \\<sharp>* x\"\n  and   \"as \\<sharp>* ([cs]lst. x) \\<longleftrightarrow> (as - set cs) \\<sharp>* x\"", "lemma Abs_fresh_star:\n  fixes x::\"'a::fs\"\n  shows \"as \\<subseteq> as' \\<Longrightarrow> as \\<sharp>* ([as']set. x)\"\n  and   \"as \\<subseteq> as' \\<Longrightarrow> as \\<sharp>* ([as']res. x)\"\n  and   \"bs \\<subseteq> set bs' \\<Longrightarrow> bs \\<sharp>* ([bs']lst. x)\"", "lemma Abs_fresh_star2:\n  fixes x::\"'a::fs\"\n  shows \"as \\<inter> bs = {} \\<Longrightarrow> as \\<sharp>* ([bs]set. x) \\<longleftrightarrow> as \\<sharp>* x\"\n  and   \"as \\<inter> bs = {} \\<Longrightarrow> as \\<sharp>* ([bs]res. x) \\<longleftrightarrow> as \\<sharp>* x\"\n  and   \"cs \\<inter> set ds = {} \\<Longrightarrow> cs \\<sharp>* ([ds]lst. x) \\<longleftrightarrow> cs \\<sharp>* x\"", "lemma Abs1_eq:\n  fixes x y::\"'a::fs\"\n  shows \"[{atom a}]set. x = [{atom a}]set. y \\<longleftrightarrow> x = y\"\n  and   \"[{atom a}]res. x = [{atom a}]res. y \\<longleftrightarrow> x = y\"\n  and   \"[[atom a]]lst. x = [[atom a]]lst. y \\<longleftrightarrow> x = y\"", "lemma Abs1_eq_iff_fresh:\n  fixes x y::\"'a::fs\"\n  and a b c::\"'b::at\"\n  assumes \"atom c \\<sharp> (a, b, x, y)\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\"", "lemma Abs1_eq_iff_all:\n  fixes x y::\"'a::fs\"\n  and z::\"'c::fs\"\n  and a b::\"'b::at\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (\\<forall>c. atom c \\<sharp> z \\<longrightarrow> atom c \\<sharp> (a, b, x, y) \\<longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y)\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (\\<forall>c. atom c \\<sharp> z \\<longrightarrow> atom c \\<sharp> (a, b, x, y) \\<longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y)\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (\\<forall>c. atom c \\<sharp> z \\<longrightarrow> atom c \\<sharp> (a, b, x, y) \\<longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y)\"", "lemma Abs1_eq_iff:\n  fixes x y::\"'a::fs\"\n  and a b::\"'b::at\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\"", "lemma Abs1_eq_iff':\n  fixes x::\"'a::fs\"\n  and a b::\"'b::at\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x)\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x)\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x)\"", "lemma Abs_rename_set:\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]set. x = [p \\<bullet> bs]set. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\"", "lemma Abs_rename_res:\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]res. x = [p \\<bullet> bs]res. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\"", "lemma Abs_rename_lst:\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> (set bs)) \\<sharp>* x\"\n  shows \"\\<exists>q. [bs]lst. x = [p \\<bullet> bs]lst. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\"", "lemma Abs_rename_set':\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]set. x = [q \\<bullet> bs]set. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\"", "lemma Abs_rename_res':\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]res. x = [q \\<bullet> bs]res. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\"", "lemma Abs_rename_lst':\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> (set bs)) \\<sharp>* x\"\n  shows \"\\<exists>q. [bs]lst. x = [q \\<bullet> bs]lst. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\"", "lemma [quot_respect]:\n  shows \"((R1 ===> (=)) ===> (R2 ===> (=)) ===> rel_prod R1 R2 ===> (=)) prod_fv prod_fv\"", "lemma [quot_preserve]:\n  assumes q1: \"Quotient3 R1 abs1 rep1\"\n  and     q2: \"Quotient3 R2 abs2 rep2\"\n  shows \"((abs1 ---> id) ---> (abs2 ---> id) ---> map_prod rep1 rep2 ---> id) prod_fv = prod_fv\"", "lemma [mono]:\n  shows \"A <= B \\<Longrightarrow> C <= D ==> prod_alpha A C <= prod_alpha B D\"", "lemma [eqvt]:\n  shows \"p \\<bullet> prod_alpha A B x y = prod_alpha (p \\<bullet> A) (p \\<bullet> B) (p \\<bullet> x) (p \\<bullet> y)\"", "lemma [eqvt]:\n  shows \"p \\<bullet> prod_fv A B (x, y) = prod_fv (p \\<bullet> A) (p \\<bullet> B) (p \\<bullet> x, p \\<bullet> y)\"", "lemma prod_fv_supp:\n  shows \"prod_fv supp supp = supp\"", "lemma prod_alpha_eq:\n  shows \"prod_alpha ((=)) ((=)) = ((=))\""], "translations": [["", "lemmas alphas = alpha_set.simps alpha_res.simps alpha_lst.simps"], ["", "notation\n  alpha_set (\"_ \\<approx>set _ _ _ _\" [100, 100, 100, 100, 100] 100) and\n  alpha_res (\"_ \\<approx>res _ _ _ _\" [100, 100, 100, 100, 100] 100) and\n  alpha_lst (\"_ \\<approx>lst _ _ _ _\" [100, 100, 100, 100, 100] 100)"], ["", "section \\<open>Mono\\<close>"], ["", "lemma [mono]:\n  shows \"R1 \\<le> R2 \\<Longrightarrow> alpha_set bs R1 \\<le> alpha_set bs R2\"\n  and   \"R1 \\<le> R2 \\<Longrightarrow> alpha_res bs R1 \\<le> alpha_res bs R2\"\n  and   \"R1 \\<le> R2 \\<Longrightarrow> alpha_lst cs R1 \\<le> alpha_lst cs R2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R1 \\<le> R2 \\<Longrightarrow>\n     alpha_set bs R1 \\<le> alpha_set bs R2) &&&\n    (R1 \\<le> R2 \\<Longrightarrow>\n     alpha_res bs R1 \\<le> alpha_res bs R2) &&&\n    (R1 \\<le> R2 \\<Longrightarrow> alpha_lst cs R1 \\<le> alpha_lst cs R2)", "by (case_tac [!] bs, case_tac [!] cs)\n     (auto simp: le_fun_def le_bool_def alphas)"], ["", "section \\<open>Equivariance\\<close>"], ["", "lemma alpha_eqvt[eqvt]:\n  shows \"(bs, x) \\<approx>set R f q (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>set (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(bs, x) \\<approx>res R f q (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>res (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(ds, x) \\<approx>lst R f q (es, y) \\<Longrightarrow> (p \\<bullet> ds, p \\<bullet> x) \\<approx>lst (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> es, p \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bs, x) \\<approx>set R f q (cs, y) \\<Longrightarrow>\n     (p \\<bullet> bs,\n      p \\<bullet> x) \\<approx>set (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> cs,\n       p \\<bullet> y)) &&&\n    ((bs, x) \\<approx>res R f q (cs, y) \\<Longrightarrow>\n     (p \\<bullet> bs,\n      p \\<bullet> x) \\<approx>res (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> cs,\n       p \\<bullet> y)) &&&\n    ((ds, x) \\<approx>lst R f q (es, y) \\<Longrightarrow>\n     (p \\<bullet> ds,\n      p \\<bullet> x) \\<approx>lst (p \\<bullet> R) (p \\<bullet> f) (p \\<bullet> q) (p \\<bullet> es,\n       p \\<bullet> y))", "unfolding alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> bs = cs \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - p \\<bullet> bs =\n     (p \\<bullet> f) (p \\<bullet> y) - p \\<bullet> cs \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) ((p \\<bullet> q) \\<bullet> p \\<bullet> x)\n      (p \\<bullet> y) \\<and>\n     (p \\<bullet> q) \\<bullet> p \\<bullet> bs = p \\<bullet> cs) &&&\n    (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and> R (q \\<bullet> x) y \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - p \\<bullet> bs =\n     (p \\<bullet> f) (p \\<bullet> y) - p \\<bullet> cs \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) ((p \\<bullet> q) \\<bullet> p \\<bullet> x)\n      (p \\<bullet> y)) &&&\n    (f x - set ds = f y - set es \\<and>\n     (f x - set ds) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> ds = es \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - set (p \\<bullet> ds) =\n     (p \\<bullet> f) (p \\<bullet> y) - set (p \\<bullet> es) \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      set (p \\<bullet> ds)) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) ((p \\<bullet> q) \\<bullet> p \\<bullet> x)\n      (p \\<bullet> y) \\<and>\n     (p \\<bullet> q) \\<bullet> p \\<bullet> ds = p \\<bullet> es)", "unfolding permute_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> bs = cs \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - p \\<bullet> bs =\n     (p \\<bullet> f) (p \\<bullet> y) - p \\<bullet> cs \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) (p \\<bullet> q \\<bullet> x) (p \\<bullet> y) \\<and>\n     p \\<bullet> q \\<bullet> bs = p \\<bullet> cs) &&&\n    (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and> R (q \\<bullet> x) y \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - p \\<bullet> bs =\n     (p \\<bullet> f) (p \\<bullet> y) - p \\<bullet> cs \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) (p \\<bullet> q \\<bullet> x) (p \\<bullet> y)) &&&\n    (f x - set ds = f y - set es \\<and>\n     (f x - set ds) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> ds = es \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - set (p \\<bullet> ds) =\n     (p \\<bullet> f) (p \\<bullet> y) - set (p \\<bullet> es) \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      set (p \\<bullet> ds)) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) (p \\<bullet> q \\<bullet> x) (p \\<bullet> y) \\<and>\n     p \\<bullet> q \\<bullet> ds = p \\<bullet> es)", "unfolding set_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> bs = cs \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - p \\<bullet> bs =\n     (p \\<bullet> f) (p \\<bullet> y) - p \\<bullet> cs \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) (p \\<bullet> q \\<bullet> x) (p \\<bullet> y) \\<and>\n     p \\<bullet> q \\<bullet> bs = p \\<bullet> cs) &&&\n    (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and> R (q \\<bullet> x) y \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - p \\<bullet> bs =\n     (p \\<bullet> f) (p \\<bullet> y) - p \\<bullet> cs \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) (p \\<bullet> q \\<bullet> x) (p \\<bullet> y)) &&&\n    (f x - set ds = f y - set es \\<and>\n     (f x - set ds) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> ds = es \\<Longrightarrow>\n     (p \\<bullet> f) (p \\<bullet> x) - p \\<bullet> set ds =\n     (p \\<bullet> f) (p \\<bullet> y) - p \\<bullet> set es \\<and>\n     ((p \\<bullet> f) (p \\<bullet> x) -\n      p \\<bullet> set ds) \\<sharp>* (p \\<bullet> q) \\<and>\n     (p \\<bullet> R) (p \\<bullet> q \\<bullet> x) (p \\<bullet> y) \\<and>\n     p \\<bullet> q \\<bullet> ds = p \\<bullet> es)", "unfolding permute_fun_app_eq[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> bs = cs \\<Longrightarrow>\n     p \\<bullet> f x - p \\<bullet> bs =\n     p \\<bullet> f y - p \\<bullet> cs \\<and>\n     (p \\<bullet> f x - p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> q \\<bullet> bs = p \\<bullet> cs) &&&\n    (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and> R (q \\<bullet> x) y \\<Longrightarrow>\n     p \\<bullet> f x - p \\<bullet> bs =\n     p \\<bullet> f y - p \\<bullet> cs \\<and>\n     (p \\<bullet> f x - p \\<bullet> bs) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y) &&&\n    (f x - set ds = f y - set es \\<and>\n     (f x - set ds) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> ds = es \\<Longrightarrow>\n     p \\<bullet> f x - p \\<bullet> set ds =\n     p \\<bullet> f y - p \\<bullet> set es \\<and>\n     (p \\<bullet> f x - p \\<bullet> set ds) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> q \\<bullet> ds = p \\<bullet> es)", "unfolding Diff_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> bs = cs \\<Longrightarrow>\n     p \\<bullet> (f x - bs) = p \\<bullet> (f y - cs) \\<and>\n     (p \\<bullet> (f x - bs)) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> q \\<bullet> bs = p \\<bullet> cs) &&&\n    (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and> R (q \\<bullet> x) y \\<Longrightarrow>\n     p \\<bullet> (f x - bs) = p \\<bullet> (f y - cs) \\<and>\n     (p \\<bullet> (f x - bs)) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y) &&&\n    (f x - set ds = f y - set es \\<and>\n     (f x - set ds) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> ds = es \\<Longrightarrow>\n     p \\<bullet> (f x - set ds) = p \\<bullet> (f y - set es) \\<and>\n     (p \\<bullet> (f x - set ds)) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> q \\<bullet> ds = p \\<bullet> es)", "unfolding eq_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> bs = cs \\<Longrightarrow>\n     p \\<bullet> (f x - bs = f y - cs) \\<and>\n     (p \\<bullet> (f x - bs)) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> (q \\<bullet> bs = cs)) &&&\n    (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and> R (q \\<bullet> x) y \\<Longrightarrow>\n     p \\<bullet> (f x - bs = f y - cs) \\<and>\n     (p \\<bullet> (f x - bs)) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y) &&&\n    (f x - set ds = f y - set es \\<and>\n     (f x - set ds) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> ds = es \\<Longrightarrow>\n     p \\<bullet> (f x - set ds = f y - set es) \\<and>\n     (p \\<bullet> (f x - set ds)) \\<sharp>* (p \\<bullet> q) \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> (q \\<bullet> ds = es))", "unfolding fresh_star_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> bs = cs \\<Longrightarrow>\n     p \\<bullet> (f x - bs = f y - cs) \\<and>\n     p \\<bullet> (f x - bs) \\<sharp>* q \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> (q \\<bullet> bs = cs)) &&&\n    (f x - bs = f y - cs \\<and>\n     (f x - bs) \\<sharp>* q \\<and> R (q \\<bullet> x) y \\<Longrightarrow>\n     p \\<bullet> (f x - bs = f y - cs) \\<and>\n     p \\<bullet> (f x - bs) \\<sharp>* q \\<and>\n     p \\<bullet> R (q \\<bullet> x) y) &&&\n    (f x - set ds = f y - set es \\<and>\n     (f x - set ds) \\<sharp>* q \\<and>\n     R (q \\<bullet> x) y \\<and> q \\<bullet> ds = es \\<Longrightarrow>\n     p \\<bullet> (f x - set ds = f y - set es) \\<and>\n     p \\<bullet> (f x - set ds) \\<sharp>* q \\<and>\n     p \\<bullet> R (q \\<bullet> x) y \\<and>\n     p \\<bullet> (q \\<bullet> ds = es))", "by (auto simp only: permute_bool_def)"], ["", "section \\<open>Equivalence\\<close>"], ["", "lemma alpha_refl:\n  assumes a: \"R x x\"\n  shows \"(bs, x) \\<approx>set R f 0 (bs, x)\"\n  and   \"(bs, x) \\<approx>res R f 0 (bs, x)\"\n  and   \"(cs, x) \\<approx>lst R f 0 (cs, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>set R f 0 (bs, x) &&&\n    (bs, x) \\<approx>res R f 0 (bs, x) &&&\n    (cs, x) \\<approx>lst R f 0 (cs, x)", "using a"], ["proof (prove)\nusing this:\n  R x x\n\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>set R f 0 (bs, x) &&&\n    (bs, x) \\<approx>res R f 0 (bs, x) &&&\n    (cs, x) \\<approx>lst R f 0 (cs, x)", "unfolding alphas"], ["proof (prove)\nusing this:\n  R x x\n\ngoal (1 subgoal):\n 1. f x - bs = f x - bs \\<and>\n    (f x - bs) \\<sharp>* 0 \\<and>\n    R (0 \\<bullet> x) x \\<and> 0 \\<bullet> bs = bs &&&\n    f x - bs = f x - bs \\<and>\n    (f x - bs) \\<sharp>* 0 \\<and> R (0 \\<bullet> x) x &&&\n    f x - set cs = f x - set cs \\<and>\n    (f x - set cs) \\<sharp>* 0 \\<and>\n    R (0 \\<bullet> x) x \\<and> 0 \\<bullet> cs = cs", "unfolding fresh_star_def"], ["proof (prove)\nusing this:\n  R x x\n\ngoal (1 subgoal):\n 1. f x - bs = f x - bs \\<and>\n    (\\<forall>a\\<in>f x - bs. a \\<sharp> 0) \\<and>\n    R (0 \\<bullet> x) x \\<and> 0 \\<bullet> bs = bs &&&\n    f x - bs = f x - bs \\<and>\n    (\\<forall>a\\<in>f x - bs. a \\<sharp> 0) \\<and> R (0 \\<bullet> x) x &&&\n    f x - set cs = f x - set cs \\<and>\n    (\\<forall>a\\<in>f x - set cs. a \\<sharp> 0) \\<and>\n    R (0 \\<bullet> x) x \\<and> 0 \\<bullet> cs = cs", "by (simp_all add: fresh_zero_perm)"], ["", "lemma alpha_sym:\n  assumes a: \"R (p \\<bullet> x) y \\<Longrightarrow> R (- p \\<bullet> y) x\"\n  shows \"(bs, x) \\<approx>set R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>set R f (- p) (bs, x)\"\n  and   \"(bs, x) \\<approx>res R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>res R f (- p) (bs, x)\"\n  and   \"(ds, x) \\<approx>lst R f p (es, y) \\<Longrightarrow> (es, y) \\<approx>lst R f (- p) (ds, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bs, x) \\<approx>set R f p (cs, y) \\<Longrightarrow>\n     (cs, y) \\<approx>set R f (- p) (bs, x)) &&&\n    ((bs, x) \\<approx>res R f p (cs, y) \\<Longrightarrow>\n     (cs, y) \\<approx>res R f (- p) (bs, x)) &&&\n    ((ds, x) \\<approx>lst R f p (es, y) \\<Longrightarrow>\n     (es, y) \\<approx>lst R f (- p) (ds, x))", "unfolding alphas fresh_star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (\\<forall>a\\<in>f x - bs. a \\<sharp> p) \\<and>\n     R (p \\<bullet> x) y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     f y - cs = f x - bs \\<and>\n     (\\<forall>a\\<in>f y - cs. a \\<sharp> - p) \\<and>\n     R (- p \\<bullet> y) x \\<and> - p \\<bullet> cs = bs) &&&\n    (f x - bs = f y - cs \\<and>\n     (\\<forall>a\\<in>f x - bs. a \\<sharp> p) \\<and>\n     R (p \\<bullet> x) y \\<Longrightarrow>\n     f y - cs = f x - bs \\<and>\n     (\\<forall>a\\<in>f y - cs. a \\<sharp> - p) \\<and>\n     R (- p \\<bullet> y) x) &&&\n    (f x - set ds = f y - set es \\<and>\n     (\\<forall>a\\<in>f x - set ds. a \\<sharp> p) \\<and>\n     R (p \\<bullet> x) y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     f y - set es = f x - set ds \\<and>\n     (\\<forall>a\\<in>f y - set es. a \\<sharp> - p) \\<and>\n     R (- p \\<bullet> y) x \\<and> - p \\<bullet> es = ds)", "using a"], ["proof (prove)\nusing this:\n  R (p \\<bullet> x) y \\<Longrightarrow> R (- p \\<bullet> y) x\n\ngoal (1 subgoal):\n 1. (f x - bs = f y - cs \\<and>\n     (\\<forall>a\\<in>f x - bs. a \\<sharp> p) \\<and>\n     R (p \\<bullet> x) y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     f y - cs = f x - bs \\<and>\n     (\\<forall>a\\<in>f y - cs. a \\<sharp> - p) \\<and>\n     R (- p \\<bullet> y) x \\<and> - p \\<bullet> cs = bs) &&&\n    (f x - bs = f y - cs \\<and>\n     (\\<forall>a\\<in>f x - bs. a \\<sharp> p) \\<and>\n     R (p \\<bullet> x) y \\<Longrightarrow>\n     f y - cs = f x - bs \\<and>\n     (\\<forall>a\\<in>f y - cs. a \\<sharp> - p) \\<and>\n     R (- p \\<bullet> y) x) &&&\n    (f x - set ds = f y - set es \\<and>\n     (\\<forall>a\\<in>f x - set ds. a \\<sharp> p) \\<and>\n     R (p \\<bullet> x) y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     f y - set es = f x - set ds \\<and>\n     (\\<forall>a\\<in>f y - set es. a \\<sharp> - p) \\<and>\n     R (- p \\<bullet> y) x \\<and> - p \\<bullet> es = ds)", "by (auto simp: fresh_minus_perm)"], ["", "lemma alpha_trans:\n  assumes a: \"\\<lbrakk>R (p \\<bullet> x) y; R (q \\<bullet> y) z\\<rbrakk> \\<Longrightarrow> R ((q + p) \\<bullet> x) z\"\n  shows \"\\<lbrakk>(bs, x) \\<approx>set R f p (cs, y); (cs, y) \\<approx>set R f q (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>set R f (q + p) (ds, z)\"\n  and   \"\\<lbrakk>(bs, x) \\<approx>res R f p (cs, y); (cs, y) \\<approx>res R f q (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>res R f (q + p) (ds, z)\"\n  and   \"\\<lbrakk>(es, x) \\<approx>lst R f p (gs, y); (gs, y) \\<approx>lst R f q (hs, z)\\<rbrakk> \\<Longrightarrow> (es, x) \\<approx>lst R f (q + p) (hs, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>(bs, x) \\<approx>set R f p (cs, y);\n      (cs, y) \\<approx>set R f q (ds, z)\\<rbrakk>\n     \\<Longrightarrow> (bs, x) \\<approx>set R f (q + p) (ds, z)) &&&\n    (\\<lbrakk>(bs, x) \\<approx>res R f p (cs, y);\n      (cs, y) \\<approx>res R f q (ds, z)\\<rbrakk>\n     \\<Longrightarrow> (bs, x) \\<approx>res R f (q + p) (ds, z)) &&&\n    (\\<lbrakk>(es, x) \\<approx>lst R f p (gs, y);\n      (gs, y) \\<approx>lst R f q (hs, z)\\<rbrakk>\n     \\<Longrightarrow> (es, x) \\<approx>lst R f (q + p) (hs, z))", "using a"], ["proof (prove)\nusing this:\n  \\<lbrakk>R (p \\<bullet> x) y; R (q \\<bullet> y) z\\<rbrakk>\n  \\<Longrightarrow> R ((q + p) \\<bullet> x) z\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(bs, x) \\<approx>set R f p (cs, y);\n      (cs, y) \\<approx>set R f q (ds, z)\\<rbrakk>\n     \\<Longrightarrow> (bs, x) \\<approx>set R f (q + p) (ds, z)) &&&\n    (\\<lbrakk>(bs, x) \\<approx>res R f p (cs, y);\n      (cs, y) \\<approx>res R f q (ds, z)\\<rbrakk>\n     \\<Longrightarrow> (bs, x) \\<approx>res R f (q + p) (ds, z)) &&&\n    (\\<lbrakk>(es, x) \\<approx>lst R f p (gs, y);\n      (gs, y) \\<approx>lst R f q (hs, z)\\<rbrakk>\n     \\<Longrightarrow> (es, x) \\<approx>lst R f (q + p) (hs, z))", "unfolding alphas fresh_star_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>R (p \\<bullet> x) y; R (q \\<bullet> y) z\\<rbrakk>\n  \\<Longrightarrow> R ((q + p) \\<bullet> x) z\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>f x - bs = f y - cs \\<and>\n              (\\<forall>a\\<in>f x - bs. a \\<sharp> p) \\<and>\n              R (p \\<bullet> x) y \\<and> p \\<bullet> bs = cs;\n      f y - cs = f z - ds \\<and>\n      (\\<forall>a\\<in>f y - cs. a \\<sharp> q) \\<and>\n      R (q \\<bullet> y) z \\<and> q \\<bullet> cs = ds\\<rbrakk>\n     \\<Longrightarrow> f x - bs = f z - ds \\<and>\n                       (\\<forall>a\\<in>f x - bs. a \\<sharp> q + p) \\<and>\n                       R ((q + p) \\<bullet> x) z \\<and>\n                       (q + p) \\<bullet> bs = ds) &&&\n    (\\<lbrakk>f x - bs = f y - cs \\<and>\n              (\\<forall>a\\<in>f x - bs. a \\<sharp> p) \\<and>\n              R (p \\<bullet> x) y;\n      f y - cs = f z - ds \\<and>\n      (\\<forall>a\\<in>f y - cs. a \\<sharp> q) \\<and>\n      R (q \\<bullet> y) z\\<rbrakk>\n     \\<Longrightarrow> f x - bs = f z - ds \\<and>\n                       (\\<forall>a\\<in>f x - bs. a \\<sharp> q + p) \\<and>\n                       R ((q + p) \\<bullet> x) z) &&&\n    (\\<lbrakk>f x - set es = f y - set gs \\<and>\n              (\\<forall>a\\<in>f x - set es. a \\<sharp> p) \\<and>\n              R (p \\<bullet> x) y \\<and> p \\<bullet> es = gs;\n      f y - set gs = f z - set hs \\<and>\n      (\\<forall>a\\<in>f y - set gs. a \\<sharp> q) \\<and>\n      R (q \\<bullet> y) z \\<and> q \\<bullet> gs = hs\\<rbrakk>\n     \\<Longrightarrow> f x - set es = f z - set hs \\<and>\n                       (\\<forall>a\\<in>f x - set es.\n                           a \\<sharp> q + p) \\<and>\n                       R ((q + p) \\<bullet> x) z \\<and>\n                       (q + p) \\<bullet> es = hs)", "by (simp_all add: fresh_plus_perm)"], ["", "lemma alpha_sym_eqvt:\n  assumes a: \"R (p \\<bullet> x) y \\<Longrightarrow> R y (p \\<bullet> x)\"\n  and     b: \"p \\<bullet> R = R\"\n  shows \"(bs, x) \\<approx>set R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>set R f (- p) (bs, x)\"\n  and   \"(bs, x) \\<approx>res R f p (cs, y) \\<Longrightarrow> (cs, y) \\<approx>res R f (- p) (bs, x)\"\n  and   \"(ds, x) \\<approx>lst R f p (es, y) \\<Longrightarrow> (es, y) \\<approx>lst R f (- p) (ds, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bs, x) \\<approx>set R f p (cs, y) \\<Longrightarrow>\n     (cs, y) \\<approx>set R f (- p) (bs, x)) &&&\n    ((bs, x) \\<approx>res R f p (cs, y) \\<Longrightarrow>\n     (cs, y) \\<approx>res R f (- p) (bs, x)) &&&\n    ((ds, x) \\<approx>lst R f p (es, y) \\<Longrightarrow>\n     (es, y) \\<approx>lst R f (- p) (ds, x))", "apply(auto intro!: alpha_sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(bs, x) \\<approx>set R f p (cs, y);\n     R (p \\<bullet> x) y\\<rbrakk>\n    \\<Longrightarrow> R (- p \\<bullet> y) x\n 2. \\<lbrakk>(bs, x) \\<approx>res R f p (cs, y);\n     R (p \\<bullet> x) y\\<rbrakk>\n    \\<Longrightarrow> R (- p \\<bullet> y) x\n 3. \\<lbrakk>(ds, x) \\<approx>lst R f p (es, y);\n     R (p \\<bullet> x) y\\<rbrakk>\n    \\<Longrightarrow> R (- p \\<bullet> y) x", "apply(drule_tac [!] a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(bs, x) \\<approx>set R f p (cs, y);\n     R y (p \\<bullet> x)\\<rbrakk>\n    \\<Longrightarrow> R (- p \\<bullet> y) x\n 2. \\<lbrakk>(bs, x) \\<approx>res R f p (cs, y);\n     R y (p \\<bullet> x)\\<rbrakk>\n    \\<Longrightarrow> R (- p \\<bullet> y) x\n 3. \\<lbrakk>(ds, x) \\<approx>lst R f p (es, y);\n     R y (p \\<bullet> x)\\<rbrakk>\n    \\<Longrightarrow> R (- p \\<bullet> y) x", "apply(rule_tac [!] p=\"p\" in permute_boolE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(bs, x) \\<approx>set R f p (cs, y);\n     R y (p \\<bullet> x)\\<rbrakk>\n    \\<Longrightarrow> p \\<bullet> R (- p \\<bullet> y) x\n 2. \\<lbrakk>(bs, x) \\<approx>res R f p (cs, y);\n     R y (p \\<bullet> x)\\<rbrakk>\n    \\<Longrightarrow> p \\<bullet> R (- p \\<bullet> y) x\n 3. \\<lbrakk>(ds, x) \\<approx>lst R f p (es, y);\n     R y (p \\<bullet> x)\\<rbrakk>\n    \\<Longrightarrow> p \\<bullet> R (- p \\<bullet> y) x", "apply(simp_all add: b permute_self)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma alpha_set_trans_eqvt:\n  assumes b: \"(cs, y) \\<approx>set R f q (ds, z)\"\n  and     a: \"(bs, x) \\<approx>set R f p (cs, y)\"\n  and     d: \"q \\<bullet> R = R\"\n  and     c: \"\\<lbrakk>R (p \\<bullet> x) y; R y (- q \\<bullet> z)\\<rbrakk> \\<Longrightarrow> R (p \\<bullet> x) (- q \\<bullet> z)\"\n  shows \"(bs, x) \\<approx>set R f (q + p) (ds, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>set R f (q + p) (ds, z)", "apply(rule alpha_trans(1)[OF _ a b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (p \\<bullet> x) y; R (q \\<bullet> y) z\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(drule c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (q \\<bullet> y) z \\<Longrightarrow> R y (- q \\<bullet> z)\n 2. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(rule_tac p=\"q\" in permute_boolE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (q \\<bullet> y) z \\<Longrightarrow> q \\<bullet> R y (- q \\<bullet> z)\n 2. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(simp add: d permute_self)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (p \\<bullet> x) (- q \\<bullet> z);\n     R (q \\<bullet> y) z\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(drule_tac p=\"q\" in permute_boolI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (q \\<bullet> y) z;\n     q \\<bullet> R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(simp add: d permute_self permute_eqvt[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma alpha_res_trans_eqvt:\n  assumes  b: \"(cs, y) \\<approx>res R f q (ds, z)\"\n  and     a: \"(bs, x) \\<approx>res R f p (cs, y)\"\n  and     d: \"q \\<bullet> R = R\"\n  and     c: \"\\<lbrakk>R (p \\<bullet> x) y; R y (- q \\<bullet> z)\\<rbrakk> \\<Longrightarrow> R (p \\<bullet> x) (- q \\<bullet> z)\"\n  shows \"(bs, x) \\<approx>res R f (q + p) (ds, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>res R f (q + p) (ds, z)", "apply(rule alpha_trans(2)[OF _ a b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (p \\<bullet> x) y; R (q \\<bullet> y) z\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(drule c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (q \\<bullet> y) z \\<Longrightarrow> R y (- q \\<bullet> z)\n 2. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(rule_tac p=\"q\" in permute_boolE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (q \\<bullet> y) z \\<Longrightarrow> q \\<bullet> R y (- q \\<bullet> z)\n 2. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(simp add: d permute_self)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (p \\<bullet> x) (- q \\<bullet> z);\n     R (q \\<bullet> y) z\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(drule_tac p=\"q\" in permute_boolI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (q \\<bullet> y) z;\n     q \\<bullet> R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(simp add: d permute_self permute_eqvt[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma alpha_lst_trans_eqvt:\n  assumes b: \"(cs, y) \\<approx>lst R f q (ds, z)\"\n  and     a: \"(bs, x) \\<approx>lst R f p (cs, y)\"\n  and     d: \"q \\<bullet> R = R\"\n  and     c: \"\\<lbrakk>R (p \\<bullet> x) y; R y (- q \\<bullet> z)\\<rbrakk> \\<Longrightarrow> R (p \\<bullet> x) (- q \\<bullet> z)\"\n  shows \"(bs, x) \\<approx>lst R f (q + p) (ds, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>lst R f (q + p) (ds, z)", "apply(rule alpha_trans(3)[OF _ a b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (p \\<bullet> x) y; R (q \\<bullet> y) z\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(drule c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (q \\<bullet> y) z \\<Longrightarrow> R y (- q \\<bullet> z)\n 2. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(rule_tac p=\"q\" in permute_boolE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (q \\<bullet> y) z \\<Longrightarrow> q \\<bullet> R y (- q \\<bullet> z)\n 2. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(simp add: d permute_self)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (q \\<bullet> y) z;\n     R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (p \\<bullet> x) (- q \\<bullet> z);\n     R (q \\<bullet> y) z\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(drule_tac p=\"q\" in permute_boolI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (q \\<bullet> y) z;\n     q \\<bullet> R (p \\<bullet> x) (- q \\<bullet> z)\\<rbrakk>\n    \\<Longrightarrow> R ((q + p) \\<bullet> x) z", "apply(simp add: d permute_self permute_eqvt[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas alpha_trans_eqvt = alpha_set_trans_eqvt alpha_res_trans_eqvt alpha_lst_trans_eqvt"], ["", "section \\<open>General Abstractions\\<close>"], ["", "fun\n  alpha_abs_set\nwhere\n  [simp del]:\n  \"alpha_abs_set (bs, x) (cs, y) \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>set ((=)) supp p (cs, y))\""], ["", "fun\n  alpha_abs_lst\nwhere\n  [simp del]:\n  \"alpha_abs_lst (bs, x) (cs, y) \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>lst ((=)) supp p (cs, y))\""], ["", "fun\n  alpha_abs_res\nwhere\n  [simp del]:\n  \"alpha_abs_res (bs, x) (cs, y) \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>res ((=)) supp p (cs, y))\""], ["", "notation\n  alpha_abs_set (infix \"\\<approx>abs'_set\" 50) and\n  alpha_abs_lst (infix \"\\<approx>abs'_lst\" 50) and\n  alpha_abs_res (infix \"\\<approx>abs'_res\" 50)"], ["", "lemmas alphas_abs = alpha_abs_set.simps alpha_abs_res.simps alpha_abs_lst.simps"], ["", "lemma alphas_abs_refl:\n  shows \"(bs, x) \\<approx>abs_set (bs, x)\"\n  and   \"(bs, x) \\<approx>abs_res (bs, x)\"\n  and   \"(cs, x) \\<approx>abs_lst (cs, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>abs_set (bs, x) &&&\n    (bs, x) \\<approx>abs_res (bs, x) &&& (cs, x) \\<approx>abs_lst (cs, x)", "unfolding alphas_abs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. (bs, x) \\<approx>set (=) supp p (bs, x) &&&\n    \\<exists>p. (bs, x) \\<approx>res (=) supp p (bs, x) &&&\n    \\<exists>p. (cs, x) \\<approx>lst (=) supp p (cs, x)", "unfolding alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (supp x - bs) \\<sharp>* p \\<and>\n       p \\<bullet> x = x \\<and> p \\<bullet> bs = bs &&&\n    \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (supp x - bs) \\<sharp>* p \\<and> p \\<bullet> x = x &&&\n    \\<exists>p.\n       supp x - set cs = supp x - set cs \\<and>\n       (supp x - set cs) \\<sharp>* p \\<and>\n       p \\<bullet> x = x \\<and> p \\<bullet> cs = cs", "unfolding fresh_star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n       p \\<bullet> x = x \\<and> p \\<bullet> bs = bs &&&\n    \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n       p \\<bullet> x = x &&&\n    \\<exists>p.\n       supp x - set cs = supp x - set cs \\<and>\n       (\\<forall>a\\<in>supp x - set cs. a \\<sharp> p) \\<and>\n       p \\<bullet> x = x \\<and> p \\<bullet> cs = cs", "by (rule_tac [!] x=\"0\" in exI)\n     (simp_all add: fresh_zero_perm)"], ["", "lemma alphas_abs_sym:\n  shows \"(bs, x) \\<approx>abs_set (cs, y) \\<Longrightarrow> (cs, y) \\<approx>abs_set (bs, x)\"\n  and   \"(bs, x) \\<approx>abs_res (cs, y) \\<Longrightarrow> (cs, y) \\<approx>abs_res (bs, x)\"\n  and   \"(ds, x) \\<approx>abs_lst (es, y) \\<Longrightarrow> (es, y) \\<approx>abs_lst (ds, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bs, x) \\<approx>abs_set (cs, y) \\<Longrightarrow>\n     (cs, y) \\<approx>abs_set (bs, x)) &&&\n    ((bs, x) \\<approx>abs_res (cs, y) \\<Longrightarrow>\n     (cs, y) \\<approx>abs_res (bs, x)) &&&\n    ((ds, x) \\<approx>abs_lst (es, y) \\<Longrightarrow>\n     (es, y) \\<approx>abs_lst (ds, x))", "unfolding alphas_abs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p. (bs, x) \\<approx>set (=) supp p (cs, y) \\<Longrightarrow>\n     \\<exists>p. (cs, y) \\<approx>set (=) supp p (bs, x)) &&&\n    (\\<exists>p. (bs, x) \\<approx>res (=) supp p (cs, y) \\<Longrightarrow>\n     \\<exists>p. (cs, y) \\<approx>res (=) supp p (bs, x)) &&&\n    (\\<exists>p. (ds, x) \\<approx>lst (=) supp p (es, y) \\<Longrightarrow>\n     \\<exists>p. (es, y) \\<approx>lst (=) supp p (ds, x))", "unfolding alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     \\<exists>p.\n        supp y - cs = supp x - bs \\<and>\n        (supp y - cs) \\<sharp>* p \\<and>\n        p \\<bullet> y = x \\<and> p \\<bullet> cs = bs) &&&\n    (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and> p \\<bullet> x = y \\<Longrightarrow>\n     \\<exists>p.\n        supp y - cs = supp x - bs \\<and>\n        (supp y - cs) \\<sharp>* p \\<and> p \\<bullet> y = x) &&&\n    (\\<exists>p.\n        supp x - set ds = supp y - set es \\<and>\n        (supp x - set ds) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     \\<exists>p.\n        supp y - set es = supp x - set ds \\<and>\n        (supp y - set es) \\<sharp>* p \\<and>\n        p \\<bullet> y = x \\<and> p \\<bullet> es = ds)", "unfolding fresh_star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     \\<exists>p.\n        supp y - cs = supp x - bs \\<and>\n        (\\<forall>a\\<in>supp y - cs. a \\<sharp> p) \\<and>\n        p \\<bullet> y = x \\<and> p \\<bullet> cs = bs) &&&\n    (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n        p \\<bullet> x = y \\<Longrightarrow>\n     \\<exists>p.\n        supp y - cs = supp x - bs \\<and>\n        (\\<forall>a\\<in>supp y - cs. a \\<sharp> p) \\<and>\n        p \\<bullet> y = x) &&&\n    (\\<exists>p.\n        supp x - set ds = supp y - set es \\<and>\n        (\\<forall>a\\<in>supp x - set ds. a \\<sharp> p) \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     \\<exists>p.\n        supp y - set es = supp x - set ds \\<and>\n        (\\<forall>a\\<in>supp y - set es. a \\<sharp> p) \\<and>\n        p \\<bullet> y = x \\<and> p \\<bullet> es = ds)", "by (erule_tac [!] exE, rule_tac [!] x=\"-p\" in exI)\n     (auto simp: fresh_minus_perm)"], ["", "lemma alphas_abs_trans:\n  shows \"\\<lbrakk>(bs, x) \\<approx>abs_set (cs, y); (cs, y) \\<approx>abs_set (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>abs_set (ds, z)\"\n  and   \"\\<lbrakk>(bs, x) \\<approx>abs_res (cs, y); (cs, y) \\<approx>abs_res (ds, z)\\<rbrakk> \\<Longrightarrow> (bs, x) \\<approx>abs_res (ds, z)\"\n  and   \"\\<lbrakk>(es, x) \\<approx>abs_lst (gs, y); (gs, y) \\<approx>abs_lst (hs, z)\\<rbrakk> \\<Longrightarrow> (es, x) \\<approx>abs_lst (hs, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>(bs, x) \\<approx>abs_set (cs, y);\n      (cs, y) \\<approx>abs_set (ds, z)\\<rbrakk>\n     \\<Longrightarrow> (bs, x) \\<approx>abs_set (ds, z)) &&&\n    (\\<lbrakk>(bs, x) \\<approx>abs_res (cs, y);\n      (cs, y) \\<approx>abs_res (ds, z)\\<rbrakk>\n     \\<Longrightarrow> (bs, x) \\<approx>abs_res (ds, z)) &&&\n    (\\<lbrakk>(es, x) \\<approx>abs_lst (gs, y);\n      (gs, y) \\<approx>abs_lst (hs, z)\\<rbrakk>\n     \\<Longrightarrow> (es, x) \\<approx>abs_lst (hs, z))", "unfolding alphas_abs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<exists>p. (bs, x) \\<approx>set (=) supp p (cs, y);\n      \\<exists>p. (cs, y) \\<approx>set (=) supp p (ds, z)\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          (bs, x) \\<approx>set (=) supp p (ds, z)) &&&\n    (\\<lbrakk>\\<exists>p. (bs, x) \\<approx>res (=) supp p (cs, y);\n      \\<exists>p. (cs, y) \\<approx>res (=) supp p (ds, z)\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          (bs, x) \\<approx>res (=) supp p (ds, z)) &&&\n    (\\<lbrakk>\\<exists>p. (es, x) \\<approx>lst (=) supp p (gs, y);\n      \\<exists>p. (gs, y) \\<approx>lst (=) supp p (hs, z)\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p. (es, x) \\<approx>lst (=) supp p (hs, z))", "unfolding alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<exists>p.\n                 supp x - bs = supp y - cs \\<and>\n                 (supp x - bs) \\<sharp>* p \\<and>\n                 p \\<bullet> x = y \\<and> p \\<bullet> bs = cs;\n      \\<exists>p.\n         supp y - cs = supp z - ds \\<and>\n         (supp y - cs) \\<sharp>* p \\<and>\n         p \\<bullet> y = z \\<and> p \\<bullet> cs = ds\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          supp x - bs = supp z - ds \\<and>\n                          (supp x - bs) \\<sharp>* p \\<and>\n                          p \\<bullet> x = z \\<and> p \\<bullet> bs = ds) &&&\n    (\\<lbrakk>\\<exists>p.\n                 supp x - bs = supp y - cs \\<and>\n                 (supp x - bs) \\<sharp>* p \\<and> p \\<bullet> x = y;\n      \\<exists>p.\n         supp y - cs = supp z - ds \\<and>\n         (supp y - cs) \\<sharp>* p \\<and> p \\<bullet> y = z\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          supp x - bs = supp z - ds \\<and>\n                          (supp x - bs) \\<sharp>* p \\<and>\n                          p \\<bullet> x = z) &&&\n    (\\<lbrakk>\\<exists>p.\n                 supp x - set es = supp y - set gs \\<and>\n                 (supp x - set es) \\<sharp>* p \\<and>\n                 p \\<bullet> x = y \\<and> p \\<bullet> es = gs;\n      \\<exists>p.\n         supp y - set gs = supp z - set hs \\<and>\n         (supp y - set gs) \\<sharp>* p \\<and>\n         p \\<bullet> y = z \\<and> p \\<bullet> gs = hs\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          supp x - set es = supp z - set hs \\<and>\n                          (supp x - set es) \\<sharp>* p \\<and>\n                          p \\<bullet> x = z \\<and> p \\<bullet> es = hs)", "unfolding fresh_star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<exists>p.\n                 supp x - bs = supp y - cs \\<and>\n                 (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                 p \\<bullet> x = y \\<and> p \\<bullet> bs = cs;\n      \\<exists>p.\n         supp y - cs = supp z - ds \\<and>\n         (\\<forall>a\\<in>supp y - cs. a \\<sharp> p) \\<and>\n         p \\<bullet> y = z \\<and> p \\<bullet> cs = ds\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          supp x - bs = supp z - ds \\<and>\n                          (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                          p \\<bullet> x = z \\<and> p \\<bullet> bs = ds) &&&\n    (\\<lbrakk>\\<exists>p.\n                 supp x - bs = supp y - cs \\<and>\n                 (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                 p \\<bullet> x = y;\n      \\<exists>p.\n         supp y - cs = supp z - ds \\<and>\n         (\\<forall>a\\<in>supp y - cs. a \\<sharp> p) \\<and>\n         p \\<bullet> y = z\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          supp x - bs = supp z - ds \\<and>\n                          (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                          p \\<bullet> x = z) &&&\n    (\\<lbrakk>\\<exists>p.\n                 supp x - set es = supp y - set gs \\<and>\n                 (\\<forall>a\\<in>supp x - set es. a \\<sharp> p) \\<and>\n                 p \\<bullet> x = y \\<and> p \\<bullet> es = gs;\n      \\<exists>p.\n         supp y - set gs = supp z - set hs \\<and>\n         (\\<forall>a\\<in>supp y - set gs. a \\<sharp> p) \\<and>\n         p \\<bullet> y = z \\<and> p \\<bullet> gs = hs\\<rbrakk>\n     \\<Longrightarrow> \\<exists>p.\n                          supp x - set es = supp z - set hs \\<and>\n                          (\\<forall>a\\<in>supp x - set es.\n                              a \\<sharp> p) \\<and>\n                          p \\<bullet> x = z \\<and> p \\<bullet> es = hs)", "apply(erule_tac [!] exE, erule_tac [!] exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p pa.\n       \\<lbrakk>supp x - bs = supp y - cs \\<and>\n                (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                p \\<bullet> x = y \\<and> p \\<bullet> bs = cs;\n        supp y - cs = supp z - ds \\<and>\n        (\\<forall>a\\<in>supp y - cs. a \\<sharp> pa) \\<and>\n        pa \\<bullet> y = z \\<and> pa \\<bullet> cs = ds\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            supp x - bs = supp z - ds \\<and>\n                            (\\<forall>a\\<in>supp x - bs.\n                                a \\<sharp> p) \\<and>\n                            p \\<bullet> x = z \\<and> p \\<bullet> bs = ds\n 2. \\<And>p pa.\n       \\<lbrakk>supp x - bs = supp y - cs \\<and>\n                (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                p \\<bullet> x = y;\n        supp y - cs = supp z - ds \\<and>\n        (\\<forall>a\\<in>supp y - cs. a \\<sharp> pa) \\<and>\n        pa \\<bullet> y = z\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            supp x - bs = supp z - ds \\<and>\n                            (\\<forall>a\\<in>supp x - bs.\n                                a \\<sharp> p) \\<and>\n                            p \\<bullet> x = z\n 3. \\<And>p pa.\n       \\<lbrakk>supp x - set es = supp y - set gs \\<and>\n                (\\<forall>a\\<in>supp x - set es. a \\<sharp> p) \\<and>\n                p \\<bullet> x = y \\<and> p \\<bullet> es = gs;\n        supp y - set gs = supp z - set hs \\<and>\n        (\\<forall>a\\<in>supp y - set gs. a \\<sharp> pa) \\<and>\n        pa \\<bullet> y = z \\<and> pa \\<bullet> gs = hs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            supp x - set es = supp z - set hs \\<and>\n                            (\\<forall>a\\<in>supp x - set es.\n                                a \\<sharp> p) \\<and>\n                            p \\<bullet> x = z \\<and> p \\<bullet> es = hs", "apply(rule_tac [!] x=\"pa + p\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p pa.\n       \\<lbrakk>supp x - bs = supp y - cs \\<and>\n                (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                p \\<bullet> x = y \\<and> p \\<bullet> bs = cs;\n        supp y - cs = supp z - ds \\<and>\n        (\\<forall>a\\<in>supp y - cs. a \\<sharp> pa) \\<and>\n        pa \\<bullet> y = z \\<and> pa \\<bullet> cs = ds\\<rbrakk>\n       \\<Longrightarrow> supp x - bs = supp z - ds \\<and>\n                         (\\<forall>a\\<in>supp x - bs.\n                             a \\<sharp> pa + p) \\<and>\n                         (pa + p) \\<bullet> x = z \\<and>\n                         (pa + p) \\<bullet> bs = ds\n 2. \\<And>p pa.\n       \\<lbrakk>supp x - bs = supp y - cs \\<and>\n                (\\<forall>a\\<in>supp x - bs. a \\<sharp> p) \\<and>\n                p \\<bullet> x = y;\n        supp y - cs = supp z - ds \\<and>\n        (\\<forall>a\\<in>supp y - cs. a \\<sharp> pa) \\<and>\n        pa \\<bullet> y = z\\<rbrakk>\n       \\<Longrightarrow> supp x - bs = supp z - ds \\<and>\n                         (\\<forall>a\\<in>supp x - bs.\n                             a \\<sharp> pa + p) \\<and>\n                         (pa + p) \\<bullet> x = z\n 3. \\<And>p pa.\n       \\<lbrakk>supp x - set es = supp y - set gs \\<and>\n                (\\<forall>a\\<in>supp x - set es. a \\<sharp> p) \\<and>\n                p \\<bullet> x = y \\<and> p \\<bullet> es = gs;\n        supp y - set gs = supp z - set hs \\<and>\n        (\\<forall>a\\<in>supp y - set gs. a \\<sharp> pa) \\<and>\n        pa \\<bullet> y = z \\<and> pa \\<bullet> gs = hs\\<rbrakk>\n       \\<Longrightarrow> supp x - set es = supp z - set hs \\<and>\n                         (\\<forall>a\\<in>supp x - set es.\n                             a \\<sharp> pa + p) \\<and>\n                         (pa + p) \\<bullet> x = z \\<and>\n                         (pa + p) \\<bullet> es = hs", "by (simp_all add: fresh_plus_perm)"], ["", "lemma alphas_abs_eqvt:\n  shows \"(bs, x) \\<approx>abs_set (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>abs_set (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(bs, x) \\<approx>abs_res (cs, y) \\<Longrightarrow> (p \\<bullet> bs, p \\<bullet> x) \\<approx>abs_res (p \\<bullet> cs, p \\<bullet> y)\"\n  and   \"(ds, x) \\<approx>abs_lst (es, y) \\<Longrightarrow> (p \\<bullet> ds, p \\<bullet> x) \\<approx>abs_lst (p \\<bullet> es, p \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bs, x) \\<approx>abs_set (cs, y) \\<Longrightarrow>\n     (p \\<bullet> bs, p \\<bullet> x) \\<approx>abs_set\n     (p \\<bullet> cs, p \\<bullet> y)) &&&\n    ((bs, x) \\<approx>abs_res (cs, y) \\<Longrightarrow>\n     (p \\<bullet> bs, p \\<bullet> x) \\<approx>abs_res\n     (p \\<bullet> cs, p \\<bullet> y)) &&&\n    ((ds, x) \\<approx>abs_lst (es, y) \\<Longrightarrow>\n     (p \\<bullet> ds, p \\<bullet> x) \\<approx>abs_lst\n     (p \\<bullet> es, p \\<bullet> y))", "unfolding alphas_abs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p. (bs, x) \\<approx>set (=) supp p (cs, y) \\<Longrightarrow>\n     \\<exists>pa.\n        (p \\<bullet> bs,\n         p \\<bullet> x) \\<approx>set (=) supp pa (p \\<bullet> cs,\n            p \\<bullet> y)) &&&\n    (\\<exists>p. (bs, x) \\<approx>res (=) supp p (cs, y) \\<Longrightarrow>\n     \\<exists>pa.\n        (p \\<bullet> bs,\n         p \\<bullet> x) \\<approx>res (=) supp pa (p \\<bullet> cs,\n            p \\<bullet> y)) &&&\n    (\\<exists>p. (ds, x) \\<approx>lst (=) supp p (es, y) \\<Longrightarrow>\n     \\<exists>pa.\n        (p \\<bullet> ds,\n         p \\<bullet> x) \\<approx>lst (=) supp pa (p \\<bullet> es,\n            p \\<bullet> y))", "unfolding alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     \\<exists>pa.\n        supp (p \\<bullet> x) - p \\<bullet> bs =\n        supp (p \\<bullet> y) - p \\<bullet> cs \\<and>\n        (supp (p \\<bullet> x) - p \\<bullet> bs) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> bs = p \\<bullet> cs) &&&\n    (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and> p \\<bullet> x = y \\<Longrightarrow>\n     \\<exists>pa.\n        supp (p \\<bullet> x) - p \\<bullet> bs =\n        supp (p \\<bullet> y) - p \\<bullet> cs \\<and>\n        (supp (p \\<bullet> x) - p \\<bullet> bs) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y) &&&\n    (\\<exists>p.\n        supp x - set ds = supp y - set es \\<and>\n        (supp x - set ds) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     \\<exists>pa.\n        supp (p \\<bullet> x) - set (p \\<bullet> ds) =\n        supp (p \\<bullet> y) - set (p \\<bullet> es) \\<and>\n        (supp (p \\<bullet> x) - set (p \\<bullet> ds)) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> ds = p \\<bullet> es)", "unfolding set_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     \\<exists>pa.\n        supp (p \\<bullet> x) - p \\<bullet> bs =\n        supp (p \\<bullet> y) - p \\<bullet> cs \\<and>\n        (supp (p \\<bullet> x) - p \\<bullet> bs) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> bs = p \\<bullet> cs) &&&\n    (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and> p \\<bullet> x = y \\<Longrightarrow>\n     \\<exists>pa.\n        supp (p \\<bullet> x) - p \\<bullet> bs =\n        supp (p \\<bullet> y) - p \\<bullet> cs \\<and>\n        (supp (p \\<bullet> x) - p \\<bullet> bs) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y) &&&\n    (\\<exists>p.\n        supp x - set ds = supp y - set es \\<and>\n        (supp x - set ds) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     \\<exists>pa.\n        supp (p \\<bullet> x) - p \\<bullet> set ds =\n        supp (p \\<bullet> y) - p \\<bullet> set es \\<and>\n        (supp (p \\<bullet> x) - p \\<bullet> set ds) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> ds = p \\<bullet> es)", "unfolding supp_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     \\<exists>pa.\n        p \\<bullet> supp x - p \\<bullet> bs =\n        p \\<bullet> supp y - p \\<bullet> cs \\<and>\n        (p \\<bullet> supp x - p \\<bullet> bs) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> bs = p \\<bullet> cs) &&&\n    (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and> p \\<bullet> x = y \\<Longrightarrow>\n     \\<exists>pa.\n        p \\<bullet> supp x - p \\<bullet> bs =\n        p \\<bullet> supp y - p \\<bullet> cs \\<and>\n        (p \\<bullet> supp x - p \\<bullet> bs) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y) &&&\n    (\\<exists>p.\n        supp x - set ds = supp y - set es \\<and>\n        (supp x - set ds) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     \\<exists>pa.\n        p \\<bullet> supp x - p \\<bullet> set ds =\n        p \\<bullet> supp y - p \\<bullet> set es \\<and>\n        (p \\<bullet> supp x - p \\<bullet> set ds) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> ds = p \\<bullet> es)", "unfolding Diff_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> bs = cs \\<Longrightarrow>\n     \\<exists>pa.\n        p \\<bullet> (supp x - bs) = p \\<bullet> (supp y - cs) \\<and>\n        (p \\<bullet> (supp x - bs)) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> bs = p \\<bullet> cs) &&&\n    (\\<exists>p.\n        supp x - bs = supp y - cs \\<and>\n        (supp x - bs) \\<sharp>* p \\<and> p \\<bullet> x = y \\<Longrightarrow>\n     \\<exists>pa.\n        p \\<bullet> (supp x - bs) = p \\<bullet> (supp y - cs) \\<and>\n        (p \\<bullet> (supp x - bs)) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y) &&&\n    (\\<exists>p.\n        supp x - set ds = supp y - set es \\<and>\n        (supp x - set ds) \\<sharp>* p \\<and>\n        p \\<bullet> x = y \\<and> p \\<bullet> ds = es \\<Longrightarrow>\n     \\<exists>pa.\n        p \\<bullet> (supp x - set ds) = p \\<bullet> (supp y - set es) \\<and>\n        (p \\<bullet> (supp x - set ds)) \\<sharp>* pa \\<and>\n        pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n        pa \\<bullet> p \\<bullet> ds = p \\<bullet> es)", "apply(erule_tac [!] exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pa.\n       supp x - bs = supp y - cs \\<and>\n       (supp x - bs) \\<sharp>* pa \\<and>\n       pa \\<bullet> x = y \\<and> pa \\<bullet> bs = cs \\<Longrightarrow>\n       \\<exists>pa.\n          p \\<bullet> (supp x - bs) = p \\<bullet> (supp y - cs) \\<and>\n          (p \\<bullet> (supp x - bs)) \\<sharp>* pa \\<and>\n          pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n          pa \\<bullet> p \\<bullet> bs = p \\<bullet> cs\n 2. \\<And>pa.\n       supp x - bs = supp y - cs \\<and>\n       (supp x - bs) \\<sharp>* pa \\<and>\n       pa \\<bullet> x = y \\<Longrightarrow>\n       \\<exists>pa.\n          p \\<bullet> (supp x - bs) = p \\<bullet> (supp y - cs) \\<and>\n          (p \\<bullet> (supp x - bs)) \\<sharp>* pa \\<and>\n          pa \\<bullet> p \\<bullet> x = p \\<bullet> y\n 3. \\<And>pa.\n       supp x - set ds = supp y - set es \\<and>\n       (supp x - set ds) \\<sharp>* pa \\<and>\n       pa \\<bullet> x = y \\<and> pa \\<bullet> ds = es \\<Longrightarrow>\n       \\<exists>pa.\n          p \\<bullet> (supp x - set ds) =\n          p \\<bullet> (supp y - set es) \\<and>\n          (p \\<bullet> (supp x - set ds)) \\<sharp>* pa \\<and>\n          pa \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n          pa \\<bullet> p \\<bullet> ds = p \\<bullet> es", "apply(rule_tac [!] x=\"p \\<bullet> pa\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pa.\n       supp x - bs = supp y - cs \\<and>\n       (supp x - bs) \\<sharp>* pa \\<and>\n       pa \\<bullet> x = y \\<and> pa \\<bullet> bs = cs \\<Longrightarrow>\n       p \\<bullet> (supp x - bs) = p \\<bullet> (supp y - cs) \\<and>\n       (p \\<bullet> (supp x - bs)) \\<sharp>* (p \\<bullet> pa) \\<and>\n       (p \\<bullet> pa) \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n       (p \\<bullet> pa) \\<bullet> p \\<bullet> bs = p \\<bullet> cs\n 2. \\<And>pa.\n       supp x - bs = supp y - cs \\<and>\n       (supp x - bs) \\<sharp>* pa \\<and>\n       pa \\<bullet> x = y \\<Longrightarrow>\n       p \\<bullet> (supp x - bs) = p \\<bullet> (supp y - cs) \\<and>\n       (p \\<bullet> (supp x - bs)) \\<sharp>* (p \\<bullet> pa) \\<and>\n       (p \\<bullet> pa) \\<bullet> p \\<bullet> x = p \\<bullet> y\n 3. \\<And>pa.\n       supp x - set ds = supp y - set es \\<and>\n       (supp x - set ds) \\<sharp>* pa \\<and>\n       pa \\<bullet> x = y \\<and> pa \\<bullet> ds = es \\<Longrightarrow>\n       p \\<bullet> (supp x - set ds) = p \\<bullet> (supp y - set es) \\<and>\n       (p \\<bullet> (supp x - set ds)) \\<sharp>* (p \\<bullet> pa) \\<and>\n       (p \\<bullet> pa) \\<bullet> p \\<bullet> x = p \\<bullet> y \\<and>\n       (p \\<bullet> pa) \\<bullet> p \\<bullet> ds = p \\<bullet> es", "by (auto simp only: fresh_star_permute_iff permute_eqvt[symmetric])"], ["", "section \\<open>Strengthening the equivalence\\<close>"], ["", "lemma disjoint_right_eq:\n  assumes a: \"A \\<union> B1 = A \\<union> B2\"\n  and     b: \"A \\<inter> B1 = {}\" \"A \\<inter> B2 = {}\"\n  shows \"B1 = B2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B1 = B2", "using a b"], ["proof (prove)\nusing this:\n  A \\<union> B1 = A \\<union> B2\n  A \\<inter> B1 = {}\n  A \\<inter> B2 = {}\n\ngoal (1 subgoal):\n 1. B1 = B2", "by (metis Int_Un_distrib2 Int_absorb2 Int_commute Un_upper2)"], ["", "lemma supp_property_res:\n  assumes a: \"(as, x) \\<approx>res (=) supp p (as', x')\"\n  shows \"p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "from a"], ["proof (chain)\npicking this:\n  (as, x) \\<approx>res (=) supp p (as', x')", "have \"(supp x - as) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (as, x) \\<approx>res (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<sharp>* p", "by  (auto simp only: alphas)"], ["proof (state)\nthis:\n  (supp x - as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  (supp x - as) \\<sharp>* p", "have *: \"p \\<bullet> (supp x - as) = (supp x - as)\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x - as) = supp x - as", "by (simp add: atom_set_perm_eq)"], ["proof (state)\nthis:\n  p \\<bullet> (supp x - as) = supp x - as\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"(supp x' - as') \\<union> (supp x' \\<inter> as') = supp x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x' - as' \\<union> supp x' \\<inter> as' = supp x'", "by auto"], ["proof (state)\nthis:\n  supp x' - as' \\<union> supp x' \\<inter> as' = supp x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  supp x' - as' \\<union> supp x' \\<inter> as' = supp x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"\\<dots> = supp (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x' = supp (p \\<bullet> x)", "using a"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>res (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. supp x' = supp (p \\<bullet> x)", "by (simp add: alphas)"], ["proof (state)\nthis:\n  supp x' = supp (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  supp x' = supp (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"\\<dots> = p \\<bullet> (supp x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (p \\<bullet> x) = p \\<bullet> supp x", "by (simp add: supp_eqvt)"], ["proof (state)\nthis:\n  supp (p \\<bullet> x) = p \\<bullet> supp x\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  supp (p \\<bullet> x) = p \\<bullet> supp x\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"\\<dots> = p \\<bullet> ((supp x - as) \\<union> (supp x \\<inter> as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> supp x =\n    p \\<bullet> (supp x - as \\<union> supp x \\<inter> as)", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> supp x = p \\<bullet> (supp x - as \\<union> supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  p \\<bullet> supp x = p \\<bullet> (supp x - as \\<union> supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"\\<dots> = (p \\<bullet> (supp x - as)) \\<union> (p \\<bullet> (supp x \\<inter> as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x - as \\<union> supp x \\<inter> as) =\n    p \\<bullet> (supp x - as) \\<union> p \\<bullet> (supp x \\<inter> as)", "by (simp add: union_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> (supp x - as \\<union> supp x \\<inter> as) =\n  p \\<bullet> (supp x - as) \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  p \\<bullet> (supp x - as \\<union> supp x \\<inter> as) =\n  p \\<bullet> (supp x - as) \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"\\<dots> = (supp x - as) \\<union> (p \\<bullet> (supp x \\<inter> as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x - as) \\<union> p \\<bullet> (supp x \\<inter> as) =\n    supp x - as \\<union> p \\<bullet> (supp x \\<inter> as)", "using *"], ["proof (prove)\nusing this:\n  p \\<bullet> (supp x - as) = supp x - as\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x - as) \\<union> p \\<bullet> (supp x \\<inter> as) =\n    supp x - as \\<union> p \\<bullet> (supp x \\<inter> as)", "by simp"], ["proof (state)\nthis:\n  p \\<bullet> (supp x - as) \\<union> p \\<bullet> (supp x \\<inter> as) =\n  supp x - as \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  p \\<bullet> (supp x - as) \\<union> p \\<bullet> (supp x \\<inter> as) =\n  supp x - as \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"\\<dots> = (supp x' - as') \\<union> (p \\<bullet> (supp x \\<inter> as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> p \\<bullet> (supp x \\<inter> as) =\n    supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)", "using a"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>res (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. supp x - as \\<union> p \\<bullet> (supp x \\<inter> as) =\n    supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)", "by (simp add: alphas)"], ["proof (state)\nthis:\n  supp x - as \\<union> p \\<bullet> (supp x \\<inter> as) =\n  supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "finally"], ["proof (chain)\npicking this:\n  supp x' - as' \\<union> supp x' \\<inter> as' =\n  supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)", "have \"(supp x' - as') \\<union> (supp x' \\<inter> as') = (supp x' - as') \\<union> (p \\<bullet> (supp x \\<inter> as))\""], ["proof (prove)\nusing this:\n  supp x' - as' \\<union> supp x' \\<inter> as' =\n  supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. supp x' - as' \\<union> supp x' \\<inter> as' =\n    supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)", "."], ["proof (state)\nthis:\n  supp x' - as' \\<union> supp x' \\<inter> as' =\n  supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "moreover"], ["proof (state)\nthis:\n  supp x' - as' \\<union> supp x' \\<inter> as' =\n  supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"(supp x' - as') \\<inter> (supp x' \\<inter> as') = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp x' - as') \\<inter> (supp x' \\<inter> as') = {}", "by auto"], ["proof (state)\nthis:\n  (supp x' - as') \\<inter> (supp x' \\<inter> as') = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "moreover"], ["proof (state)\nthis:\n  (supp x' - as') \\<inter> (supp x' \\<inter> as') = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "have \"(supp x - as) \\<inter> (supp x \\<inter> as) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp x - as) \\<inter> (supp x \\<inter> as) = {}", "by auto"], ["proof (state)\nthis:\n  (supp x - as) \\<inter> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  (supp x - as) \\<inter> (supp x \\<inter> as) = {}", "have \"p \\<bullet> ((supp x - as) \\<inter> (supp x \\<inter> as) = {})\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<inter> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> ((supp x - as) \\<inter> (supp x \\<inter> as) = {})", "by (simp add: permute_bool_def)"], ["proof (state)\nthis:\n  p \\<bullet> ((supp x - as) \\<inter> (supp x \\<inter> as) = {})\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> ((supp x - as) \\<inter> (supp x \\<inter> as) = {})", "have \"(p \\<bullet> (supp x - as)) \\<inter> (p \\<bullet> (supp x \\<inter> as)) = {}\""], ["proof (prove)\nusing this:\n  p \\<bullet> ((supp x - as) \\<inter> (supp x \\<inter> as) = {})\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "by (perm_simp) (simp)"], ["proof (state)\nthis:\n  p \\<bullet> (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "have \"(supp x - as) \\<inter> (p \\<bullet> (supp x \\<inter> as)) = {}\""], ["proof (prove)\nusing this:\n  p \\<bullet> (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "using *"], ["proof (prove)\nusing this:\n  p \\<bullet> (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n  p \\<bullet> (supp x - as) = supp x - as\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "by simp"], ["proof (state)\nthis:\n  (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "have \"(supp x' - as') \\<inter> (p \\<bullet> (supp x \\<inter> as)) = {}\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. (supp x' - as') \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "using a"], ["proof (prove)\nusing this:\n  (supp x - as) \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n  (as, x) \\<approx>res (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. (supp x' - as') \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "by (simp add: alphas)"], ["proof (state)\nthis:\n  (supp x' - as') \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "ultimately"], ["proof (chain)\npicking this:\n  supp x' - as' \\<union> supp x' \\<inter> as' =\n  supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)\n  (supp x' - as') \\<inter> (supp x' \\<inter> as') = {}\n  (supp x' - as') \\<inter> p \\<bullet> (supp x \\<inter> as) = {}", "show \"p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'\""], ["proof (prove)\nusing this:\n  supp x' - as' \\<union> supp x' \\<inter> as' =\n  supp x' - as' \\<union> p \\<bullet> (supp x \\<inter> as)\n  (supp x' - as') \\<inter> (supp x' \\<inter> as') = {}\n  (supp x' - as') \\<inter> p \\<bullet> (supp x \\<inter> as) = {}\n\ngoal (1 subgoal):\n 1. p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'", "by (auto dest: disjoint_right_eq)"], ["proof (state)\nthis:\n  p \\<bullet> (supp x \\<inter> as) = supp x' \\<inter> as'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_abs_res_stronger1_aux:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>res (=) supp p (as', x') \\<and> supp p \\<subseteq> (supp x \\<inter> as) \\<union> (supp x' \\<inter> as')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "from asm"], ["proof (chain)\npicking this:\n  (as, x) \\<approx>res (=) supp p' (as', x')", "have 0: \"(supp x - as) \\<sharp>* p'\""], ["proof (prove)\nusing this:\n  (as, x) \\<approx>res (=) supp p' (as', x')\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<sharp>* p'", "by  (auto simp only: alphas)"], ["proof (state)\nthis:\n  (supp x - as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  (supp x - as) \\<sharp>* p'", "have #: \"p' \\<bullet> (supp x - as) = (supp x - as)\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. p' \\<bullet> (supp x - as) = supp x - as", "by (simp add: atom_set_perm_eq)"], ["proof (state)\nthis:\n  p' \\<bullet> (supp x - as) = supp x - as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "obtain p where *: \"\\<forall>b \\<in> supp x. p \\<bullet> b = p' \\<bullet> b\" and **: \"supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b;\n         supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using set_renaming_perm2"], ["proof (prove)\nusing this:\n  \\<exists>q.\n     (\\<forall>b\\<in>?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> ?bs \\<union> ?p \\<bullet> ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b;\n         supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n  supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "from *"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b", "have a: \"p \\<bullet> x = p' \\<bullet> x\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = p' \\<bullet> x", "using supp_perm_perm_eq"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n  \\<forall>a\\<in>supp ?x. ?p \\<bullet> a = ?q \\<bullet> a \\<Longrightarrow>\n  ?p \\<bullet> ?x = ?q \\<bullet> ?x\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = p' \\<bullet> x", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> x = p' \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "from 0"], ["proof (chain)\npicking this:\n  (supp x - as) \\<sharp>* p'", "have 1: \"(supp x - as) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<sharp>* p", "using *"], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p'\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<sharp>* p", "by (auto simp: fresh_star_def fresh_perm)"], ["proof (state)\nthis:\n  (supp x - as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  (supp x - as) \\<sharp>* p", "have 2: \"(supp x - as) \\<inter> supp p = {}\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<inter> supp p = {}", "by (auto simp: fresh_star_def fresh_def)"], ["proof (state)\nthis:\n  (supp x - as) \\<inter> supp p = {}\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "have b: \"supp x = (supp x - as) \\<union> (supp x \\<inter> as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x = supp x - as \\<union> supp x \\<inter> as", "by auto"], ["proof (state)\nthis:\n  supp x = supp x - as \\<union> supp x \\<inter> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "have \"supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x", "using **"], ["proof (prove)\nusing this:\n  supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x", "by simp"], ["proof (state)\nthis:\n  supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  supp p \\<subseteq> supp x \\<union> p' \\<bullet> supp x\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> (p' \\<bullet> ((supp x - as) \\<union> (supp x \\<inter> as)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x \\<union> p' \\<bullet> supp x =\n    supp x - as \\<union> supp x \\<inter> as \\<union>\n    p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as)", "using b"], ["proof (prove)\nusing this:\n  supp x = supp x - as \\<union> supp x \\<inter> as\n\ngoal (1 subgoal):\n 1. supp x \\<union> p' \\<bullet> supp x =\n    supp x - as \\<union> supp x \\<inter> as \\<union>\n    p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as)", "by simp"], ["proof (state)\nthis:\n  supp x \\<union> p' \\<bullet> supp x =\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  supp x \\<union> p' \\<bullet> supp x =\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> ((p' \\<bullet> (supp x - as)) \\<union> (p' \\<bullet> (supp x \\<inter> as)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union>\n    p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) =\n    supp x - as \\<union> supp x \\<inter> as \\<union>\n    (p' \\<bullet> (supp x - as) \\<union> p' \\<bullet> (supp x \\<inter> as))", "by (simp add: union_eqvt)"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) =\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union> p' \\<bullet> (supp x \\<inter> as))\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) =\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union> p' \\<bullet> (supp x \\<inter> as))\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> (p' \\<bullet> (supp x \\<inter> as))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union>\n    (p' \\<bullet> (supp x - as) \\<union>\n     p' \\<bullet> (supp x \\<inter> as)) =\n    supp x - as \\<union> supp x \\<inter> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as)", "using #"], ["proof (prove)\nusing this:\n  p' \\<bullet> (supp x - as) = supp x - as\n\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union>\n    (p' \\<bullet> (supp x - as) \\<union>\n     p' \\<bullet> (supp x \\<inter> as)) =\n    supp x - as \\<union> supp x \\<inter> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as)", "by auto"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union> p' \\<bullet> (supp x \\<inter> as)) =\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "also"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union> p' \\<bullet> (supp x \\<inter> as)) =\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> (supp x' \\<inter> as')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as) =\n    supp x - as \\<union> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "using asm"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>res (=) supp p' (as', x')\n\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as) =\n    supp x - as \\<union> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "by (simp add: supp_property_res)"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as) =\n  supp x - as \\<union> supp x \\<inter> as \\<union> supp x' \\<inter> as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "finally"], ["proof (chain)\npicking this:\n  supp p\n  \\<subseteq> supp x - as \\<union> supp x \\<inter> as \\<union>\n              supp x' \\<inter> as'", "have \"supp p \\<subseteq> (supp x - as) \\<union> (supp x \\<inter> as) \\<union> (supp x' \\<inter> as')\""], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x - as \\<union> supp x \\<inter> as \\<union>\n              supp x' \\<inter> as'\n\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x - as \\<union> supp x \\<inter> as \\<union>\n                supp x' \\<inter> as'", "."], ["proof (state)\nthis:\n  supp p\n  \\<subseteq> supp x - as \\<union> supp x \\<inter> as \\<union>\n              supp x' \\<inter> as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "then"], ["proof (chain)\npicking this:\n  supp p\n  \\<subseteq> supp x - as \\<union> supp x \\<inter> as \\<union>\n              supp x' \\<inter> as'", "have \"supp p \\<subseteq> (supp x \\<inter> as) \\<union> (supp x' \\<inter> as')\""], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x - as \\<union> supp x \\<inter> as \\<union>\n              supp x' \\<inter> as'\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "using 2"], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x - as \\<union> supp x \\<inter> as \\<union>\n              supp x' \\<inter> as'\n  (supp x - as) \\<inter> supp p = {}\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "by auto"], ["proof (state)\nthis:\n  supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "moreover"], ["proof (state)\nthis:\n  supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "have \"(as, x) \\<approx>res (=) supp p (as', x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as, x) \\<approx>res (=) supp p (as', x')", "using asm 1 a"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>res (=) supp p' (as', x')\n  (supp x - as) \\<sharp>* p\n  p \\<bullet> x = p' \\<bullet> x\n\ngoal (1 subgoal):\n 1. (as, x) \\<approx>res (=) supp p (as', x')", "by (simp add: alphas)"], ["proof (state)\nthis:\n  (as, x) \\<approx>res (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "ultimately"], ["proof (chain)\npicking this:\n  supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'\n  (as, x) \\<approx>res (=) supp p (as', x')", "show \"\\<exists>p. (as, x) \\<approx>res (=) supp p (as', x') \\<and> supp p \\<subseteq> (supp x \\<inter> as) \\<union> (supp x' \\<inter> as')\""], ["proof (prove)\nusing this:\n  supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'\n  (as, x) \\<approx>res (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'", "by blast"], ["proof (state)\nthis:\n  \\<exists>p.\n     (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n     supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_abs_res_minimal:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p (as', x')\"\n  shows \"(as \\<inter> supp x, x) \\<approx>res (=) supp p (as' \\<inter> supp x', x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>res (=) supp p (as' \\<inter> supp x', x')", "using asm"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>res (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>res (=) supp p (as' \\<inter> supp x', x')", "unfolding alpha_res"], ["proof (prove)\nusing this:\n  supp x - as = supp x' - as' \\<and>\n  (supp x - as) \\<sharp>* p \\<and> p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. supp x - as \\<inter> supp x = supp x' - as' \\<inter> supp x' \\<and>\n    (supp x - as \\<inter> supp x) \\<sharp>* p \\<and> p \\<bullet> x = x'", "by (auto simp: Diff_Int)"], ["", "lemma alpha_abs_res_abs_set:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p (as', x')\"\n  shows \"(as \\<inter> supp x, x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "have c: \"p \\<bullet> x = x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> x = x'", "using alpha_abs_res_minimal[OF asm]"], ["proof (prove)\nusing this:\n  (as \\<inter> supp x, x) \\<approx>res (=) supp p (as' \\<inter> supp x', x')\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = x'", "unfolding alpha_res"], ["proof (prove)\nusing this:\n  supp x - as \\<inter> supp x = supp x' - as' \\<inter> supp x' \\<and>\n  (supp x - as \\<inter> supp x) \\<sharp>* p \\<and> p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = x'", "by clarify"], ["proof (state)\nthis:\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> x = x'", "have a: \"supp x - as \\<inter> supp x = supp (p \\<bullet> x) - as' \\<inter> supp (p \\<bullet> x)\""], ["proof (prove)\nusing this:\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. supp x - as \\<inter> supp x =\n    supp (p \\<bullet> x) - as' \\<inter> supp (p \\<bullet> x)", "using alpha_abs_res_minimal[OF asm]"], ["proof (prove)\nusing this:\n  p \\<bullet> x = x'\n  (as \\<inter> supp x, x) \\<approx>res (=) supp p (as' \\<inter> supp x', x')\n\ngoal (1 subgoal):\n 1. supp x - as \\<inter> supp x =\n    supp (p \\<bullet> x) - as' \\<inter> supp (p \\<bullet> x)", "by (simp add: alpha_res)"], ["proof (state)\nthis:\n  supp x - as \\<inter> supp x =\n  supp (p \\<bullet> x) - as' \\<inter> supp (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "have b: \"(supp x - as \\<inter> supp x) \\<sharp>* p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp x - as \\<inter> supp x) \\<sharp>* p", "using alpha_abs_res_minimal[OF asm]"], ["proof (prove)\nusing this:\n  (as \\<inter> supp x, x) \\<approx>res (=) supp p (as' \\<inter> supp x', x')\n\ngoal (1 subgoal):\n 1. (supp x - as \\<inter> supp x) \\<sharp>* p", "unfolding alpha_res"], ["proof (prove)\nusing this:\n  supp x - as \\<inter> supp x = supp x' - as' \\<inter> supp x' \\<and>\n  (supp x - as \\<inter> supp x) \\<sharp>* p \\<and> p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. (supp x - as \\<inter> supp x) \\<sharp>* p", "by clarify"], ["proof (state)\nthis:\n  (supp x - as \\<inter> supp x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "have \"p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp (p \\<bullet> x)", "by (metis Int_commute asm c supp_property_res)"], ["proof (state)\nthis:\n  p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp (p \\<bullet> x)", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "using a b c"], ["proof (prove)\nusing this:\n  p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp (p \\<bullet> x)\n  supp x - as \\<inter> supp x =\n  supp (p \\<bullet> x) - as' \\<inter> supp (p \\<bullet> x)\n  (supp x - as \\<inter> supp x) \\<sharp>* p\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. (as \\<inter> supp x,\n     x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')", "unfolding alpha_set"], ["proof (prove)\nusing this:\n  p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp (p \\<bullet> x)\n  supp x - as \\<inter> supp x =\n  supp (p \\<bullet> x) - as' \\<inter> supp (p \\<bullet> x)\n  (supp x - as \\<inter> supp x) \\<sharp>* p\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. supp x - as \\<inter> supp x = supp x' - as' \\<inter> supp x' \\<and>\n    (supp x - as \\<inter> supp x) \\<sharp>* p \\<and>\n    p \\<bullet> x = x' \\<and>\n    p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp x'", "by simp"], ["proof (state)\nthis:\n  (as \\<inter> supp x, x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_abs_set_abs_res:\n  assumes asm: \"(as \\<inter> supp x, x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')\"\n  shows \"(as, x) \\<approx>res (=) supp p (as', x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as, x) \\<approx>res (=) supp p (as', x')", "using asm"], ["proof (prove)\nusing this:\n  (as \\<inter> supp x, x) \\<approx>set (=) supp p (as' \\<inter> supp x', x')\n\ngoal (1 subgoal):\n 1. (as, x) \\<approx>res (=) supp p (as', x')", "unfolding alphas"], ["proof (prove)\nusing this:\n  supp x - as \\<inter> supp x = supp x' - as' \\<inter> supp x' \\<and>\n  (supp x - as \\<inter> supp x) \\<sharp>* p \\<and>\n  p \\<bullet> x = x' \\<and>\n  p \\<bullet> (as \\<inter> supp x) = as' \\<inter> supp x'\n\ngoal (1 subgoal):\n 1. supp x - as = supp x' - as' \\<and>\n    (supp x - as) \\<sharp>* p \\<and> p \\<bullet> x = x'", "by (auto simp: Diff_Int)"], ["", "lemma alpha_abs_res_stronger1:\n  assumes asm: \"(as, x) \\<approx>res (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>res (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "using alpha_abs_res_stronger1_aux[OF asm]"], ["proof (prove)\nusing this:\n  \\<exists>p.\n     (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n     supp p \\<subseteq> supp x \\<inter> as \\<union> supp x' \\<inter> as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "by auto"], ["", "lemma alpha_abs_set_stronger1:\n  assumes asm: \"(as, x) \\<approx>set (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>set (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "from asm"], ["proof (chain)\npicking this:\n  (as, x) \\<approx>set (=) supp p' (as', x')", "have 0: \"(supp x - as) \\<sharp>* p'\""], ["proof (prove)\nusing this:\n  (as, x) \\<approx>set (=) supp p' (as', x')\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<sharp>* p'", "by  (auto simp only: alphas)"], ["proof (state)\nthis:\n  (supp x - as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "then"], ["proof (chain)\npicking this:\n  (supp x - as) \\<sharp>* p'", "have #: \"p' \\<bullet> (supp x - as) = (supp x - as)\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. p' \\<bullet> (supp x - as) = supp x - as", "by (simp add: atom_set_perm_eq)"], ["proof (state)\nthis:\n  p' \\<bullet> (supp x - as) = supp x - as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "obtain p where *: \"\\<forall>b \\<in> (supp x \\<union> as). p \\<bullet> b = p' \\<bullet> b\"\n    and **: \"supp p \\<subseteq> (supp x \\<union> as) \\<union> p' \\<bullet> (supp x \\<union> as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<forall>b\\<in>supp x \\<union> as.\n                    p \\<bullet> b = p' \\<bullet> b;\n         supp p\n         \\<subseteq> supp x \\<union> as \\<union>\n                     p' \\<bullet> (supp x \\<union> as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using set_renaming_perm2"], ["proof (prove)\nusing this:\n  \\<exists>q.\n     (\\<forall>b\\<in>?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> ?bs \\<union> ?p \\<bullet> ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<forall>b\\<in>supp x \\<union> as.\n                    p \\<bullet> b = p' \\<bullet> b;\n         supp p\n         \\<subseteq> supp x \\<union> as \\<union>\n                     p' \\<bullet> (supp x \\<union> as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>supp x \\<union> as. p \\<bullet> b = p' \\<bullet> b\n  supp p\n  \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> (supp x \\<union> as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "from *"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>supp x \\<union> as. p \\<bullet> b = p' \\<bullet> b", "have \"\\<forall>b \\<in> supp x. p \\<bullet> b = p' \\<bullet> b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x \\<union> as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "then"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b", "have a: \"p \\<bullet> x = p' \\<bullet> x\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = p' \\<bullet> x", "using supp_perm_perm_eq"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n  \\<forall>a\\<in>supp ?x. ?p \\<bullet> a = ?q \\<bullet> a \\<Longrightarrow>\n  ?p \\<bullet> ?x = ?q \\<bullet> ?x\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = p' \\<bullet> x", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> x = p' \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "from *"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>supp x \\<union> as. p \\<bullet> b = p' \\<bullet> b", "have \"\\<forall>b \\<in> as. p \\<bullet> b = p' \\<bullet> b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x \\<union> as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>as. p \\<bullet> b = p' \\<bullet> b", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "then"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>as. p \\<bullet> b = p' \\<bullet> b", "have zb: \"p \\<bullet> as = p' \\<bullet> as\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. p \\<bullet> as = p' \\<bullet> as", "apply(auto simp: permute_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>b\\<in>as. p \\<bullet> b = p' \\<bullet> b;\n        xa \\<in> as\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            p' \\<bullet> xa = p \\<bullet> x \\<and>\n                            x \\<in> as", "apply(rule_tac x=\"xa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<forall>b\\<in>as. p \\<bullet> b = p' \\<bullet> b;\n        xa \\<in> as\\<rbrakk>\n       \\<Longrightarrow> p' \\<bullet> xa = p \\<bullet> xa \\<and> xa \\<in> as", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p \\<bullet> as = p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have zc: \"p' \\<bullet> as = as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<bullet> as = as'", "using asm"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>set (=) supp p' (as', x')\n\ngoal (1 subgoal):\n 1. p' \\<bullet> as = as'", "by (simp add: alphas)"], ["proof (state)\nthis:\n  p' \\<bullet> as = as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "from 0"], ["proof (chain)\npicking this:\n  (supp x - as) \\<sharp>* p'", "have 1: \"(supp x - as) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<sharp>* p", "using *"], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p'\n  \\<forall>b\\<in>supp x \\<union> as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<sharp>* p", "by (auto simp: fresh_star_def fresh_perm)"], ["proof (state)\nthis:\n  (supp x - as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "then"], ["proof (chain)\npicking this:\n  (supp x - as) \\<sharp>* p", "have 2: \"(supp x - as) \\<inter> supp p = {}\""], ["proof (prove)\nusing this:\n  (supp x - as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. (supp x - as) \\<inter> supp p = {}", "by (auto simp: fresh_star_def fresh_def)"], ["proof (state)\nthis:\n  (supp x - as) \\<inter> supp p = {}\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have b: \"supp x = (supp x - as) \\<union> (supp x \\<inter> as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x = supp x - as \\<union> supp x \\<inter> as", "by auto"], ["proof (state)\nthis:\n  supp x = supp x - as \\<union> supp x \\<inter> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"supp p \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union> p' \\<bullet> as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union>\n                p' \\<bullet> as", "using **"], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> (supp x \\<union> as)\n\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union>\n                p' \\<bullet> as", "using union_eqvt"], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> (supp x \\<union> as)\n  ?p \\<bullet> (?A \\<union> ?B) = ?p \\<bullet> ?A \\<union> ?p \\<bullet> ?B\n\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union>\n                p' \\<bullet> as", "by blast"], ["proof (state)\nthis:\n  supp p\n  \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union>\n              p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "also"], ["proof (state)\nthis:\n  supp p\n  \\<subseteq> supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union>\n              p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> as \\<union> (p' \\<bullet> ((supp x - as) \\<union> (supp x \\<inter> as))) \\<union> p' \\<bullet> as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) \\<union>\n    p' \\<bullet> as", "using b"], ["proof (prove)\nusing this:\n  supp x = supp x - as \\<union> supp x \\<inter> as\n\ngoal (1 subgoal):\n 1. supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) \\<union>\n    p' \\<bullet> as", "by simp"], ["proof (state)\nthis:\n  supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union> p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "also"], ["proof (state)\nthis:\n  supp x \\<union> as \\<union> p' \\<bullet> supp x \\<union> p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> as \\<union>\n    ((p' \\<bullet> (supp x - as)) \\<union> (p' \\<bullet> (supp x \\<inter> as))) \\<union> p' \\<bullet> as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    (p' \\<bullet> (supp x - as) \\<union>\n     p' \\<bullet> (supp x \\<inter> as)) \\<union>\n    p' \\<bullet> as", "by (simp add: union_eqvt)"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) \\<union>\n  p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union>\n   p' \\<bullet> (supp x \\<inter> as)) \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "also"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x - as \\<union> supp x \\<inter> as) \\<union>\n  p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union>\n   p' \\<bullet> (supp x \\<inter> as)) \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> as \\<union> (p' \\<bullet> (supp x \\<inter> as)) \\<union> p' \\<bullet> as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    (p' \\<bullet> (supp x - as) \\<union>\n     p' \\<bullet> (supp x \\<inter> as)) \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as) \\<union>\n    p' \\<bullet> as", "using #"], ["proof (prove)\nusing this:\n  p' \\<bullet> (supp x - as) = supp x - as\n\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    (p' \\<bullet> (supp x - as) \\<union>\n     p' \\<bullet> (supp x \\<inter> as)) \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as) \\<union>\n    p' \\<bullet> as", "by auto"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union>\n   p' \\<bullet> (supp x \\<inter> as)) \\<union>\n  p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as) \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "also"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  (p' \\<bullet> (supp x - as) \\<union>\n   p' \\<bullet> (supp x \\<inter> as)) \\<union>\n  p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as) \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> as \\<union> p' \\<bullet> ((supp x \\<inter> as) \\<union> as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as) \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as \\<union> as)", "using union_eqvt"], ["proof (prove)\nusing this:\n  ?p \\<bullet> (?A \\<union> ?B) = ?p \\<bullet> ?A \\<union> ?p \\<bullet> ?B\n\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as) \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as \\<union> as)", "by auto"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as) \\<union>\n  p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as \\<union> as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "also"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as) \\<union>\n  p' \\<bullet> as =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as \\<union> as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"\\<dots> = (supp x - as) \\<union> (supp x \\<inter> as) \\<union> as \\<union> p' \\<bullet> as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> (supp x \\<inter> as \\<union> as) =\n    supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> as", "by (metis Int_commute Un_commute sup_inf_absorb)"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as \\<union> as) =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "also"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> (supp x \\<inter> as \\<union> as) =\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"\\<dots> = (supp x - as) \\<union> as \\<union> p' \\<bullet> as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n    p' \\<bullet> as =\n    supp x - as \\<union> as \\<union> p' \\<bullet> as", "by blast"], ["proof (state)\nthis:\n  supp x - as \\<union> supp x \\<inter> as \\<union> as \\<union>\n  p' \\<bullet> as =\n  supp x - as \\<union> as \\<union> p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "finally"], ["proof (chain)\npicking this:\n  supp p \\<subseteq> supp x - as \\<union> as \\<union> p' \\<bullet> as", "have \"supp p \\<subseteq> (supp x - as) \\<union> as \\<union> p' \\<bullet> as\""], ["proof (prove)\nusing this:\n  supp p \\<subseteq> supp x - as \\<union> as \\<union> p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> supp x - as \\<union> as \\<union> p' \\<bullet> as", "."], ["proof (state)\nthis:\n  supp p \\<subseteq> supp x - as \\<union> as \\<union> p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "then"], ["proof (chain)\npicking this:\n  supp p \\<subseteq> supp x - as \\<union> as \\<union> p' \\<bullet> as", "have \"supp p \\<subseteq> as \\<union> p' \\<bullet> as\""], ["proof (prove)\nusing this:\n  supp p \\<subseteq> supp x - as \\<union> as \\<union> p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> as \\<union> p' \\<bullet> as", "using 2"], ["proof (prove)\nusing this:\n  supp p \\<subseteq> supp x - as \\<union> as \\<union> p' \\<bullet> as\n  (supp x - as) \\<inter> supp p = {}\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> as \\<union> p' \\<bullet> as", "by blast"], ["proof (state)\nthis:\n  supp p \\<subseteq> as \\<union> p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "moreover"], ["proof (state)\nthis:\n  supp p \\<subseteq> as \\<union> p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "have \"(as, x) \\<approx>set (=) supp p (as', x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as, x) \\<approx>set (=) supp p (as', x')", "using asm 1 a zb"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>set (=) supp p' (as', x')\n  (supp x - as) \\<sharp>* p\n  p \\<bullet> x = p' \\<bullet> x\n  p \\<bullet> as = p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. (as, x) \\<approx>set (=) supp p (as', x')", "by (simp add: alphas)"], ["proof (state)\nthis:\n  (as, x) \\<approx>set (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "ultimately"], ["proof (chain)\npicking this:\n  supp p \\<subseteq> as \\<union> p' \\<bullet> as\n  (as, x) \\<approx>set (=) supp p (as', x')", "show \"\\<exists>p. (as, x) \\<approx>set (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as'\""], ["proof (prove)\nusing this:\n  supp p \\<subseteq> as \\<union> p' \\<bullet> as\n  (as, x) \\<approx>set (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "using zc"], ["proof (prove)\nusing this:\n  supp p \\<subseteq> as \\<union> p' \\<bullet> as\n  (as, x) \\<approx>set (=) supp p (as', x')\n  p' \\<bullet> as = as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'", "by blast"], ["proof (state)\nthis:\n  \\<exists>p.\n     (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n     supp p \\<subseteq> as \\<union> as'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_abs_lst_stronger1:\n  assumes asm: \"(as, x) \\<approx>lst (=) supp p' (as', x')\"\n  shows \"\\<exists>p. (as, x) \\<approx>lst (=) supp p (as', x') \\<and> supp p \\<subseteq> set as \\<union> set as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "from asm"], ["proof (chain)\npicking this:\n  (as, x) \\<approx>lst (=) supp p' (as', x')", "have 0: \"(supp x - set as) \\<sharp>* p'\""], ["proof (prove)\nusing this:\n  (as, x) \\<approx>lst (=) supp p' (as', x')\n\ngoal (1 subgoal):\n 1. (supp x - set as) \\<sharp>* p'", "by  (auto simp only: alphas)"], ["proof (state)\nthis:\n  (supp x - set as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "then"], ["proof (chain)\npicking this:\n  (supp x - set as) \\<sharp>* p'", "have #: \"p' \\<bullet> (supp x - set as) = (supp x - set as)\""], ["proof (prove)\nusing this:\n  (supp x - set as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. p' \\<bullet> (supp x - set as) = supp x - set as", "by (simp add: atom_set_perm_eq)"], ["proof (state)\nthis:\n  p' \\<bullet> (supp x - set as) = supp x - set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "obtain p where *: \"\\<forall>b \\<in> (supp x \\<union> set as). p \\<bullet> b = p' \\<bullet> b\"\n    and **: \"supp p \\<subseteq> (supp x \\<union> set as) \\<union> p' \\<bullet> (supp x \\<union> set as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<forall>b\\<in>supp x \\<union> set as.\n                    p \\<bullet> b = p' \\<bullet> b;\n         supp p\n         \\<subseteq> supp x \\<union> set as \\<union>\n                     p' \\<bullet> (supp x \\<union> set as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using set_renaming_perm2"], ["proof (prove)\nusing this:\n  \\<exists>q.\n     (\\<forall>b\\<in>?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> ?bs \\<union> ?p \\<bullet> ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<forall>b\\<in>supp x \\<union> set as.\n                    p \\<bullet> b = p' \\<bullet> b;\n         supp p\n         \\<subseteq> supp x \\<union> set as \\<union>\n                     p' \\<bullet> (supp x \\<union> set as)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>supp x \\<union> set as. p \\<bullet> b = p' \\<bullet> b\n  supp p\n  \\<subseteq> supp x \\<union> set as \\<union>\n              p' \\<bullet> (supp x \\<union> set as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "from *"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>supp x \\<union> set as. p \\<bullet> b = p' \\<bullet> b", "have \"\\<forall>b \\<in> supp x. p \\<bullet> b = p' \\<bullet> b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x \\<union> set as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "then"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b", "have a: \"p \\<bullet> x = p' \\<bullet> x\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = p' \\<bullet> x", "using supp_perm_perm_eq"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x. p \\<bullet> b = p' \\<bullet> b\n  \\<forall>a\\<in>supp ?x. ?p \\<bullet> a = ?q \\<bullet> a \\<Longrightarrow>\n  ?p \\<bullet> ?x = ?q \\<bullet> ?x\n\ngoal (1 subgoal):\n 1. p \\<bullet> x = p' \\<bullet> x", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> x = p' \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "from *"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>supp x \\<union> set as. p \\<bullet> b = p' \\<bullet> b", "have \"\\<forall>b \\<in> set as. p \\<bullet> b = p' \\<bullet> b\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>supp x \\<union> set as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>set as. p \\<bullet> b = p' \\<bullet> b", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "then"], ["proof (chain)\npicking this:\n  \\<forall>b\\<in>set as. p \\<bullet> b = p' \\<bullet> b", "have zb: \"p \\<bullet> as = p' \\<bullet> as\""], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. p \\<bullet> as = p' \\<bullet> as", "by (induct as) (auto)"], ["proof (state)\nthis:\n  p \\<bullet> as = p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have zc: \"p' \\<bullet> set as = set as'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<bullet> set as = set as'", "using asm"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>lst (=) supp p' (as', x')\n\ngoal (1 subgoal):\n 1. p' \\<bullet> set as = set as'", "by (simp add: alphas set_eqvt)"], ["proof (state)\nthis:\n  p' \\<bullet> set as = set as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "from 0"], ["proof (chain)\npicking this:\n  (supp x - set as) \\<sharp>* p'", "have 1: \"(supp x - set as) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (supp x - set as) \\<sharp>* p'\n\ngoal (1 subgoal):\n 1. (supp x - set as) \\<sharp>* p", "using *"], ["proof (prove)\nusing this:\n  (supp x - set as) \\<sharp>* p'\n  \\<forall>b\\<in>supp x \\<union> set as. p \\<bullet> b = p' \\<bullet> b\n\ngoal (1 subgoal):\n 1. (supp x - set as) \\<sharp>* p", "by (auto simp: fresh_star_def fresh_perm)"], ["proof (state)\nthis:\n  (supp x - set as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "then"], ["proof (chain)\npicking this:\n  (supp x - set as) \\<sharp>* p", "have 2: \"(supp x - set as) \\<inter> supp p = {}\""], ["proof (prove)\nusing this:\n  (supp x - set as) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. (supp x - set as) \\<inter> supp p = {}", "by (auto simp: fresh_star_def fresh_def)"], ["proof (state)\nthis:\n  (supp x - set as) \\<inter> supp p = {}\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have b: \"supp x = (supp x - set as) \\<union> (supp x \\<inter> set as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x = supp x - set as \\<union> supp x \\<inter> set as", "by auto"], ["proof (state)\nthis:\n  supp x = supp x - set as \\<union> supp x \\<inter> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"supp p \\<subseteq> supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union> p' \\<bullet> set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n                p' \\<bullet> set as", "using **"], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x \\<union> set as \\<union>\n              p' \\<bullet> (supp x \\<union> set as)\n\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n                p' \\<bullet> set as", "using union_eqvt"], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x \\<union> set as \\<union>\n              p' \\<bullet> (supp x \\<union> set as)\n  ?p \\<bullet> (?A \\<union> ?B) = ?p \\<bullet> ?A \\<union> ?p \\<bullet> ?B\n\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n                p' \\<bullet> set as", "by blast"], ["proof (state)\nthis:\n  supp p\n  \\<subseteq> supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n              p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "also"], ["proof (state)\nthis:\n  supp p\n  \\<subseteq> supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n              p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"\\<dots> = (supp x - set as) \\<union> (supp x \\<inter> set as) \\<union> set as \\<union>\n    (p' \\<bullet> ((supp x - set as) \\<union> (supp x \\<inter> set as))) \\<union> p' \\<bullet> set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x - set as \\<union> supp x \\<inter> set as) \\<union>\n    p' \\<bullet> set as", "using b"], ["proof (prove)\nusing this:\n  supp x = supp x - set as \\<union> supp x \\<inter> set as\n\ngoal (1 subgoal):\n 1. supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x - set as \\<union> supp x \\<inter> set as) \\<union>\n    p' \\<bullet> set as", "by simp"], ["proof (state)\nthis:\n  supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x - set as \\<union> supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "also"], ["proof (state)\nthis:\n  supp x \\<union> set as \\<union> p' \\<bullet> supp x \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x - set as \\<union> supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"\\<dots> = (supp x - set as) \\<union> (supp x \\<inter> set as) \\<union> set as \\<union>\n    ((p' \\<bullet> (supp x - set as)) \\<union> (p' \\<bullet> (supp x \\<inter> set as))) \\<union> p' \\<bullet> set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x - set as \\<union> supp x \\<inter> set as) \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    (p' \\<bullet> (supp x - set as) \\<union>\n     p' \\<bullet> (supp x \\<inter> set as)) \\<union>\n    p' \\<bullet> set as", "by (simp add: union_eqvt)"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x - set as \\<union> supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  (p' \\<bullet> (supp x - set as) \\<union>\n   p' \\<bullet> (supp x \\<inter> set as)) \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "also"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x - set as \\<union> supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  (p' \\<bullet> (supp x - set as) \\<union>\n   p' \\<bullet> (supp x \\<inter> set as)) \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"\\<dots> = (supp x - set as) \\<union> (supp x \\<inter> set as) \\<union> set as \\<union>\n    (p' \\<bullet> (supp x \\<inter> set as)) \\<union> p' \\<bullet> set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    (p' \\<bullet> (supp x - set as) \\<union>\n     p' \\<bullet> (supp x \\<inter> set as)) \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x \\<inter> set as) \\<union>\n    p' \\<bullet> set as", "using #"], ["proof (prove)\nusing this:\n  p' \\<bullet> (supp x - set as) = supp x - set as\n\ngoal (1 subgoal):\n 1. supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    (p' \\<bullet> (supp x - set as) \\<union>\n     p' \\<bullet> (supp x \\<inter> set as)) \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x \\<inter> set as) \\<union>\n    p' \\<bullet> set as", "by auto"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  (p' \\<bullet> (supp x - set as) \\<union>\n   p' \\<bullet> (supp x \\<inter> set as)) \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "also"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  (p' \\<bullet> (supp x - set as) \\<union>\n   p' \\<bullet> (supp x \\<inter> set as)) \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"\\<dots> = (supp x - set as) \\<union> (supp x \\<inter> set as) \\<union> set as \\<union> p' \\<bullet> ((supp x \\<inter> set as) \\<union> set as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x \\<inter> set as) \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x \\<inter> set as \\<union> set as)", "using union_eqvt"], ["proof (prove)\nusing this:\n  ?p \\<bullet> (?A \\<union> ?B) = ?p \\<bullet> ?A \\<union> ?p \\<bullet> ?B\n\ngoal (1 subgoal):\n 1. supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x \\<inter> set as) \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x \\<inter> set as \\<union> set as)", "by auto"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as \\<union> set as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "also"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as) \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as \\<union> set as)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"\\<dots> = (supp x - set as) \\<union> (supp x \\<inter> set as) \\<union> set as \\<union> p' \\<bullet> set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> (supp x \\<inter> set as \\<union> set as) =\n    supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> set as", "by (metis Int_commute Un_commute sup_inf_absorb)"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as \\<union> set as) =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "also"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> (supp x \\<inter> set as \\<union> set as) =\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"\\<dots> = (supp x - set as) \\<union> set as \\<union> p' \\<bullet> set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n    p' \\<bullet> set as =\n    supp x - set as \\<union> set as \\<union> p' \\<bullet> set as", "by blast"], ["proof (state)\nthis:\n  supp x - set as \\<union> supp x \\<inter> set as \\<union> set as \\<union>\n  p' \\<bullet> set as =\n  supp x - set as \\<union> set as \\<union> p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "finally"], ["proof (chain)\npicking this:\n  supp p\n  \\<subseteq> supp x - set as \\<union> set as \\<union> p' \\<bullet> set as", "have \"supp p \\<subseteq> (supp x - set as) \\<union> set as \\<union> p' \\<bullet> set as\""], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x - set as \\<union> set as \\<union> p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. supp p\n    \\<subseteq> supp x - set as \\<union> set as \\<union> p' \\<bullet> set as", "."], ["proof (state)\nthis:\n  supp p\n  \\<subseteq> supp x - set as \\<union> set as \\<union> p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "then"], ["proof (chain)\npicking this:\n  supp p\n  \\<subseteq> supp x - set as \\<union> set as \\<union> p' \\<bullet> set as", "have \"supp p \\<subseteq> set as \\<union> p' \\<bullet> set as\""], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x - set as \\<union> set as \\<union> p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> set as \\<union> p' \\<bullet> set as", "using 2"], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> supp x - set as \\<union> set as \\<union> p' \\<bullet> set as\n  (supp x - set as) \\<inter> supp p = {}\n\ngoal (1 subgoal):\n 1. supp p \\<subseteq> set as \\<union> p' \\<bullet> set as", "by blast"], ["proof (state)\nthis:\n  supp p \\<subseteq> set as \\<union> p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "moreover"], ["proof (state)\nthis:\n  supp p \\<subseteq> set as \\<union> p' \\<bullet> set as\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "have \"(as, x) \\<approx>lst (=) supp p (as', x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as, x) \\<approx>lst (=) supp p (as', x')", "using asm 1 a zb"], ["proof (prove)\nusing this:\n  (as, x) \\<approx>lst (=) supp p' (as', x')\n  (supp x - set as) \\<sharp>* p\n  p \\<bullet> x = p' \\<bullet> x\n  p \\<bullet> as = p' \\<bullet> as\n\ngoal (1 subgoal):\n 1. (as, x) \\<approx>lst (=) supp p (as', x')", "by (simp add: alphas)"], ["proof (state)\nthis:\n  (as, x) \\<approx>lst (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "ultimately"], ["proof (chain)\npicking this:\n  supp p \\<subseteq> set as \\<union> p' \\<bullet> set as\n  (as, x) \\<approx>lst (=) supp p (as', x')", "show \"\\<exists>p. (as, x) \\<approx>lst (=) supp p (as', x') \\<and> supp p \\<subseteq> set as \\<union> set as'\""], ["proof (prove)\nusing this:\n  supp p \\<subseteq> set as \\<union> p' \\<bullet> set as\n  (as, x) \\<approx>lst (=) supp p (as', x')\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "using zc"], ["proof (prove)\nusing this:\n  supp p \\<subseteq> set as \\<union> p' \\<bullet> set as\n  (as, x) \\<approx>lst (=) supp p (as', x')\n  p' \\<bullet> set as = set as'\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> set as \\<union> set as'", "by blast"], ["proof (state)\nthis:\n  \\<exists>p.\n     (as, x) \\<approx>lst (=) supp p (as', x') \\<and>\n     supp p \\<subseteq> set as \\<union> set as'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alphas_abs_stronger:\n  shows \"(as, x) \\<approx>abs_set (as', x') \\<longleftrightarrow> (\\<exists>p. (as, x) \\<approx>set (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as')\"\n  and   \"(as, x) \\<approx>abs_res (as', x') \\<longleftrightarrow> (\\<exists>p. (as, x) \\<approx>res (=) supp p (as', x') \\<and> supp p \\<subseteq> as \\<union> as')\"\n  and   \"(bs, x) \\<approx>abs_lst (bs', x') \\<longleftrightarrow>\n   (\\<exists>p. (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and> supp p \\<subseteq> set bs \\<union> set bs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((as, x) \\<approx>abs_set (as', x')) =\n    (\\<exists>p.\n        (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n        supp p \\<subseteq> as \\<union> as') &&&\n    ((as, x) \\<approx>abs_res (as', x')) =\n    (\\<exists>p.\n        (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n        supp p \\<subseteq> as \\<union> as') &&&\n    ((bs, x) \\<approx>abs_lst (bs', x')) =\n    (\\<exists>p.\n        (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n        supp p \\<subseteq> set bs \\<union> set bs')", "apply(rule iffI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. (as, x) \\<approx>abs_set (as', x') \\<Longrightarrow>\n    \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'\n 2. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as' \\<Longrightarrow>\n    (as, x) \\<approx>abs_set (as', x')\n 3. ((as, x) \\<approx>abs_res (as', x')) =\n    (\\<exists>p.\n        (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n        supp p \\<subseteq> as \\<union> as')\n 4. ((bs, x) \\<approx>abs_lst (bs', x')) =\n    (\\<exists>p.\n        (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n        supp p \\<subseteq> set bs \\<union> set bs')", "apply(auto simp: alphas_abs alpha_abs_set_stronger1)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<exists>p.\n       (as, x) \\<approx>set (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as' \\<Longrightarrow>\n    (as, x) \\<approx>abs_set (as', x')\n 2. ((as, x) \\<approx>abs_res (as', x')) =\n    (\\<exists>p.\n        (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n        supp p \\<subseteq> as \\<union> as')\n 3. ((bs, x) \\<approx>abs_lst (bs', x')) =\n    (\\<exists>p.\n        (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n        supp p \\<subseteq> set bs \\<union> set bs')", "apply(auto simp: alphas_abs)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((as, x) \\<approx>abs_res (as', x')) =\n    (\\<exists>p.\n        (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n        supp p \\<subseteq> as \\<union> as')\n 2. ((bs, x) \\<approx>abs_lst (bs', x')) =\n    (\\<exists>p.\n        (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n        supp p \\<subseteq> set bs \\<union> set bs')", "apply(rule iffI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (as, x) \\<approx>abs_res (as', x') \\<Longrightarrow>\n    \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as'\n 2. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as' \\<Longrightarrow>\n    (as, x) \\<approx>abs_res (as', x')\n 3. ((bs, x) \\<approx>abs_lst (bs', x')) =\n    (\\<exists>p.\n        (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n        supp p \\<subseteq> set bs \\<union> set bs')", "apply(auto simp: alphas_abs alpha_abs_res_stronger1)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>p.\n       (as, x) \\<approx>res (=) supp p (as', x') \\<and>\n       supp p \\<subseteq> as \\<union> as' \\<Longrightarrow>\n    (as, x) \\<approx>abs_res (as', x')\n 2. ((bs, x) \\<approx>abs_lst (bs', x')) =\n    (\\<exists>p.\n        (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n        supp p \\<subseteq> set bs \\<union> set bs')", "apply(auto simp: alphas_abs)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bs, x) \\<approx>abs_lst (bs', x')) =\n    (\\<exists>p.\n        (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n        supp p \\<subseteq> set bs \\<union> set bs')", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (bs, x) \\<approx>abs_lst (bs', x') \\<Longrightarrow>\n    \\<exists>p.\n       (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n       supp p \\<subseteq> set bs \\<union> set bs'\n 2. \\<exists>p.\n       (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n       supp p \\<subseteq> set bs \\<union> set bs' \\<Longrightarrow>\n    (bs, x) \\<approx>abs_lst (bs', x')", "apply(auto simp: alphas_abs alpha_abs_lst_stronger1)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (bs, x) \\<approx>lst (=) supp p (bs', x') \\<and>\n       supp p \\<subseteq> set bs \\<union> set bs' \\<Longrightarrow>\n    (bs, x) \\<approx>abs_lst (bs', x')", "apply(auto simp: alphas_abs)[1]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma alpha_res_alpha_set:\n  \"(bs, x) \\<approx>res (=) supp p (cs, y) \\<longleftrightarrow> (bs \\<inter> supp x, x) \\<approx>set (=) supp p (cs \\<inter> supp y, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>res (=) supp p (cs, y) =\n    (bs \\<inter> supp x, x) \\<approx>set (=) supp p (cs \\<inter> supp y, y)", "using alpha_abs_set_abs_res alpha_abs_res_abs_set"], ["proof (prove)\nusing this:\n  (?as \\<inter> supp ?x,\n   ?x) \\<approx>set (=) supp ?p (?as' \\<inter> supp ?x',\n                                 ?x') \\<Longrightarrow>\n  (?as, ?x) \\<approx>res (=) supp ?p (?as', ?x')\n  (?as, ?x) \\<approx>res (=) supp ?p (?as', ?x') \\<Longrightarrow>\n  (?as \\<inter> supp ?x,\n   ?x) \\<approx>set (=) supp ?p (?as' \\<inter> supp ?x', ?x')\n\ngoal (1 subgoal):\n 1. (bs, x) \\<approx>res (=) supp p (cs, y) =\n    (bs \\<inter> supp x, x) \\<approx>set (=) supp p (cs \\<inter> supp y, y)", "by blast"], ["", "section \\<open>Quotient types\\<close>"], ["", "quotient_type\n    'a abs_set = \"(atom set \\<times> 'a::pt)\" / \"alpha_abs_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<approx>abs_set)", "apply(rule equivpI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. reflp (\\<approx>abs_set)\n 2. symp (\\<approx>abs_set)\n 3. transp (\\<approx>abs_set)", "unfolding reflp_def refl_on_def symp_def sym_def transp_def trans_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x. x \\<approx>abs_set x\n 2. \\<forall>x y.\n       x \\<approx>abs_set y \\<longrightarrow> y \\<approx>abs_set x\n 3. \\<forall>x y z.\n       x \\<approx>abs_set y \\<longrightarrow>\n       y \\<approx>abs_set z \\<longrightarrow> x \\<approx>abs_set z", "by (auto intro: alphas_abs_sym alphas_abs_refl alphas_abs_trans simp only:)"], ["", "quotient_type\n    'b abs_res = \"(atom set \\<times> 'b::pt)\" / \"alpha_abs_res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<approx>abs_res)", "apply(rule equivpI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. reflp (\\<approx>abs_res)\n 2. symp (\\<approx>abs_res)\n 3. transp (\\<approx>abs_res)", "unfolding reflp_def refl_on_def symp_def sym_def transp_def trans_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x. x \\<approx>abs_res x\n 2. \\<forall>x y.\n       x \\<approx>abs_res y \\<longrightarrow> y \\<approx>abs_res x\n 3. \\<forall>x y z.\n       x \\<approx>abs_res y \\<longrightarrow>\n       y \\<approx>abs_res z \\<longrightarrow> x \\<approx>abs_res z", "by (auto intro: alphas_abs_sym alphas_abs_refl alphas_abs_trans simp only:)"], ["", "quotient_type\n   'c abs_lst = \"(atom list \\<times> 'c::pt)\" / \"alpha_abs_lst\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (\\<approx>abs_lst)", "apply(rule_tac [!] equivpI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. reflp (\\<approx>abs_lst)\n 2. symp (\\<approx>abs_lst)\n 3. transp (\\<approx>abs_lst)", "unfolding reflp_def refl_on_def symp_def sym_def transp_def trans_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x. x \\<approx>abs_lst x\n 2. \\<forall>x y.\n       x \\<approx>abs_lst y \\<longrightarrow> y \\<approx>abs_lst x\n 3. \\<forall>x y z.\n       x \\<approx>abs_lst y \\<longrightarrow>\n       y \\<approx>abs_lst z \\<longrightarrow> x \\<approx>abs_lst z", "by (auto intro: alphas_abs_sym alphas_abs_refl alphas_abs_trans simp only:)"], ["", "quotient_definition\n  Abs_set (\"[_]set. _\" [60, 60] 60)\nwhere\n  \"Abs_set::atom set \\<Rightarrow> ('a::pt) \\<Rightarrow> 'a abs_set\"\nis\n  \"Pair::atom set \\<Rightarrow> ('a::pt) \\<Rightarrow> (atom set \\<times> 'a)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "quotient_definition\n  Abs_res (\"[_]res. _\" [60, 60] 60)\nwhere\n  \"Abs_res::atom set \\<Rightarrow> ('a::pt) \\<Rightarrow> 'a abs_res\"\nis\n  \"Pair::atom set \\<Rightarrow> ('a::pt) \\<Rightarrow> (atom set \\<times> 'a)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "quotient_definition\n  Abs_lst (\"[_]lst. _\" [60, 60] 60)\nwhere\n  \"Abs_lst::atom list \\<Rightarrow> ('a::pt) \\<Rightarrow> 'a abs_lst\"\nis\n  \"Pair::atom list \\<Rightarrow> ('a::pt) \\<Rightarrow> (atom list \\<times> 'a)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma [quot_respect]:\n  shows \"((=) ===> (=) ===> alpha_abs_set) Pair Pair\"\n  and   \"((=) ===> (=) ===> alpha_abs_res) Pair Pair\"\n  and   \"((=) ===> (=) ===> alpha_abs_lst) Pair Pair\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) ===> (=) ===> (\\<approx>abs_set)) Pair Pair &&&\n    ((=) ===> (=) ===> (\\<approx>abs_res)) Pair Pair &&&\n    ((=) ===> (=) ===> (\\<approx>abs_lst)) Pair Pair", "unfolding rel_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x = y \\<longrightarrow>\n       (\\<forall>xa ya.\n           xa = ya \\<longrightarrow> (x, xa) \\<approx>abs_set (y, ya)) &&&\n    \\<forall>x y.\n       x = y \\<longrightarrow>\n       (\\<forall>xa ya.\n           xa = ya \\<longrightarrow> (x, xa) \\<approx>abs_res (y, ya)) &&&\n    \\<forall>x y.\n       x = y \\<longrightarrow>\n       (\\<forall>xa ya.\n           xa = ya \\<longrightarrow> (x, xa) \\<approx>abs_lst (y, ya))", "by (auto intro: alphas_abs_refl)"], ["", "lemma [quot_respect]:\n  shows \"((=) ===> alpha_abs_set ===> alpha_abs_set) permute permute\"\n  and   \"((=) ===> alpha_abs_res ===> alpha_abs_res) permute permute\"\n  and   \"((=) ===> alpha_abs_lst ===> alpha_abs_lst) permute permute\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=) ===> (\\<approx>abs_set) ===> (\\<approx>abs_set)) permute\n     permute &&&\n    ((=) ===> (\\<approx>abs_res) ===> (\\<approx>abs_res)) permute\n     permute &&&\n    ((=) ===> (\\<approx>abs_lst) ===> (\\<approx>abs_lst)) permute permute", "unfolding rel_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x = y \\<longrightarrow>\n       (\\<forall>xa ya.\n           xa \\<approx>abs_set ya \\<longrightarrow>\n           x \\<bullet> xa \\<approx>abs_set y \\<bullet> ya) &&&\n    \\<forall>x y.\n       x = y \\<longrightarrow>\n       (\\<forall>xa ya.\n           xa \\<approx>abs_res ya \\<longrightarrow>\n           x \\<bullet> xa \\<approx>abs_res y \\<bullet> ya) &&&\n    \\<forall>x y.\n       x = y \\<longrightarrow>\n       (\\<forall>xa ya.\n           xa \\<approx>abs_lst ya \\<longrightarrow>\n           x \\<bullet> xa \\<approx>abs_lst y \\<bullet> ya)", "by (auto intro: alphas_abs_eqvt simp only: Pair_eqvt)"], ["", "lemma Abs_eq_iff:\n  shows \"[bs]set. x = [bs']set. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>set (=) supp p (bs', y))\"\n  and   \"[bs]res. x = [bs']res. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>res (=) supp p (bs', y))\"\n  and   \"[cs]lst. x = [cs']lst. y \\<longleftrightarrow> (\\<exists>p. (cs, x) \\<approx>lst (=) supp p (cs', y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([bs]set. x = [bs']set. y) =\n    (\\<exists>p. (bs, x) \\<approx>set (=) supp p (bs', y)) &&&\n    ([bs]res. x = [bs']res. y) =\n    (\\<exists>p. (bs, x) \\<approx>res (=) supp p (bs', y)) &&&\n    ([cs]lst. x = [cs']lst. y) =\n    (\\<exists>p. (cs, x) \\<approx>lst (=) supp p (cs', y))", "by (lifting alphas_abs)"], ["", "lemma Abs_eq_iff2:\n  shows \"[bs]set. x = [bs']set. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>set ((=)) supp p (bs', y) \\<and> supp p \\<subseteq> bs \\<union> bs')\"\n  and   \"[bs]res. x = [bs']res. y \\<longleftrightarrow> (\\<exists>p. (bs, x) \\<approx>res ((=)) supp p (bs', y) \\<and> supp p \\<subseteq> bs \\<union> bs')\"\n  and   \"[cs]lst. x = [cs']lst. y \\<longleftrightarrow> (\\<exists>p. (cs, x) \\<approx>lst ((=)) supp p (cs', y) \\<and> supp p \\<subseteq> set cs \\<union> set cs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([bs]set. x = [bs']set. y) =\n    (\\<exists>p.\n        (bs, x) \\<approx>set (=) supp p (bs', y) \\<and>\n        supp p \\<subseteq> bs \\<union> bs') &&&\n    ([bs]res. x = [bs']res. y) =\n    (\\<exists>p.\n        (bs, x) \\<approx>res (=) supp p (bs', y) \\<and>\n        supp p \\<subseteq> bs \\<union> bs') &&&\n    ([cs]lst. x = [cs']lst. y) =\n    (\\<exists>p.\n        (cs, x) \\<approx>lst (=) supp p (cs', y) \\<and>\n        supp p \\<subseteq> set cs \\<union> set cs')", "by (lifting alphas_abs_stronger)"], ["", "lemma Abs_eq_res_set:\n  shows \"[bs]res. x = [cs]res. y \\<longleftrightarrow> [bs \\<inter> supp x]set. x = [cs \\<inter> supp y]set. y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([bs]res. x = [cs]res. y) =\n    ([bs \\<inter> supp x]set. x = [cs \\<inter> supp y]set. y)", "unfolding Abs_eq_iff alpha_res_alpha_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        (bs \\<inter> supp x,\n         x) \\<approx>set (=) supp p (cs \\<inter> supp y, y)) =\n    (\\<exists>p.\n        (bs \\<inter> supp x,\n         x) \\<approx>set (=) supp p (cs \\<inter> supp y, y))", "by rule"], ["", "lemma Abs_eq_res_supp:\n  assumes asm: \"supp x \\<subseteq> bs\"\n  shows \"[as]res. x = [as \\<inter> bs]res. x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [as]res. x = [as \\<inter> bs]res. x", "unfolding Abs_eq_iff alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - as = supp x - as \\<inter> bs \\<and>\n       (supp x - as) \\<sharp>* p \\<and> p \\<bullet> x = x", "apply (rule_tac x=\"0::perm\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as = supp x - as \\<inter> bs \\<and>\n    (supp x - as) \\<sharp>* 0 \\<and> 0 \\<bullet> x = x", "apply (simp add: fresh_star_zero)"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as = supp x - as \\<inter> bs", "using asm"], ["proof (prove)\nusing this:\n  supp x \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. supp x - as = supp x - as \\<inter> bs", "by blast"], ["", "lemma Abs_exhausts[cases type]:\n  shows \"(\\<And>as (x::'a::pt). y1 = [as]set. x \\<Longrightarrow> P1) \\<Longrightarrow> P1\"\n  and   \"(\\<And>as (x::'a::pt). y2 = [as]res. x \\<Longrightarrow> P2) \\<Longrightarrow> P2\"\n  and   \"(\\<And>bs (x::'a::pt). y3 = [bs]lst. x \\<Longrightarrow> P3) \\<Longrightarrow> P3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>as x. y1 = [as]set. x \\<Longrightarrow> P1) \\<Longrightarrow>\n     P1) &&&\n    ((\\<And>as x. y2 = [as]res. x \\<Longrightarrow> P2) \\<Longrightarrow>\n     P2) &&&\n    ((\\<And>bs x. y3 = [bs]lst. x \\<Longrightarrow> P3) \\<Longrightarrow>\n     P3)", "by (lifting prod.exhaust[where 'a=\"atom set\" and 'b=\"'a\"]\n              prod.exhaust[where 'a=\"atom set\" and 'b=\"'a\"]\n              prod.exhaust[where 'a=\"atom list\" and 'b=\"'a\"])"], ["", "instantiation abs_set :: (pt) pt\nbegin"], ["", "quotient_definition\n  \"permute_abs_set::perm \\<Rightarrow> ('a::pt abs_set) \\<Rightarrow> 'a abs_set\"\nis\n  \"permute:: perm \\<Rightarrow> (atom set \\<times> 'a::pt) \\<Rightarrow> (atom set \\<times> 'a::pt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       xa \\<approx>abs_set y \\<Longrightarrow>\n       x \\<bullet> xa \\<approx>abs_set x \\<bullet> y", "by (auto intro: alphas_abs_eqvt simp only: Pair_eqvt)"], ["", "lemma permute_Abs_set[simp]:\n  fixes x::\"'a::pt\"\n  shows \"(p \\<bullet> ([as]set. x)) = [p \\<bullet> as]set. (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> ([as]set. x) = [p \\<bullet> as]set. p \\<bullet> x", "by (lifting permute_prod.simps[where 'a=\"atom set\" and 'b=\"'a\"])"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a abs_set, pt_class)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "apply(case_tac [!] x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x as xa. x = [as]set. xa \\<Longrightarrow> 0 \\<bullet> x = x\n 2. \\<And>p q x as xa.\n       x = [as]set. xa \\<Longrightarrow>\n       (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "instantiation abs_res :: (pt) pt\nbegin"], ["", "quotient_definition\n  \"permute_abs_res::perm \\<Rightarrow> ('a::pt abs_res) \\<Rightarrow> 'a abs_res\"\nis\n  \"permute:: perm \\<Rightarrow> (atom set \\<times> 'a::pt) \\<Rightarrow> (atom set \\<times> 'a::pt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       xa \\<approx>abs_res y \\<Longrightarrow>\n       x \\<bullet> xa \\<approx>abs_res x \\<bullet> y", "by (auto intro: alphas_abs_eqvt simp only: Pair_eqvt)"], ["", "lemma permute_Abs_res[simp]:\n  fixes x::\"'a::pt\"\n  shows \"(p \\<bullet> ([as]res. x)) = [p \\<bullet> as]res. (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> ([as]res. x) = [p \\<bullet> as]res. p \\<bullet> x", "by (lifting permute_prod.simps[where 'a=\"atom set\" and 'b=\"'a\"])"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a abs_res, pt_class)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "apply(case_tac [!] x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x as xa. x = [as]res. xa \\<Longrightarrow> 0 \\<bullet> x = x\n 2. \\<And>p q x as xa.\n       x = [as]res. xa \\<Longrightarrow>\n       (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "instantiation abs_lst :: (pt) pt\nbegin"], ["", "quotient_definition\n  \"permute_abs_lst::perm \\<Rightarrow> ('a::pt abs_lst) \\<Rightarrow> 'a abs_lst\"\nis\n  \"permute:: perm \\<Rightarrow> (atom list \\<times> 'a::pt) \\<Rightarrow> (atom list \\<times> 'a::pt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa y.\n       xa \\<approx>abs_lst y \\<Longrightarrow>\n       x \\<bullet> xa \\<approx>abs_lst x \\<bullet> y", "by (auto intro: alphas_abs_eqvt simp only: Pair_eqvt)"], ["", "lemma permute_Abs_lst[simp]:\n  fixes x::\"'a::pt\"\n  shows \"(p \\<bullet> ([as]lst. x)) = [p \\<bullet> as]lst. (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> ([as]lst. x) = [p \\<bullet> as]lst. p \\<bullet> x", "by (lifting permute_prod.simps[where 'a=\"atom list\" and 'b=\"'a\"])"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a abs_lst, pt_class)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "apply(case_tac [!] x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x bs xa. x = [bs]lst. xa \\<Longrightarrow> 0 \\<bullet> x = x\n 2. \\<And>p q x bs xa.\n       x = [bs]lst. xa \\<Longrightarrow>\n       (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "lemmas permute_Abs[eqvt] = permute_Abs_set permute_Abs_res permute_Abs_lst"], ["", "lemma Abs_swap1:\n  assumes a1: \"a \\<notin> (supp x) - bs\"\n  and     a2: \"b \\<notin> (supp x) - bs\"\n  shows \"[bs]set. x = [(a \\<rightleftharpoons> b) \\<bullet> bs]set. ((a \\<rightleftharpoons> b) \\<bullet> x)\"\n  and   \"[bs]res. x = [(a \\<rightleftharpoons> b) \\<bullet> bs]res. ((a \\<rightleftharpoons> b) \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [bs]set. x =\n    [(a \\<rightleftharpoons> b) \\<bullet> bs]set. (a \\<rightleftharpoons> b) \\<bullet> x &&&\n    [bs]res. x =\n    [(a \\<rightleftharpoons> b) \\<bullet> bs]res. (a \\<rightleftharpoons> b) \\<bullet> x", "unfolding Abs_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (bs,\n        x) \\<approx>set (=) supp p ((a \\<rightleftharpoons> b) \\<bullet> bs,\n                                    (a \\<rightleftharpoons> b) \\<bullet> x) &&&\n    \\<exists>p.\n       (bs,\n        x) \\<approx>res (=) supp p ((a \\<rightleftharpoons> b) \\<bullet> bs,\n                                    (a \\<rightleftharpoons> b) \\<bullet> x)", "unfolding alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - bs =\n       supp ((a \\<rightleftharpoons> b) \\<bullet> x) -\n       (a \\<rightleftharpoons> b) \\<bullet> bs \\<and>\n       (supp x - bs) \\<sharp>* p \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs &&&\n    \\<exists>p.\n       supp x - bs =\n       supp ((a \\<rightleftharpoons> b) \\<bullet> x) -\n       (a \\<rightleftharpoons> b) \\<bullet> bs \\<and>\n       (supp x - bs) \\<sharp>* p \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x", "unfolding supp_eqvt[symmetric] Diff_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - bs =\n       (a \\<rightleftharpoons> b) \\<bullet> (supp x - bs) \\<and>\n       (supp x - bs) \\<sharp>* p \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs &&&\n    \\<exists>p.\n       supp x - bs =\n       (a \\<rightleftharpoons> b) \\<bullet> (supp x - bs) \\<and>\n       (supp x - bs) \\<sharp>* p \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x", "unfolding fresh_star_def fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - bs =\n       (a \\<rightleftharpoons> b) \\<bullet> (supp x - bs) \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs &&&\n    \\<exists>p.\n       supp x - bs =\n       (a \\<rightleftharpoons> b) \\<bullet> (supp x - bs) \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x", "unfolding swap_set_not_in[OF a1 a2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs &&&\n    \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x", "using a1 a2"], ["proof (prove)\nusing this:\n  a \\<notin> supp x - bs\n  b \\<notin> supp x - bs\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs &&&\n    \\<exists>p.\n       supp x - bs = supp x - bs \\<and>\n       (\\<forall>a\\<in>supp x - bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x", "by (rule_tac [!] x=\"(a \\<rightleftharpoons> b)\" in exI)\n     (auto simp: supp_perm swap_atom)"], ["", "lemma Abs_swap2:\n  assumes a1: \"a \\<notin> (supp x) - (set bs)\"\n  and     a2: \"b \\<notin> (supp x) - (set bs)\"\n  shows \"[bs]lst. x = [(a \\<rightleftharpoons> b) \\<bullet> bs]lst. ((a \\<rightleftharpoons> b) \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [bs]lst. x =\n    [(a \\<rightleftharpoons> b) \\<bullet> bs]lst. (a \\<rightleftharpoons> b) \\<bullet> x", "unfolding Abs_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (bs,\n        x) \\<approx>lst (=) supp p ((a \\<rightleftharpoons> b) \\<bullet> bs,\n                                    (a \\<rightleftharpoons> b) \\<bullet> x)", "unfolding alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - set bs =\n       supp ((a \\<rightleftharpoons> b) \\<bullet> x) -\n       set ((a \\<rightleftharpoons> b) \\<bullet> bs) \\<and>\n       (supp x - set bs) \\<sharp>* p \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs", "unfolding supp_eqvt[symmetric] Diff_eqvt[symmetric] set_eqvt[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - set bs =\n       (a \\<rightleftharpoons> b) \\<bullet> (supp x - set bs) \\<and>\n       (supp x - set bs) \\<sharp>* p \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs", "unfolding fresh_star_def fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - set bs =\n       (a \\<rightleftharpoons> b) \\<bullet> (supp x - set bs) \\<and>\n       (\\<forall>a\\<in>supp x - set bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs", "unfolding swap_set_not_in[OF a1 a2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - set bs = supp x - set bs \\<and>\n       (\\<forall>a\\<in>supp x - set bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs", "using a1 a2"], ["proof (prove)\nusing this:\n  a \\<notin> supp x - set bs\n  b \\<notin> supp x - set bs\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x - set bs = supp x - set bs \\<and>\n       (\\<forall>a\\<in>supp x - set bs. a \\<notin> supp p) \\<and>\n       p \\<bullet> x = (a \\<rightleftharpoons> b) \\<bullet> x \\<and>\n       p \\<bullet> bs = (a \\<rightleftharpoons> b) \\<bullet> bs", "by (rule_tac [!] x=\"(a \\<rightleftharpoons> b)\" in exI)\n     (auto simp: supp_perm swap_atom)"], ["", "lemma Abs_supports:\n  shows \"((supp x) - as) supports ([as]set. x)\"\n  and   \"((supp x) - as) supports ([as]res. x)\"\n  and   \"((supp x) - set bs) supports ([bs]lst. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp x - as) supports ([as]set. x) &&&\n    (supp x - as) supports ([as]res. x) &&&\n    (supp x - set bs) supports ([bs]lst. x)", "unfolding supports_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       a \\<notin> supp x - as \\<and>\n       b \\<notin> supp x - as \\<longrightarrow>\n       (a \\<rightleftharpoons> b) \\<bullet> ([as]set. x) = [as]set. x &&&\n    \\<forall>a b.\n       a \\<notin> supp x - as \\<and>\n       b \\<notin> supp x - as \\<longrightarrow>\n       (a \\<rightleftharpoons> b) \\<bullet> ([as]res. x) = [as]res. x &&&\n    \\<forall>a b.\n       a \\<notin> supp x - set bs \\<and>\n       b \\<notin> supp x - set bs \\<longrightarrow>\n       (a \\<rightleftharpoons> b) \\<bullet> ([bs]lst. x) = [bs]lst. x", "unfolding permute_Abs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       a \\<notin> supp x - as \\<and>\n       b \\<notin> supp x - as \\<longrightarrow>\n       [(a \\<rightleftharpoons> b) \\<bullet> as]set. (a \\<rightleftharpoons> b) \\<bullet> x =\n       [as]set. x &&&\n    \\<forall>a b.\n       a \\<notin> supp x - as \\<and>\n       b \\<notin> supp x - as \\<longrightarrow>\n       [(a \\<rightleftharpoons> b) \\<bullet> as]res. (a \\<rightleftharpoons> b) \\<bullet> x =\n       [as]res. x &&&\n    \\<forall>a b.\n       a \\<notin> supp x - set bs \\<and>\n       b \\<notin> supp x - set bs \\<longrightarrow>\n       [(a \\<rightleftharpoons> b) \\<bullet> bs]lst. (a \\<rightleftharpoons> b) \\<bullet> x =\n       [bs]lst. x", "by (simp_all add: Abs_swap1[symmetric] Abs_swap2[symmetric])"], ["", "function\n  supp_set  :: \"('a::pt) abs_set \\<Rightarrow> atom set\" and\n  supp_res :: \"('a::pt) abs_res \\<Rightarrow> atom set\" and\n  supp_lst :: \"('a::pt) abs_lst \\<Rightarrow> atom set\"\nwhere\n  \"supp_set ([as]set. x) = supp x - as\"\n| \"supp_res ([as]res. x) = supp x - as\"\n| \"supp_lst (Abs_lst cs x) = (supp x) - (set cs)\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa.\n           x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>as x asa xa.\n       Inl ([as]set. x) = Inl ([asa]set. xa) \\<Longrightarrow>\n       supp x - as = supp xa - asa\n 3. \\<And>as x asa xa.\n       Inl ([as]set. x) = Inr (Inl ([asa]res. xa)) \\<Longrightarrow>\n       supp x - as = supp xa - asa\n 4. \\<And>as x cs xa.\n       Inl ([as]set. x) = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow>\n       supp x - as = supp xa - set cs\n 5. \\<And>as x asa xa.\n       Inr (Inl ([as]res. x)) = Inr (Inl ([asa]res. xa)) \\<Longrightarrow>\n       supp x - as = supp xa - asa\n 6. \\<And>as x cs xa.\n       Inr (Inl ([as]res. x)) = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow>\n       supp x - as = supp xa - set cs\n 7. \\<And>cs x csa xa.\n       Inr (Inr ([cs]lst. x)) = Inr (Inr ([csa]lst. xa)) \\<Longrightarrow>\n       supp x - set cs = supp xa - set csa", "apply(simp_all add: Abs_eq_iff alphas_abs alphas)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa.\n           x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x a.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inl a\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>P x b.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> P", "apply(case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x a as xa.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inl a; a = [as]set. xa\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>P x b.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> P", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x b.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b\\<rbrakk>\n       \\<Longrightarrow> P", "apply(case_tac b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x b a.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b; b = Inl a\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>P x b ba.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b; b = Inr ba\\<rbrakk>\n       \\<Longrightarrow> P", "apply(case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x b a as xa.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b; b = Inl a; a = [as]res. xa\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>P x b ba.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b; b = Inr ba\\<rbrakk>\n       \\<Longrightarrow> P", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x b ba.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b; b = Inr ba\\<rbrakk>\n       \\<Longrightarrow> P", "apply(case_tac ba)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x b ba bs xa.\n       \\<lbrakk>\\<And>as xa. x = Inl ([as]set. xa) \\<Longrightarrow> P;\n        \\<And>as xa. x = Inr (Inl ([as]res. xa)) \\<Longrightarrow> P;\n        \\<And>cs xa. x = Inr (Inr ([cs]lst. xa)) \\<Longrightarrow> P;\n        x = Inr b; b = Inr ba; ba = [bs]lst. xa\\<rbrakk>\n       \\<Longrightarrow> P", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All supp_set_supp_res_supp_lst_dom", "by lexicographic_order"], ["", "lemma supp_funs_eqvt[eqvt]:\n  shows \"(p \\<bullet> supp_set x) = supp_set (p \\<bullet> x)\"\n  and   \"(p \\<bullet> supp_res y) = supp_res (p \\<bullet> y)\"\n  and   \"(p \\<bullet> supp_lst z) = supp_lst (p \\<bullet> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_set x = supp_set (p \\<bullet> x) &&&\n    p \\<bullet> supp_res y = supp_res (p \\<bullet> y) &&&\n    p \\<bullet> supp_lst z = supp_lst (p \\<bullet> z)", "apply(case_tac x)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>as xa.\n       x = [as]set. xa \\<Longrightarrow>\n       p \\<bullet> supp_set x = supp_set (p \\<bullet> x)\n 2. p \\<bullet> supp_res y = supp_res (p \\<bullet> y)\n 3. p \\<bullet> supp_lst z = supp_lst (p \\<bullet> z)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. p \\<bullet> supp_res y = supp_res (p \\<bullet> y)\n 2. p \\<bullet> supp_lst z = supp_lst (p \\<bullet> z)", "apply(case_tac y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>as x.\n       y = [as]res. x \\<Longrightarrow>\n       p \\<bullet> supp_res y = supp_res (p \\<bullet> y)\n 2. p \\<bullet> supp_lst z = supp_lst (p \\<bullet> z)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_lst z = supp_lst (p \\<bullet> z)", "apply(case_tac z)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>bs x.\n       z = [bs]lst. x \\<Longrightarrow>\n       p \\<bullet> supp_lst z = supp_lst (p \\<bullet> z)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Abs_fresh_aux:\n  shows \"a \\<sharp> [bs]set. x \\<Longrightarrow> a \\<sharp> supp_set ([bs]set. x)\"\n  and   \"a \\<sharp> [bs]res. x \\<Longrightarrow> a \\<sharp> supp_res ([bs]res. x)\"\n  and   \"a \\<sharp> [cs]lst. x \\<Longrightarrow> a \\<sharp> supp_lst ([cs]lst. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> [bs]set. x \\<Longrightarrow>\n     a \\<sharp> supp_set ([bs]set. x)) &&&\n    (a \\<sharp> [bs]res. x \\<Longrightarrow>\n     a \\<sharp> supp_res ([bs]res. x)) &&&\n    (a \\<sharp> [cs]lst. x \\<Longrightarrow>\n     a \\<sharp> supp_lst ([cs]lst. x))", "by (rule_tac [!] fresh_fun_eqvt_app)\n     (auto simp only: eqvt_def eqvts_raw)"], ["", "lemma Abs_supp_subset1:\n  assumes a: \"finite (supp x)\"\n  shows \"(supp x) - as \\<subseteq> supp ([as]set. x)\"\n  and   \"(supp x) - as \\<subseteq> supp ([as]res. x)\"\n  and   \"(supp x) - (set bs) \\<subseteq> supp ([bs]lst. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x - as \\<subseteq> supp ([as]set. x) &&&\n    supp x - as \\<subseteq> supp ([as]res. x) &&&\n    supp x - set bs \\<subseteq> supp ([bs]lst. x)", "unfolding supp_conv_fresh"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. \\<not> a \\<sharp> x} - as\n    \\<subseteq> {a. \\<not> a \\<sharp> [as]set. x} &&&\n    {a. \\<not> a \\<sharp> x} - as\n    \\<subseteq> {a. \\<not> a \\<sharp> [as]res. x} &&&\n    {a. \\<not> a \\<sharp> x} - set bs\n    \\<subseteq> {a. \\<not> a \\<sharp> [bs]lst. x}", "by (auto dest!: Abs_fresh_aux)\n     (simp_all add: fresh_def supp_finite_atom_set a)"], ["", "lemma Abs_supp_subset2:\n  assumes a: \"finite (supp x)\"\n  shows \"supp ([as]set. x) \\<subseteq> (supp x) - as\"\n  and   \"supp ([as]res. x) \\<subseteq> (supp x) - as\"\n  and   \"supp ([bs]lst. x) \\<subseteq> (supp x) - (set bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp ([as]set. x) \\<subseteq> supp x - as &&&\n    supp ([as]res. x) \\<subseteq> supp x - as &&&\n    supp ([bs]lst. x) \\<subseteq> supp x - set bs", "by (rule_tac [!] supp_is_subset)\n     (simp_all add: Abs_supports a)"], ["", "lemma Abs_finite_supp:\n  assumes a: \"finite (supp x)\"\n  shows \"supp ([as]set. x) = (supp x) - as\"\n  and   \"supp ([as]res. x) = (supp x) - as\"\n  and   \"supp ([bs]lst. x) = (supp x) - (set bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp ([as]set. x) = supp x - as &&&\n    supp ([as]res. x) = supp x - as &&& supp ([bs]lst. x) = supp x - set bs", "using Abs_supp_subset1[OF a] Abs_supp_subset2[OF a]"], ["proof (prove)\nusing this:\n  supp x - ?as \\<subseteq> supp ([?as]set. x)\n  supp x - ?as \\<subseteq> supp ([?as]res. x)\n  supp x - set ?bs \\<subseteq> supp ([?bs]lst. x)\n  supp ([?as]set. x) \\<subseteq> supp x - ?as\n  supp ([?as]res. x) \\<subseteq> supp x - ?as\n  supp ([?bs]lst. x) \\<subseteq> supp x - set ?bs\n\ngoal (1 subgoal):\n 1. supp ([as]set. x) = supp x - as &&&\n    supp ([as]res. x) = supp x - as &&& supp ([bs]lst. x) = supp x - set bs", "by blast+"], ["", "lemma supp_Abs:\n  fixes x::\"'a::fs\"\n  shows \"supp ([as]set. x) = (supp x) - as\"\n  and   \"supp ([as]res. x) = (supp x) - as\"\n  and   \"supp ([bs]lst. x) = (supp x) - (set bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp ([as]set. x) = supp x - as &&&\n    supp ([as]res. x) = supp x - as &&& supp ([bs]lst. x) = supp x - set bs", "by (simp_all add: Abs_finite_supp finite_supp)"], ["", "instance abs_set :: (fs) fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a abs_set, fs_class)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "apply(case_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x as xa. x = [as]set. xa \\<Longrightarrow> finite (supp x)", "apply(simp add: supp_Abs finite_supp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instance abs_res :: (fs) fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a abs_res, fs_class)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "apply(case_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x as xa. x = [as]res. xa \\<Longrightarrow> finite (supp x)", "apply(simp add: supp_Abs finite_supp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instance abs_lst :: (fs) fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a abs_lst, fs_class)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "apply(case_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x bs xa. x = [bs]lst. xa \\<Longrightarrow> finite (supp x)", "apply(simp add: supp_Abs finite_supp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Abs_fresh_iff:\n  fixes x::\"'a::fs\"\n  shows \"a \\<sharp> [bs]set. x \\<longleftrightarrow> a \\<in> bs \\<or> (a \\<notin> bs \\<and> a \\<sharp> x)\"\n  and   \"a \\<sharp> [bs]res. x \\<longleftrightarrow> a \\<in> bs \\<or> (a \\<notin> bs \\<and> a \\<sharp> x)\"\n  and   \"a \\<sharp> [cs]lst. x \\<longleftrightarrow> a \\<in> (set cs) \\<or> (a \\<notin> (set cs) \\<and> a \\<sharp> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> [bs]set. x =\n    (a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<sharp> x) &&&\n    a \\<sharp> [bs]res. x =\n    (a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<sharp> x) &&&\n    a \\<sharp> [cs]lst. x =\n    (a \\<in> set cs \\<or> a \\<notin> set cs \\<and> a \\<sharp> x)", "unfolding fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<notin> supp ([bs]set. x)) =\n    (a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<notin> supp x) &&&\n    (a \\<notin> supp ([bs]res. x)) =\n    (a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<notin> supp x) &&&\n    (a \\<notin> supp ([cs]lst. x)) =\n    (a \\<in> set cs \\<or> a \\<notin> set cs \\<and> a \\<notin> supp x)", "unfolding supp_Abs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<notin> supp x - bs) =\n    (a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<notin> supp x) &&&\n    (a \\<notin> supp x - bs) =\n    (a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<notin> supp x) &&&\n    (a \\<notin> supp x - set cs) =\n    (a \\<in> set cs \\<or> a \\<notin> set cs \\<and> a \\<notin> supp x)", "by auto"], ["", "lemma Abs_fresh_star_iff:\n  fixes x::\"'a::fs\"\n  shows \"as \\<sharp>* ([bs]set. x) \\<longleftrightarrow> (as - bs) \\<sharp>* x\"\n  and   \"as \\<sharp>* ([bs]res. x) \\<longleftrightarrow> (as - bs) \\<sharp>* x\"\n  and   \"as \\<sharp>* ([cs]lst. x) \\<longleftrightarrow> (as - set cs) \\<sharp>* x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as \\<sharp>* ([bs]set. x) = (as - bs) \\<sharp>* x &&&\n    as \\<sharp>* ([bs]res. x) = (as - bs) \\<sharp>* x &&&\n    as \\<sharp>* ([cs]lst. x) = (as - set cs) \\<sharp>* x", "unfolding fresh_star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>as. a \\<sharp> [bs]set. x) =\n    (\\<forall>a\\<in>as - bs. a \\<sharp> x) &&&\n    (\\<forall>a\\<in>as. a \\<sharp> [bs]res. x) =\n    (\\<forall>a\\<in>as - bs. a \\<sharp> x) &&&\n    (\\<forall>a\\<in>as. a \\<sharp> [cs]lst. x) =\n    (\\<forall>a\\<in>as - set cs. a \\<sharp> x)", "by (auto simp: Abs_fresh_iff)"], ["", "lemma Abs_fresh_star:\n  fixes x::\"'a::fs\"\n  shows \"as \\<subseteq> as' \\<Longrightarrow> as \\<sharp>* ([as']set. x)\"\n  and   \"as \\<subseteq> as' \\<Longrightarrow> as \\<sharp>* ([as']res. x)\"\n  and   \"bs \\<subseteq> set bs' \\<Longrightarrow> bs \\<sharp>* ([bs']lst. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as \\<subseteq> as' \\<Longrightarrow> as \\<sharp>* ([as']set. x)) &&&\n    (as \\<subseteq> as' \\<Longrightarrow> as \\<sharp>* ([as']res. x)) &&&\n    (bs \\<subseteq> set bs' \\<Longrightarrow> bs \\<sharp>* ([bs']lst. x))", "unfolding fresh_star_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (as \\<subseteq> as' \\<Longrightarrow>\n     \\<forall>a\\<in>as. a \\<sharp> [as']set. x) &&&\n    (as \\<subseteq> as' \\<Longrightarrow>\n     \\<forall>a\\<in>as. a \\<sharp> [as']res. x) &&&\n    (bs \\<subseteq> set bs' \\<Longrightarrow>\n     \\<forall>a\\<in>bs. a \\<sharp> [bs']lst. x)", "by(auto simp: Abs_fresh_iff)"], ["", "lemma Abs_fresh_star2:\n  fixes x::\"'a::fs\"\n  shows \"as \\<inter> bs = {} \\<Longrightarrow> as \\<sharp>* ([bs]set. x) \\<longleftrightarrow> as \\<sharp>* x\"\n  and   \"as \\<inter> bs = {} \\<Longrightarrow> as \\<sharp>* ([bs]res. x) \\<longleftrightarrow> as \\<sharp>* x\"\n  and   \"cs \\<inter> set ds = {} \\<Longrightarrow> cs \\<sharp>* ([ds]lst. x) \\<longleftrightarrow> cs \\<sharp>* x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as \\<inter> bs = {} \\<Longrightarrow>\n     as \\<sharp>* ([bs]set. x) = as \\<sharp>* x) &&&\n    (as \\<inter> bs = {} \\<Longrightarrow>\n     as \\<sharp>* ([bs]res. x) = as \\<sharp>* x) &&&\n    (cs \\<inter> set ds = {} \\<Longrightarrow>\n     cs \\<sharp>* ([ds]lst. x) = cs \\<sharp>* x)", "unfolding fresh_star_def Abs_fresh_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (as \\<inter> bs = {} \\<Longrightarrow>\n     (\\<forall>a\\<in>as.\n         a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<sharp> x) =\n     (\\<forall>a\\<in>as. a \\<sharp> x)) &&&\n    (as \\<inter> bs = {} \\<Longrightarrow>\n     (\\<forall>a\\<in>as.\n         a \\<in> bs \\<or> a \\<notin> bs \\<and> a \\<sharp> x) =\n     (\\<forall>a\\<in>as. a \\<sharp> x)) &&&\n    (cs \\<inter> set ds = {} \\<Longrightarrow>\n     (\\<forall>a\\<in>cs.\n         a \\<in> set ds \\<or> a \\<notin> set ds \\<and> a \\<sharp> x) =\n     (\\<forall>a\\<in>cs. a \\<sharp> x))", "by auto"], ["", "section \\<open>Abstractions of single atoms\\<close>"], ["", "lemma Abs1_eq:\n  fixes x y::\"'a::fs\"\n  shows \"[{atom a}]set. x = [{atom a}]set. y \\<longleftrightarrow> x = y\"\n  and   \"[{atom a}]res. x = [{atom a}]res. y \\<longleftrightarrow> x = y\"\n  and   \"[[atom a]]lst. x = [[atom a]]lst. y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom a}]set. y) = (x = y) &&&\n    ([{atom a}]res. x = [{atom a}]res. y) = (x = y) &&&\n    ([[atom a]]lst. x = [[atom a]]lst. y) = (x = y)", "unfolding Abs_eq_iff2 alphas"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p.\n        (supp x - {atom a} = supp y - {atom a} \\<and>\n         (supp x - {atom a}) \\<sharp>* p \\<and>\n         p \\<bullet> x = y \\<and> p \\<bullet> {atom a} = {atom a}) \\<and>\n        supp p \\<subseteq> {atom a} \\<union> {atom a}) =\n    (x = y) &&&\n    (\\<exists>p.\n        (supp x - {atom a} = supp y - {atom a} \\<and>\n         (supp x - {atom a}) \\<sharp>* p \\<and> p \\<bullet> x = y) \\<and>\n        supp p \\<subseteq> {atom a} \\<union> {atom a}) =\n    (x = y) &&&\n    (\\<exists>p.\n        (supp x - set [atom a] = supp y - set [atom a] \\<and>\n         (supp x - set [atom a]) \\<sharp>* p \\<and>\n         p \\<bullet> x = y \\<and> p \\<bullet> [atom a] = [atom a]) \\<and>\n        supp p \\<subseteq> set [atom a] \\<union> set [atom a]) =\n    (x = y)", "by (auto simp: supp_perm_singleton fresh_star_def fresh_zero_perm)"], ["", "lemma Abs1_eq_iff_fresh:\n  fixes x y::\"'a::fs\"\n  and a b c::\"'b::at\"\n  assumes \"atom c \\<sharp> (a, b, x, y)\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y) &&&\n    ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y) &&&\n    ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "have \"[{atom a}]set. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]set. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]set. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]set. x)", "by (rule_tac flip_fresh_fresh[symmetric]) (simp_all add: Abs_fresh_iff assms)"], ["proof (state)\nthis:\n  [{atom a}]set. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]set. x)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "then"], ["proof (chain)\npicking this:\n  [{atom a}]set. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]set. x)", "have \"[{atom a}]set. x = [{atom c}]set. ((a \\<leftrightarrow> c) \\<bullet> x)\""], ["proof (prove)\nusing this:\n  [{atom a}]set. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]set. x)\n\ngoal (1 subgoal):\n 1. [{atom a}]set. x = [{atom c}]set. (a \\<leftrightarrow> c) \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  [{atom a}]set. x = [{atom c}]set. (a \\<leftrightarrow> c) \\<bullet> x\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "moreover"], ["proof (state)\nthis:\n  [{atom a}]set. x = [{atom c}]set. (a \\<leftrightarrow> c) \\<bullet> x\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "have \"[{atom b}]set. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]set. y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom b}]set. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]set. y)", "by (rule_tac flip_fresh_fresh[symmetric]) (simp_all add: Abs_fresh_iff assms)"], ["proof (state)\nthis:\n  [{atom b}]set. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]set. y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "then"], ["proof (chain)\npicking this:\n  [{atom b}]set. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]set. y)", "have \"[{atom b}]set. y = [{atom c}]set. ((b \\<leftrightarrow> c) \\<bullet> y)\""], ["proof (prove)\nusing this:\n  [{atom b}]set. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]set. y)\n\ngoal (1 subgoal):\n 1. [{atom b}]set. y = [{atom c}]set. (b \\<leftrightarrow> c) \\<bullet> y", "by simp"], ["proof (state)\nthis:\n  [{atom b}]set. y = [{atom c}]set. (b \\<leftrightarrow> c) \\<bullet> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "ultimately"], ["proof (chain)\npicking this:\n  [{atom a}]set. x = [{atom c}]set. (a \\<leftrightarrow> c) \\<bullet> x\n  [{atom b}]set. y = [{atom c}]set. (b \\<leftrightarrow> c) \\<bullet> y", "show \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\""], ["proof (prove)\nusing this:\n  [{atom a}]set. x = [{atom c}]set. (a \\<leftrightarrow> c) \\<bullet> x\n  [{atom b}]set. y = [{atom c}]set. (b \\<leftrightarrow> c) \\<bullet> y\n\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "by (simp add: Abs1_eq)"], ["proof (state)\nthis:\n  ([{atom a}]set. x = [{atom b}]set. y) =\n  ((a \\<leftrightarrow> c) \\<bullet> x =\n   (b \\<leftrightarrow> c) \\<bullet> y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "have \"[{atom a}]res. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]res. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]res. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]res. x)", "by (rule_tac flip_fresh_fresh[symmetric]) (simp_all add: Abs_fresh_iff assms)"], ["proof (state)\nthis:\n  [{atom a}]res. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]res. x)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "then"], ["proof (chain)\npicking this:\n  [{atom a}]res. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]res. x)", "have \"[{atom a}]res. x = [{atom c}]res. ((a \\<leftrightarrow> c) \\<bullet> x)\""], ["proof (prove)\nusing this:\n  [{atom a}]res. x = (a \\<leftrightarrow> c) \\<bullet> ([{atom a}]res. x)\n\ngoal (1 subgoal):\n 1. [{atom a}]res. x = [{atom c}]res. (a \\<leftrightarrow> c) \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  [{atom a}]res. x = [{atom c}]res. (a \\<leftrightarrow> c) \\<bullet> x\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "moreover"], ["proof (state)\nthis:\n  [{atom a}]res. x = [{atom c}]res. (a \\<leftrightarrow> c) \\<bullet> x\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "have \"[{atom b}]res. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]res. y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom b}]res. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]res. y)", "by (rule_tac flip_fresh_fresh[symmetric]) (simp_all add: Abs_fresh_iff assms)"], ["proof (state)\nthis:\n  [{atom b}]res. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]res. y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "then"], ["proof (chain)\npicking this:\n  [{atom b}]res. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]res. y)", "have \"[{atom b}]res. y = [{atom c}]res. ((b \\<leftrightarrow> c) \\<bullet> y)\""], ["proof (prove)\nusing this:\n  [{atom b}]res. y = (b \\<leftrightarrow> c) \\<bullet> ([{atom b}]res. y)\n\ngoal (1 subgoal):\n 1. [{atom b}]res. y = [{atom c}]res. (b \\<leftrightarrow> c) \\<bullet> y", "by simp"], ["proof (state)\nthis:\n  [{atom b}]res. y = [{atom c}]res. (b \\<leftrightarrow> c) \\<bullet> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "ultimately"], ["proof (chain)\npicking this:\n  [{atom a}]res. x = [{atom c}]res. (a \\<leftrightarrow> c) \\<bullet> x\n  [{atom b}]res. y = [{atom c}]res. (b \\<leftrightarrow> c) \\<bullet> y", "show \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\""], ["proof (prove)\nusing this:\n  [{atom a}]res. x = [{atom c}]res. (a \\<leftrightarrow> c) \\<bullet> x\n  [{atom b}]res. y = [{atom c}]res. (b \\<leftrightarrow> c) \\<bullet> y\n\ngoal (1 subgoal):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "by (simp add: Abs1_eq)"], ["proof (state)\nthis:\n  ([{atom a}]res. x = [{atom b}]res. y) =\n  ((a \\<leftrightarrow> c) \\<bullet> x =\n   (b \\<leftrightarrow> c) \\<bullet> y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "have \"[[atom a]]lst. x = (a \\<leftrightarrow> c) \\<bullet> ([[atom a]]lst. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom a]]lst. x = (a \\<leftrightarrow> c) \\<bullet> ([[atom a]]lst. x)", "by (rule_tac flip_fresh_fresh[symmetric]) (simp_all add: Abs_fresh_iff assms)"], ["proof (state)\nthis:\n  [[atom a]]lst. x = (a \\<leftrightarrow> c) \\<bullet> ([[atom a]]lst. x)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "then"], ["proof (chain)\npicking this:\n  [[atom a]]lst. x = (a \\<leftrightarrow> c) \\<bullet> ([[atom a]]lst. x)", "have \"[[atom a]]lst. x = [[atom c]]lst. ((a \\<leftrightarrow> c) \\<bullet> x)\""], ["proof (prove)\nusing this:\n  [[atom a]]lst. x = (a \\<leftrightarrow> c) \\<bullet> ([[atom a]]lst. x)\n\ngoal (1 subgoal):\n 1. [[atom a]]lst. x = [[atom c]]lst. (a \\<leftrightarrow> c) \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  [[atom a]]lst. x = [[atom c]]lst. (a \\<leftrightarrow> c) \\<bullet> x\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "moreover"], ["proof (state)\nthis:\n  [[atom a]]lst. x = [[atom c]]lst. (a \\<leftrightarrow> c) \\<bullet> x\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "have \"[[atom b]]lst. y = (b \\<leftrightarrow> c) \\<bullet> ([[atom b]]lst. y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom b]]lst. y = (b \\<leftrightarrow> c) \\<bullet> ([[atom b]]lst. y)", "by (rule_tac flip_fresh_fresh[symmetric]) (simp_all add: Abs_fresh_iff assms)"], ["proof (state)\nthis:\n  [[atom b]]lst. y = (b \\<leftrightarrow> c) \\<bullet> ([[atom b]]lst. y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "then"], ["proof (chain)\npicking this:\n  [[atom b]]lst. y = (b \\<leftrightarrow> c) \\<bullet> ([[atom b]]lst. y)", "have \"[[atom b]]lst. y = [[atom c]]lst. ((b \\<leftrightarrow> c) \\<bullet> y)\""], ["proof (prove)\nusing this:\n  [[atom b]]lst. y = (b \\<leftrightarrow> c) \\<bullet> ([[atom b]]lst. y)\n\ngoal (1 subgoal):\n 1. [[atom b]]lst. y = [[atom c]]lst. (b \\<leftrightarrow> c) \\<bullet> y", "by simp"], ["proof (state)\nthis:\n  [[atom b]]lst. y = [[atom c]]lst. (b \\<leftrightarrow> c) \\<bullet> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "ultimately"], ["proof (chain)\npicking this:\n  [[atom a]]lst. x = [[atom c]]lst. (a \\<leftrightarrow> c) \\<bullet> x\n  [[atom b]]lst. y = [[atom c]]lst. (b \\<leftrightarrow> c) \\<bullet> y", "show \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y\""], ["proof (prove)\nusing this:\n  [[atom a]]lst. x = [[atom c]]lst. (a \\<leftrightarrow> c) \\<bullet> x\n  [[atom b]]lst. y = [[atom c]]lst. (b \\<leftrightarrow> c) \\<bullet> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    ((a \\<leftrightarrow> c) \\<bullet> x =\n     (b \\<leftrightarrow> c) \\<bullet> y)", "by (simp add: Abs1_eq)"], ["proof (state)\nthis:\n  ([[atom a]]lst. x = [[atom b]]lst. y) =\n  ((a \\<leftrightarrow> c) \\<bullet> x =\n   (b \\<leftrightarrow> c) \\<bullet> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs1_eq_iff_all:\n  fixes x y::\"'a::fs\"\n  and z::\"'c::fs\"\n  and a b::\"'b::at\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (\\<forall>c. atom c \\<sharp> z \\<longrightarrow> atom c \\<sharp> (a, b, x, y) \\<longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y)\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (\\<forall>c. atom c \\<sharp> z \\<longrightarrow> atom c \\<sharp> (a, b, x, y) \\<longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y)\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (\\<forall>c. atom c \\<sharp> z \\<longrightarrow> atom c \\<sharp> (a, b, x, y) \\<longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x = (b \\<leftrightarrow> c) \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (\\<forall>c.\n        atom c \\<sharp> z \\<longrightarrow>\n        atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n        (a \\<leftrightarrow> c) \\<bullet> x =\n        (b \\<leftrightarrow> c) \\<bullet> y) &&&\n    ([{atom a}]res. x = [{atom b}]res. y) =\n    (\\<forall>c.\n        atom c \\<sharp> z \\<longrightarrow>\n        atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n        (a \\<leftrightarrow> c) \\<bullet> x =\n        (b \\<leftrightarrow> c) \\<bullet> y) &&&\n    ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (\\<forall>c.\n        atom c \\<sharp> z \\<longrightarrow>\n        atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n        (a \\<leftrightarrow> c) \\<bullet> x =\n        (b \\<leftrightarrow> c) \\<bullet> y)", "apply(auto)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>[{atom a}]set. x = [{atom b}]set. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 2. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]set. x = [{atom b}]set. y\n 3. \\<And>c.\n       \\<lbrakk>[{atom a}]res. x = [{atom b}]res. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 4. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 5. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 6. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(simp add: Abs1_eq_iff_fresh(1)[symmetric])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]set. x = [{atom b}]set. y\n 2. \\<And>c.\n       \\<lbrakk>[{atom a}]res. x = [{atom b}]res. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 4. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 5. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(rule_tac ?'a=\"'b::at\" and x=\"(a, b, x, y, z)\" in obtain_fresh)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<forall>c.\n                   atom c \\<sharp> z \\<longrightarrow>\n                   atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n                   (a \\<leftrightarrow> c) \\<bullet> x =\n                   (b \\<leftrightarrow> c) \\<bullet> y;\n        atom aa \\<sharp> (a, b, x, y, z)\\<rbrakk>\n       \\<Longrightarrow> [{atom a}]set. x = [{atom b}]set. y\n 2. \\<And>c.\n       \\<lbrakk>[{atom a}]res. x = [{atom b}]res. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 4. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 5. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(drule_tac x=\"aa\" in spec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        atom aa \\<sharp> z \\<longrightarrow>\n        atom aa \\<sharp> (a, b, x, y) \\<longrightarrow>\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> [{atom a}]set. x = [{atom b}]set. y\n 2. \\<And>c.\n       \\<lbrakk>[{atom a}]res. x = [{atom b}]res. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 4. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 5. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> [{atom a}]set. x = [{atom b}]set. y\n 2. \\<And>c.\n       \\<lbrakk>[{atom a}]res. x = [{atom b}]res. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 4. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 5. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(subst Abs1_eq_iff_fresh(1))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> atom (?c17 aa) \\<sharp> (a, b, x, y)\n 2. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> ?c17 aa) \\<bullet> x =\n                         (b \\<leftrightarrow> ?c17 aa) \\<bullet> y\n 3. \\<And>c.\n       \\<lbrakk>[{atom a}]res. x = [{atom b}]res. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 4. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 5. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 6. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(auto simp: fresh_Pair)[2]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>[{atom a}]res. x = [{atom b}]res. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 2. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 3. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 4. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(simp add: Abs1_eq_iff_fresh(2)[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [{atom a}]res. x = [{atom b}]res. y\n 2. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(rule_tac ?'a=\"'b::at\" and x=\"(a, b, x, y, z)\" in obtain_fresh)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<forall>c.\n                   atom c \\<sharp> z \\<longrightarrow>\n                   atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n                   (a \\<leftrightarrow> c) \\<bullet> x =\n                   (b \\<leftrightarrow> c) \\<bullet> y;\n        atom aa \\<sharp> (a, b, x, y, z)\\<rbrakk>\n       \\<Longrightarrow> [{atom a}]res. x = [{atom b}]res. y\n 2. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(drule_tac x=\"aa\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        atom aa \\<sharp> z \\<longrightarrow>\n        atom aa \\<sharp> (a, b, x, y) \\<longrightarrow>\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> [{atom a}]res. x = [{atom b}]res. y\n 2. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> [{atom a}]res. x = [{atom b}]res. y\n 2. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 3. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(subst Abs1_eq_iff_fresh(2))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> atom (?c25 aa) \\<sharp> (a, b, x, y)\n 2. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> ?c25 aa) \\<bullet> x =\n                         (b \\<leftrightarrow> ?c25 aa) \\<bullet> y\n 3. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 4. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(auto simp: fresh_Pair)[2]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>[[atom a]]lst. x = [[atom b]]lst. y; atom c \\<sharp> z;\n        atom c \\<sharp> (a, b, x, y)\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> c) \\<bullet> x =\n                         (b \\<leftrightarrow> c) \\<bullet> y\n 2. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(simp add: Abs1_eq_iff_fresh(3)[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c.\n       atom c \\<sharp> z \\<longrightarrow>\n       atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n       (a \\<leftrightarrow> c) \\<bullet> x =\n       (b \\<leftrightarrow> c) \\<bullet> y \\<Longrightarrow>\n    [[atom a]]lst. x = [[atom b]]lst. y", "apply(rule_tac ?'a=\"'b::at\" and x=\"(a, b, x, y, z)\" in obtain_fresh)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<forall>c.\n                   atom c \\<sharp> z \\<longrightarrow>\n                   atom c \\<sharp> (a, b, x, y) \\<longrightarrow>\n                   (a \\<leftrightarrow> c) \\<bullet> x =\n                   (b \\<leftrightarrow> c) \\<bullet> y;\n        atom aa \\<sharp> (a, b, x, y, z)\\<rbrakk>\n       \\<Longrightarrow> [[atom a]]lst. x = [[atom b]]lst. y", "apply(drule_tac x=\"aa\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        atom aa \\<sharp> z \\<longrightarrow>\n        atom aa \\<sharp> (a, b, x, y) \\<longrightarrow>\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> [[atom a]]lst. x = [[atom b]]lst. y", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> [[atom a]]lst. x = [[atom b]]lst. y", "apply(subst Abs1_eq_iff_fresh(3))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> atom (?c32 aa) \\<sharp> (a, b, x, y)\n 2. \\<And>aa.\n       \\<lbrakk>atom aa \\<sharp> (a, b, x, y, z);\n        (a \\<leftrightarrow> aa) \\<bullet> x =\n        (b \\<leftrightarrow> aa) \\<bullet> y\\<rbrakk>\n       \\<Longrightarrow> (a \\<leftrightarrow> ?c32 aa) \\<bullet> x =\n                         (b \\<leftrightarrow> ?c32 aa) \\<bullet> y", "apply(auto simp: fresh_Pair)[2]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Abs1_eq_iff:\n  fixes x y::\"'a::fs\"\n  and a b::\"'b::at\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y) &&&\n    ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y) &&&\n    ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume \"a = b\""], ["proof (state)\nthis:\n  a = b\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "then"], ["proof (chain)\npicking this:\n  a = b", "have \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a = b \\<and> x = y)\""], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom b}]set. y) = (a = b \\<and> x = y)", "by (simp add: Abs1_eq)"], ["proof (state)\nthis:\n  ([{atom a}]set. x = [{atom b}]set. y) = (a = b \\<and> x = y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([{atom a}]set. x = [{atom b}]set. y) = (a = b \\<and> x = y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "moreover"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([{atom a}]set. x = [{atom b}]set. y) = (a = b \\<and> x = y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([{atom a}]set. x = [{atom b}]set. y) = (a = b \\<and> x = y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume *: \"a \\<noteq> b\" and **: \"[{atom a}]set. x = [{atom b}]set. y\""], ["proof (state)\nthis:\n  a \\<noteq> b\n  [{atom a}]set. x = [{atom b}]set. y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have #: \"atom a \\<sharp> [{atom b}]set. y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom a \\<sharp> [{atom b}]set. y", "by (simp add: **[symmetric] Abs_fresh_iff)"], ["proof (state)\nthis:\n  atom a \\<sharp> [{atom b}]set. y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"[{atom a}]set. ((a \\<leftrightarrow> b) \\<bullet> y) = (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y =\n    (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)", "by (simp)"], ["proof (state)\nthis:\n  [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = [{atom b}]set. y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y) = [{atom b}]set. y", "by (rule flip_fresh_fresh) (simp add: #, simp add: Abs_fresh_iff)"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y) = [{atom b}]set. y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y) = [{atom b}]set. y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = [{atom a}]set. x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom b}]set. y = [{atom a}]set. x", "using **"], ["proof (prove)\nusing this:\n  [{atom a}]set. x = [{atom b}]set. y\n\ngoal (1 subgoal):\n 1. [{atom b}]set. y = [{atom a}]set. x", "by simp"], ["proof (state)\nthis:\n  [{atom b}]set. y = [{atom a}]set. x\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "finally"], ["proof (chain)\npicking this:\n  [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y = [{atom a}]set. x", "have \"a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\""], ["proof (prove)\nusing this:\n  [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y = [{atom a}]set. x\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<and>\n    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y", "using # *"], ["proof (prove)\nusing this:\n  [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y = [{atom a}]set. x\n  atom a \\<sharp> [{atom b}]set. y\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<and>\n    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y", "by (simp add: Abs1_eq Abs_fresh_iff)"], ["proof (state)\nthis:\n  a \\<noteq> b \\<and>\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [{atom a}]set. x = [{atom b}]set. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [{atom a}]set. x = [{atom b}]set. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [{atom a}]set. x = [{atom b}]set. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume *: \"a \\<noteq> b\" and **: \"x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\""], ["proof (state)\nthis:\n  a \\<noteq> b\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"[{atom a}]set. x = [{atom a}]set. ((a \\<leftrightarrow> b) \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]set. x = [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y", "using **"], ["proof (prove)\nusing this:\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. [{atom a}]set. x = [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y", "by simp"], ["proof (state)\nthis:\n  [{atom a}]set. x = [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [{atom a}]set. x = [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y =\n    (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)", "by (simp add: permute_set_def)"], ["proof (state)\nthis:\n  [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [{atom a}]set. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y)\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = [{atom b}]set. y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y) = [{atom b}]set. y", "by (rule flip_fresh_fresh) (simp add: Abs_fresh_iff **, simp add: Abs_fresh_iff)"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]set. y) = [{atom b}]set. y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "finally"], ["proof (chain)\npicking this:\n  [{atom a}]set. x = [{atom b}]set. y", "have \"[{atom a}]set. x = [{atom b}]set. y\""], ["proof (prove)\nusing this:\n  [{atom a}]set. x = [{atom b}]set. y\n\ngoal (1 subgoal):\n 1. [{atom a}]set. x = [{atom b}]set. y", "."], ["proof (state)\nthis:\n  [{atom a}]set. x = [{atom b}]set. y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [{atom a}]set. x = [{atom b}]set. y\n\ngoal (3 subgoals):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 3. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "ultimately"], ["proof (chain)\npicking this:\n  a = b \\<Longrightarrow>\n  ([{atom a}]set. x = [{atom b}]set. y) = (a = b \\<and> x = y)\n  \\<lbrakk>a \\<noteq> b; [{atom a}]set. x = [{atom b}]set. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [{atom a}]set. x = [{atom b}]set. y", "show \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\""], ["proof (prove)\nusing this:\n  a = b \\<Longrightarrow>\n  ([{atom a}]set. x = [{atom b}]set. y) = (a = b \\<and> x = y)\n  \\<lbrakk>a \\<noteq> b; [{atom a}]set. x = [{atom b}]set. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [{atom a}]set. x = [{atom b}]set. y\n\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "by blast"], ["proof (state)\nthis:\n  ([{atom a}]set. x = [{atom b}]set. y) =\n  (a = b \\<and> x = y \\<or>\n   a \\<noteq> b \\<and>\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume \"a = b\""], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "then"], ["proof (chain)\npicking this:\n  a = b", "have \"Abs_res {atom a} x = Abs_res {atom b} y \\<longleftrightarrow> (a = b \\<and> x = y)\""], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. ([{atom a}]res. x = [{atom b}]res. y) = (a = b \\<and> x = y)", "by (simp add: Abs1_eq)"], ["proof (state)\nthis:\n  ([{atom a}]res. x = [{atom b}]res. y) = (a = b \\<and> x = y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([{atom a}]res. x = [{atom b}]res. y) = (a = b \\<and> x = y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "moreover"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([{atom a}]res. x = [{atom b}]res. y) = (a = b \\<and> x = y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([{atom a}]res. x = [{atom b}]res. y) = (a = b \\<and> x = y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume *: \"a \\<noteq> b\" and **: \"Abs_res {atom a} x = Abs_res {atom b} y\""], ["proof (state)\nthis:\n  a \\<noteq> b\n  [{atom a}]res. x = [{atom b}]res. y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have #: \"atom a \\<sharp> Abs_res {atom b} y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom a \\<sharp> [{atom b}]res. y", "by (simp add: **[symmetric] Abs_fresh_iff)"], ["proof (state)\nthis:\n  atom a \\<sharp> [{atom b}]res. y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"Abs_res {atom a} ((a \\<leftrightarrow> b) \\<bullet> y) = (a \\<leftrightarrow> b) \\<bullet> (Abs_res {atom b} y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y =\n    (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y)", "by simp"], ["proof (state)\nthis:\n  [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = Abs_res {atom b} y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y) = [{atom b}]res. y", "by (rule flip_fresh_fresh) (simp add: #, simp add: Abs_fresh_iff)"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y) = [{atom b}]res. y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y) = [{atom b}]res. y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = Abs_res {atom a} x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom b}]res. y = [{atom a}]res. x", "using **"], ["proof (prove)\nusing this:\n  [{atom a}]res. x = [{atom b}]res. y\n\ngoal (1 subgoal):\n 1. [{atom b}]res. y = [{atom a}]res. x", "by simp"], ["proof (state)\nthis:\n  [{atom b}]res. y = [{atom a}]res. x\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "finally"], ["proof (chain)\npicking this:\n  [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y = [{atom a}]res. x", "have \"a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\""], ["proof (prove)\nusing this:\n  [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y = [{atom a}]res. x\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<and>\n    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y", "using # *"], ["proof (prove)\nusing this:\n  [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y = [{atom a}]res. x\n  atom a \\<sharp> [{atom b}]res. y\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<and>\n    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y", "by (simp add: Abs1_eq Abs_fresh_iff)"], ["proof (state)\nthis:\n  a \\<noteq> b \\<and>\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [{atom a}]res. x = [{atom b}]res. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [{atom a}]res. x = [{atom b}]res. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [{atom a}]res. x = [{atom b}]res. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume *: \"a \\<noteq> b\" and **: \"x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\""], ["proof (state)\nthis:\n  a \\<noteq> b\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"Abs_res {atom a} x = Abs_res {atom a} ((a \\<leftrightarrow> b) \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]res. x = [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y", "using **"], ["proof (prove)\nusing this:\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. [{atom a}]res. x = [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y", "by simp"], ["proof (state)\nthis:\n  [{atom a}]res. x = [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [{atom a}]res. x = [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = (a \\<leftrightarrow> b) \\<bullet> Abs_res {atom b} y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y =\n    (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y)", "by (simp add: permute_set_def)"], ["proof (state)\nthis:\n  [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [{atom a}]res. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y)\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = Abs_res {atom b} y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y) = [{atom b}]res. y", "by (rule flip_fresh_fresh) (simp add: Abs_fresh_iff **, simp add: Abs_fresh_iff)"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([{atom b}]res. y) = [{atom b}]res. y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "finally"], ["proof (chain)\npicking this:\n  [{atom a}]res. x = [{atom b}]res. y", "have \"Abs_res {atom a} x = Abs_res {atom b} y\""], ["proof (prove)\nusing this:\n  [{atom a}]res. x = [{atom b}]res. y\n\ngoal (1 subgoal):\n 1. [{atom a}]res. x = [{atom b}]res. y", "."], ["proof (state)\nthis:\n  [{atom a}]res. x = [{atom b}]res. y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [{atom a}]res. x = [{atom b}]res. y\n\ngoal (2 subgoals):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n 2. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "ultimately"], ["proof (chain)\npicking this:\n  a = b \\<Longrightarrow>\n  ([{atom a}]res. x = [{atom b}]res. y) = (a = b \\<and> x = y)\n  \\<lbrakk>a \\<noteq> b; [{atom a}]res. x = [{atom b}]res. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [{atom a}]res. x = [{atom b}]res. y", "show \"Abs_res {atom a} x = Abs_res {atom b} y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\""], ["proof (prove)\nusing this:\n  a = b \\<Longrightarrow>\n  ([{atom a}]res. x = [{atom b}]res. y) = (a = b \\<and> x = y)\n  \\<lbrakk>a \\<noteq> b; [{atom a}]res. x = [{atom b}]res. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [{atom a}]res. x = [{atom b}]res. y\n\ngoal (1 subgoal):\n 1. ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "by blast"], ["proof (state)\nthis:\n  ([{atom a}]res. x = [{atom b}]res. y) =\n  (a = b \\<and> x = y \\<or>\n   a \\<noteq> b \\<and>\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume \"a = b\""], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "then"], ["proof (chain)\npicking this:\n  a = b", "have \"Abs_lst [atom a] x = Abs_lst [atom b] y \\<longleftrightarrow> (a = b \\<and> x = y)\""], ["proof (prove)\nusing this:\n  a = b\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) = (a = b \\<and> x = y)", "by (simp add: Abs1_eq)"], ["proof (state)\nthis:\n  ([[atom a]]lst. x = [[atom b]]lst. y) = (a = b \\<and> x = y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([[atom a]]lst. x = [[atom b]]lst. y) = (a = b \\<and> x = y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "moreover"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([[atom a]]lst. x = [[atom b]]lst. y) = (a = b \\<and> x = y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\nthis:\n  a = b \\<Longrightarrow>\n  ([[atom a]]lst. x = [[atom b]]lst. y) = (a = b \\<and> x = y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume *: \"a \\<noteq> b\" and **: \"Abs_lst [atom a] x = Abs_lst [atom b] y\""], ["proof (state)\nthis:\n  a \\<noteq> b\n  [[atom a]]lst. x = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have #: \"atom a \\<sharp> Abs_lst [atom b] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom a \\<sharp> [[atom b]]lst. y", "by (simp add: **[symmetric] Abs_fresh_iff)"], ["proof (state)\nthis:\n  atom a \\<sharp> [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"Abs_lst [atom a] ((a \\<leftrightarrow> b) \\<bullet> y) = (a \\<leftrightarrow> b) \\<bullet> (Abs_lst [atom b] y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y =\n    (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y)", "by simp"], ["proof (state)\nthis:\n  [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = Abs_lst [atom b] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y) = [[atom b]]lst. y", "by (rule flip_fresh_fresh) (simp add: #, simp add: Abs_fresh_iff)"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y) = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y) = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = Abs_lst [atom a] x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom b]]lst. y = [[atom a]]lst. x", "using **"], ["proof (prove)\nusing this:\n  [[atom a]]lst. x = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. [[atom b]]lst. y = [[atom a]]lst. x", "by simp"], ["proof (state)\nthis:\n  [[atom b]]lst. y = [[atom a]]lst. x\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "finally"], ["proof (chain)\npicking this:\n  [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y = [[atom a]]lst. x", "have \"a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\""], ["proof (prove)\nusing this:\n  [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y = [[atom a]]lst. x\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<and>\n    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y", "using # *"], ["proof (prove)\nusing this:\n  [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y = [[atom a]]lst. x\n  atom a \\<sharp> [[atom b]]lst. y\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<and>\n    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y", "by (simp add: Abs1_eq Abs_fresh_iff)"], ["proof (state)\nthis:\n  a \\<noteq> b \\<and>\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [[atom a]]lst. x = [[atom b]]lst. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [[atom a]]lst. x = [[atom b]]lst. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b; [[atom a]]lst. x = [[atom b]]lst. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "assume *: \"a \\<noteq> b\" and **: \"x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\""], ["proof (state)\nthis:\n  a \\<noteq> b\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"Abs_lst [atom a] x = Abs_lst [atom a] ((a \\<leftrightarrow> b) \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom a]]lst. x = [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y", "using **"], ["proof (prove)\nusing this:\n  x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\n\ngoal (1 subgoal):\n 1. [[atom a]]lst. x = [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y", "by simp"], ["proof (state)\nthis:\n  [[atom a]]lst. x = [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [[atom a]]lst. x = [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = (a \\<leftrightarrow> b) \\<bullet> Abs_lst [atom b] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y =\n    (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y)", "by simp"], ["proof (state)\nthis:\n  [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "also"], ["proof (state)\nthis:\n  [[atom a]]lst. (a \\<leftrightarrow> b) \\<bullet> y =\n  (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y)\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "have \"\\<dots> = Abs_lst [atom b] y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y) = [[atom b]]lst. y", "by (rule flip_fresh_fresh) (simp add: Abs_fresh_iff **, simp add: Abs_fresh_iff)"], ["proof (state)\nthis:\n  (a \\<leftrightarrow> b) \\<bullet> ([[atom b]]lst. y) = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "finally"], ["proof (chain)\npicking this:\n  [[atom a]]lst. x = [[atom b]]lst. y", "have \"Abs_lst [atom a] x = Abs_lst [atom b] y\""], ["proof (prove)\nusing this:\n  [[atom a]]lst. x = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. [[atom a]]lst. x = [[atom b]]lst. y", "."], ["proof (state)\nthis:\n  [[atom a]]lst. x = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [[atom a]]lst. x = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "ultimately"], ["proof (chain)\npicking this:\n  a = b \\<Longrightarrow>\n  ([[atom a]]lst. x = [[atom b]]lst. y) = (a = b \\<and> x = y)\n  \\<lbrakk>a \\<noteq> b; [[atom a]]lst. x = [[atom b]]lst. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [[atom a]]lst. x = [[atom b]]lst. y", "show \"Abs_lst [atom a] x = Abs_lst [atom b] y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\""], ["proof (prove)\nusing this:\n  a = b \\<Longrightarrow>\n  ([[atom a]]lst. x = [[atom b]]lst. y) = (a = b \\<and> x = y)\n  \\<lbrakk>a \\<noteq> b; [[atom a]]lst. x = [[atom b]]lst. y\\<rbrakk>\n  \\<Longrightarrow> a \\<noteq> b \\<and>\n                    x = (a \\<leftrightarrow> b) \\<bullet> y \\<and>\n                    atom a \\<sharp> y\n  \\<lbrakk>a \\<noteq> b;\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y\\<rbrakk>\n  \\<Longrightarrow> [[atom a]]lst. x = [[atom b]]lst. y\n\ngoal (1 subgoal):\n 1. ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)", "by blast"], ["proof (state)\nthis:\n  ([[atom a]]lst. x = [[atom b]]lst. y) =\n  (a = b \\<and> x = y \\<or>\n   a \\<noteq> b \\<and>\n   x = (a \\<leftrightarrow> b) \\<bullet> y \\<and> atom a \\<sharp> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs1_eq_iff':\n  fixes x::\"'a::fs\"\n  and a b::\"'b::at\"\n  shows \"[{atom a}]set. x = [{atom b}]set. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x)\"\n  and   \"[{atom a}]res. x = [{atom b}]res. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x)\"\n  and   \"[[atom a]]lst. x = [[atom b]]lst. y \\<longleftrightarrow> (a = b \\<and> x = y) \\<or> (a \\<noteq> b \\<and> (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([{atom a}]set. x = [{atom b}]set. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x) &&&\n    ([{atom a}]res. x = [{atom b}]res. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x) &&&\n    ([[atom a]]lst. x = [[atom b]]lst. y) =\n    (a = b \\<and> x = y \\<or>\n     a \\<noteq> b \\<and>\n     (b \\<leftrightarrow> a) \\<bullet> x = y \\<and> atom b \\<sharp> x)", "by (auto simp: Abs1_eq_iff fresh_permute_left)"], ["", "ML \\<open>\nfun alpha_single_simproc thm _ ctxt ctrm =\n  let\n    val thy = Proof_Context.theory_of ctxt\n    val _ $ (_ $ x) $ (_ $ y) = Thm.term_of ctrm\n    val cvrs = union (op =) (Term.add_frees x []) (Term.add_frees y [])\n      |> filter (fn (_, ty) => Sign.of_sort thy (ty, @{sort fs}))\n      |> map Free\n      |> HOLogic.mk_tuple\n      |> Thm.cterm_of ctxt\n    val cvrs_ty = Thm.ctyp_of_cterm cvrs\n    val thm' = thm\n      |> Thm.instantiate' [NONE, NONE, SOME cvrs_ty] [NONE, NONE, NONE, NONE, SOME cvrs]\n  in\n    SOME thm'\n  end\n\\<close>"], ["", "simproc_setup alpha_set (\"[{atom a}]set. x = [{atom b}]set. y\") =\n  \\<open>alpha_single_simproc @{thm Abs1_eq_iff_all(1)[THEN eq_reflection]}\\<close>"], ["", "simproc_setup alpha_res (\"[{atom a}]res. x = [{atom b}]res. y\") =\n  \\<open>alpha_single_simproc @{thm Abs1_eq_iff_all(2)[THEN eq_reflection]}\\<close>"], ["", "simproc_setup alpha_lst (\"[[atom a]]lst. x = [[atom b]]lst. y\") =\n  \\<open>alpha_single_simproc @{thm Abs1_eq_iff_all(3)[THEN eq_reflection]}\\<close>"], ["", "subsection \\<open>Renaming of bodies of abstractions\\<close>"], ["", "lemma Abs_rename_set:\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]set. x = [p \\<bullet> bs]set. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "from set_renaming_perm2"], ["proof (chain)\npicking this:\n  \\<exists>q.\n     (\\<forall>b\\<in>?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> ?bs \\<union> ?p \\<bullet> ?bs", "obtain q where *: \"\\<forall>b \\<in> bs. q \\<bullet> b = p \\<bullet> b\" and **: \"supp q \\<subseteq> bs \\<union> (p \\<bullet> bs)\""], ["proof (prove)\nusing this:\n  \\<exists>q.\n     (\\<forall>b\\<in>?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> ?bs \\<union> ?p \\<bullet> ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>\\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b;\n         supp q \\<subseteq> bs \\<union> p \\<bullet> bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have ***: \"q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<bullet> bs = p \\<bullet> bs", "using *"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b\n\ngoal (1 subgoal):\n 1. q \\<bullet> bs = p \\<bullet> bs", "unfolding permute_set_eq_image image_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>bs. y = q \\<bullet> x} =\n    {y. \\<exists>x\\<in>bs. y = p \\<bullet> x}", "by auto"], ["proof (state)\nthis:\n  q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have \"[bs]set. x =  q \\<bullet> ([bs]set. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [bs]set. x = q \\<bullet> ([bs]set. x)", "apply(rule perm_supp_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp q \\<sharp>* ([bs]set. x)", "using a **"], ["proof (prove)\nusing this:\n  (p \\<bullet> bs) \\<sharp>* x\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. supp q \\<sharp>* ([bs]set. x)", "unfolding Abs_fresh_star_iff"], ["proof (prove)\nusing this:\n  (p \\<bullet> bs) \\<sharp>* x\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. (supp q - bs) \\<sharp>* x", "unfolding fresh_star_def"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>p \\<bullet> bs. a \\<sharp> x\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>supp q - bs. a \\<sharp> x", "by auto"], ["proof (state)\nthis:\n  [bs]set. x = q \\<bullet> ([bs]set. x)\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "also"], ["proof (state)\nthis:\n  [bs]set. x = q \\<bullet> ([bs]set. x)\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have \"\\<dots> = [q \\<bullet> bs]set. (q \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<bullet> ([bs]set. x) = [q \\<bullet> bs]set. q \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  q \\<bullet> ([bs]set. x) = [q \\<bullet> bs]set. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "finally"], ["proof (chain)\npicking this:\n  [bs]set. x = [q \\<bullet> bs]set. q \\<bullet> x", "have \"[bs]set. x = [p \\<bullet> bs]set. (q \\<bullet> x)\""], ["proof (prove)\nusing this:\n  [bs]set. x = [q \\<bullet> bs]set. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x", "by (simp add: ***)"], ["proof (state)\nthis:\n  [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "then"], ["proof (chain)\npicking this:\n  [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x", "show \"\\<exists>q. [bs]set. x = [p \\<bullet> bs]set. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\nusing this:\n  [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "using ***"], ["proof (prove)\nusing this:\n  [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x\n  q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "by metis"], ["proof (state)\nthis:\n  \\<exists>q.\n     [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n     q \\<bullet> bs = p \\<bullet> bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs_rename_res:\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]res. x = [p \\<bullet> bs]res. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "from set_renaming_perm2"], ["proof (chain)\npicking this:\n  \\<exists>q.\n     (\\<forall>b\\<in>?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> ?bs \\<union> ?p \\<bullet> ?bs", "obtain q where *: \"\\<forall>b \\<in> bs. q \\<bullet> b = p \\<bullet> b\" and **: \"supp q \\<subseteq> bs \\<union> (p \\<bullet> bs)\""], ["proof (prove)\nusing this:\n  \\<exists>q.\n     (\\<forall>b\\<in>?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> ?bs \\<union> ?p \\<bullet> ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>\\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b;\n         supp q \\<subseteq> bs \\<union> p \\<bullet> bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have ***: \"q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<bullet> bs = p \\<bullet> bs", "using *"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b\n\ngoal (1 subgoal):\n 1. q \\<bullet> bs = p \\<bullet> bs", "unfolding permute_set_eq_image image_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>bs. q \\<bullet> b = p \\<bullet> b\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>bs. y = q \\<bullet> x} =\n    {y. \\<exists>x\\<in>bs. y = p \\<bullet> x}", "by auto"], ["proof (state)\nthis:\n  q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have \"[bs]res. x =  q \\<bullet> ([bs]res. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [bs]res. x = q \\<bullet> ([bs]res. x)", "apply(rule perm_supp_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp q \\<sharp>* ([bs]res. x)", "using a **"], ["proof (prove)\nusing this:\n  (p \\<bullet> bs) \\<sharp>* x\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. supp q \\<sharp>* ([bs]res. x)", "unfolding Abs_fresh_star_iff"], ["proof (prove)\nusing this:\n  (p \\<bullet> bs) \\<sharp>* x\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. (supp q - bs) \\<sharp>* x", "unfolding fresh_star_def"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>p \\<bullet> bs. a \\<sharp> x\n  supp q \\<subseteq> bs \\<union> p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>supp q - bs. a \\<sharp> x", "by auto"], ["proof (state)\nthis:\n  [bs]res. x = q \\<bullet> ([bs]res. x)\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "also"], ["proof (state)\nthis:\n  [bs]res. x = q \\<bullet> ([bs]res. x)\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have \"\\<dots> = [q \\<bullet> bs]res. (q \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<bullet> ([bs]res. x) = [q \\<bullet> bs]res. q \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  q \\<bullet> ([bs]res. x) = [q \\<bullet> bs]res. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "finally"], ["proof (chain)\npicking this:\n  [bs]res. x = [q \\<bullet> bs]res. q \\<bullet> x", "have \"[bs]res. x = [p \\<bullet> bs]res. (q \\<bullet> x)\""], ["proof (prove)\nusing this:\n  [bs]res. x = [q \\<bullet> bs]res. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x", "by (simp add: ***)"], ["proof (state)\nthis:\n  [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "then"], ["proof (chain)\npicking this:\n  [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x", "show \"\\<exists>q. [bs]res. x = [p \\<bullet> bs]res. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\nusing this:\n  [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "using ***"], ["proof (prove)\nusing this:\n  [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x\n  q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "by metis"], ["proof (state)\nthis:\n  \\<exists>q.\n     [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n     q \\<bullet> bs = p \\<bullet> bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Abs_rename_lst:\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> (set bs)) \\<sharp>* x\"\n  shows \"\\<exists>q. [bs]lst. x = [p \\<bullet> bs]lst. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "from list_renaming_perm"], ["proof (chain)\npicking this:\n  \\<exists>q.\n     (\\<forall>b\\<in>set ?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> set ?bs \\<union> ?p \\<bullet> set ?bs", "obtain q where *: \"\\<forall>b \\<in> set bs. q \\<bullet> b = p \\<bullet> b\" and **: \"supp q \\<subseteq> set bs \\<union> (p \\<bullet> set bs)\""], ["proof (prove)\nusing this:\n  \\<exists>q.\n     (\\<forall>b\\<in>set ?bs. q \\<bullet> b = ?p \\<bullet> b) \\<and>\n     supp q \\<subseteq> set ?bs \\<union> ?p \\<bullet> set ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>\\<forall>b\\<in>set bs. q \\<bullet> b = p \\<bullet> b;\n         supp q \\<subseteq> set bs \\<union> p \\<bullet> set bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>b\\<in>set bs. q \\<bullet> b = p \\<bullet> b\n  supp q \\<subseteq> set bs \\<union> p \\<bullet> set bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have ***: \"q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<bullet> bs = p \\<bullet> bs", "using *"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>set bs. q \\<bullet> b = p \\<bullet> b\n\ngoal (1 subgoal):\n 1. q \\<bullet> bs = p \\<bullet> bs", "by (induct bs) (simp_all add: insert_eqvt)"], ["proof (state)\nthis:\n  q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have \"[bs]lst. x =  q \\<bullet> ([bs]lst. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [bs]lst. x = q \\<bullet> ([bs]lst. x)", "apply(rule perm_supp_eq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp q \\<sharp>* ([bs]lst. x)", "using a **"], ["proof (prove)\nusing this:\n  (p \\<bullet> set bs) \\<sharp>* x\n  supp q \\<subseteq> set bs \\<union> p \\<bullet> set bs\n\ngoal (1 subgoal):\n 1. supp q \\<sharp>* ([bs]lst. x)", "unfolding Abs_fresh_star_iff"], ["proof (prove)\nusing this:\n  (p \\<bullet> set bs) \\<sharp>* x\n  supp q \\<subseteq> set bs \\<union> p \\<bullet> set bs\n\ngoal (1 subgoal):\n 1. (supp q - set bs) \\<sharp>* x", "unfolding fresh_star_def"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>p \\<bullet> set bs. a \\<sharp> x\n  supp q \\<subseteq> set bs \\<union> p \\<bullet> set bs\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>supp q - set bs. a \\<sharp> x", "by auto"], ["proof (state)\nthis:\n  [bs]lst. x = q \\<bullet> ([bs]lst. x)\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "also"], ["proof (state)\nthis:\n  [bs]lst. x = q \\<bullet> ([bs]lst. x)\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "have \"\\<dots> = [q \\<bullet> bs]lst. (q \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<bullet> ([bs]lst. x) = [q \\<bullet> bs]lst. q \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  q \\<bullet> ([bs]lst. x) = [q \\<bullet> bs]lst. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "finally"], ["proof (chain)\npicking this:\n  [bs]lst. x = [q \\<bullet> bs]lst. q \\<bullet> x", "have \"[bs]lst. x = [p \\<bullet> bs]lst. (q \\<bullet> x)\""], ["proof (prove)\nusing this:\n  [bs]lst. x = [q \\<bullet> bs]lst. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x", "by (simp add: ***)"], ["proof (state)\nthis:\n  [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "then"], ["proof (chain)\npicking this:\n  [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x", "show \"\\<exists>q. [bs]lst. x = [p \\<bullet> bs]lst. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\nusing this:\n  [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "using ***"], ["proof (prove)\nusing this:\n  [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x\n  q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "by metis"], ["proof (state)\nthis:\n  \\<exists>q.\n     [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n     q \\<bullet> bs = p \\<bullet> bs\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>for deep recursive binders\\<close>"], ["", "lemma Abs_rename_set':\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]set. x = [q \\<bullet> bs]set. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [q \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "using Abs_rename_set[OF a]"], ["proof (prove)\nusing this:\n  \\<exists>q.\n     [bs]set. x = [p \\<bullet> bs]set. q \\<bullet> x \\<and>\n     q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]set. x = [q \\<bullet> bs]set. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "by metis"], ["", "lemma Abs_rename_res':\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> bs) \\<sharp>* x\"\n  (*and     b: \"finite bs\"*)\n  shows \"\\<exists>q. [bs]res. x = [q \\<bullet> bs]res. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [q \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "using Abs_rename_res[OF a]"], ["proof (prove)\nusing this:\n  \\<exists>q.\n     [bs]res. x = [p \\<bullet> bs]res. q \\<bullet> x \\<and>\n     q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]res. x = [q \\<bullet> bs]res. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "by metis"], ["", "lemma Abs_rename_lst':\n  fixes x::\"'a::fs\"\n  assumes a: \"(p \\<bullet> (set bs)) \\<sharp>* x\"\n  shows \"\\<exists>q. [bs]lst. x = [q \\<bullet> bs]lst. (q \\<bullet> x) \\<and> q \\<bullet> bs = p \\<bullet> bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [q \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "using Abs_rename_lst[OF a]"], ["proof (prove)\nusing this:\n  \\<exists>q.\n     [bs]lst. x = [p \\<bullet> bs]lst. q \\<bullet> x \\<and>\n     q \\<bullet> bs = p \\<bullet> bs\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       [bs]lst. x = [q \\<bullet> bs]lst. q \\<bullet> x \\<and>\n       q \\<bullet> bs = p \\<bullet> bs", "by metis"], ["", "section \\<open>Infrastructure for building tuples of relations and functions\\<close>"], ["", "fun\n  prod_fv :: \"('a \\<Rightarrow> atom set) \\<Rightarrow> ('b \\<Rightarrow> atom set) \\<Rightarrow> ('a \\<times> 'b) \\<Rightarrow> atom set\"\nwhere\n  \"prod_fv fv1 fv2 (x, y) = fv1 x \\<union> fv2 y\""], ["", "definition\n  prod_alpha :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> ('b \\<Rightarrow> 'b \\<Rightarrow> bool) \\<Rightarrow> ('a \\<times> 'b \\<Rightarrow> 'a \\<times> 'b \\<Rightarrow> bool)\"\nwhere\n \"prod_alpha = rel_prod\""], ["", "lemma [quot_respect]:\n  shows \"((R1 ===> (=)) ===> (R2 ===> (=)) ===> rel_prod R1 R2 ===> (=)) prod_fv prod_fv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((R1 ===> (=)) ===> (R2 ===> (=)) ===> rel_prod R1 R2 ===> (=)) prod_fv\n     prod_fv", "unfolding rel_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       (\\<forall>xa ya.\n           R1 xa ya \\<longrightarrow> x xa = y ya) \\<longrightarrow>\n       (\\<forall>xa ya.\n           (\\<forall>x y.\n               R2 x y \\<longrightarrow> xa x = ya y) \\<longrightarrow>\n           (\\<forall>xb yb.\n               rel_prod R1 R2 xb yb \\<longrightarrow>\n               prod_fv x xa xb = prod_fv y ya yb))", "by auto"], ["", "lemma [quot_preserve]:\n  assumes q1: \"Quotient3 R1 abs1 rep1\"\n  and     q2: \"Quotient3 R2 abs2 rep2\"\n  shows \"((abs1 ---> id) ---> (abs2 ---> id) ---> map_prod rep1 rep2 ---> id) prod_fv = prod_fv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((abs1 ---> id) ---> (abs2 ---> id) ---> map_prod rep1 rep2 ---> id)\n     prod_fv =\n    prod_fv", "by (simp add: fun_eq_iff Quotient3_abs_rep[OF q1] Quotient3_abs_rep[OF q2])"], ["", "lemma [mono]:\n  shows \"A <= B \\<Longrightarrow> C <= D ==> prod_alpha A C <= prod_alpha B D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<le> B; C \\<le> D\\<rbrakk>\n    \\<Longrightarrow> prod_alpha A C \\<le> prod_alpha B D", "unfolding prod_alpha_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<le> B; C \\<le> D\\<rbrakk>\n    \\<Longrightarrow> rel_prod A C \\<le> rel_prod B D", "by auto"], ["", "lemma [eqvt]:\n  shows \"p \\<bullet> prod_alpha A B x y = prod_alpha (p \\<bullet> A) (p \\<bullet> B) (p \\<bullet> x) (p \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> prod_alpha A B x y =\n    prod_alpha (p \\<bullet> A) (p \\<bullet> B) (p \\<bullet> x)\n     (p \\<bullet> y)", "unfolding prod_alpha_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> rel_prod A B x y =\n    rel_prod (p \\<bullet> A) (p \\<bullet> B) (p \\<bullet> x) (p \\<bullet> y)", "unfolding rel_prod_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> (case x of\n                 (a, b) \\<Rightarrow> \\<lambda>(c, d). A a c \\<and> B b d)\n                 y =\n    (case p \\<bullet> x of\n     (a, b) \\<Rightarrow>\n       \\<lambda>(c, d). (p \\<bullet> A) a c \\<and> (p \\<bullet> B) b d)\n     (p \\<bullet> y)", "by (perm_simp) (rule refl)"], ["", "lemma [eqvt]:\n  shows \"p \\<bullet> prod_fv A B (x, y) = prod_fv (p \\<bullet> A) (p \\<bullet> B) (p \\<bullet> x, p \\<bullet> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> prod_fv A B (x, y) =\n    prod_fv (p \\<bullet> A) (p \\<bullet> B) (p \\<bullet> x, p \\<bullet> y)", "unfolding prod_fv.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> (A x \\<union> B y) =\n    (p \\<bullet> A) (p \\<bullet> x) \\<union> (p \\<bullet> B) (p \\<bullet> y)", "by (perm_simp) (rule refl)"], ["", "lemma prod_fv_supp:\n  shows \"prod_fv supp supp = supp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_fv supp supp = supp", "by (rule ext)\n   (auto simp: supp_Pair)"], ["", "lemma prod_alpha_eq:\n  shows \"prod_alpha ((=)) ((=)) = ((=))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_alpha (=) (=) = (=)", "unfolding prod_alpha_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_prod (=) (=) = (=)", "by (auto intro!: ext)"], ["", "end"]]}