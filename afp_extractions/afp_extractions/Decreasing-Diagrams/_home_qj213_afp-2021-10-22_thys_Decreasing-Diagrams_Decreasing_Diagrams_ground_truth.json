{"file_name": "/home/qj213/afp-2021-10-22/thys/Decreasing-Diagrams/Decreasing_Diagrams.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Decreasing-Diagrams", "problem_names": ["lemma count_diff [simp]:\n  \"count (M -s A) a = count M a * of_bool (a \\<notin> A)\"", "lemma set_mset_diff [simp]:\n  \"set_mset (M -s A) = set_mset M - A\"", "lemma diff_eq_singleton_imp:\n  \"M -s A = {#a#} \\<Longrightarrow> a \\<in> (set_mset M - A)\"", "lemma count_intersect [simp]:\n  \"count (M \\<inter>s A) a = count M a * of_bool (a \\<in> A)\"", "lemma set_mset_intersect [simp]:\n  \"set_mset (M \\<inter>s A) = set_mset M \\<inter> A\"", "lemma diff_from_empty: \"{#}-s S = {#}\"", "lemma diff_empty: \"M -s {} = M\"", "lemma submultiset_implies_subset: assumes \"M \\<subseteq># N\" shows \"set_mset M \\<subseteq> set_mset N\"", "lemma subset_implies_remove_empty: assumes \"set_mset M \\<subseteq> S\" shows \"M -s S = {#}\"", "lemma remove_empty_implies_subset: assumes \"M -s S = {#}\" shows \"set_mset M \\<subseteq> S\"", "lemma lemmaA_3_8:  \"(M + N) -s S = (M -s S) + (N -s S)\"", "lemma lemmaA_3_9:  \"(M -s S) -s T = M -s (S \\<union> T)\"", "lemma lemmaA_3_10: \"M = (M \\<inter>s S) + (M -s S)\"", "lemma lemmaA_3_11: \"(M -s T) \\<inter>s S = (M \\<inter>s S) -s T\"", "lemma ds_ds_subseteq_ds: assumes t: \"trans r\" shows \"ds r (ds r S) \\<subseteq> ds r S\"", "lemma ds_monotone: assumes \"S \\<subseteq> T\" shows \"ds r S \\<subseteq> ds r T\"", "lemma subset_imp_ds_subset: assumes \"trans r\" and \"S \\<subseteq> ds r T\" shows \"ds r S \\<subseteq> ds r T\"", "lemma in_mul_eqI:\n  assumes \"M = I + K\" \"N = I + J\" \"set_mset K \\<subseteq> r \\<down>m J\"\n  shows \"(M, N) \\<in> mul_eq r\"", "lemma downset_intro:\nassumes \"\\<forall>k\\<in>set_mset K.\\<exists>j\\<in>set_mset J.(k,j)\\<in>r\" shows \"set_mset K \\<subseteq> dm r J\"", "lemma downset_elim:\nassumes \"set_mset K \\<subseteq> dm r J\" shows \"\\<forall>k\\<in>set_mset K.\\<exists>j\\<in>set_mset J.(k,j)\\<in>r\"", "lemma mult_eq_implies_one_or_zero_step:\nassumes \"trans r\" and \"(M,N) \\<in> mult_eq r\" shows \"\\<exists>I J K. N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> dm r J\"", "lemma one_step_implies_mult_eq: assumes \"trans r\" and \"set_mset K \\<subseteq> dm r J\" shows \"(I+K,I+J)\\<in>mult_eq r\"", "lemma mult_is_mul: assumes \"trans r\" shows \"mult r = mul r\"", "lemma mult_eq_is_mul_eq: assumes \"trans r\" shows \"mult_eq r = mul_eq r\"", "lemma \"mul_eq r = (mul r)\\<^sup>=\"", "lemma mul_eq_reflexive: \"(M,M) \\<in> mul_eq r\"", "lemma mul_eq_trans: assumes \"trans r\" and \"(M,N) \\<in> mul_eq r\" and \"(N,P) \\<in> mul_eq r\" shows \"(M,P) \\<in> mul_eq r\"", "lemma mul_eq_singleton: assumes \"(M, {#\\<alpha>#}) \\<in> mul_eq r\" shows \"M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> dm r {#\\<alpha>#}\"", "lemma mul_and_mul_eq_imp_mul: assumes \"trans r\" and \"(M,N) \\<in> mul r\" and \"(N,P) \\<in> mul_eq r\" shows \"(M,P) \\<in> mul r\"", "lemma mul_eq_and_mul_imp_mul: assumes \"trans r\" and \"(M,N) \\<in> mul_eq r\" and \"(N,P) \\<in> mul r\" shows \"(M,P) \\<in> mul r\"", "lemma wf_mul: assumes \"trans r\" and \"wf r\" shows \"wf (mul r)\"", "lemma remove_is_empty_imp_mul: assumes \"M -s dm r {#\\<alpha>#} = {#}\" shows \"(M,{#\\<alpha>#}) \\<in> mul r\"", "lemma lemma2_6_1_set: \"ds r (S \\<union> T) = ds r S \\<union> ds r T\"", "lemma lemma2_6_1_list: \"dl r (\\<sigma>@\\<tau>) = dl r \\<sigma> \\<union> dl r \\<tau>\"", "lemma lemma2_6_1_multiset: \"dm r (M + N) = dm r M \\<union> dm r N\"", "lemma lemma2_6_1_diff: \"(dm r M) - ds r S \\<subseteq> dm r (M -s S)\"", "lemma dl_monotone: \"dl r (\\<sigma>@\\<tau>) \\<subseteq> dl r (\\<sigma>@\\<tau>'@\\<tau>)\"", "lemma lemma2_6_2_a: assumes t: \"trans r\" and \"M \\<subseteq># N\" shows \"(M,N) \\<in> mul_eq r\"", "lemma mul_eq_not_equal_imp_elt:\nassumes \"(M,N)\\<in>mul_eq r\" and \"y\\<in>set_mset M - set_mset N\" shows \"\\<exists>z\\<in>set_mset N.(y,z)\\<in>r\"", "lemma lemma2_6_2_b: assumes \"trans r\" and \"(M,N) \\<in> mul_eq r\" shows \"dm r M \\<subseteq> dm r N\"", "lemma ds_trans_contrapos: assumes t: \"trans r\" and \"x \\<notin> ds r S\" and \"(x,y) \\<in> r\" shows \"y \\<notin> ds r S\"", "lemma dm_max_elt: assumes i: \"irrefl r\" and t: \"trans r\"  shows \"x \\<in> dm r M \\<Longrightarrow> \\<exists> y \\<in> set_mset (M -s dm r M). (x,y) \\<in> r\"", "lemma dm_subset: assumes i:\"irrefl r\" and t: \"trans r\"  shows \"dm r M \\<subseteq> dm r (M -s dm r M)\"", "lemma dm_eq: assumes i:\"irrefl r\" and t: \"trans r\" shows \"dm r M = dm r (M -s dm r M)\"", "lemma lemma2_6_3: assumes t:\"trans r\" and i:\"irrefl r\" and \"(M,N) \\<in> mul_eq r\"\n shows \"\\<exists> I' J' K' . N = I' + J' \\<and> M = I' + K' \\<and> J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> dm r J'\"", "lemma lemma2_6_4: assumes t: \"trans r\" and \"N \\<noteq> {#}\" and \"set_mset M \\<subseteq> dm r N\" shows \"(M,N) \\<in> mul r\"", "lemma lemma2_6_5_a: assumes t: \"trans r\" and \"ds r S \\<subseteq> S\" and \"(M,N) \\<in> mul_eq r\"\nshows \"(M -s S, N -s S) \\<in> mul_eq r\"", "lemma lemma2_6_5_a': assumes t:\"trans r\" and \"(M,N) \\<in> mul_eq r\" shows \"(M -s ds r S, N -s ds r S) \\<in> mul_eq r\"", "lemma lemma2_6_6_a: assumes t: \"trans r\" and \"(M,N) \\<in> mul_eq r\" shows \"(Q + M,Q + N) \\<in> mul_eq r\"", "lemma add_left_one:\n assumes  \"\\<exists> I J K. add_mset q N = I + J \\<and> add_mset q  M = I + K \\<and> (J\\<inter>#K={#}) \\<and> set_mset K \\<subseteq> dm r J\"\n shows \"\\<exists> I2 J K. N = I2 + J \\<and> M = I2 + K \\<and> set_mset K \\<subseteq> dm r J\"", "lemma lemma2_6_6_b_one :\nassumes \"trans r\" and \"irrefl r\" and \"(add_mset q M, add_mset q N) \\<in> mul_eq r\" shows \"(M,N) \\<in> mul_eq r\"", "lemma lemma2_6_6_b' : assumes \"trans r\" and i: \"irrefl r\" and \"(Q + M, Q + N) \\<in> mul_eq r\"\n shows \"(M,N) \\<in> mul_eq r\"", "lemma lemma2_6_9: assumes t: \"trans r\" and \"(M,N) \\<in> mul r\" shows \"(Q+M,Q+N) \\<in> mul r\"", "lemma lemma2_6_7_a: assumes t: \"trans r\" and \"set_mset Q \\<subseteq> dm r N - dm r M\" and \"(M,N) \\<in> mul_eq r\"\nshows \"(Q+M,N) \\<in> mul_eq r\"", "lemma lemma2_6_8: assumes t: \"trans r\" and \"S \\<subseteq> T\" shows \"(M -s T,M -s S) \\<in> mul_eq r\"", "lemma lexmax_singleton: \"r|[\\<alpha>]| = {#\\<alpha>#}\"", "lemma lemma3_2_1: assumes t: \"trans r\" shows \"r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma>\"", "lemma lemma3_2_2: \"r|\\<sigma>@\\<tau>| = r|\\<sigma>| + (r|\\<tau>| -s r \\<down>l \\<sigma>)\"", "lemma D_eq: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\n shows \"(r|\\<tau>'| -s dl r \\<sigma>,r|\\<tau>| ) \\<in> mul_eq r\" and \"(r|\\<sigma>'| -s dl r \\<tau>,r|\\<sigma>| ) \\<in> mul_eq r\"", "lemma D_inv: assumes \"trans r\" and \"irrefl r\" and \"(r|\\<tau>'| -s dl r \\<sigma>,r|\\<tau>| ) \\<in> mul_eq r\"\n                                                and \"(r|\\<sigma>'| -s dl r \\<tau>,r|\\<sigma>| ) \\<in> mul_eq r\"\n shows \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"", "lemma D: assumes \"trans r\" and \"irrefl r\"\n shows  \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>' = ((r|\\<tau>'| -s dl r \\<sigma>,r|\\<tau>| ) \\<in> mul_eq r\n                        \\<and> (r|\\<sigma>'| -s dl r \\<tau>,r|\\<sigma>| ) \\<in> mul_eq r)\"", "lemma mirror_D: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" shows \"D r \\<sigma> \\<tau> \\<tau>' \\<sigma>'\"", "lemma lexmax_le_multiset: assumes t:\"trans r\" shows \"r|\\<sigma>| \\<subseteq># mset \\<sigma>\"", "lemma split: assumes \"LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\" shows \"\\<sigma>2 = [] \\<or> \\<sigma>2 = [\\<alpha>]\"", "lemma proposition3_4_step: assumes \"trans r\" and \"irrefl r\" and \"LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\"\nshows \"(r|\\<sigma>1@\\<sigma>2@\\<sigma>3| -s (dm r {#\\<beta>#}), r|[\\<alpha>]| ) \\<in> mul_eq r\"", "lemma proposition3_4:\nassumes t: \"trans r\" and i: \"irrefl r\" and ld: \"LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3\"\nshows \"D r [\\<beta>] [\\<alpha>] (\\<sigma>1@\\<sigma>2@\\<sigma>3) (\\<tau>1@\\<tau>2@\\<tau>3)\"", "lemma lexmax_decompose: assumes \"\\<alpha> \\<in># r|\\<sigma>|\" shows \"\\<exists>\\<sigma>1 \\<sigma>3. (\\<sigma>=\\<sigma>1@[\\<alpha>]@\\<sigma>3 \\<and> \\<alpha> \\<notin> dl r \\<sigma>1)\"", "lemma lexmax_elt: assumes \"trans r\" and \"x \\<in> (set \\<sigma>)\" and \"x \\<notin> set_mset r|\\<sigma>|\"\nshows \"\\<exists>y. (x,y) \\<in> r \\<and> y \\<in> set_mset r|\\<sigma>|\"", "lemma lexmax_set: assumes \"trans r\" and \"set_mset r|\\<sigma>| \\<subseteq> r \\<down>s S\" shows \"set \\<sigma> \\<subseteq> r \\<down>s S\"", "lemma drop_left_mult_eq:\nassumes \"trans r\" and \"irrefl r\" and \"(N+M,M) \\<in> mul_eq r\" shows \"N = {#}\"", "lemma proposition3_4_inv_lists:\nassumes t: \"trans r\" and i: \"irrefl r\" and k:\"(r|\\<sigma>| -s r \\<down>l \\<beta>, {#\\<alpha>#}) \\<in> mul_eq r\" (is \"(?M,_) \\<in> _\")\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3. ((\\<sigma> = \\<sigma>1@\\<sigma>2@\\<sigma>3) \\<and> set \\<sigma>1 \\<subseteq> dl r \\<beta> \\<and> length \\<sigma>2 \\<le> 1 \\<and> set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and> set \\<sigma>3 \\<subseteq> dl r (\\<alpha>#\\<beta>)\"", "lemma proposition3_4_inv_step:\nassumes t: \"trans r\" and i: \"irrefl r\" and k:\"(r|\\<sigma>| -s r \\<down>l [\\<beta>], {#\\<alpha>#}) \\<in> mul_eq r\" (is \"(?M,_) \\<in> _\")\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3. ((\\<sigma> = \\<sigma>1@\\<sigma>2@\\<sigma>3) \\<and> LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3)\"", "lemma proposition3_4_inv:\nassumes t: \"trans r\" and i: \"irrefl r\" and \"D r [\\<beta>] [\\<alpha>] \\<sigma> \\<tau>\"\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3. (\\<sigma> = \\<sigma>1@\\<sigma>2@\\<sigma>3 \\<and> \\<tau> = \\<tau>1@\\<tau>2@\\<tau>3 \\<and> LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3)\"", "lemma lemma3_5_1:\nassumes t: \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" and \"D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\"\nshows \"(lexmax r (\\<tau> @ \\<upsilon> @ \\<sigma>''), lexmax r (\\<tau> @ \\<upsilon>) + lexmax r \\<sigma>) \\<in> mul_eq r\"", "lemma claim1: assumes t: \"trans r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"(r|\\<sigma>@\\<tau>'| + ((r|\\<upsilon>'| -s r \\<down>l (\\<sigma>@\\<tau>')) \\<inter>s r \\<down>l \\<tau>),r|\\<sigma>| + r|\\<tau>| ) \\<in> mul_eq r\" (is \"(?F+?H,?G) \\<in> _\")", "lemma step3: assumes t:\"trans r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"r \\<down>l (\\<sigma>@\\<tau>) \\<supseteq> (r \\<down>m (r|\\<sigma>'| + r|\\<tau>| ))\"", "lemma claim2: assumes t: \"trans r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"((r|\\<upsilon>'| -s  r \\<down>l (\\<sigma>@\\<tau>')) -s r \\<down>l \\<tau>, (r|\\<upsilon>'| -s r \\<down>l \\<sigma>') -s r \\<down>l \\<tau>) \\<in> mul_eq r\" (is \"(?L,?R) \\<in> _\")", "lemma lemma3_5_2: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" and \"D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\"\n shows \"(r|(\\<sigma> @ \\<tau>' @ \\<upsilon>')|, r|\\<sigma>| + r|(\\<tau>@\\<upsilon>)| ) \\<in> mul_eq r\"", "lemma lemma3_5: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" and \"D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\"\nshows \"D r (\\<tau>@\\<upsilon>) \\<sigma> \\<sigma>'' (\\<tau>'@\\<upsilon>')\"", "lemma step2: assumes \"trans r\" and \"\\<tau> \\<noteq> []\" shows \"(M \\<inter>s dl r \\<tau>,lexmax r \\<tau>) \\<in> mul r\"", "lemma lemma3_6: assumes t: \"trans r\" and ne: \"\\<tau> \\<noteq> []\" and D: \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"(r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau>@\\<upsilon>| ) \\<in> mul r\" (is \"(?L,?R) \\<in> _\")", "lemma lemma3_6_v: assumes \"trans r\" and \"irrefl r\" and \"\\<sigma> \\<noteq> []\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"(r|\\<tau>'| + r|\\<upsilon>|, r|\\<tau>| + r|\\<sigma>@\\<upsilon>| ) \\<in> mul r\"", "lemma seq_tail1: assumes seq: \"(s,x#xs) \\<in> seq lars\"\nshows \"(snd x,xs) \\<in> seq lars\" and \"(s,fst x,snd x) \\<in> lars\" and \"lst (s,x#xs) = lst (snd x,xs)\"", "lemma seq_chop: assumes \"(s,ss@ts) \\<in> seq ars\" shows \"(s,ss) \\<in> seq ars\" \"(lst(s,ss),ts) \\<in> seq ars\"", "lemma seq_concat_helper:\nassumes \"(s,ls) \\<in> seq ars\" and \"ss2 \\<in> seq ars\" and \"lst (s,ls) = fst ss2\"\nshows \"(s,ls@snd ss2) \\<in> seq ars \\<and> (lst (s,ls@snd ss2) = lst ss2)\"", "lemma seq_concat:\n assumes \"ss1 \\<in> seq ars\" and \"ss2 \\<in> seq ars\" and \"lst ss1 = fst ss2\"\n shows \"(fst ss1,snd ss1@snd ss2) \\<in> seq ars\" and \"(lst (fst ss1,snd ss1@snd ss2) = lst ss2)\"", "lemma lemma3_5_d: assumes \"diagram ars (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"diagram ars (\\<upsilon>,\\<sigma>',\\<sigma>'',\\<upsilon>')\"\nshows \"diagram ars ((fst \\<tau>,snd \\<tau>@snd \\<upsilon>),\\<sigma>,\\<sigma>'',(fst \\<tau>'),snd \\<tau>'@snd \\<upsilon>')\"", "lemma lemma3_5_d_v: assumes \"diagram ars (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"diagram ars (\\<tau>',\\<upsilon>,\\<upsilon>',\\<tau>'')\"\nshows \"diagram ars (\\<tau>,(fst \\<sigma>,snd \\<sigma>@snd \\<upsilon>),(fst \\<sigma>',snd \\<sigma>'@snd \\<upsilon>'),\\<tau>'')\"", "lemma lemma3_5': assumes \"trans r\" and \"irrefl r\" and \"D2 r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"D2 r (\\<upsilon>,\\<sigma>',\\<sigma>'',\\<upsilon>')\"\nshows \"D2 r ((fst \\<tau>,snd \\<tau>@snd \\<upsilon>),\\<sigma>,\\<sigma>'',(fst \\<tau>'),snd \\<tau>'@snd \\<upsilon>')\"", "lemma lemma3_5'_v: assumes \"trans r\" and \"irrefl r\" and \"D2 r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"D2 r (\\<tau>',\\<upsilon>,\\<upsilon>',\\<tau>'')\"\nshows \"D2 r (\\<tau>, (fst \\<sigma>,snd \\<sigma>@snd \\<upsilon>),(fst \\<sigma>',snd \\<sigma>'@snd \\<upsilon>'),\\<tau>'')\"", "lemma trivial_diagram: assumes \"\\<sigma> \\<in> seq ars\" shows \"diagram ars (\\<sigma>,(fst \\<sigma>,[]),(lst \\<sigma>,[]),\\<sigma>)\"", "lemma trivial_D2: assumes \"\\<sigma> \\<in> seq ars\" shows \"D2 r (\\<sigma>,(fst \\<sigma>,[]),(lst \\<sigma>,[]),\\<sigma>)\"", "lemma lemma3_5_DD: assumes \"trans r\" and \"irrefl r\" and \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"DD ars r (\\<upsilon>,\\<sigma>',\\<sigma>'',\\<upsilon>')\"\nshows \"DD ars r ((fst \\<tau>,snd \\<tau>@snd \\<upsilon>),\\<sigma>,\\<sigma>'',(fst \\<tau>'),snd \\<tau>'@snd \\<upsilon>')\"", "lemma lemma3_5_DD_v: assumes \"trans r\" and \"irrefl r\" and \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"DD ars r (\\<tau>',\\<upsilon>,\\<upsilon>',\\<tau>'')\"\nshows \"DD ars r (\\<tau>, (fst \\<sigma>,snd \\<sigma>@snd \\<upsilon>),(fst \\<sigma>',snd \\<sigma>'@snd \\<upsilon>'),\\<tau>'')\"", "lemma trivial_DD: assumes \"\\<sigma> \\<in> seq ars\" shows \"DD ars r (\\<sigma>,(fst \\<sigma>,[]),(lst \\<sigma>,[]),\\<sigma>)\"", "lemma mirror_DD: assumes \"trans r\" and \"irrefl r\" and \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" shows \"DD ars r (\\<sigma>,\\<tau>,\\<tau>',\\<sigma>')\"", "lemma wfi: assumes \"relr = pex r\" and \"\\<not> wf (relr)\" shows \"\\<not> wf (mul r)\"", "lemma wf: assumes \"trans r\" and \"wf r\" shows \"wf (pex r)\"", "lemma LD_imp_D: assumes \"trans r\" and \"wf r\" and \"\\<forall>P. (local_peak ars P \\<longrightarrow> (\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>')))\"\nand \"peak ars P\" shows \"(\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>'))\"", "lemma step_imp_seq: assumes \"(a,b) \\<in> (unlabel ars)\"\nshows \"\\<exists>ss \\<in> seq ars. fst ss = a \\<and> lst ss = b\"", "lemma steps_imp_seq: assumes \"(a,b) \\<in> (unlabel ars)^*\"\nshows \"\\<exists>ss \\<in> seq ars. fst ss = a \\<and> lst ss = b\"", "lemma step_imp_unlabeled_step: assumes \"(a,b,c) \\<in> ars\" shows \"(a,c) \\<in> (unlabel ars)\"", "lemma seq_imp_steps:\nassumes \"ss \\<in> seq ars\" and \"fst ss = a\" and \"lst ss = b\" shows \"(a,b) \\<in> (unlabel ars)^*\"", "lemma seq_vs_steps: shows \"(a,b) \\<in> (unlabel ars)^* = (\\<exists>ss. fst ss = a \\<and> lst ss = b \\<and> ss \\<in> seq ars)\"", "lemma D_imp_CR: assumes \"\\<forall>P. (peak ars P \\<longrightarrow> (\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>')))\" shows \"CR (unlabel ars)\"", "lemma sound: assumes \"LD L ars\" shows \"CR ars\"", "lemma measure:\nassumes lab_eq: \"lrs = {(a,c,b). c = a \\<and> (a,b) \\<in> ars}\" and \"(s,(\\<alpha>,t) # ss) \\<in> seq lrs\"\nshows \"set (labels (t,ss)) \\<subseteq> ds ((ars^+)\\<inverse>) {\\<alpha>}\"", "lemma newman: assumes \"WCR ars\" and \"SN ars\" shows \"CR ars\"", "lemma mul_eq_add_right: \"(M,M+P) \\<in> mul_eq r\"", "lemma mul_add_right: assumes \"(M,N) \\<in> mul r\" shows \"(M,N+P) \\<in> mul r\"", "lemma mul_eq_and_ds_imp_ds:\nassumes t: \"trans r\" and \"(M,N) \\<in> mul_eq r\" and \"set_mset N \\<subseteq> ds r S\"\nshows \"set_mset M \\<subseteq> ds r S\"", "lemma lemma2_6_2_set: assumes \"S \\<subseteq> T\" shows \"ds r S \\<subseteq> ds r T\"", "lemma leq_imp_subseteq: assumes \"M \\<subseteq># N\" shows \"set_mset M \\<subseteq> set_mset N\"", "lemma mul_add_mul_eq_imp_mul: assumes \"(M,N) \\<in> mul r\" and \"(P,Q) \\<in> mul_eq r\" shows \"(M+P,N+Q) \\<in> mul r\"", "lemma conv_tail1: assumes conv: \"(s,(d,\\<alpha>,t)#xs) \\<in> conv ars\"\nshows \"(t,xs) \\<in> conv ars\" and \"d \\<Longrightarrow> (s,\\<alpha>,t) \\<in> ars\" and \"\\<not>d \\<Longrightarrow> (t,\\<alpha>,s) \\<in> ars\" and \"lst_conv (s,(d,\\<alpha>,t)#xs) = lst_conv (t,xs)\"", "lemma conv_chop: assumes \"(s,ss1@ss2) \\<in> conv ars\" shows \"(s,ss1) \\<in> conv ars\" \"(lst_conv (s,ss1),ss2) \\<in> conv ars\"", "lemma conv_concat_helper:\nassumes \"(s,ls) \\<in> conv ars\" and \"ss2 \\<in> conv ars\" and \"lst_conv (s,ls) = fst ss2\"\nshows \"(s,ls@snd ss2) \\<in> conv ars \\<and> (lst_conv (s,ls@snd ss2) = lst_conv ss2)\"", "lemma conv_concat:\n assumes \"ss1 \\<in> conv ars\" and \"ss2 \\<in> conv ars\" and \"lst_conv ss1 = fst ss2\"\n shows \"(fst ss1,snd ss1@snd ss2) \\<in> conv ars\" and \"(lst_conv (fst ss1,snd ss1@snd ss2) = lst_conv ss2)\"", "lemma conv_concat_labels:\nassumes \"ss1 \\<in> conv ars\" and \"ss2 \\<in> conv ars\" and \"set (labels_conv ss1) \\<subseteq> S\" and \"set (labels_conv ss2) \\<subseteq> T\"\nshows \"set (labels_conv (fst ss1,snd ss1@snd ss2)) \\<subseteq> S \\<union> T\"", "lemma seq_decompose:\nassumes \"\\<sigma> \\<in> seq ars\" and \"labels \\<sigma> = \\<sigma>1'@\\<sigma>2'\"\nshows \"\\<exists> \\<sigma>1 \\<sigma>2. ({\\<sigma>1,\\<sigma>2} \\<subseteq> seq ars \\<and> \\<sigma> = (fst \\<sigma>1,snd \\<sigma>1@snd \\<sigma>2) \\<and> lst \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = lst \\<sigma> \\<and> labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2')\"", "lemma seq_imp_conv:\nassumes \"(s,ss) \\<in> seq ars\"\nshows \"(s,map (\\<lambda>step. (True,step)) ss) \\<in> conv ars \\<and>\n       lst_conv (s,map (\\<lambda>step.(True,step)) ss) = lst (s,ss) \\<and>\n       labels (s,ss) = labels_conv (s,map (\\<lambda>step.(True,step)) ss)\"", "lemma conv_mirror: assumes \"\\<sigma> \\<in> conv ars\"\nshows \"conv_mirror \\<sigma> \\<in> conv ars \\<and>\n      set (labels_conv (conv_mirror \\<sigma>)) = set (labels_conv \\<sigma>) \\<and>\n      fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n      lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)\"", "lemma DD_subset_helper:\nassumes t:\"trans r\" and \"(r|\\<tau>@\\<sigma>'|, r|\\<tau>| + r|\\<sigma>| ) \\<in> mul_eq r\" and \"set_mset (r|\\<tau>| + r|\\<sigma>| ) \\<subseteq> ds r S\"\nshows \"set_mset r|\\<sigma>'| \\<subseteq> ds r S\"", "lemma DD_subset_ds:\nassumes t:\"trans r\" and DD: \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"set_mset (measure r (\\<tau>,\\<sigma>)) \\<subseteq> ds r S\" shows \"set_mset (measure r (\\<sigma>',\\<tau>')) \\<subseteq> ds r S\"", "lemma conv_imp_valley:\nassumes t: \"trans r\"\nand IH: \"!!y . ((y,((s,[\\<alpha>_step]@\\<rho>_step),(s,[\\<beta>_step]@\\<upsilon>_step))) \\<in> pex r \\<Longrightarrow> peak ars y \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst y, snd y, \\<sigma>', \\<tau>'))\" (is \"!!y. ((y,?P) \\<in> _ \\<Longrightarrow> _ \\<Longrightarrow> _)\")\nand \"\\<delta>1 \\<in> conv ars\"\nand \"set_mset (measure_conv r \\<delta>1) \\<subseteq> dm r M\"\nand \"(M,{#fst \\<alpha>_step,fst \\<beta>_step#}) \\<in> mul_eq r\"\nshows \"\\<exists> \\<sigma> \\<tau>. ({\\<sigma>,\\<tau>} \\<subseteq> seq ars \\<and> fst \\<sigma> = fst \\<delta>1 \\<and> fst \\<tau> = lst_conv \\<delta>1 \\<and> lst \\<sigma> = lst \\<tau> \\<and> set_mset (measure r (\\<sigma>,\\<tau>)) \\<subseteq> dm r M)\"", "lemma labels_multiset: assumes \"length (labels \\<sigma>) \\<le> 1\" and \"set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\" shows \"(r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r\"", "lemma decreasing_imp_local_decreasing:\nassumes t:\"trans r\" and i:\"irrefl r\" and DD: \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"set (labels \\<tau>) \\<subseteq> ds r {\\<beta>}\"\nand \"length (labels \\<sigma>) \\<le> 1\" and \"set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\"\nshows \"\\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3. (\\<sigma>'=(fst \\<sigma>1,snd \\<sigma>1@snd \\<sigma>2@snd \\<sigma>3) \\<and> lst \\<sigma>1=fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3 \\<and> lst \\<sigma>3 = lst \\<sigma>'\n                 \\<and> LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3))\"\n      \"set (labels \\<tau>') \\<subseteq> ds r ({\\<alpha>,\\<beta>})\"", "lemma local_decreasing_extended_imp_decreasing:\nassumes \"LT1 ars r (s,[\\<beta>_step]) (s,[\\<alpha>_step]) \\<gamma>1 \\<gamma>2 \\<gamma>3\"\nand t: \"trans r\" and i: \"irrefl r\"\nand IH:\"!!y . ((y,((s,[\\<beta>_step]@\\<upsilon>_step),(s,[\\<alpha>_step]@\\<rho>_step))) \\<in> pex r \\<Longrightarrow> peak ars y \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst y, snd y, \\<sigma>', \\<tau>'))\" (is \"!!y. ((y,?P) \\<in> _ \\<Longrightarrow> _ \\<Longrightarrow> _)\")\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''. ({\\<sigma>1,\\<sigma>2,\\<sigma>3',\\<gamma>1'''} \\<subseteq> seq ars \\<and>\n  set (labels \\<sigma>1) \\<subseteq> ds r {fst \\<beta>_step} \\<and> length (labels \\<sigma>2) \\<le> 1 \\<and> set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and> set (labels \\<sigma>3') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}) \\<and>\n  set (labels \\<gamma>1''') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and> lst \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3' \\<and> lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\"", "lemma LDD_imp_DD:\nassumes t:\"trans r\" and i:\"irrefl r\" and \"LDD ars r (\\<tau>,\\<sigma>,\\<sigma>1,\\<sigma>2,\\<sigma>3,\\<tau>1,\\<tau>2,\\<tau>3)\"\nshows \"\\<exists> \\<sigma>' \\<tau>'. DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\"", "lemma LT_imp_DD:\nassumes t:\"trans r\"\nand i:\"irrefl r\"\nand IH:\"!!y . ((y,((s,[\\<beta>_step]@\\<upsilon>_step),(s,[\\<alpha>_step]@\\<rho>_step))) \\<in> pex r \\<Longrightarrow> peak ars y \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst y, snd y, \\<sigma>', \\<tau>'))\" (is \"!!y. ((y,?P) \\<in> _ \\<Longrightarrow> _ \\<Longrightarrow> _)\")\nand LT: \"LT ars r ((s,[\\<beta>_step]),(s,[\\<alpha>_step]),\\<gamma>1,\\<gamma>2,\\<gamma>3,\\<delta>1,\\<delta>2,\\<delta>3)\"\nshows \"\\<exists> \\<kappa> \\<mu>. DD ars r ((s,[\\<beta>_step]),(s,[\\<alpha>_step]),\\<kappa>,\\<mu>)\"", "lemma LT_imp_D: assumes t:\"trans r\" and \"wf r\" and \"\\<forall>p. (local_peak ars p \\<longrightarrow> (\\<exists> \\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3. LT ars r (fst p,snd p,\\<gamma>1,\\<gamma>2,\\<gamma>3,\\<delta>1,\\<delta>2,\\<delta>3)))\"\nand \"peak ars P\" shows \"(\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>'))\"", "lemma sound_conv: assumes \"LD_conv L ars\" shows \"CR ars\""], "translations": [["", "lemma count_diff [simp]:\n  \"count (M -s A) a = count M a * of_bool (a \\<notin> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (M -s A) a = count M a * of_bool (a \\<notin> A)", "by (simp add: diff_def)"], ["", "lemma set_mset_diff [simp]:\n  \"set_mset (M -s A) = set_mset M - A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (M -s A) = set_mset M - A", "by (auto simp add: diff_def)"], ["", "lemma diff_eq_singleton_imp:\n  \"M -s A = {#a#} \\<Longrightarrow> a \\<in> (set_mset M - A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M -s A = {#a#} \\<Longrightarrow> a \\<in> set_mset M - A", "unfolding diff_def filter_mset_eq_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#a#} \\<subseteq># M \\<and>\n    (\\<forall>x\\<in>#{#a#}. x \\<notin> A) \\<and>\n    (\\<forall>a\\<in>#M - {#a#}. \\<not> a \\<notin> A) \\<Longrightarrow>\n    a \\<in> set_mset M - A", "by auto"], ["", "lemma count_intersect [simp]:\n  \"count (M \\<inter>s A) a = count M a * of_bool (a \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (M \\<inter>s A) a = count M a * of_bool (a \\<in> A)", "by (simp add: intersect_def)"], ["", "lemma set_mset_intersect [simp]:\n  \"set_mset (M \\<inter>s A) = set_mset M \\<inter> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (M \\<inter>s A) = set_mset M \\<inter> A", "by (auto simp add: intersect_def)"], ["", "lemma diff_from_empty: \"{#}-s S = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#} -s S = {#}", "unfolding diff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># {#}. x \\<notin> S#} = {#}", "by auto"], ["", "lemma diff_empty: \"M -s {} = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M -s {} = M", "unfolding diff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># M. x \\<notin> {}#} = M", "by (rule multiset_eqI) simp"], ["", "lemma submultiset_implies_subset: assumes \"M \\<subseteq># N\" shows \"set_mset M \\<subseteq> set_mset N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> set_mset N", "using assms mset_subset_eqD"], ["proof (prove)\nusing this:\n  M \\<subseteq># N\n  \\<lbrakk>?A \\<subseteq># ?B; ?x \\<in># ?A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in># ?B\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> set_mset N", "by auto"], ["", "lemma subset_implies_remove_empty: assumes \"set_mset M \\<subseteq> S\" shows \"M -s S = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M -s S = {#}", "unfolding diff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># M. x \\<notin> S#} = {#}", "using assms"], ["proof (prove)\nusing this:\n  set_mset M \\<subseteq> S\n\ngoal (1 subgoal):\n 1. {#x \\<in># M. x \\<notin> S#} = {#}", "by (induct M) auto"], ["", "lemma remove_empty_implies_subset: assumes \"M -s S = {#}\" shows \"set_mset M \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in># M \\<Longrightarrow> x \\<in> S", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in># M \\<Longrightarrow> x \\<in> S", "assume A: \"x \\<in> set_mset M\""], ["proof (state)\nthis:\n  x \\<in># M\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in># M \\<Longrightarrow> x \\<in> S", "have \"x \\<notin> set_mset (M -s S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin># M -s S", "using assms"], ["proof (prove)\nusing this:\n  M -s S = {#}\n\ngoal (1 subgoal):\n 1. x \\<notin># M -s S", "by auto"], ["proof (state)\nthis:\n  x \\<notin># M -s S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in># M \\<Longrightarrow> x \\<in> S", "thus \"x \\<in> S\""], ["proof (prove)\nusing this:\n  x \\<notin># M -s S\n\ngoal (1 subgoal):\n 1. x \\<in> S", "using A"], ["proof (prove)\nusing this:\n  x \\<notin># M -s S\n  x \\<in># M\n\ngoal (1 subgoal):\n 1. x \\<in> S", "unfolding diff_def"], ["proof (prove)\nusing this:\n  x \\<notin># {#x \\<in># M. x \\<notin> S#}\n  x \\<in># M\n\ngoal (1 subgoal):\n 1. x \\<in> S", "by auto"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemmaA_3_8:  \"(M + N) -s S = (M -s S) + (N -s S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M + N) -s S = M -s S + N -s S", "unfolding diff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># M + N. x \\<notin> S#} =\n    {#x \\<in># M. x \\<notin> S#} + {#x \\<in># N. x \\<notin> S#}", "by (rule multiset_eqI) simp"], ["", "lemma lemmaA_3_9:  \"(M -s S) -s T = M -s (S \\<union> T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M -s S -s T = M -s (S \\<union> T)", "unfolding diff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># {#x \\<in># M. x \\<notin> S#}. x \\<notin> T#} =\n    {#x \\<in># M. x \\<notin> S \\<union> T#}", "by (rule multiset_eqI) simp"], ["", "lemma lemmaA_3_10: \"M = (M \\<inter>s S) + (M -s S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = M \\<inter>s S + M -s S", "unfolding diff_def intersect_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. M = {#x \\<in># M. x \\<in> S#} + {#x \\<in># M. x \\<notin> S#}", "by auto"], ["", "lemma lemmaA_3_11: \"(M -s T) \\<inter>s S = (M \\<inter>s S) -s T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M -s T \\<inter>s S = M \\<inter>s S -s T", "unfolding diff_def intersect_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#x \\<in># {#x \\<in># M. x \\<notin> T#}. x \\<in> S#} =\n    {#x \\<in># {#x \\<in># M. x \\<in> S#}. x \\<notin> T#}", "by (rule multiset_eqI) simp"], ["", "subsubsection \\<open>Multisets\\<close>"], ["", "text \\<open>Definition 2.5(1)\\<close>"], ["", "definition ds :: \"'a rel \\<Rightarrow> 'a set \\<Rightarrow> 'a set\"\n where \"ds r S = {y . \\<exists>x \\<in> S. (y,x) \\<in> r}\""], ["", "definition dm :: \"'a rel \\<Rightarrow> 'a multiset \\<Rightarrow> 'a set\"\n where \"dm r M = ds r (set_mset M)\""], ["", "definition dl :: \"'a rel \\<Rightarrow> 'a list \\<Rightarrow> 'a set\"\n where \"dl r \\<sigma> = ds r (set \\<sigma>)\""], ["", "notation\n ds (infixl \"\\<down>s\" 900) and\n dm (infixl \"\\<down>m\" 900) and\n dl (infixl \"\\<down>l\" 900)"], ["", "text \\<open>missing but useful\\<close>"], ["", "lemma ds_ds_subseteq_ds: assumes t: \"trans r\" shows \"ds r (ds r S) \\<subseteq> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s (r \\<down>s S) \\<subseteq> r \\<down>s S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> r \\<down>s (r \\<down>s S) \\<Longrightarrow>\n       x \\<in> r \\<down>s S", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> r \\<down>s (r \\<down>s S) \\<Longrightarrow>\n       x \\<in> r \\<down>s S", "assume A: \"x \\<in> ds r (ds r S)\""], ["proof (state)\nthis:\n  x \\<in> r \\<down>s (r \\<down>s S)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> r \\<down>s (r \\<down>s S) \\<Longrightarrow>\n       x \\<in> r \\<down>s S", "show \"x \\<in> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "from A"], ["proof (chain)\npicking this:\n  x \\<in> r \\<down>s (r \\<down>s S)", "obtain y z where \"(x,y) \\<in> r\" and \"(y,z) \\<in> r\" and mem: \"z \\<in> S\""], ["proof (prove)\nusing this:\n  x \\<in> r \\<down>s (r \\<down>s S)\n\ngoal (1 subgoal):\n 1. (\\<And>y z.\n        \\<lbrakk>(x, y) \\<in> r; (y, z) \\<in> r; z \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ds_def"], ["proof (prove)\nusing this:\n  x \\<in> {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>S. (y, x) \\<in> r}.\n                 (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. (\\<And>y z.\n        \\<lbrakk>(x, y) \\<in> r; (y, z) \\<in> r; z \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> r\n  (y, z) \\<in> r\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "thus ?thesis"], ["proof (prove)\nusing this:\n  (x, y) \\<in> r\n  (y, z) \\<in> r\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "using mem t trans_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> r\n  (y, z) \\<in> r\n  z \\<in> S\n  z \\<in> S\n  trans r\n  trans ?r =\n  (\\<forall>x y z.\n      (x, y) \\<in> ?r \\<longrightarrow>\n      (y, z) \\<in> ?r \\<longrightarrow> (x, z) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "unfolding ds_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> r\n  (y, z) \\<in> r\n  z \\<in> S\n  z \\<in> S\n  trans r\n  trans ?r =\n  (\\<forall>x y z.\n      (x, y) \\<in> ?r \\<longrightarrow>\n      (y, z) \\<in> ?r \\<longrightarrow> (x, z) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. x \\<in> {y. \\<exists>x\\<in>S. (y, x) \\<in> r}", "by fast"], ["proof (state)\nthis:\n  x \\<in> r \\<down>s S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> r \\<down>s S\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>from PhD thesis of van Oostrom\\<close>"], ["", "lemma ds_monotone: assumes \"S \\<subseteq> T\" shows \"ds r S \\<subseteq> ds r T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s S \\<subseteq> r \\<down>s T", "using assms"], ["proof (prove)\nusing this:\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. r \\<down>s S \\<subseteq> r \\<down>s T", "unfolding ds_def"], ["proof (prove)\nusing this:\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>S. (y, x) \\<in> r}\n    \\<subseteq> {y. \\<exists>x\\<in>T. (y, x) \\<in> r}", "by auto"], ["", "lemma subset_imp_ds_subset: assumes \"trans r\" and \"S \\<subseteq> ds r T\" shows \"ds r S \\<subseteq> ds r T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s S \\<subseteq> r \\<down>s T", "using assms ds_monotone ds_ds_subseteq_ds"], ["proof (prove)\nusing this:\n  trans r\n  S \\<subseteq> r \\<down>s T\n  ?S \\<subseteq> ?T \\<Longrightarrow>\n  ?r \\<down>s ?S \\<subseteq> ?r \\<down>s ?T\n  trans ?r \\<Longrightarrow>\n  ?r \\<down>s (?r \\<down>s ?S) \\<subseteq> ?r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. r \\<down>s S \\<subseteq> r \\<down>s T", "by blast"], ["", "text \\<open>Definition 2.5(2)\\<close>"], ["", "text \\<open>strict order (mult) is used from Multiset.thy\\<close>"], ["", "definition mult_eq :: \"'a rel \\<Rightarrow> 'a multiset rel\" where\n  \"mult_eq r = (mult1 r)\\<^sup>*\""], ["", "definition mul :: \"'a rel \\<Rightarrow> 'a multiset rel\" where\n  \"mul r = {(M,N).\\<exists>I J K. M = I + K \\<and> N = I + J \\<and> set_mset K \\<subseteq> dm r J \\<and> J \\<noteq> {#}}\""], ["", "definition mul_eq :: \"'a rel \\<Rightarrow> 'a multiset rel\" where\n  \"mul_eq r = {(M,N).\\<exists>I J K. M = I + K \\<and> N = I + J \\<and> set_mset K \\<subseteq> dm r J}\""], ["", "lemma in_mul_eqI:\n  assumes \"M = I + K\" \"N = I + J\" \"set_mset K \\<subseteq> r \\<down>m J\"\n  shows \"(M, N) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "using assms"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "by (auto simp add: mul_eq_def)"], ["", "lemma downset_intro:\nassumes \"\\<forall>k\\<in>set_mset K.\\<exists>j\\<in>set_mset J.(k,j)\\<in>r\" shows \"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset K \\<subseteq> r \\<down>m J", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in># K \\<Longrightarrow> x \\<in> r \\<down>m J", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in># K \\<Longrightarrow> x \\<in> r \\<down>m J", "assume \"x\\<in>set_mset K\""], ["proof (state)\nthis:\n  x \\<in># K\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in># K \\<Longrightarrow> x \\<in> r \\<down>m J", "thus \"x \\<in> dm r J\""], ["proof (prove)\nusing this:\n  x \\<in># K\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m J", "using assms"], ["proof (prove)\nusing this:\n  x \\<in># K\n  \\<forall>k\\<in>#K. \\<exists>j\\<in>#J. (k, j) \\<in> r\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m J", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  x \\<in># K\n  \\<forall>k\\<in>#K. \\<exists>j\\<in>#J. (k, j) \\<in> r\n\ngoal (1 subgoal):\n 1. x \\<in> {y. \\<exists>x\\<in>#J. (y, x) \\<in> r}", "by fast"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m J\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma downset_elim:\nassumes \"set_mset K \\<subseteq> dm r J\" shows \"\\<forall>k\\<in>set_mset K.\\<exists>j\\<in>set_mset J.(k,j)\\<in>r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k\\<in>#K. \\<exists>j\\<in>#J. (k, j) \\<in> r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. k \\<in># K \\<Longrightarrow> \\<exists>j\\<in>#J. (k, j) \\<in> r", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. k \\<in># K \\<Longrightarrow> \\<exists>j\\<in>#J. (k, j) \\<in> r", "assume \"k\\<in> set_mset K\""], ["proof (state)\nthis:\n  k \\<in># K\n\ngoal (1 subgoal):\n 1. \\<And>k. k \\<in># K \\<Longrightarrow> \\<exists>j\\<in>#J. (k, j) \\<in> r", "thus \"\\<exists>j\\<in>set_mset J.(k,j)\\<in> r\""], ["proof (prove)\nusing this:\n  k \\<in># K\n\ngoal (1 subgoal):\n 1. \\<exists>j\\<in>#J. (k, j) \\<in> r", "using assms"], ["proof (prove)\nusing this:\n  k \\<in># K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. \\<exists>j\\<in>#J. (k, j) \\<in> r", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  k \\<in># K\n  set_mset K \\<subseteq> {y. \\<exists>x\\<in>#J. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. \\<exists>j\\<in>#J. (k, j) \\<in> r", "by fast"], ["proof (state)\nthis:\n  \\<exists>j\\<in>#J. (k, j) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>to closure-free representation\\<close>"], ["", "lemma mult_eq_implies_one_or_zero_step:\nassumes \"trans r\" and \"(M,N) \\<in> mult_eq r\" shows \"\\<exists>I J K. N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "proof (cases \"(M,N) \\<in> mult r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (M, N) \\<in> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n 2. (M, N) \\<notin> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "case True"], ["proof (state)\nthis:\n  (M, N) \\<in> mult r\n\ngoal (2 subgoals):\n 1. (M, N) \\<in> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n 2. (M, N) \\<notin> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "thus ?thesis"], ["proof (prove)\nusing this:\n  (M, N) \\<in> mult r\n\ngoal (1 subgoal):\n 1. \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "using mult_implies_one_step[OF assms(1)] downset_intro"], ["proof (prove)\nusing this:\n  (M, N) \\<in> mult r\n  (?M, ?N) \\<in> mult r \\<Longrightarrow>\n  \\<exists>I J K.\n     ?N = I + J \\<and>\n     ?M = I + K \\<and>\n     J \\<noteq> {#} \\<and>\n     (\\<forall>k\\<in>#K. \\<exists>j\\<in>#J. (k, j) \\<in> r)\n  \\<forall>k\\<in>#?K. \\<exists>j\\<in>#?J. (k, j) \\<in> ?r \\<Longrightarrow>\n  set_mset ?K \\<subseteq> ?r \\<down>m ?J\n\ngoal (1 subgoal):\n 1. \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "by blast"], ["proof (state)\nthis:\n  \\<exists>I J K.\n     N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N) \\<notin> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, N) \\<notin> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "case False"], ["proof (state)\nthis:\n  (M, N) \\<notin> mult r\n\ngoal (1 subgoal):\n 1. (M, N) \\<notin> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "hence A: \"M = N\""], ["proof (prove)\nusing this:\n  (M, N) \\<notin> mult r\n\ngoal (1 subgoal):\n 1. M = N", "using assms rtrancl_eq_or_trancl"], ["proof (prove)\nusing this:\n  (M, N) \\<notin> mult r\n  trans r\n  (M, N) \\<in> mult_eq r\n  ((?x, ?y) \\<in> ?R\\<^sup>*) =\n  (?x = ?y \\<or> ?x \\<noteq> ?y \\<and> (?x, ?y) \\<in> ?R\\<^sup>+)\n\ngoal (1 subgoal):\n 1. M = N", "unfolding mult_eq_def mult_def"], ["proof (prove)\nusing this:\n  (M, N) \\<notin> (mult1 r)\\<^sup>+\n  trans r\n  (M, N) \\<in> (mult1 r)\\<^sup>*\n  ((?x, ?y) \\<in> ?R\\<^sup>*) =\n  (?x = ?y \\<or> ?x \\<noteq> ?y \\<and> (?x, ?y) \\<in> ?R\\<^sup>+)\n\ngoal (1 subgoal):\n 1. M = N", "by metis"], ["proof (state)\nthis:\n  M = N\n\ngoal (1 subgoal):\n 1. (M, N) \\<notin> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "hence \"N = N + {#} \\<and> M = M + {#} \\<and> set_mset {#} \\<subseteq> dm r{#}\""], ["proof (prove)\nusing this:\n  M = N\n\ngoal (1 subgoal):\n 1. N = N + {#} \\<and>\n    M = M + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}", "by auto"], ["proof (state)\nthis:\n  N = N + {#} \\<and>\n  M = M + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, N) \\<notin> mult r \\<Longrightarrow>\n    \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "thus ?thesis"], ["proof (prove)\nusing this:\n  N = N + {#} \\<and>\n  M = M + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. \\<exists>I J K.\n       N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "unfolding A"], ["proof (prove)\nusing this:\n  N = N + {#} \\<and>\n  N = N + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. \\<exists>I J K.\n       N = I + J \\<and> N = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "by fast"], ["proof (state)\nthis:\n  \\<exists>I J K.\n     N = I + J \\<and> M = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>from closure-free representation\\<close>"], ["", "lemma one_step_implies_mult_eq: assumes \"trans r\" and \"set_mset K \\<subseteq> dm r J\" shows \"(I+K,I+J)\\<in>mult_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> mult_eq r", "proof (cases \"set_mset J = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. set_mset J = {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r\n 2. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "case True"], ["proof (state)\nthis:\n  set_mset J = {}\n\ngoal (2 subgoals):\n 1. set_mset J = {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r\n 2. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "hence \"set_mset K = {}\""], ["proof (prove)\nusing this:\n  set_mset J = {}\n\ngoal (1 subgoal):\n 1. set_mset K = {}", "using assms downset_elim"], ["proof (prove)\nusing this:\n  set_mset J = {}\n  trans r\n  set_mset K \\<subseteq> r \\<down>m J\n  set_mset ?K \\<subseteq> ?r \\<down>m ?J \\<Longrightarrow>\n  \\<forall>k\\<in>#?K. \\<exists>j\\<in>#?J. (k, j) \\<in> ?r\n\ngoal (1 subgoal):\n 1. set_mset K = {}", "by (metis all_not_in_conv emptyE)"], ["proof (state)\nthis:\n  set_mset K = {}\n\ngoal (2 subgoals):\n 1. set_mset J = {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r\n 2. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  set_mset K = {}\n\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> mult_eq r", "using True"], ["proof (prove)\nusing this:\n  set_mset K = {}\n  set_mset J = {}\n\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> mult_eq r", "unfolding mult_eq_def"], ["proof (prove)\nusing this:\n  set_mset K = {}\n  set_mset J = {}\n\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> (mult1 r)\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (I + K, I + J) \\<in> mult_eq r\n\ngoal (1 subgoal):\n 1. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "case False"], ["proof (state)\nthis:\n  set_mset J \\<noteq> {}\n\ngoal (1 subgoal):\n 1. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "hence h:\"J \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  set_mset J \\<noteq> {}\n\ngoal (1 subgoal):\n 1. J \\<noteq> {#}", "using set_mset_eq_empty_iff"], ["proof (prove)\nusing this:\n  set_mset J \\<noteq> {}\n  (set_mset ?M = {}) = (?M = {#})\n\ngoal (1 subgoal):\n 1. J \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "hence \"(I+K,I+J)\\<in> mult r\""], ["proof (prove)\nusing this:\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> mult r", "using set_mset_eq_empty_iff assms one_step_implies_mult downset_elim"], ["proof (prove)\nusing this:\n  J \\<noteq> {#}\n  (set_mset ?M = {}) = (?M = {#})\n  trans r\n  set_mset K \\<subseteq> r \\<down>m J\n  \\<lbrakk>?J \\<noteq> {#};\n   \\<forall>k\\<in>#?K. \\<exists>j\\<in>#?J. (k, j) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> (?I + ?K, ?I + ?J) \\<in> mult ?r\n  set_mset ?K \\<subseteq> ?r \\<down>m ?J \\<Longrightarrow>\n  \\<forall>k\\<in>#?K. \\<exists>j\\<in>#?J. (k, j) \\<in> ?r\n\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> mult r", "by auto blast"], ["proof (state)\nthis:\n  (I + K, I + J) \\<in> mult r\n\ngoal (1 subgoal):\n 1. set_mset J \\<noteq> {} \\<Longrightarrow> (I + K, I + J) \\<in> mult_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  (I + K, I + J) \\<in> mult r\n\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> mult_eq r", "unfolding mult_eq_def mult_def"], ["proof (prove)\nusing this:\n  (I + K, I + J) \\<in> (mult1 r)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (I + K, I + J) \\<in> (mult1 r)\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (I + K, I + J) \\<in> mult_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_is_mul: assumes \"trans r\" shows \"mult r = mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mult r = mul r", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. mult r \\<subseteq> mul r\n 2. mul r \\<subseteq> mult r", "show \"mult r \\<subseteq> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mult r \\<subseteq> mul r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. (x, y) \\<in> mult r \\<Longrightarrow> (x, y) \\<in> mul r", "fix N M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. (x, y) \\<in> mult r \\<Longrightarrow> (x, y) \\<in> mul r", "assume A: \"(N,M) \\<in> mult r\""], ["proof (state)\nthis:\n  (N, M) \\<in> mult r\n\ngoal (1 subgoal):\n 1. \\<And>x y. (x, y) \\<in> mult r \\<Longrightarrow> (x, y) \\<in> mul r", "show \"(N,M) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, M) \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (N, M) \\<in> mul r", "obtain I J K where \"M = I + J\" and \"N = I + K\" and \"J \\<noteq> {#}\" and \"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>M = I + J; N = I + K; J \\<noteq> {#};\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using mult_implies_one_step[OF assms A] downset_intro"], ["proof (prove)\nusing this:\n  \\<exists>I J K.\n     M = I + J \\<and>\n     N = I + K \\<and>\n     J \\<noteq> {#} \\<and>\n     (\\<forall>k\\<in>#K. \\<exists>j\\<in>#J. (k, j) \\<in> r)\n  \\<forall>k\\<in>#?K. \\<exists>j\\<in>#?J. (k, j) \\<in> ?r \\<Longrightarrow>\n  set_mset ?K \\<subseteq> ?r \\<down>m ?J\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>M = I + J; N = I + K; J \\<noteq> {#};\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  M = I + J\n  N = I + K\n  J \\<noteq> {#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (N, M) \\<in> mul r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = I + J\n  N = I + K\n  J \\<noteq> {#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (N, M) \\<in> mul r", "unfolding mul_def"], ["proof (prove)\nusing this:\n  M = I + J\n  N = I + K\n  J \\<noteq> {#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (N, M)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}", "by auto"], ["proof (state)\nthis:\n  (N, M) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (N, M) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mult r \\<subseteq> mul r\n\ngoal (1 subgoal):\n 1. mul r \\<subseteq> mult r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. mul r \\<subseteq> mult r", "show \"mul r \\<subseteq> mult r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul r \\<subseteq> mult r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. (x, y) \\<in> mul r \\<Longrightarrow> (x, y) \\<in> mult r", "fix N M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. (x, y) \\<in> mul r \\<Longrightarrow> (x, y) \\<in> mult r", "assume A: \"(N,M) \\<in> mul r\""], ["proof (state)\nthis:\n  (N, M) \\<in> mul r\n\ngoal (1 subgoal):\n 1. \\<And>x y. (x, y) \\<in> mul r \\<Longrightarrow> (x, y) \\<in> mult r", "show \"(N,M) \\<in> mult r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, M) \\<in> mult r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (N, M) \\<in> mult r", "obtain I J K where \"M = I + J\" and \"N = I + K\" and \"J \\<noteq> {#}\" and \"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>M = I + J; N = I + K; J \\<noteq> {#};\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A"], ["proof (prove)\nusing this:\n  (N, M) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>M = I + J; N = I + K; J \\<noteq> {#};\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_def"], ["proof (prove)\nusing this:\n  (N, M)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and>\n            set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>M = I + J; N = I + K; J \\<noteq> {#};\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M = I + J\n  N = I + K\n  J \\<noteq> {#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (N, M) \\<in> mult r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = I + J\n  N = I + K\n  J \\<noteq> {#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (N, M) \\<in> mult r", "using one_step_implies_mult assms downset_elim"], ["proof (prove)\nusing this:\n  M = I + J\n  N = I + K\n  J \\<noteq> {#}\n  set_mset K \\<subseteq> r \\<down>m J\n  \\<lbrakk>?J \\<noteq> {#};\n   \\<forall>k\\<in>#?K. \\<exists>j\\<in>#?J. (k, j) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> (?I + ?K, ?I + ?J) \\<in> mult ?r\n  trans r\n  set_mset ?K \\<subseteq> ?r \\<down>m ?J \\<Longrightarrow>\n  \\<forall>k\\<in>#?K. \\<exists>j\\<in>#?J. (k, j) \\<in> ?r\n\ngoal (1 subgoal):\n 1. (N, M) \\<in> mult r", "by metis"], ["proof (state)\nthis:\n  (N, M) \\<in> mult r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (N, M) \\<in> mult r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mul r \\<subseteq> mult r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_eq_is_mul_eq: assumes \"trans r\" shows \"mult_eq r = mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mult_eq r = mul_eq r", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. mult_eq r \\<subseteq> mul_eq r\n 2. mul_eq r \\<subseteq> mult_eq r", "show \"mult_eq r \\<subseteq> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mult_eq r \\<subseteq> mul_eq r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> mult_eq r \\<Longrightarrow> (x, y) \\<in> mul_eq r", "fix N M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> mult_eq r \\<Longrightarrow> (x, y) \\<in> mul_eq r", "assume A: \"(N,M) \\<in> mult_eq r\""], ["proof (state)\nthis:\n  (N, M) \\<in> mult_eq r\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> mult_eq r \\<Longrightarrow> (x, y) \\<in> mul_eq r", "show \"(N,M) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, M) \\<in> mul_eq r", "proof (cases \"(N,M) \\<in> mult r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (N, M) \\<in> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r\n 2. (N, M) \\<notin> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r", "case True"], ["proof (state)\nthis:\n  (N, M) \\<in> mult r\n\ngoal (2 subgoals):\n 1. (N, M) \\<in> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r\n 2. (N, M) \\<notin> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  (N, M) \\<in> mult r\n\ngoal (1 subgoal):\n 1. (N, M) \\<in> mul_eq r", "unfolding mult_is_mul[OF assms] mul_def mul_eq_def"], ["proof (prove)\nusing this:\n  (N, M)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and>\n            set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}\n\ngoal (1 subgoal):\n 1. (N, M)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by auto"], ["proof (state)\nthis:\n  (N, M) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (N, M) \\<notin> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (N, M) \\<notin> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r", "case False"], ["proof (state)\nthis:\n  (N, M) \\<notin> mult r\n\ngoal (1 subgoal):\n 1. (N, M) \\<notin> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r", "hence eq: \"N = M\""], ["proof (prove)\nusing this:\n  (N, M) \\<notin> mult r\n\ngoal (1 subgoal):\n 1. N = M", "using A rtranclD"], ["proof (prove)\nusing this:\n  (N, M) \\<notin> mult r\n  (N, M) \\<in> mult_eq r\n  (?a, ?b) \\<in> ?R\\<^sup>* \\<Longrightarrow>\n  ?a = ?b \\<or> ?a \\<noteq> ?b \\<and> (?a, ?b) \\<in> ?R\\<^sup>+\n\ngoal (1 subgoal):\n 1. N = M", "unfolding mult_def mult_eq_def"], ["proof (prove)\nusing this:\n  (N, M) \\<notin> (mult1 r)\\<^sup>+\n  (N, M) \\<in> (mult1 r)\\<^sup>*\n  (?a, ?b) \\<in> ?R\\<^sup>* \\<Longrightarrow>\n  ?a = ?b \\<or> ?a \\<noteq> ?b \\<and> (?a, ?b) \\<in> ?R\\<^sup>+\n\ngoal (1 subgoal):\n 1. N = M", "by metis"], ["proof (state)\nthis:\n  N = M\n\ngoal (1 subgoal):\n 1. (N, M) \\<notin> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r", "hence \"M = M + {#} \\<and> N = N + {#} \\<and> set_mset {#} \\<subseteq> dm r {#}\""], ["proof (prove)\nusing this:\n  N = M\n\ngoal (1 subgoal):\n 1. M = M + {#} \\<and>\n    N = N + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}", "by auto"], ["proof (state)\nthis:\n  M = M + {#} \\<and>\n  N = N + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (N, M) \\<notin> mult r \\<Longrightarrow> (N, M) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = M + {#} \\<and>\n  N = N + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (N, M) \\<in> mul_eq r", "unfolding eq"], ["proof (prove)\nusing this:\n  M = M + {#} \\<and>\n  M = M + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, M) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  M = M + {#} \\<and>\n  M = M + {#} \\<and> set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, M)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by fast"], ["proof (state)\nthis:\n  (N, M) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (N, M) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mult_eq r \\<subseteq> mul_eq r\n\ngoal (1 subgoal):\n 1. mul_eq r \\<subseteq> mult_eq r", "show \"mul_eq r \\<subseteq> mult_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_eq r \\<subseteq> mult_eq r", "using one_step_implies_mult_eq[OF assms]"], ["proof (prove)\nusing this:\n  set_mset ?K \\<subseteq> r \\<down>m ?J \\<Longrightarrow>\n  (?I + ?K, ?I + ?J) \\<in> mult_eq r\n\ngoal (1 subgoal):\n 1. mul_eq r \\<subseteq> mult_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  set_mset ?K \\<subseteq> r \\<down>m ?J \\<Longrightarrow>\n  (?I + ?K, ?I + ?J) \\<in> mult_eq r\n\ngoal (1 subgoal):\n 1. {(M, N).\n     \\<exists>I J K.\n        M = I + K \\<and>\n        N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n    \\<subseteq> mult_eq r", "by auto"], ["proof (state)\nthis:\n  mul_eq r \\<subseteq> mult_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"mul_eq r = (mul r)\\<^sup>=\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_eq r = (mul r)\\<^sup>=", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. mul_eq r \\<subseteq> (mul r)\\<^sup>=\n 2. (mul r)\\<^sup>= \\<subseteq> mul_eq r", "show \"mul_eq r \\<subseteq> (mul r)\\<^sup>=\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_eq r \\<subseteq> (mul r)\\<^sup>=", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> mul_eq r \\<Longrightarrow> (x, y) \\<in> (mul r)\\<^sup>=", "fix M N"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> mul_eq r \\<Longrightarrow> (x, y) \\<in> (mul r)\\<^sup>=", "assume A:\"(M,N) \\<in> mul_eq r\""], ["proof (state)\nthis:\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> mul_eq r \\<Longrightarrow> (x, y) \\<in> (mul r)\\<^sup>=", "show \"(M,N) \\<in> (mul r)\\<^sup>=\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> (mul r)\\<^sup>=", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, N) \\<in> (mul r)\\<^sup>=", "from A"], ["proof (chain)\npicking this:\n  (M, N) \\<in> mul_eq r", "obtain I J K where 1: \"M = I + K\" and 2: \"N = I + J\" and 3: \"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> (mul r)\\<^sup>=", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> (mul r)\\<^sup>=", "proof (cases \"J = {#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. J = {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=\n 2. J \\<noteq> {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=", "case True"], ["proof (state)\nthis:\n  J = {#}\n\ngoal (2 subgoals):\n 1. J = {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=\n 2. J \\<noteq> {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=", "hence \"K = {#}\""], ["proof (prove)\nusing this:\n  J = {#}\n\ngoal (1 subgoal):\n 1. K = {#}", "using 3"], ["proof (prove)\nusing this:\n  J = {#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. K = {#}", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  J = {#}\n  set_mset K \\<subseteq> {y. \\<exists>x\\<in>#J. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. K = {#}", "by auto"], ["proof (state)\nthis:\n  K = {#}\n\ngoal (2 subgoals):\n 1. J = {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=\n 2. J \\<noteq> {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=", "hence \"M = N\""], ["proof (prove)\nusing this:\n  K = {#}\n\ngoal (1 subgoal):\n 1. M = N", "using True 1 2"], ["proof (prove)\nusing this:\n  K = {#}\n  J = {#}\n  M = I + K\n  N = I + J\n\ngoal (1 subgoal):\n 1. M = N", "by auto"], ["proof (state)\nthis:\n  M = N\n\ngoal (2 subgoals):\n 1. J = {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=\n 2. J \\<noteq> {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = N\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> (mul r)\\<^sup>=", "by auto"], ["proof (state)\nthis:\n  (M, N) \\<in> (mul r)\\<^sup>=\n\ngoal (1 subgoal):\n 1. J \\<noteq> {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. J \\<noteq> {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=", "case False"], ["proof (state)\nthis:\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. J \\<noteq> {#} \\<Longrightarrow> (M, N) \\<in> (mul r)\\<^sup>=", "thus ?thesis"], ["proof (prove)\nusing this:\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> (mul r)\\<^sup>=", "using 1 2 3"], ["proof (prove)\nusing this:\n  J \\<noteq> {#}\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> (mul r)\\<^sup>=", "unfolding mul_def mul_eq_def"], ["proof (prove)\nusing this:\n  J \\<noteq> {#}\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and>\n              J \\<noteq> {#}}\\<^sup>=", "by auto"], ["proof (state)\nthis:\n  (M, N) \\<in> (mul r)\\<^sup>=\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (M, N) \\<in> (mul r)\\<^sup>=\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (M, N) \\<in> (mul r)\\<^sup>=\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mul_eq r \\<subseteq> (mul r)\\<^sup>=\n\ngoal (1 subgoal):\n 1. (mul r)\\<^sup>= \\<subseteq> mul_eq r", "show \"mul_eq r \\<supseteq> (mul r)\\<^sup>=\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mul r)\\<^sup>= \\<subseteq> mul_eq r", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (mul r)\\<^sup>= \\<Longrightarrow> (x, y) \\<in> mul_eq r", "fix M N"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (mul r)\\<^sup>= \\<Longrightarrow> (x, y) \\<in> mul_eq r", "assume A:\"(M,N) \\<in> (mul r)\\<^sup>=\""], ["proof (state)\nthis:\n  (M, N) \\<in> (mul r)\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       (x, y) \\<in> (mul r)\\<^sup>= \\<Longrightarrow> (x, y) \\<in> mul_eq r", "show \"(M,N) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "proof (cases \"M = N\")"], ["proof (state)\ngoal (2 subgoals):\n 1. M = N \\<Longrightarrow> (M, N) \\<in> mul_eq r\n 2. M \\<noteq> N \\<Longrightarrow> (M, N) \\<in> mul_eq r", "case True"], ["proof (state)\nthis:\n  M = N\n\ngoal (2 subgoals):\n 1. M = N \\<Longrightarrow> (M, N) \\<in> mul_eq r\n 2. M \\<noteq> N \\<Longrightarrow> (M, N) \\<in> mul_eq r", "hence \"M = M + {#}\" and \"N = M + {#}\" and \"set_mset {#} \\<subseteq> dm r {#}\""], ["proof (prove)\nusing this:\n  M = N\n\ngoal (1 subgoal):\n 1. M = M + {#} &&& N = M + {#} &&& set_mset {#} \\<subseteq> r \\<down>m {#}", "by auto"], ["proof (state)\nthis:\n  M = M + {#}\n  N = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (2 subgoals):\n 1. M = N \\<Longrightarrow> (M, N) \\<in> mul_eq r\n 2. M \\<noteq> N \\<Longrightarrow> (M, N) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = M + {#}\n  N = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  M = M + {#}\n  N = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by fast"], ["proof (state)\nthis:\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. M \\<noteq> N \\<Longrightarrow> (M, N) \\<in> mul_eq r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<noteq> N \\<Longrightarrow> (M, N) \\<in> mul_eq r", "case False"], ["proof (state)\nthis:\n  M \\<noteq> N\n\ngoal (1 subgoal):\n 1. M \\<noteq> N \\<Longrightarrow> (M, N) \\<in> mul_eq r", "hence \"(M,N) \\<in> mul r\""], ["proof (prove)\nusing this:\n  M \\<noteq> N\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul r", "using A"], ["proof (prove)\nusing this:\n  M \\<noteq> N\n  (M, N) \\<in> (mul r)\\<^sup>=\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul r", "by auto"], ["proof (state)\nthis:\n  (M, N) \\<in> mul r\n\ngoal (1 subgoal):\n 1. M \\<noteq> N \\<Longrightarrow> (M, N) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  (M, N) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "unfolding mul_def mul_eq_def"], ["proof (prove)\nusing this:\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and>\n            set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}\n\ngoal (1 subgoal):\n 1. (M, N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by auto"], ["proof (state)\nthis:\n  (M, N) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (M, N) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (mul r)\\<^sup>= \\<subseteq> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>useful properties on multisets\\<close>"], ["", "lemma mul_eq_reflexive: \"(M,M) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, M) \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, M) \\<in> mul_eq r", "have \"M = M + {#}\" and \"set_mset {#} \\<subseteq> dm r {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = M + {#} &&& set_mset {#} \\<subseteq> r \\<down>m {#}", "by auto"], ["proof (state)\nthis:\n  M = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, M) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, M) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  M = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. (M, M)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by fast"], ["proof (state)\nthis:\n  (M, M) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_eq_trans: assumes \"trans r\" and \"(M,N) \\<in> mul_eq r\" and \"(N,P) \\<in> mul_eq r\" shows \"(M,P) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, P) \\<in> mul_eq r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> mul_eq r\n  (N, P) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, P) \\<in> mul_eq r", "unfolding mult_eq_is_mul_eq[symmetric,OF assms(1)] mult_eq_def"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> (mult1 r)\\<^sup>*\n  (N, P) \\<in> (mult1 r)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (M, P) \\<in> (mult1 r)\\<^sup>*", "by auto"], ["", "lemma mul_eq_singleton: assumes \"(M, {#\\<alpha>#}) \\<in> mul_eq r\" shows \"M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> dm r {#\\<alpha>#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "from assms"], ["proof (chain)\npicking this:\n  (M, {#\\<alpha>#}) \\<in> mul_eq r", "obtain I J K where 1:\"M = I + K\" and 2:\"{#\\<alpha>#} = I + J\" and 3:\"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  (M, {#\\<alpha>#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  (M, {#\\<alpha>#})\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M = I + K\n  {#\\<alpha>#} = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = I + K\n  {#\\<alpha>#} = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "proof (cases \"I = {#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I = {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n 2. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "case True"], ["proof (state)\nthis:\n  I = {#}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I = {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n 2. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "hence \"J = {#\\<alpha>#}\""], ["proof (prove)\nusing this:\n  I = {#}\n\ngoal (1 subgoal):\n 1. J = {#\\<alpha>#}", "using 2"], ["proof (prove)\nusing this:\n  I = {#}\n  {#\\<alpha>#} = I + J\n\ngoal (1 subgoal):\n 1. J = {#\\<alpha>#}", "by auto"], ["proof (state)\nthis:\n  J = {#\\<alpha>#}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I = {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n 2. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "thus ?thesis"], ["proof (prove)\nusing this:\n  J = {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "using 1 3 True"], ["proof (prove)\nusing this:\n  J = {#\\<alpha>#}\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n  I = {#}\n\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "by auto"], ["proof (state)\nthis:\n  M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "case False"], ["proof (state)\nthis:\n  I \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "hence i: \"I = {#\\<alpha>#}\""], ["proof (prove)\nusing this:\n  I \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. I = {#\\<alpha>#}", "using 2 union_is_single"], ["proof (prove)\nusing this:\n  I \\<noteq> {#}\n  {#\\<alpha>#} = I + J\n  (?M + ?N = {#?a#}) =\n  (?M = {#?a#} \\<and> ?N = {#} \\<or> ?M = {#} \\<and> ?N = {#?a#})\n\ngoal (1 subgoal):\n 1. I = {#\\<alpha>#}", "by metis"], ["proof (state)\nthis:\n  I = {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "hence \"J = {#}\""], ["proof (prove)\nusing this:\n  I = {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. J = {#}", "using 2 union_is_single"], ["proof (prove)\nusing this:\n  I = {#\\<alpha>#}\n  {#\\<alpha>#} = I + J\n  (?M + ?N = {#?a#}) =\n  (?M = {#?a#} \\<and> ?N = {#} \\<or> ?M = {#} \\<and> ?N = {#?a#})\n\ngoal (1 subgoal):\n 1. J = {#}", "by metis"], ["proof (state)\nthis:\n  J = {#}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>M = I + K; {#\\<alpha>#} = I + J;\n     set_mset K \\<subseteq> r \\<down>m J; I \\<noteq> {#}\\<rbrakk>\n    \\<Longrightarrow> M = {#\\<alpha>#} \\<or>\n                      set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "thus ?thesis"], ["proof (prove)\nusing this:\n  J = {#}\n\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "using 1 i 3"], ["proof (prove)\nusing this:\n  J = {#}\n  M = I + K\n  I = {#\\<alpha>#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  J = {#}\n  M = I + K\n  I = {#\\<alpha>#}\n  set_mset K \\<subseteq> {y. \\<exists>x\\<in>#J. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. M = {#\\<alpha>#} \\<or>\n    set_mset M \\<subseteq> {y. \\<exists>x\\<in>#{#\\<alpha>#}. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M = {#\\<alpha>#} \\<or> set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_and_mul_eq_imp_mul: assumes \"trans r\" and \"(M,N) \\<in> mul r\" and \"(N,P) \\<in> mul_eq r\" shows \"(M,P) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, P) \\<in> mul r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> mul r\n  (N, P) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, P) \\<in> mul r", "unfolding mult_is_mul[symmetric,OF assms(1)] mult_eq_is_mul_eq[symmetric,OF assms(1)] mult_def mult_eq_def"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> (mult1 r)\\<^sup>+\n  (N, P) \\<in> (mult1 r)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (M, P) \\<in> (mult1 r)\\<^sup>+", "by auto"], ["", "lemma mul_eq_and_mul_imp_mul: assumes \"trans r\" and \"(M,N) \\<in> mul_eq r\" and \"(N,P) \\<in> mul r\" shows \"(M,P) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, P) \\<in> mul r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> mul_eq r\n  (N, P) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (M, P) \\<in> mul r", "unfolding mult_is_mul[symmetric,OF assms(1)] mult_eq_is_mul_eq[symmetric,OF assms(1)] mult_def mult_eq_def"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> (mult1 r)\\<^sup>*\n  (N, P) \\<in> (mult1 r)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (M, P) \\<in> (mult1 r)\\<^sup>+", "by auto"], ["", "lemma wf_mul: assumes \"trans r\" and \"wf r\" shows \"wf (mul r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (mul r)", "unfolding mult_is_mul[symmetric,OF assms(1)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (mult r)", "using wf_mult[OF assms(2)]"], ["proof (prove)\nusing this:\n  wf (mult r)\n\ngoal (1 subgoal):\n 1. wf (mult r)", "by auto"], ["", "lemma remove_is_empty_imp_mul: assumes \"M -s dm r {#\\<alpha>#} = {#}\" shows \"(M,{#\\<alpha>#}) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, {#\\<alpha>#}) \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, {#\\<alpha>#}) \\<in> mul r", "from assms"], ["proof (chain)\npicking this:\n  M -s r \\<down>m {#\\<alpha>#} = {#}", "have C: \"set_mset M \\<subseteq> dm r {#\\<alpha>#}\""], ["proof (prove)\nusing this:\n  M -s r \\<down>m {#\\<alpha>#} = {#}\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}", "by (metis remove_empty_implies_subset)"], ["proof (state)\nthis:\n  set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. (M, {#\\<alpha>#}) \\<in> mul r", "have \"M = {#}+M\" and \"{#\\<alpha>#}={#}+{#\\<alpha>#}\" and \"{#\\<alpha>#} \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = {#} + M &&&\n    {#\\<alpha>#} = {#} + {#\\<alpha>#} &&& {#\\<alpha>#} \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  M = {#} + M\n  {#\\<alpha>#} = {#} + {#\\<alpha>#}\n  {#\\<alpha>#} \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, {#\\<alpha>#}) \\<in> mul r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = {#} + M\n  {#\\<alpha>#} = {#} + {#\\<alpha>#}\n  {#\\<alpha>#} \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, {#\\<alpha>#}) \\<in> mul r", "using C"], ["proof (prove)\nusing this:\n  M = {#} + M\n  {#\\<alpha>#} = {#} + {#\\<alpha>#}\n  {#\\<alpha>#} \\<noteq> {#}\n  set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. (M, {#\\<alpha>#}) \\<in> mul r", "unfolding mul_def"], ["proof (prove)\nusing this:\n  M = {#} + M\n  {#\\<alpha>#} = {#} + {#\\<alpha>#}\n  {#\\<alpha>#} \\<noteq> {#}\n  set_mset M \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. (M, {#\\<alpha>#})\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}", "by fast"], ["proof (state)\nthis:\n  (M, {#\\<alpha>#}) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 2.6\\<close>"], ["", "lemma lemma2_6_1_set: \"ds r (S \\<union> T) = ds r S \\<union> ds r T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s (S \\<union> T) = r \\<down>s S \\<union> r \\<down>s T", "unfolding set_mset_union ds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>S \\<union> T. (y, x) \\<in> r} =\n    {y. \\<exists>x\\<in>S. (y, x) \\<in> r} \\<union>\n    {y. \\<exists>x\\<in>T. (y, x) \\<in> r}", "by auto"], ["", "lemma lemma2_6_1_list: \"dl r (\\<sigma>@\\<tau>) = dl r \\<sigma> \\<union> dl r \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>l (\\<sigma> @ \\<tau>) =\n    r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau>", "unfolding dl_def ds_def set_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>set \\<sigma> \\<union> set \\<tau>. (y, x) \\<in> r} =\n    {y. \\<exists>x\\<in>set \\<sigma>. (y, x) \\<in> r} \\<union>\n    {y. \\<exists>x\\<in>set \\<tau>. (y, x) \\<in> r}", "by auto"], ["", "lemma lemma2_6_1_multiset: \"dm r (M + N) = dm r M \\<union> dm r N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m (M + N) = r \\<down>m M \\<union> r \\<down>m N", "unfolding dm_def set_mset_union ds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>set_mset M \\<union> set_mset N. (y, x) \\<in> r} =\n    {y. \\<exists>x\\<in>#M. (y, x) \\<in> r} \\<union>\n    {y. \\<exists>x\\<in>#N. (y, x) \\<in> r}", "by auto"], ["", "lemma lemma2_6_1_diff: \"(dm r M) - ds r S \\<subseteq> dm r (M -s S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m M - r \\<down>s S \\<subseteq> r \\<down>m (M -s S)", "unfolding diff_def dm_def ds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>#M. (y, x) \\<in> r} -\n    {y. \\<exists>x\\<in>S. (y, x) \\<in> r}\n    \\<subseteq> {y. \\<exists>x\\<in>#{#x \\<in># M. x \\<notin> S#}.\n                       (y, x) \\<in> r}", "by (rule subsetI) auto"], ["", "text \\<open>missing but useful\\<close>"], ["", "lemma dl_monotone: \"dl r (\\<sigma>@\\<tau>) \\<subseteq> dl r (\\<sigma>@\\<tau>'@\\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>l (\\<sigma> @ \\<tau>)\n    \\<subseteq> r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>)", "unfolding lemma2_6_1_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau>\n    \\<subseteq> r \\<down>l \\<sigma> \\<union>\n                (r \\<down>l \\<tau>' \\<union> r \\<down>l \\<tau>)", "by auto"], ["", "text \\<open>Lemma 2.6.2\\<close>"], ["", "lemma lemma2_6_2_a: assumes t: \"trans r\" and \"M \\<subseteq># N\" shows \"(M,N) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "from assms(2)"], ["proof (chain)\npicking this:\n  M \\<subseteq># N", "obtain J where \"N=M+J\""], ["proof (prove)\nusing this:\n  M \\<subseteq># N\n\ngoal (1 subgoal):\n 1. (\\<And>J. N = M + J \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis assms(2) mset_subset_eq_exists_conv)"], ["proof (state)\nthis:\n  N = M + J\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "hence \"M = M + {#}\" and \"N = M + J\" and \"set_mset {#} \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  N = M + J\n\ngoal (1 subgoal):\n 1. M = M + {#} &&& N = M + J &&& set_mset {#} \\<subseteq> r \\<down>m J", "by auto"], ["proof (state)\nthis:\n  M = M + {#}\n  N = M + J\n  set_mset {#} \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = M + {#}\n  N = M + J\n  set_mset {#} \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  M = M + {#}\n  N = M + J\n  set_mset {#} \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by fast"], ["proof (state)\nthis:\n  (M, N) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_eq_not_equal_imp_elt:\nassumes \"(M,N)\\<in>mul_eq r\" and \"y\\<in>set_mset M - set_mset N\" shows \"\\<exists>z\\<in>set_mset N.(y,z)\\<in>r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (y, z) \\<in> r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (y, z) \\<in> r", "from assms"], ["proof (chain)\npicking this:\n  (M, N) \\<in> mul_eq r\n  y \\<in> set_mset M - set_mset N", "obtain I J K where \"N=I+J\" and \"M=I+K\" and F3:\"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  (M, N) \\<in> mul_eq r\n  y \\<in> set_mset M - set_mset N\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n  y \\<in> set_mset M - set_mset N\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (y, z) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (y, z) \\<in> r", "using assms(2) downset_elim[OF F3]"], ["proof (prove)\nusing this:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n  y \\<in> set_mset M - set_mset N\n  \\<forall>k\\<in>#K. \\<exists>j\\<in>#J. (k, j) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (y, z) \\<in> r", "by auto"], ["proof (state)\nthis:\n  \\<exists>z\\<in>#N. (y, z) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma2_6_2_b: assumes \"trans r\" and \"(M,N) \\<in> mul_eq r\" shows \"dm r M \\<subseteq> dm r N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m M \\<subseteq> r \\<down>m N", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> r \\<down>m M \\<Longrightarrow> x \\<in> r \\<down>m N", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> r \\<down>m M \\<Longrightarrow> x \\<in> r \\<down>m N", "assume A: \"x \\<in> dm r M\""], ["proof (state)\nthis:\n  x \\<in> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> r \\<down>m M \\<Longrightarrow> x \\<in> r \\<down>m N", "show \"x \\<in> dm r N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m N", "from A"], ["proof (chain)\npicking this:\n  x \\<in> r \\<down>m M", "obtain y where F2:\"y\\<in>set_mset M\" and F3:\"(x,y)\\<in>r\""], ["proof (prove)\nusing this:\n  x \\<in> r \\<down>m M\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in># M; (x, y) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  x \\<in> {y. \\<exists>x\\<in>#M. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in># M; (x, y) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in># M\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m N", "hence \"\\<exists> z \\<in> set_mset N. (x,z)\\<in>r\""], ["proof (prove)\nusing this:\n  y \\<in># M\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (x, z) \\<in> r", "proof (cases \"y\\<in>set_mset N\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># M; (x, y) \\<in> r; y \\<in># N\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z\\<in>#N. (x, z) \\<in> r\n 2. \\<lbrakk>y \\<in># M; (x, y) \\<in> r; y \\<notin># N\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z\\<in>#N. (x, z) \\<in> r", "case True"], ["proof (state)\nthis:\n  y \\<in># N\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># M; (x, y) \\<in> r; y \\<in># N\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z\\<in>#N. (x, z) \\<in> r\n 2. \\<lbrakk>y \\<in># M; (x, y) \\<in> r; y \\<notin># N\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z\\<in>#N. (x, z) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in># N\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (x, z) \\<in> r", "using F3"], ["proof (prove)\nusing this:\n  y \\<in># N\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (x, z) \\<in> r", "unfolding ds_def"], ["proof (prove)\nusing this:\n  y \\<in># N\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (x, z) \\<in> r", "by auto"], ["proof (state)\nthis:\n  \\<exists>z\\<in>#N. (x, z) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in># M; (x, y) \\<in> r; y \\<notin># N\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z\\<in>#N. (x, z) \\<in> r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in># M; (x, y) \\<in> r; y \\<notin># N\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z\\<in>#N. (x, z) \\<in> r", "case False"], ["proof (state)\nthis:\n  y \\<notin># N\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in># M; (x, y) \\<in> r; y \\<notin># N\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z\\<in>#N. (x, z) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<notin># N\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (x, z) \\<in> r", "using mul_eq_not_equal_imp_elt assms F2 F3 trans_def"], ["proof (prove)\nusing this:\n  y \\<notin># N\n  \\<lbrakk>(?M, ?N) \\<in> mul_eq ?r;\n   ?y \\<in> set_mset ?M - set_mset ?N\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z\\<in>#?N. (?y, z) \\<in> ?r\n  trans r\n  (M, N) \\<in> mul_eq r\n  y \\<in># M\n  (x, y) \\<in> r\n  trans ?r =\n  (\\<forall>x y z.\n      (x, y) \\<in> ?r \\<longrightarrow>\n      (y, z) \\<in> ?r \\<longrightarrow> (x, z) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>#N. (x, z) \\<in> r", "by fast"], ["proof (state)\nthis:\n  \\<exists>z\\<in>#N. (x, z) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>#N. (x, z) \\<in> r\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m N", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>#N. (x, z) \\<in> r\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m N", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>#N. (x, z) \\<in> r\n\ngoal (1 subgoal):\n 1. x \\<in> {y. \\<exists>x\\<in>#N. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m N\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 2.6.3\\<close>"], ["", "lemma ds_trans_contrapos: assumes t: \"trans r\" and \"x \\<notin> ds r S\" and \"(x,y) \\<in> r\" shows \"y \\<notin> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> r \\<down>s S", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  x \\<notin> r \\<down>s S\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. y \\<notin> r \\<down>s S", "unfolding ds_def trans_def"], ["proof (prove)\nusing this:\n  \\<forall>x y z.\n     (x, y) \\<in> r \\<longrightarrow>\n     (y, z) \\<in> r \\<longrightarrow> (x, z) \\<in> r\n  x \\<notin> {y. \\<exists>x\\<in>S. (y, x) \\<in> r}\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. y \\<notin> {y. \\<exists>x\\<in>S. (y, x) \\<in> r}", "by fast"], ["", "lemma dm_max_elt: assumes i: \"irrefl r\" and t: \"trans r\"  shows \"x \\<in> dm r M \\<Longrightarrow> \\<exists> y \\<in> set_mset (M -s dm r M). (x,y) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m M \\<Longrightarrow>\n    \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r", "proof (induct M arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> r \\<down>m {#} \\<Longrightarrow>\n       \\<exists>y\\<in>#{#} -s r \\<down>m {#}. (x, y) \\<in> r\n 2. \\<And>x M xa.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> r \\<down>m M \\<Longrightarrow>\n                   \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r;\n        xa \\<in> r \\<down>m add_mset x M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>#add_mset x M -s\n   r \\<down>m add_mset x M.\n                            (xa, y) \\<in> r", "case empty"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m {#}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> r \\<down>m {#} \\<Longrightarrow>\n       \\<exists>y\\<in>#{#} -s r \\<down>m {#}. (x, y) \\<in> r\n 2. \\<And>x M xa.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> r \\<down>m M \\<Longrightarrow>\n                   \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r;\n        xa \\<in> r \\<down>m add_mset x M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>#add_mset x M -s\n   r \\<down>m add_mset x M.\n                            (xa, y) \\<in> r", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> r \\<down>m {#}\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#{#} -s r \\<down>m {#}. (x, y) \\<in> r", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  x \\<in> {y. \\<exists>x\\<in>#{#}. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#{#} -s {y. \\<exists>x\\<in>#{#}. (y, x) \\<in> r}.\n       (x, y) \\<in> r", "by auto"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#{#} -s r \\<down>m {#}. (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>x M xa.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> r \\<down>m M \\<Longrightarrow>\n                   \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r;\n        xa \\<in> r \\<down>m add_mset x M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>#add_mset x M -s\n   r \\<down>m add_mset x M.\n                            (xa, y) \\<in> r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x M xa.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> r \\<down>m M \\<Longrightarrow>\n                   \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r;\n        xa \\<in> r \\<down>m add_mset x M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>#add_mset x M -s\n   r \\<down>m add_mset x M.\n                            (xa, y) \\<in> r", "case (add p P)"], ["proof (state)\nthis:\n  ?x \\<in> r \\<down>m P \\<Longrightarrow>\n  \\<exists>y\\<in>#P -s r \\<down>m P. (?x, y) \\<in> r\n  x \\<in> r \\<down>m add_mset p P\n\ngoal (1 subgoal):\n 1. \\<And>x M xa.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> r \\<down>m M \\<Longrightarrow>\n                   \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r;\n        xa \\<in> r \\<down>m add_mset x M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>#add_mset x M -s\n   r \\<down>m add_mset x M.\n                            (xa, y) \\<in> r", "hence mem: \"x \\<in> (dm r P \\<union> dm r {#p#})\""], ["proof (prove)\nusing this:\n  ?x \\<in> r \\<down>m P \\<Longrightarrow>\n  \\<exists>y\\<in>#P -s r \\<down>m P. (?x, y) \\<in> r\n  x \\<in> r \\<down>m add_mset p P\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m P \\<union> r \\<down>m {#p#}", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  ?x \\<in> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r} \\<Longrightarrow>\n  \\<exists>y\\<in>#P -s {y. \\<exists>x\\<in>#P. (y, x) \\<in> r}.\n     (?x, y) \\<in> r\n  x \\<in> {y. \\<exists>x\\<in>#add_mset p P. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. x \\<in> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r} \\<union>\n            {y. \\<exists>x\\<in>#{#p#}. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m P \\<union> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. \\<And>x M xa.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> r \\<down>m M \\<Longrightarrow>\n                   \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r;\n        xa \\<in> r \\<down>m add_mset x M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>#add_mset x M -s\n   r \\<down>m add_mset x M.\n                            (xa, y) \\<in> r", "from i t"], ["proof (chain)\npicking this:\n  irrefl r\n  trans r", "have not_mem_dm: \"p \\<notin> dm r {#p#}\""], ["proof (prove)\nusing this:\n  irrefl r\n  trans r\n\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m {#p#}", "unfolding dm_def ds_def irrefl_def"], ["proof (prove)\nusing this:\n  \\<forall>a. (a, a) \\<notin> r\n  trans r\n\ngoal (1 subgoal):\n 1. p \\<notin> {y. \\<exists>x\\<in>#{#p#}. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  p \\<notin> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. \\<And>x M xa.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> r \\<down>m M \\<Longrightarrow>\n                   \\<exists>y\\<in>#M -s r \\<down>m M. (x, y) \\<in> r;\n        xa \\<in> r \\<down>m add_mset x M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>#add_mset x M -s\n   r \\<down>m add_mset x M.\n                            (xa, y) \\<in> r", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "proof (cases \"x \\<in> dm r P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<in> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<notin> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "case False"], ["proof (state)\nthis:\n  x \\<notin> r \\<down>m P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<in> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<notin> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "hence relp: \"(x,p) \\<in> r\""], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>m P\n\ngoal (1 subgoal):\n 1. (x, p) \\<in> r", "using mem"], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>m P\n  x \\<in> r \\<down>m P \\<union> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. (x, p) \\<in> r", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  x \\<notin> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r}\n  x \\<in> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r} \\<union>\n          {y. \\<exists>x\\<in>#{#p#}. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. (x, p) \\<in> r", "by auto"], ["proof (state)\nthis:\n  (x, p) \\<in> r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<in> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<notin> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "proof (cases \"p \\<in> dm r P\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> r \\<down>m P \\<Longrightarrow>\n    \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n 2. p \\<notin> r \\<down>m P \\<Longrightarrow>\n    \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "case True"], ["proof (state)\nthis:\n  p \\<in> r \\<down>m P\n\ngoal (2 subgoals):\n 1. p \\<in> r \\<down>m P \\<Longrightarrow>\n    \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n 2. p \\<notin> r \\<down>m P \\<Longrightarrow>\n    \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> r \\<down>m P\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "using relp t ds_trans_contrapos False"], ["proof (prove)\nusing this:\n  p \\<in> r \\<down>m P\n  (x, p) \\<in> r\n  trans r\n  \\<lbrakk>trans ?r; ?x \\<notin> ?r \\<down>s ?S; (?x, ?y) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> ?r \\<down>s ?S\n  x \\<notin> r \\<down>m P\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "unfolding dm_def"], ["proof (prove)\nusing this:\n  p \\<in> r \\<down>s set_mset P\n  (x, p) \\<in> r\n  trans r\n  \\<lbrakk>trans ?r; ?x \\<notin> ?r \\<down>s ?S; (?x, ?y) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> ?r \\<down>s ?S\n  x \\<notin> r \\<down>s set_mset P\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>s set_mset (add_mset p P).\n       (x, y) \\<in> r", "by fast"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m P \\<Longrightarrow>\n    \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m P \\<Longrightarrow>\n    \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "case False"], ["proof (state)\nthis:\n  p \\<notin> r \\<down>m P\n\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m P \\<Longrightarrow>\n    \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m P\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "using not_mem_dm relp"], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m P\n  p \\<notin> r \\<down>m {#p#}\n  (x, p) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "unfolding dm_def ds_def diff_def"], ["proof (prove)\nusing this:\n  p \\<notin> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r}\n  p \\<notin> {y. \\<exists>x\\<in>#{#p#}. (y, x) \\<in> r}\n  (x, p) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#{#x \\<in># add_mset p P.\n                     x \\<notin> {y. \\<exists>x\\<in>#add_mset p P.\n (y, x) \\<in> r}#}.\n       (x, y) \\<in> r", "by auto"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<in> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<in> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "case True"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<in> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "obtain y where key: \"y \\<in> set_mset P\" \"y \\<notin> dm r P\" \"(x,y) \\<in> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P;\n         (x, y) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using add(1)[OF True]"], ["proof (prove)\nusing this:\n  \\<exists>y\\<in>#P -s r \\<down>m P. (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P;\n         (x, y) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding diff_def"], ["proof (prove)\nusing this:\n  \\<exists>y\\<in>#{#x \\<in># P. x \\<notin> r \\<down>m P#}. (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P;\n         (x, y) \\<in> r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in># P\n  y \\<notin> r \\<down>m P\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<notin> r \\<down>m {#p#}; x \\<in> r \\<down>m P\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in># P\n  y \\<notin> r \\<down>m P\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "proof (cases \"y \\<in> dm r {#p#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "case True"], ["proof (state)\nthis:\n  y \\<in> r \\<down>m {#p#}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "hence rely: \"(y,p) \\<in> r\""], ["proof (prove)\nusing this:\n  y \\<in> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. (y, p) \\<in> r", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  y \\<in> {y. \\<exists>x\\<in>#{#p#}. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. (y, p) \\<in> r", "by auto"], ["proof (state)\nthis:\n  (y, p) \\<in> r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "hence relp: \"(x,p) \\<in> r\""], ["proof (prove)\nusing this:\n  (y, p) \\<in> r\n\ngoal (1 subgoal):\n 1. (x, p) \\<in> r", "using rely t key trans_def"], ["proof (prove)\nusing this:\n  (y, p) \\<in> r\n  (y, p) \\<in> r\n  trans r\n  y \\<in># P\n  y \\<notin> r \\<down>m P\n  (x, y) \\<in> r\n  trans ?r =\n  (\\<forall>x y z.\n      (x, y) \\<in> ?r \\<longrightarrow>\n      (y, z) \\<in> ?r \\<longrightarrow> (x, z) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. (x, p) \\<in> r", "by metis"], ["proof (state)\nthis:\n  (x, p) \\<in> r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "have not_memp: \"p \\<notin> set_mset P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin># P", "using rely key"], ["proof (prove)\nusing this:\n  (y, p) \\<in> r\n  y \\<in># P\n  y \\<notin> r \\<down>m P\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. p \\<notin># P", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  (y, p) \\<in> r\n  y \\<in># P\n  y \\<notin> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r}\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. p \\<notin># P", "by auto"], ["proof (state)\nthis:\n  p \\<notin># P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "have memp: \"p \\<in> set_mset (P + {#p#})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in># P + {#p#}", "by auto"], ["proof (state)\nthis:\n  p \\<in># P + {#p#}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "have \"p \\<notin> dm r P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m P", "using ds_trans_contrapos[OF t] key(2) rely"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<notin> r \\<down>s ?S; (?x, ?y) \\<in> r\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> r \\<down>s ?S\n  y \\<notin> r \\<down>m P\n  (y, p) \\<in> r\n\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m P", "unfolding dm_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<notin> r \\<down>s ?S; (?x, ?y) \\<in> r\\<rbrakk>\n  \\<Longrightarrow> ?y \\<notin> r \\<down>s ?S\n  y \\<notin> r \\<down>s set_mset P\n  (y, p) \\<in> r\n\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>s set_mset P", "by auto"], ["proof (state)\nthis:\n  p \\<notin> r \\<down>m P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "hence \"p \\<notin> dm r (P + {#p#})\""], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m P\n\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m (P + {#p#})", "using not_mem_dm"], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m P\n  p \\<notin> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. p \\<notin> r \\<down>m (P + {#p#})", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  p \\<notin> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r}\n  p \\<notin> {y. \\<exists>x\\<in>#{#p#}. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. p \\<notin> {y. \\<exists>x\\<in>#P + {#p#}. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  p \\<notin> r \\<down>m (P + {#p#})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<in> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r\n 2. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m (P + {#p#})\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "using relp"], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m (P + {#p#})\n  (x, p) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "unfolding diff_def"], ["proof (prove)\nusing this:\n  p \\<notin> r \\<down>m (P + {#p#})\n  (x, p) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#{#x \\<in># add_mset p P.\n                     x \\<notin> r \\<down>m add_mset p P#}.\n       (x, y) \\<in> r", "by auto"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "case False"], ["proof (state)\nthis:\n  y \\<notin> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in># P; y \\<notin> r \\<down>m P; (x, y) \\<in> r;\n     y \\<notin> r \\<down>m {#p#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>#add_mset p P -s\nr \\<down>m add_mset p P.\n                         (x, y) \\<in> r", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<notin> r \\<down>m {#p#}\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "using key"], ["proof (prove)\nusing this:\n  y \\<notin> r \\<down>m {#p#}\n  y \\<in># P\n  y \\<notin> r \\<down>m P\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r", "unfolding dm_def ds_def diff_def"], ["proof (prove)\nusing this:\n  y \\<notin> {y. \\<exists>x\\<in>#{#p#}. (y, x) \\<in> r}\n  y \\<in># P\n  y \\<notin> {y. \\<exists>x\\<in>#P. (y, x) \\<in> r}\n  (x, y) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>#{#x \\<in># add_mset p P.\n                     x \\<notin> {y. \\<exists>x\\<in>#add_mset p P.\n (y, x) \\<in> r}#}.\n       (x, y) \\<in> r", "by auto"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y\\<in>#add_mset p P -s r \\<down>m add_mset p P. (x, y) \\<in> r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dm_subset: assumes i:\"irrefl r\" and t: \"trans r\"  shows \"dm r M \\<subseteq> dm r (M -s dm r M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m M \\<subseteq> r \\<down>m (M -s r \\<down>m M)", "using assms dm_max_elt"], ["proof (prove)\nusing this:\n  irrefl r\n  trans r\n  \\<lbrakk>irrefl ?r; trans ?r; ?x \\<in> ?r \\<down>m ?M\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y\\<in>#?M -s ?r \\<down>m ?M. (?x, y) \\<in> ?r\n\ngoal (1 subgoal):\n 1. r \\<down>m M \\<subseteq> r \\<down>m (M -s r \\<down>m M)", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  irrefl r\n  trans r\n  \\<lbrakk>irrefl ?r; trans ?r;\n   ?x \\<in> {y. \\<exists>x\\<in>#?M. (y, x) \\<in> ?r}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y\\<in>#?M -s\n                                    {y. \\<exists>x\\<in>#?M.\n     (y, x) \\<in> ?r}.\n                       (?x, y) \\<in> ?r\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>#M. (y, x) \\<in> r}\n    \\<subseteq> {y. \\<exists>x\\<in>#M -s\n                                    {y. \\<exists>x\\<in>#M. (y, x) \\<in> r}.\n                       (y, x) \\<in> r}", "by fast"], ["", "lemma dm_eq: assumes i:\"irrefl r\" and t: \"trans r\" shows \"dm r M = dm r (M -s dm r M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m M = r \\<down>m (M -s r \\<down>m M)", "using dm_subset[OF assms]"], ["proof (prove)\nusing this:\n  r \\<down>m ?M \\<subseteq> r \\<down>m (?M -s r \\<down>m ?M)\n\ngoal (1 subgoal):\n 1. r \\<down>m M = r \\<down>m (M -s r \\<down>m M)", "unfolding dm_def ds_def diff_def"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>#?M. (y, x) \\<in> r}\n  \\<subseteq> {y. \\<exists>x\\<in>#{#x \\<in># ?M.\n                                   x \\<notin> {y.\n         \\<exists>x\\<in>#?M. (y, x) \\<in> r}#}.\n                     (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>#M. (y, x) \\<in> r} =\n    {y. \\<exists>x\\<in>#{#x \\<in># M.\n                         x \\<notin> {y. \\<exists>x\\<in>#M.\n     (y, x) \\<in> r}#}.\n           (y, x) \\<in> r}", "by auto"], ["", "lemma lemma2_6_3: assumes t:\"trans r\" and i:\"irrefl r\" and \"(M,N) \\<in> mul_eq r\"\n shows \"\\<exists> I' J' K' . N = I' + J' \\<and> M = I' + K' \\<and> J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> dm r J'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  (M, N) \\<in> mul_eq r", "obtain I J K where 1:\"N = I + J\" and 2:\"M = I + K\"  and 3:\"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "have \"set_mset (J \\<inter># K) \\<subseteq> r \\<down>m J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (J \\<inter># K) \\<subseteq> r \\<down>m J", "using 3"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset (J \\<inter># K) \\<subseteq> r \\<down>m J", "by auto"], ["proof (state)\nthis:\n  set_mset (J \\<inter># K) \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "then"], ["proof (chain)\npicking this:\n  set_mset (J \\<inter># K) \\<subseteq> r \\<down>m J", "obtain A where \"r \\<down>m J = set_mset (J \\<inter># K) \\<union> A\""], ["proof (prove)\nusing this:\n  set_mset (J \\<inter># K) \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        r \\<down>m J = set_mset (J \\<inter># K) \\<union> A \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r \\<down>m J = set_mset (J \\<inter># K) \\<union> A\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "then"], ["proof (chain)\npicking this:\n  r \\<down>m J = set_mset (J \\<inter># K) \\<union> A", "have key: \"set_mset (J -s dm r J) \\<subseteq> set_mset (J - (J \\<inter># K))\""], ["proof (prove)\nusing this:\n  r \\<down>m J = set_mset (J \\<inter># K) \\<union> A\n\ngoal (1 subgoal):\n 1. set_mset (J -s r \\<down>m J) \\<subseteq> set_mset (J - J \\<inter># K)", "by clarsimp (metis Multiset.count_diff add.left_neutral add_diff_cancel_left' mem_Collect_eq not_gr0 set_mset_def)"], ["proof (state)\nthis:\n  set_mset (J -s r \\<down>m J) \\<subseteq> set_mset (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "from 1 2 3"], ["proof (chain)\npicking this:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J", "have \"N = (I + (J \\<inter># K)) + (J - (J \\<inter># K))\""], ["proof (prove)\nusing this:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. N = I + J \\<inter># K + (J - J \\<inter># K)", "by (metis diff_union_cancelL subset_mset.inf_le2 multiset_diff_union_assoc multiset_inter_commute union_commute union_lcomm)"], ["proof (state)\nthis:\n  N = I + J \\<inter># K + (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "moreover"], ["proof (state)\nthis:\n  N = I + J \\<inter># K + (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "have \"M = (I + (J \\<inter># K)) + (K - (J \\<inter># K))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = I + J \\<inter># K + (K - J \\<inter># K)", "by (metis diff_subset_eq_self diff_union_cancelL 2 multiset_diff_union_assoc multiset_inter_commute multiset_inter_def union_assoc)"], ["proof (state)\nthis:\n  M = I + J \\<inter># K + (K - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "moreover"], ["proof (state)\nthis:\n  M = I + J \\<inter># K + (K - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "have \"set_mset (K-(J\\<inter>#K)) \\<subseteq> dm r (J-(J\\<inter>#K))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "have \"set_mset (K-(J\\<inter>#K)) \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m J", "using 3"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m J", "by (meson Multiset.diff_subset_eq_self mset_subset_eqD subset_eq)"], ["proof (state)\nthis:\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "moreover"], ["proof (state)\nthis:\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "have \"... = dm r (J -s dm r J)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m J = r \\<down>m (J -s r \\<down>m J)", "using dm_eq[OF i t]"], ["proof (prove)\nusing this:\n  r \\<down>m ?M = r \\<down>m (?M -s r \\<down>m ?M)\n\ngoal (1 subgoal):\n 1. r \\<down>m J = r \\<down>m (J -s r \\<down>m J)", "by auto"], ["proof (state)\nthis:\n  r \\<down>m J = r \\<down>m (J -s r \\<down>m J)\n\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "moreover"], ["proof (state)\nthis:\n  r \\<down>m J = r \\<down>m (J -s r \\<down>m J)\n\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "have \"... \\<subseteq> dm r (J - (J \\<inter># K))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m (J -s r \\<down>m J)\n    \\<subseteq> r \\<down>m (J - J \\<inter># K)", "using ds_monotone[OF key]"], ["proof (prove)\nusing this:\n  ?r \\<down>s set_mset (J -s r \\<down>m J)\n  \\<subseteq> ?r \\<down>s set_mset (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. r \\<down>m (J -s r \\<down>m J)\n    \\<subseteq> r \\<down>m (J - J \\<inter># K)", "unfolding dm_def"], ["proof (prove)\nusing this:\n  ?r \\<down>s set_mset (J -s r \\<down>s set_mset J)\n  \\<subseteq> ?r \\<down>s set_mset (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. r \\<down>s set_mset (J -s r \\<down>s set_mset J)\n    \\<subseteq> r \\<down>s set_mset (J - J \\<inter># K)", "by auto"], ["proof (state)\nthis:\n  r \\<down>m (J -s r \\<down>m J) \\<subseteq> r \\<down>m (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "ultimately"], ["proof (chain)\npicking this:\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m J\n  r \\<down>m J = r \\<down>m (J -s r \\<down>m J)\n  r \\<down>m (J -s r \\<down>m J) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "show ?thesis"], ["proof (prove)\nusing this:\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m J\n  r \\<down>m J = r \\<down>m (J -s r \\<down>m J)\n  r \\<down>m (J -s r \\<down>m J) \\<subseteq> r \\<down>m (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)", "by auto"], ["proof (state)\nthis:\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "moreover"], ["proof (state)\nthis:\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "have \"(J-(J\\<inter>#K)) \\<inter># (K-(J\\<inter>#K)) = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (J - J \\<inter># K) \\<inter># (K - J \\<inter># K) = {#}", "by (rule multiset_eqI) auto"], ["proof (state)\nthis:\n  (J - J \\<inter># K) \\<inter># (K - J \\<inter># K) = {#}\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "ultimately"], ["proof (chain)\npicking this:\n  N = I + J \\<inter># K + (J - J \\<inter># K)\n  M = I + J \\<inter># K + (K - J \\<inter># K)\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)\n  (J - J \\<inter># K) \\<inter># (K - J \\<inter># K) = {#}", "show ?thesis"], ["proof (prove)\nusing this:\n  N = I + J \\<inter># K + (J - J \\<inter># K)\n  M = I + J \\<inter># K + (K - J \\<inter># K)\n  set_mset (K - J \\<inter># K) \\<subseteq> r \\<down>m (J - J \\<inter># K)\n  (J - J \\<inter># K) \\<inter># (K - J \\<inter># K) = {#}\n\ngoal (1 subgoal):\n 1. \\<exists>I' J' K'.\n       N = I' + J' \\<and>\n       M = I' + K' \\<and>\n       J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'", "by auto"], ["proof (state)\nthis:\n  \\<exists>I' J' K'.\n     N = I' + J' \\<and>\n     M = I' + K' \\<and>\n     J' \\<inter># K' = {#} \\<and> set_mset K' \\<subseteq> r \\<down>m J'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*  (* initial proof by Bertram Felgenhauer *)\nlemma lemma2_6_3_step:\nassumes t:\"trans r\" and i:\"irrefl r\" and P:\"set_mset K \\<subseteq> dm r J\" shows \"set_mset (K-(J\\<inter>#K)) \\<subseteq> dm r (J-(J\\<inter>#K))\" proof\n fix k assume K: \"k \\<in> set_mset (K - (J\\<inter>#K))\" show \"k \\<in> dm r (J - (J\\<inter>#K))\" proof -\n  have k: \"k \\<in># K\" using K by simp\n  have step: \"k \\<in> dm r (J-K)\" proof -\n   {\n   fix P have \"P \\<le> K \\<Longrightarrow> k \\<in> dm r (J-P)\" using k proof (induct P arbitrary:k rule:multiset_induct)\n    case empty thus ?case using P by auto\n   next\n    case (add Q q)\n    have h1: \"q \\<in># K\" and h2: \"Q \\<le> K\" using mset_subset_eq_insertD[OF add(2)] by auto\n    obtain j where mem1: \"j\\<in>set_mset (J - Q)\" and rel1: \"(k, j) \\<in> r\" using add(1)[OF h2 add(3)] unfolding dm_def ds_def by auto\n    show ?case proof (cases \"j \\<in># J - (Q + {#q#})\")\n     case True thus ?thesis using rel1 unfolding dm_def ds_def by force\n    next\n     case False hence eq: \"q = j\" using mem1 by (cases \"q = j\") auto\n     obtain j2 where mem2: \"j2\\<in>set_mset (J - Q)\" and rel2: \"(j, j2) \\<in> r\" using eq add(1)[OF h2 h1] unfolding dm_def ds_def by auto\n     have rel: \"(k,j2) \\<in> r\" using transD[OF assms(1) rel1 rel2] by auto\n     have \"j2 \\<noteq> q\" using rel2 eq i irrefl_def by fast\n     thus ?thesis using rel mem2 unfolding dm_def ds_def by (cases \"j2=k\") auto\n    qed\n   qed\n   }\n   thus ?thesis by auto\n  qed\n  have eq: \"J - K = J - (J \\<inter># K)\" by (rule multiset_eqI) auto\n  show ?thesis using step unfolding eq dm_def ds_def by auto\n qed\nqed\n\nlemma lemma2_6_3: assumes t: \"trans r\" and i: \"irrefl r\" and \"(M,N) \\<in> mul_eq r\"\nshows \"\\<exists> I J K. N = I + J \\<and> M = I + K \\<and> J\\<inter>#K = {#} \\<and> set_mset K \\<subseteq> dm r J\" proof -\n from assms(1,3)\n obtain I J K where f1:\"N = I + J\" and f2:\"M = I + K\" and f3:\"set_mset K \\<subseteq> dm r J\" unfolding mul_eq_def by fast\n hence \"N = (I + (J \\<inter># K)) + (J - (J \\<inter># K))\"\n  by (metis diff_union_cancelL inf_le2 multiset_diff_union_assoc multiset_inter_commute union_commute union_lcomm)\n moreover have \"M = (I + (J \\<inter># K)) + (K - (J \\<inter># K))\"\n  by (metis diff_le_self diff_union_cancelL f1 f2 f3 multiset_diff_union_assoc multiset_inter_commute multiset_inter_def union_assoc)\n moreover have \"(J-(J\\<inter>#K)) \\<inter># (K-(J\\<inter>#K)) = {#}\" by (rule multiset_eqI) auto\n ultimately show ?thesis using lemma2_6_3_step[OF t i f3] by auto\nqed\n*)"], ["", "text \\<open>Lemma 2.6.4\\<close>"], ["", "lemma lemma2_6_4: assumes t: \"trans r\" and \"N \\<noteq> {#}\" and \"set_mset M \\<subseteq> dm r N\" shows \"(M,N) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul r", "have \"M = {#} + M\" and \"N = {#} + N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = {#} + M &&& N = {#} + N", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  N \\<noteq> {#}\n  set_mset M \\<subseteq> r \\<down>m N\n\ngoal (1 subgoal):\n 1. M = {#} + M &&& N = {#} + N", "by auto"], ["proof (state)\nthis:\n  M = {#} + M\n  N = {#} + N\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = {#} + M\n  N = {#} + N\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul r", "using assms(2,3)"], ["proof (prove)\nusing this:\n  M = {#} + M\n  N = {#} + N\n  N \\<noteq> {#}\n  set_mset M \\<subseteq> r \\<down>m N\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul r", "unfolding mul_def"], ["proof (prove)\nusing this:\n  M = {#} + M\n  N = {#} + N\n  N \\<noteq> {#}\n  set_mset M \\<subseteq> r \\<down>m N\n\ngoal (1 subgoal):\n 1. (M, N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}", "by fast"], ["proof (state)\nthis:\n  (M, N) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma2_6_5_a: assumes t: \"trans r\" and \"ds r S \\<subseteq> S\" and \"(M,N) \\<in> mul_eq r\"\nshows \"(M -s S, N -s S) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M -s S, N -s S) \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M -s S, N -s S) \\<in> mul_eq r", "from assms(1,3)"], ["proof (chain)\npicking this:\n  trans r\n  (M, N) \\<in> mul_eq r", "obtain I J K where a: \"N=I+J\" and b:\"M=I+K\" and c:\"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  trans r\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by best"], ["proof (state)\nthis:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M -s S, N -s S) \\<in> mul_eq r", "from a b"], ["proof (chain)\npicking this:\n  N = I + J\n  M = I + K", "have \"M -s S = I -s S + K -s S\"\n   \"N -s S = I -s S + J -s S\""], ["proof (prove)\nusing this:\n  N = I + J\n  M = I + K\n\ngoal (1 subgoal):\n 1. M -s S = I -s S + K -s S &&& N -s S = I -s S + J -s S", "by (auto simp add: lemmaA_3_8)"], ["proof (state)\nthis:\n  M -s S = I -s S + K -s S\n  N -s S = I -s S + J -s S\n\ngoal (1 subgoal):\n 1. (M -s S, N -s S) \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  M -s S = I -s S + K -s S\n  N -s S = I -s S + J -s S\n\ngoal (1 subgoal):\n 1. (M -s S, N -s S) \\<in> mul_eq r", "have \"set_mset (K-sS) \\<subseteq> dm r (J-sS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "have \"set_mset (K-sS) \\<subseteq> set_mset (K-s (ds r S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> set_mset (K -s r \\<down>s S)", "using assms(2)"], ["proof (prove)\nusing this:\n  r \\<down>s S \\<subseteq> S\n\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> set_mset (K -s r \\<down>s S)", "unfolding diff_def"], ["proof (prove)\nusing this:\n  r \\<down>s S \\<subseteq> S\n\ngoal (1 subgoal):\n 1. set_mset {#x \\<in># K. x \\<notin> S#}\n    \\<subseteq> set_mset {#x \\<in># K. x \\<notin> r \\<down>s S#}", "by auto"], ["proof (state)\nthis:\n  set_mset (K -s S) \\<subseteq> set_mset (K -s r \\<down>s S)\n\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "moreover"], ["proof (state)\nthis:\n  set_mset (K -s S) \\<subseteq> set_mset (K -s r \\<down>s S)\n\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "have \"set_mset(K-s (ds r S)) \\<subseteq> (dm r J) - (ds r S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (K -s r \\<down>s S) \\<subseteq> r \\<down>m J - r \\<down>s S", "using c"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset (K -s r \\<down>s S) \\<subseteq> r \\<down>m J - r \\<down>s S", "unfolding diff_def"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset {#x \\<in># K. x \\<notin> r \\<down>s S#}\n    \\<subseteq> r \\<down>m J - r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset (K -s r \\<down>s S) \\<subseteq> r \\<down>m J - r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "moreover"], ["proof (state)\nthis:\n  set_mset (K -s r \\<down>s S) \\<subseteq> r \\<down>m J - r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "have \"(dm r J) - (ds r S) \\<subseteq> dm r (J -s S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m J - r \\<down>s S \\<subseteq> r \\<down>m (J -s S)", "using lemma2_6_1_diff"], ["proof (prove)\nusing this:\n  ?r \\<down>m ?M - ?r \\<down>s ?S \\<subseteq> ?r \\<down>m (?M -s ?S)\n\ngoal (1 subgoal):\n 1. r \\<down>m J - r \\<down>s S \\<subseteq> r \\<down>m (J -s S)", "by fast"], ["proof (state)\nthis:\n  r \\<down>m J - r \\<down>s S \\<subseteq> r \\<down>m (J -s S)\n\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "ultimately"], ["proof (chain)\npicking this:\n  set_mset (K -s S) \\<subseteq> set_mset (K -s r \\<down>s S)\n  set_mset (K -s r \\<down>s S) \\<subseteq> r \\<down>m J - r \\<down>s S\n  r \\<down>m J - r \\<down>s S \\<subseteq> r \\<down>m (J -s S)", "show ?thesis"], ["proof (prove)\nusing this:\n  set_mset (K -s S) \\<subseteq> set_mset (K -s r \\<down>s S)\n  set_mset (K -s r \\<down>s S) \\<subseteq> r \\<down>m J - r \\<down>s S\n  r \\<down>m J - r \\<down>s S \\<subseteq> r \\<down>m (J -s S)\n\ngoal (1 subgoal):\n 1. set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "by auto"], ["proof (state)\nthis:\n  set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)\n\ngoal (1 subgoal):\n 1. (M -s S, N -s S) \\<in> mul_eq r", "ultimately"], ["proof (chain)\npicking this:\n  M -s S = I -s S + K -s S\n  N -s S = I -s S + J -s S\n  set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)", "show ?thesis"], ["proof (prove)\nusing this:\n  M -s S = I -s S + K -s S\n  N -s S = I -s S + J -s S\n  set_mset (K -s S) \\<subseteq> r \\<down>m (J -s S)\n\ngoal (1 subgoal):\n 1. (M -s S, N -s S) \\<in> mul_eq r", "by (rule in_mul_eqI)"], ["proof (state)\nthis:\n  (M -s S, N -s S) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma2_6_5_a': assumes t:\"trans r\" and \"(M,N) \\<in> mul_eq r\" shows \"(M -s ds r S, N -s ds r S) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M -s r \\<down>s S, N -s r \\<down>s S) \\<in> mul_eq r", "using assms lemma2_6_5_a[OF t] ds_ds_subseteq_ds[OF t]"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> mul_eq r\n  \\<lbrakk>r \\<down>s ?S \\<subseteq> ?S; (?M, ?N) \\<in> mul_eq r\\<rbrakk>\n  \\<Longrightarrow> (?M -s ?S, ?N -s ?S) \\<in> mul_eq r\n  r \\<down>s (r \\<down>s ?S) \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. (M -s r \\<down>s S, N -s r \\<down>s S) \\<in> mul_eq r", "by auto"], ["", "text \\<open>Lemma 2.6.6\\<close>"], ["", "lemma lemma2_6_6_a: assumes t: \"trans r\" and \"(M,N) \\<in> mul_eq r\" shows \"(Q + M,Q + N) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul_eq r", "obtain I J K where A:\"Q+N=(Q+I)+J\" and B:\"Q+M=(Q+I)+K\" and C:\"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>Q + N = Q + I + J; Q + M = Q + I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>Q + N = Q + I + J; Q + M = Q + I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>Q + N = Q + I + J; Q + M = Q + I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul_eq r", "using C"], ["proof (prove)\nusing this:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n  set_mset K \\<subseteq> r \\<down>m J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n  set_mset K \\<subseteq> r \\<down>m J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by blast"], ["proof (state)\nthis:\n  (Q + M, Q + N) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_left_one:\n assumes  \"\\<exists> I J K. add_mset q N = I + J \\<and> add_mset q  M = I + K \\<and> (J\\<inter>#K={#}) \\<and> set_mset K \\<subseteq> dm r J\"\n shows \"\\<exists> I2 J K. N = I2 + J \\<and> M = I2 + K \\<and> set_mset K \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>I J K.\n     add_mset q N = I + J \\<and>\n     add_mset q M = I + K \\<and>\n     J \\<inter># K = {#} \\<and> set_mset K \\<subseteq> r \\<down>m J", "obtain I J K where A: \"{#q#} + N = I + J\" and B:\"{#q#} + M = I + K\"\n  and C:\"(J \\<inter># K = {#})\" and D:\"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  \\<exists>I J K.\n     add_mset q N = I + J \\<and>\n     add_mset q M = I + K \\<and>\n     J \\<inter># K = {#} \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>{#q#} + N = I + J; {#q#} + M = I + K; J \\<inter># K = {#};\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  {#q#} + N = I + J\n  {#q#} + M = I + K\n  J \\<inter># K = {#}\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "have \"q\\<in>#I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in># I", "proof (cases \"q \\<in># I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q \\<in># I \\<Longrightarrow> q \\<in># I\n 2. q \\<notin># I \\<Longrightarrow> q \\<in># I", "case True"], ["proof (state)\nthis:\n  q \\<in># I\n\ngoal (2 subgoals):\n 1. q \\<in># I \\<Longrightarrow> q \\<in># I\n 2. q \\<notin># I \\<Longrightarrow> q \\<in># I", "thus ?thesis"], ["proof (prove)\nusing this:\n  q \\<in># I\n\ngoal (1 subgoal):\n 1. q \\<in># I", "by auto"], ["proof (state)\nthis:\n  q \\<in># I\n\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "case False"], ["proof (state)\nthis:\n  q \\<notin># I\n\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "have \"q \\<in># J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in># J", "using False A"], ["proof (prove)\nusing this:\n  q \\<notin># I\n  {#q#} + N = I + J\n\ngoal (1 subgoal):\n 1. q \\<in># J", "by (metis UnE multi_member_this set_mset_union)"], ["proof (state)\nthis:\n  q \\<in># J\n\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "moreover"], ["proof (state)\nthis:\n  q \\<in># J\n\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "have \"q \\<in># K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in># K", "using False B"], ["proof (prove)\nusing this:\n  q \\<notin># I\n  {#q#} + M = I + K\n\ngoal (1 subgoal):\n 1. q \\<in># K", "by (metis UnE multi_member_this set_mset_union)"], ["proof (state)\nthis:\n  q \\<in># K\n\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "moreover"], ["proof (state)\nthis:\n  q \\<in># K\n\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "have \"\\<not> q \\<in># (J \\<inter># K)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<notin># J \\<inter># K", "using C"], ["proof (prove)\nusing this:\n  J \\<inter># K = {#}\n\ngoal (1 subgoal):\n 1. q \\<notin># J \\<inter># K", "by auto"], ["proof (state)\nthis:\n  q \\<notin># J \\<inter># K\n\ngoal (1 subgoal):\n 1. q \\<notin># I \\<Longrightarrow> q \\<in># I", "ultimately"], ["proof (chain)\npicking this:\n  q \\<in># J\n  q \\<in># K\n  q \\<notin># J \\<inter># K", "show ?thesis"], ["proof (prove)\nusing this:\n  q \\<in># J\n  q \\<in># K\n  q \\<notin># J \\<inter># K\n\ngoal (1 subgoal):\n 1. q \\<in># I", "by auto"], ["proof (state)\nthis:\n  q \\<in># I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q \\<in># I\n\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "hence \"\\<exists> I2. I = add_mset q I2\""], ["proof (prove)\nusing this:\n  q \\<in># I\n\ngoal (1 subgoal):\n 1. \\<exists>I2. I = add_mset q I2", "by (metis multi_member_split union_commute)"], ["proof (state)\nthis:\n  \\<exists>I2. I = add_mset q I2\n\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "hence \"\\<exists> I2. add_mset q N = (add_mset q I2) + J \\<and> add_mset q M = (add_mset q I2) + K\""], ["proof (prove)\nusing this:\n  \\<exists>I2. I = add_mset q I2\n\ngoal (1 subgoal):\n 1. \\<exists>I2.\n       add_mset q N = add_mset q I2 + J \\<and>\n       add_mset q M = add_mset q I2 + K", "using A B"], ["proof (prove)\nusing this:\n  \\<exists>I2. I = add_mset q I2\n  {#q#} + N = I + J\n  {#q#} + M = I + K\n\ngoal (1 subgoal):\n 1. \\<exists>I2.\n       add_mset q N = add_mset q I2 + J \\<and>\n       add_mset q M = add_mset q I2 + K", "by auto"], ["proof (state)\nthis:\n  \\<exists>I2.\n     add_mset q N = add_mset q I2 + J \\<and>\n     add_mset q M = add_mset q I2 + K\n\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>I2.\n     add_mset q N = add_mset q I2 + J \\<and>\n     add_mset q M = add_mset q I2 + K\n\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "using D"], ["proof (prove)\nusing this:\n  \\<exists>I2.\n     add_mset q N = add_mset q I2 + J \\<and>\n     add_mset q M = add_mset q I2 + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. \\<exists>I2 J K.\n       N = I2 + J \\<and>\n       M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J", "by auto"], ["proof (state)\nthis:\n  \\<exists>I2 J K.\n     N = I2 + J \\<and> M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma2_6_6_b_one :\nassumes \"trans r\" and \"irrefl r\" and \"(add_mset q M, add_mset q N) \\<in> mul_eq r\" shows \"(M,N) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "using add_left_one[OF lemma2_6_3[OF assms]]"], ["proof (prove)\nusing this:\n  \\<exists>I2 J K.\n     N = I2 + J \\<and> M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  \\<exists>I2 J K.\n     N = I2 + J \\<and> M = I2 + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (M, N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by auto"], ["", "lemma lemma2_6_6_b' : assumes \"trans r\" and i: \"irrefl r\" and \"(Q + M, Q + N) \\<in> mul_eq r\"\n shows \"(M,N) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "using assms(3)"], ["proof (prove)\nusing this:\n  (Q + M, Q + N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "proof (induct Q arbitrary: M N)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N.\n       ({#} + M, {#} + N) \\<in> mul_eq r \\<Longrightarrow>\n       (M, N) \\<in> mul_eq r\n 2. \\<And>x Q M N.\n       \\<lbrakk>\\<And>M N.\n                   (Q + M, Q + N) \\<in> mul_eq r \\<Longrightarrow>\n                   (M, N) \\<in> mul_eq r;\n        (add_mset x Q + M, add_mset x Q + N) \\<in> mul_eq r\\<rbrakk>\n       \\<Longrightarrow> (M, N) \\<in> mul_eq r", "case empty"], ["proof (state)\nthis:\n  ({#} + M, {#} + N) \\<in> mul_eq r\n\ngoal (2 subgoals):\n 1. \\<And>M N.\n       ({#} + M, {#} + N) \\<in> mul_eq r \\<Longrightarrow>\n       (M, N) \\<in> mul_eq r\n 2. \\<And>x Q M N.\n       \\<lbrakk>\\<And>M N.\n                   (Q + M, Q + N) \\<in> mul_eq r \\<Longrightarrow>\n                   (M, N) \\<in> mul_eq r;\n        (add_mset x Q + M, add_mset x Q + N) \\<in> mul_eq r\\<rbrakk>\n       \\<Longrightarrow> (M, N) \\<in> mul_eq r", "thus ?case"], ["proof (prove)\nusing this:\n  ({#} + M, {#} + N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<And>x Q M N.\n       \\<lbrakk>\\<And>M N.\n                   (Q + M, Q + N) \\<in> mul_eq r \\<Longrightarrow>\n                   (M, N) \\<in> mul_eq r;\n        (add_mset x Q + M, add_mset x Q + N) \\<in> mul_eq r\\<rbrakk>\n       \\<Longrightarrow> (M, N) \\<in> mul_eq r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Q M N.\n       \\<lbrakk>\\<And>M N.\n                   (Q + M, Q + N) \\<in> mul_eq r \\<Longrightarrow>\n                   (M, N) \\<in> mul_eq r;\n        (add_mset x Q + M, add_mset x Q + N) \\<in> mul_eq r\\<rbrakk>\n       \\<Longrightarrow> (M, N) \\<in> mul_eq r", "case (add q Q)"], ["proof (state)\nthis:\n  (Q + ?M, Q + ?N) \\<in> mul_eq r \\<Longrightarrow> (?M, ?N) \\<in> mul_eq r\n  (add_mset q Q + M, add_mset q Q + N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<And>x Q M N.\n       \\<lbrakk>\\<And>M N.\n                   (Q + M, Q + N) \\<in> mul_eq r \\<Longrightarrow>\n                   (M, N) \\<in> mul_eq r;\n        (add_mset x Q + M, add_mset x Q + N) \\<in> mul_eq r\\<rbrakk>\n       \\<Longrightarrow> (M, N) \\<in> mul_eq r", "thus ?case"], ["proof (prove)\nusing this:\n  (Q + ?M, Q + ?N) \\<in> mul_eq r \\<Longrightarrow> (?M, ?N) \\<in> mul_eq r\n  (add_mset q Q + M, add_mset q Q + N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "unfolding union_assoc"], ["proof (prove)\nusing this:\n  (Q + ?M, Q + ?N) \\<in> mul_eq r \\<Longrightarrow> (?M, ?N) \\<in> mul_eq r\n  (add_mset q Q + M, add_mset q Q + N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "using lemma2_6_6_b_one[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  (Q + ?M, Q + ?N) \\<in> mul_eq r \\<Longrightarrow> (?M, ?N) \\<in> mul_eq r\n  (add_mset q Q + M, add_mset q Q + N) \\<in> mul_eq r\n  (add_mset ?q ?M, add_mset ?q ?N) \\<in> mul_eq r \\<Longrightarrow>\n  (?M, ?N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> mul_eq r", "by (metis union_mset_add_mset_left)"], ["proof (state)\nthis:\n  (M, N) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma2_6_9: assumes t: \"trans r\" and \"(M,N) \\<in> mul r\" shows \"(Q+M,Q+N) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul r", "obtain I J K where F1:\"N = I + J\" and F2:\"M = I + K\"and F3:\"set_mset K \\<subseteq> dm r J\" and F4:\"J \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K; set_mset K \\<subseteq> r \\<down>m J;\n         J \\<noteq> {#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K; set_mset K \\<subseteq> r \\<down>m J;\n         J \\<noteq> {#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_def"], ["proof (prove)\nusing this:\n  trans r\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and>\n            set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K; set_mset K \\<subseteq> r \\<down>m J;\n         J \\<noteq> {#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul r", "have \"Q+N=Q+I+J\" and \"Q+M=Q+I+K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q + N = Q + I + J &&& Q + M = Q + I + K", "by (auto simp: F1 F2 union_commute union_lcomm)"], ["proof (state)\nthis:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul r", "thus ?thesis"], ["proof (prove)\nusing this:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul r", "using assms(1) F3 F4"], ["proof (prove)\nusing this:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n  trans r\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N) \\<in> mul r", "unfolding mul_def"], ["proof (prove)\nusing this:\n  Q + N = Q + I + J\n  Q + M = Q + I + K\n  trans r\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (Q + M, Q + N)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}", "by blast"], ["proof (state)\nthis:\n  (Q + M, Q + N) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 2.6.7\\<close>"], ["", "lemma lemma2_6_7_a: assumes t: \"trans r\" and \"set_mset Q \\<subseteq> dm r N - dm r M\" and \"(M,N) \\<in> mul_eq r\"\nshows \"(Q+M,N) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Q + M, N) \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Q + M, N) \\<in> mul_eq r", "obtain I J K where A: \"N=I+J\" and B:\"M=I+K\" and C:\"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  set_mset Q \\<subseteq> r \\<down>m N - r \\<down>m M\n  (M, N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  trans r\n  set_mset Q \\<subseteq> r \\<down>m N - r \\<down>m M\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        \\<lbrakk>N = I + J; M = I + K;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (Q + M, N) \\<in> mul_eq r", "hence \"set_mset(Q+K) \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset (Q + K) \\<subseteq> r \\<down>m J", "using assms lemma2_6_1_diff"], ["proof (prove)\nusing this:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n  trans r\n  set_mset Q \\<subseteq> r \\<down>m N - r \\<down>m M\n  (M, N) \\<in> mul_eq r\n  ?r \\<down>m ?M - ?r \\<down>s ?S \\<subseteq> ?r \\<down>m (?M -s ?S)\n\ngoal (1 subgoal):\n 1. set_mset (Q + K) \\<subseteq> r \\<down>m J", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> {y. \\<exists>x\\<in>#J. (y, x) \\<in> r}\n  trans r\n  set_mset Q\n  \\<subseteq> {y. \\<exists>x\\<in>#N. (y, x) \\<in> r} -\n              {y. \\<exists>x\\<in>#M. (y, x) \\<in> r}\n  (M, N) \\<in> mul_eq r\n  {y. \\<exists>x\\<in>#?M. (y, x) \\<in> ?r} -\n  {y. \\<exists>x\\<in>?S. (y, x) \\<in> ?r}\n  \\<subseteq> {y. \\<exists>x\\<in>#?M -s ?S. (y, x) \\<in> ?r}\n\ngoal (1 subgoal):\n 1. set_mset (Q + K) \\<subseteq> {y. \\<exists>x\\<in>#J. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  set_mset (Q + K) \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (Q + M, N) \\<in> mul_eq r", "hence \"(I+(Q+K),I+J) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  set_mset (Q + K) \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (I + (Q + K), I + J) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  set_mset (Q + K) \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. (I + (Q + K), I + J)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by fast"], ["proof (state)\nthis:\n  (I + (Q + K), I + J) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (Q + M, N) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  (I + (Q + K), I + J) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (Q + M, N) \\<in> mul_eq r", "using A B C union_assoc union_commute"], ["proof (prove)\nusing this:\n  (I + (Q + K), I + J) \\<in> mul_eq r\n  N = I + J\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n  ?M + ?N + ?K = ?M + (?N + ?K)\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (Q + M, N) \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (Q + M, N) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>missing?; similar to lemma\\_2.6.2?\\<close>"], ["", "lemma lemma2_6_8: assumes t: \"trans r\" and \"S \\<subseteq> T\" shows \"(M -s T,M -s S) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M -s T, M -s S) \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M -s T, M -s S) \\<in> mul_eq r", "from assms(2)"], ["proof (chain)\npicking this:\n  S \\<subseteq> T", "have \"(M -s T) \\<subseteq># (M -s S)\""], ["proof (prove)\nusing this:\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. M -s T \\<subseteq># M -s S", "by (metis Un_absorb2 Un_commute lemmaA_3_10 lemmaA_3_9 mset_subset_eq_add_right)"], ["proof (state)\nthis:\n  M -s T \\<subseteq># M -s S\n\ngoal (1 subgoal):\n 1. (M -s T, M -s S) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M -s T \\<subseteq># M -s S\n\ngoal (1 subgoal):\n 1. (M -s T, M -s S) \\<in> mul_eq r", "using lemma2_6_2_a[OF t]"], ["proof (prove)\nusing this:\n  M -s T \\<subseteq># M -s S\n  ?M \\<subseteq># ?N \\<Longrightarrow> (?M, ?N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M -s T, M -s S) \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (M -s T, M -s S) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Lexicographic maximum measure\\<close>"], ["", "text \\<open>Def 3.1: lexicographic maximum measure\\<close>"], ["", "fun lexmax :: \"'a rel \\<Rightarrow> 'a list \\<Rightarrow> 'a multiset\" where\n   \"lexmax r [] = {#}\"\n | \"lexmax r (\\<alpha>#\\<sigma>) =  {#\\<alpha>#} + (lexmax r \\<sigma> -s ds r {\\<alpha>})\""], ["", "notation\n lexmax (\"_|_|\" [1000] 1000)"], ["", "lemma lexmax_singleton: \"r|[\\<alpha>]| = {#\\<alpha>#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|[\\<alpha>]| = {#\\<alpha>#}", "unfolding lexmax.simps diff_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#\\<alpha>#} + {#x \\<in># {#}. x \\<notin> r \\<down>s {\\<alpha>}#} =\n    {#\\<alpha>#}", "by simp"], ["", "text \\<open>Lemma 3.2\\<close>"], ["", "text \\<open>Lemma 3.2(1)\\<close>"], ["", "lemma lemma3_2_1: assumes t: \"trans r\" shows \"r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma>", "proof (induct \\<sigma>)"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<down>m r|[]| = r \\<down>l []\n 2. \\<And>a \\<sigma>.\n       r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma> \\<Longrightarrow>\n       r \\<down>m r|a # \\<sigma>| = r \\<down>l (a # \\<sigma>)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. r \\<down>m r|[]| = r \\<down>l []\n 2. \\<And>a \\<sigma>.\n       r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma> \\<Longrightarrow>\n       r \\<down>m r|a # \\<sigma>| = r \\<down>l (a # \\<sigma>)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m r|[]| = r \\<down>l []", "unfolding dm_def dl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s set_mset r|[]| = r \\<down>s set []", "by auto"], ["proof (state)\nthis:\n  r \\<down>m r|[]| = r \\<down>l []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma> \\<Longrightarrow>\n       r \\<down>m r|a # \\<sigma>| = r \\<down>l (a # \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma> \\<Longrightarrow>\n       r \\<down>m r|a # \\<sigma>| = r \\<down>l (a # \\<sigma>)", "case (Cons \\<alpha> \\<sigma>)"], ["proof (state)\nthis:\n  r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma> \\<Longrightarrow>\n       r \\<down>m r|a # \\<sigma>| = r \\<down>l (a # \\<sigma>)", "have \"dm r {#\\<alpha>#} \\<union> dm r (r|\\<sigma>| -s ds r {\\<alpha>}) = dm r {#\\<alpha>#} \\<union> dl r \\<sigma>\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union>\n    r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n    r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union>\n    r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n    r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>", "have \"?L \\<subseteq> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union>\n    r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n    \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>", "unfolding Cons[symmetric] diff_def dm_def ds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>#{#\\<alpha>#}. (y, x) \\<in> r} \\<union>\n    {y. \\<exists>x\\<in>#{#x \\<in># r|\\<sigma>|.\n                         x \\<notin> {y. \\<exists>x\\<in>{\\<alpha>}.\n     (y, x) \\<in> r}#}.\n           (y, x) \\<in> r}\n    \\<subseteq> {y. \\<exists>x\\<in>#{#\\<alpha>#}. (y, x) \\<in> r} \\<union>\n                {y. \\<exists>x\\<in>#r|\\<sigma>|. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  r \\<down>m {#\\<alpha>#} \\<union>\n  r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n  \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union>\n    r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n    r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>", "moreover"], ["proof (state)\nthis:\n  r \\<down>m {#\\<alpha>#} \\<union>\n  r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n  \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union>\n    r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n    r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>", "have \"?R \\<subseteq> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n    \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union>\n                r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n               r \\<down>l \\<sigma> \\<Longrightarrow>\n       x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n               r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n               r \\<down>l \\<sigma> \\<Longrightarrow>\n       x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n               r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "assume A: \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n               r \\<down>l \\<sigma> \\<Longrightarrow>\n       x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n               r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "show \"x \\<in> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "proof (cases \"x \\<in> dm r {#\\<alpha>#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n 2. x \\<notin> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "case True"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m {#\\<alpha>#}\n\ngoal (2 subgoals):\n 1. x \\<in> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n 2. x \\<notin> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "by auto"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n          r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "case False"], ["proof (state)\nthis:\n  x \\<notin> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "hence mem: \"x \\<in> dm r (lexmax r \\<sigma>)\""], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m r|\\<sigma>|", "using A Cons"], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>m {#\\<alpha>#}\n  x \\<in> r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n  r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m r|\\<sigma>|", "by auto"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "have \"x \\<notin> (ds r (ds r {\\<alpha>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>s (r \\<down>s {\\<alpha>})", "using False ds_ds_subseteq_ds[OF t]"], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>m {#\\<alpha>#}\n  r \\<down>s (r \\<down>s ?S) \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>s (r \\<down>s {\\<alpha>})", "unfolding dm_def"], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>s set_mset {#\\<alpha>#}\n  r \\<down>s (r \\<down>s ?S) \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>s (r \\<down>s {\\<alpha>})", "by auto"], ["proof (state)\nthis:\n  x \\<notin> r \\<down>s (r \\<down>s {\\<alpha>})\n\ngoal (1 subgoal):\n 1. x \\<notin> r \\<down>m {#\\<alpha>#} \\<Longrightarrow>\n    x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>s (r \\<down>s {\\<alpha>})\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "using mem lemma2_6_1_diff"], ["proof (prove)\nusing this:\n  x \\<notin> r \\<down>s (r \\<down>s {\\<alpha>})\n  x \\<in> r \\<down>m r|\\<sigma>|\n  ?r \\<down>m ?M - ?r \\<down>s ?S \\<subseteq> ?r \\<down>m (?M -s ?S)\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n            r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "by fast"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n          r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> r \\<down>m {#\\<alpha>#} \\<union>\n          r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n  \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union>\n              r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union>\n    r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n    r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>", "ultimately"], ["proof (chain)\npicking this:\n  r \\<down>m {#\\<alpha>#} \\<union>\n  r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n  \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n  r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n  \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union>\n              r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<down>m {#\\<alpha>#} \\<union>\n  r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n  \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n  r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n  \\<subseteq> r \\<down>m {#\\<alpha>#} \\<union>\n              r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>})\n\ngoal (1 subgoal):\n 1. r \\<down>m {#\\<alpha>#} \\<union>\n    r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n    r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>", "by auto"], ["proof (state)\nthis:\n  r \\<down>m {#\\<alpha>#} \\<union>\n  r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n  r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<down>m {#\\<alpha>#} \\<union>\n  r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n  r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r \\<down>m r|\\<sigma>| = r \\<down>l \\<sigma> \\<Longrightarrow>\n       r \\<down>m r|a # \\<sigma>| = r \\<down>l (a # \\<sigma>)", "thus ?case"], ["proof (prove)\nusing this:\n  r \\<down>m {#\\<alpha>#} \\<union>\n  r \\<down>m (r|\\<sigma>| -s r \\<down>s {\\<alpha>}) =\n  r \\<down>m {#\\<alpha>#} \\<union> r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. r \\<down>m r|\\<alpha> # \\<sigma>| = r \\<down>l (\\<alpha> # \\<sigma>)", "unfolding lemma2_6_1_multiset lexmax.simps dl_def dm_def ds_def"], ["proof (prove)\nusing this:\n  {y. \\<exists>x\\<in>#{#\\<alpha>#}. (y, x) \\<in> r} \\<union>\n  {y. \\<exists>x\\<in>#r|\\<sigma>| -s\n                      {y. \\<exists>x\\<in>{\\<alpha>}. (y, x) \\<in> r}.\n         (y, x) \\<in> r} =\n  {y. \\<exists>x\\<in>#{#\\<alpha>#}. (y, x) \\<in> r} \\<union>\n  {y. \\<exists>x\\<in>set \\<sigma>. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>#{#\\<alpha>#} +\n                        r|\\<sigma>| -s\n                        {y. \\<exists>x\\<in>{\\<alpha>}. (y, x) \\<in> r}.\n           (y, x) \\<in> r} =\n    {y. \\<exists>x\\<in>set (\\<alpha> # \\<sigma>). (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  r \\<down>m r|\\<alpha> # \\<sigma>| = r \\<down>l (\\<alpha> # \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.2(2)\\<close>"], ["", "lemma lemma3_2_2: \"r|\\<sigma>@\\<tau>| = r|\\<sigma>| + (r|\\<tau>| -s r \\<down>l \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma> @ \\<tau>| = r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>", "proof(induct \\<sigma>)"], ["proof (state)\ngoal (2 subgoals):\n 1. r|[] @ \\<tau>| = r|[]| + r|\\<tau>| -s r \\<down>l []\n 2. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. r|[] @ \\<tau>| = r|[]| + r|\\<tau>| -s r \\<down>l []\n 2. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|[] @ \\<tau>| = r|[]| + r|\\<tau>| -s r \\<down>l []", "unfolding dl_def ds_def lexmax.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|[] @ \\<tau>| =\n    {#} + r|\\<tau>| -s {y. \\<exists>x\\<in>set []. (y, x) \\<in> r}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau>| = r|\\<tau>| -s {}", "unfolding diff_empty"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau>| = r|\\<tau>|", "by auto"], ["proof (state)\nthis:\n  r|[] @ \\<tau>| = r|[]| + r|\\<tau>| -s r \\<down>l []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "case (Cons \\<alpha> \\<sigma>)"], ["proof (state)\nthis:\n  r|\\<sigma> @ \\<tau>| = r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "have \"lexmax r (\\<alpha>#\\<sigma>@\\<tau>) = {#\\<alpha>#} + ((lexmax r (\\<sigma>@\\<tau>)) -s (ds r {\\<alpha>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<alpha> # \\<sigma> @ \\<tau>| =\n    {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>}", "by auto"], ["proof (state)\nthis:\n  r|\\<alpha> # \\<sigma> @ \\<tau>| =\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  r|\\<alpha> # \\<sigma> @ \\<tau>| =\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "have \"\\<dots> = {#\\<alpha>#} + ((lexmax r \\<sigma> + ((lexmax r \\<tau>) -s (dl r \\<sigma>))) -s (ds r {\\<alpha>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>} =\n    {#\\<alpha>#} +\n    (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s\n    r \\<down>s {\\<alpha>}", "using Cons"], ["proof (prove)\nusing this:\n  r|\\<sigma> @ \\<tau>| = r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>\n\ngoal (1 subgoal):\n 1. {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>} =\n    {#\\<alpha>#} +\n    (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s\n    r \\<down>s {\\<alpha>}", "by auto"], ["proof (state)\nthis:\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "have \"\\<dots> = {#\\<alpha>#} + ((lexmax r \\<sigma>) -s (ds r {\\<alpha>})) + (((lexmax r \\<tau>) -s (dl r \\<sigma>)) -s (ds r {\\<alpha>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#\\<alpha>#} +\n    (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s\n    r \\<down>s {\\<alpha>} =\n    {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n    r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}", "unfolding lemmaA_3_8"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#\\<alpha>#} +\n    (r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n     r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}) =\n    {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n    r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}", "unfolding union_assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#\\<alpha>#} +\n    (r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n     r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}) =\n    {#\\<alpha>#} +\n    (r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n     r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>})", "by auto"], ["proof (state)\nthis:\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s\n  r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s\n  r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "have \"\\<dots> = lexmax r (\\<alpha>#\\<sigma>) + (((lexmax r \\<tau>) -s (dl r \\<sigma>)) -s (ds r {\\<alpha>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n    r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n    r|\\<alpha> # \\<sigma>| +\n    r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}", "by simp"], ["proof (state)\nthis:\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n  r|\\<alpha> # \\<sigma>| +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n  r|\\<alpha> # \\<sigma>| +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "have \"\\<dots> = lexmax r (\\<alpha>#\\<sigma>) + ((lexmax r \\<tau>) -s (dl r (\\<alpha>#\\<sigma>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<alpha> # \\<sigma>| +\n    r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n    r|\\<alpha> # \\<sigma>| + r|\\<tau>| -s r \\<down>l (\\<alpha> # \\<sigma>)", "unfolding lemmaA_3_9 dl_def dm_def lemma2_6_1_set[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<alpha> # \\<sigma>| +\n    r|\\<tau>| -s r \\<down>s (set \\<sigma> \\<union> {\\<alpha>}) =\n    r|\\<alpha> # \\<sigma>| +\n    r|\\<tau>| -s r \\<down>s set (\\<alpha> # \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  r|\\<alpha> # \\<sigma>| +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n  r|\\<alpha> # \\<sigma>| + r|\\<tau>| -s r \\<down>l (\\<alpha> # \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma> @ \\<tau>| =\n       r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma> \\<Longrightarrow>\n       r|(a # \\<sigma>) @ \\<tau>| =\n       r|a # \\<sigma>| + r|\\<tau>| -s r \\<down>l (a # \\<sigma>)", "ultimately"], ["proof (chain)\npicking this:\n  r|\\<alpha> # \\<sigma> @ \\<tau>| =\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>}\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s r \\<down>s {\\<alpha>}\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s\n  r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n  r|\\<alpha> # \\<sigma>| +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n  r|\\<alpha> # \\<sigma>| +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n  r|\\<alpha> # \\<sigma>| + r|\\<tau>| -s r \\<down>l (\\<alpha> # \\<sigma>)", "show ?case"], ["proof (prove)\nusing this:\n  r|\\<alpha> # \\<sigma> @ \\<tau>| =\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>}\n  {#\\<alpha>#} + r|\\<sigma> @ \\<tau>| -s r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s r \\<down>s {\\<alpha>}\n  {#\\<alpha>#} +\n  (r|\\<sigma>| + r|\\<tau>| -s r \\<down>l \\<sigma>) -s\n  r \\<down>s {\\<alpha>} =\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n  {#\\<alpha>#} + r|\\<sigma>| -s r \\<down>s {\\<alpha>} +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n  r|\\<alpha> # \\<sigma>| +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>}\n  r|\\<alpha> # \\<sigma>| +\n  r|\\<tau>| -s r \\<down>l \\<sigma> -s r \\<down>s {\\<alpha>} =\n  r|\\<alpha> # \\<sigma>| + r|\\<tau>| -s r \\<down>l (\\<alpha> # \\<sigma>)\n\ngoal (1 subgoal):\n 1. r|(\\<alpha> # \\<sigma>) @ \\<tau>| =\n    r|\\<alpha> # \\<sigma>| + r|\\<tau>| -s r \\<down>l (\\<alpha> # \\<sigma>)", "unfolding diff_def"], ["proof (prove)\nusing this:\n  r|\\<alpha> # \\<sigma> @ \\<tau>| =\n  {#\\<alpha>#} +\n  {#x \\<in># r|\\<sigma> @ \\<tau>|. x \\<notin> r \\<down>s {\\<alpha>}#}\n  {#\\<alpha>#} +\n  {#x \\<in># r|\\<sigma> @ \\<tau>|. x \\<notin> r \\<down>s {\\<alpha>}#} =\n  {#\\<alpha>#} +\n  {#x \\<in># r|\\<sigma>| +\n             {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l \\<sigma>#}.\n   x \\<notin> r \\<down>s {\\<alpha>}#}\n  {#\\<alpha>#} +\n  {#x \\<in># r|\\<sigma>| +\n             {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l \\<sigma>#}.\n   x \\<notin> r \\<down>s {\\<alpha>}#} =\n  {#\\<alpha>#} +\n  {#x \\<in># r|\\<sigma>|. x \\<notin> r \\<down>s {\\<alpha>}#} +\n  {#x \\<in># {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l \\<sigma>#}.\n   x \\<notin> r \\<down>s {\\<alpha>}#}\n  {#\\<alpha>#} +\n  {#x \\<in># r|\\<sigma>|. x \\<notin> r \\<down>s {\\<alpha>}#} +\n  {#x \\<in># {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l \\<sigma>#}.\n   x \\<notin> r \\<down>s {\\<alpha>}#} =\n  r|\\<alpha> # \\<sigma>| +\n  {#x \\<in># {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l \\<sigma>#}.\n   x \\<notin> r \\<down>s {\\<alpha>}#}\n  r|\\<alpha> # \\<sigma>| +\n  {#x \\<in># {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l \\<sigma>#}.\n   x \\<notin> r \\<down>s {\\<alpha>}#} =\n  r|\\<alpha> # \\<sigma>| +\n  {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l (\\<alpha> # \\<sigma>)#}\n\ngoal (1 subgoal):\n 1. r|(\\<alpha> # \\<sigma>) @ \\<tau>| =\n    r|\\<alpha> # \\<sigma>| +\n    {#x \\<in># r|\\<tau>|. x \\<notin> r \\<down>l (\\<alpha> # \\<sigma>)#}", "by simp"], ["proof (state)\nthis:\n  r|(\\<alpha> # \\<sigma>) @ \\<tau>| =\n  r|\\<alpha> # \\<sigma>| + r|\\<tau>| -s r \\<down>l (\\<alpha> # \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Definition 3.3\\<close>"], ["", "definition D :: \"'a rel \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>' = ((r|\\<sigma>@\\<tau>'|, r|\\<tau>| + r|\\<sigma>| ) \\<in> mul_eq r\n                 \\<and> (r|\\<tau>@\\<sigma>'|, r|\\<tau>| + r|\\<sigma>| ) \\<in> mul_eq r)\""], ["", "lemma D_eq: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\n shows \"(r|\\<tau>'| -s dl r \\<sigma>,r|\\<tau>| ) \\<in> mul_eq r\" and \"(r|\\<sigma>'| -s dl r \\<tau>,r|\\<sigma>| ) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r &&&\n    (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n\ngoal (1 subgoal):\n 1. (r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r &&&\n    (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "unfolding D_def lemma3_2_2"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r \\<and>\n  (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r &&&\n    (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "using union_commute lemma2_6_6_b'"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r \\<and>\n  (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n  ?M + ?N = ?N + ?M\n  \\<lbrakk>trans ?r; irrefl ?r; (?Q + ?M, ?Q + ?N) \\<in> mul_eq ?r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?N) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. (r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r &&&\n    (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "unfolding D_def lemma3_2_2"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r \\<and>\n  (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "using union_commute lemma2_6_6_b'"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r \\<and>\n  (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n  ?M + ?N = ?N + ?M\n  \\<lbrakk>trans ?r; irrefl ?r; (?Q + ?M, ?Q + ?N) \\<in> mul_eq ?r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?N) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r", "by metis"], ["", "lemma D_inv: assumes \"trans r\" and \"irrefl r\" and \"(r|\\<tau>'| -s dl r \\<sigma>,r|\\<tau>| ) \\<in> mul_eq r\"\n                                                and \"(r|\\<sigma>'| -s dl r \\<tau>,r|\\<sigma>| ) \\<in> mul_eq r\"\n shows \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r\n  (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'", "unfolding D_def lemma3_2_2"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r\n  (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma>,\n     r|\\<tau>| + r|\\<sigma>|)\n    \\<in> mul_eq r \\<and>\n    (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "using lemma2_6_6_a[OF assms(1)] union_commute"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r\n  (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r\n  (?M, ?N) \\<in> mul_eq r \\<Longrightarrow>\n  (?Q + ?M, ?Q + ?N) \\<in> mul_eq r\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma>,\n     r|\\<tau>| + r|\\<sigma>|)\n    \\<in> mul_eq r \\<and>\n    (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "by metis"], ["", "lemma D: assumes \"trans r\" and \"irrefl r\"\n shows  \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>' = ((r|\\<tau>'| -s dl r \\<sigma>,r|\\<tau>| ) \\<in> mul_eq r\n                        \\<and> (r|\\<sigma>'| -s dl r \\<tau>,r|\\<sigma>| ) \\<in> mul_eq r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D r \\<tau> \\<sigma> \\<sigma>' \\<tau>' =\n    ((r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r \\<and>\n     (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r)", "using assms D_eq D_inv"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  \\<lbrakk>trans ?r; irrefl ?r;\n   D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> (?r|?\\<tau>'| -s ?r \\<down>l ?\\<sigma>, ?r|?\\<tau>|)\n                    \\<in> mul_eq ?r\n  \\<lbrakk>trans ?r; irrefl ?r;\n   D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> (?r|?\\<sigma>'| -s ?r \\<down>l ?\\<tau>, ?r|?\\<sigma>|)\n                    \\<in> mul_eq ?r\n  \\<lbrakk>trans ?r; irrefl ?r;\n   (?r|?\\<tau>'| -s ?r \\<down>l ?\\<sigma>, ?r|?\\<tau>|) \\<in> mul_eq ?r;\n   (?r|?\\<sigma>'| -s ?r \\<down>l ?\\<tau>, ?r|?\\<sigma>|)\n   \\<in> mul_eq ?r\\<rbrakk>\n  \\<Longrightarrow> D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\n\ngoal (1 subgoal):\n 1. D r \\<tau> \\<sigma> \\<sigma>' \\<tau>' =\n    ((r|\\<tau>'| -s r \\<down>l \\<sigma>, r|\\<tau>|) \\<in> mul_eq r \\<and>\n     (r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<sigma>|) \\<in> mul_eq r)", "by auto"], ["", "lemma mirror_D: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" shows \"D r \\<sigma> \\<tau> \\<tau>' \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D r \\<sigma> \\<tau> \\<tau>' \\<sigma>'", "using assms D"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n  \\<lbrakk>trans ?r; irrefl ?r\\<rbrakk>\n  \\<Longrightarrow> D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' =\n                    ((?r|?\\<tau>'| -s ?r \\<down>l ?\\<sigma>, ?r|?\\<tau>|)\n                     \\<in> mul_eq ?r \\<and>\n                     (?r|?\\<sigma>'| -s ?r \\<down>l ?\\<tau>, ?r|?\\<sigma>|)\n                     \\<in> mul_eq ?r)\n\ngoal (1 subgoal):\n 1. D r \\<sigma> \\<tau> \\<tau>' \\<sigma>'", "by metis"], ["", "text \\<open>Proposition 3.4\\<close>"], ["", "definition LD_1' :: \"'a rel \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\n where \"LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 =\n (set \\<sigma>1 \\<subseteq> ds r {\\<beta>} \\<and> length \\<sigma>2 \\<le> 1 \\<and> set \\<sigma>2 \\<subseteq> {\\<alpha>} \\<and> set \\<sigma>3 \\<subseteq> ds r {\\<alpha>,\\<beta>})\""], ["", "definition LD' :: \"'a rel \\<Rightarrow> 'a \\<Rightarrow> 'a\n  \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\n where \"LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3 = (LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and> LD_1' r \\<alpha> \\<beta> \\<tau>1 \\<tau>2 \\<tau>3)\""], ["", "text \\<open>auxiliary properties on multisets\\<close>"], ["", "lemma lexmax_le_multiset: assumes t:\"trans r\" shows \"r|\\<sigma>| \\<subseteq># mset \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>| \\<subseteq># mset \\<sigma>", "proof (induct \"\\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r|[]| \\<subseteq># mset []\n 2. \\<And>a \\<sigma>.\n       r|\\<sigma>| \\<subseteq># mset \\<sigma> \\<Longrightarrow>\n       r|a # \\<sigma>| \\<subseteq># mset (a # \\<sigma>)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. r|[]| \\<subseteq># mset []\n 2. \\<And>a \\<sigma>.\n       r|\\<sigma>| \\<subseteq># mset \\<sigma> \\<Longrightarrow>\n       r|a # \\<sigma>| \\<subseteq># mset (a # \\<sigma>)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|[]| \\<subseteq># mset []", "unfolding lexmax.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. {#} \\<subseteq># mset []", "by auto"], ["proof (state)\nthis:\n  r|[]| \\<subseteq># mset []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma>| \\<subseteq># mset \\<sigma> \\<Longrightarrow>\n       r|a # \\<sigma>| \\<subseteq># mset (a # \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma>| \\<subseteq># mset \\<sigma> \\<Longrightarrow>\n       r|a # \\<sigma>| \\<subseteq># mset (a # \\<sigma>)", "case (Cons s \\<tau>)"], ["proof (state)\nthis:\n  r|\\<tau>| \\<subseteq># mset \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma>| \\<subseteq># mset \\<sigma> \\<Longrightarrow>\n       r|a # \\<sigma>| \\<subseteq># mset (a # \\<sigma>)", "hence \"lexmax r \\<tau> -s ds r {s} \\<subseteq># mset \\<tau>\""], ["proof (prove)\nusing this:\n  r|\\<tau>| \\<subseteq># mset \\<tau>\n\ngoal (1 subgoal):\n 1. r|\\<tau>| -s r \\<down>s {s} \\<subseteq># mset \\<tau>", "using lemmaA_3_10 mset_subset_eq_add_right subset_mset.order_trans"], ["proof (prove)\nusing this:\n  r|\\<tau>| \\<subseteq># mset \\<tau>\n  ?M = ?M \\<inter>s ?S + ?M -s ?S\n  ?B \\<subseteq># ?A + ?B\n  \\<lbrakk>?x \\<subseteq># ?y; ?y \\<subseteq># ?z\\<rbrakk>\n  \\<Longrightarrow> ?x \\<subseteq># ?z\n\ngoal (1 subgoal):\n 1. r|\\<tau>| -s r \\<down>s {s} \\<subseteq># mset \\<tau>", "by metis"], ["proof (state)\nthis:\n  r|\\<tau>| -s r \\<down>s {s} \\<subseteq># mset \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       r|\\<sigma>| \\<subseteq># mset \\<sigma> \\<Longrightarrow>\n       r|a # \\<sigma>| \\<subseteq># mset (a # \\<sigma>)", "thus ?case"], ["proof (prove)\nusing this:\n  r|\\<tau>| -s r \\<down>s {s} \\<subseteq># mset \\<tau>\n\ngoal (1 subgoal):\n 1. r|s # \\<tau>| \\<subseteq># mset (s # \\<tau>)", "by simp"], ["proof (state)\nthis:\n  r|s # \\<tau>| \\<subseteq># mset (s # \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma split: assumes \"LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\" shows \"\\<sigma>2 = [] \\<or> \\<sigma>2 = [\\<alpha>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>2 = [] \\<or> \\<sigma>2 = [\\<alpha>]", "using assms"], ["proof (prove)\nusing this:\n  LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\n\ngoal (1 subgoal):\n 1. \\<sigma>2 = [] \\<or> \\<sigma>2 = [\\<alpha>]", "unfolding  LD_1'_def"], ["proof (prove)\nusing this:\n  set \\<sigma>1 \\<subseteq> r \\<down>s {\\<beta>} \\<and>\n  length \\<sigma>2 \\<le> 1 \\<and>\n  set \\<sigma>2 \\<subseteq> {\\<alpha>} \\<and>\n  set \\<sigma>3 \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. \\<sigma>2 = [] \\<or> \\<sigma>2 = [\\<alpha>]", "by (cases \\<sigma>2) auto"], ["", "lemma proposition3_4_step: assumes \"trans r\" and \"irrefl r\" and \"LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\"\nshows \"(r|\\<sigma>1@\\<sigma>2@\\<sigma>3| -s (dm r {#\\<beta>#}), r|[\\<alpha>]| ) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3", "have \"set \\<sigma>1 \\<subseteq> dm r {#\\<beta>#}\""], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\n\ngoal (1 subgoal):\n 1. set \\<sigma>1 \\<subseteq> r \\<down>m {#\\<beta>#}", "unfolding LD'_def LD_1'_def dm_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  set \\<sigma>1 \\<subseteq> r \\<down>s {\\<beta>} \\<and>\n  length \\<sigma>2 \\<le> 1 \\<and>\n  set \\<sigma>2 \\<subseteq> {\\<alpha>} \\<and>\n  set \\<sigma>3 \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. set \\<sigma>1 \\<subseteq> r \\<down>s set_mset {#\\<beta>#}", "by auto"], ["proof (state)\nthis:\n  set \\<sigma>1 \\<subseteq> r \\<down>m {#\\<beta>#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence \"set_mset (lexmax r \\<sigma>1) \\<subseteq> dm r {#\\<beta>#}\""], ["proof (prove)\nusing this:\n  set \\<sigma>1 \\<subseteq> r \\<down>m {#\\<beta>#}\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>1| \\<subseteq> r \\<down>m {#\\<beta>#}", "using submultiset_implies_subset[OF lexmax_le_multiset[OF assms(1)]]"], ["proof (prove)\nusing this:\n  set \\<sigma>1 \\<subseteq> r \\<down>m {#\\<beta>#}\n  set_mset r|?\\<sigma>1| \\<subseteq> set_mset (mset ?\\<sigma>1)\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>1| \\<subseteq> r \\<down>m {#\\<beta>#}", "by auto"], ["proof (state)\nthis:\n  set_mset r|\\<sigma>1| \\<subseteq> r \\<down>m {#\\<beta>#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence one: \"lexmax r \\<sigma>1 -s dm r {#\\<beta>#} = {#}\""], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>1| \\<subseteq> r \\<down>m {#\\<beta>#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>1| -s r \\<down>m {#\\<beta>#} = {#}", "using subset_implies_remove_empty"], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>1| \\<subseteq> r \\<down>m {#\\<beta>#}\n  set_mset ?M \\<subseteq> ?S \\<Longrightarrow> ?M -s ?S = {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>1| -s r \\<down>m {#\\<beta>#} = {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>1| -s r \\<down>m {#\\<beta>#} = {#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3", "have \"set \\<sigma>3 \\<subseteq> dl r \\<sigma>2 \\<union> dl r \\<sigma>1 \\<union> dm r {#\\<beta>#} \\<union> dm r {#\\<alpha>#}\" (is \"?l \\<subseteq> ?r\")"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\n\ngoal (1 subgoal):\n 1. set \\<sigma>3\n    \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n                r \\<down>m {#\\<beta>#} \\<union>\n                r \\<down>m {#\\<alpha>#}", "unfolding LD'_def LD_1'_def dm_def ds_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  set \\<sigma>1\n  \\<subseteq> {y. \\<exists>x\\<in>{\\<beta>}. (y, x) \\<in> r} \\<and>\n  length \\<sigma>2 \\<le> 1 \\<and>\n  set \\<sigma>2 \\<subseteq> {\\<alpha>} \\<and>\n  set \\<sigma>3\n  \\<subseteq> {y. \\<exists>x\\<in>{\\<alpha>, \\<beta>}. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. set \\<sigma>3\n    \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n                {y. \\<exists>x\\<in>#{#\\<beta>#}. (y, x) \\<in> r} \\<union>\n                {y. \\<exists>x\\<in>#{#\\<alpha>#}. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  set \\<sigma>3\n  \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n              r \\<down>m {#\\<beta>#} \\<union>\n              r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence \"set_mset (lexmax r \\<sigma>3) \\<subseteq> ?r \""], ["proof (prove)\nusing this:\n  set \\<sigma>3\n  \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n              r \\<down>m {#\\<beta>#} \\<union>\n              r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>3|\n    \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n                r \\<down>m {#\\<beta>#} \\<union>\n                r \\<down>m {#\\<alpha>#}", "using submultiset_implies_subset[OF lexmax_le_multiset[OF assms(1)]]"], ["proof (prove)\nusing this:\n  set \\<sigma>3\n  \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n              r \\<down>m {#\\<beta>#} \\<union>\n              r \\<down>m {#\\<alpha>#}\n  set_mset r|?\\<sigma>1| \\<subseteq> set_mset (mset ?\\<sigma>1)\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>3|\n    \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n                r \\<down>m {#\\<beta>#} \\<union>\n                r \\<down>m {#\\<alpha>#}", "by auto"], ["proof (state)\nthis:\n  set_mset r|\\<sigma>3|\n  \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n              r \\<down>m {#\\<beta>#} \\<union>\n              r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence pre3: \"lexmax r \\<sigma>3 -s ?r = {#}\""], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>3|\n  \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n              r \\<down>m {#\\<beta>#} \\<union>\n              r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>m {#\\<beta>#} \\<union>\n     r \\<down>m {#\\<alpha>#}) =\n    {#}", "using subset_implies_remove_empty"], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>3|\n  \\<subseteq> r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n              r \\<down>m {#\\<beta>#} \\<union>\n              r \\<down>m {#\\<alpha>#}\n  set_mset ?M \\<subseteq> ?S \\<Longrightarrow> ?M -s ?S = {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>m {#\\<beta>#} \\<union>\n     r \\<down>m {#\\<alpha>#}) =\n    {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "proof (cases \"\\<sigma>2 = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<sigma>2 = [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r\n 2. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "case True"], ["proof (state)\nthis:\n  \\<sigma>2 = []\n\ngoal (2 subgoals):\n 1. \\<sigma>2 = [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r\n 2. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence two:\"(lexmax r \\<sigma>2 -s dl r \\<sigma>1) -s dm r {#\\<beta>#} = {#}\""], ["proof (prove)\nusing this:\n  \\<sigma>2 = []\n\ngoal (1 subgoal):\n 1. r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#} = {#}", "unfolding diff_def"], ["proof (prove)\nusing this:\n  \\<sigma>2 = []\n\ngoal (1 subgoal):\n 1. {#x \\<in># {#x \\<in># r|\\<sigma>2|. x \\<notin> r \\<down>l \\<sigma>1#}.\n     x \\<notin> r \\<down>m {#\\<beta>#}#} =\n    {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#} = {#}\n\ngoal (2 subgoals):\n 1. \\<sigma>2 = [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r\n 2. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "from pre3"], ["proof (chain)\npicking this:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}", "have \"(((lexmax r \\<sigma>3 -s dl r \\<sigma>2) -s dl r \\<sigma>1) -s dm r {#\\<beta>#}) -s dm r {#\\<alpha>#} = {#}\""], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n    r \\<down>m {#\\<beta>#} -s\n    r \\<down>m {#\\<alpha>#} =\n    {#}", "unfolding True dl_def lemmaA_3_9"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>s set [] \\<union> r \\<down>s set \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>s set [] \\<union> r \\<down>s set \\<sigma>1 \\<union>\n     r \\<down>m {#\\<beta>#} \\<union>\n     r \\<down>m {#\\<alpha>#}) =\n    {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n  r \\<down>m {#\\<beta>#} -s\n  r \\<down>m {#\\<alpha>#} =\n  {#}\n\ngoal (2 subgoals):\n 1. \\<sigma>2 = [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r\n 2. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence three:\"(((lexmax r \\<sigma>3 -s dl r \\<sigma>2) -s dl r \\<sigma>1) -s dm r {#\\<beta>#},{#\\<alpha>#}) \\<in> mul r\""], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n  r \\<down>m {#\\<beta>#} -s\n  r \\<down>m {#\\<alpha>#} =\n  {#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n     r \\<down>m {#\\<beta>#},\n     {#\\<alpha>#})\n    \\<in> mul r", "using remove_is_empty_imp_mul"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n  r \\<down>m {#\\<beta>#} -s\n  r \\<down>m {#\\<alpha>#} =\n  {#}\n  ?M -s ?r \\<down>m {#?\\<alpha>#} = {#} \\<Longrightarrow>\n  (?M, {#?\\<alpha>#}) \\<in> mul ?r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n     r \\<down>m {#\\<beta>#},\n     {#\\<alpha>#})\n    \\<in> mul r", "by metis"], ["proof (state)\nthis:\n  (r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n   r \\<down>m {#\\<beta>#},\n   {#\\<alpha>#})\n  \\<in> mul r\n\ngoal (2 subgoals):\n 1. \\<sigma>2 = [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r\n 2. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "using three"], ["proof (prove)\nusing this:\n  (r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n   r \\<down>m {#\\<beta>#},\n   {#\\<alpha>#})\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "unfolding lemma3_2_2 lexmax_singleton lemmaA_3_8 one two mul_def mul_eq_def"], ["proof (prove)\nusing this:\n  (r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n   r \\<down>m {#\\<beta>#},\n   {#\\<alpha>#})\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and>\n            set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}\n\ngoal (1 subgoal):\n 1. ({#} +\n     ({#} +\n      r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n      r \\<down>m {#\\<beta>#}),\n     {#\\<alpha>#})\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by auto"], ["proof (state)\nthis:\n  (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n   r|[\\<alpha>]|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "case False"], ["proof (state)\nthis:\n  \\<sigma>2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence eq: \"\\<sigma>2 = [\\<alpha>]\""], ["proof (prove)\nusing this:\n  \\<sigma>2 \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<sigma>2 = [\\<alpha>]", "using split[OF assms(3)]"], ["proof (prove)\nusing this:\n  \\<sigma>2 \\<noteq> []\n  \\<sigma>2 = [] \\<or> \\<sigma>2 = [\\<alpha>]\n\ngoal (1 subgoal):\n 1. \\<sigma>2 = [\\<alpha>]", "by fast"], ["proof (state)\nthis:\n  \\<sigma>2 = [\\<alpha>]\n\ngoal (1 subgoal):\n 1. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "have two: \"((lexmax r \\<sigma>2 -s dl r \\<sigma>1) -s dm r {#\\<beta>#},{#\\<alpha>#}) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#},\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "using lemma2_6_8[OF assms(1) empty_subsetI]"], ["proof (prove)\nusing this:\n  (?M -s ?T, ?M -s {}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#},\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "unfolding eq lexmax.simps diff_from_empty lemmaA_3_9 diff_empty"], ["proof (prove)\nusing this:\n  (?M -s ?T, ?M) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (({#\\<alpha>#} + {#}) -s\n     (r \\<down>l \\<sigma>1 \\<union> r \\<down>m {#\\<beta>#}),\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#},\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "from pre3"], ["proof (chain)\npicking this:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}", "have \"lexmax r \\<sigma>3 -s ((dl r \\<sigma>2 \\<union> dm r {#\\<alpha>#}) \\<union> dl r \\<sigma>1 \\<union> dm r {#\\<beta>#}) = {#}\""], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>l \\<sigma>2 \\<union> r \\<down>m {#\\<alpha>#} \\<union>\n     r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>m {#\\<beta>#}) =\n    {#}", "unfolding eq lemmaA_3_9"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>l [\\<alpha>] \\<union> r \\<down>m {#\\<alpha>#} \\<union>\n     r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>m {#\\<beta>#}) =\n    {#}", "using Un_assoc Un_commute"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#} \\<union>\n   r \\<down>m {#\\<alpha>#}) =\n  {#}\n  ?A \\<union> ?B \\<union> ?C = ?A \\<union> (?B \\<union> ?C)\n  ?A \\<union> ?B = ?B \\<union> ?A\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>l [\\<alpha>] \\<union> r \\<down>m {#\\<alpha>#} \\<union>\n     r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>m {#\\<beta>#}) =\n    {#}", "by metis"], ["proof (state)\nthis:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>m {#\\<alpha>#} \\<union>\n   r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#}) =\n  {#}\n\ngoal (1 subgoal):\n 1. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "hence three: \"((lexmax r \\<sigma>3 -s dl r \\<sigma>2) -s dl r \\<sigma>1) -s dm r {#\\<beta>#} = {#}\""], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>m {#\\<alpha>#} \\<union>\n   r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#}) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n    r \\<down>m {#\\<beta>#} =\n    {#}", "using Un_absorb"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>l \\<sigma>2 \\<union> r \\<down>m {#\\<alpha>#} \\<union>\n   r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>m {#\\<beta>#}) =\n  {#}\n  ?A \\<union> ?A = ?A\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n    r \\<down>m {#\\<beta>#} =\n    {#}", "unfolding lemmaA_3_9 eq dm_def dl_def"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>s set [\\<alpha>] \\<union>\n   r \\<down>s set_mset {#\\<alpha>#} \\<union>\n   r \\<down>s set \\<sigma>1 \\<union>\n   r \\<down>s set_mset {#\\<beta>#}) =\n  {#}\n  ?A \\<union> ?A = ?A\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>s set [\\<alpha>] \\<union> r \\<down>s set \\<sigma>1 \\<union>\n     r \\<down>s set_mset {#\\<beta>#}) =\n    {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>3| -s r \\<down>l \\<sigma>2 -s r \\<down>l \\<sigma>1 -s\n  r \\<down>m {#\\<beta>#} =\n  {#}\n\ngoal (1 subgoal):\n 1. \\<sigma>2 \\<noteq> [] \\<Longrightarrow>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "unfolding lemma3_2_2 lexmax_singleton lemmaA_3_8 one three"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#} +\n     (r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#} + {#}),\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "using two"], ["proof (prove)\nusing this:\n  (r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#},\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. ({#} +\n     (r|\\<sigma>2| -s r \\<down>l \\<sigma>1 -s r \\<down>m {#\\<beta>#} + {#}),\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n   r|[\\<alpha>]|)\n  \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>m {#\\<beta>#},\n   r|[\\<alpha>]|)\n  \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proposition3_4:\nassumes t: \"trans r\" and i: \"irrefl r\" and ld: \"LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3\"\nshows \"D r [\\<beta>] [\\<alpha>] (\\<sigma>1@\\<sigma>2@\\<sigma>3) (\\<tau>1@\\<tau>2@\\<tau>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D r [\\<beta>] [\\<alpha>] (\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3)\n     (\\<tau>1 @ \\<tau>2 @ \\<tau>3)", "using proposition3_4_step[OF t i] ld"], ["proof (prove)\nusing this:\n  LD_1' r ?\\<beta> ?\\<alpha> ?\\<sigma>1.0 ?\\<sigma>2.0\n   ?\\<sigma>3.0 \\<Longrightarrow>\n  (r|?\\<sigma>1.0 @ ?\\<sigma>2.0 @ ?\\<sigma>3.0| -s r \\<down>m {#?\\<beta>#},\n   r|[?\\<alpha>]|)\n  \\<in> mul_eq r\n  LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2\n   \\<tau>3\n\ngoal (1 subgoal):\n 1. D r [\\<beta>] [\\<alpha>] (\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3)\n     (\\<tau>1 @ \\<tau>2 @ \\<tau>3)", "unfolding LD'_def D[OF assms(1,2)] dl_def dm_def"], ["proof (prove)\nusing this:\n  LD_1' r ?\\<beta> ?\\<alpha> ?\\<sigma>1.0 ?\\<sigma>2.0\n   ?\\<sigma>3.0 \\<Longrightarrow>\n  (r|?\\<sigma>1.0 @ ?\\<sigma>2.0 @ ?\\<sigma>3.0| -s\n   r \\<down>s set_mset {#?\\<beta>#},\n   r|[?\\<alpha>]|)\n  \\<in> mul_eq r\n  LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and>\n  LD_1' r \\<alpha> \\<beta> \\<tau>1 \\<tau>2 \\<tau>3\n\ngoal (1 subgoal):\n 1. (r|\\<tau>1 @ \\<tau>2 @ \\<tau>3| -s r \\<down>s set [\\<alpha>],\n     r|[\\<beta>]|)\n    \\<in> mul_eq r \\<and>\n    (r|\\<sigma>1 @ \\<sigma>2 @ \\<sigma>3| -s r \\<down>s set [\\<beta>],\n     r|[\\<alpha>]|)\n    \\<in> mul_eq r", "by auto"], ["", "(*reverse direction*)"], ["", "lemma lexmax_decompose: assumes \"\\<alpha> \\<in># r|\\<sigma>|\" shows \"\\<exists>\\<sigma>1 \\<sigma>3. (\\<sigma>=\\<sigma>1@[\\<alpha>]@\\<sigma>3 \\<and> \\<alpha> \\<notin> dl r \\<sigma>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>3.\n       \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "using assms"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>3.\n       \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "proof (induct \\<sigma>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|[]| \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>3.\n       [] = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n 2. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<alpha> \\<in># r|\\<sigma>| \\<Longrightarrow>\n                \\<exists>\\<sigma>1 \\<sigma>3.\n                   \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                   \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n        \\<alpha> \\<in># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                            a # \\<sigma> =\n                            \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                            \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "case Nil"], ["proof (state)\nthis:\n  \\<alpha> \\<in># r|[]|\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|[]| \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>3.\n       [] = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n 2. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<alpha> \\<in># r|\\<sigma>| \\<Longrightarrow>\n                \\<exists>\\<sigma>1 \\<sigma>3.\n                   \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                   \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n        \\<alpha> \\<in># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                            a # \\<sigma> =\n                            \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                            \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "thus ?case"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|[]|\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>3.\n       [] = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     [] = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n     \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<alpha> \\<in># r|\\<sigma>| \\<Longrightarrow>\n                \\<exists>\\<sigma>1 \\<sigma>3.\n                   \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                   \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n        \\<alpha> \\<in># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                            a # \\<sigma> =\n                            \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                            \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<alpha> \\<in># r|\\<sigma>| \\<Longrightarrow>\n                \\<exists>\\<sigma>1 \\<sigma>3.\n                   \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                   \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n        \\<alpha> \\<in># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                            a # \\<sigma> =\n                            \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                            \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "case (Cons \\<beta> as)"], ["proof (state)\nthis:\n  \\<alpha> \\<in># r|as| \\<Longrightarrow>\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n     \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n  \\<alpha> \\<in># r|\\<beta> # as|\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<alpha> \\<in># r|\\<sigma>| \\<Longrightarrow>\n                \\<exists>\\<sigma>1 \\<sigma>3.\n                   \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                   \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n        \\<alpha> \\<in># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                            a # \\<sigma> =\n                            \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                            \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "thus ?case"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|as| \\<Longrightarrow>\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n     \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n  \\<alpha> \\<in># r|\\<beta> # as|\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>3.\n       \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "proof (cases \"\\<alpha>=\\<beta>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> = \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n 2. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "case True"], ["proof (state)\nthis:\n  \\<alpha> = \\<beta>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> = \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n 2. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "from this"], ["proof (chain)\npicking this:\n  \\<alpha> = \\<beta>", "obtain \\<sigma>1 \\<sigma>3 where dec: \"\\<beta>#as = \\<sigma>1@[\\<alpha>]@\\<sigma>3\" and empty: \"\\<sigma>1 = []\""], ["proof (prove)\nusing this:\n  \\<alpha> = \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>3.\n        \\<lbrakk>\\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3;\n         \\<sigma>1 = []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<sigma>1 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> = \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n 2. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "hence \"\\<alpha> \\<notin> dl r \\<sigma>1\""], ["proof (prove)\nusing this:\n  \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<sigma>1 = []\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "unfolding dl_def ds_def"], ["proof (prove)\nusing this:\n  \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<sigma>1 = []\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin> {y. \\<exists>x\\<in>set \\<sigma>1. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> = \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n 2. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>3.\n       \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "using dec"], ["proof (prove)\nusing this:\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n  \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>3.\n       \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n     \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "case False"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "hence \"\\<alpha> \\<in># r|as|-s ds r {\\<beta>}\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in># r|as| -s r \\<down>s {\\<beta>}", "using Cons(2)"], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> \\<beta>\n  \\<alpha> \\<in># r|\\<beta> # as|\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in># r|as| -s r \\<down>s {\\<beta>}", "by auto"], ["proof (state)\nthis:\n  \\<alpha> \\<in># r|as| -s r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "hence x: \"\\<alpha> \\<in># r|as| \\<and> \\<alpha> \\<notin> ds r {\\<beta>}\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|as| -s r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in># r|as| \\<and> \\<alpha> \\<notin> r \\<down>s {\\<beta>}", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<in># r|as| \\<and> \\<alpha> \\<notin> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "from this"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in># r|as| \\<and> \\<alpha> \\<notin> r \\<down>s {\\<beta>}", "obtain \\<sigma>1 \\<sigma>3 where \"as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\" and w: \"\\<alpha> \\<notin> dl r \\<sigma>1\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|as| \\<and> \\<alpha> \\<notin> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>3.\n        \\<lbrakk>as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3;\n         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons(1)"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|as| \\<and> \\<alpha> \\<notin> r \\<down>s {\\<beta>}\n  \\<alpha> \\<in># r|as| \\<Longrightarrow>\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n     \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>3.\n        \\<lbrakk>as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3;\n         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "hence  \"\\<beta>#as = (\\<beta>#\\<sigma>1) @ [\\<alpha>] @ \\<sigma>3\" and  \"\\<alpha> \\<notin> dl r (\\<beta>#\\<sigma>1)\""], ["proof (prove)\nusing this:\n  as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. \\<beta> # as = (\\<beta> # \\<sigma>1) @ [\\<alpha>] @ \\<sigma>3 &&&\n    \\<alpha> \\<notin> r \\<down>l (\\<beta> # \\<sigma>1)", "using x w"], ["proof (prove)\nusing this:\n  as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n  \\<alpha> \\<in># r|as| \\<and> \\<alpha> \\<notin> r \\<down>s {\\<beta>}\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. \\<beta> # as = (\\<beta> # \\<sigma>1) @ [\\<alpha>] @ \\<sigma>3 &&&\n    \\<alpha> \\<notin> r \\<down>l (\\<beta> # \\<sigma>1)", "unfolding dm_def dl_def ds_def"], ["proof (prove)\nusing this:\n  as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> {y. \\<exists>x\\<in>set \\<sigma>1. (y, x) \\<in> r}\n  \\<alpha> \\<in># r|as| \\<and>\n  \\<alpha> \\<notin> {y. \\<exists>x\\<in>{\\<beta>}. (y, x) \\<in> r}\n  \\<alpha> \\<notin> {y. \\<exists>x\\<in>set \\<sigma>1. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. \\<beta> # as = (\\<beta> # \\<sigma>1) @ [\\<alpha>] @ \\<sigma>3 &&&\n    \\<alpha>\n    \\<notin> {y. \\<exists>x\\<in>set (\\<beta> # \\<sigma>1). (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  \\<beta> # as = (\\<beta> # \\<sigma>1) @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l (\\<beta> # \\<sigma>1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> \\<in># r|as| \\<Longrightarrow>\n             \\<exists>\\<sigma>1 \\<sigma>3.\n                as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                \\<alpha> \\<notin> r \\<down>l \\<sigma>1;\n     \\<alpha> \\<in># r|\\<beta> # as|; \\<alpha> \\<noteq> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>3.\n                         \\<beta> # as =\n                         \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n                         \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<beta> # as = (\\<beta> # \\<sigma>1) @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l (\\<beta> # \\<sigma>1)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>3.\n       \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n       \\<alpha> \\<notin> r \\<down>l \\<sigma>1", "by fast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n     \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     \\<beta> # as = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 \\<and>\n     \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lexmax_elt: assumes \"trans r\" and \"x \\<in> (set \\<sigma>)\" and \"x \\<notin> set_mset r|\\<sigma>|\"\nshows \"\\<exists>y. (x,y) \\<in> r \\<and> y \\<in> set_mset r|\\<sigma>|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|", "using assms(2,3)"], ["proof (prove)\nusing this:\n  x \\<in> set \\<sigma>\n  x \\<notin># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|", "proof (induct \\<sigma>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> set []; x \\<notin># r|[]|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|[]|\n 2. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<lbrakk>x \\<in> set \\<sigma>;\n                 x \\<notin># r|\\<sigma>|\\<rbrakk>\n                \\<Longrightarrow> \\<exists>y.\n                                     (x, y) \\<in> r \\<and>\n                                     y \\<in># r|\\<sigma>|;\n        x \\<in> set (a # \\<sigma>); x \\<notin># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (x, y) \\<in> r \\<and> y \\<in># r|a # \\<sigma>|", "case Nil"], ["proof (state)\nthis:\n  x \\<in> set []\n  x \\<notin># r|[]|\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> set []; x \\<notin># r|[]|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|[]|\n 2. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<lbrakk>x \\<in> set \\<sigma>;\n                 x \\<notin># r|\\<sigma>|\\<rbrakk>\n                \\<Longrightarrow> \\<exists>y.\n                                     (x, y) \\<in> r \\<and>\n                                     y \\<in># r|\\<sigma>|;\n        x \\<in> set (a # \\<sigma>); x \\<notin># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (x, y) \\<in> r \\<and> y \\<in># r|a # \\<sigma>|", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> set []\n  x \\<notin># r|[]|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|[]|", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|[]|\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<lbrakk>x \\<in> set \\<sigma>;\n                 x \\<notin># r|\\<sigma>|\\<rbrakk>\n                \\<Longrightarrow> \\<exists>y.\n                                     (x, y) \\<in> r \\<and>\n                                     y \\<in># r|\\<sigma>|;\n        x \\<in> set (a # \\<sigma>); x \\<notin># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (x, y) \\<in> r \\<and> y \\<in># r|a # \\<sigma>|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<lbrakk>x \\<in> set \\<sigma>;\n                 x \\<notin># r|\\<sigma>|\\<rbrakk>\n                \\<Longrightarrow> \\<exists>y.\n                                     (x, y) \\<in> r \\<and>\n                                     y \\<in># r|\\<sigma>|;\n        x \\<in> set (a # \\<sigma>); x \\<notin># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (x, y) \\<in> r \\<and> y \\<in># r|a # \\<sigma>|", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|as|\n  x \\<in> set (a # as)\n  x \\<notin># r|a # as|\n\ngoal (1 subgoal):\n 1. \\<And>a \\<sigma>.\n       \\<lbrakk>\\<lbrakk>x \\<in> set \\<sigma>;\n                 x \\<notin># r|\\<sigma>|\\<rbrakk>\n                \\<Longrightarrow> \\<exists>y.\n                                     (x, y) \\<in> r \\<and>\n                                     y \\<in># r|\\<sigma>|;\n        x \\<in> set (a # \\<sigma>); x \\<notin># r|a # \\<sigma>|\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (x, y) \\<in> r \\<and> y \\<in># r|a # \\<sigma>|", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|as|\n  x \\<in> set (a # as)\n  x \\<notin># r|a # as|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "proof (cases \"x \\<notin> set_mset r|as|\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|; x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n 2. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|;\n     \\<not> x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "case True"], ["proof (state)\nthis:\n  x \\<notin># r|as|\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|; x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n 2. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|;\n     \\<not> x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "from Cons True"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|as|\n  x \\<in> set (a # as)\n  x \\<notin># r|a # as|\n  x \\<notin># r|as|", "obtain y where s: \"(x, y) \\<in> r \\<and> y \\<in> set_mset r|as|\""], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|as|\n  x \\<in> set (a # as)\n  x \\<notin># r|a # as|\n  x \\<notin># r|as|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        (x, y) \\<in> r \\<and> y \\<in># r|as| \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> r \\<and> y \\<in># r|as|\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|; x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n 2. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|;\n     \\<not> x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "thus ?thesis"], ["proof (prove)\nusing this:\n  (x, y) \\<in> r \\<and> y \\<in># r|as|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "proof (cases \"y \\<in> ds r {a}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(x, y) \\<in> r \\<and> y \\<in># r|as|;\n     y \\<in> r \\<down>s {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n 2. \\<lbrakk>(x, y) \\<in> r \\<and> y \\<in># r|as|;\n     y \\<notin> r \\<down>s {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "case True"], ["proof (state)\nthis:\n  y \\<in> r \\<down>s {a}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(x, y) \\<in> r \\<and> y \\<in># r|as|;\n     y \\<in> r \\<down>s {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n 2. \\<lbrakk>(x, y) \\<in> r \\<and> y \\<in># r|as|;\n     y \\<notin> r \\<down>s {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> r \\<down>s {a}\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "using transD[OF assms(1)] s"], ["proof (prove)\nusing this:\n  y \\<in> r \\<down>s {a}\n  \\<lbrakk>(?x, ?y) \\<in> r; (?y, ?z) \\<in> r\\<rbrakk>\n  \\<Longrightarrow> (?x, ?z) \\<in> r\n  (x, y) \\<in> r \\<and> y \\<in># r|as|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  y \\<in> {y. \\<exists>x\\<in>{a}. (y, x) \\<in> r}\n  \\<lbrakk>(?x, ?y) \\<in> r; (?y, ?z) \\<in> r\\<rbrakk>\n  \\<Longrightarrow> (?x, ?z) \\<in> r\n  (x, y) \\<in> r \\<and> y \\<in># r|as|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> r \\<and> y \\<in># r|as|;\n     y \\<notin> r \\<down>s {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> r \\<and> y \\<in># r|as|;\n     y \\<notin> r \\<down>s {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "case False"], ["proof (state)\nthis:\n  y \\<notin> r \\<down>s {a}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> r \\<and> y \\<in># r|as|;\n     y \\<notin> r \\<down>s {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<notin> r \\<down>s {a}\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "using s"], ["proof (prove)\nusing this:\n  y \\<notin> r \\<down>s {a}\n  (x, y) \\<in> r \\<and> y \\<in># r|as|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "unfolding lexmax.simps diff_def"], ["proof (prove)\nusing this:\n  y \\<notin> r \\<down>s {a}\n  (x, y) \\<in> r \\<and> y \\<in># r|as|\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (x, y) \\<in> r \\<and>\n       y \\<in># {#a#} + {#x \\<in># r|as|. x \\<notin> r \\<down>s {a}#}", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|;\n     \\<not> x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|;\n     \\<not> x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "case False"], ["proof (state)\nthis:\n  \\<not> x \\<notin># r|as|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n             \\<Longrightarrow> \\<exists>y.\n                                  (x, y) \\<in> r \\<and> y \\<in># r|as|;\n     x \\<in> set (a # as); x \\<notin># r|a # as|;\n     \\<not> x \\<notin># r|as|\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x \\<notin># r|as|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "using Cons"], ["proof (prove)\nusing this:\n  \\<not> x \\<notin># r|as|\n  \\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|as|\n  x \\<in> set (a # as)\n  x \\<notin># r|a # as|\n\ngoal (1 subgoal):\n 1. \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|", "unfolding diff_def dm_def ds_def lexmax.simps"], ["proof (prove)\nusing this:\n  \\<not> x \\<notin># r|as|\n  \\<lbrakk>x \\<in> set as; x \\<notin># r|as|\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|as|\n  x \\<in> set (a # as)\n  x \\<notin># {#a#} +\n              {#x \\<in># r|as|.\n               x \\<notin> {y. \\<exists>x\\<in>{a}. (y, x) \\<in> r}#}\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (x, y) \\<in> r \\<and>\n       y \\<in># {#a#} +\n                {#x \\<in># r|as|.\n                 x \\<notin> {y. \\<exists>x\\<in>{a}. (y, x) \\<in> r}#}", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|a # as|\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lexmax_set: assumes \"trans r\" and \"set_mset r|\\<sigma>| \\<subseteq> r \\<down>s S\" shows \"set \\<sigma> \\<subseteq> r \\<down>s S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set \\<sigma> \\<subseteq> r \\<down>s S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set \\<sigma> \\<Longrightarrow> x \\<in> r \\<down>s S", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set \\<sigma> \\<Longrightarrow> x \\<in> r \\<down>s S", "assume A: \"x \\<in> set \\<sigma>\""], ["proof (state)\nthis:\n  x \\<in> set \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set \\<sigma> \\<Longrightarrow> x \\<in> r \\<down>s S", "show \"x \\<in> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "proof (cases \"x \\<in> set_mset r|\\<sigma>|\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S\n 2. x \\<notin># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S", "case True"], ["proof (state)\nthis:\n  x \\<in># r|\\<sigma>|\n\ngoal (2 subgoals):\n 1. x \\<in># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S\n 2. x \\<notin># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "using assms"], ["proof (prove)\nusing this:\n  x \\<in># r|\\<sigma>|\n  trans r\n  set_mset r|\\<sigma>| \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  x \\<in> r \\<down>s S\n\ngoal (1 subgoal):\n 1. x \\<notin># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S", "case False"], ["proof (state)\nthis:\n  x \\<notin># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. x \\<notin># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S", "from lexmax_elt[OF assms(1) A False]"], ["proof (chain)\npicking this:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|", "obtain y\n  where rel: \"(x,y) \\<in> r \\<and> y \\<in> set_mset r|\\<sigma>|\""], ["proof (prove)\nusing this:\n  \\<exists>y. (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>| \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. x \\<notin># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S", "hence \"y \\<in> ds r S\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. y \\<in> r \\<down>s S", "using assms"], ["proof (prove)\nusing this:\n  (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|\n  trans r\n  set_mset r|\\<sigma>| \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. y \\<in> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  y \\<in> r \\<down>s S\n\ngoal (1 subgoal):\n 1. x \\<notin># r|\\<sigma>| \\<Longrightarrow> x \\<in> r \\<down>s S", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> r \\<down>s S\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "using rel assms transD"], ["proof (prove)\nusing this:\n  y \\<in> r \\<down>s S\n  (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|\n  trans r\n  set_mset r|\\<sigma>| \\<subseteq> r \\<down>s S\n  \\<lbrakk>trans ?r; (?x, ?y) \\<in> ?r; (?y, ?z) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> (?x, ?z) \\<in> ?r\n\ngoal (1 subgoal):\n 1. x \\<in> r \\<down>s S", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  y \\<in> {y. \\<exists>x\\<in>S. (y, x) \\<in> r}\n  (x, y) \\<in> r \\<and> y \\<in># r|\\<sigma>|\n  trans r\n  set_mset r|\\<sigma>| \\<subseteq> {y. \\<exists>x\\<in>S. (y, x) \\<in> r}\n  \\<lbrakk>trans ?r; (?x, ?y) \\<in> ?r; (?y, ?z) \\<in> ?r\\<rbrakk>\n  \\<Longrightarrow> (?x, ?z) \\<in> ?r\n\ngoal (1 subgoal):\n 1. x \\<in> {y. \\<exists>x\\<in>S. (y, x) \\<in> r}", "by fast"], ["proof (state)\nthis:\n  x \\<in> r \\<down>s S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> r \\<down>s S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma drop_left_mult_eq:\nassumes \"trans r\" and \"irrefl r\" and \"(N+M,M) \\<in> mul_eq r\" shows \"N = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N = {#}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. N = {#}", "have \"(M+N,M+{#}) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M + N, M + {#}) \\<in> mul_eq r", "using assms(3)"], ["proof (prove)\nusing this:\n  (N + M, M) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M + N, M + {#}) \\<in> mul_eq r", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (N + M, M) \\<in> mul_eq r \\<Longrightarrow> (M + N, M) \\<in> mul_eq r", "using union_commute"], ["proof (prove)\nusing this:\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (N + M, M) \\<in> mul_eq r \\<Longrightarrow> (M + N, M) \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (M + N, M + {#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. N = {#}", "hence k:\"(N,{#}) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  (M + N, M + {#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (N, {#}) \\<in> mul_eq r", "using lemma2_6_6_b'[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  (M + N, M + {#}) \\<in> mul_eq r\n  (?Q + ?M, ?Q + ?N) \\<in> mul_eq r \\<Longrightarrow>\n  (?M, ?N) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (N, {#}) \\<in> mul_eq r", "by fast"], ["proof (state)\nthis:\n  (N, {#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. N = {#}", "from this"], ["proof (chain)\npicking this:\n  (N, {#}) \\<in> mul_eq r", "obtain I J K where \"{#} = I + J \\<and> N = I + K \\<and> set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  (N, {#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        {#} = I + J \\<and>\n        N = I + K \\<and>\n        set_mset K \\<subseteq> r \\<down>m J \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  (N, {#})\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I J K.\n        {#} = I + J \\<and>\n        N = I + K \\<and>\n        set_mset K \\<subseteq> r \\<down>m J \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  {#} = I + J \\<and> N = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. N = {#}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {#} = I + J \\<and> N = I + K \\<and> set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. N = {#}", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  {#} = I + J \\<and>\n  N = I + K \\<and>\n  set_mset K \\<subseteq> {y. \\<exists>x\\<in>#J. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. N = {#}", "by auto"], ["proof (state)\nthis:\n  N = {#}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>generalized to lists\\<close>"], ["", "lemma proposition3_4_inv_lists:\nassumes t: \"trans r\" and i: \"irrefl r\" and k:\"(r|\\<sigma>| -s r \\<down>l \\<beta>, {#\\<alpha>#}) \\<in> mul_eq r\" (is \"(?M,_) \\<in> _\")\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3. ((\\<sigma> = \\<sigma>1@\\<sigma>2@\\<sigma>3) \\<and> set \\<sigma>1 \\<subseteq> dl r \\<beta> \\<and> length \\<sigma>2 \\<le> 1 \\<and> set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and> set \\<sigma>3 \\<subseteq> dl r (\\<alpha>#\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "proof (cases \"\\<alpha> \\<in># ?M\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "case True"], ["proof (state)\nthis:\n  \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta>\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"\\<alpha> \\<in># r|\\<sigma>|\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<in># r|\\<sigma>|", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<in># r|\\<sigma>|\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "from this"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in># r|\\<sigma>|", "obtain \\<sigma>1 \\<sigma>3 where sigma: \"\\<sigma>=\\<sigma>1@[\\<alpha>]@\\<sigma>3\" and alpha: \"\\<alpha> \\<notin> dl r \\<sigma>1\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|\\<sigma>|\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>3.\n        \\<lbrakk>\\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3;\n         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lexmax_decompose"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|\\<sigma>|\n  ?\\<alpha> \\<in># ?r|?\\<sigma>| \\<Longrightarrow>\n  \\<exists>\\<sigma>1 \\<sigma>3.\n     ?\\<sigma> = \\<sigma>1 @ [?\\<alpha>] @ \\<sigma>3 \\<and>\n     ?\\<alpha> \\<notin> ?r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>3.\n        \\<lbrakk>\\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3;\n         \\<alpha> \\<notin> r \\<down>l \\<sigma>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence dec: \"((r|\\<sigma>1|-sdl r \\<beta>) + (r|[\\<alpha>]|-s (dl r \\<sigma>1 \\<union> dl r \\<beta>)) + (r|\\<sigma>3| -s (dl r [\\<alpha>] \\<union> dl r \\<sigma>1 \\<union> dl r \\<beta>)), {#\\<alpha>#}) \\<in> mul_eq r\" (is \"(?M1 + ?M2 + ?M3,_) \\<in> _\")"], ["proof (prove)\nusing this:\n  \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n     r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) +\n     r|\\<sigma>3| -s\n     (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n      r \\<down>l \\<beta>),\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "using k"], ["proof (prove)\nusing this:\n  \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n  (r|\\<sigma>| -s r \\<down>l \\<beta>, {#\\<alpha>#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n     r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) +\n     r|\\<sigma>3| -s\n     (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n      r \\<down>l \\<beta>),\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "unfolding sigma lemma3_2_2 lemmaA_3_8 lemmaA_3_9 LD_1'_def union_assoc"], ["proof (prove)\nusing this:\n  \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3 = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n  (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n   (r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) +\n    r|\\<sigma>3| -s\n    (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>l \\<beta>)),\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n     (r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) +\n      r|\\<sigma>3| -s\n      (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n       r \\<down>l \\<beta>)),\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n   r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) +\n   r|\\<sigma>3| -s\n   (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n    r \\<down>l \\<beta>),\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "from True"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta>", "have key: \"\\<alpha> \\<notin> dl r \\<beta>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin> r \\<down>l \\<beta>", "by simp"], ["proof (state)\nthis:\n  \\<alpha> \\<notin> r \\<down>l \\<beta>\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"?M2 = {#\\<alpha>#}\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<notin> r \\<down>l \\<beta>\n\ngoal (1 subgoal):\n 1. r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) =\n    {#\\<alpha>#}", "unfolding lexmax_singleton diff_def"], ["proof (prove)\nusing this:\n  \\<alpha> \\<notin> r \\<down>l \\<beta>\n\ngoal (1 subgoal):\n 1. {#x \\<in># {#\\<alpha>#}.\n     x \\<notin> r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>#} =\n    {#\\<alpha>#}", "using alpha"], ["proof (prove)\nusing this:\n  \\<alpha> \\<notin> r \\<down>l \\<beta>\n  \\<alpha> \\<notin> r \\<down>l \\<sigma>1\n\ngoal (1 subgoal):\n 1. {#x \\<in># {#\\<alpha>#}.\n     x \\<notin> r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>#} =\n    {#\\<alpha>#}", "by auto"], ["proof (state)\nthis:\n  r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) =\n  {#\\<alpha>#}\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"(?M1+?M3 + {#\\<alpha>#},{#\\<alpha>#}) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) =\n  {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n     r|\\<sigma>3| -s\n     (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n      r \\<down>l \\<beta>) +\n     {#\\<alpha>#},\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "using dec union_assoc union_commute"], ["proof (prove)\nusing this:\n  r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) =\n  {#\\<alpha>#}\n  (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n   r|[\\<alpha>]| -s (r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta>) +\n   r|\\<sigma>3| -s\n   (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n    r \\<down>l \\<beta>),\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n  ?M + ?N + ?K = ?M + (?N + ?K)\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n     r|\\<sigma>3| -s\n     (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n      r \\<down>l \\<beta>) +\n     {#\\<alpha>#},\n     {#\\<alpha>#})\n    \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n   r|\\<sigma>3| -s\n   (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n    r \\<down>l \\<beta>) +\n   {#\\<alpha>#},\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence w: \"?M1+?M3 = {#}\""], ["proof (prove)\nusing this:\n  (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n   r|\\<sigma>3| -s\n   (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n    r \\<down>l \\<beta>) +\n   {#\\<alpha>#},\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. r|\\<sigma>1| -s r \\<down>l \\<beta> +\n    r|\\<sigma>3| -s\n    (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>l \\<beta>) =\n    {#}", "using drop_left_mult_eq assms(1,2)"], ["proof (prove)\nusing this:\n  (r|\\<sigma>1| -s r \\<down>l \\<beta> +\n   r|\\<sigma>3| -s\n   (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n    r \\<down>l \\<beta>) +\n   {#\\<alpha>#},\n   {#\\<alpha>#})\n  \\<in> mul_eq r\n  \\<lbrakk>trans ?r; irrefl ?r; (?N + ?M, ?M) \\<in> mul_eq ?r\\<rbrakk>\n  \\<Longrightarrow> ?N = {#}\n  trans r\n  irrefl r\n\ngoal (1 subgoal):\n 1. r|\\<sigma>1| -s r \\<down>l \\<beta> +\n    r|\\<sigma>3| -s\n    (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>l \\<beta>) =\n    {#}", "by blast"], ["proof (state)\nthis:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> +\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>l \\<beta>) =\n  {#}\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "from w"], ["proof (chain)\npicking this:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> +\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>l \\<beta>) =\n  {#}", "have \"(r|\\<sigma>1|-sdl r \\<beta>) = {#}\""], ["proof (prove)\nusing this:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> +\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>l \\<beta>) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>1| -s r \\<down>l \\<beta> = {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> = {#}\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"set_mset r|\\<sigma>1| \\<subseteq> ds r (set \\<beta>)\""], ["proof (prove)\nusing this:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> = {#}\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>1| \\<subseteq> r \\<down>s set \\<beta>", "using remove_empty_implies_subset"], ["proof (prove)\nusing this:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> = {#}\n  ?M -s ?S = {#} \\<Longrightarrow> set_mset ?M \\<subseteq> ?S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>1| \\<subseteq> r \\<down>s set \\<beta>", "unfolding dl_def dm_def"], ["proof (prove)\nusing this:\n  r|\\<sigma>1| -s r \\<down>s set \\<beta> = {#}\n  ?M -s ?S = {#} \\<Longrightarrow> set_mset ?M \\<subseteq> ?S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>1| \\<subseteq> r \\<down>s set \\<beta>", "by auto"], ["proof (state)\nthis:\n  set_mset r|\\<sigma>1| \\<subseteq> r \\<down>s set \\<beta>\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence sigma1: \"set \\<sigma>1 \\<subseteq> ds r (set \\<beta>)\""], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>1| \\<subseteq> r \\<down>s set \\<beta>\n\ngoal (1 subgoal):\n 1. set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>", "using lexmax_set[OF assms(1)]"], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>1| \\<subseteq> r \\<down>s set \\<beta>\n  set_mset r|?\\<sigma>| \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set ?\\<sigma> \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>", "by auto"], ["proof (state)\nthis:\n  set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "have sigma2: \"length [\\<alpha>] \\<le> 1 \\<and> set [\\<alpha>] \\<subseteq> {\\<alpha>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [\\<alpha>] \\<le> 1 \\<and> set [\\<alpha>] \\<subseteq> {\\<alpha>}", "by auto"], ["proof (state)\nthis:\n  length [\\<alpha>] \\<le> 1 \\<and> set [\\<alpha>] \\<subseteq> {\\<alpha>}\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "have sub:\"dl r \\<sigma>1 \\<subseteq> dl r \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>l \\<sigma>1 \\<subseteq> r \\<down>l \\<beta>", "using subset_imp_ds_subset[OF assms(1) sigma1]"], ["proof (prove)\nusing this:\n  r \\<down>s set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>\n\ngoal (1 subgoal):\n 1. r \\<down>l \\<sigma>1 \\<subseteq> r \\<down>l \\<beta>", "unfolding dm_def dl_def"], ["proof (prove)\nusing this:\n  r \\<down>s set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>\n\ngoal (1 subgoal):\n 1. r \\<down>s set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>", "by auto"], ["proof (state)\nthis:\n  r \\<down>l \\<sigma>1 \\<subseteq> r \\<down>l \\<beta>\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence sub2: \"dl r \\<sigma>1 \\<union> dl r \\<beta> = dl r \\<beta>\""], ["proof (prove)\nusing this:\n  r \\<down>l \\<sigma>1 \\<subseteq> r \\<down>l \\<beta>\n\ngoal (1 subgoal):\n 1. r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta> = r \\<down>l \\<beta>", "by auto"], ["proof (state)\nthis:\n  r \\<down>l \\<sigma>1 \\<union> r \\<down>l \\<beta> = r \\<down>l \\<beta>\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "from w"], ["proof (chain)\npicking this:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> +\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>l \\<beta>) =\n  {#}", "have  \"?M3 = {#}\""], ["proof (prove)\nusing this:\n  r|\\<sigma>1| -s r \\<down>l \\<beta> +\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>l \\<beta>) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n     r \\<down>l \\<beta>) =\n    {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>l \\<beta>) =\n  {#}\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"r|\\<sigma>3|-s (ds r {\\<alpha>} \\<union> ds r (set \\<beta>)) = {#}\""], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<sigma>1 \\<union>\n   r \\<down>l \\<beta>) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>s {\\<alpha>} \\<union> r \\<down>s set \\<beta>) =\n    {#}", "unfolding Un_assoc sub2"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s (r \\<down>l [\\<alpha>] \\<union> r \\<down>l \\<beta>) = {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>s {\\<alpha>} \\<union> r \\<down>s set \\<beta>) =\n    {#}", "unfolding dl_def"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s\n  (r \\<down>s set [\\<alpha>] \\<union> r \\<down>s set \\<beta>) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s\n    (r \\<down>s {\\<alpha>} \\<union> r \\<down>s set \\<beta>) =\n    {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>3| -s (r \\<down>s {\\<alpha>} \\<union> r \\<down>s set \\<beta>) =\n  {#}\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"r|\\<sigma>3|-s (ds r ({\\<alpha>} \\<union> (set \\<beta>))) = {#}\""], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s (r \\<down>s {\\<alpha>} \\<union> r \\<down>s set \\<beta>) =\n  {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s r \\<down>s ({\\<alpha>} \\<union> set \\<beta>) = {#}", "unfolding lemma2_6_1_set[symmetric]"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s r \\<down>s ({\\<alpha>} \\<union> set \\<beta>) = {#}\n\ngoal (1 subgoal):\n 1. r|\\<sigma>3| -s r \\<down>s ({\\<alpha>} \\<union> set \\<beta>) = {#}", "by metis"], ["proof (state)\nthis:\n  r|\\<sigma>3| -s r \\<down>s ({\\<alpha>} \\<union> set \\<beta>) = {#}\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"set_mset r|\\<sigma>3| \\<subseteq> ds r ({\\<alpha>} \\<union> (set \\<beta>))\""], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s r \\<down>s ({\\<alpha>} \\<union> set \\<beta>) = {#}\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>3|\n    \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)", "using remove_empty_implies_subset"], ["proof (prove)\nusing this:\n  r|\\<sigma>3| -s r \\<down>s ({\\<alpha>} \\<union> set \\<beta>) = {#}\n  ?M -s ?S = {#} \\<Longrightarrow> set_mset ?M \\<subseteq> ?S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>3|\n    \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)", "by auto"], ["proof (state)\nthis:\n  set_mset r|\\<sigma>3|\n  \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence sigma3: \"set \\<sigma>3 \\<subseteq> ds r ({\\<alpha>} \\<union> (set \\<beta>))\""], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>3|\n  \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. set \\<sigma>3 \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)", "using lexmax_set[OF assms(1)]"], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>3|\n  \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n  set_mset r|?\\<sigma>| \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set ?\\<sigma> \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. set \\<sigma>3 \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)", "by auto"], ["proof (state)\nthis:\n  set \\<sigma>3 \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (2 subgoals):\n 1. \\<alpha> \\<in># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n 2. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "using sigma sigma1 sigma2 sigma3"], ["proof (prove)\nusing this:\n  \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>\n  length [\\<alpha>] \\<le> 1 \\<and> set [\\<alpha>] \\<subseteq> {\\<alpha>}\n  set \\<sigma>3 \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "unfolding dl_def"], ["proof (prove)\nusing this:\n  \\<sigma> = \\<sigma>1 @ [\\<alpha>] @ \\<sigma>3\n  set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>\n  length [\\<alpha>] \\<le> 1 \\<and> set [\\<alpha>] \\<subseteq> {\\<alpha>}\n  set \\<sigma>3 \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>s set (\\<alpha> # \\<beta>)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma> = \\<sigma>1 @ \\<alpha> # \\<sigma>3;\n     set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta>;\n     set \\<sigma>3\n     \\<subseteq> r \\<down>s insert \\<alpha> (set \\<beta>)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<sigma>1a \\<sigma>2 \\<sigma>3a.\n                         \\<sigma>1 @ \\<alpha> # \\<sigma>3 =\n                         \\<sigma>1a @ \\<sigma>2 @ \\<sigma>3a \\<and>\n                         set \\<sigma>1a\n                         \\<subseteq> r \\<down>s set \\<beta> \\<and>\n                         length \\<sigma>2 \\<le> Suc 0 \\<and>\n                         set \\<sigma>2 \\<subseteq> {\\<alpha>} \\<and>\n                         set \\<sigma>3a\n                         \\<subseteq> r \\<down>s\n                                     insert \\<alpha> (set \\<beta>)", "by (metis One_nat_def append_Cons append_Nil sigma2)"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n      set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n      length \\<sigma>2 \\<le> 1 \\<and>\n      set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n     set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "case False"], ["proof (state)\nthis:\n  \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"set_mset ?M \\<subseteq> dm r {#\\<alpha>#}\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta>\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<sigma>| -s r \\<down>l \\<beta>)\n    \\<subseteq> r \\<down>m {#\\<alpha>#}", "using mul_eq_singleton[OF k]"], ["proof (prove)\nusing this:\n  \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta>\n  r|\\<sigma>| -s r \\<down>l \\<beta> = {#\\<alpha>#} \\<or>\n  set_mset (r|\\<sigma>| -s r \\<down>l \\<beta>)\n  \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<sigma>| -s r \\<down>l \\<beta>)\n    \\<subseteq> r \\<down>m {#\\<alpha>#}", "by (auto dest: diff_eq_singleton_imp)"], ["proof (state)\nthis:\n  set_mset (r|\\<sigma>| -s r \\<down>l \\<beta>)\n  \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"set_mset r|\\<sigma>| \\<subseteq> ds r ({\\<alpha>} \\<union> (set \\<beta>))\""], ["proof (prove)\nusing this:\n  set_mset (r|\\<sigma>| -s r \\<down>l \\<beta>)\n  \\<subseteq> r \\<down>m {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>|\n    \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)", "unfolding diff_def dm_def dl_def ds_def"], ["proof (prove)\nusing this:\n  set_mset\n   {#x \\<in># r|\\<sigma>|.\n    x \\<notin> {y. \\<exists>x\\<in>set \\<beta>. (y, x) \\<in> r}#}\n  \\<subseteq> {y. \\<exists>x\\<in>#{#\\<alpha>#}. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>|\n    \\<subseteq> {y. \\<exists>x\\<in>{\\<alpha>} \\<union> set \\<beta>.\n                       (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  set_mset r|\\<sigma>|\n  \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "hence \"set \\<sigma> \\<subseteq> ds r ({\\<alpha>} \\<union> (set \\<beta>))\""], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>|\n  \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. set \\<sigma> \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)", "using lexmax_set[OF assms(1)]"], ["proof (prove)\nusing this:\n  set_mset r|\\<sigma>|\n  \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n  set_mset r|?\\<sigma>| \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set ?\\<sigma> \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. set \\<sigma> \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)", "by auto"], ["proof (state)\nthis:\n  set \\<sigma> \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<notin># r|\\<sigma>| -s r \\<down>l \\<beta> \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  set \\<sigma> \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)", "unfolding dl_def"], ["proof (prove)\nusing this:\n  set \\<sigma> \\<subseteq> r \\<down>s ({\\<alpha>} \\<union> set \\<beta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n        set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta> \\<and>\n        length \\<sigma>2 \\<le> 1 \\<and>\n        set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>s set (\\<alpha> # \\<beta>)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. set \\<sigma>\n    \\<subseteq> r \\<down>s insert \\<alpha> (set \\<beta>) \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n       set \\<sigma>1 \\<subseteq> r \\<down>s set \\<beta> \\<and>\n       length \\<sigma>2 \\<le> Suc 0 \\<and>\n       set \\<sigma>2 \\<subseteq> {\\<alpha>} \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>s insert \\<alpha> (set \\<beta>)", "by (metis append_Nil bot_least empty_set le0 length_0_conv)"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n      set \\<sigma>1 \\<subseteq> r \\<down>l \\<beta> \\<and>\n      length \\<sigma>2 \\<le> 1 \\<and>\n      set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n     set \\<sigma>3 \\<subseteq> r \\<down>l (\\<alpha> # \\<beta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proposition3_4_inv_step:\nassumes t: \"trans r\" and i: \"irrefl r\" and k:\"(r|\\<sigma>| -s r \\<down>l [\\<beta>], {#\\<alpha>#}) \\<in> mul_eq r\" (is \"(?M,_) \\<in> _\")\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3. ((\\<sigma> = \\<sigma>1@\\<sigma>2@\\<sigma>3) \\<and> LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n       LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3", "using proposition3_4_inv_lists[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n      set \\<sigma>1 \\<subseteq> r \\<down>l [\\<beta>] \\<and>\n      length \\<sigma>2 \\<le> 1 \\<and>\n      set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n     set \\<sigma>3 \\<subseteq> r \\<down>l [\\<alpha>, \\<beta>]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n       LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3", "unfolding LD_1'_def dl_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     (\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n      set \\<sigma>1 \\<subseteq> r \\<down>s set [\\<beta>] \\<and>\n      length \\<sigma>2 \\<le> 1 \\<and>\n      set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n     set \\<sigma>3 \\<subseteq> r \\<down>s set [\\<alpha>, \\<beta>]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n       set \\<sigma>1 \\<subseteq> r \\<down>s {\\<beta>} \\<and>\n       length \\<sigma>2 \\<le> 1 \\<and>\n       set \\<sigma>2 \\<subseteq> {\\<alpha>} \\<and>\n       set \\<sigma>3 \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "by auto"], ["", "lemma proposition3_4_inv:\nassumes t: \"trans r\" and i: \"irrefl r\" and \"D r [\\<beta>] [\\<alpha>] \\<sigma> \\<tau>\"\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3. (\\<sigma> = \\<sigma>1@\\<sigma>2@\\<sigma>3 \\<and> \\<tau> = \\<tau>1@\\<tau>2@\\<tau>3 \\<and> LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3.\n       \\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n       \\<tau> = \\<tau>1 @ \\<tau>2 @ \\<tau>3 \\<and>\n       LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2\n        \\<tau>3", "using proposition3_4_inv_step[OF assms(1,2)] D_eq[OF assms]"], ["proof (prove)\nusing this:\n  (r|?\\<sigma>| -s r \\<down>l [?\\<beta>], {#?\\<alpha>#})\n  \\<in> mul_eq r \\<Longrightarrow>\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     ?\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n     LD_1' r ?\\<beta> ?\\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\n  (r|\\<tau>| -s r \\<down>l [\\<alpha>], r|[\\<beta>]|) \\<in> mul_eq r\n  (r|\\<sigma>| -s r \\<down>l [\\<beta>], r|[\\<alpha>]|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3.\n       \\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n       \\<tau> = \\<tau>1 @ \\<tau>2 @ \\<tau>3 \\<and>\n       LD' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2\n        \\<tau>3", "unfolding lexmax_singleton LD'_def"], ["proof (prove)\nusing this:\n  (r|?\\<sigma>| -s r \\<down>l [?\\<beta>], {#?\\<alpha>#})\n  \\<in> mul_eq r \\<Longrightarrow>\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     ?\\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n     LD_1' r ?\\<beta> ?\\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3\n  (r|\\<tau>| -s r \\<down>l [\\<alpha>], {#\\<beta>#}) \\<in> mul_eq r\n  (r|\\<sigma>| -s r \\<down>l [\\<beta>], {#\\<alpha>#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3 \\<tau>1 \\<tau>2 \\<tau>3.\n       \\<sigma> = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n       \\<tau> = \\<tau>1 @ \\<tau>2 @ \\<tau>3 \\<and>\n       LD_1' r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and>\n       LD_1' r \\<alpha> \\<beta> \\<tau>1 \\<tau>2 \\<tau>3", "by metis"], ["", "text \\<open>Lemma 3.5\\<close>"], ["", "lemma lemma3_5_1:\nassumes t: \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" and \"D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\"\nshows \"(lexmax r (\\<tau> @ \\<upsilon> @ \\<sigma>''), lexmax r (\\<tau> @ \\<upsilon>) + lexmax r \\<sigma>) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "have \"lexmax r (\\<tau> @ \\<upsilon> @ \\<sigma>'') = (lexmax r (\\<tau> @ \\<upsilon>) + ((lexmax r \\<sigma>'') -s (dl r (\\<tau>@\\<upsilon>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau> @ \\<upsilon> @ \\<sigma>''| =\n    r|\\<tau> @ \\<upsilon>| +\n    r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)", "unfolding append_assoc[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|(\\<tau> @ \\<upsilon>) @ \\<sigma>''| =\n    r|\\<tau> @ \\<upsilon>| +\n    r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)", "using lemma3_2_2"], ["proof (prove)\nusing this:\n  ?r|?\\<sigma> @ ?\\<tau>| =\n  ?r|?\\<sigma>| + ?r|?\\<tau>| -s ?r \\<down>l ?\\<sigma>\n\ngoal (1 subgoal):\n 1. r|(\\<tau> @ \\<upsilon>) @ \\<sigma>''| =\n    r|\\<tau> @ \\<upsilon>| +\n    r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)", "by fast"], ["proof (state)\nthis:\n  r|\\<tau> @ \\<upsilon> @ \\<sigma>''| =\n  r|\\<tau> @ \\<upsilon>| + r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  r|\\<tau> @ \\<upsilon> @ \\<sigma>''| =\n  r|\\<tau> @ \\<upsilon>| + r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "have x:\"\\<dots> = lexmax r (\\<tau>@\\<upsilon>) + (((lexmax r \\<sigma>'') -s dl r \\<upsilon>) -s dl r \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau> @ \\<upsilon>| +\n    r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>) =\n    r|\\<tau> @ \\<upsilon>| +\n    r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>", "by (auto simp: lemma2_6_1_list lemmaA_3_9 Un_commute)"], ["proof (state)\nthis:\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>) =\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>) =\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "have \"(\\<dots>,lexmax r (\\<tau>@\\<upsilon>) + (lexmax r \\<sigma>' -s dl r \\<tau>)) \\<in> mul_eq r\" (is \"(_,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon>| +\n     r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "using lemma2_6_6_a[OF t lemma2_6_5_a'[OF t D_eq(2)[OF assms(1,2,4)]]]"], ["proof (prove)\nusing this:\n  (?Q + r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>s ?S1,\n   ?Q + r|\\<sigma>'| -s r \\<down>s ?S1)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon>| +\n     r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "unfolding dl_def"], ["proof (prove)\nusing this:\n  (?Q + r|\\<sigma>''| -s r \\<down>s set \\<upsilon> -s r \\<down>s ?S1,\n   ?Q + r|\\<sigma>'| -s r \\<down>s ?S1)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon>| +\n     r|\\<sigma>''| -s r \\<down>s set \\<upsilon> -s r \\<down>s set \\<tau>,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>s set \\<tau>)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<tau> @ \\<upsilon>| +\n   r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  (r|\\<tau> @ \\<upsilon>| +\n   r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "have \"(?R,lexmax r (\\<tau>@\\<upsilon>) + lexmax r \\<sigma>) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "using lemma2_6_6_a[OF t D_eq(2)[OF assms(1-3)]]"], ["proof (prove)\nusing this:\n  (?Q + r|\\<sigma>'| -s r \\<down>l \\<tau>, ?Q + r|\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "ultimately"], ["proof (chain)\npicking this:\n  r|\\<tau> @ \\<upsilon> @ \\<sigma>''| =\n  r|\\<tau> @ \\<upsilon>| + r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>) =\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>\n  (r|\\<tau> @ \\<upsilon>| +\n   r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n  \\<in> mul_eq r", "show ?thesis"], ["proof (prove)\nusing this:\n  r|\\<tau> @ \\<upsilon> @ \\<sigma>''| =\n  r|\\<tau> @ \\<upsilon>| + r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>) =\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>\n  (r|\\<tau> @ \\<upsilon>| +\n   r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "using mul_eq_trans[OF t]"], ["proof (prove)\nusing this:\n  r|\\<tau> @ \\<upsilon> @ \\<sigma>''| =\n  r|\\<tau> @ \\<upsilon>| + r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>)\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l (\\<tau> @ \\<upsilon>) =\n  r|\\<tau> @ \\<upsilon>| +\n  r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>\n  (r|\\<tau> @ \\<upsilon>| +\n   r|\\<sigma>''| -s r \\<down>l \\<upsilon> -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<tau> @ \\<upsilon>| + r|\\<sigma>'| -s r \\<down>l \\<tau>,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n  \\<lbrakk>(?M, ?N) \\<in> mul_eq r; (?N, ?P) \\<in> mul_eq r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?P) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n   r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma claim1: assumes t: \"trans r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"(r|\\<sigma>@\\<tau>'| + ((r|\\<upsilon>'| -s r \\<down>l (\\<sigma>@\\<tau>')) \\<inter>s r \\<down>l \\<tau>),r|\\<sigma>| + r|\\<tau>| ) \\<in> mul_eq r\" (is \"(?F+?H,?G) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>|)\n    \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>|)\n    \\<in> mul_eq r", "have 1: \"(?F,?G) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'|, r|\\<sigma>| + r|\\<tau>|) \\<in> mul_eq r", "using assms(2)"], ["proof (prove)\nusing this:\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'|, r|\\<sigma>| + r|\\<tau>|) \\<in> mul_eq r", "unfolding D_def"], ["proof (prove)\nusing this:\n  (r|\\<sigma> @ \\<tau>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r \\<and>\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'|, r|\\<sigma>| + r|\\<tau>|) \\<in> mul_eq r", "by (auto simp: union_commute)"], ["proof (state)\nthis:\n  (r|\\<sigma> @ \\<tau>'|, r|\\<sigma>| + r|\\<tau>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>|)\n    \\<in> mul_eq r", "have 2: \"set_mset ?H \\<subseteq> (dm r ?G) - (dm r ?F)\" (is \"(?L \\<subseteq> _)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "have \"set_mset ?H = set_mset ((lexmax r \\<upsilon>' \\<inter>s dl r \\<tau>) -s dl r (\\<sigma>@\\<tau>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>) =\n    set_mset\n     (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n      r \\<down>l (\\<sigma> @ \\<tau>'))", "unfolding lemmaA_3_11"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n      r \\<down>l (\\<sigma> @ \\<tau>')) =\n    set_mset\n     (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n      r \\<down>l (\\<sigma> @ \\<tau>'))", "by auto"], ["proof (state)\nthis:\n  set_mset\n   (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau>) =\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "moreover"], ["proof (state)\nthis:\n  set_mset\n   (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau>) =\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "have  \"\\<dots> \\<subseteq> (dl r \\<tau> - dl r (\\<sigma>@\\<tau>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n      r \\<down>l (\\<sigma> @ \\<tau>'))\n    \\<subseteq> r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')", "unfolding diff_def intersect_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset\n     {#x \\<in># {#x \\<in># r|\\<upsilon>'|. x \\<in> r \\<down>l \\<tau>#}.\n      x \\<notin> r \\<down>l (\\<sigma> @ \\<tau>')#}\n    \\<subseteq> r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')", "by auto"], ["proof (state)\nthis:\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  \\<subseteq> r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "moreover"], ["proof (state)\nthis:\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  \\<subseteq> r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "have \"... \\<subseteq> ((dl r \\<sigma> \\<union> dl r \\<tau>) - dl r (\\<sigma>@\\<tau>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n    \\<subseteq> r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau> -\n                r \\<down>l (\\<sigma> @ \\<tau>')", "by auto"], ["proof (state)\nthis:\n  r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n  \\<subseteq> r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau> -\n              r \\<down>l (\\<sigma> @ \\<tau>')\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "ultimately"], ["proof (chain)\npicking this:\n  set_mset\n   (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau>) =\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  \\<subseteq> r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n  r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n  \\<subseteq> r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau> -\n              r \\<down>l (\\<sigma> @ \\<tau>')", "show ?thesis"], ["proof (prove)\nusing this:\n  set_mset\n   (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau>) =\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  \\<subseteq> r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n  r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n  \\<subseteq> r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau> -\n              r \\<down>l (\\<sigma> @ \\<tau>')\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n                r \\<down>m r|\\<sigma> @ \\<tau>'|", "unfolding lemma2_6_1_multiset lemma3_2_1[OF t]"], ["proof (prove)\nusing this:\n  set_mset\n   (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau>) =\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  set_mset\n   (r|\\<upsilon>'| \\<inter>s r \\<down>l \\<tau> -s\n    r \\<down>l (\\<sigma> @ \\<tau>'))\n  \\<subseteq> r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n  r \\<down>l \\<tau> - r \\<down>l (\\<sigma> @ \\<tau>')\n  \\<subseteq> r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau> -\n              r \\<down>l (\\<sigma> @ \\<tau>')\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n      r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau> -\n                r \\<down>l (\\<sigma> @ \\<tau>')", "by auto"], ["proof (state)\nthis:\n  set_mset\n   (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau>)\n  \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n              r \\<down>m r|\\<sigma> @ \\<tau>'|\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_mset\n   (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau>)\n  \\<subseteq> r \\<down>m (r|\\<sigma>| + r|\\<tau>|) -\n              r \\<down>m r|\\<sigma> @ \\<tau>'|\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>|)\n    \\<in> mul_eq r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>|)\n    \\<in> mul_eq r", "using lemma2_6_7_a[OF t 2 1]"], ["proof (prove)\nusing this:\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n   r \\<down>l \\<tau> +\n   r|\\<sigma> @ \\<tau>'|,\n   r|\\<sigma>| + r|\\<tau>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>|)\n    \\<in> mul_eq r", "by (auto simp: union_commute)"], ["proof (state)\nthis:\n  (r|\\<sigma> @ \\<tau>'| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n   r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>|)\n  \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step3: assumes t:\"trans r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"r \\<down>l (\\<sigma>@\\<tau>) \\<supseteq> (r \\<down>m (r|\\<sigma>'| + r|\\<tau>| ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)\n    \\<subseteq> r \\<down>l (\\<sigma> @ \\<tau>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)\n    \\<subseteq> r \\<down>l (\\<sigma> @ \\<tau>)", "have a: \"dl r (\\<sigma>@\\<tau>) = dm r (lexmax r \\<tau> + lexmax r \\<sigma>)\" and b: \"dl r (\\<tau>@\\<sigma>') = dm r (lexmax r \\<sigma>' + lexmax r \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>l (\\<sigma> @ \\<tau>) =\n    r \\<down>m (r|\\<tau>| + r|\\<sigma>|) &&&\n    r \\<down>l (\\<tau> @ \\<sigma>') = r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)", "unfolding lemma2_6_1_list lemma3_2_1[OF t,symmetric] lemma2_6_1_multiset"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m r|\\<sigma>| \\<union> r \\<down>m r|\\<tau>| =\n    r \\<down>m r|\\<tau>| \\<union> r \\<down>m r|\\<sigma>| &&&\n    r \\<down>m r|\\<tau>| \\<union> r \\<down>m r|\\<sigma>'| =\n    r \\<down>m r|\\<sigma>'| \\<union> r \\<down>m r|\\<tau>|", "by auto"], ["proof (state)\nthis:\n  r \\<down>l (\\<sigma> @ \\<tau>) = r \\<down>m (r|\\<tau>| + r|\\<sigma>|)\n  r \\<down>l (\\<tau> @ \\<sigma>') = r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)\n\ngoal (1 subgoal):\n 1. r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)\n    \\<subseteq> r \\<down>l (\\<sigma> @ \\<tau>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)\n    \\<subseteq> r \\<down>l (\\<sigma> @ \\<tau>)", "using assms(2) lemma2_6_2_b[OF t] lemma3_2_1[OF t,symmetric]"], ["proof (prove)\nusing this:\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n  (?M, ?N) \\<in> mul_eq r \\<Longrightarrow>\n  r \\<down>m ?M \\<subseteq> r \\<down>m ?N\n  r \\<down>l ?\\<sigma> = r \\<down>m r|?\\<sigma>|\n\ngoal (1 subgoal):\n 1. r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)\n    \\<subseteq> r \\<down>l (\\<sigma> @ \\<tau>)", "unfolding D_def a b[symmetric]"], ["proof (prove)\nusing this:\n  (r|\\<sigma> @ \\<tau>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r \\<and>\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n  (?M, ?N) \\<in> mul_eq r \\<Longrightarrow>\n  r \\<down>m ?M \\<subseteq> r \\<down>m ?N\n  r \\<down>l ?\\<sigma> = r \\<down>m r|?\\<sigma>|\n\ngoal (1 subgoal):\n 1. r \\<down>l (\\<tau> @ \\<sigma>')\n    \\<subseteq> r \\<down>m (r|\\<tau>| + r|\\<sigma>|)", "by auto"], ["proof (state)\nthis:\n  r \\<down>m (r|\\<sigma>'| + r|\\<tau>|)\n  \\<subseteq> r \\<down>l (\\<sigma> @ \\<tau>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma claim2: assumes t: \"trans r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"((r|\\<upsilon>'| -s  r \\<down>l (\\<sigma>@\\<tau>')) -s r \\<down>l \\<tau>, (r|\\<upsilon>'| -s r \\<down>l \\<sigma>') -s r \\<down>l \\<tau>) \\<in> mul_eq r\" (is \"(?L,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "have \"?L = lexmax r \\<upsilon>' -s (dl r (\\<sigma>@\\<tau>'@\\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau> =\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>)", "unfolding lemmaA_3_9 append_assoc[symmetric] lemma2_6_1_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<upsilon>'| -s\n    (r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau>' \\<union>\n     r \\<down>l \\<tau>) =\n    r|\\<upsilon>'| -s\n    (r \\<down>l \\<sigma> \\<union> r \\<down>l \\<tau>' \\<union>\n     r \\<down>l \\<tau>)", "by auto"], ["proof (state)\nthis:\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau> =\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>)\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau> =\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>)\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "have \"(\\<dots>,lexmax r \\<upsilon>' -s dl r (\\<sigma>@\\<tau>)) \\<in> mul_eq r\" (is \"(_,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>),\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>))\n    \\<in> mul_eq r", "using lemma2_6_8[OF t dl_monotone]"], ["proof (prove)\nusing this:\n  (?M -s ?r1 \\<down>l (?\\<sigma>1 @ ?\\<tau>'1 @ ?\\<tau>1),\n   ?M -s ?r1 \\<down>l (?\\<sigma>1 @ ?\\<tau>1))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>),\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>))\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "have  \"(?R,lexmax r \\<upsilon>' -s dm r (lexmax r \\<sigma>' + lexmax r \\<tau>)) \\<in> mul_eq r\" (is \"(_,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>),\n     r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n    \\<in> mul_eq r", "using lemma2_6_8[OF t step3[OF assms]]"], ["proof (prove)\nusing this:\n  (?M -s r \\<down>l (\\<sigma> @ \\<tau>),\n   ?M -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>),\n     r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "have \"?R = (lexmax r \\<upsilon>' -s dl r \\<sigma>') -s dl r \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|) =\n    r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>", "unfolding lemma3_2_1[OF t,symmetric] lemma2_6_1_multiset lemmaA_3_9[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<upsilon>'| -s r \\<down>m r|\\<sigma>'| -s r \\<down>m r|\\<tau>| =\n    r|\\<upsilon>'| -s r \\<down>m r|\\<sigma>'| -s r \\<down>m r|\\<tau>|", "by auto"], ["proof (state)\nthis:\n  r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|) =\n  r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "ultimately"], ["proof (chain)\npicking this:\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau> =\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>)\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>))\n  \\<in> mul_eq r\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n  \\<in> mul_eq r\n  r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|) =\n  r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau> =\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>)\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>))\n  \\<in> mul_eq r\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n  \\<in> mul_eq r\n  r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|) =\n  r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "using mul_eq_trans[OF t]"], ["proof (prove)\nusing this:\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau> =\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>)\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>' @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>))\n  \\<in> mul_eq r\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>),\n   r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|))\n  \\<in> mul_eq r\n  r|\\<upsilon>'| -s r \\<down>m (r|\\<sigma>'| + r|\\<tau>|) =\n  r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>\n  \\<lbrakk>(?M, ?N) \\<in> mul_eq r; (?N, ?P) \\<in> mul_eq r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?P) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma3_5_2: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" and \"D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\"\n shows \"(r|(\\<sigma> @ \\<tau>' @ \\<upsilon>')|, r|\\<sigma>| + r|(\\<tau>@\\<upsilon>)| ) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "have 0: \"lexmax r (\\<sigma>@\\<tau>'@\\<upsilon>') = lexmax r (\\<sigma>@\\<tau>') + (lexmax r \\<upsilon>' -s dl r (\\<sigma>@\\<tau>'))\" (is \"?L = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma> @ \\<tau>' @ \\<upsilon>'| =\n    r|\\<sigma> @ \\<tau>'| +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>')", "unfolding append_assoc[symmetric] lemma3_2_2"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma> +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n    r|\\<sigma>| + r|\\<tau>'| -s r \\<down>l \\<sigma> +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>')", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma> @ \\<tau>' @ \\<upsilon>'| =\n  r|\\<sigma> @ \\<tau>'| + r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>')\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  r|\\<sigma> @ \\<tau>' @ \\<upsilon>'| =\n  r|\\<sigma> @ \\<tau>'| + r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>')\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "have \"\\<dots> = lexmax r (\\<sigma>@\\<tau>') + ((lexmax r \\<upsilon>' -s dl r (\\<sigma>@\\<tau>')) \\<inter>s dl r \\<tau>) + ((lexmax r \\<upsilon>' -s dl r (\\<sigma>@\\<tau>')) -s dl r \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma> @ \\<tau>'| +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n    r|\\<sigma> @ \\<tau>'| +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau> +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>", "using lemmaA_3_10"], ["proof (prove)\nusing this:\n  ?M = ?M \\<inter>s ?S + ?M -s ?S\n\ngoal (1 subgoal):\n 1. r|\\<sigma> @ \\<tau>'| +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n    r|\\<sigma> @ \\<tau>'| +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n    r \\<down>l \\<tau> +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>", "unfolding union_assoc"], ["proof (prove)\nusing this:\n  ?M = ?M \\<inter>s ?S + ?M -s ?S\n\ngoal (1 subgoal):\n 1. r|\\<sigma> @ \\<tau>'| +\n    r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n    r|\\<sigma> @ \\<tau>'| +\n    (r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau> +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n  r \\<down>l \\<tau> +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n  r \\<down>l \\<tau> +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "have \"(\\<dots>, lexmax r \\<sigma> + lexmax r \\<tau> + ((lexmax r \\<upsilon>' -s dl r (\\<sigma>@\\<tau>')) -s dl r \\<tau>)) \\<in> mul_eq r\" (is \"(_,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau> +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "using assms claim1 lemma2_6_6_a union_commute"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n  D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\n  \\<lbrakk>trans ?r; D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> (?r|?\\<sigma> @ ?\\<tau>'| +\n                     ?r|?\\<upsilon>'| -s\n                     ?r \\<down>l (?\\<sigma> @ ?\\<tau>') \\<inter>s\n                     ?r \\<down>l ?\\<tau>,\n                     ?r|?\\<sigma>| + ?r|?\\<tau>|)\n                    \\<in> mul_eq ?r\n  \\<lbrakk>trans ?r; (?M, ?N) \\<in> mul_eq ?r\\<rbrakk>\n  \\<Longrightarrow> (?Q + ?M, ?Q + ?N) \\<in> mul_eq ?r\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>'| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n     r \\<down>l \\<tau> +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (r|\\<sigma> @ \\<tau>'| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n   r \\<down>l \\<tau> +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  (r|\\<sigma> @ \\<tau>'| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n   r \\<down>l \\<tau> +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "have \"(?R, lexmax r \\<sigma> + lexmax r \\<tau> + (((lexmax r \\<upsilon>' -s dl r \\<sigma>') -s dl r \\<tau>))) \\<in> mul_eq r\" (is \"(_,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "using lemma2_6_6_a[OF assms(1) claim2[OF assms(1,3)]]"], ["proof (prove)\nusing this:\n  (?Q +\n   r|?\\<upsilon>'1| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   ?Q + r|?\\<upsilon>'1| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "have \"(?R, lexmax r \\<sigma> + lexmax r \\<tau> + lexmax r \\<upsilon> -s dl r \\<tau>) \\<in> mul_eq r\" (is \"(_,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "using lemma2_6_6_a[OF assms(1) lemma2_6_5_a'[OF assms(1) D_eq(1)[OF assms(1,2,4)]]]"], ["proof (prove)\nusing this:\n  (?Q + r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>s ?S1,\n   ?Q + r|\\<upsilon>| -s r \\<down>s ?S1)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "unfolding dl_def"], ["proof (prove)\nusing this:\n  (?Q + r|\\<upsilon>'| -s r \\<down>s set \\<sigma>' -s r \\<down>s ?S1,\n   ?Q + r|\\<upsilon>| -s r \\<down>s ?S1)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>| + r|\\<tau>| +\n     r|\\<upsilon>'| -s r \\<down>s set \\<sigma>' -s r \\<down>s set \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>s set \\<tau>)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "moreover"], ["proof (state)\nthis:\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "have \"?R = lexmax r \\<sigma> + lexmax r (\\<tau>@\\<upsilon>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n    r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|", "unfolding union_assoc lemma3_2_2"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>| + (r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>) =\n    r|\\<sigma>| + (r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "ultimately"], ["proof (chain)\npicking this:\n  r|\\<sigma> @ \\<tau>' @ \\<upsilon>'| =\n  r|\\<sigma> @ \\<tau>'| + r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>')\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n  r \\<down>l \\<tau> +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>\n  (r|\\<sigma> @ \\<tau>'| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n   r \\<down>l \\<tau> +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|", "show ?thesis"], ["proof (prove)\nusing this:\n  r|\\<sigma> @ \\<tau>' @ \\<upsilon>'| =\n  r|\\<sigma> @ \\<tau>'| + r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>')\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n  r \\<down>l \\<tau> +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>\n  (r|\\<sigma> @ \\<tau>'| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n   r \\<down>l \\<tau> +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "using mul_eq_trans[OF assms(1)]"], ["proof (prove)\nusing this:\n  r|\\<sigma> @ \\<tau>' @ \\<upsilon>'| =\n  r|\\<sigma> @ \\<tau>'| + r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>')\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') =\n  r|\\<sigma> @ \\<tau>'| +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n  r \\<down>l \\<tau> +\n  r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>\n  (r|\\<sigma> @ \\<tau>'| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') \\<inter>s\n   r \\<down>l \\<tau> +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l (\\<sigma> @ \\<tau>') -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  (r|\\<sigma>| + r|\\<tau>| +\n   r|\\<upsilon>'| -s r \\<down>l \\<sigma>' -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|\n  \\<lbrakk>(?M, ?N) \\<in> mul_eq r; (?N, ?P) \\<in> mul_eq r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?P) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n   r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n  \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma3_5: assumes \"trans r\" and \"irrefl r\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\" and \"D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\"\nshows \"D r (\\<tau>@\\<upsilon>) \\<sigma> \\<sigma>'' (\\<tau>'@\\<upsilon>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D r (\\<tau> @ \\<upsilon>) \\<sigma> \\<sigma>'' (\\<tau>' @ \\<upsilon>')", "unfolding D_def append_assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r \\<and>\n    (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "using assms lemma3_5_1 lemma3_5_2 union_commute"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n  D r \\<upsilon> \\<sigma>' \\<sigma>'' \\<upsilon>'\n  \\<lbrakk>trans ?r; irrefl ?r; D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>';\n   D ?r ?\\<upsilon> ?\\<sigma>' ?\\<sigma>'' ?\\<upsilon>'\\<rbrakk>\n  \\<Longrightarrow> (?r|?\\<tau> @ ?\\<upsilon> @ ?\\<sigma>''|,\n                     ?r|?\\<tau> @ ?\\<upsilon>| + ?r|?\\<sigma>|)\n                    \\<in> mul_eq ?r\n  \\<lbrakk>trans ?r; irrefl ?r; D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>';\n   D ?r ?\\<upsilon> ?\\<sigma>' ?\\<sigma>'' ?\\<upsilon>'\\<rbrakk>\n  \\<Longrightarrow> (?r|?\\<sigma> @ ?\\<tau>' @ ?\\<upsilon>'|,\n                     ?r|?\\<sigma>| + ?r|?\\<tau> @ ?\\<upsilon>|)\n                    \\<in> mul_eq ?r\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (r|\\<sigma> @ \\<tau>' @ \\<upsilon>'|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r \\<and>\n    (r|\\<tau> @ \\<upsilon> @ \\<sigma>''|,\n     r|\\<tau> @ \\<upsilon>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "by metis"], ["", "lemma step2: assumes \"trans r\" and \"\\<tau> \\<noteq> []\" shows \"(M \\<inter>s dl r \\<tau>,lexmax r \\<tau>) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  \\<tau> \\<noteq> []", "obtain x xs where \"\\<tau>=x#xs\""], ["proof (prove)\nusing this:\n  trans r\n  \\<tau> \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>x xs. \\<tau> = x # xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using list.exhaust"], ["proof (prove)\nusing this:\n  trans r\n  \\<tau> \\<noteq> []\n  \\<lbrakk>?y = [] \\<Longrightarrow> ?P;\n   \\<And>x21 x22. ?y = x21 # x22 \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>x xs. \\<tau> = x # xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<tau> = x # xs\n\ngoal (1 subgoal):\n 1. (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r", "hence x: \"lexmax r \\<tau> \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  \\<tau> = x # xs\n\ngoal (1 subgoal):\n 1. r|\\<tau>| \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  r|\\<tau>| \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<tau> \\<noteq> []", "have y: \"set_mset (M \\<inter>sdl r \\<tau>) \\<subseteq> dm r (lexmax r \\<tau>)\""], ["proof (prove)\nusing this:\n  \\<tau> \\<noteq> []\n\ngoal (1 subgoal):\n 1. set_mset (M \\<inter>s r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>m r|\\<tau>|", "unfolding lemma3_2_1[OF assms(1)] intersect_def"], ["proof (prove)\nusing this:\n  \\<tau> \\<noteq> []\n\ngoal (1 subgoal):\n 1. set_mset {#x \\<in># M. x \\<in> r \\<down>l \\<tau>#}\n    \\<subseteq> r \\<down>l \\<tau>", "by auto"], ["proof (state)\nthis:\n  set_mset (M \\<inter>s r \\<down>l \\<tau>) \\<subseteq> r \\<down>m r|\\<tau>|\n\ngoal (1 subgoal):\n 1. (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r", "using lemma2_6_4[OF assms(1) x y]"], ["proof (prove)\nusing this:\n  (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r", "by auto"], ["proof (state)\nthis:\n  (M \\<inter>s r \\<down>l \\<tau>, r|\\<tau>|) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 3.6\\<close>"], ["", "lemma lemma3_6: assumes t: \"trans r\" and ne: \"\\<tau> \\<noteq> []\" and D: \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"(r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau>@\\<upsilon>| ) \\<in> mul r\" (is \"(?L,?R) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "have \"?L = ((lexmax r \\<sigma>' + lexmax r \\<upsilon>) \\<inter>s dl r \\<tau>) + ((lexmax r \\<sigma>' + lexmax r \\<upsilon>) -s dl r \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>'| + r|\\<upsilon>| =\n    (r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n    (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>", "unfolding lemmaA_3_10[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>'| + r|\\<upsilon>| = r|\\<sigma>'| + r|\\<upsilon>|", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>'| + r|\\<upsilon>| =\n  (r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n  (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "moreover"], ["proof (state)\nthis:\n  r|\\<sigma>'| + r|\\<upsilon>| =\n  (r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n  (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "have \"(\\<dots>,lexmax r \\<tau> + ((lexmax r \\<sigma>' + lexmax r \\<upsilon>) -s dl r \\<tau>)) \\<in> mul r\" (is \"(_,?R2) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n     (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>,\n     r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>)\n    \\<in> mul r", "using lemma2_6_9[OF t step2[OF t ne]] union_commute"], ["proof (prove)\nusing this:\n  (?Q + ?M1 \\<inter>s r \\<down>l \\<tau>, ?Q + r|\\<tau>|) \\<in> mul r\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. ((r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n     (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>,\n     r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>)\n    \\<in> mul r", "by metis"], ["proof (state)\nthis:\n  ((r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n   (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>,\n   r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "moreover"], ["proof (state)\nthis:\n  ((r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n   (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>,\n   r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "have \"?R2 = lexmax r \\<tau> + (lexmax r \\<sigma>' -s dl r \\<tau>) + (lexmax r \\<upsilon> -s dl r \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau> =\n    r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n    r|\\<upsilon>| -s r \\<down>l \\<tau>", "unfolding lemmaA_3_8 union_assoc[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n    r|\\<upsilon>| -s r \\<down>l \\<tau> =\n    r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n    r|\\<upsilon>| -s r \\<down>l \\<tau>", "by auto"], ["proof (state)\nthis:\n  r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau> =\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "moreover"], ["proof (state)\nthis:\n  r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau> =\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "have \"\\<dots> = lexmax r (\\<tau>@\\<sigma>') + (lexmax r \\<upsilon> -s dl r \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n    r|\\<upsilon>| -s r \\<down>l \\<tau> =\n    r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>", "unfolding lemma3_2_2"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n    r|\\<upsilon>| -s r \\<down>l \\<tau> =\n    r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n    r|\\<upsilon>| -s r \\<down>l \\<tau>", "by auto"], ["proof (state)\nthis:\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "moreover"], ["proof (state)\nthis:\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "have \"(\\<dots>,lexmax r \\<sigma> + lexmax r \\<tau> + (lexmax r \\<upsilon> -s dl r \\<tau>)) \\<in> mul_eq r\" (is \"(_,?R5) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "using D"], ["proof (prove)\nusing this:\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "unfolding D_def"], ["proof (prove)\nusing this:\n  (r|\\<sigma> @ \\<tau>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r \\<and>\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "using lemma2_6_6_a[OF t] union_commute"], ["proof (prove)\nusing this:\n  (r|\\<sigma> @ \\<tau>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r \\<and>\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n  (?M, ?N) \\<in> mul_eq r \\<Longrightarrow>\n  (?Q + ?M, ?Q + ?N) \\<in> mul_eq r\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n     r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n    \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "moreover"], ["proof (state)\nthis:\n  (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "have \"?R5 = ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n    r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|", "unfolding lemma3_2_2 union_assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. r|\\<sigma>| + (r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>) =\n    r|\\<sigma>| + (r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)", "by auto"], ["proof (state)\nthis:\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "ultimately"], ["proof (chain)\npicking this:\n  r|\\<sigma>'| + r|\\<upsilon>| =\n  (r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n  (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>\n  ((r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n   (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>,\n   r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>)\n  \\<in> mul r\n  r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau> =\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau>\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>\n  (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|", "show ?thesis"], ["proof (prove)\nusing this:\n  r|\\<sigma>'| + r|\\<upsilon>| =\n  (r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n  (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>\n  ((r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n   (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>,\n   r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>)\n  \\<in> mul r\n  r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau> =\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau>\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>\n  (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "using mul_and_mul_eq_imp_mul t"], ["proof (prove)\nusing this:\n  r|\\<sigma>'| + r|\\<upsilon>| =\n  (r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n  (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>\n  ((r|\\<sigma>'| + r|\\<upsilon>|) \\<inter>s r \\<down>l \\<tau> +\n   (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>,\n   r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau>)\n  \\<in> mul r\n  r|\\<tau>| + (r|\\<sigma>'| + r|\\<upsilon>|) -s r \\<down>l \\<tau> =\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau>\n  r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau> +\n  r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>\n  (r|\\<tau> @ \\<sigma>'| + r|\\<upsilon>| -s r \\<down>l \\<tau>,\n   r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau>)\n  \\<in> mul_eq r\n  r|\\<sigma>| + r|\\<tau>| + r|\\<upsilon>| -s r \\<down>l \\<tau> =\n  r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|\n  \\<lbrakk>trans ?r; (?M, ?N) \\<in> mul ?r;\n   (?N, ?P) \\<in> mul_eq ?r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?P) \\<in> mul ?r\n  trans r\n\ngoal (1 subgoal):\n 1. (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n    \\<in> mul r", "by metis"], ["proof (state)\nthis:\n  (r|\\<sigma>'| + r|\\<upsilon>|, r|\\<sigma>| + r|\\<tau> @ \\<upsilon>|)\n  \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma3_6_v: assumes \"trans r\" and \"irrefl r\" and \"\\<sigma> \\<noteq> []\" and \"D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\"\nshows \"(r|\\<tau>'| + r|\\<upsilon>|, r|\\<tau>| + r|\\<sigma>@\\<upsilon>| ) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|\\<tau>'| + r|\\<upsilon>|, r|\\<tau>| + r|\\<sigma> @ \\<upsilon>|)\n    \\<in> mul r", "using assms lemma3_6 mirror_D"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  \\<sigma> \\<noteq> []\n  D r \\<tau> \\<sigma> \\<sigma>' \\<tau>'\n  \\<lbrakk>trans ?r; ?\\<tau> \\<noteq> [];\n   D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> (?r|?\\<sigma>'| + ?r|?\\<upsilon>|,\n                     ?r|?\\<sigma>| + ?r|?\\<tau> @ ?\\<upsilon>|)\n                    \\<in> mul ?r\n  \\<lbrakk>trans ?r; irrefl ?r;\n   D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> D ?r ?\\<sigma> ?\\<tau> ?\\<tau>' ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. (r|\\<tau>'| + r|\\<upsilon>|, r|\\<tau>| + r|\\<sigma> @ \\<upsilon>|)\n    \\<in> mul r", "by fast"], ["", "subsubsection \\<open>Labeled Rewriting\\<close>"], ["", "text \\<open>Theorem 3.7\\<close>"], ["", "type_synonym ('a,'b) lars = \"('a\\<times>'b\\<times>'a) set\""], ["", "type_synonym ('a,'b) seq = \"('a\\<times>('b\\<times>'a)list)\""], ["", "inductive_set seq :: \"('a,'b) lars \\<Rightarrow> ('a,'b) seq set\" for ars\n where \"(a,[]) \\<in> seq ars\"\n     | \"(a,\\<alpha>,b) \\<in> ars \\<Longrightarrow> (b,ss) \\<in> seq ars \\<Longrightarrow> (a,(\\<alpha>,b) # ss) \\<in> seq ars\""], ["", "definition lst :: \"('a,'b) seq \\<Rightarrow> 'a\"\n where \"lst ss = (if snd ss = [] then fst ss else snd (last (snd ss)))\""], ["", "text \\<open>results on seqs\\<close>"], ["", "lemma seq_tail1: assumes seq: \"(s,x#xs) \\<in> seq lars\"\nshows \"(snd x,xs) \\<in> seq lars\" and \"(s,fst x,snd x) \\<in> lars\" and \"lst (s,x#xs) = lst (snd x,xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq lars &&&\n    (s, fst x, snd x) \\<in> lars &&& lst (s, x # xs) = lst (snd x, xs)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. (snd x, xs) \\<in> seq lars\n 2. (s, fst x, snd x) \\<in> lars\n 3. lst (s, x # xs) = lst (snd x, xs)", "show \"(snd x,xs)\\<in> seq lars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq lars", "using assms"], ["proof (prove)\nusing this:\n  (s, x # xs) \\<in> seq lars\n\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq lars", "by (cases) auto"], ["proof (state)\nthis:\n  (snd x, xs) \\<in> seq lars\n\ngoal (2 subgoals):\n 1. (s, fst x, snd x) \\<in> lars\n 2. lst (s, x # xs) = lst (snd x, xs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, fst x, snd x) \\<in> lars\n 2. lst (s, x # xs) = lst (snd x, xs)", "show \"(s,fst x,snd x) \\<in> lars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, fst x, snd x) \\<in> lars", "using assms"], ["proof (prove)\nusing this:\n  (s, x # xs) \\<in> seq lars\n\ngoal (1 subgoal):\n 1. (s, fst x, snd x) \\<in> lars", "by (cases) auto"], ["proof (state)\nthis:\n  (s, fst x, snd x) \\<in> lars\n\ngoal (1 subgoal):\n 1. lst (s, x # xs) = lst (snd x, xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lst (s, x # xs) = lst (snd x, xs)", "show \"lst (s,x#xs) = lst (snd x,xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (s, x # xs) = lst (snd x, xs)", "using assms"], ["proof (prove)\nusing this:\n  (s, x # xs) \\<in> seq lars\n\ngoal (1 subgoal):\n 1. lst (s, x # xs) = lst (snd x, xs)", "unfolding lst_def"], ["proof (prove)\nusing this:\n  (s, x # xs) \\<in> seq lars\n\ngoal (1 subgoal):\n 1. (if snd (s, x # xs) = [] then fst (s, x # xs)\n     else snd (last (snd (s, x # xs)))) =\n    (if snd (snd x, xs) = [] then fst (snd x, xs)\n     else snd (last (snd (snd x, xs))))", "by (cases) auto"], ["proof (state)\nthis:\n  lst (s, x # xs) = lst (snd x, xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_chop: assumes \"(s,ss@ts) \\<in> seq ars\" shows \"(s,ss) \\<in> seq ars\" \"(lst(s,ss),ts) \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, ss) \\<in> seq ars &&& (lst (s, ss), ts) \\<in> seq ars", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, ss) \\<in> seq ars\n 2. (lst (s, ss), ts) \\<in> seq ars", "show \"(s,ss) \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, ss) \\<in> seq ars", "using assms"], ["proof (prove)\nusing this:\n  (s, ss @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, ss) \\<in> seq ars", "proof (induct ss arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ts) \\<in> seq ars \\<Longrightarrow> (s, []) \\<in> seq ars\n 2. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (s, ss) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss) \\<in> seq ars", "case Nil"], ["proof (state)\nthis:\n  (s, [] @ ts) \\<in> seq ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ts) \\<in> seq ars \\<Longrightarrow> (s, []) \\<in> seq ars\n 2. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (s, ss) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss) \\<in> seq ars", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, []) \\<in> seq ars", "using seq.intros(1)"], ["proof (prove)\nusing this:\n  (?a, []) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. (s, []) \\<in> seq ars", "by fast"], ["proof (state)\nthis:\n  (s, []) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (s, ss) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss) \\<in> seq ars", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (s, ss) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss) \\<in> seq ars", "case (Cons x xs)"], ["proof (state)\nthis:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow> (?s, xs) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (s, ss) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss) \\<in> seq ars", "hence k:\"(s,x#(xs@ts)) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow> (?s, xs) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, x # xs @ ts) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, x # xs @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (s, ss) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss) \\<in> seq ars", "from Cons"], ["proof (chain)\npicking this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow> (?s, xs) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars", "have \"(snd x,xs) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow> (?s, xs) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq ars", "using seq_tail1(1)"], ["proof (prove)\nusing this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow> (?s, xs) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (snd ?x, ?xs) \\<in> seq ?lars\n\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq ars", "unfolding append.simps"], ["proof (prove)\nusing this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow> (?s, xs) \\<in> seq ars\n  (s, x # xs @ ts) \\<in> seq ars\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (snd ?x, ?xs) \\<in> seq ?lars\n\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq ars", "by fast"], ["proof (state)\nthis:\n  (snd x, xs) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (s, ss) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss) \\<in> seq ars", "thus ?case"], ["proof (prove)\nusing this:\n  (snd x, xs) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, x # xs) \\<in> seq ars", "using seq.intros(2)[OF seq_tail1(2)[OF k]]"], ["proof (prove)\nusing this:\n  (snd x, xs) \\<in> seq ars\n  (snd x, ?ss) \\<in> seq ars \\<Longrightarrow>\n  (s, (fst x, snd x) # ?ss) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, x # xs) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, x # xs) \\<in> seq ars\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s, ss) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (lst (s, ss), ts) \\<in> seq ars", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (lst (s, ss), ts) \\<in> seq ars", "show \"(lst(s,ss),ts) \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lst (s, ss), ts) \\<in> seq ars", "using assms"], ["proof (prove)\nusing this:\n  (s, ss @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (lst (s, ss), ts) \\<in> seq ars", "proof (induct ss arbitrary:s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ts) \\<in> seq ars \\<Longrightarrow>\n       (lst (s, []), ts) \\<in> seq ars\n 2. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (lst (s, ss), ts) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (lst (s, a # ss), ts) \\<in> seq ars", "case Nil"], ["proof (state)\nthis:\n  (s, [] @ ts) \\<in> seq ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ts) \\<in> seq ars \\<Longrightarrow>\n       (lst (s, []), ts) \\<in> seq ars\n 2. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (lst (s, ss), ts) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (lst (s, a # ss), ts) \\<in> seq ars", "thus ?case"], ["proof (prove)\nusing this:\n  (s, [] @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (lst (s, []), ts) \\<in> seq ars", "unfolding lst_def"], ["proof (prove)\nusing this:\n  (s, [] @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (if snd (s, []) = [] then fst (s, []) else snd (last (snd (s, []))), ts)\n    \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (lst (s, []), ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (lst (s, ss), ts) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (lst (s, a # ss), ts) \\<in> seq ars", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (lst (s, ss), ts) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (lst (s, a # ss), ts) \\<in> seq ars", "case (Cons x xs)"], ["proof (state)\nthis:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow>\n  (lst (?s, xs), ts) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (lst (s, ss), ts) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (lst (s, a # ss), ts) \\<in> seq ars", "hence \"(lst (snd x,xs),ts) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow>\n  (lst (?s, xs), ts) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (lst (snd x, xs), ts) \\<in> seq ars", "using seq_tail1(1)"], ["proof (prove)\nusing this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow>\n  (lst (?s, xs), ts) \\<in> seq ars\n  (s, (x # xs) @ ts) \\<in> seq ars\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (snd ?x, ?xs) \\<in> seq ?lars\n\ngoal (1 subgoal):\n 1. (lst (snd x, xs), ts) \\<in> seq ars", "unfolding append.simps"], ["proof (prove)\nusing this:\n  (?s, xs @ ts) \\<in> seq ars \\<Longrightarrow>\n  (lst (?s, xs), ts) \\<in> seq ars\n  (s, x # xs @ ts) \\<in> seq ars\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (snd ?x, ?xs) \\<in> seq ?lars\n\ngoal (1 subgoal):\n 1. (lst (snd x, xs), ts) \\<in> seq ars", "by fast"], ["proof (state)\nthis:\n  (lst (snd x, xs), ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss @ ts) \\<in> seq ars \\<Longrightarrow>\n                   (lst (s, ss), ts) \\<in> seq ars;\n        (s, (a # ss) @ ts) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (lst (s, a # ss), ts) \\<in> seq ars", "thus ?case"], ["proof (prove)\nusing this:\n  (lst (snd x, xs), ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (lst (s, x # xs), ts) \\<in> seq ars", "unfolding lst_def"], ["proof (prove)\nusing this:\n  (if snd (snd x, xs) = [] then fst (snd x, xs)\n   else snd (last (snd (snd x, xs))),\n   ts)\n  \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (if snd (s, x # xs) = [] then fst (s, x # xs)\n     else snd (last (snd (s, x # xs))),\n     ts)\n    \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (lst (s, x # xs), ts) \\<in> seq ars\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (lst (s, ss), ts) \\<in> seq ars\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_concat_helper:\nassumes \"(s,ls) \\<in> seq ars\" and \"ss2 \\<in> seq ars\" and \"lst (s,ls) = fst ss2\"\nshows \"(s,ls@snd ss2) \\<in> seq ars \\<and> (lst (s,ls@snd ss2) = lst ss2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, ls @ snd ss2) \\<in> seq ars \\<and> lst (s, ls @ snd ss2) = lst ss2", "using assms"], ["proof (prove)\nusing this:\n  (s, ls) \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst (s, ls) = fst ss2\n\ngoal (1 subgoal):\n 1. (s, ls @ snd ss2) \\<in> seq ars \\<and> lst (s, ls @ snd ss2) = lst ss2", "proof (induct ls arbitrary: s ss2 rule:list.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s ss2.\n       \\<lbrakk>(s, []) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, []) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, [] @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, [] @ snd ss2) = lst ss2\n 2. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> seq ars; ss2 \\<in> seq ars;\n                    lst (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> seq ars \\<and>\n                                     lst (s, x2 @ snd ss2) = lst ss2;\n        (s, x1 # x2) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, (x1 # x2) @ snd ss2) = lst ss2", "case Nil"], ["proof (state)\nthis:\n  (s, []) \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst (s, []) = fst ss2\n\ngoal (2 subgoals):\n 1. \\<And>s ss2.\n       \\<lbrakk>(s, []) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, []) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, [] @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, [] @ snd ss2) = lst ss2\n 2. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> seq ars; ss2 \\<in> seq ars;\n                    lst (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> seq ars \\<and>\n                                     lst (s, x2 @ snd ss2) = lst ss2;\n        (s, x1 # x2) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, (x1 # x2) @ snd ss2) = lst ss2", "thus ?case"], ["proof (prove)\nusing this:\n  (s, []) \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst (s, []) = fst ss2\n\ngoal (1 subgoal):\n 1. (s, [] @ snd ss2) \\<in> seq ars \\<and> lst (s, [] @ snd ss2) = lst ss2", "unfolding lst_def"], ["proof (prove)\nusing this:\n  (s, []) \\<in> seq ars\n  ss2 \\<in> seq ars\n  (if snd (s, []) = [] then fst (s, []) else snd (last (snd (s, [])))) =\n  fst ss2\n\ngoal (1 subgoal):\n 1. (s, [] @ snd ss2) \\<in> seq ars \\<and>\n    (if snd (s, [] @ snd ss2) = [] then fst (s, [] @ snd ss2)\n     else snd (last (snd (s, [] @ snd ss2)))) =\n    (if snd ss2 = [] then fst ss2 else snd (last (snd ss2)))", "by auto"], ["proof (state)\nthis:\n  (s, [] @ snd ss2) \\<in> seq ars \\<and> lst (s, [] @ snd ss2) = lst ss2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> seq ars; ss2 \\<in> seq ars;\n                    lst (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> seq ars \\<and>\n                                     lst (s, x2 @ snd ss2) = lst ss2;\n        (s, x1 # x2) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, (x1 # x2) @ snd ss2) = lst ss2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> seq ars; ss2 \\<in> seq ars;\n                    lst (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> seq ars \\<and>\n                                     lst (s, x2 @ snd ss2) = lst ss2;\n        (s, x1 # x2) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, (x1 # x2) @ snd ss2) = lst ss2", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>(?s, xs) \\<in> seq ars; ?ss2.0 \\<in> seq ars;\n   lst (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> seq ars \\<and>\n                    lst (?s, xs @ snd ?ss2.0) = lst ?ss2.0\n  (s, x # xs) \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst (s, x # xs) = fst ss2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> seq ars; ss2 \\<in> seq ars;\n                    lst (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> seq ars \\<and>\n                                     lst (s, x2 @ snd ss2) = lst ss2;\n        (s, x1 # x2) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, (x1 # x2) @ snd ss2) = lst ss2", "hence \"(snd x,xs) \\<in> seq ars\" and mem:\"(s,fst x,snd x) \\<in> ars\" and \"lst (snd x,xs) = fst ss2\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s, xs) \\<in> seq ars; ?ss2.0 \\<in> seq ars;\n   lst (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> seq ars \\<and>\n                    lst (?s, xs @ snd ?ss2.0) = lst ?ss2.0\n  (s, x # xs) \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst (s, x # xs) = fst ss2\n\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq ars &&&\n    (s, fst x, snd x) \\<in> ars &&& lst (snd x, xs) = fst ss2", "using seq_tail1[OF Cons(2)] Cons(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s, xs) \\<in> seq ars; ?ss2.0 \\<in> seq ars;\n   lst (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> seq ars \\<and>\n                    lst (?s, xs @ snd ?ss2.0) = lst ?ss2.0\n  (s, x # xs) \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst (s, x # xs) = fst ss2\n  (snd x, xs) \\<in> seq ars\n  (s, fst x, snd x) \\<in> ars\n  lst (s, x # xs) = lst (snd x, xs)\n  lst (s, x # xs) = fst ss2\n\ngoal (1 subgoal):\n 1. (snd x, xs) \\<in> seq ars &&&\n    (s, fst x, snd x) \\<in> ars &&& lst (snd x, xs) = fst ss2", "by auto"], ["proof (state)\nthis:\n  (snd x, xs) \\<in> seq ars\n  (s, fst x, snd x) \\<in> ars\n  lst (snd x, xs) = fst ss2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> seq ars; ss2 \\<in> seq ars;\n                    lst (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> seq ars \\<and>\n                                     lst (s, x2 @ snd ss2) = lst ss2;\n        (s, x1 # x2) \\<in> seq ars; ss2 \\<in> seq ars;\n        lst (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> seq ars \\<and>\n                         lst (s, (x1 # x2) @ snd ss2) = lst ss2", "thus ?case"], ["proof (prove)\nusing this:\n  (snd x, xs) \\<in> seq ars\n  (s, fst x, snd x) \\<in> ars\n  lst (snd x, xs) = fst ss2\n\ngoal (1 subgoal):\n 1. (s, (x # xs) @ snd ss2) \\<in> seq ars \\<and>\n    lst (s, (x # xs) @ snd ss2) = lst ss2", "using Cons seq.intros(2)[OF mem]"], ["proof (prove)\nusing this:\n  (snd x, xs) \\<in> seq ars\n  (s, fst x, snd x) \\<in> ars\n  lst (snd x, xs) = fst ss2\n  \\<lbrakk>(?s, xs) \\<in> seq ars; ?ss2.0 \\<in> seq ars;\n   lst (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> seq ars \\<and>\n                    lst (?s, xs @ snd ?ss2.0) = lst ?ss2.0\n  (s, x # xs) \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst (s, x # xs) = fst ss2\n  (snd x, ?ss) \\<in> seq ars \\<Longrightarrow>\n  (s, (fst x, snd x) # ?ss) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, (x # xs) @ snd ss2) \\<in> seq ars \\<and>\n    lst (s, (x # xs) @ snd ss2) = lst ss2", "unfolding lst_def"], ["proof (prove)\nusing this:\n  (snd x, xs) \\<in> seq ars\n  (s, fst x, snd x) \\<in> ars\n  (if snd (snd x, xs) = [] then fst (snd x, xs)\n   else snd (last (snd (snd x, xs)))) =\n  fst ss2\n  \\<lbrakk>(?s, xs) \\<in> seq ars; ?ss2.0 \\<in> seq ars;\n   (if snd (?s, xs) = [] then fst (?s, xs) else snd (last (snd (?s, xs)))) =\n   fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> seq ars \\<and>\n                    (if snd (?s, xs @ snd ?ss2.0) = []\n                     then fst (?s, xs @ snd ?ss2.0)\n                     else snd (last (snd (?s, xs @ snd ?ss2.0)))) =\n                    (if snd ?ss2.0 = [] then fst ?ss2.0\n                     else snd (last (snd ?ss2.0)))\n  (s, x # xs) \\<in> seq ars\n  ss2 \\<in> seq ars\n  (if snd (s, x # xs) = [] then fst (s, x # xs)\n   else snd (last (snd (s, x # xs)))) =\n  fst ss2\n  (snd x, ?ss) \\<in> seq ars \\<Longrightarrow>\n  (s, (fst x, snd x) # ?ss) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, (x # xs) @ snd ss2) \\<in> seq ars \\<and>\n    (if snd (s, (x # xs) @ snd ss2) = [] then fst (s, (x # xs) @ snd ss2)\n     else snd (last (snd (s, (x # xs) @ snd ss2)))) =\n    (if snd ss2 = [] then fst ss2 else snd (last (snd ss2)))", "by auto"], ["proof (state)\nthis:\n  (s, (x # xs) @ snd ss2) \\<in> seq ars \\<and>\n  lst (s, (x # xs) @ snd ss2) = lst ss2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_concat:\n assumes \"ss1 \\<in> seq ars\" and \"ss2 \\<in> seq ars\" and \"lst ss1 = fst ss2\"\n shows \"(fst ss1,snd ss1@snd ss2) \\<in> seq ars\" and \"(lst (fst ss1,snd ss1@snd ss2) = lst ss2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> seq ars &&&\n    lst (fst ss1, snd ss1 @ snd ss2) = lst ss2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> seq ars\n 2. lst (fst ss1, snd ss1 @ snd ss2) = lst ss2", "show \"(fst ss1,snd ss1@snd ss2) \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> seq ars", "using seq_concat_helper assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s, ?ls) \\<in> seq ?ars; ?ss2.0 \\<in> seq ?ars;\n   lst (?s, ?ls) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, ?ls @ snd ?ss2.0) \\<in> seq ?ars \\<and>\n                    lst (?s, ?ls @ snd ?ss2.0) = lst ?ss2.0\n  ss1 \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst ss1 = fst ss2\n\ngoal (1 subgoal):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> seq ars", "by force"], ["proof (state)\nthis:\n  (fst ss1, snd ss1 @ snd ss2) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. lst (fst ss1, snd ss1 @ snd ss2) = lst ss2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lst (fst ss1, snd ss1 @ snd ss2) = lst ss2", "show \"(lst (fst ss1,snd ss1@snd ss2) = lst ss2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (fst ss1, snd ss1 @ snd ss2) = lst ss2", "using assms surjective_pairing seq_concat_helper"], ["proof (prove)\nusing this:\n  ss1 \\<in> seq ars\n  ss2 \\<in> seq ars\n  lst ss1 = fst ss2\n  ?t = (fst ?t, snd ?t)\n  \\<lbrakk>(?s, ?ls) \\<in> seq ?ars; ?ss2.0 \\<in> seq ?ars;\n   lst (?s, ?ls) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, ?ls @ snd ?ss2.0) \\<in> seq ?ars \\<and>\n                    lst (?s, ?ls @ snd ?ss2.0) = lst ?ss2.0\n\ngoal (1 subgoal):\n 1. lst (fst ss1, snd ss1 @ snd ss2) = lst ss2", "by metis"], ["proof (state)\nthis:\n  lst (fst ss1, snd ss1 @ snd ss2) = lst ss2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>diagrams\\<close>"], ["", "definition diagram :: \"('a,'b) lars \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<Rightarrow> bool\"\n where \"diagram ars d = (let (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>') = d in {\\<sigma>,\\<tau>,\\<sigma>',\\<tau>'} \\<subseteq> seq ars \\<and>\n   fst \\<sigma> = fst \\<tau> \\<and> lst \\<sigma> = fst \\<tau>' \\<and> lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>')\""], ["", "definition labels :: \"('a,'b) seq \\<Rightarrow> 'b list\"\n where \"labels ss = map fst (snd ss)\""], ["", "definition D2 :: \"'b rel \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<Rightarrow> bool\"\n where \"D2 r d = (let (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>') = d in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>') (labels \\<tau>'))\""], ["", "lemma lemma3_5_d: assumes \"diagram ars (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"diagram ars (\\<upsilon>,\\<sigma>',\\<sigma>'',\\<upsilon>')\"\nshows \"diagram ars ((fst \\<tau>,snd \\<tau>@snd \\<upsilon>),\\<sigma>,\\<sigma>'',(fst \\<tau>'),snd \\<tau>'@snd \\<upsilon>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagram ars\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. diagram ars\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "from assms"], ["proof (chain)\npicking this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  diagram ars (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')", "have tau: \"\\<tau> \\<in> seq ars\" and upsilon: \"\\<upsilon> \\<in> seq ars\" and o: \"lst \\<tau> = fst \\<upsilon>\"\n            and tau': \"\\<tau>' \\<in> seq ars\" and upsilon': \"\\<upsilon>' \\<in> seq ars\" and l: \"lst \\<tau>' = fst \\<upsilon>'\""], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  diagram ars (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n\ngoal (1 subgoal):\n 1. (\\<tau> \\<in> seq ars &&&\n     \\<upsilon> \\<in> seq ars &&& lst \\<tau> = fst \\<upsilon>) &&&\n    \\<tau>' \\<in> seq ars &&&\n    \\<upsilon>' \\<in> seq ars &&& lst \\<tau>' = fst \\<upsilon>'", "unfolding diagram_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n\ngoal (1 subgoal):\n 1. (\\<tau> \\<in> seq ars &&&\n     \\<upsilon> \\<in> seq ars &&& lst \\<tau> = fst \\<upsilon>) &&&\n    \\<tau>' \\<in> seq ars &&&\n    \\<upsilon>' \\<in> seq ars &&& lst \\<tau>' = fst \\<upsilon>'", "by auto"], ["proof (state)\nthis:\n  \\<tau> \\<in> seq ars\n  \\<upsilon> \\<in> seq ars\n  lst \\<tau> = fst \\<upsilon>\n  \\<tau>' \\<in> seq ars\n  \\<upsilon>' \\<in> seq ars\n  lst \\<tau>' = fst \\<upsilon>'\n\ngoal (1 subgoal):\n 1. diagram ars\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagram ars\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "using assms seq_concat[OF tau' upsilon' l] seq_concat[OF tau upsilon o]"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  diagram ars (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n  (fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>') \\<in> seq ars\n  lst (fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>') = lst \\<upsilon>'\n  (fst \\<tau>, snd \\<tau> @ snd \\<upsilon>) \\<in> seq ars\n  lst (fst \\<tau>, snd \\<tau> @ snd \\<upsilon>) = lst \\<upsilon>\n\ngoal (1 subgoal):\n 1. diagram ars\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "unfolding diagram_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n  (fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>') \\<in> seq ars\n  lst (fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>') = lst \\<upsilon>'\n  (fst \\<tau>, snd \\<tau> @ snd \\<upsilon>) \\<in> seq ars\n  lst (fst \\<tau>, snd \\<tau> @ snd \\<upsilon>) = lst \\<upsilon>\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n           fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')\n    in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<tau> \\<and>\n       lst \\<sigma> = fst \\<tau>' \\<and>\n       lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'", "by auto"], ["proof (state)\nthis:\n  diagram ars\n   ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n    fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma3_5_d_v: assumes \"diagram ars (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"diagram ars (\\<tau>',\\<upsilon>,\\<upsilon>',\\<tau>'')\"\nshows \"diagram ars (\\<tau>,(fst \\<sigma>,snd \\<sigma>@snd \\<upsilon>),(fst \\<sigma>',snd \\<sigma>'@snd \\<upsilon>'),\\<tau>'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "from assms"], ["proof (chain)\npicking this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  diagram ars (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')", "have d1: \"diagram ars (\\<sigma>,\\<tau>,\\<tau>',\\<sigma>')\" and d2: \"diagram ars (\\<upsilon>,\\<tau>',\\<tau>'',\\<upsilon>')\""], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  diagram ars (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')\n\ngoal (1 subgoal):\n 1. diagram ars (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>') &&&\n    diagram ars (\\<upsilon>, \\<tau>', \\<tau>'', \\<upsilon>')", "unfolding diagram_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')\n    in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<tau> \\<and>\n       lst \\<sigma> = fst \\<tau>' \\<and>\n       lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>' &&&\n    let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<upsilon>, \\<tau>', \\<tau>'', \\<upsilon>')\n    in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<tau> \\<and>\n       lst \\<sigma> = fst \\<tau>' \\<and>\n       lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'", "by auto"], ["proof (state)\nthis:\n  diagram ars (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')\n  diagram ars (\\<upsilon>, \\<tau>', \\<tau>'', \\<upsilon>')\n\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "using lemma3_5_d[OF d1 d2]"], ["proof (prove)\nusing this:\n  diagram ars\n   ((fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>), \\<tau>, \\<tau>'',\n    fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>')\n\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "unfolding diagram_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        ((fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>), \\<tau>, \\<tau>'',\n         fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>')\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n           (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')\n    in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<tau> \\<and>\n       lst \\<sigma> = fst \\<tau>' \\<and>\n       lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'", "by auto"], ["proof (state)\nthis:\n  diagram ars\n   (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n    (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma3_5': assumes \"trans r\" and \"irrefl r\" and \"D2 r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"D2 r (\\<upsilon>,\\<sigma>',\\<sigma>'',\\<upsilon>')\"\nshows \"D2 r ((fst \\<tau>,snd \\<tau>@snd \\<upsilon>),\\<sigma>,\\<sigma>'',(fst \\<tau>'),snd \\<tau>'@snd \\<upsilon>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D2 r\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "using assms lemma3_5[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  D2 r (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n  \\<lbrakk>D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>';\n   D r ?\\<upsilon> ?\\<sigma>' ?\\<sigma>'' ?\\<upsilon>'\\<rbrakk>\n  \\<Longrightarrow> D r (?\\<tau> @ ?\\<upsilon>) ?\\<sigma> ?\\<sigma>''\n                     (?\\<tau>' @ ?\\<upsilon>')\n\ngoal (1 subgoal):\n 1. D2 r\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "unfolding labels_def D2_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  in D r (map fst (snd \\<tau>)) (map fst (snd \\<sigma>))\n      (map fst (snd \\<sigma>')) (map fst (snd \\<tau>'))\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n  in D r (map fst (snd \\<tau>)) (map fst (snd \\<sigma>))\n      (map fst (snd \\<sigma>')) (map fst (snd \\<tau>'))\n  \\<lbrakk>D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>';\n   D r ?\\<upsilon> ?\\<sigma>' ?\\<sigma>'' ?\\<upsilon>'\\<rbrakk>\n  \\<Longrightarrow> D r (?\\<tau> @ ?\\<upsilon>) ?\\<sigma> ?\\<sigma>''\n                     (?\\<tau>' @ ?\\<upsilon>')\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n           fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')\n    in D r (map fst (snd \\<tau>)) (map fst (snd \\<sigma>))\n        (map fst (snd \\<sigma>')) (map fst (snd \\<tau>'))", "by auto"], ["", "lemma lemma3_5'_v: assumes \"trans r\" and \"irrefl r\" and \"D2 r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"D2 r (\\<tau>',\\<upsilon>,\\<upsilon>',\\<tau>'')\"\nshows \"D2 r (\\<tau>, (fst \\<sigma>,snd \\<sigma>@snd \\<upsilon>),(fst \\<sigma>',snd \\<sigma>'@snd \\<upsilon>'),\\<tau>'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D2 r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. D2 r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "from assms(3,4)"], ["proof (chain)\npicking this:\n  D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  D2 r (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')", "have D1:\"D2 r (\\<sigma>,\\<tau>,\\<tau>',\\<sigma>')\" and D2: \"D2 r (\\<upsilon>,\\<tau>',\\<tau>'',\\<upsilon>')\""], ["proof (prove)\nusing this:\n  D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  D2 r (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')\n\ngoal (1 subgoal):\n 1. D2 r (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>') &&&\n    D2 r (\\<upsilon>, \\<tau>', \\<tau>'', \\<upsilon>')", "unfolding D2_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n      (labels \\<tau>')\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')\n  in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n      (labels \\<tau>')\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')\n    in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n        (labels \\<tau>') &&&\n    let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<upsilon>, \\<tau>', \\<tau>'', \\<upsilon>')\n    in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n        (labels \\<tau>')", "using mirror_D[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n      (labels \\<tau>')\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')\n  in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n      (labels \\<tau>')\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  D r ?\\<sigma> ?\\<tau> ?\\<tau>' ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')\n    in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n        (labels \\<tau>') &&&\n    let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<upsilon>, \\<tau>', \\<tau>'', \\<upsilon>')\n    in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n        (labels \\<tau>')", "by auto"], ["proof (state)\nthis:\n  D2 r (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')\n  D2 r (\\<upsilon>, \\<tau>', \\<tau>'', \\<upsilon>')\n\ngoal (1 subgoal):\n 1. D2 r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. D2 r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "using lemma3_5'[OF assms(1,2) D1 D2] mirror_D[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  D2 r\n   ((fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>), \\<tau>, \\<tau>'',\n    fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>')\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  D r ?\\<sigma> ?\\<tau> ?\\<tau>' ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. D2 r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "unfolding D2_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n        ((fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>), \\<tau>, \\<tau>'',\n         fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>')\n  in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n      (labels \\<tau>')\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  D r ?\\<sigma> ?\\<tau> ?\\<tau>' ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n           (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')\n    in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n        (labels \\<tau>')", "by auto"], ["proof (state)\nthis:\n  D2 r\n   (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n    (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma trivial_diagram: assumes \"\\<sigma> \\<in> seq ars\" shows \"diagram ars (\\<sigma>,(fst \\<sigma>,[]),(lst \\<sigma>,[]),\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagram ars (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)", "using assms seq.intros(1)"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n  (?a, []) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. diagram ars (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)", "unfolding diagram_def Let_def lst_def"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n  (?a, []) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. case (\\<sigma>, (fst \\<sigma>, []),\n          (if snd \\<sigma> = [] then fst \\<sigma>\n           else snd (last (snd \\<sigma>)),\n           []),\n          \\<sigma>) of\n    (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<Rightarrow>\n      {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      (if snd \\<sigma> = [] then fst \\<sigma>\n       else snd (last (snd \\<sigma>))) =\n      fst \\<tau>' \\<and>\n      (if snd \\<tau> = [] then fst \\<tau> else snd (last (snd \\<tau>))) =\n      fst \\<sigma>' \\<and>\n      (if snd \\<sigma>' = [] then fst \\<sigma>'\n       else snd (last (snd \\<sigma>'))) =\n      (if snd \\<tau>' = [] then fst \\<tau>' else snd (last (snd \\<tau>')))", "by auto"], ["", "lemma trivial_D2: assumes \"\\<sigma> \\<in> seq ars\" shows \"D2 r (\\<sigma>,(fst \\<sigma>,[]),(lst \\<sigma>,[]),\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D2 r (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)", "using assms"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. D2 r (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)", "unfolding D2_def D_def labels_def"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)\n    in (r|map fst (snd \\<sigma>) @ map fst (snd \\<tau>')|,\n        r|map fst (snd \\<tau>)| + r|map fst (snd \\<sigma>)|)\n       \\<in> mul_eq r \\<and>\n       (r|map fst (snd \\<tau>) @ map fst (snd \\<sigma>')|,\n        r|map fst (snd \\<tau>)| + r|map fst (snd \\<sigma>)|)\n       \\<in> mul_eq r", "using mul_eq_reflexive"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n  (?M, ?M) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)\n    in (r|map fst (snd \\<sigma>) @ map fst (snd \\<tau>')|,\n        r|map fst (snd \\<tau>)| + r|map fst (snd \\<sigma>)|)\n       \\<in> mul_eq r \\<and>\n       (r|map fst (snd \\<tau>) @ map fst (snd \\<sigma>')|,\n        r|map fst (snd \\<tau>)| + r|map fst (snd \\<sigma>)|)\n       \\<in> mul_eq r", "by auto"], ["", "(* lift to combined concept *)"], ["", "definition DD :: \"('a,'b) lars \\<Rightarrow> 'b rel \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<Rightarrow> bool\"\n where \"DD ars r d = (diagram ars d \\<and> D2 r d)\""], ["", "lemma lemma3_5_DD: assumes \"trans r\" and \"irrefl r\" and \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"DD ars r (\\<upsilon>,\\<sigma>',\\<sigma>'',\\<upsilon>')\"\nshows \"DD ars r ((fst \\<tau>,snd \\<tau>@snd \\<upsilon>),\\<sigma>,\\<sigma>'',(fst \\<tau>'),snd \\<tau>'@snd \\<upsilon>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DD ars r\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "using assms lemma3_5_d lemma3_5'[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  DD ars r (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n  \\<lbrakk>diagram ?ars (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   diagram ?ars\n    (?\\<upsilon>, ?\\<sigma>', ?\\<sigma>'', ?\\<upsilon>')\\<rbrakk>\n  \\<Longrightarrow> diagram ?ars\n                     ((fst ?\\<tau>, snd ?\\<tau> @ snd ?\\<upsilon>),\n                      ?\\<sigma>, ?\\<sigma>'', fst ?\\<tau>',\n                      snd ?\\<tau>' @ snd ?\\<upsilon>')\n  \\<lbrakk>D2 r (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   D2 r (?\\<upsilon>, ?\\<sigma>', ?\\<sigma>'', ?\\<upsilon>')\\<rbrakk>\n  \\<Longrightarrow> D2 r\n                     ((fst ?\\<tau>, snd ?\\<tau> @ snd ?\\<upsilon>),\n                      ?\\<sigma>, ?\\<sigma>'', fst ?\\<tau>',\n                      snd ?\\<tau>' @ snd ?\\<upsilon>')\n\ngoal (1 subgoal):\n 1. DD ars r\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "unfolding DD_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n  D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  diagram ars (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>') \\<and>\n  D2 r (\\<upsilon>, \\<sigma>', \\<sigma>'', \\<upsilon>')\n  \\<lbrakk>diagram ?ars (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   diagram ?ars\n    (?\\<upsilon>, ?\\<sigma>', ?\\<sigma>'', ?\\<upsilon>')\\<rbrakk>\n  \\<Longrightarrow> diagram ?ars\n                     ((fst ?\\<tau>, snd ?\\<tau> @ snd ?\\<upsilon>),\n                      ?\\<sigma>, ?\\<sigma>'', fst ?\\<tau>',\n                      snd ?\\<tau>' @ snd ?\\<upsilon>')\n  \\<lbrakk>D2 r (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   D2 r (?\\<upsilon>, ?\\<sigma>', ?\\<sigma>'', ?\\<upsilon>')\\<rbrakk>\n  \\<Longrightarrow> D2 r\n                     ((fst ?\\<tau>, snd ?\\<tau> @ snd ?\\<upsilon>),\n                      ?\\<sigma>, ?\\<sigma>'', fst ?\\<tau>',\n                      snd ?\\<tau>' @ snd ?\\<upsilon>')\n\ngoal (1 subgoal):\n 1. diagram ars\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>') \\<and>\n    D2 r\n     ((fst \\<tau>, snd \\<tau> @ snd \\<upsilon>), \\<sigma>, \\<sigma>'',\n      fst \\<tau>', snd \\<tau>' @ snd \\<upsilon>')", "by fast"], ["", "lemma lemma3_5_DD_v: assumes \"trans r\" and \"irrefl r\" and \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"DD ars r (\\<tau>',\\<upsilon>,\\<upsilon>',\\<tau>'')\"\nshows \"DD ars r (\\<tau>, (fst \\<sigma>,snd \\<sigma>@snd \\<upsilon>),(fst \\<sigma>',snd \\<sigma>'@snd \\<upsilon>'),\\<tau>'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DD ars r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "using assms lemma3_5_d_v lemma3_5'_v"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  DD ars r (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')\n  \\<lbrakk>diagram ?ars (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   diagram ?ars (?\\<tau>', ?\\<upsilon>, ?\\<upsilon>', ?\\<tau>'')\\<rbrakk>\n  \\<Longrightarrow> diagram ?ars\n                     (?\\<tau>,\n                      (fst ?\\<sigma>, snd ?\\<sigma> @ snd ?\\<upsilon>),\n                      (fst ?\\<sigma>', snd ?\\<sigma>' @ snd ?\\<upsilon>'),\n                      ?\\<tau>'')\n  \\<lbrakk>trans ?r; irrefl ?r;\n   D2 ?r (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   D2 ?r (?\\<tau>', ?\\<upsilon>, ?\\<upsilon>', ?\\<tau>'')\\<rbrakk>\n  \\<Longrightarrow> D2 ?r\n                     (?\\<tau>,\n                      (fst ?\\<sigma>, snd ?\\<sigma> @ snd ?\\<upsilon>),\n                      (fst ?\\<sigma>', snd ?\\<sigma>' @ snd ?\\<upsilon>'),\n                      ?\\<tau>'')\n\ngoal (1 subgoal):\n 1. DD ars r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "unfolding DD_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n  D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  diagram ars (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'') \\<and>\n  D2 r (\\<tau>', \\<upsilon>, \\<upsilon>', \\<tau>'')\n  \\<lbrakk>diagram ?ars (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   diagram ?ars (?\\<tau>', ?\\<upsilon>, ?\\<upsilon>', ?\\<tau>'')\\<rbrakk>\n  \\<Longrightarrow> diagram ?ars\n                     (?\\<tau>,\n                      (fst ?\\<sigma>, snd ?\\<sigma> @ snd ?\\<upsilon>),\n                      (fst ?\\<sigma>', snd ?\\<sigma>' @ snd ?\\<upsilon>'),\n                      ?\\<tau>'')\n  \\<lbrakk>trans ?r; irrefl ?r;\n   D2 ?r (?\\<tau>, ?\\<sigma>, ?\\<sigma>', ?\\<tau>');\n   D2 ?r (?\\<tau>', ?\\<upsilon>, ?\\<upsilon>', ?\\<tau>'')\\<rbrakk>\n  \\<Longrightarrow> D2 ?r\n                     (?\\<tau>,\n                      (fst ?\\<sigma>, snd ?\\<sigma> @ snd ?\\<upsilon>),\n                      (fst ?\\<sigma>', snd ?\\<sigma>' @ snd ?\\<upsilon>'),\n                      ?\\<tau>'')\n\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'') \\<and>\n    D2 r\n     (\\<tau>, (fst \\<sigma>, snd \\<sigma> @ snd \\<upsilon>),\n      (fst \\<sigma>', snd \\<sigma>' @ snd \\<upsilon>'), \\<tau>'')", "by fast"], ["", "lemma trivial_DD: assumes \"\\<sigma> \\<in> seq ars\" shows \"DD ars r (\\<sigma>,(fst \\<sigma>,[]),(lst \\<sigma>,[]),\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DD ars r (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)", "using assms trivial_diagram trivial_D2"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n  ?\\<sigma> \\<in> seq ?ars \\<Longrightarrow>\n  diagram ?ars\n   (?\\<sigma>, (fst ?\\<sigma>, []), (lst ?\\<sigma>, []), ?\\<sigma>)\n  ?\\<sigma> \\<in> seq ?ars \\<Longrightarrow>\n  D2 ?r (?\\<sigma>, (fst ?\\<sigma>, []), (lst ?\\<sigma>, []), ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. DD ars r (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)", "unfolding DD_def"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n  ?\\<sigma> \\<in> seq ?ars \\<Longrightarrow>\n  diagram ?ars\n   (?\\<sigma>, (fst ?\\<sigma>, []), (lst ?\\<sigma>, []), ?\\<sigma>)\n  ?\\<sigma> \\<in> seq ?ars \\<Longrightarrow>\n  D2 ?r (?\\<sigma>, (fst ?\\<sigma>, []), (lst ?\\<sigma>, []), ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>) \\<and>\n    D2 r (\\<sigma>, (fst \\<sigma>, []), (lst \\<sigma>, []), \\<sigma>)", "by fast"], ["", "lemma mirror_DD: assumes \"trans r\" and \"irrefl r\" and \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" shows \"DD ars r (\\<sigma>,\\<tau>,\\<tau>',\\<sigma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DD ars r (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')", "using assms mirror_D"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  \\<lbrakk>trans ?r; irrefl ?r;\n   D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> D ?r ?\\<sigma> ?\\<tau> ?\\<tau>' ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. DD ars r (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')", "unfolding DD_def D2_def diagram_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n  \\<lbrakk>trans ?r; irrefl ?r;\n   D ?r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> D ?r ?\\<sigma> ?\\<tau> ?\\<tau>' ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n           (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')\n     in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n        fst \\<sigma> = fst \\<tau> \\<and>\n        lst \\<sigma> = fst \\<tau>' \\<and>\n        lst \\<tau> = fst \\<sigma>' \\<and>\n        lst \\<sigma>' = lst \\<tau>') \\<and>\n    (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n           (\\<sigma>, \\<tau>, \\<tau>', \\<sigma>')\n     in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n         (labels \\<tau>'))", "by auto"], ["", "text \\<open>well-foundedness of rel r\\<close>"], ["", "definition measure :: \"'b rel \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<Rightarrow> 'b multiset\"\n where \"measure r P = r|labels (fst P)| + r|labels (snd P)|\""], ["", "definition pex :: \"'b rel \\<Rightarrow> (('a,'b) seq \\<times> ('a,'b) seq) rel\"\n where \"pex r = {(P1,P2). (measure r P1,measure r P2) \\<in> mul r}\""], ["", "lemma wfi: assumes \"relr = pex r\" and \"\\<not> wf (relr)\" shows \"\\<not> wf (mul r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "have \"\\<not> SN ((relr)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> SN (relr\\<inverse>)", "using assms"], ["proof (prove)\nusing this:\n  relr = pex r\n  \\<not> wf relr\n\ngoal (1 subgoal):\n 1. \\<not> SN (relr\\<inverse>)", "unfolding SN_iff_wf converse_converse"], ["proof (prove)\nusing this:\n  relr = pex r\n  \\<not> wf relr\n\ngoal (1 subgoal):\n 1. \\<not> wf relr", "by auto"], ["proof (state)\nthis:\n  \\<not> SN (relr\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "from this"], ["proof (chain)\npicking this:\n  \\<not> SN (relr\\<inverse>)", "obtain s where \"\\<forall>i. (s i, s (Suc i)) \\<in> relr\\<inverse>\""], ["proof (prove)\nusing this:\n  \\<not> SN (relr\\<inverse>)\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<forall>i. (s i, s (Suc i)) \\<in> relr\\<inverse> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding SN_def SN_on_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>f.\n             f 0 \\<in> UNIV \\<and>\n             (\\<forall>i. (f i, f (Suc i)) \\<in> relr\\<inverse>))\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<forall>i. (s i, s (Suc i)) \\<in> relr\\<inverse> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. (s i, s (Suc i)) \\<in> relr\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "hence fact:\"\\<forall>i. (measure r (s i), measure r (s (Suc i))) \\<in> (mul r)\\<inverse>\""], ["proof (prove)\nusing this:\n  \\<forall>i. (s i, s (Suc i)) \\<in> relr\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (Decreasing_Diagrams.measure r (s i),\n        Decreasing_Diagrams.measure r (s (Suc i)))\n       \\<in> (mul r)\\<inverse>", "unfolding assms(1) pex_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (s i, s (Suc i))\n     \\<in> {(P1, P2).\n            (Decreasing_Diagrams.measure r P1,\n             Decreasing_Diagrams.measure r P2)\n            \\<in> mul r}\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (Decreasing_Diagrams.measure r (s i),\n        Decreasing_Diagrams.measure r (s (Suc i)))\n       \\<in> (mul r)\\<inverse>", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     (Decreasing_Diagrams.measure r (s i),\n      Decreasing_Diagrams.measure r (s (Suc i)))\n     \\<in> (mul r)\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "have \"\\<not> SN ((mul r)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> SN ((mul r)\\<inverse>)", "using chain_imp_not_SN_on[OF fact]"], ["proof (prove)\nusing this:\n  \\<not> SN_on ((mul r)\\<inverse>) {Decreasing_Diagrams.measure r (s ?i)}\n\ngoal (1 subgoal):\n 1. \\<not> SN ((mul r)\\<inverse>)", "unfolding SN_on_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>f.\n             f 0 \\<in> {Decreasing_Diagrams.measure r (s ?i)} \\<and>\n             (\\<forall>i. (f i, f (Suc i)) \\<in> (mul r)\\<inverse>))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>f.\n               f 0 \\<in> UNIV \\<and>\n               (\\<forall>i. (f i, f (Suc i)) \\<in> (mul r)\\<inverse>))", "by auto"], ["proof (state)\nthis:\n  \\<not> SN ((mul r)\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> SN ((mul r)\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "unfolding SN_iff_wf converse_converse"], ["proof (prove)\nusing this:\n  \\<not> wf (mul r)\n\ngoal (1 subgoal):\n 1. \\<not> wf (mul r)", "by auto"], ["proof (state)\nthis:\n  \\<not> wf (mul r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf: assumes \"trans r\" and \"wf r\" shows \"wf (pex r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (pex r)", "using wf_mul[OF assms] wfi"], ["proof (prove)\nusing this:\n  wf (mul r)\n  \\<lbrakk>?relr = pex ?r; \\<not> wf ?relr\\<rbrakk>\n  \\<Longrightarrow> \\<not> wf (mul ?r)\n\ngoal (1 subgoal):\n 1. wf (pex r)", "by auto"], ["", "text \\<open>main result\\<close>"], ["", "definition peak :: \"('a,'b) lars \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<Rightarrow> bool\"\n where \"peak ars p = (let (\\<tau>,\\<sigma>) = p in {\\<tau>,\\<sigma>} \\<subseteq> seq ars \\<and> fst \\<tau> = fst \\<sigma>)\""], ["", "definition local_peak :: \"('a,'b) lars \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<Rightarrow> bool\"\n where \"local_peak ars p = (let (\\<tau>,\\<sigma>) = p in peak ars p \\<and> length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1)\""], ["", "text \\<open>proof of Theorem 3.7\\<close>"], ["", "lemma LD_imp_D: assumes \"trans r\" and \"wf r\" and \"\\<forall>P. (local_peak ars P \\<longrightarrow> (\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>')))\"\nand \"peak ars P\" shows \"(\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have i: \"irrefl r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irrefl r", "using assms(1,2) acyclic_irrefl trancl_id wf_acyclic"], ["proof (prove)\nusing this:\n  trans r\n  wf r\n  acyclic ?r = irrefl (?r\\<^sup>+)\n  trans ?r \\<Longrightarrow> ?r\\<^sup>+ = ?r\n  wf ?r \\<Longrightarrow> acyclic ?r\n\ngoal (1 subgoal):\n 1. irrefl r", "by metis"], ["proof (state)\nthis:\n  irrefl r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have wf: \"wf (pex r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (pex r)", "using wf[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  wf (pex r)\n\ngoal (1 subgoal):\n 1. wf (pex r)", "."], ["proof (state)\nthis:\n  wf (pex r)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using assms(4)"], ["proof (prove)\nusing this:\n  peak ars P\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof (induct rule:wf_induct_rule[OF wf])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> pex r; peak ars y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n  DD ars r (fst y, snd y, \\<sigma>', \\<tau>');\n        peak ars x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst x, snd x, \\<sigma>', \\<tau>')", "case (1 P)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y1, P) \\<in> pex r; peak ars ?y1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y1, snd ?y1, \\<sigma>', \\<tau>')\n  peak ars P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> pex r; peak ars y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n  DD ars r (fst y, snd y, \\<sigma>', \\<tau>');\n        peak ars x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst x, snd x, \\<sigma>', \\<tau>')", "obtain s \\<tau> \\<sigma> where decompose:\"P = (\\<tau>,\\<sigma>)\" and tau:\"\\<tau> \\<in> seq ars\" and sigma:\"\\<sigma> \\<in> seq ars\"\n   and tau_s: \"fst \\<tau> = s\" and sigma_s: \"fst \\<sigma> = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma> s.\n        \\<lbrakk>P = (\\<tau>, \\<sigma>); \\<tau> \\<in> seq ars;\n         \\<sigma> \\<in> seq ars; fst \\<tau> = s; fst \\<sigma> = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y1, P) \\<in> pex r; peak ars ?y1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y1, snd ?y1, \\<sigma>', \\<tau>')\n  peak ars P\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma> s.\n        \\<lbrakk>P = (\\<tau>, \\<sigma>); \\<tau> \\<in> seq ars;\n         \\<sigma> \\<in> seq ars; fst \\<tau> = s; fst \\<sigma> = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding peak_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y1, P) \\<in> pex r;\n   let (\\<tau>, \\<sigma>) = ?y1\n   in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n      fst \\<tau> = fst \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y1, snd ?y1, \\<sigma>', \\<tau>')\n  let (\\<tau>, \\<sigma>) = P\n  in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and> fst \\<tau> = fst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma> s.\n        \\<lbrakk>P = (\\<tau>, \\<sigma>); \\<tau> \\<in> seq ars;\n         \\<sigma> \\<in> seq ars; fst \\<tau> = s; fst \\<sigma> = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P = (\\<tau>, \\<sigma>)\n  \\<tau> \\<in> seq ars\n  \\<sigma> \\<in> seq ars\n  fst \\<tau> = s\n  fst \\<sigma> = s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> pex r; peak ars y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n  DD ars r (fst y, snd y, \\<sigma>', \\<tau>');\n        peak ars x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst x, snd x, \\<sigma>', \\<tau>')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof (cases \"snd \\<tau>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. snd \\<tau> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case Nil"], ["proof (state)\nthis:\n  snd \\<tau> = []\n\ngoal (2 subgoals):\n 1. snd \\<tau> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from mirror_DD[OF assms(1) i trivial_DD[OF sigma]]"], ["proof (chain)\npicking this:\n  DD ars r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])", "show ?thesis"], ["proof (prove)\nusing this:\n  DD ars r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using tau_s sigma_s Nil surjective_pairing"], ["proof (prove)\nusing this:\n  DD ars r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<tau> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding decompose fst_conv snd_conv DD_def"], ["proof (prove)\nusing this:\n  diagram ars\n   ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, []) \\<and>\n  D2 r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<tau> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n       D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "by metis"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case (Cons \\<beta>_step \\<upsilon>_step)"], ["proof (state)\nthis:\n  snd \\<tau> = \\<beta>_step # \\<upsilon>_step\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence tau_dec: \"\\<tau> = (s,[\\<beta>_step]@\\<upsilon>_step)\""], ["proof (prove)\nusing this:\n  snd \\<tau> = \\<beta>_step # \\<upsilon>_step\n\ngoal (1 subgoal):\n 1. \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<tau> = \\<beta>_step # \\<upsilon>_step \\<Longrightarrow>\n    \\<tau> = (s, \\<beta>_step # \\<upsilon>_step)", "using tau_s surjective_pairing"], ["proof (prove)\nusing this:\n  fst \\<tau> = s\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. snd \\<tau> = \\<beta>_step # \\<upsilon>_step \\<Longrightarrow>\n    \\<tau> = (s, \\<beta>_step # \\<upsilon>_step)", "by metis"], ["proof (state)\nthis:\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence tau2:\" (s,[\\<beta>_step]@\\<upsilon>_step) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step] @ \\<upsilon>_step) \\<in> seq ars", "using tau"], ["proof (prove)\nusing this:\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n  \\<tau> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step] @ \\<upsilon>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<beta>_step] @ \\<upsilon>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof (cases \"snd \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. snd \\<sigma> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case Nil"], ["proof (state)\nthis:\n  snd \\<sigma> = []\n\ngoal (2 subgoals):\n 1. snd \\<sigma> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from trivial_DD[OF tau]"], ["proof (chain)\npicking this:\n  DD ars ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)", "show ?thesis"], ["proof (prove)\nusing this:\n  DD ars ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using tau_s sigma_s Nil surjective_pairing"], ["proof (prove)\nusing this:\n  DD ars ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<sigma> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding decompose fst_conv snd_conv DD_def"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>) \\<and>\n  D2 ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<sigma> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n       D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "by metis"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case (Cons \\<alpha>_step \\<rho>_step)"], ["proof (state)\nthis:\n  snd \\<sigma> = \\<alpha>_step # \\<rho>_step\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence sigma_dec: \"\\<sigma> = (s,[\\<alpha>_step]@\\<rho>_step)\""], ["proof (prove)\nusing this:\n  snd \\<sigma> = \\<alpha>_step # \\<rho>_step\n\ngoal (1 subgoal):\n 1. \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<sigma> = \\<alpha>_step # \\<rho>_step \\<Longrightarrow>\n    \\<sigma> = (s, \\<alpha>_step # \\<rho>_step)", "using sigma_s surjective_pairing"], ["proof (prove)\nusing this:\n  fst \\<sigma> = s\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. snd \\<sigma> = \\<alpha>_step # \\<rho>_step \\<Longrightarrow>\n    \\<sigma> = (s, \\<alpha>_step # \\<rho>_step)", "by metis"], ["proof (state)\nthis:\n  \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence sigma2:\"(s,[\\<alpha>_step]@\\<rho>_step) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)\n\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step] @ \\<rho>_step) \\<in> seq ars", "using sigma"], ["proof (prove)\nusing this:\n  \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)\n  \\<sigma> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step] @ \\<rho>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<alpha>_step] @ \\<rho>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have alpha:\"(s,[\\<alpha>_step]) \\<in> seq ars\" (is \"?\\<alpha> \\<in> _\")\n     and rho: \"(lst (s,[\\<alpha>_step]),\\<rho>_step) \\<in> seq ars\" (is \"?\\<rho> \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars", "using seq_chop[OF sigma2]"], ["proof (prove)\nusing this:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have beta:\"(s,[\\<beta>_step]) \\<in> seq ars\" (is \"?\\<beta> \\<in> _\")\n     and upsilon: \"(lst (s,[\\<beta>_step]),\\<upsilon>_step) \\<in> seq ars\" (is \"?\\<upsilon> \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars", "using seq_chop[OF tau2]"], ["proof (prove)\nusing this:\n  (s, [\\<beta>_step]) \\<in> seq ars\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<beta>_step]) \\<in> seq ars\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have \"local_peak ars (?\\<beta>,?\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])", "using alpha beta"], ["proof (prove)\nusing this:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (s, [\\<beta>_step]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])", "unfolding local_peak_def peak_def"], ["proof (prove)\nusing this:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (s, [\\<beta>_step]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) = ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n    in (let (\\<tau>, \\<sigma>) = ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n        in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n           fst \\<tau> = fst \\<sigma>) \\<and>\n       length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1", "by auto"], ["proof (state)\nthis:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])", "obtain \\<kappa> \\<mu> where D:\"DD ars r (?\\<beta>,?\\<alpha>,\\<kappa>,\\<mu>)\""], ["proof (prove)\nusing this:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa> \\<mu>.\n        DD ars r\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>,\n          \\<mu>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(3)"], ["proof (prove)\nusing this:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n  \\<forall>P.\n     local_peak ars P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD ars r (fst P, snd P, \\<sigma>', \\<tau>'))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa> \\<mu>.\n        DD ars r\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>,\n          \\<mu>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b aa ba.\n                DD ars r\n                 ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), (a, b), aa,\n                  ba) \\<Longrightarrow>\n                thesis;\n     local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]);\n     \\<forall>a b aa ba.\n        local_peak ars ((a, b), aa, ba) \\<longrightarrow>\n        (\\<exists>ab bb ac bc.\n            DD ars r ((a, b), (aa, ba), (ab, bb), ac, bc))\\<rbrakk>\n    \\<Longrightarrow> thesis", "by metis"], ["proof (state)\nthis:\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence kappa: \"\\<kappa>\\<in>seq ars\" and mu: \"\\<mu>\\<in>seq ars\""], ["proof (prove)\nusing this:\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa> \\<in> seq ars &&& \\<mu> \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa> \\<in> seq ars &&& \\<mu> \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<kappa> \\<in> seq ars\n  \\<mu> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have P_IH1: \" peak ars (?\\<upsilon>,\\<kappa>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. peak ars ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)", "using upsilon kappa D"], ["proof (prove)\nusing this:\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n  \\<kappa> \\<in> seq ars\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. peak ars ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)", "unfolding DD_def diagram_def peak_def"], ["proof (prove)\nusing this:\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n  \\<kappa> \\<in> seq ars\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) =\n          ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  peak ars ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have beta_ne: \"labels ?\\<beta> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, [\\<beta>_step]) \\<noteq> []", "unfolding labels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (snd (s, [\\<beta>_step])) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  labels (s, [\\<beta>_step]) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have dec: \"D r (labels ?\\<beta>) (labels ?\\<alpha>) (labels \\<kappa>) (labels \\<mu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n     (labels \\<kappa>) (labels \\<mu>)", "using D"], ["proof (prove)\nusing this:\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n     (labels \\<kappa>) (labels \\<mu>)", "unfolding DD_def D2_def"], ["proof (prove)\nusing this:\n  diagram ars\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>) \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n\ngoal (1 subgoal):\n 1. D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n     (labels \\<kappa>) (labels \\<mu>)", "by auto"], ["proof (state)\nthis:\n  D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n   (labels \\<kappa>) (labels \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have x1:\"((?\\<upsilon>,\\<kappa>), (\\<tau>,?\\<alpha>)) \\<in> pex r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n     [\\<alpha>_step])\n    \\<in> pex r", "using lemma3_6[OF assms(1) beta_ne dec]"], ["proof (prove)\nusing this:\n  (r|labels \\<kappa>| + r|?\\<upsilon>|,\n   r|labels (s, [\\<alpha>_step])| +\n   r|labels (s, [\\<beta>_step]) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n     [\\<alpha>_step])\n    \\<in> pex r", "unfolding pex_def measure_def decompose labels_def tau_dec"], ["proof (prove)\nusing this:\n  (r|map fst (snd \\<kappa>)| + r|?\\<upsilon>|,\n   r|map fst (snd (s, [\\<alpha>_step]))| +\n   r|map fst (snd (s, [\\<beta>_step])) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n     (s, [\\<beta>_step] @ \\<upsilon>_step), s, [\\<alpha>_step])\n    \\<in> {(P1, P2).\n           (r|map fst (snd (fst P1))| + r|map fst (snd (snd P1))|,\n            r|map fst (snd (fst P2))| + r|map fst (snd (snd P2))|)\n           \\<in> mul r}", "by (simp add: add.commute)"], ["proof (state)\nthis:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have \"(lexmax r (labels \\<tau>) + lexmax r (labels (?\\<alpha>)), lexmax r (labels \\<tau>) + lexmax r (labels \\<sigma>)) \\<in> mul_eq r\" (is \"(?l,?r) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n     r|labels \\<tau>| + r|labels \\<sigma>|)\n    \\<in> mul_eq r", "unfolding sigma_dec labels_def snd_conv list.map lexmax.simps diff_from_empty"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|map fst (snd \\<tau>)| + ({#fst \\<alpha>_step#} + {#}),\n     r|map fst (snd \\<tau>)| + r|map fst ([\\<alpha>_step] @ \\<rho>_step)|)\n    \\<in> mul_eq r", "using assms(1)"], ["proof (prove)\nusing this:\n  trans r\n\ngoal (1 subgoal):\n 1. (r|map fst (snd \\<tau>)| + ({#fst \\<alpha>_step#} + {#}),\n     r|map fst (snd \\<tau>)| + r|map fst ([\\<alpha>_step] @ \\<rho>_step)|)\n    \\<in> mul_eq r", "by (simp add: lemma2_6_2_a)"], ["proof (state)\nthis:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence \"((?\\<upsilon>,\\<kappa>),P) \\<in> pex r\""], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r", "using x1"], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r", "unfolding sigma_s pex_def measure_def decompose"], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> {(P1, P2).\n         (r|labels (fst P1)| + r|labels (snd P1)|,\n          r|labels (fst P2)| + r|labels (snd P2)|)\n         \\<in> mul r}\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>,\n     \\<sigma>)\n    \\<in> {(P1, P2).\n           (r|labels (fst P1)| + r|labels (snd P1)|,\n            r|labels (fst P2)| + r|labels (snd P2)|)\n           \\<in> mul r}", "using mul_and_mul_eq_imp_mul[OF assms(1)]"], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> {(P1, P2).\n         (r|labels (fst P1)| + r|labels (snd P1)|,\n          r|labels (fst P2)| + r|labels (snd P2)|)\n         \\<in> mul r}\n  \\<lbrakk>(?M, ?N) \\<in> mul r; (?N, ?P) \\<in> mul_eq r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?P) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>,\n     \\<sigma>)\n    \\<in> {(P1, P2).\n           (r|labels (fst P1)| + r|labels (snd P1)|,\n            r|labels (fst P2)| + r|labels (snd P2)|)\n           \\<in> mul r}", "by auto"], ["proof (state)\nthis:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r", "obtain \\<kappa>' \\<upsilon>' where IH1: \"DD ars r (?\\<upsilon>,\\<kappa>,\\<kappa>',\\<upsilon>')\""], ["proof (prove)\nusing this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>' \\<upsilon>'.\n        DD ars r\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1(1)[OF _ P_IH1]"], ["proof (prove)\nusing this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P)\n  \\<in> pex r \\<Longrightarrow>\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      (fst ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       snd ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>' \\<upsilon>'.\n        DD ars r\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding decompose"], ["proof (prove)\nusing this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, \\<sigma>)\n  \\<in> pex r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, \\<sigma>)\n  \\<in> pex r \\<Longrightarrow>\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      (fst ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       snd ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>' \\<upsilon>'.\n        DD ars r\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence kappa':\"\\<kappa>'\\<in>seq ars\" and upsilon': \"\\<upsilon>'\\<in>seq ars\""], ["proof (prove)\nusing this:\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. \\<kappa>' \\<in> seq ars &&& \\<upsilon>' \\<in> seq ars", "using D"], ["proof (prove)\nusing this:\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa>' \\<in> seq ars &&& \\<upsilon>' \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa>' \\<in> seq ars &&& \\<upsilon>' \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<kappa>' \\<in> seq ars\n  \\<upsilon>' \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have tau': \"(fst \\<mu>,snd \\<mu>@(snd \\<upsilon>')) \\<in> seq ars\" (is \"?\\<tau>' \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars", "using seq_concat(1)[OF mu upsilon'] D IH1"], ["proof (prove)\nusing this:\n  lst \\<mu> = fst \\<upsilon>' \\<Longrightarrow>\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  lst \\<mu> = fst \\<upsilon>' \\<Longrightarrow>\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have DIH1: \"DD ars r (\\<tau>,?\\<alpha>,\\<kappa>',?\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DD ars r\n     (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n      snd \\<mu> @ snd \\<upsilon>')", "using lemma3_5_DD[OF assms(1) i D IH1] tau_dec"], ["proof (prove)\nusing this:\n  DD ars r\n   ((fst (s, [\\<beta>_step]),\n     snd (s, [\\<beta>_step]) @\n     snd (lst (s, [\\<beta>_step]), \\<upsilon>_step)),\n    (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>, snd \\<mu> @ snd \\<upsilon>')\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n\ngoal (1 subgoal):\n 1. DD ars r\n     (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n      snd \\<mu> @ snd \\<upsilon>')", "by auto"], ["proof (state)\nthis:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence dec_dih1: \"D r (labels \\<tau>) (labels ?\\<alpha>) (labels \\<kappa>') (labels ?\\<tau>')\""], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n\ngoal (1 subgoal):\n 1. D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n     (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))", "using DIH1"], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n\ngoal (1 subgoal):\n 1. D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n     (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))", "unfolding DD_def D2_def"], ["proof (prove)\nusing this:\n  diagram ars\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n          snd \\<mu> @ snd \\<upsilon>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n  diagram ars\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n          snd \\<mu> @ snd \\<upsilon>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n\ngoal (1 subgoal):\n 1. D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n     (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))", "by simp"], ["proof (state)\nthis:\n  D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n   (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have P_IH2: \"peak ars (?\\<tau>',?\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. peak ars\n     ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step)", "using tau' rho D"], ["proof (prove)\nusing this:\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. peak ars\n     ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step)", "unfolding DD_def diagram_def peak_def"], ["proof (prove)\nusing this:\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) =\n          ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n           lst (s, [\\<alpha>_step]), \\<rho>_step)\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  peak ars\n   ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have alpha_ne: \"labels ?\\<alpha> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, [\\<alpha>_step]) \\<noteq> []", "unfolding labels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (snd (s, [\\<alpha>_step])) \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  labels (s, [\\<alpha>_step]) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have \"((?\\<tau>',?\\<rho>),P) \\<in> pex r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step),\n     P)\n    \\<in> pex r", "using lemma3_6_v[OF assms(1) i alpha_ne dec_dih1]"], ["proof (prove)\nusing this:\n  (r|labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>')| + r|?\\<upsilon>|,\n   r|labels \\<tau>| + r|labels (s, [\\<alpha>_step]) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step),\n     P)\n    \\<in> pex r", "unfolding pex_def measure_def decompose labels_def sigma_dec"], ["proof (prove)\nusing this:\n  (r|map fst (snd (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))| +\n   r|?\\<upsilon>|,\n   r|map fst (snd \\<tau>)| +\n   r|map fst (snd (s, [\\<alpha>_step])) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step),\n     \\<tau>, s, [\\<alpha>_step] @ \\<rho>_step)\n    \\<in> {(P1, P2).\n           (r|map fst (snd (fst P1))| + r|map fst (snd (snd P1))|,\n            r|map fst (snd (fst P2))| + r|map fst (snd (snd P2))|)\n           \\<in> mul r}", "by auto"], ["proof (state)\nthis:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r", "obtain \\<rho>' \\<tau>'' where IH2: \"DD ars r (?\\<tau>',?\\<rho>,\\<rho>',\\<tau>'')\""], ["proof (prove)\nusing this:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>' \\<tau>''.\n        DD ars r\n         ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n          (lst (s, [\\<alpha>_step]), \\<rho>_step), \\<rho>',\n          \\<tau>'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1(1)[OF _ P_IH2]"], ["proof (prove)\nusing this:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r \\<Longrightarrow>\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      (fst ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n            lst (s, [\\<alpha>_step]), \\<rho>_step),\n       snd ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n            lst (s, [\\<alpha>_step]), \\<rho>_step),\n       \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>' \\<tau>''.\n        DD ars r\n         ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n          (lst (s, [\\<alpha>_step]), \\<rho>_step), \\<rho>',\n          \\<tau>'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  DD ars r\n   ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n    (lst (s, [\\<alpha>_step]), \\<rho>_step), \\<rho>', \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using lemma3_5_DD_v[OF assms(1) i DIH1 IH2]"], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>,\n    (fst (s, [\\<alpha>_step]),\n     snd (s, [\\<alpha>_step]) @\n     snd (lst (s, [\\<alpha>_step]), \\<rho>_step)),\n    (fst \\<kappa>', snd \\<kappa>' @ snd \\<rho>'), \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding decompose fst_conv snd_conv sigma_dec"], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step] @ \\<rho>_step),\n    (fst \\<kappa>', snd \\<kappa>' @ snd \\<rho>'), \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r\n        (\\<tau>, (s, [\\<alpha>_step] @ \\<rho>_step), \\<sigma>', \\<tau>')", "by fast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>CR with unlabeling\\<close>"], ["", "definition unlabel :: \"('a,'b) lars \\<Rightarrow> 'a rel\"\n where \"unlabel ars = {(a,c). \\<exists>b. (a,b,c) \\<in> ars}\""], ["", "lemma step_imp_seq: assumes \"(a,b) \\<in> (unlabel ars)\"\nshows \"\\<exists>ss \\<in> seq ars. fst ss = a \\<and> lst ss = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "obtain \\<alpha> where step:\"(a,\\<alpha>,b) \\<in> ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        (a, \\<alpha>, b) \\<in> ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (a, b) \\<in> unlabel ars\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        (a, \\<alpha>, b) \\<in> ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding unlabel_def"], ["proof (prove)\nusing this:\n  (a, b) \\<in> {(a, c). \\<exists>b. (a, b, c) \\<in> ars}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        (a, \\<alpha>, b) \\<in> ars \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (a, \\<alpha>, b) \\<in> ars\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "hence ss: \"(a,[(\\<alpha>,b)]) \\<in> seq ars\" (is \"?ss \\<in> _\")"], ["proof (prove)\nusing this:\n  (a, \\<alpha>, b) \\<in> ars\n\ngoal (1 subgoal):\n 1. (a, [(\\<alpha>, b)]) \\<in> seq ars", "using seq.intros"], ["proof (prove)\nusing this:\n  (a, \\<alpha>, b) \\<in> ars\n  (?a, []) \\<in> seq ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars; (?b, ?ss) \\<in> seq ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (?\\<alpha>, ?b) # ?ss) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. (a, [(\\<alpha>, b)]) \\<in> seq ars", "by fast"], ["proof (state)\nthis:\n  (a, [(\\<alpha>, b)]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "have \"fst ?ss = a\" and \"lst ?ss = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (a, [(\\<alpha>, b)]) = a &&& lst (a, [(\\<alpha>, b)]) = b", "unfolding lst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (a, [(\\<alpha>, b)]) = a &&&\n    (if snd (a, [(\\<alpha>, b)]) = [] then fst (a, [(\\<alpha>, b)])\n     else snd (last (snd (a, [(\\<alpha>, b)])))) =\n    b", "by auto"], ["proof (state)\nthis:\n  fst (a, [(\\<alpha>, b)]) = a\n  lst (a, [(\\<alpha>, b)]) = b\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst (a, [(\\<alpha>, b)]) = a\n  lst (a, [(\\<alpha>, b)]) = b\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "using ss"], ["proof (prove)\nusing this:\n  fst (a, [(\\<alpha>, b)]) = a\n  lst (a, [(\\<alpha>, b)]) = b\n  (a, [(\\<alpha>, b)]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "unfolding lst_def"], ["proof (prove)\nusing this:\n  fst (a, [(\\<alpha>, b)]) = a\n  (if snd (a, [(\\<alpha>, b)]) = [] then fst (a, [(\\<alpha>, b)])\n   else snd (last (snd (a, [(\\<alpha>, b)])))) =\n  b\n  (a, [(\\<alpha>, b)]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars.\n       fst ss = a \\<and>\n       (if snd ss = [] then fst ss else snd (last (snd ss))) = b", "by fast"], ["proof (state)\nthis:\n  \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_imp_seq: assumes \"(a,b) \\<in> (unlabel ars)^*\"\nshows \"\\<exists>ss \\<in> seq ars. fst ss = a \\<and> lst ss = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "using assms(1)"], ["proof (prove)\nusing this:\n  (a, b) \\<in> (unlabel ars)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n       \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n       \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "assume A: \"(a,b) \\<in> (unlabel ars)^^n\""], ["proof (state)\nthis:\n  (a, b) \\<in> unlabel ars ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n       \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  (a, b) \\<in> unlabel ars ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "proof (induct n arbitrary: a b ars)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b ars.\n       (a, b) \\<in> unlabel ars ^^ 0 \\<Longrightarrow>\n       \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n 2. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "case 0"], ["proof (state)\nthis:\n  (a, b) \\<in> unlabel ars ^^ 0\n\ngoal (2 subgoals):\n 1. \\<And>a b ars.\n       (a, b) \\<in> unlabel ars ^^ 0 \\<Longrightarrow>\n       \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n 2. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "hence eq: \"a = b\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> unlabel ars ^^ 0\n\ngoal (1 subgoal):\n 1. a = b", "by auto"], ["proof (state)\nthis:\n  a = b\n\ngoal (2 subgoals):\n 1. \\<And>a b ars.\n       (a, b) \\<in> unlabel ars ^^ 0 \\<Longrightarrow>\n       \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n 2. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "have \"(a,[]) \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, []) \\<in> seq ars", "using seq.intros(1)"], ["proof (prove)\nusing this:\n  (?a, []) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. (a, []) \\<in> seq ars", "by fast"], ["proof (state)\nthis:\n  (a, []) \\<in> seq ars\n\ngoal (2 subgoals):\n 1. \\<And>a b ars.\n       (a, b) \\<in> unlabel ars ^^ 0 \\<Longrightarrow>\n       \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n 2. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "thus ?case"], ["proof (prove)\nusing this:\n  (a, []) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "using fst_eqD snd_conv lst_def eq"], ["proof (prove)\nusing this:\n  (a, []) \\<in> seq ars\n  fst (?x, ?y) = ?a \\<Longrightarrow> ?x = ?a\n  snd (?x1.0, ?x2.0) = ?x2.0\n  lst ?ss = (if snd ?ss = [] then fst ?ss else snd (last (snd ?ss)))\n  a = b\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "by metis"], ["proof (state)\nthis:\n  \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n\ngoal (1 subgoal):\n 1. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "case (Suc m)"], ["proof (state)\nthis:\n  (?a, ?b) \\<in> unlabel ?ars ^^ m \\<Longrightarrow>\n  \\<exists>ss\\<in>seq ?ars. fst ss = ?a \\<and> lst ss = ?b\n  (a, b) \\<in> unlabel ars ^^ Suc m\n\ngoal (1 subgoal):\n 1. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "obtain c where steps: \"(a,c) \\<in> (unlabel ars)^^m\" and step: \"(c,b) \\<in> (unlabel ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>(a, c) \\<in> unlabel ars ^^ m;\n         (c, b) \\<in> unlabel ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> unlabel ?ars ^^ m \\<Longrightarrow>\n  \\<exists>ss\\<in>seq ?ars. fst ss = ?a \\<and> lst ss = ?b\n  (a, b) \\<in> unlabel ars ^^ Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>(a, c) \\<in> unlabel ars ^^ m;\n         (c, b) \\<in> unlabel ars\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (a, c) \\<in> unlabel ars ^^ m\n  (c, b) \\<in> unlabel ars\n\ngoal (1 subgoal):\n 1. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "obtain ss ts where ss1: \"ss \\<in> seq ars\" and ss2:\"fst ss = a\"\n   and ts1: \"ts \\<in> seq ars\" and ts3:\"lst ts = b\" and eq: \"lst ss = fst ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ss ts.\n        \\<lbrakk>ss \\<in> seq ars; fst ss = a; ts \\<in> seq ars; lst ts = b;\n         lst ss = fst ts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc steps step_imp_seq[OF step]"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> unlabel ?ars ^^ m \\<Longrightarrow>\n  \\<exists>ss\\<in>seq ?ars. fst ss = ?a \\<and> lst ss = ?b\n  (a, b) \\<in> unlabel ars ^^ Suc m\n  (a, c) \\<in> unlabel ars ^^ m\n  \\<exists>ss\\<in>seq ars. fst ss = c \\<and> lst ss = b\n\ngoal (1 subgoal):\n 1. (\\<And>ss ts.\n        \\<lbrakk>ss \\<in> seq ars; fst ss = a; ts \\<in> seq ars; lst ts = b;\n         lst ss = fst ts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ss \\<in> seq ars\n  fst ss = a\n  ts \\<in> seq ars\n  lst ts = b\n  lst ss = fst ts\n\ngoal (1 subgoal):\n 1. \\<And>n a b ars.\n       \\<lbrakk>\\<And>a b ars.\n                   (a, b) \\<in> unlabel ars ^^ n \\<Longrightarrow>\n                   \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b;\n        (a, b) \\<in> unlabel ars ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ss\\<in>seq ars.\n                            fst ss = a \\<and> lst ss = b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "using seq_concat[OF ss1 ts1 eq]"], ["proof (prove)\nusing this:\n  (fst ss, snd ss @ snd ts) \\<in> seq ars\n  lst (fst ss, snd ss @ snd ts) = lst ts\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "unfolding ss2 ts3"], ["proof (prove)\nusing this:\n  (a, snd ss @ snd ts) \\<in> seq ars\n  lst (a, snd ss @ snd ts) = b\n\ngoal (1 subgoal):\n 1. \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b", "by force"], ["proof (state)\nthis:\n  \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ss\\<in>seq ars. fst ss = a \\<and> lst ss = b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma step_imp_unlabeled_step: assumes \"(a,b,c) \\<in> ars\" shows \"(a,c) \\<in> (unlabel ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, c) \\<in> unlabel ars", "using assms"], ["proof (prove)\nusing this:\n  (a, b, c) \\<in> ars\n\ngoal (1 subgoal):\n 1. (a, c) \\<in> unlabel ars", "unfolding unlabel_def"], ["proof (prove)\nusing this:\n  (a, b, c) \\<in> ars\n\ngoal (1 subgoal):\n 1. (a, c) \\<in> {(a, c). \\<exists>b. (a, b, c) \\<in> ars}", "by auto"], ["", "lemma seq_imp_steps:\nassumes \"ss \\<in> seq ars\" and \"fst ss = a\" and \"lst ss = b\" shows \"(a,b) \\<in> (unlabel ars)^*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "from assms surjective_pairing"], ["proof (chain)\npicking this:\n  ss \\<in> seq ars\n  fst ss = a\n  lst ss = b\n  ?t = (fst ?t, snd ?t)", "obtain ls where \"(a,ls) \\<in> seq (ars)\" and \"lst (a,ls) = b\""], ["proof (prove)\nusing this:\n  ss \\<in> seq ars\n  fst ss = a\n  lst ss = b\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (\\<And>ls.\n        \\<lbrakk>(a, ls) \\<in> seq ars; lst (a, ls) = b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (a, ls) \\<in> seq ars\n  lst (a, ls) = b\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "thus ?thesis"], ["proof (prove)\nusing this:\n  (a, ls) \\<in> seq ars\n  lst (a, ls) = b\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "proof (induct ls arbitrary: a b rule:list.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, []) \\<in> seq ars; lst (a, []) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*\n 2. \\<And>x1 x2 a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>(a, x2) \\<in> seq ars; lst (a, x2) = b\\<rbrakk>\n                   \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, x1 # x2) \\<in> seq ars; lst (a, x1 # x2) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*", "case Nil"], ["proof (state)\nthis:\n  (a, []) \\<in> seq ars\n  lst (a, []) = b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, []) \\<in> seq ars; lst (a, []) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*\n 2. \\<And>x1 x2 a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>(a, x2) \\<in> seq ars; lst (a, x2) = b\\<rbrakk>\n                   \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, x1 # x2) \\<in> seq ars; lst (a, x1 # x2) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (a, []) \\<in> seq ars\n  lst (a, []) = b\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "unfolding lst_def"], ["proof (prove)\nusing this:\n  (a, []) \\<in> seq ars\n  (if snd (a, []) = [] then fst (a, []) else snd (last (snd (a, [])))) = b\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> (unlabel ars)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>(a, x2) \\<in> seq ars; lst (a, x2) = b\\<rbrakk>\n                   \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, x1 # x2) \\<in> seq ars; lst (a, x1 # x2) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>(a, x2) \\<in> seq ars; lst (a, x2) = b\\<rbrakk>\n                   \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, x1 # x2) \\<in> seq ars; lst (a, x1 # x2) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>(?a, xs) \\<in> seq ars; lst (?a, xs) = ?b\\<rbrakk>\n  \\<Longrightarrow> (?a, ?b) \\<in> (unlabel ars)\\<^sup>*\n  (a, x # xs) \\<in> seq ars\n  lst (a, x # xs) = b\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>(a, x2) \\<in> seq ars; lst (a, x2) = b\\<rbrakk>\n                   \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, x1 # x2) \\<in> seq ars; lst (a, x1 # x2) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*", "have fst:\"(a,fst x,snd x) \\<in> ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, fst x, snd x) \\<in> ars", "using Cons seq_tail1(2) surjective_pairing"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, xs) \\<in> seq ars; lst (?a, xs) = ?b\\<rbrakk>\n  \\<Longrightarrow> (?a, ?b) \\<in> (unlabel ars)\\<^sup>*\n  (a, x # xs) \\<in> seq ars\n  lst (a, x # xs) = b\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (?s, fst ?x, snd ?x) \\<in> ?lars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (a, fst x, snd x) \\<in> ars", "by metis"], ["proof (state)\nthis:\n  (a, fst x, snd x) \\<in> ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>(a, x2) \\<in> seq ars; lst (a, x2) = b\\<rbrakk>\n                   \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, x1 # x2) \\<in> seq ars; lst (a, x1 # x2) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*", "have \"(snd x,b) \\<in> (unlabel ars)^*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd x, b) \\<in> (unlabel ars)\\<^sup>*", "using Cons seq_tail1(1,3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, xs) \\<in> seq ars; lst (?a, xs) = ?b\\<rbrakk>\n  \\<Longrightarrow> (?a, ?b) \\<in> (unlabel ars)\\<^sup>*\n  (a, x # xs) \\<in> seq ars\n  lst (a, x # xs) = b\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (snd ?x, ?xs) \\<in> seq ?lars\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  lst (?s, ?x # ?xs) = lst (snd ?x, ?xs)\n\ngoal (1 subgoal):\n 1. (snd x, b) \\<in> (unlabel ars)\\<^sup>*", "by metis"], ["proof (state)\nthis:\n  (snd x, b) \\<in> (unlabel ars)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 a b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>(a, x2) \\<in> seq ars; lst (a, x2) = b\\<rbrakk>\n                   \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, x1 # x2) \\<in> seq ars; lst (a, x1 # x2) = b\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> (unlabel ars)\\<^sup>*", "thus ?case"], ["proof (prove)\nusing this:\n  (snd x, b) \\<in> (unlabel ars)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "using step_imp_unlabeled_step[OF fst]"], ["proof (prove)\nusing this:\n  (snd x, b) \\<in> (unlabel ars)\\<^sup>*\n  (a, snd x) \\<in> unlabel ars\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> (unlabel ars)\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> (unlabel ars)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (a, b) \\<in> (unlabel ars)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_vs_steps: shows \"(a,b) \\<in> (unlabel ars)^* = (\\<exists>ss. fst ss = a \\<and> lst ss = b \\<and> ss \\<in> seq ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b) \\<in> (unlabel ars)\\<^sup>*) =\n    (\\<exists>ss. fst ss = a \\<and> lst ss = b \\<and> ss \\<in> seq ars)", "using seq_imp_steps steps_imp_seq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?ss \\<in> seq ?ars; fst ?ss = ?a; lst ?ss = ?b\\<rbrakk>\n  \\<Longrightarrow> (?a, ?b) \\<in> (unlabel ?ars)\\<^sup>*\n  (?a, ?b) \\<in> (unlabel ?ars)\\<^sup>* \\<Longrightarrow>\n  \\<exists>ss\\<in>seq ?ars. fst ss = ?a \\<and> lst ss = ?b\n\ngoal (1 subgoal):\n 1. ((a, b) \\<in> (unlabel ars)\\<^sup>*) =\n    (\\<exists>ss. fst ss = a \\<and> lst ss = b \\<and> ss \\<in> seq ars)", "by metis"], ["", "lemma D_imp_CR: assumes \"\\<forall>P. (peak ars P \\<longrightarrow> (\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>')))\" shows \"CR (unlabel ars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CR (unlabel ars)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> UNIV; (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, c) \\<in> (unlabel ars)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "fix a b c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> UNIV; (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, c) \\<in> (unlabel ars)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "assume A: \"(a,b) \\<in> (unlabel ars)^*\" and B: \"(a,c) \\<in> (unlabel ars)^*\""], ["proof (state)\nthis:\n  (a, b) \\<in> (unlabel ars)\\<^sup>*\n  (a, c) \\<in> (unlabel ars)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> UNIV; (a, b) \\<in> (unlabel ars)\\<^sup>*;\n        (a, c) \\<in> (unlabel ars)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "show \"(b,c) \\<in> (unlabel ars)\\<^sup>\\<down>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "obtain ss1 ss2 where \" peak ars (ss1,ss2)\" and b: \"lst ss1 = b\" and c: \"lst ss2 = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ss1 ss2.\n        \\<lbrakk>peak ars (ss1, ss2); lst ss1 = b; lst ss2 = c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding peak_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ss1 ss2.\n        \\<lbrakk>let (\\<tau>, \\<sigma>) = (ss1, ss2)\n                 in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n                    fst \\<tau> = fst \\<sigma>;\n         lst ss1 = b; lst ss2 = c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using A B"], ["proof (prove)\nusing this:\n  (a, b) \\<in> (unlabel ars)\\<^sup>*\n  (a, c) \\<in> (unlabel ars)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (\\<And>ss1 ss2.\n        \\<lbrakk>let (\\<tau>, \\<sigma>) = (ss1, ss2)\n                 in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n                    fst \\<tau> = fst \\<sigma>;\n         lst ss1 = b; lst ss2 = c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding seq_vs_steps"], ["proof (prove)\nusing this:\n  \\<exists>ss. fst ss = a \\<and> lst ss = b \\<and> ss \\<in> seq ars\n  \\<exists>ss. fst ss = a \\<and> lst ss = c \\<and> ss \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (\\<And>ss1 ss2.\n        \\<lbrakk>let (\\<tau>, \\<sigma>) = (ss1, ss2)\n                 in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n                    fst \\<tau> = fst \\<sigma>;\n         lst ss1 = b; lst ss2 = c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  peak ars (ss1, ss2)\n  lst ss1 = b\n  lst ss2 = c\n\ngoal (1 subgoal):\n 1. (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "from this"], ["proof (chain)\npicking this:\n  peak ars (ss1, ss2)\n  lst ss1 = b\n  lst ss2 = c", "obtain ss3 ss4 where dia: \"diagram ars (ss1,ss2,ss3,ss4)\""], ["proof (prove)\nusing this:\n  peak ars (ss1, ss2)\n  lst ss1 = b\n  lst ss2 = c\n\ngoal (1 subgoal):\n 1. (\\<And>ss3 ss4.\n        diagram ars (ss1, ss2, ss3, ss4) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  peak ars (ss1, ss2)\n  lst ss1 = b\n  lst ss2 = c\n  \\<forall>P.\n     peak ars P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD ars r (fst P, snd P, \\<sigma>', \\<tau>'))\n\ngoal (1 subgoal):\n 1. (\\<And>ss3 ss4.\n        diagram ars (ss1, ss2, ss3, ss4) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding DD_def"], ["proof (prove)\nusing this:\n  peak ars (ss1, ss2)\n  lst ss1 = b\n  lst ss2 = c\n  \\<forall>P.\n     peak ars P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         diagram ars (fst P, snd P, \\<sigma>', \\<tau>') \\<and>\n         D2 r (fst P, snd P, \\<sigma>', \\<tau>'))\n\ngoal (1 subgoal):\n 1. (\\<And>ss3 ss4.\n        diagram ars (ss1, ss2, ss3, ss4) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b aa ba.\n                diagram ars (ss1, ss2, (a, b), aa, ba) \\<Longrightarrow>\n                thesis;\n     peak ars (ss1, ss2);\n     \\<forall>a b aa ba.\n        peak ars ((a, b), aa, ba) \\<longrightarrow>\n        (\\<exists>ab bb ac bc.\n            diagram ars ((a, b), (aa, ba), (ab, bb), ac, bc) \\<and>\n            D2 r ((a, b), (aa, ba), (ab, bb), ac, bc));\n     b = lst ss1; c = lst ss2\\<rbrakk>\n    \\<Longrightarrow> thesis", "using surjective_pairing"], ["proof (prove)\nusing this:\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b aa ba.\n                diagram ars (ss1, ss2, (a, b), aa, ba) \\<Longrightarrow>\n                thesis;\n     peak ars (ss1, ss2);\n     \\<forall>a b aa ba.\n        peak ars ((a, b), aa, ba) \\<longrightarrow>\n        (\\<exists>ab bb ac bc.\n            diagram ars ((a, b), (aa, ba), (ab, bb), ac, bc) \\<and>\n            D2 r ((a, b), (aa, ba), (ab, bb), ac, bc));\n     b = lst ss1; c = lst ss2\\<rbrakk>\n    \\<Longrightarrow> thesis", "by metis"], ["proof (state)\nthis:\n  diagram ars (ss1, ss2, ss3, ss4)\n\ngoal (1 subgoal):\n 1. (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "from dia"], ["proof (chain)\npicking this:\n  diagram ars (ss1, ss2, ss3, ss4)", "obtain d where ss3: \"ss3 \\<in> seq ars\" and ss4: \"ss4 \\<in> seq ars\"\n   and ss3_1: \"fst ss3 = b\" and ss3_2: \"lst ss3 = d\" and ss4_1: \"fst ss4 = c\" and ss4_2:\"lst ss4 = d\""], ["proof (prove)\nusing this:\n  diagram ars (ss1, ss2, ss3, ss4)\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>ss3 \\<in> seq ars; ss4 \\<in> seq ars; fst ss3 = b;\n         lst ss3 = d; fst ss4 = c; lst ss4 = d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b c"], ["proof (prove)\nusing this:\n  diagram ars (ss1, ss2, ss3, ss4)\n  lst ss1 = b\n  lst ss2 = c\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>ss3 \\<in> seq ars; ss4 \\<in> seq ars; fst ss3 = b;\n         lst ss3 = d; fst ss4 = c; lst ss4 = d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding diagram_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') = (ss1, ss2, ss3, ss4)\n  in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<tau> \\<and>\n     lst \\<sigma> = fst \\<tau>' \\<and>\n     lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'\n  lst ss1 = b\n  lst ss2 = c\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>ss3 \\<in> seq ars; ss4 \\<in> seq ars; fst ss3 = b;\n         lst ss3 = d; fst ss4 = c; lst ss4 = d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ss3 \\<in> seq ars\n  ss4 \\<in> seq ars\n  fst ss3 = b\n  lst ss3 = d\n  fst ss4 = c\n  lst ss4 = d\n\ngoal (1 subgoal):\n 1. (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "using seq_imp_steps[OF ss3 ss3_1 ss3_2] seq_imp_steps[OF ss4 ss4_1 ss4_2]"], ["proof (prove)\nusing this:\n  (b, d) \\<in> (unlabel ars)\\<^sup>*\n  (c, d) \\<in> (unlabel ars)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>", "by auto"], ["proof (state)\nthis:\n  (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (b, c) \\<in> (unlabel ars)\\<^sup>\\<down>\n\ngoal:\nNo subgoals!", "qed"], ["", "definition LD :: \"'b set \\<Rightarrow> 'a rel \\<Rightarrow> bool\"\n where \"LD L ars = (\\<exists> (r:: ('b rel)) (lrs::('a,'b) lars). (ars = unlabel lrs) \\<and> trans r \\<and> wf r \\<and> (\\<forall>P. (local_peak lrs P \\<longrightarrow> (\\<exists> \\<sigma>' \\<tau>'. (DD lrs r (fst P,snd P,\\<sigma>',\\<tau>'))))))\""], ["", "lemma sound: assumes \"LD L ars\" shows \"CR ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CR ars", "using assms LD_imp_D D_imp_CR"], ["proof (prove)\nusing this:\n  LD L ars\n  \\<lbrakk>trans ?r; wf ?r;\n   \\<forall>P.\n      local_peak ?ars P \\<longrightarrow>\n      (\\<exists>\\<sigma>' \\<tau>'.\n          DD ?ars ?r (fst P, snd P, \\<sigma>', \\<tau>'));\n   peak ?ars ?P\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ?ars ?r (fst ?P, snd ?P, \\<sigma>', \\<tau>')\n  \\<forall>P.\n     peak ?ars P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD ?ars ?r (fst P, snd P, \\<sigma>', \\<tau>')) \\<Longrightarrow>\n  CR (unlabel ?ars)\n\ngoal (1 subgoal):\n 1. CR ars", "unfolding LD_def"], ["proof (prove)\nusing this:\n  \\<exists>r lrs.\n     ars = unlabel lrs \\<and>\n     trans r \\<and>\n     wf r \\<and>\n     (\\<forall>P.\n         local_peak lrs P \\<longrightarrow>\n         (\\<exists>\\<sigma>' \\<tau>'.\n             DD lrs r (fst P, snd P, \\<sigma>', \\<tau>')))\n  \\<lbrakk>trans ?r; wf ?r;\n   \\<forall>P.\n      local_peak ?ars P \\<longrightarrow>\n      (\\<exists>\\<sigma>' \\<tau>'.\n          DD ?ars ?r (fst P, snd P, \\<sigma>', \\<tau>'));\n   peak ?ars ?P\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ?ars ?r (fst ?P, snd ?P, \\<sigma>', \\<tau>')\n  \\<forall>P.\n     peak ?ars P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD ?ars ?r (fst P, snd P, \\<sigma>', \\<tau>')) \\<Longrightarrow>\n  CR (unlabel ?ars)\n\ngoal (1 subgoal):\n 1. CR ars", "by metis"], ["", "subsubsection \\<open>Application: Newman's Lemma\\<close>"], ["", "lemma measure:\nassumes lab_eq: \"lrs = {(a,c,b). c = a \\<and> (a,b) \\<in> ars}\" and \"(s,(\\<alpha>,t) # ss) \\<in> seq lrs\"\nshows \"set (labels (t,ss)) \\<subseteq> ds ((ars^+)\\<inverse>) {\\<alpha>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels (t, ss))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "using assms(2)"], ["proof (prove)\nusing this:\n  (s, (\\<alpha>, t) # ss) \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. set (labels (t, ss))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "proof (induct ss arbitrary: s \\<alpha> t )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s \\<alpha> t.\n       (s, [(\\<alpha>, t)]) \\<in> seq lrs \\<Longrightarrow>\n       set (labels (t, []))\n       \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n 2. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "case Nil"], ["proof (state)\nthis:\n  (s, [(\\<alpha>, t)]) \\<in> seq lrs\n\ngoal (2 subgoals):\n 1. \\<And>s \\<alpha> t.\n       (s, [(\\<alpha>, t)]) \\<in> seq lrs \\<Longrightarrow>\n       set (labels (t, []))\n       \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n 2. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "thus ?case"], ["proof (prove)\nusing this:\n  (s, [(\\<alpha>, t)]) \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. set (labels (t, []))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "unfolding labels_def"], ["proof (prove)\nusing this:\n  (s, [(\\<alpha>, t)]) \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. set (map fst (snd (t, [])))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "by auto"], ["proof (state)\nthis:\n  set (labels (t, []))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "case (Cons x xs)"], ["proof (state)\nthis:\n  (?s, (?\\<alpha>, ?t) # xs) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  (s, (\\<alpha>, t) # x # xs) \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "from this"], ["proof (chain)\npicking this:\n  (?s, (?\\<alpha>, ?t) # xs) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  (s, (\\<alpha>, t) # x # xs) \\<in> seq lrs", "obtain \\<beta> u where x:\"x = (\\<beta>,u)\""], ["proof (prove)\nusing this:\n  (?s, (?\\<alpha>, ?t) # xs) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  (s, (\\<alpha>, t) # x # xs) \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta> u.\n        x = (\\<beta>, u) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using surjective_pairing"], ["proof (prove)\nusing this:\n  (?s, (?\\<alpha>, ?t) # xs) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  (s, (\\<alpha>, t) # x # xs) \\<in> seq lrs\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta> u.\n        x = (\\<beta>, u) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  x = (\\<beta>, u)\n\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "have t: \"trans ((ars^+)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans ((ars\\<^sup>+)\\<inverse>)", "by (metis trans_converse trans_trancl)"], ["proof (state)\nthis:\n  trans ((ars\\<^sup>+)\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "from Cons(1) x"], ["proof (chain)\npicking this:\n  (?s, (?\\<alpha>, ?t) # xs) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  x = (\\<beta>, u)", "have s0: \"(s, \\<alpha>, t) \\<in> lrs\" and cs:\"(t,(\\<beta>,u)#xs) \\<in> seq lrs\""], ["proof (prove)\nusing this:\n  (?s, (?\\<alpha>, ?t) # xs) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  x = (\\<beta>, u)\n\ngoal (1 subgoal):\n 1. (s, \\<alpha>, t) \\<in> lrs &&& (t, (\\<beta>, u) # xs) \\<in> seq lrs", "using Cons.prems seq_tail1(1) snd_conv fst_conv seq_tail1(2)"], ["proof (prove)\nusing this:\n  (?s, (?\\<alpha>, ?t) # xs) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  x = (\\<beta>, u)\n  (s, (\\<alpha>, t) # x # xs) \\<in> seq lrs\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (snd ?x, ?xs) \\<in> seq ?lars\n  snd (?x1.0, ?x2.0) = ?x2.0\n  fst (?x1.0, ?x2.0) = ?x1.0\n  (?s, ?x # ?xs) \\<in> seq ?lars \\<Longrightarrow>\n  (?s, fst ?x, snd ?x) \\<in> ?lars\n\ngoal (1 subgoal):\n 1. (s, \\<alpha>, t) \\<in> lrs &&& (t, (\\<beta>, u) # xs) \\<in> seq lrs", "by auto"], ["proof (state)\nthis:\n  (s, \\<alpha>, t) \\<in> lrs\n  (t, (\\<beta>, u) # xs) \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "have ih: \"set (labels (u, xs)) \\<subseteq> ds ((ars^+)\\<inverse>) {\\<beta>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels (u, xs))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}", "using Cons(1)[OF cs]"], ["proof (prove)\nusing this:\n  set (labels (u, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels (u, xs))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}", "by auto"], ["proof (state)\nthis:\n  set (labels (u, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "have key: \"{\\<beta>} \\<subseteq> ds ((ars^+)\\<inverse>) {\\<alpha>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<beta>} \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "using s0 cs seq_tail1(2)[OF cs]"], ["proof (prove)\nusing this:\n  (s, \\<alpha>, t) \\<in> lrs\n  (t, (\\<beta>, u) # xs) \\<in> seq lrs\n  (t, fst (\\<beta>, u), snd (\\<beta>, u)) \\<in> lrs\n\ngoal (1 subgoal):\n 1. {\\<beta>} \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "unfolding ds_def lab_eq"], ["proof (prove)\nusing this:\n  (s, \\<alpha>, t) \\<in> {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n  (t, (\\<beta>, u) # xs)\n  \\<in> seq {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n  (t, fst (\\<beta>, u), snd (\\<beta>, u))\n  \\<in> {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n\ngoal (1 subgoal):\n 1. {\\<beta>}\n    \\<subseteq> {y. \\<exists>x\\<in>{\\<alpha>}.\n                       (y, x) \\<in> (ars\\<^sup>+)\\<inverse>}", "by auto"], ["proof (state)\nthis:\n  {\\<beta>} \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a ss s \\<alpha> t.\n       \\<lbrakk>\\<And>s \\<alpha> t.\n                   (s, (\\<alpha>, t) # ss) \\<in> seq lrs \\<Longrightarrow>\n                   set (labels (t, ss))\n                   \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>};\n        (s, (\\<alpha>, t) # a # ss) \\<in> seq lrs\\<rbrakk>\n       \\<Longrightarrow> set (labels (t, a # ss))\n                         \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                                     {\\<alpha>}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels (t, x # xs))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "using ih subset_imp_ds_subset[OF t key] key"], ["proof (prove)\nusing this:\n  set (labels (u, xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n  (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n  {\\<beta>} \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. set (labels (t, x # xs))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "unfolding x labels_def"], ["proof (prove)\nusing this:\n  set (map fst (snd (u, xs)))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n  (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n  {\\<beta>} \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. set (map fst (snd (t, (\\<beta>, u) # xs)))\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "by auto"], ["proof (state)\nthis:\n  set (labels (t, x # xs))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma newman: assumes \"WCR ars\" and \"SN ars\" shows \"CR ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CR ars", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. CR ars", "from assms"], ["proof (chain)\npicking this:\n  WCR ars\n  SN ars", "obtain L where \"L =  {a . \\<exists> b. (a,b) \\<in> ars}\""], ["proof (prove)\nusing this:\n  WCR ars\n  SN ars\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        L = {a. \\<exists>b. (a, b) \\<in> ars} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  L = {a. \\<exists>b. (a, b) \\<in> ars}\n\ngoal (1 subgoal):\n 1. CR ars", "from assms"], ["proof (chain)\npicking this:\n  WCR ars\n  SN ars", "obtain lrs where lab_eq: \"(lrs  = {(a,c,b). c = a \\<and> (a,b) \\<in> ars})\""], ["proof (prove)\nusing this:\n  WCR ars\n  SN ars\n\ngoal (1 subgoal):\n 1. (\\<And>lrs.\n        lrs = {(a, c, b). c = a \\<and> (a, b) \\<in> ars} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lrs = {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n\ngoal (1 subgoal):\n 1. CR ars", "have lab: \"ars = unlabel lrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ars = unlabel lrs", "unfolding unlabel_def lab_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. ars =\n    {(a, c).\n     \\<exists>b. (a, b, c) \\<in> {(a, c, b). c = a \\<and> (a, b) \\<in> ars}}", "by auto"], ["proof (state)\nthis:\n  ars = unlabel lrs\n\ngoal (1 subgoal):\n 1. CR ars", "have t: \"trans ((ars^+)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans ((ars\\<^sup>+)\\<inverse>)", "using trans_converse trans_trancl"], ["proof (prove)\nusing this:\n  trans (?r\\<inverse>) = trans ?r\n  trans (?r\\<^sup>+)\n\ngoal (1 subgoal):\n 1. trans ((ars\\<^sup>+)\\<inverse>)", "by auto"], ["proof (state)\nthis:\n  trans ((ars\\<^sup>+)\\<inverse>)\n\ngoal (1 subgoal):\n 1. CR ars", "have w: \"wf ((ars^+)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ((ars\\<^sup>+)\\<inverse>)", "using assms(2) wf_trancl trancl_converse"], ["proof (prove)\nusing this:\n  SN ars\n  wf ?r \\<Longrightarrow> wf (?r\\<^sup>+)\n  (?r\\<inverse>)\\<^sup>+ = (?r\\<^sup>+)\\<inverse>\n\ngoal (1 subgoal):\n 1. wf ((ars\\<^sup>+)\\<inverse>)", "unfolding SN_iff_wf"], ["proof (prove)\nusing this:\n  wf (ars\\<inverse>)\n  wf ?r \\<Longrightarrow> wf (?r\\<^sup>+)\n  (?r\\<inverse>)\\<^sup>+ = (?r\\<^sup>+)\\<inverse>\n\ngoal (1 subgoal):\n 1. wf ((ars\\<^sup>+)\\<inverse>)", "by metis"], ["proof (state)\nthis:\n  wf ((ars\\<^sup>+)\\<inverse>)\n\ngoal (1 subgoal):\n 1. CR ars", "have ps: \"\\<forall>P. (local_peak lrs P --> (\\<exists> \\<sigma>' \\<tau>'. DD lrs ((ars^+)\\<inverse>) (fst P,snd P,\\<sigma>',\\<tau>')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       local_peak lrs P \\<longrightarrow>\n       (\\<exists>\\<sigma>' \\<tau>'.\n           DD lrs ((ars\\<^sup>+)\\<inverse>)\n            (fst P, snd P, \\<sigma>', \\<tau>'))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       local_peak lrs P \\<longrightarrow>\n       (\\<exists>\\<sigma>' \\<tau>'.\n           DD lrs ((ars\\<^sup>+)\\<inverse>)\n            (fst P, snd P, \\<sigma>', \\<tau>'))", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       local_peak lrs P \\<longrightarrow>\n       (\\<exists>\\<sigma>' \\<tau>'.\n           DD lrs ((ars\\<^sup>+)\\<inverse>)\n            (fst P, snd P, \\<sigma>', \\<tau>'))", "show \"local_peak lrs P --> (\\<exists> \\<sigma>' \\<tau>'. DD lrs ((ars^+)\\<inverse>) (fst P,snd P,\\<sigma>',\\<tau>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_peak lrs P \\<longrightarrow>\n    (\\<exists>\\<sigma>' \\<tau>'.\n        DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>'))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. local_peak lrs P \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "assume A: \"local_peak lrs P\""], ["proof (state)\nthis:\n  local_peak lrs P\n\ngoal (1 subgoal):\n 1. local_peak lrs P \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "show \"(\\<exists> \\<sigma>' \\<tau>'. DD lrs ((ars^+)\\<inverse>) (fst P,snd P,\\<sigma>',\\<tau>'))\" (is \"?DD\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from lab_eq"], ["proof (chain)\npicking this:\n  lrs = {(a, c, b). c = a \\<and> (a, b) \\<in> ars}", "have lab: \"ars = unlabel lrs\""], ["proof (prove)\nusing this:\n  lrs = {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n\ngoal (1 subgoal):\n 1. ars = unlabel lrs", "unfolding unlabel_def"], ["proof (prove)\nusing this:\n  lrs = {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n\ngoal (1 subgoal):\n 1. ars = {(a, c). \\<exists>b. (a, b, c) \\<in> lrs}", "by auto"], ["proof (state)\nthis:\n  ars = unlabel lrs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from A"], ["proof (chain)\npicking this:\n  local_peak lrs P", "obtain \\<tau> \\<sigma> where ts: \"{\\<tau>,\\<sigma>} \\<subseteq> seq lrs\" and l1: \"length (snd \\<tau>) = 1\" and l2: \"length (snd \\<sigma>) = 1\" and P: \"P = (\\<tau>,\\<sigma>)\"\n     and p: \"fst \\<tau> = fst \\<sigma>\""], ["proof (prove)\nusing this:\n  local_peak lrs P\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma>.\n        \\<lbrakk>{\\<tau>, \\<sigma>} \\<subseteq> seq lrs;\n         length (snd \\<tau>) = 1; length (snd \\<sigma>) = 1;\n         P = (\\<tau>, \\<sigma>); fst \\<tau> = fst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding local_peak_def peak_def"], ["proof (prove)\nusing this:\n  let (\\<tau>, \\<sigma>) = P\n  in (let (\\<tau>, \\<sigma>) = P\n      in {\\<tau>, \\<sigma>} \\<subseteq> seq lrs \\<and>\n         fst \\<tau> = fst \\<sigma>) \\<and>\n     length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma>.\n        \\<lbrakk>{\\<tau>, \\<sigma>} \\<subseteq> seq lrs;\n         length (snd \\<tau>) = 1; length (snd \\<sigma>) = 1;\n         P = (\\<tau>, \\<sigma>); fst \\<tau> = fst \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  {\\<tau>, \\<sigma>} \\<subseteq> seq lrs\n  length (snd \\<tau>) = 1\n  length (snd \\<sigma>) = 1\n  P = (\\<tau>, \\<sigma>)\n  fst \\<tau> = fst \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from l1"], ["proof (chain)\npicking this:\n  length (snd \\<tau>) = 1", "obtain \\<beta> b where 1: \"snd \\<tau> = [(\\<beta>,b)]\""], ["proof (prove)\nusing this:\n  length (snd \\<tau>) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta> b.\n        snd \\<tau> = [(\\<beta>, b)] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: length_Suc_conv)"], ["proof (state)\nthis:\n  snd \\<tau> = [(\\<beta>, b)]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  snd \\<tau> = [(\\<beta>, b)]", "obtain a where tau: \"\\<tau> = (a,[(\\<beta>,b)])\""], ["proof (prove)\nusing this:\n  snd \\<tau> = [(\\<beta>, b)]\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<tau> = (a, [(\\<beta>, b)]) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  \\<tau> = (a, [(\\<beta>, b)])\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "hence alb: \"(a,\\<beta>,b) \\<in> lrs\""], ["proof (prove)\nusing this:\n  \\<tau> = (a, [(\\<beta>, b)])\n\ngoal (1 subgoal):\n 1. (a, \\<beta>, b) \\<in> lrs", "using ts"], ["proof (prove)\nusing this:\n  \\<tau> = (a, [(\\<beta>, b)])\n  {\\<tau>, \\<sigma>} \\<subseteq> seq lrs\n\ngoal (1 subgoal):\n 1. (a, \\<beta>, b) \\<in> lrs", "by (metis fst_conv insert_subset seq_tail1(2) snd_conv)"], ["proof (state)\nthis:\n  (a, \\<beta>, b) \\<in> lrs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "have ab: \"(a,b) \\<in> ars\" and a_eq: \"a = \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> ars &&& a = \\<beta>", "using alb"], ["proof (prove)\nusing this:\n  (a, \\<beta>, b) \\<in> lrs\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> ars &&& a = \\<beta>", "unfolding lab_eq"], ["proof (prove)\nusing this:\n  (a, \\<beta>, b) \\<in> {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n\ngoal (1 subgoal):\n 1. (a, b) \\<in> ars &&& a = \\<beta>", "by auto"], ["proof (state)\nthis:\n  (a, b) \\<in> ars\n  a = \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from l2"], ["proof (chain)\npicking this:\n  length (snd \\<sigma>) = 1", "obtain \\<alpha> c where 2: \"snd \\<sigma> = [(\\<alpha>,c)]\""], ["proof (prove)\nusing this:\n  length (snd \\<sigma>) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> c.\n        snd \\<sigma> = [(\\<alpha>, c)] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: length_Suc_conv)"], ["proof (state)\nthis:\n  snd \\<sigma> = [(\\<alpha>, c)]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "hence sigma: \"\\<sigma> = (a,[(\\<alpha>,c)])\""], ["proof (prove)\nusing this:\n  snd \\<sigma> = [(\\<alpha>, c)]\n\ngoal (1 subgoal):\n 1. \\<sigma> = (a, [(\\<alpha>, c)])", "using ts"], ["proof (prove)\nusing this:\n  snd \\<sigma> = [(\\<alpha>, c)]\n  {\\<tau>, \\<sigma>} \\<subseteq> seq lrs\n\ngoal (1 subgoal):\n 1. \\<sigma> = (a, [(\\<alpha>, c)])", "by (metis fst_conv p prod.collapse tau)"], ["proof (state)\nthis:\n  \\<sigma> = (a, [(\\<alpha>, c)])\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "hence alc: \"(a,\\<alpha>,c) \\<in> lrs\""], ["proof (prove)\nusing this:\n  \\<sigma> = (a, [(\\<alpha>, c)])\n\ngoal (1 subgoal):\n 1. (a, \\<alpha>, c) \\<in> lrs", "using ts"], ["proof (prove)\nusing this:\n  \\<sigma> = (a, [(\\<alpha>, c)])\n  {\\<tau>, \\<sigma>} \\<subseteq> seq lrs\n\ngoal (1 subgoal):\n 1. (a, \\<alpha>, c) \\<in> lrs", "by (metis fst_conv insert_subset seq_tail1(2) snd_conv)"], ["proof (state)\nthis:\n  (a, \\<alpha>, c) \\<in> lrs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "hence ac: \"(a,c) \\<in> ars\" and a_eq: \"a = \\<alpha>\""], ["proof (prove)\nusing this:\n  (a, \\<alpha>, c) \\<in> lrs\n\ngoal (1 subgoal):\n 1. (a, c) \\<in> ars &&& a = \\<alpha>", "using alb"], ["proof (prove)\nusing this:\n  (a, \\<alpha>, c) \\<in> lrs\n  (a, \\<beta>, b) \\<in> lrs\n\ngoal (1 subgoal):\n 1. (a, c) \\<in> ars &&& a = \\<alpha>", "unfolding lab_eq"], ["proof (prove)\nusing this:\n  (a, \\<alpha>, c) \\<in> {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n  (a, \\<beta>, b) \\<in> {(a, c, b). c = a \\<and> (a, b) \\<in> ars}\n\ngoal (1 subgoal):\n 1. (a, c) \\<in> ars &&& a = \\<alpha>", "by auto"], ["proof (state)\nthis:\n  (a, c) \\<in> ars\n  a = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from tau sigma"], ["proof (chain)\npicking this:\n  \\<tau> = (a, [(\\<beta>, b)])\n  \\<sigma> = (a, [(\\<alpha>, c)])", "have fl: \"fst \\<tau> = a \\<and> fst \\<sigma> = a \\<and> lst \\<tau> = b \\<and> lst \\<sigma> = c\""], ["proof (prove)\nusing this:\n  \\<tau> = (a, [(\\<beta>, b)])\n  \\<sigma> = (a, [(\\<alpha>, c)])\n\ngoal (1 subgoal):\n 1. fst \\<tau> = a \\<and>\n    fst \\<sigma> = a \\<and> lst \\<tau> = b \\<and> lst \\<sigma> = c", "unfolding lst_def"], ["proof (prove)\nusing this:\n  \\<tau> = (a, [(\\<beta>, b)])\n  \\<sigma> = (a, [(\\<alpha>, c)])\n\ngoal (1 subgoal):\n 1. fst \\<tau> = a \\<and>\n    fst \\<sigma> = a \\<and>\n    (if snd \\<tau> = [] then fst \\<tau> else snd (last (snd \\<tau>))) =\n    b \\<and>\n    (if snd \\<sigma> = [] then fst \\<sigma>\n     else snd (last (snd \\<sigma>))) =\n    c", "by auto"], ["proof (state)\nthis:\n  fst \\<tau> = a \\<and>\n  fst \\<sigma> = a \\<and> lst \\<tau> = b \\<and> lst \\<sigma> = c\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from ab ac"], ["proof (chain)\npicking this:\n  (a, b) \\<in> ars\n  (a, c) \\<in> ars", "obtain d where \"(b,d) \\<in> ars^*\" and \"(c,d) \\<in> ars^*\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> ars\n  (a, c) \\<in> ars\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>(b, d) \\<in> ars\\<^sup>*; (c, d) \\<in> ars\\<^sup>*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  (a, b) \\<in> ars\n  (a, c) \\<in> ars\n  WCR ars\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>(b, d) \\<in> ars\\<^sup>*; (c, d) \\<in> ars\\<^sup>*\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (b, d) \\<in> ars\\<^sup>*\n  (c, d) \\<in> ars\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  (b, d) \\<in> ars\\<^sup>*\n  (c, d) \\<in> ars\\<^sup>*", "obtain \\<sigma>' \\<tau>' where sigma': \"\\<sigma>' \\<in> seq lrs\" and sigma'1: \"fst \\<sigma>' = b\" and \"lst \\<sigma>' = d\"\n                           and  tau':\"\\<tau>' \\<in> seq lrs\" and \"fst \\<tau>' = c\" and \"lst \\<tau>' = d\""], ["proof (prove)\nusing this:\n  (b, d) \\<in> ars\\<^sup>*\n  (c, d) \\<in> ars\\<^sup>*\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<tau>'.\n        \\<lbrakk>\\<sigma>' \\<in> seq lrs; fst \\<sigma>' = b;\n         lst \\<sigma>' = d; \\<tau>' \\<in> seq lrs; fst \\<tau>' = c;\n         lst \\<tau>' = d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using steps_imp_seq"], ["proof (prove)\nusing this:\n  (b, d) \\<in> ars\\<^sup>*\n  (c, d) \\<in> ars\\<^sup>*\n  (?a, ?b) \\<in> (unlabel ?ars)\\<^sup>* \\<Longrightarrow>\n  \\<exists>ss\\<in>seq ?ars. fst ss = ?a \\<and> lst ss = ?b\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<tau>'.\n        \\<lbrakk>\\<sigma>' \\<in> seq lrs; fst \\<sigma>' = b;\n         lst \\<sigma>' = d; \\<tau>' \\<in> seq lrs; fst \\<tau>' = c;\n         lst \\<tau>' = d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding lab"], ["proof (prove)\nusing this:\n  (b, d) \\<in> (unlabel lrs)\\<^sup>*\n  (c, d) \\<in> (unlabel lrs)\\<^sup>*\n  (?a, ?b) \\<in> (unlabel ?ars)\\<^sup>* \\<Longrightarrow>\n  \\<exists>ss\\<in>seq ?ars. fst ss = ?a \\<and> lst ss = ?b\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<tau>'.\n        \\<lbrakk>\\<sigma>' \\<in> seq lrs; fst \\<sigma>' = b;\n         lst \\<sigma>' = d; \\<tau>' \\<in> seq lrs; fst \\<tau>' = c;\n         lst \\<tau>' = d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> seq lrs\n  fst \\<sigma>' = b\n  lst \\<sigma>' = d\n  \\<tau>' \\<in> seq lrs\n  fst \\<tau>' = c\n  lst \\<tau>' = d\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "hence d:\"diagram lrs (fst P, snd P, \\<sigma>', \\<tau>')\""], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> seq lrs\n  fst \\<sigma>' = b\n  lst \\<sigma>' = d\n  \\<tau>' \\<in> seq lrs\n  fst \\<tau>' = c\n  lst \\<tau>' = d\n\ngoal (1 subgoal):\n 1. diagram lrs (fst P, snd P, \\<sigma>', \\<tau>')", "using P A ts fl"], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> seq lrs\n  fst \\<sigma>' = b\n  lst \\<sigma>' = d\n  \\<tau>' \\<in> seq lrs\n  fst \\<tau>' = c\n  lst \\<tau>' = d\n  P = (\\<tau>, \\<sigma>)\n  local_peak lrs P\n  {\\<tau>, \\<sigma>} \\<subseteq> seq lrs\n  fst \\<tau> = a \\<and>\n  fst \\<sigma> = a \\<and> lst \\<tau> = b \\<and> lst \\<sigma> = c\n\ngoal (1 subgoal):\n 1. diagram lrs (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding local_peak_def peak_def diagram_def"], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> seq lrs\n  fst \\<sigma>' = b\n  lst \\<sigma>' = d\n  \\<tau>' \\<in> seq lrs\n  fst \\<tau>' = c\n  lst \\<tau>' = d\n  P = (\\<tau>, \\<sigma>)\n  let (\\<tau>, \\<sigma>) = P\n  in (let (\\<tau>, \\<sigma>) = P\n      in {\\<tau>, \\<sigma>} \\<subseteq> seq lrs \\<and>\n         fst \\<tau> = fst \\<sigma>) \\<and>\n     length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1\n  {\\<tau>, \\<sigma>} \\<subseteq> seq lrs\n  fst \\<tau> = a \\<and>\n  fst \\<sigma> = a \\<and> lst \\<tau> = b \\<and> lst \\<sigma> = c\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (fst P, snd P, \\<sigma>', \\<tau>')\n    in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq lrs \\<and>\n       fst \\<sigma> = fst \\<tau> \\<and>\n       lst \\<sigma> = fst \\<tau>' \\<and>\n       lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'", "by auto"], ["proof (state)\nthis:\n  diagram lrs (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "have s1:\"(a,(\\<beta>,b)# snd \\<sigma>') \\<in> seq lrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, (\\<beta>, b) # snd \\<sigma>') \\<in> seq lrs", "using \\<open>fst \\<sigma>' = b\\<close> seq.intros(2)[OF alb] sigma'"], ["proof (prove)\nusing this:\n  fst \\<sigma>' = b\n  (b, ?ss) \\<in> seq lrs \\<Longrightarrow>\n  (a, (\\<beta>, b) # ?ss) \\<in> seq lrs\n  \\<sigma>' \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. (a, (\\<beta>, b) # snd \\<sigma>') \\<in> seq lrs", "by auto"], ["proof (state)\nthis:\n  (a, (\\<beta>, b) # snd \\<sigma>') \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "have vv: \"set (labels \\<sigma>') \\<subseteq> ds ((ars^+)\\<inverse>) {\\<beta>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels \\<sigma>')\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}", "using measure[OF lab_eq s1]"], ["proof (prove)\nusing this:\n  set (labels (b, snd \\<sigma>'))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels \\<sigma>')\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}", "by (metis \\<open>fst \\<sigma>' = b\\<close> surjective_pairing)"], ["proof (state)\nthis:\n  set (labels \\<sigma>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "have s2:\"(a,(\\<alpha>,c)# snd \\<tau>') \\<in> seq lrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, (\\<alpha>, c) # snd \\<tau>') \\<in> seq lrs", "using \\<open>fst \\<tau>' = c\\<close> seq.intros(2)[OF alc] tau'"], ["proof (prove)\nusing this:\n  fst \\<tau>' = c\n  (c, ?ss) \\<in> seq lrs \\<Longrightarrow>\n  (a, (\\<alpha>, c) # ?ss) \\<in> seq lrs\n  \\<tau>' \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. (a, (\\<alpha>, c) # snd \\<tau>') \\<in> seq lrs", "by auto"], ["proof (state)\nthis:\n  (a, (\\<alpha>, c) # snd \\<tau>') \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "hence ww: \"set (labels \\<tau>') \\<subseteq> ds ((ars^+)\\<inverse>) {\\<alpha>}\""], ["proof (prove)\nusing this:\n  (a, (\\<alpha>, c) # snd \\<tau>') \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>')\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "using measure[OF lab_eq] s2"], ["proof (prove)\nusing this:\n  (a, (\\<alpha>, c) # snd \\<tau>') \\<in> seq lrs\n  (?s, (?\\<alpha>, ?t) # ?ss) \\<in> seq lrs \\<Longrightarrow>\n  set (labels (?t, ?ss))\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {?\\<alpha>}\n  (a, (\\<alpha>, c) # snd \\<tau>') \\<in> seq lrs\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>')\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "by (metis \\<open>fst \\<tau>' = c\\<close> surjective_pairing)"], ["proof (state)\nthis:\n  set (labels \\<tau>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from w"], ["proof (chain)\npicking this:\n  wf ((ars\\<^sup>+)\\<inverse>)", "have i: \"irrefl ((ars^+)\\<inverse>)\""], ["proof (prove)\nusing this:\n  wf ((ars\\<^sup>+)\\<inverse>)\n\ngoal (1 subgoal):\n 1. irrefl ((ars\\<^sup>+)\\<inverse>)", "by (metis SN_imp_acyclic acyclic_converse acyclic_irrefl assms(2) trancl_converse)"], ["proof (state)\nthis:\n  irrefl ((ars\\<^sup>+)\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from vv ww"], ["proof (chain)\npicking this:\n  set (labels \\<sigma>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n  set (labels \\<tau>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}", "have ld: \"LD' ((ars^+)\\<inverse>) \\<beta> \\<alpha> (labels \\<sigma>') [] [] (labels \\<tau>') [] []\""], ["proof (prove)\nusing this:\n  set (labels \\<sigma>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n  set (labels \\<tau>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. LD' ((ars\\<^sup>+)\\<inverse>) \\<beta> \\<alpha> (labels \\<sigma>') [] []\n     (labels \\<tau>') [] []", "unfolding LD'_def LD_1'_def"], ["proof (prove)\nusing this:\n  set (labels \\<sigma>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>}\n  set (labels \\<tau>')\n  \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>}\n\ngoal (1 subgoal):\n 1. (set (labels \\<sigma>')\n     \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>} \\<and>\n     length [] \\<le> 1 \\<and>\n     set [] \\<subseteq> {\\<alpha>} \\<and>\n     set []\n     \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s\n                 {\\<alpha>, \\<beta>}) \\<and>\n    set (labels \\<tau>')\n    \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<alpha>} \\<and>\n    length [] \\<le> 1 \\<and>\n    set [] \\<subseteq> {\\<beta>} \\<and>\n    set [] \\<subseteq> (ars\\<^sup>+)\\<inverse> \\<down>s {\\<beta>, \\<alpha>}", "by auto"], ["proof (state)\nthis:\n  LD' ((ars\\<^sup>+)\\<inverse>) \\<beta> \\<alpha> (labels \\<sigma>') [] []\n   (labels \\<tau>') [] []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "have D: \"D ((ars^+)\\<inverse>) (labels (fst P)) (labels (snd P)) (labels \\<sigma>') (labels \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D ((ars\\<^sup>+)\\<inverse>) (labels (fst P)) (labels (snd P))\n     (labels \\<sigma>') (labels \\<tau>')", "using proposition3_4[OF t i ld]"], ["proof (prove)\nusing this:\n  D ((ars\\<^sup>+)\\<inverse>) [\\<beta>] [\\<alpha>]\n   (labels \\<sigma>' @ [] @ []) (labels \\<tau>' @ [] @ [])\n\ngoal (1 subgoal):\n 1. D ((ars\\<^sup>+)\\<inverse>) (labels (fst P)) (labels (snd P))\n     (labels \\<sigma>') (labels \\<tau>')", "unfolding P sigma tau lst_def labels_def"], ["proof (prove)\nusing this:\n  D ((ars\\<^sup>+)\\<inverse>) [\\<beta>] [\\<alpha>]\n   (map fst (snd \\<sigma>') @ [] @ []) (map fst (snd \\<tau>') @ [] @ [])\n\ngoal (1 subgoal):\n 1. D ((ars\\<^sup>+)\\<inverse>)\n     (map fst (snd (fst ((a, [(\\<beta>, b)]), a, [(\\<alpha>, c)]))))\n     (map fst (snd (snd ((a, [(\\<beta>, b)]), a, [(\\<alpha>, c)]))))\n     (map fst (snd \\<sigma>')) (map fst (snd \\<tau>'))", "by auto"], ["proof (state)\nthis:\n  D ((ars\\<^sup>+)\\<inverse>) (labels (fst P)) (labels (snd P))\n   (labels \\<sigma>') (labels \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "from d D"], ["proof (chain)\npicking this:\n  diagram lrs (fst P, snd P, \\<sigma>', \\<tau>')\n  D ((ars\\<^sup>+)\\<inverse>) (labels (fst P)) (labels (snd P))\n   (labels \\<sigma>') (labels \\<tau>')", "have \"DD lrs ((ars^+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')\""], ["proof (prove)\nusing this:\n  diagram lrs (fst P, snd P, \\<sigma>', \\<tau>')\n  D ((ars\\<^sup>+)\\<inverse>) (labels (fst P)) (labels (snd P))\n   (labels \\<sigma>') (labels \\<tau>')\n\ngoal (1 subgoal):\n 1. DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding DD_def D2_def"], ["proof (prove)\nusing this:\n  diagram lrs (fst P, snd P, \\<sigma>', \\<tau>')\n  D ((ars\\<^sup>+)\\<inverse>) (labels (fst P)) (labels (snd P))\n   (labels \\<sigma>') (labels \\<tau>')\n\ngoal (1 subgoal):\n 1. diagram lrs (fst P, snd P, \\<sigma>', \\<tau>') \\<and>\n    (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n           (fst P, snd P, \\<sigma>', \\<tau>')\n     in D ((ars\\<^sup>+)\\<inverse>) (labels \\<tau>) (labels \\<sigma>)\n         (labels \\<sigma>') (labels \\<tau>'))", "by auto"], ["proof (state)\nthis:\n  DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "thus ?thesis"], ["proof (prove)\nusing this:\n  DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')", "by fast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local_peak lrs P \\<longrightarrow>\n  (\\<exists>\\<sigma>' \\<tau>'.\n      DD lrs ((ars\\<^sup>+)\\<inverse>) (fst P, snd P, \\<sigma>', \\<tau>'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P.\n     local_peak lrs P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD lrs ((ars\\<^sup>+)\\<inverse>)\n          (fst P, snd P, \\<sigma>', \\<tau>'))\n\ngoal (1 subgoal):\n 1. CR ars", "have \"LD L ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LD L ars", "using lab t w ps"], ["proof (prove)\nusing this:\n  ars = unlabel lrs\n  trans ((ars\\<^sup>+)\\<inverse>)\n  wf ((ars\\<^sup>+)\\<inverse>)\n  \\<forall>P.\n     local_peak lrs P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD lrs ((ars\\<^sup>+)\\<inverse>)\n          (fst P, snd P, \\<sigma>', \\<tau>'))\n\ngoal (1 subgoal):\n 1. LD L ars", "unfolding LD_def"], ["proof (prove)\nusing this:\n  ars = unlabel lrs\n  trans ((ars\\<^sup>+)\\<inverse>)\n  wf ((ars\\<^sup>+)\\<inverse>)\n  \\<forall>P.\n     local_peak lrs P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD lrs ((ars\\<^sup>+)\\<inverse>)\n          (fst P, snd P, \\<sigma>', \\<tau>'))\n\ngoal (1 subgoal):\n 1. \\<exists>r lrs.\n       ars = unlabel lrs \\<and>\n       trans r \\<and>\n       wf r \\<and>\n       (\\<forall>P.\n           local_peak lrs P \\<longrightarrow>\n           (\\<exists>\\<sigma>' \\<tau>'.\n               DD lrs r (fst P, snd P, \\<sigma>', \\<tau>')))", "by fast"], ["proof (state)\nthis:\n  LD L ars\n\ngoal (1 subgoal):\n 1. CR ars", "thus ?thesis"], ["proof (prove)\nusing this:\n  LD L ars\n\ngoal (1 subgoal):\n 1. CR ars", "using sound"], ["proof (prove)\nusing this:\n  LD L ars\n  LD ?L ?ars \\<Longrightarrow> CR ?ars\n\ngoal (1 subgoal):\n 1. CR ars", "by auto"], ["proof (state)\nthis:\n  CR ars\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Conversion Version\\<close>"], ["", "text \\<open>This section follows~\\cite{vO08a}.\\<close>"], ["", "text \\<open>auxiliary results on multisets\\<close>"], ["", "lemma mul_eq_add_right: \"(M,M+P) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, M + P) \\<in> mul_eq r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, M + P) \\<in> mul_eq r", "have \"M = M + {#}\" \"set_mset {#} \\<subseteq> dm r P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = M + {#} &&& set_mset {#} \\<subseteq> r \\<down>m P", "by auto"], ["proof (state)\nthis:\n  M = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m P\n\ngoal (1 subgoal):\n 1. (M, M + P) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  M = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m P\n\ngoal (1 subgoal):\n 1. (M, M + P) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  M = M + {#}\n  set_mset {#} \\<subseteq> r \\<down>m P\n\ngoal (1 subgoal):\n 1. (M, M + P)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by fast"], ["proof (state)\nthis:\n  (M, M + P) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_add_right: assumes \"(M,N) \\<in> mul r\" shows \"(M,N+P) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N + P) \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M, N + P) \\<in> mul r", "from assms"], ["proof (chain)\npicking this:\n  (M, N) \\<in> mul r", "obtain I J K where \"M = I + K\" \"N = I + J\" \"set_mset K \\<subseteq> dm r J\" \"J \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  (M, N) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J; set_mset K \\<subseteq> r \\<down>m J;\n         J \\<noteq> {#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_def"], ["proof (prove)\nusing this:\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and>\n            set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J; set_mset K \\<subseteq> r \\<down>m J;\n         J \\<noteq> {#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, N + P) \\<in> mul r", "hence b: \"M = I + K\" \"N + P = I + (J + P)\" \"set_mset K \\<subseteq> ds r (set_mset J \\<union> set_mset P)\" \"J+P \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M = I + K &&& N + P = I + (J + P)) &&&\n    set_mset K \\<subseteq> r \\<down>s (set_mset J \\<union> set_mset P) &&&\n    J + P \\<noteq> {#}", "unfolding dm_def lemma2_6_1_set"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>s set_mset J\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M = I + K &&& N + P = I + (J + P)) &&&\n    set_mset K\n    \\<subseteq> r \\<down>s set_mset J \\<union> r \\<down>s set_mset P &&&\n    J + P \\<noteq> {#}", "using union_assoc"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>s set_mset J\n  J \\<noteq> {#}\n  ?M + ?N + ?K = ?M + (?N + ?K)\n\ngoal (1 subgoal):\n 1. (M = I + K &&& N + P = I + (J + P)) &&&\n    set_mset K\n    \\<subseteq> r \\<down>s set_mset J \\<union> r \\<down>s set_mset P &&&\n    J + P \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  M = I + K\n  N + P = I + (J + P)\n  set_mset K \\<subseteq> r \\<down>s (set_mset J \\<union> set_mset P)\n  J + P \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, N + P) \\<in> mul r", "hence \"set_mset K \\<subseteq> ds r (set_mset (J+P ))\""], ["proof (prove)\nusing this:\n  M = I + K\n  N + P = I + (J + P)\n  set_mset K \\<subseteq> r \\<down>s (set_mset J \\<union> set_mset P)\n  J + P \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. set_mset K \\<subseteq> r \\<down>s set_mset (J + P)", "by auto"], ["proof (state)\nthis:\n  set_mset K \\<subseteq> r \\<down>s set_mset (J + P)\n\ngoal (1 subgoal):\n 1. (M, N + P) \\<in> mul r", "thus ?thesis"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>s set_mset (J + P)\n\ngoal (1 subgoal):\n 1. (M, N + P) \\<in> mul r", "using b"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>s set_mset (J + P)\n  M = I + K\n  N + P = I + (J + P)\n  set_mset K \\<subseteq> r \\<down>s (set_mset J \\<union> set_mset P)\n  J + P \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, N + P) \\<in> mul r", "unfolding mul_def"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>s set_mset (J + P)\n  M = I + K\n  N + P = I + (J + P)\n  set_mset K \\<subseteq> r \\<down>s (set_mset J \\<union> set_mset P)\n  J + P \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, N + P)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}", "unfolding dm_def"], ["proof (prove)\nusing this:\n  set_mset K \\<subseteq> r \\<down>s set_mset (J + P)\n  M = I + K\n  N + P = I + (J + P)\n  set_mset K \\<subseteq> r \\<down>s (set_mset J \\<union> set_mset P)\n  J + P \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M, N + P)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>s set_mset J \\<and>\n              J \\<noteq> {#}}", "by fast"], ["proof (state)\nthis:\n  (M, N + P) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_eq_and_ds_imp_ds:\nassumes t: \"trans r\" and \"(M,N) \\<in> mul_eq r\" and \"set_mset N \\<subseteq> ds r S\"\nshows \"set_mset M \\<subseteq> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  (M, N) \\<in> mul_eq r\n  set_mset N \\<subseteq> r \\<down>s S", "obtain I J K where a: \"M = I + K\" and \"N = I + J\" and c: \"set_mset K \\<subseteq> dm r J\""], ["proof (prove)\nusing this:\n  trans r\n  (M, N) \\<in> mul_eq r\n  set_mset N \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  trans r\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n  set_mset N \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J;\n         set_mset K \\<subseteq> r \\<down>m J\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "hence k1:\"set_mset I \\<subseteq> ds r S\" \"set_mset J \\<subseteq> ds r S\""], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset I \\<subseteq> r \\<down>s S &&&\n    set_mset J \\<subseteq> r \\<down>s S", "using assms"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  trans r\n  (M, N) \\<in> mul_eq r\n  set_mset N \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset I \\<subseteq> r \\<down>s S &&&\n    set_mset J \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset I \\<subseteq> r \\<down>s S\n  set_mset J \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "hence \"ds r (set_mset J) \\<subseteq> ds r S\""], ["proof (prove)\nusing this:\n  set_mset I \\<subseteq> r \\<down>s S\n  set_mset J \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. r \\<down>s set_mset J \\<subseteq> r \\<down>s S", "using subset_imp_ds_subset[OF t]"], ["proof (prove)\nusing this:\n  set_mset I \\<subseteq> r \\<down>s S\n  set_mset J \\<subseteq> r \\<down>s S\n  ?S \\<subseteq> r \\<down>s ?T \\<Longrightarrow>\n  r \\<down>s ?S \\<subseteq> r \\<down>s ?T\n\ngoal (1 subgoal):\n 1. r \\<down>s set_mset J \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  r \\<down>s set_mset J \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<down>s set_mset J \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "using k1 a c"], ["proof (prove)\nusing this:\n  r \\<down>s set_mset J \\<subseteq> r \\<down>s S\n  set_mset I \\<subseteq> r \\<down>s S\n  set_mset J \\<subseteq> r \\<down>s S\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>m J\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "unfolding dm_def"], ["proof (prove)\nusing this:\n  r \\<down>s set_mset J \\<subseteq> r \\<down>s S\n  set_mset I \\<subseteq> r \\<down>s S\n  set_mset J \\<subseteq> r \\<down>s S\n  M = I + K\n  set_mset K \\<subseteq> r \\<down>s set_mset J\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset M \\<subseteq> r \\<down>s S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemma2_6_2_set: assumes \"S \\<subseteq> T\" shows \"ds r S \\<subseteq> ds r T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s S \\<subseteq> r \\<down>s T", "using assms"], ["proof (prove)\nusing this:\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. r \\<down>s S \\<subseteq> r \\<down>s T", "unfolding ds_def"], ["proof (prove)\nusing this:\n  S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>S. (y, x) \\<in> r}\n    \\<subseteq> {y. \\<exists>x\\<in>T. (y, x) \\<in> r}", "by auto"], ["", "lemma leq_imp_subseteq: assumes \"M \\<subseteq># N\" shows \"set_mset M \\<subseteq> set_mset N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> set_mset N", "using assms mset_subset_eqD"], ["proof (prove)\nusing this:\n  M \\<subseteq># N\n  \\<lbrakk>?A \\<subseteq># ?B; ?x \\<in># ?A\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in># ?B\n\ngoal (1 subgoal):\n 1. set_mset M \\<subseteq> set_mset N", "by auto"], ["", "lemma mul_add_mul_eq_imp_mul: assumes \"(M,N) \\<in> mul r\" and \"(P,Q) \\<in> mul_eq r\" shows \"(M+P,N+Q) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "from assms(1)"], ["proof (chain)\npicking this:\n  (M, N) \\<in> mul r", "obtain I J K where a:\"M = I + K\" \"N = I + J\" \"set_mset K \\<subseteq> dm r J\" \"J \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  (M, N) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J; set_mset K \\<subseteq> r \\<down>m J;\n         J \\<noteq> {#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_def"], ["proof (prove)\nusing this:\n  (M, N)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and>\n            set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}\n\ngoal (1 subgoal):\n 1. (\\<And>I K J.\n        \\<lbrakk>M = I + K; N = I + J; set_mset K \\<subseteq> r \\<down>m J;\n         J \\<noteq> {#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "from assms(2)"], ["proof (chain)\npicking this:\n  (P, Q) \\<in> mul_eq r", "obtain I2 J2 K2 where b:\"P = I2 + K2\" \"Q = I2 + J2\" \"set_mset K2 \\<subseteq> dm r J2\""], ["proof (prove)\nusing this:\n  (P, Q) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>I2 K2 J2.\n        \\<lbrakk>P = I2 + K2; Q = I2 + J2;\n         set_mset K2 \\<subseteq> r \\<down>m J2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  (P, Q)\n  \\<in> {(M, N).\n         \\<exists>I J K.\n            M = I + K \\<and>\n            N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}\n\ngoal (1 subgoal):\n 1. (\\<And>I2 K2 J2.\n        \\<lbrakk>P = I2 + K2; Q = I2 + J2;\n         set_mset K2 \\<subseteq> r \\<down>m J2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P = I2 + K2\n  Q = I2 + J2\n  set_mset K2 \\<subseteq> r \\<down>m J2\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "have \"M + P = (I + I2) + (K + K2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M + P = I + I2 + (K + K2)", "using a b union_commute union_assoc"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n  P = I2 + K2\n  Q = I2 + J2\n  set_mset K2 \\<subseteq> r \\<down>m J2\n  ?M + ?N = ?N + ?M\n  ?M + ?N + ?K = ?M + (?N + ?K)\n\ngoal (1 subgoal):\n 1. M + P = I + I2 + (K + K2)", "by metis"], ["proof (state)\nthis:\n  M + P = I + I2 + (K + K2)\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "moreover"], ["proof (state)\nthis:\n  M + P = I + I2 + (K + K2)\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "have \"N + Q = (I + I2) + (J + J2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N + Q = I + I2 + (J + J2)", "using a b union_commute union_assoc"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n  P = I2 + K2\n  Q = I2 + J2\n  set_mset K2 \\<subseteq> r \\<down>m J2\n  ?M + ?N = ?N + ?M\n  ?M + ?N + ?K = ?M + (?N + ?K)\n\ngoal (1 subgoal):\n 1. N + Q = I + I2 + (J + J2)", "by metis"], ["proof (state)\nthis:\n  N + Q = I + I2 + (J + J2)\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "moreover"], ["proof (state)\nthis:\n  N + Q = I + I2 + (J + J2)\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "have \"set_mset (K + K2) \\<subseteq> dm r (J + J2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (K + K2) \\<subseteq> r \\<down>m (J + J2)", "using a b"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n  P = I2 + K2\n  Q = I2 + J2\n  set_mset K2 \\<subseteq> r \\<down>m J2\n\ngoal (1 subgoal):\n 1. set_mset (K + K2) \\<subseteq> r \\<down>m (J + J2)", "unfolding lemma2_6_1_multiset"], ["proof (prove)\nusing this:\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n  P = I2 + K2\n  Q = I2 + J2\n  set_mset K2 \\<subseteq> r \\<down>m J2\n\ngoal (1 subgoal):\n 1. set_mset (K + K2) \\<subseteq> r \\<down>m J \\<union> r \\<down>m J2", "by auto"], ["proof (state)\nthis:\n  set_mset (K + K2) \\<subseteq> r \\<down>m (J + J2)\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "ultimately"], ["proof (chain)\npicking this:\n  M + P = I + I2 + (K + K2)\n  N + Q = I + I2 + (J + J2)\n  set_mset (K + K2) \\<subseteq> r \\<down>m (J + J2)", "show ?thesis"], ["proof (prove)\nusing this:\n  M + P = I + I2 + (K + K2)\n  N + Q = I + I2 + (J + J2)\n  set_mset (K + K2) \\<subseteq> r \\<down>m (J + J2)\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "using a b"], ["proof (prove)\nusing this:\n  M + P = I + I2 + (K + K2)\n  N + Q = I + I2 + (J + J2)\n  set_mset (K + K2) \\<subseteq> r \\<down>m (J + J2)\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n  P = I2 + K2\n  Q = I2 + J2\n  set_mset K2 \\<subseteq> r \\<down>m J2\n\ngoal (1 subgoal):\n 1. (M + P, N + Q) \\<in> mul r", "unfolding mul_def"], ["proof (prove)\nusing this:\n  M + P = I + I2 + (K + K2)\n  N + Q = I + I2 + (J + J2)\n  set_mset (K + K2) \\<subseteq> r \\<down>m (J + J2)\n  M = I + K\n  N = I + J\n  set_mset K \\<subseteq> r \\<down>m J\n  J \\<noteq> {#}\n  P = I2 + K2\n  Q = I2 + J2\n  set_mset K2 \\<subseteq> r \\<down>m J2\n\ngoal (1 subgoal):\n 1. (M + P, N + Q)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}", "by fast"], ["proof (state)\nthis:\n  (M + P, N + Q) \\<in> mul r\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>labeled conversion\\<close>"], ["", "type_synonym ('a,'b) conv = \"('a \\<times> ((bool \\<times> 'b \\<times> 'a) list))\""], ["", "inductive_set conv :: \"('a,'b) lars \\<Rightarrow> ('a,'b) conv set\" for ars\nwhere \"(a,[]) \\<in> conv ars\"\n    | \"(a,\\<alpha>,b) \\<in> ars \\<Longrightarrow> (b,ss) \\<in> conv ars \\<Longrightarrow> (a,(True,\\<alpha>,b) # ss) \\<in> conv ars\"\n    | \"(b,\\<alpha>,a) \\<in> ars \\<Longrightarrow> (b,ss) \\<in> conv ars \\<Longrightarrow> (a,(False,\\<alpha>,b) # ss) \\<in> conv ars\""], ["", "definition labels_conv :: \"('a,'b) conv \\<Rightarrow> 'b list\"\n where \"labels_conv c = map (\\<lambda>q. (fst (snd q))) (snd c)\""], ["", "definition measure_conv :: \"'b rel \\<Rightarrow> ('a,'b) conv \\<Rightarrow> 'b multiset\"\n where \"measure_conv r c = lexmax r (labels_conv c)\""], ["", "fun lst_conv :: \"('a,'b) conv \\<Rightarrow> 'a\"\n  where \"lst_conv (s,[]) = s\"\n | \"lst_conv (s,(d,\\<alpha>,t) # ss) = lst_conv (t,ss)\""], ["", "definition local_diagram1 :: \"('a,'b) lars \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> bool\"\n where \"local_diagram1 ars \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 =\n  (local_peak ars (\\<beta>,\\<alpha>) \\<and> {\\<sigma>1,\\<sigma>2,\\<sigma>3} \\<subseteq> seq ars \\<and> lst \\<beta> = fst \\<sigma>1 \\<and> lst \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3)\""], ["", "definition LDD1 :: \"('a,'b) lars \\<Rightarrow> 'b rel \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> bool\"\n where \"LDD1 ars r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 =  (local_diagram1 ars \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and>\n  LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>)) (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3))\""], ["", "definition LDD :: \"('a,'b) lars \\<Rightarrow> 'b rel \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) seq \\<Rightarrow> bool\"\n where \"LDD ars r d = (let (\\<beta>,\\<alpha>,\\<sigma>1,\\<sigma>2,\\<sigma>3,\\<tau>1,\\<tau>2,\\<tau>3) = d in LDD1 ars r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and> LDD1 ars r \\<alpha> \\<beta> \\<tau>1 \\<tau>2 \\<tau>3 \\<and> lst \\<sigma>3 = lst \\<tau>3)\""], ["", "definition local_triangle1 :: \"('a,'b) lars \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) conv \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) conv \\<Rightarrow> bool\"\n where \"local_triangle1 ars \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 =\n  (local_peak ars (\\<beta>,\\<alpha>) \\<and> \\<sigma>2 \\<in> seq ars \\<and> {\\<sigma>1,\\<sigma>3} \\<subseteq> conv ars \\<and> lst \\<beta> = fst \\<sigma>1 \\<and> lst_conv \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3)\""], ["", "definition LT1 :: \"('a,'b) lars \\<Rightarrow> 'b rel \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) conv \\<Rightarrow> ('a,'b) seq \\<Rightarrow> ('a,'b) conv \\<Rightarrow> bool\"\n where \"LT1 ars r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 = (local_triangle1 ars \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and>\n  LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>)) (labels_conv \\<sigma>1) (labels \\<sigma>2) (labels_conv \\<sigma>3))\""], ["", "definition LT :: \"('a,'b) lars \\<Rightarrow> 'b rel \\<Rightarrow> ('a,'b) seq \\<times> ('a,'b) seq \\<times> ('a,'b) conv \\<times> ('a,'b) seq \\<times> ('a,'b) conv \\<times> ('a,'b) conv \\<times> ('a,'b) seq \\<times> ('a,'b) conv \\<Rightarrow> bool\"\n where \"LT ars r t = (let (\\<beta>,\\<alpha>,\\<sigma>1,\\<sigma>2,\\<sigma>3,\\<tau>1,\\<tau>2,\\<tau>3) = t in LT1 ars r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and> LT1 ars r \\<alpha> \\<beta> \\<tau>1 \\<tau>2 \\<tau>3 \\<and> lst_conv \\<sigma>3 = lst_conv \\<tau>3)\""], ["", "lemma conv_tail1: assumes conv: \"(s,(d,\\<alpha>,t)#xs) \\<in> conv ars\"\nshows \"(t,xs) \\<in> conv ars\" and \"d \\<Longrightarrow> (s,\\<alpha>,t) \\<in> ars\" and \"\\<not>d \\<Longrightarrow> (t,\\<alpha>,s) \\<in> ars\" and \"lst_conv (s,(d,\\<alpha>,t)#xs) = lst_conv (t,xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((t, xs) \\<in> conv ars &&&\n     (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars)) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars) &&&\n    lst_conv (s, (d, \\<alpha>, t) # xs) = lst_conv (t, xs)", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. (t, xs) \\<in> conv ars\n 2. d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n 3. \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n 4. lst_conv (s, (d, \\<alpha>, t) # xs) = lst_conv (t, xs)", "show \"(t,xs) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, xs) \\<in> conv ars", "using assms"], ["proof (prove)\nusing this:\n  (s, (d, \\<alpha>, t) # xs) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (t, xs) \\<in> conv ars", "by (cases) auto"], ["proof (state)\nthis:\n  (t, xs) \\<in> conv ars\n\ngoal (3 subgoals):\n 1. d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n 2. \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n 3. lst_conv (s, (d, \\<alpha>, t) # xs) = lst_conv (t, xs)", "show \"d \\<Longrightarrow> (s,\\<alpha>,t) \\<in> ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars", "using assms"], ["proof (prove)\nusing this:\n  (s, (d, \\<alpha>, t) # xs) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars", "by (cases) auto"], ["proof (state)\nthis:\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n\ngoal (2 subgoals):\n 1. \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n 2. lst_conv (s, (d, \\<alpha>, t) # xs) = lst_conv (t, xs)", "show \"\\<not>d \\<Longrightarrow> (t,\\<alpha>,s) \\<in> ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars", "using assms"], ["proof (prove)\nusing this:\n  (s, (d, \\<alpha>, t) # xs) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars", "by (cases) auto"], ["proof (state)\nthis:\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. lst_conv (s, (d, \\<alpha>, t) # xs) = lst_conv (t, xs)", "show \"lst_conv (s,(d,\\<alpha>,t)#xs) = lst_conv (t,xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst_conv (s, (d, \\<alpha>, t) # xs) = lst_conv (t, xs)", "unfolding lst_conv.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. lst_conv (t, xs) = lst_conv (t, xs)", "by auto"], ["proof (state)\nthis:\n  lst_conv (s, (d, \\<alpha>, t) # xs) = lst_conv (t, xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_chop: assumes \"(s,ss1@ss2) \\<in> conv ars\" shows \"(s,ss1) \\<in> conv ars\" \"(lst_conv (s,ss1),ss2) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, ss1) \\<in> conv ars &&& (lst_conv (s, ss1), ss2) \\<in> conv ars", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (s, ss1) \\<in> conv ars\n 2. (lst_conv (s, ss1), ss2) \\<in> conv ars", "show \"(s,ss1) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, ss1) \\<in> conv ars", "using assms"], ["proof (prove)\nusing this:\n  (s, ss1 @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, ss1) \\<in> conv ars", "proof (induct ss1 arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ss2) \\<in> conv ars \\<Longrightarrow> (s, []) \\<in> conv ars\n 2. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "case Nil"], ["proof (state)\nthis:\n  (s, [] @ ss2) \\<in> conv ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ss2) \\<in> conv ars \\<Longrightarrow> (s, []) \\<in> conv ars\n 2. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "thus ?case"], ["proof (prove)\nusing this:\n  (s, [] @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, []) \\<in> conv ars", "using conv.intros"], ["proof (prove)\nusing this:\n  (s, [] @ ss2) \\<in> conv ars\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (s, []) \\<in> conv ars", "by fast"], ["proof (state)\nthis:\n  (s, []) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "case (Cons t' ts)"], ["proof (state)\nthis:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "from this"], ["proof (chain)\npicking this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars", "obtain d \\<alpha> t where dec: \"t' = (d,\\<alpha>,t)\""], ["proof (prove)\nusing this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<alpha> t.\n        t' = (d, \\<alpha>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<alpha> t.\n        t' = (d, \\<alpha>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  t' = (d, \\<alpha>, t)\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "from Cons"], ["proof (chain)\npicking this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars", "have \"(s, t' # ts @ ss2) \\<in> conv ars\""], ["proof (prove)\nusing this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, t' # ts @ ss2) \\<in> conv ars", "by auto"], ["proof (state)\nthis:\n  (s, t' # ts @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "hence \"(t, ts @ ss2) \\<in> conv ars\" and d1: \"d \\<Longrightarrow> (s,\\<alpha>,t) \\<in> ars\" and d2:\"\\<not>d \\<Longrightarrow> (t,\\<alpha>,s) \\<in> ars\""], ["proof (prove)\nusing this:\n  (s, t' # ts @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (t, ts @ ss2) \\<in> conv ars &&&\n    (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars)", "using conv_tail1(1-3)"], ["proof (prove)\nusing this:\n  (s, t' # ts @ ss2) \\<in> conv ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars; ?d\\<rbrakk>\n  \\<Longrightarrow> (?s, ?\\<alpha>, ?t) \\<in> ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars;\n   \\<not> ?d\\<rbrakk>\n  \\<Longrightarrow> (?t, ?\\<alpha>, ?s) \\<in> ?ars\n\ngoal (1 subgoal):\n 1. (t, ts @ ss2) \\<in> conv ars &&&\n    (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars)", "unfolding dec"], ["proof (prove)\nusing this:\n  (s, (d, \\<alpha>, t) # ts @ ss2) \\<in> conv ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars; ?d\\<rbrakk>\n  \\<Longrightarrow> (?s, ?\\<alpha>, ?t) \\<in> ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars;\n   \\<not> ?d\\<rbrakk>\n  \\<Longrightarrow> (?t, ?\\<alpha>, ?s) \\<in> ?ars\n\ngoal (1 subgoal):\n 1. (t, ts @ ss2) \\<in> conv ars &&&\n    (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars)", "by auto"], ["proof (state)\nthis:\n  (t, ts @ ss2) \\<in> conv ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "hence \"(t, ts) \\<in> conv ars\""], ["proof (prove)\nusing this:\n  (t, ts @ ss2) \\<in> conv ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. (t, ts) \\<in> conv ars", "using Cons"], ["proof (prove)\nusing this:\n  (t, ts @ ss2) \\<in> conv ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (t, ts) \\<in> conv ars", "by auto"], ["proof (state)\nthis:\n  (t, ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (s, ss1) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (s, a # ss1) \\<in> conv ars", "thus ?case"], ["proof (prove)\nusing this:\n  (t, ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, t' # ts) \\<in> conv ars", "unfolding dec"], ["proof (prove)\nusing this:\n  (t, ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, (d, \\<alpha>, t) # ts) \\<in> conv ars", "using Cons conv.intros d1 d2"], ["proof (prove)\nusing this:\n  (t, ts) \\<in> conv ars\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow> (?s, ts) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. (s, (d, \\<alpha>, t) # ts) \\<in> conv ars", "by (cases d) auto"], ["proof (state)\nthis:\n  (s, t' # ts) \\<in> conv ars\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s, ss1) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, ss1), ss2) \\<in> conv ars", "show \"(lst_conv (s,ss1),ss2) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lst_conv (s, ss1), ss2) \\<in> conv ars", "using assms"], ["proof (prove)\nusing this:\n  (s, ss1 @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, ss1), ss2) \\<in> conv ars", "proof (induct ss1 arbitrary:s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ss2) \\<in> conv ars \\<Longrightarrow>\n       (lst_conv (s, []), ss2) \\<in> conv ars\n 2. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "case Nil"], ["proof (state)\nthis:\n  (s, [] @ ss2) \\<in> conv ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, [] @ ss2) \\<in> conv ars \\<Longrightarrow>\n       (lst_conv (s, []), ss2) \\<in> conv ars\n 2. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "thus ?case"], ["proof (prove)\nusing this:\n  (s, [] @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, []), ss2) \\<in> conv ars", "using conv.intros"], ["proof (prove)\nusing this:\n  (s, [] @ ss2) \\<in> conv ars\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, []), ss2) \\<in> conv ars", "unfolding last.simps"], ["proof (prove)\nusing this:\n  (s, [] @ ss2) \\<in> conv ars\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, []), ss2) \\<in> conv ars", "by auto"], ["proof (state)\nthis:\n  (lst_conv (s, []), ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "case (Cons t' ts)"], ["proof (state)\nthis:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "from this"], ["proof (chain)\npicking this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars", "obtain d \\<alpha> t where dec: \"t' = (d,\\<alpha>,t)\""], ["proof (prove)\nusing this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<alpha> t.\n        t' = (d, \\<alpha>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<alpha> t.\n        t' = (d, \\<alpha>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  t' = (d, \\<alpha>, t)\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "from Cons"], ["proof (chain)\npicking this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars", "have \"(s, t' # ts @ ss2) \\<in> conv ars\""], ["proof (prove)\nusing this:\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n  (s, (t' # ts) @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, t' # ts @ ss2) \\<in> conv ars", "by auto"], ["proof (state)\nthis:\n  (s, t' # ts @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "hence \"(snd (snd t'), ts @ ss2) \\<in> conv ars\""], ["proof (prove)\nusing this:\n  (s, t' # ts @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (snd (snd t'), ts @ ss2) \\<in> conv ars", "using conv_tail1(1)"], ["proof (prove)\nusing this:\n  (s, t' # ts @ ss2) \\<in> conv ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (snd (snd t'), ts @ ss2) \\<in> conv ars", "unfolding dec"], ["proof (prove)\nusing this:\n  (s, (d, \\<alpha>, t) # ts @ ss2) \\<in> conv ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (snd (snd (d, \\<alpha>, t)), ts @ ss2) \\<in> conv ars", "by auto"], ["proof (state)\nthis:\n  (snd (snd t'), ts @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>a ss1 s.\n       \\<lbrakk>\\<And>s.\n                   (s, ss1 @ ss2) \\<in> conv ars \\<Longrightarrow>\n                   (lst_conv (s, ss1), ss2) \\<in> conv ars;\n        (s, (a # ss1) @ ss2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> (lst_conv (s, a # ss1), ss2) \\<in> conv ars", "thus ?case"], ["proof (prove)\nusing this:\n  (snd (snd t'), ts @ ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, t' # ts), ss2) \\<in> conv ars", "using Cons(1)"], ["proof (prove)\nusing this:\n  (snd (snd t'), ts @ ss2) \\<in> conv ars\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, t' # ts), ss2) \\<in> conv ars", "unfolding dec last.simps"], ["proof (prove)\nusing this:\n  (snd (snd (d, \\<alpha>, t)), ts @ ss2) \\<in> conv ars\n  (?s, ts @ ss2) \\<in> conv ars \\<Longrightarrow>\n  (lst_conv (?s, ts), ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (lst_conv (s, (d, \\<alpha>, t) # ts), ss2) \\<in> conv ars", "by auto"], ["proof (state)\nthis:\n  (lst_conv (s, t' # ts), ss2) \\<in> conv ars\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (lst_conv (s, ss1), ss2) \\<in> conv ars\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_concat_helper:\nassumes \"(s,ls) \\<in> conv ars\" and \"ss2 \\<in> conv ars\" and \"lst_conv (s,ls) = fst ss2\"\nshows \"(s,ls@snd ss2) \\<in> conv ars \\<and> (lst_conv (s,ls@snd ss2) = lst_conv ss2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, ls @ snd ss2) \\<in> conv ars \\<and>\n    lst_conv (s, ls @ snd ss2) = lst_conv ss2", "using assms"], ["proof (prove)\nusing this:\n  (s, ls) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, ls) = fst ss2\n\ngoal (1 subgoal):\n 1. (s, ls @ snd ss2) \\<in> conv ars \\<and>\n    lst_conv (s, ls @ snd ss2) = lst_conv ss2", "proof (induct ls arbitrary: s ss2 rule:list.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s ss2.\n       \\<lbrakk>(s, []) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, []) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, [] @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, [] @ snd ss2) = lst_conv ss2\n 2. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "case Nil"], ["proof (state)\nthis:\n  (s, []) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, []) = fst ss2\n\ngoal (2 subgoals):\n 1. \\<And>s ss2.\n       \\<lbrakk>(s, []) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, []) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, [] @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, [] @ snd ss2) = lst_conv ss2\n 2. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "thus ?case"], ["proof (prove)\nusing this:\n  (s, []) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, []) = fst ss2\n\ngoal (1 subgoal):\n 1. (s, [] @ snd ss2) \\<in> conv ars \\<and>\n    lst_conv (s, [] @ snd ss2) = lst_conv ss2", "unfolding lst_def"], ["proof (prove)\nusing this:\n  (s, []) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, []) = fst ss2\n\ngoal (1 subgoal):\n 1. (s, [] @ snd ss2) \\<in> conv ars \\<and>\n    lst_conv (s, [] @ snd ss2) = lst_conv ss2", "by auto"], ["proof (state)\nthis:\n  (s, [] @ snd ss2) \\<in> conv ars \\<and>\n  lst_conv (s, [] @ snd ss2) = lst_conv ss2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>(?s, xs) \\<in> conv ars; ?ss2.0 \\<in> conv ars;\n   lst_conv (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> conv ars \\<and>\n                    lst_conv (?s, xs @ snd ?ss2.0) = lst_conv ?ss2.0\n  (s, x # xs) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, x # xs) = fst ss2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?s, xs) \\<in> conv ars; ?ss2.0 \\<in> conv ars;\n   lst_conv (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> conv ars \\<and>\n                    lst_conv (?s, xs @ snd ?ss2.0) = lst_conv ?ss2.0\n  (s, x # xs) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, x # xs) = fst ss2", "obtain d \\<alpha> t where dec: \"x = (d,\\<alpha>,t)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s, xs) \\<in> conv ars; ?ss2.0 \\<in> conv ars;\n   lst_conv (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> conv ars \\<and>\n                    lst_conv (?s, xs @ snd ?ss2.0) = lst_conv ?ss2.0\n  (s, x # xs) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, x # xs) = fst ss2\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<alpha> t.\n        x = (d, \\<alpha>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s, xs) \\<in> conv ars; ?ss2.0 \\<in> conv ars;\n   lst_conv (?s, xs) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, xs @ snd ?ss2.0) \\<in> conv ars \\<and>\n                    lst_conv (?s, xs @ snd ?ss2.0) = lst_conv ?ss2.0\n  (s, x # xs) \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv (s, x # xs) = fst ss2\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<alpha> t.\n        x = (d, \\<alpha>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  x = (d, \\<alpha>, t)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "hence tl: \"(t,xs) \\<in> conv ars\" and d1:\"d \\<Longrightarrow> (s,\\<alpha>,t) \\<in> ars\" and d2: \"\\<not>d \\<Longrightarrow> (t,\\<alpha>,s) \\<in> ars\" and lst:\"lst_conv (t,xs) = fst ss2\""], ["proof (prove)\nusing this:\n  x = (d, \\<alpha>, t)\n\ngoal (1 subgoal):\n 1. ((t, xs) \\<in> conv ars &&&\n     (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars)) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars) &&&\n    lst_conv (t, xs) = fst ss2", "using conv_tail1 Cons(2) Cons(4)"], ["proof (prove)\nusing this:\n  x = (d, \\<alpha>, t)\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars; ?d\\<rbrakk>\n  \\<Longrightarrow> (?s, ?\\<alpha>, ?t) \\<in> ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars;\n   \\<not> ?d\\<rbrakk>\n  \\<Longrightarrow> (?t, ?\\<alpha>, ?s) \\<in> ?ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  lst_conv (?s, (?d, ?\\<alpha>, ?t) # ?xs) = lst_conv (?t, ?xs)\n  (s, x # xs) \\<in> conv ars\n  lst_conv (s, x # xs) = fst ss2\n\ngoal (1 subgoal):\n 1. ((t, xs) \\<in> conv ars &&&\n     (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars)) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars) &&&\n    lst_conv (t, xs) = fst ss2", "by auto"], ["proof (state)\nthis:\n  (t, xs) \\<in> conv ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n  lst_conv (t, xs) = fst ss2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "have \"(t,xs@snd ss2) \\<in> conv ars\" and lst: \"lst_conv (t,xs@snd ss2) = lst_conv ss2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, xs @ snd ss2) \\<in> conv ars &&&\n    lst_conv (t, xs @ snd ss2) = lst_conv ss2", "using Cons(1)[OF tl Cons(3) lst]"], ["proof (prove)\nusing this:\n  (t, xs @ snd ss2) \\<in> conv ars \\<and>\n  lst_conv (t, xs @ snd ss2) = lst_conv ss2\n\ngoal (1 subgoal):\n 1. (t, xs @ snd ss2) \\<in> conv ars &&&\n    lst_conv (t, xs @ snd ss2) = lst_conv ss2", "by auto"], ["proof (state)\nthis:\n  (t, xs @ snd ss2) \\<in> conv ars\n  lst_conv (t, xs @ snd ss2) = lst_conv ss2\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s ss2.\n       \\<lbrakk>\\<And>s ss2.\n                   \\<lbrakk>(s, x2) \\<in> conv ars; ss2 \\<in> conv ars;\n                    lst_conv (s, x2) = fst ss2\\<rbrakk>\n                   \\<Longrightarrow> (s, x2 @ snd ss2) \\<in> conv ars \\<and>\n                                     lst_conv (s, x2 @ snd ss2) =\n                                     lst_conv ss2;\n        (s, x1 # x2) \\<in> conv ars; ss2 \\<in> conv ars;\n        lst_conv (s, x1 # x2) = fst ss2\\<rbrakk>\n       \\<Longrightarrow> (s, (x1 # x2) @ snd ss2) \\<in> conv ars \\<and>\n                         lst_conv (s, (x1 # x2) @ snd ss2) = lst_conv ss2", "thus ?case"], ["proof (prove)\nusing this:\n  (t, xs @ snd ss2) \\<in> conv ars\n  lst_conv (t, xs @ snd ss2) = lst_conv ss2\n\ngoal (1 subgoal):\n 1. (s, (x # xs) @ snd ss2) \\<in> conv ars \\<and>\n    lst_conv (s, (x # xs) @ snd ss2) = lst_conv ss2", "using conv.intros d1 d2"], ["proof (prove)\nusing this:\n  (t, xs @ snd ss2) \\<in> conv ars\n  lst_conv (t, xs @ snd ss2) = lst_conv ss2\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. (s, (x # xs) @ snd ss2) \\<in> conv ars \\<and>\n    lst_conv (s, (x # xs) @ snd ss2) = lst_conv ss2", "unfolding dec lst_conv.simps"], ["proof (prove)\nusing this:\n  (t, xs @ snd ss2) \\<in> conv ars\n  lst_conv (t, xs @ snd ss2) = lst_conv ss2\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. (s, ((d, \\<alpha>, t) # xs) @ snd ss2) \\<in> conv ars \\<and>\n    lst_conv (s, ((d, \\<alpha>, t) # xs) @ snd ss2) = lst_conv ss2", "by (cases d) auto"], ["proof (state)\nthis:\n  (s, (x # xs) @ snd ss2) \\<in> conv ars \\<and>\n  lst_conv (s, (x # xs) @ snd ss2) = lst_conv ss2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_concat:\n assumes \"ss1 \\<in> conv ars\" and \"ss2 \\<in> conv ars\" and \"lst_conv ss1 = fst ss2\"\n shows \"(fst ss1,snd ss1@snd ss2) \\<in> conv ars\" and \"(lst_conv (fst ss1,snd ss1@snd ss2) = lst_conv ss2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> conv ars &&&\n    lst_conv (fst ss1, snd ss1 @ snd ss2) = lst_conv ss2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> conv ars\n 2. lst_conv (fst ss1, snd ss1 @ snd ss2) = lst_conv ss2", "show \"(fst ss1,snd ss1@snd ss2) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> conv ars", "using conv_concat_helper assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s, ?ls) \\<in> conv ?ars; ?ss2.0 \\<in> conv ?ars;\n   lst_conv (?s, ?ls) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, ?ls @ snd ?ss2.0) \\<in> conv ?ars \\<and>\n                    lst_conv (?s, ?ls @ snd ?ss2.0) = lst_conv ?ss2.0\n  ss1 \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv ss1 = fst ss2\n\ngoal (1 subgoal):\n 1. (fst ss1, snd ss1 @ snd ss2) \\<in> conv ars", "by force"], ["proof (state)\nthis:\n  (fst ss1, snd ss1 @ snd ss2) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. lst_conv (fst ss1, snd ss1 @ snd ss2) = lst_conv ss2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lst_conv (fst ss1, snd ss1 @ snd ss2) = lst_conv ss2", "show \"(lst_conv (fst ss1,snd ss1@snd ss2) = lst_conv ss2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst_conv (fst ss1, snd ss1 @ snd ss2) = lst_conv ss2", "using assms surjective_pairing conv_concat_helper"], ["proof (prove)\nusing this:\n  ss1 \\<in> conv ars\n  ss2 \\<in> conv ars\n  lst_conv ss1 = fst ss2\n  ?t = (fst ?t, snd ?t)\n  \\<lbrakk>(?s, ?ls) \\<in> conv ?ars; ?ss2.0 \\<in> conv ?ars;\n   lst_conv (?s, ?ls) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (?s, ?ls @ snd ?ss2.0) \\<in> conv ?ars \\<and>\n                    lst_conv (?s, ?ls @ snd ?ss2.0) = lst_conv ?ss2.0\n\ngoal (1 subgoal):\n 1. lst_conv (fst ss1, snd ss1 @ snd ss2) = lst_conv ss2", "by metis"], ["proof (state)\nthis:\n  lst_conv (fst ss1, snd ss1 @ snd ss2) = lst_conv ss2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_concat_labels:\nassumes \"ss1 \\<in> conv ars\" and \"ss2 \\<in> conv ars\" and \"set (labels_conv ss1) \\<subseteq> S\" and \"set (labels_conv ss2) \\<subseteq> T\"\nshows \"set (labels_conv (fst ss1,snd ss1@snd ss2)) \\<subseteq> S \\<union> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv (fst ss1, snd ss1 @ snd ss2)) \\<subseteq> S \\<union> T", "using assms"], ["proof (prove)\nusing this:\n  ss1 \\<in> conv ars\n  ss2 \\<in> conv ars\n  set (labels_conv ss1) \\<subseteq> S\n  set (labels_conv ss2) \\<subseteq> T\n\ngoal (1 subgoal):\n 1. set (labels_conv (fst ss1, snd ss1 @ snd ss2)) \\<subseteq> S \\<union> T", "unfolding labels_conv_def"], ["proof (prove)\nusing this:\n  ss1 \\<in> conv ars\n  ss2 \\<in> conv ars\n  set (map (\\<lambda>q. fst (snd q)) (snd ss1)) \\<subseteq> S\n  set (map (\\<lambda>q. fst (snd q)) (snd ss2)) \\<subseteq> T\n\ngoal (1 subgoal):\n 1. set (map (\\<lambda>q. fst (snd q)) (snd (fst ss1, snd ss1 @ snd ss2)))\n    \\<subseteq> S \\<union> T", "by auto"], ["", "lemma seq_decompose:\nassumes \"\\<sigma> \\<in> seq ars\" and \"labels \\<sigma> = \\<sigma>1'@\\<sigma>2'\"\nshows \"\\<exists> \\<sigma>1 \\<sigma>2. ({\\<sigma>1,\\<sigma>2} \\<subseteq> seq ars \\<and> \\<sigma> = (fst \\<sigma>1,snd \\<sigma>1@snd \\<sigma>2) \\<and> lst \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = lst \\<sigma> \\<and> labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       \\<sigma> = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst \\<sigma> \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       \\<sigma> = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst \\<sigma> \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "obtain s ss where \\<sigma>_dec: \"\\<sigma> = (s,ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s ss.\n        \\<sigma> = (s, ss) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1) surjective_pairing"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (\\<And>s ss.\n        \\<sigma> = (s, ss) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<sigma> = (s, ss)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       \\<sigma> = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst \\<sigma> \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       \\<sigma> = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst \\<sigma> \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "using assms"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> seq ars\n  labels \\<sigma> = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       \\<sigma> = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst \\<sigma> \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "unfolding \\<sigma>_dec"], ["proof (prove)\nusing this:\n  (s, ss) \\<in> seq ars\n  labels (s, ss) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, ss) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, ss) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "proof (induct ss arbitrary: s \\<sigma>1' \\<sigma>2' rule:list.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>(s, []) \\<in> seq ars;\n        labels (s, []) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, []) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, []) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'\n 2. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "case Nil"], ["proof (state)\nthis:\n  (s, []) \\<in> seq ars\n  labels (s, []) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (2 subgoals):\n 1. \\<And>s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>(s, []) \\<in> seq ars;\n        labels (s, []) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, []) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, []) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'\n 2. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "thus ?case"], ["proof (prove)\nusing this:\n  (s, []) \\<in> seq ars\n  labels (s, []) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, []) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, []) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "unfolding labels_def lst_def"], ["proof (prove)\nusing this:\n  (s, []) \\<in> seq ars\n  map fst (snd (s, [])) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, []) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       (if snd \\<sigma>1 = [] then fst \\<sigma>1\n        else snd (last (snd \\<sigma>1))) =\n       fst \\<sigma>2 \\<and>\n       (if snd \\<sigma>2 = [] then fst \\<sigma>2\n        else snd (last (snd \\<sigma>2))) =\n       (if snd (s, []) = [] then fst (s, [])\n        else snd (last (snd (s, [])))) \\<and>\n       map fst (snd \\<sigma>1) = \\<sigma>1' \\<and>\n       map fst (snd \\<sigma>2) = \\<sigma>2'", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     (s, []) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst (s, []) \\<and>\n     labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>(?s, xs) \\<in> seq ars;\n   labels (?s, xs) = ?\\<sigma>1' @ ?\\<sigma>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n                       (?s, xs) =\n                       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                       lst \\<sigma>2 = lst (?s, xs) \\<and>\n                       labels \\<sigma>1 = ?\\<sigma>1' \\<and>\n                       labels \\<sigma>2 = ?\\<sigma>2'\n  (s, x # xs) \\<in> seq ars\n  labels (s, x # xs) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "have step: \"(s,x) \\<in> ars\" and x:\"(snd x,xs) \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, x) \\<in> ars &&& (snd x, xs) \\<in> seq ars", "using seq_tail1[OF Cons(2)] surjective_pairing"], ["proof (prove)\nusing this:\n  (snd x, xs) \\<in> seq ars\n  (s, fst x, snd x) \\<in> ars\n  lst (s, x # xs) = lst (snd x, xs)\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (s, x) \\<in> ars &&& (snd x, xs) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, x) \\<in> ars\n  (snd x, xs) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "hence steps: \"(s,[x]) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  (s, x) \\<in> ars\n  (snd x, xs) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [x]) \\<in> seq ars", "by (metis Cons(2) append_Cons append_Nil seq_chop(1))"], ["proof (state)\nthis:\n  (s, [x]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "from Cons(3)"], ["proof (chain)\npicking this:\n  labels (s, x # xs) = \\<sigma>1' @ \\<sigma>2'", "have a:\"fst x#labels (snd x,xs) = \\<sigma>1'@\\<sigma>2'\""], ["proof (prove)\nusing this:\n  labels (s, x # xs) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. fst x # labels (snd x, xs) = \\<sigma>1' @ \\<sigma>2'", "unfolding labels_def snd_conv"], ["proof (prove)\nusing this:\n  map fst (x # xs) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. fst x # map fst xs = \\<sigma>1' @ \\<sigma>2'", "by auto"], ["proof (state)\nthis:\n  fst x # labels (snd x, xs) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s \\<sigma>1' \\<sigma>2'.\n       \\<lbrakk>\\<And>s \\<sigma>1' \\<sigma>2'.\n                   \\<lbrakk>(s, x2) \\<in> seq ars;\n                    labels (s, x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n  {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n  (s, x2) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = lst (s, x2) \\<and>\n  labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2';\n        (s, x1 # x2) \\<in> seq ars;\n        labels (s, x1 # x2) = \\<sigma>1' @ \\<sigma>2'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2.\n                            {\\<sigma>1, \\<sigma>2}\n                            \\<subseteq> seq ars \\<and>\n                            (s, x1 # x2) =\n                            (fst \\<sigma>1,\n                             snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n                            lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                            lst \\<sigma>2 = lst (s, x1 # x2) \\<and>\n                            labels \\<sigma>1 = \\<sigma>1' \\<and>\n                            labels \\<sigma>2 = \\<sigma>2'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "proof (cases \"\\<sigma>1'=[]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "case True"], ["proof (state)\nthis:\n  \\<sigma>1' = []\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "from a True"], ["proof (chain)\npicking this:\n  fst x # labels (snd x, xs) = \\<sigma>1' @ \\<sigma>2'\n  \\<sigma>1' = []", "obtain l ls where \\<sigma>2'_dec: \"\\<sigma>2' = l#ls\" and y1:\"fst x = l\" and y2:\"labels (snd x,xs) = []@ls\""], ["proof (prove)\nusing this:\n  fst x # labels (snd x, xs) = \\<sigma>1' @ \\<sigma>2'\n  \\<sigma>1' = []\n\ngoal (1 subgoal):\n 1. (\\<And>l ls.\n        \\<lbrakk>\\<sigma>2' = l # ls; fst x = l;\n         labels (snd x, xs) = [] @ ls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<sigma>2' = l # ls\n  fst x = l\n  labels (snd x, xs) = [] @ ls\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "obtain \\<sigma>1 \\<sigma>2 where ih: \"\\<sigma>1 \\<in> seq ars\" \"\\<sigma>2 \\<in> seq ars\" \"(snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\" \"lst \\<sigma>1 = fst \\<sigma>2\"\n    \"labels \\<sigma>1 = []\" \"labels \\<sigma>2 = ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>2.\n        \\<lbrakk>\\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n         (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2);\n         lst \\<sigma>1 = fst \\<sigma>2; labels \\<sigma>1 = [];\n         labels \\<sigma>2 = ls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons(1)[OF x y2]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst (snd x, xs) \\<and>\n     labels \\<sigma>1 = [] \\<and> labels \\<sigma>2 = ls\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>2.\n        \\<lbrakk>\\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n         (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2);\n         lst \\<sigma>1 = fst \\<sigma>2; labels \\<sigma>1 = [];\n         labels \\<sigma>2 = ls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "hence c:\"fst (snd x,xs) = fst \\<sigma>1\""], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n\ngoal (1 subgoal):\n 1. fst (snd x, xs) = fst \\<sigma>1", "by auto"], ["proof (state)\nthis:\n  fst (snd x, xs) = fst \\<sigma>1\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have 1: \"\\<sigma>1 = (snd x,[])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>1 = (snd x, [])", "using ih"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n\ngoal (1 subgoal):\n 1. \\<sigma>1 = (snd x, [])", "unfolding labels_def"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  map fst (snd \\<sigma>1) = []\n  map fst (snd \\<sigma>2) = ls\n\ngoal (1 subgoal):\n 1. \\<sigma>1 = (snd x, [])", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     lst \\<sigma>1 = fst \\<sigma>2; snd \\<sigma>1 = [];\n     ls = map fst (snd \\<sigma>2); snd x = fst \\<sigma>1;\n     xs = snd \\<sigma>2\\<rbrakk>\n    \\<Longrightarrow> \\<sigma>1 = (fst \\<sigma>1, [])", "by (metis surjective_pairing)"], ["proof (state)\nthis:\n  \\<sigma>1 = (snd x, [])\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "hence 2: \"snd x = fst \\<sigma>1\" \"xs = snd \\<sigma>2\""], ["proof (prove)\nusing this:\n  \\<sigma>1 = (snd x, [])\n\ngoal (1 subgoal):\n 1. snd x = fst \\<sigma>1 &&& xs = snd \\<sigma>2", "using ih"], ["proof (prove)\nusing this:\n  \\<sigma>1 = (snd x, [])\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n\ngoal (1 subgoal):\n 1. snd x = fst \\<sigma>1 &&& xs = snd \\<sigma>2", "by auto"], ["proof (state)\nthis:\n  snd x = fst \\<sigma>1\n  xs = snd \\<sigma>2\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have 3: \"snd x = fst \\<sigma>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd x = fst \\<sigma>2", "using ih 1"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n  \\<sigma>1 = (snd x, [])\n\ngoal (1 subgoal):\n 1. snd x = fst \\<sigma>2", "unfolding lst_def"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  (if snd \\<sigma>1 = [] then fst \\<sigma>1\n   else snd (last (snd \\<sigma>1))) =\n  fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n  \\<sigma>1 = (snd x, [])\n\ngoal (1 subgoal):\n 1. snd x = fst \\<sigma>2", "by auto"], ["proof (state)\nthis:\n  snd x = fst \\<sigma>2\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"\\<sigma>2 = (snd x,xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>2 = (snd x, xs)", "using x 1 2 3 surjective_pairing"], ["proof (prove)\nusing this:\n  (snd x, xs) \\<in> seq ars\n  \\<sigma>1 = (snd x, [])\n  snd x = fst \\<sigma>1\n  xs = snd \\<sigma>2\n  snd x = fst \\<sigma>2\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<sigma>2 = (snd x, xs)", "by metis"], ["proof (state)\nthis:\n  \\<sigma>2 = (snd x, xs)\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "hence l:\"lst (s, [x]) = fst \\<sigma>2\""], ["proof (prove)\nusing this:\n  \\<sigma>2 = (snd x, xs)\n\ngoal (1 subgoal):\n 1. lst (s, [x]) = fst \\<sigma>2", "unfolding lst_def"], ["proof (prove)\nusing this:\n  \\<sigma>2 = (snd x, xs)\n\ngoal (1 subgoal):\n 1. (if snd (s, [x]) = [] then fst (s, [x])\n     else snd (last (snd (s, [x])))) =\n    fst \\<sigma>2", "by auto"], ["proof (state)\nthis:\n  lst (s, [x]) = fst \\<sigma>2\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have m:\"{(s,[]), (s,x# snd \\<sigma>2)} \\<subseteq> seq ars\"  (is \"{?\\<sigma>1,?\\<sigma>2} \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars", "using seq.intros(1) seq_concat(1)[OF steps _ l] ih"], ["proof (prove)\nusing this:\n  (?a, []) \\<in> seq ?ars\n  \\<sigma>2 \\<in> seq ars \\<Longrightarrow>\n  (fst (s, [x]), snd (s, [x]) @ snd \\<sigma>2) \\<in> seq ars\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n\ngoal (1 subgoal):\n 1. {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars", "by auto"], ["proof (state)\nthis:\n  {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"(s, x # xs) = (fst ?\\<sigma>1, snd ?\\<sigma>1 @ snd ?\\<sigma>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, x # xs) = (fst (s, []), snd (s, []) @ snd (s, x # snd \\<sigma>2))", "using m 2"], ["proof (prove)\nusing this:\n  {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars\n  snd x = fst \\<sigma>1\n  xs = snd \\<sigma>2\n\ngoal (1 subgoal):\n 1. (s, x # xs) = (fst (s, []), snd (s, []) @ snd (s, x # snd \\<sigma>2))", "by auto"], ["proof (state)\nthis:\n  (s, x # xs) = (fst (s, []), snd (s, []) @ snd (s, x # snd \\<sigma>2))\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  (s, x # xs) = (fst (s, []), snd (s, []) @ snd (s, x # snd \\<sigma>2))\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"lst ?\\<sigma>1 = fst ?\\<sigma>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (s, []) = fst (s, x # snd \\<sigma>2)", "using m"], ["proof (prove)\nusing this:\n  {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. lst (s, []) = fst (s, x # snd \\<sigma>2)", "unfolding lst_def"], ["proof (prove)\nusing this:\n  {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. (if snd (s, []) = [] then fst (s, []) else snd (last (snd (s, [])))) =\n    fst (s, x # snd \\<sigma>2)", "by auto"], ["proof (state)\nthis:\n  lst (s, []) = fst (s, x # snd \\<sigma>2)\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  lst (s, []) = fst (s, x # snd \\<sigma>2)\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"lst ?\\<sigma>2 = lst (s,x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (s, x # snd \\<sigma>2) = lst (s, x # xs)", "unfolding lst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if snd (s, x # snd \\<sigma>2) = [] then fst (s, x # snd \\<sigma>2)\n     else snd (last (snd (s, x # snd \\<sigma>2)))) =\n    (if snd (s, x # xs) = [] then fst (s, x # xs)\n     else snd (last (snd (s, x # xs))))", "using 2 3"], ["proof (prove)\nusing this:\n  snd x = fst \\<sigma>1\n  xs = snd \\<sigma>2\n  snd x = fst \\<sigma>2\n\ngoal (1 subgoal):\n 1. (if snd (s, x # snd \\<sigma>2) = [] then fst (s, x # snd \\<sigma>2)\n     else snd (last (snd (s, x # snd \\<sigma>2)))) =\n    (if snd (s, x # xs) = [] then fst (s, x # xs)\n     else snd (last (snd (s, x # xs))))", "by auto"], ["proof (state)\nthis:\n  lst (s, x # snd \\<sigma>2) = lst (s, x # xs)\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  lst (s, x # snd \\<sigma>2) = lst (s, x # xs)\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"labels (s,[]) = \\<sigma>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, []) = \\<sigma>1'", "unfolding labels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (snd (s, [])) = \\<sigma>1'", "using True"], ["proof (prove)\nusing this:\n  \\<sigma>1' = []\n\ngoal (1 subgoal):\n 1. map fst (snd (s, [])) = \\<sigma>1'", "by auto"], ["proof (state)\nthis:\n  labels (s, []) = \\<sigma>1'\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  labels (s, []) = \\<sigma>1'\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"labels ?\\<sigma>2 = \\<sigma>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, x # snd \\<sigma>2) = \\<sigma>2'", "using ih y1"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  labels \\<sigma>1 = []\n  labels \\<sigma>2 = ls\n  fst x = l\n\ngoal (1 subgoal):\n 1. labels (s, x # snd \\<sigma>2) = \\<sigma>2'", "unfolding \\<sigma>2'_dec labels_def"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  map fst (snd \\<sigma>1) = []\n  map fst (snd \\<sigma>2) = ls\n  fst x = l\n\ngoal (1 subgoal):\n 1. map fst (snd (s, x # snd \\<sigma>2)) = l # ls", "by auto"], ["proof (state)\nthis:\n  labels (s, x # snd \\<sigma>2) = \\<sigma>2'\n\ngoal (2 subgoals):\n 1. \\<sigma>1' = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n 2. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "ultimately"], ["proof (chain)\npicking this:\n  {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars\n  (s, x # xs) = (fst (s, []), snd (s, []) @ snd (s, x # snd \\<sigma>2))\n  lst (s, []) = fst (s, x # snd \\<sigma>2)\n  lst (s, x # snd \\<sigma>2) = lst (s, x # xs)\n  labels (s, []) = \\<sigma>1'\n  labels (s, x # snd \\<sigma>2) = \\<sigma>2'", "show ?thesis"], ["proof (prove)\nusing this:\n  {(s, []), (s, x # snd \\<sigma>2)} \\<subseteq> seq ars\n  (s, x # xs) = (fst (s, []), snd (s, []) @ snd (s, x # snd \\<sigma>2))\n  lst (s, []) = fst (s, x # snd \\<sigma>2)\n  lst (s, x # snd \\<sigma>2) = lst (s, x # xs)\n  labels (s, []) = \\<sigma>1'\n  labels (s, x # snd \\<sigma>2) = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "by metis"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst (s, x # xs) \\<and>\n     labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "case False"], ["proof (state)\nthis:\n  \\<sigma>1' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "from False"], ["proof (chain)\npicking this:\n  \\<sigma>1' \\<noteq> []", "obtain l ls where \\<sigma>1'_dec:\"\\<sigma>1' = l#ls\""], ["proof (prove)\nusing this:\n  \\<sigma>1' \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>l ls.\n        \\<sigma>1' = l # ls \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using list.exhaust"], ["proof (prove)\nusing this:\n  \\<sigma>1' \\<noteq> []\n  \\<lbrakk>?y = [] \\<Longrightarrow> ?P;\n   \\<And>x21 x22. ?y = x21 # x22 \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>l ls.\n        \\<sigma>1' = l # ls \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<sigma>1' = l # ls\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "hence y1:\"fst x = l\" and y2:\"labels (snd x,xs) = ls @ \\<sigma>2'\""], ["proof (prove)\nusing this:\n  \\<sigma>1' = l # ls\n\ngoal (1 subgoal):\n 1. fst x = l &&& labels (snd x, xs) = ls @ \\<sigma>2'", "using a"], ["proof (prove)\nusing this:\n  \\<sigma>1' = l # ls\n  fst x # labels (snd x, xs) = \\<sigma>1' @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. fst x = l &&& labels (snd x, xs) = ls @ \\<sigma>2'", "by auto"], ["proof (state)\nthis:\n  fst x = l\n  labels (snd x, xs) = ls @ \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "obtain \\<sigma>1 \\<sigma>2 where ih: \"\\<sigma>1 \\<in> seq ars\" \"\\<sigma>2 \\<in> seq ars\" \"(snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\"\n    \"lst \\<sigma>1 = fst \\<sigma>2\" \"lst \\<sigma>2 = lst (snd x, xs)\" \"labels \\<sigma>1 = ls\" \"labels \\<sigma>2 = \\<sigma>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>2.\n        \\<lbrakk>\\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n         (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2);\n         lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = lst (snd x, xs);\n         labels \\<sigma>1 = ls; labels \\<sigma>2 = \\<sigma>2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  Cons(1)[OF x y2]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst (snd x, xs) \\<and>\n     labels \\<sigma>1 = ls \\<and> labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>2.\n        \\<lbrakk>\\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n         (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2);\n         lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = lst (snd x, xs);\n         labels \\<sigma>1 = ls; labels \\<sigma>2 = \\<sigma>2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "hence \"{(s,x# snd \\<sigma>1),\\<sigma>2} \\<subseteq> seq ars\" (is \"{?\\<sigma>1,_} \\<subseteq> seq ars\")"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. {(s, x # snd \\<sigma>1), \\<sigma>2} \\<subseteq> seq ars", "using seq_concat(1)[OF steps] ih"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n  \\<lbrakk>?ss2.0 \\<in> seq ars; lst (s, [x]) = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (fst (s, [x]), snd (s, [x]) @ snd ?ss2.0) \\<in> seq ars\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. {(s, x # snd \\<sigma>1), \\<sigma>2} \\<subseteq> seq ars", "unfolding lst_def"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  (if snd \\<sigma>1 = [] then fst \\<sigma>1\n   else snd (last (snd \\<sigma>1))) =\n  fst \\<sigma>2\n  (if snd \\<sigma>2 = [] then fst \\<sigma>2\n   else snd (last (snd \\<sigma>2))) =\n  (if snd (snd x, xs) = [] then fst (snd x, xs)\n   else snd (last (snd (snd x, xs))))\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n  \\<lbrakk>?ss2.0 \\<in> seq ars;\n   (if snd (s, [x]) = [] then fst (s, [x]) else snd (last (snd (s, [x])))) =\n   fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> (fst (s, [x]), snd (s, [x]) @ snd ?ss2.0) \\<in> seq ars\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  (if snd \\<sigma>1 = [] then fst \\<sigma>1\n   else snd (last (snd \\<sigma>1))) =\n  fst \\<sigma>2\n  (if snd \\<sigma>2 = [] then fst \\<sigma>2\n   else snd (last (snd \\<sigma>2))) =\n  (if snd (snd x, xs) = [] then fst (snd x, xs)\n   else snd (last (snd (snd x, xs))))\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. {(s, x # snd \\<sigma>1), \\<sigma>2} \\<subseteq> seq ars", "by auto"], ["proof (state)\nthis:\n  {(s, x # snd \\<sigma>1), \\<sigma>2} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  {(s, x # snd \\<sigma>1), \\<sigma>2} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"(s,x#xs) = (fst ?\\<sigma>1,snd ?\\<sigma>1@snd \\<sigma>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, x # xs) =\n    (fst (s, x # snd \\<sigma>1), snd (s, x # snd \\<sigma>1) @ snd \\<sigma>2)", "using ih"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. (s, x # xs) =\n    (fst (s, x # snd \\<sigma>1), snd (s, x # snd \\<sigma>1) @ snd \\<sigma>2)", "by auto"], ["proof (state)\nthis:\n  (s, x # xs) =\n  (fst (s, x # snd \\<sigma>1), snd (s, x # snd \\<sigma>1) @ snd \\<sigma>2)\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  (s, x # xs) =\n  (fst (s, x # snd \\<sigma>1), snd (s, x # snd \\<sigma>1) @ snd \\<sigma>2)\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"lst ?\\<sigma>1 = fst \\<sigma>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (s, x # snd \\<sigma>1) = fst \\<sigma>2", "using ih"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. lst (s, x # snd \\<sigma>1) = fst \\<sigma>2", "unfolding lst_def"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  (if snd \\<sigma>1 = [] then fst \\<sigma>1\n   else snd (last (snd \\<sigma>1))) =\n  fst \\<sigma>2\n  (if snd \\<sigma>2 = [] then fst \\<sigma>2\n   else snd (last (snd \\<sigma>2))) =\n  (if snd (snd x, xs) = [] then fst (snd x, xs)\n   else snd (last (snd (snd x, xs))))\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. (if snd (s, x # snd \\<sigma>1) = [] then fst (s, x # snd \\<sigma>1)\n     else snd (last (snd (s, x # snd \\<sigma>1)))) =\n    fst \\<sigma>2", "by auto"], ["proof (state)\nthis:\n  lst (s, x # snd \\<sigma>1) = fst \\<sigma>2\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  lst (s, x # snd \\<sigma>1) = fst \\<sigma>2\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"lst \\<sigma>2 = lst (s, x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<sigma>2 = lst (s, x # xs)", "using ih"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. lst \\<sigma>2 = lst (s, x # xs)", "unfolding lst_def"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  (if snd \\<sigma>1 = [] then fst \\<sigma>1\n   else snd (last (snd \\<sigma>1))) =\n  fst \\<sigma>2\n  (if snd \\<sigma>2 = [] then fst \\<sigma>2\n   else snd (last (snd \\<sigma>2))) =\n  (if snd (snd x, xs) = [] then fst (snd x, xs)\n   else snd (last (snd (snd x, xs))))\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. (if snd \\<sigma>2 = [] then fst \\<sigma>2\n     else snd (last (snd \\<sigma>2))) =\n    (if snd (s, x # xs) = [] then fst (s, x # xs)\n     else snd (last (snd (s, x # xs))))", "by auto"], ["proof (state)\nthis:\n  lst \\<sigma>2 = lst (s, x # xs)\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  lst \\<sigma>2 = lst (s, x # xs)\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"labels ?\\<sigma>1 = \\<sigma>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, x # snd \\<sigma>1) = \\<sigma>1'", "using ih \\<sigma>1'_dec y1"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n  \\<sigma>1' = l # ls\n  fst x = l\n\ngoal (1 subgoal):\n 1. labels (s, x # snd \\<sigma>1) = \\<sigma>1'", "unfolding labels_def"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  map fst (snd \\<sigma>1) = ls\n  map fst (snd \\<sigma>2) = \\<sigma>2'\n  \\<sigma>1' = l # ls\n  fst x = l\n\ngoal (1 subgoal):\n 1. map fst (snd (s, x # snd \\<sigma>1)) = \\<sigma>1'", "by auto"], ["proof (state)\nthis:\n  labels (s, x # snd \\<sigma>1) = \\<sigma>1'\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "moreover"], ["proof (state)\nthis:\n  labels (s, x # snd \\<sigma>1) = \\<sigma>1'\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "have \"labels \\<sigma>2 = \\<sigma>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels \\<sigma>2 = \\<sigma>2'", "using ih"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  (snd x, xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = lst (snd x, xs)\n  labels \\<sigma>1 = ls\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. labels \\<sigma>2 = \\<sigma>2'", "by auto"], ["proof (state)\nthis:\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<noteq> [] \\<Longrightarrow>\n    \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "ultimately"], ["proof (chain)\npicking this:\n  {(s, x # snd \\<sigma>1), \\<sigma>2} \\<subseteq> seq ars\n  (s, x # xs) =\n  (fst (s, x # snd \\<sigma>1), snd (s, x # snd \\<sigma>1) @ snd \\<sigma>2)\n  lst (s, x # snd \\<sigma>1) = fst \\<sigma>2\n  lst \\<sigma>2 = lst (s, x # xs)\n  labels (s, x # snd \\<sigma>1) = \\<sigma>1'\n  labels \\<sigma>2 = \\<sigma>2'", "show ?thesis"], ["proof (prove)\nusing this:\n  {(s, x # snd \\<sigma>1), \\<sigma>2} \\<subseteq> seq ars\n  (s, x # xs) =\n  (fst (s, x # snd \\<sigma>1), snd (s, x # snd \\<sigma>1) @ snd \\<sigma>2)\n  lst (s, x # snd \\<sigma>1) = fst \\<sigma>2\n  lst \\<sigma>2 = lst (s, x # xs)\n  labels (s, x # snd \\<sigma>1) = \\<sigma>1'\n  labels \\<sigma>2 = \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2.\n       {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n       (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = lst (s, x # xs) \\<and>\n       labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst (s, x # xs) \\<and>\n     labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     (s, x # xs) = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst (s, x # xs) \\<and>\n     labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     \\<sigma> = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst \\<sigma> \\<and>\n     labels \\<sigma>1 = \\<sigma>1' \\<and> labels \\<sigma>2 = \\<sigma>2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma seq_imp_conv:\nassumes \"(s,ss) \\<in> seq ars\"\nshows \"(s,map (\\<lambda>step. (True,step)) ss) \\<in> conv ars \\<and>\n       lst_conv (s,map (\\<lambda>step.(True,step)) ss) = lst (s,ss) \\<and>\n       labels (s,ss) = labels_conv (s,map (\\<lambda>step.(True,step)) ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, map (Pair True) ss) \\<in> conv ars \\<and>\n    lst_conv (s, map (Pair True) ss) = lst (s, ss) \\<and>\n    labels (s, ss) = labels_conv (s, map (Pair True) ss)", "using assms"], ["proof (prove)\nusing this:\n  (s, ss) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, map (Pair True) ss) \\<in> conv ars \\<and>\n    lst_conv (s, map (Pair True) ss) = lst (s, ss) \\<and>\n    labels (s, ss) = labels_conv (s, map (Pair True) ss)", "proof (induct ss arbitrary: s rule:list.induct )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, []) \\<in> seq ars \\<Longrightarrow>\n       (s, map (Pair True) []) \\<in> conv ars \\<and>\n       lst_conv (s, map (Pair True) []) = lst (s, []) \\<and>\n       labels (s, []) = labels_conv (s, map (Pair True) [])\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "case Nil"], ["proof (state)\nthis:\n  (s, []) \\<in> seq ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, []) \\<in> seq ars \\<Longrightarrow>\n       (s, map (Pair True) []) \\<in> conv ars \\<and>\n       lst_conv (s, map (Pair True) []) = lst (s, []) \\<and>\n       labels (s, []) = labels_conv (s, map (Pair True) [])\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, map (Pair True) []) \\<in> conv ars \\<and>\n    lst_conv (s, map (Pair True) []) = lst (s, []) \\<and>\n    labels (s, []) = labels_conv (s, map (Pair True) [])", "unfolding lst_def labels_def labels_conv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, map (Pair True) []) \\<in> conv ars \\<and>\n    lst_conv (s, map (Pair True) []) =\n    (if snd (s, []) = [] then fst (s, [])\n     else snd (last (snd (s, [])))) \\<and>\n    map fst (snd (s, [])) =\n    map (\\<lambda>q. fst (snd q)) (snd (s, map (Pair True) []))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, []) \\<in> conv ars", "using conv.intros"], ["proof (prove)\nusing this:\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (s, []) \\<in> conv ars", "by fast"], ["proof (state)\nthis:\n  (s, map (Pair True) []) \\<in> conv ars \\<and>\n  lst_conv (s, map (Pair True) []) = lst (s, []) \\<and>\n  labels (s, []) = labels_conv (s, map (Pair True) [])\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "case (Cons t' ts)"], ["proof (state)\nthis:\n  (?s, ts) \\<in> seq ars \\<Longrightarrow>\n  (?s, map (Pair True) ts) \\<in> conv ars \\<and>\n  lst_conv (?s, map (Pair True) ts) = lst (?s, ts) \\<and>\n  labels (?s, ts) = labels_conv (?s, map (Pair True) ts)\n  (s, t' # ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "have t'_dec: \"t' = (fst t',snd t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' = (fst t', snd t')", "using surjective_pairing"], ["proof (prove)\nusing this:\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. t' = (fst t', snd t')", "by auto"], ["proof (state)\nthis:\n  t' = (fst t', snd t')\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "have step: \"(s,fst t',snd t') \\<in> ars\" and x:\"(snd t',ts) \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, fst t', snd t') \\<in> ars &&& (snd t', ts) \\<in> seq ars", "using seq_tail1[OF Cons(2)]"], ["proof (prove)\nusing this:\n  (snd t', ts) \\<in> seq ars\n  (s, fst t', snd t') \\<in> ars\n  lst (s, t' # ts) = lst (snd t', ts)\n\ngoal (1 subgoal):\n 1. (s, fst t', snd t') \\<in> ars &&& (snd t', ts) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, fst t', snd t') \\<in> ars\n  (snd t', ts) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "have y1:\"(snd t', map (Pair True) ts) \\<in> conv ars\" and\n       y2: \"lst (snd t', ts) = lst_conv (snd t', map (Pair True) ts)\" and\n       y3: \"labels (snd t', ts) = labels_conv (snd t', map (Pair True) ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd t', map (Pair True) ts) \\<in> conv ars &&&\n    lst (snd t', ts) = lst_conv (snd t', map (Pair True) ts) &&&\n    labels (snd t', ts) = labels_conv (snd t', map (Pair True) ts)", "using Cons(1)[OF x]"], ["proof (prove)\nusing this:\n  (snd t', map (Pair True) ts) \\<in> conv ars \\<and>\n  lst_conv (snd t', map (Pair True) ts) = lst (snd t', ts) \\<and>\n  labels (snd t', ts) = labels_conv (snd t', map (Pair True) ts)\n\ngoal (1 subgoal):\n 1. (snd t', map (Pair True) ts) \\<in> conv ars &&&\n    lst (snd t', ts) = lst_conv (snd t', map (Pair True) ts) &&&\n    labels (snd t', ts) = labels_conv (snd t', map (Pair True) ts)", "by auto"], ["proof (state)\nthis:\n  (snd t', map (Pair True) ts) \\<in> conv ars\n  lst (snd t', ts) = lst_conv (snd t', map (Pair True) ts)\n  labels (snd t', ts) = labels_conv (snd t', map (Pair True) ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "have k: \"(s,(True,fst t',snd t')#map (Pair True) ts) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, (True, fst t', snd t') # map (Pair True) ts) \\<in> conv ars", "using step y1 conv.intros"], ["proof (prove)\nusing this:\n  (s, fst t', snd t') \\<in> ars\n  (snd t', map (Pair True) ts) \\<in> conv ars\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (s, (True, fst t', snd t') # map (Pair True) ts) \\<in> conv ars", "by fast"], ["proof (state)\nthis:\n  (s, (True, fst t', snd t') # map (Pair True) ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "moreover"], ["proof (state)\nthis:\n  (s, (True, fst t', snd t') # map (Pair True) ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "have \"lst (s,(fst t',snd t')#ts) = lst_conv (s, map (Pair True) ((fst t',snd t')#ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (s, (fst t', snd t') # ts) =\n    lst_conv (s, map (Pair True) ((fst t', snd t') # ts))", "using y2"], ["proof (prove)\nusing this:\n  lst (snd t', ts) = lst_conv (snd t', map (Pair True) ts)\n\ngoal (1 subgoal):\n 1. lst (s, (fst t', snd t') # ts) =\n    lst_conv (s, map (Pair True) ((fst t', snd t') # ts))", "unfolding list.map lst_def lst_conv.simps"], ["proof (prove)\nusing this:\n  (if snd (snd t', ts) = [] then fst (snd t', ts)\n   else snd (last (snd (snd t', ts)))) =\n  lst_conv (snd t', map (Pair True) ts)\n\ngoal (1 subgoal):\n 1. (if snd (s, (fst t', snd t') # ts) = []\n     then fst (s, (fst t', snd t') # ts)\n     else snd (last (snd (s, (fst t', snd t') # ts)))) =\n    lst_conv (snd t', map (Pair True) ts)", "by auto"], ["proof (state)\nthis:\n  lst (s, (fst t', snd t') # ts) =\n  lst_conv (s, map (Pair True) ((fst t', snd t') # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "moreover"], ["proof (state)\nthis:\n  lst (s, (fst t', snd t') # ts) =\n  lst_conv (s, map (Pair True) ((fst t', snd t') # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "have \"labels (s,(fst t',snd t')#ts) = labels_conv (s,map (Pair True) ((fst t',snd t')#ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, (fst t', snd t') # ts) =\n    labels_conv (s, map (Pair True) ((fst t', snd t') # ts))", "using y3"], ["proof (prove)\nusing this:\n  labels (snd t', ts) = labels_conv (snd t', map (Pair True) ts)\n\ngoal (1 subgoal):\n 1. labels (s, (fst t', snd t') # ts) =\n    labels_conv (s, map (Pair True) ((fst t', snd t') # ts))", "unfolding list.map labels_def labels_conv_def"], ["proof (prove)\nusing this:\n  map fst (snd (snd t', ts)) =\n  map (\\<lambda>q. fst (snd q)) (snd (snd t', map (Pair True) ts))\n\ngoal (1 subgoal):\n 1. map fst (snd (s, (fst t', snd t') # ts)) =\n    map (\\<lambda>q. fst (snd q))\n     (snd (s, (True, fst t', snd t') # map (Pair True) ts))", "by auto"], ["proof (state)\nthis:\n  labels (s, (fst t', snd t') # ts) =\n  labels_conv (s, map (Pair True) ((fst t', snd t') # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> seq ars \\<Longrightarrow>\n                   (s, map (Pair True) x2) \\<in> conv ars \\<and>\n                   lst_conv (s, map (Pair True) x2) = lst (s, x2) \\<and>\n                   labels (s, x2) = labels_conv (s, map (Pair True) x2);\n        (s, x1 # x2) \\<in> seq ars\\<rbrakk>\n       \\<Longrightarrow> (s, map (Pair True) (x1 # x2))\n                         \\<in> conv ars \\<and>\n                         lst_conv (s, map (Pair True) (x1 # x2)) =\n                         lst (s, x1 # x2) \\<and>\n                         labels (s, x1 # x2) =\n                         labels_conv (s, map (Pair True) (x1 # x2))", "ultimately"], ["proof (chain)\npicking this:\n  (s, (True, fst t', snd t') # map (Pair True) ts) \\<in> conv ars\n  lst (s, (fst t', snd t') # ts) =\n  lst_conv (s, map (Pair True) ((fst t', snd t') # ts))\n  labels (s, (fst t', snd t') # ts) =\n  labels_conv (s, map (Pair True) ((fst t', snd t') # ts))", "show ?case"], ["proof (prove)\nusing this:\n  (s, (True, fst t', snd t') # map (Pair True) ts) \\<in> conv ars\n  lst (s, (fst t', snd t') # ts) =\n  lst_conv (s, map (Pair True) ((fst t', snd t') # ts))\n  labels (s, (fst t', snd t') # ts) =\n  labels_conv (s, map (Pair True) ((fst t', snd t') # ts))\n\ngoal (1 subgoal):\n 1. (s, map (Pair True) (t' # ts)) \\<in> conv ars \\<and>\n    lst_conv (s, map (Pair True) (t' # ts)) = lst (s, t' # ts) \\<and>\n    labels (s, t' # ts) = labels_conv (s, map (Pair True) (t' # ts))", "by auto"], ["proof (state)\nthis:\n  (s, map (Pair True) (t' # ts)) \\<in> conv ars \\<and>\n  lst_conv (s, map (Pair True) (t' # ts)) = lst (s, t' # ts) \\<and>\n  labels (s, t' # ts) = labels_conv (s, map (Pair True) (t' # ts))\n\ngoal:\nNo subgoals!", "qed"], ["", "fun conv_mirror :: \"('a,'b) conv \\<Rightarrow> ('a,'b) conv\"\n where \"conv_mirror \\<sigma> = (let (s,ss) = \\<sigma> in case ss of\n             [] \\<Rightarrow> (s,ss)\n         | x#xs \\<Rightarrow> let (d,\\<alpha>,t) = x in\n                   (fst (conv_mirror (t,xs)),snd (conv_mirror (t,xs))@[(\\<not>d,\\<alpha>,s)]))\""], ["", "lemma conv_mirror: assumes \"\\<sigma> \\<in> conv ars\"\nshows \"conv_mirror \\<sigma> \\<in> conv ars \\<and>\n      set (labels_conv (conv_mirror \\<sigma>)) = set (labels_conv \\<sigma>) \\<and>\n      fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n      lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_mirror \\<sigma> \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror \\<sigma>)) =\n    set (labels_conv \\<sigma>) \\<and>\n    fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n    lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. conv_mirror \\<sigma> \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror \\<sigma>)) =\n    set (labels_conv \\<sigma>) \\<and>\n    fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n    lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)", "from assms"], ["proof (chain)\npicking this:\n  \\<sigma> \\<in> conv ars", "obtain s ss where \\<sigma>_dec: \"\\<sigma> = (s,ss)\""], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (\\<And>s ss.\n        \\<sigma> = (s, ss) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using surjective_pairing"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> conv ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (\\<And>s ss.\n        \\<sigma> = (s, ss) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<sigma> = (s, ss)\n\ngoal (1 subgoal):\n 1. conv_mirror \\<sigma> \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror \\<sigma>)) =\n    set (labels_conv \\<sigma>) \\<and>\n    fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n    lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_mirror \\<sigma> \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror \\<sigma>)) =\n    set (labels_conv \\<sigma>) \\<and>\n    fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n    lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)", "using assms"], ["proof (prove)\nusing this:\n  \\<sigma> \\<in> conv ars\n\ngoal (1 subgoal):\n 1. conv_mirror \\<sigma> \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror \\<sigma>)) =\n    set (labels_conv \\<sigma>) \\<and>\n    fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n    lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)", "unfolding \\<sigma>_dec"], ["proof (prove)\nusing this:\n  (s, ss) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. conv_mirror (s, ss) \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror (s, ss))) =\n    set (labels_conv (s, ss)) \\<and>\n    fst (s, ss) = lst_conv (conv_mirror (s, ss)) \\<and>\n    lst_conv (s, ss) = fst (conv_mirror (s, ss))", "proof (induct ss arbitrary:s rule:list.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, []) \\<in> conv ars \\<Longrightarrow>\n       conv_mirror (s, []) \\<in> conv ars \\<and>\n       set (labels_conv (conv_mirror (s, []))) =\n       set (labels_conv (s, [])) \\<and>\n       fst (s, []) = lst_conv (conv_mirror (s, [])) \\<and>\n       lst_conv (s, []) = fst (conv_mirror (s, []))\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "case Nil"], ["proof (state)\nthis:\n  (s, []) \\<in> conv ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (s, []) \\<in> conv ars \\<Longrightarrow>\n       conv_mirror (s, []) \\<in> conv ars \\<and>\n       set (labels_conv (conv_mirror (s, []))) =\n       set (labels_conv (s, [])) \\<and>\n       fst (s, []) = lst_conv (conv_mirror (s, [])) \\<and>\n       lst_conv (s, []) = fst (conv_mirror (s, []))\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "thus ?case"], ["proof (prove)\nusing this:\n  (s, []) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. conv_mirror (s, []) \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror (s, []))) =\n    set (labels_conv (s, [])) \\<and>\n    fst (s, []) = lst_conv (conv_mirror (s, [])) \\<and>\n    lst_conv (s, []) = fst (conv_mirror (s, []))", "using conv.intros  conv_mirror.simps"], ["proof (prove)\nusing this:\n  (s, []) \\<in> conv ars\n  (?a, []) \\<in> conv ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (True, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  \\<lbrakk>(?b, ?\\<alpha>, ?a) \\<in> ?ars;\n   (?b, ?ss) \\<in> conv ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (False, ?\\<alpha>, ?b) # ?ss) \\<in> conv ?ars\n  conv_mirror ?\\<sigma> =\n  (let (s, ss) = ?\\<sigma>\n   in case ss of [] \\<Rightarrow> (s, ss)\n      | x # xs \\<Rightarrow>\n          let (d, \\<alpha>, t) = x\n          in (fst (conv_mirror (t, xs)),\n              snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)]))\n\ngoal (1 subgoal):\n 1. conv_mirror (s, []) \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror (s, []))) =\n    set (labels_conv (s, [])) \\<and>\n    fst (s, []) = lst_conv (conv_mirror (s, [])) \\<and>\n    lst_conv (s, []) = fst (conv_mirror (s, []))", "by auto"], ["proof (state)\nthis:\n  conv_mirror (s, []) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (s, []))) = set (labels_conv (s, [])) \\<and>\n  fst (s, []) = lst_conv (conv_mirror (s, [])) \\<and>\n  lst_conv (s, []) = fst (conv_mirror (s, []))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "case (Cons t' ts)"], ["proof (state)\nthis:\n  (?s, ts) \\<in> conv ars \\<Longrightarrow>\n  conv_mirror (?s, ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (?s, ts))) =\n  set (labels_conv (?s, ts)) \\<and>\n  fst (?s, ts) = lst_conv (conv_mirror (?s, ts)) \\<and>\n  lst_conv (?s, ts) = fst (conv_mirror (?s, ts))\n  (s, t' # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "from this"], ["proof (chain)\npicking this:\n  (?s, ts) \\<in> conv ars \\<Longrightarrow>\n  conv_mirror (?s, ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (?s, ts))) =\n  set (labels_conv (?s, ts)) \\<and>\n  fst (?s, ts) = lst_conv (conv_mirror (?s, ts)) \\<and>\n  lst_conv (?s, ts) = fst (conv_mirror (?s, ts))\n  (s, t' # ts) \\<in> conv ars", "obtain d \\<alpha> t where t'_dec: \"t' = (d,\\<alpha>,t)\""], ["proof (prove)\nusing this:\n  (?s, ts) \\<in> conv ars \\<Longrightarrow>\n  conv_mirror (?s, ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (?s, ts))) =\n  set (labels_conv (?s, ts)) \\<and>\n  fst (?s, ts) = lst_conv (conv_mirror (?s, ts)) \\<and>\n  lst_conv (?s, ts) = fst (conv_mirror (?s, ts))\n  (s, t' # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<alpha> t.\n        t' = (d, \\<alpha>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod_cases3)"], ["proof (state)\nthis:\n  t' = (d, \\<alpha>, t)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "have 1:\"(t, ts) \\<in> conv ars\" and 2: \"d \\<Longrightarrow> (s,\\<alpha>,t) \\<in> ars\" and 3: \"\\<not>d \\<Longrightarrow> (t,\\<alpha>,s) \\<in> ars\"  and 4:\"lst_conv (s,t'#ts) = lst_conv (t,ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((t, ts) \\<in> conv ars &&&\n     (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars)) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars) &&&\n    lst_conv (s, t' # ts) = lst_conv (t, ts)", "using Cons(2) conv_tail1"], ["proof (prove)\nusing this:\n  (s, t' # ts) \\<in> conv ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars; ?d\\<rbrakk>\n  \\<Longrightarrow> (?s, ?\\<alpha>, ?t) \\<in> ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars;\n   \\<not> ?d\\<rbrakk>\n  \\<Longrightarrow> (?t, ?\\<alpha>, ?s) \\<in> ?ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  lst_conv (?s, (?d, ?\\<alpha>, ?t) # ?xs) = lst_conv (?t, ?xs)\n\ngoal (1 subgoal):\n 1. ((t, ts) \\<in> conv ars &&&\n     (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars)) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars) &&&\n    lst_conv (s, t' # ts) = lst_conv (t, ts)", "unfolding t'_dec"], ["proof (prove)\nusing this:\n  (s, (d, \\<alpha>, t) # ts) \\<in> conv ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars; ?d\\<rbrakk>\n  \\<Longrightarrow> (?s, ?\\<alpha>, ?t) \\<in> ?ars\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars;\n   \\<not> ?d\\<rbrakk>\n  \\<Longrightarrow> (?t, ?\\<alpha>, ?s) \\<in> ?ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  lst_conv (?s, (?d, ?\\<alpha>, ?t) # ?xs) = lst_conv (?t, ?xs)\n\ngoal (1 subgoal):\n 1. ((t, ts) \\<in> conv ars &&&\n     (d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars)) &&&\n    (\\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars) &&&\n    lst_conv (s, (d, \\<alpha>, t) # ts) = lst_conv (t, ts)", "by auto"], ["proof (state)\nthis:\n  (t, ts) \\<in> conv ars\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n  lst_conv (s, t' # ts) = lst_conv (t, ts)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "have r: \"(t,[(\\<not>d,\\<alpha>,s)]) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, [(\\<not> d, \\<alpha>, s)]) \\<in> conv ars", "using 2 3 conv.intros(3)[OF _ conv.intros(1)] conv.intros(2)[OF _ conv.intros(1)]"], ["proof (prove)\nusing this:\n  d \\<Longrightarrow> (s, \\<alpha>, t) \\<in> ars\n  \\<not> d \\<Longrightarrow> (t, \\<alpha>, s) \\<in> ars\n  (?b, ?\\<alpha>, ?a) \\<in> ?ars \\<Longrightarrow>\n  (?a, [(False, ?\\<alpha>, ?b)]) \\<in> conv ?ars\n  (?a, ?\\<alpha>, ?b) \\<in> ?ars \\<Longrightarrow>\n  (?a, [(True, ?\\<alpha>, ?b)]) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (t, [(\\<not> d, \\<alpha>, s)]) \\<in> conv ars", "by (cases d) auto"], ["proof (state)\nthis:\n  (t, [(\\<not> d, \\<alpha>, s)]) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "have \"conv_mirror (s,t'#ts) \\<in> conv ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_mirror (s, t' # ts) \\<in> conv ars", "using conv_concat[OF _ r ] Cons(1)[OF 1] t'_dec"], ["proof (prove)\nusing this:\n  \\<lbrakk>?ss1.0 \\<in> conv ars;\n   lst_conv ?ss1.0 = fst (t, [(\\<not> d, \\<alpha>, s)])\\<rbrakk>\n  \\<Longrightarrow> (fst ?ss1.0,\n                     snd ?ss1.0 @ snd (t, [(\\<not> d, \\<alpha>, s)]))\n                    \\<in> conv ars\n  \\<lbrakk>?ss1.0 \\<in> conv ars;\n   lst_conv ?ss1.0 = fst (t, [(\\<not> d, \\<alpha>, s)])\\<rbrakk>\n  \\<Longrightarrow> lst_conv\n                     (fst ?ss1.0,\n                      snd ?ss1.0 @ snd (t, [(\\<not> d, \\<alpha>, s)])) =\n                    lst_conv (t, [(\\<not> d, \\<alpha>, s)])\n  conv_mirror (t, ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (t, ts))) = set (labels_conv (t, ts)) \\<and>\n  fst (t, ts) = lst_conv (conv_mirror (t, ts)) \\<and>\n  lst_conv (t, ts) = fst (conv_mirror (t, ts))\n  t' = (d, \\<alpha>, t)\n\ngoal (1 subgoal):\n 1. conv_mirror (s, t' # ts) \\<in> conv ars", "by auto"], ["proof (state)\nthis:\n  conv_mirror (s, t' # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "moreover"], ["proof (state)\nthis:\n  conv_mirror (s, t' # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "have \"set (labels_conv (conv_mirror (s, t' # ts))) = set (labels_conv (s, t' # ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv (conv_mirror (s, t' # ts))) =\n    set (labels_conv (s, t' # ts))", "using Cons(1)[OF 1]"], ["proof (prove)\nusing this:\n  conv_mirror (t, ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (t, ts))) = set (labels_conv (t, ts)) \\<and>\n  fst (t, ts) = lst_conv (conv_mirror (t, ts)) \\<and>\n  lst_conv (t, ts) = fst (conv_mirror (t, ts))\n\ngoal (1 subgoal):\n 1. set (labels_conv (conv_mirror (s, t' # ts))) =\n    set (labels_conv (s, t' # ts))", "unfolding labels_conv_def t'_dec"], ["proof (prove)\nusing this:\n  conv_mirror (t, ts) \\<in> conv ars \\<and>\n  set (map (\\<lambda>q. fst (snd q)) (snd (conv_mirror (t, ts)))) =\n  set (map (\\<lambda>q. fst (snd q)) (snd (t, ts))) \\<and>\n  fst (t, ts) = lst_conv (conv_mirror (t, ts)) \\<and>\n  lst_conv (t, ts) = fst (conv_mirror (t, ts))\n\ngoal (1 subgoal):\n 1. set (map (\\<lambda>q. fst (snd q))\n          (snd (conv_mirror (s, (d, \\<alpha>, t) # ts)))) =\n    set (map (\\<lambda>q. fst (snd q)) (snd (s, (d, \\<alpha>, t) # ts)))", "by auto"], ["proof (state)\nthis:\n  set (labels_conv (conv_mirror (s, t' # ts))) =\n  set (labels_conv (s, t' # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "moreover"], ["proof (state)\nthis:\n  set (labels_conv (conv_mirror (s, t' # ts))) =\n  set (labels_conv (s, t' # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "have \"fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts))", "using t'_dec Cons(1)[OF 1] conv_concat(2)[OF _ r]"], ["proof (prove)\nusing this:\n  t' = (d, \\<alpha>, t)\n  conv_mirror (t, ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (t, ts))) = set (labels_conv (t, ts)) \\<and>\n  fst (t, ts) = lst_conv (conv_mirror (t, ts)) \\<and>\n  lst_conv (t, ts) = fst (conv_mirror (t, ts))\n  \\<lbrakk>?ss1.0 \\<in> conv ars;\n   lst_conv ?ss1.0 = fst (t, [(\\<not> d, \\<alpha>, s)])\\<rbrakk>\n  \\<Longrightarrow> lst_conv\n                     (fst ?ss1.0,\n                      snd ?ss1.0 @ snd (t, [(\\<not> d, \\<alpha>, s)])) =\n                    lst_conv (t, [(\\<not> d, \\<alpha>, s)])\n\ngoal (1 subgoal):\n 1. fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts))", "by auto"], ["proof (state)\nthis:\n  fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "moreover"], ["proof (state)\nthis:\n  fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "have \"lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))", "using t'_dec 4 Cons(1)[OF 1]"], ["proof (prove)\nusing this:\n  t' = (d, \\<alpha>, t)\n  lst_conv (s, t' # ts) = lst_conv (t, ts)\n  conv_mirror (t, ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (t, ts))) = set (labels_conv (t, ts)) \\<and>\n  fst (t, ts) = lst_conv (conv_mirror (t, ts)) \\<and>\n  lst_conv (t, ts) = fst (conv_mirror (t, ts))\n\ngoal (1 subgoal):\n 1. lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))", "by auto"], ["proof (state)\nthis:\n  lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   (s, x2) \\<in> conv ars \\<Longrightarrow>\n                   conv_mirror (s, x2) \\<in> conv ars \\<and>\n                   set (labels_conv (conv_mirror (s, x2))) =\n                   set (labels_conv (s, x2)) \\<and>\n                   fst (s, x2) = lst_conv (conv_mirror (s, x2)) \\<and>\n                   lst_conv (s, x2) = fst (conv_mirror (s, x2));\n        (s, x1 # x2) \\<in> conv ars\\<rbrakk>\n       \\<Longrightarrow> conv_mirror (s, x1 # x2) \\<in> conv ars \\<and>\n                         set (labels_conv (conv_mirror (s, x1 # x2))) =\n                         set (labels_conv (s, x1 # x2)) \\<and>\n                         fst (s, x1 # x2) =\n                         lst_conv (conv_mirror (s, x1 # x2)) \\<and>\n                         lst_conv (s, x1 # x2) =\n                         fst (conv_mirror (s, x1 # x2))", "ultimately"], ["proof (chain)\npicking this:\n  conv_mirror (s, t' # ts) \\<in> conv ars\n  set (labels_conv (conv_mirror (s, t' # ts))) =\n  set (labels_conv (s, t' # ts))\n  fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts))\n  lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))", "show ?case"], ["proof (prove)\nusing this:\n  conv_mirror (s, t' # ts) \\<in> conv ars\n  set (labels_conv (conv_mirror (s, t' # ts))) =\n  set (labels_conv (s, t' # ts))\n  fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts))\n  lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))\n\ngoal (1 subgoal):\n 1. conv_mirror (s, t' # ts) \\<in> conv ars \\<and>\n    set (labels_conv (conv_mirror (s, t' # ts))) =\n    set (labels_conv (s, t' # ts)) \\<and>\n    fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts)) \\<and>\n    lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))", "by auto"], ["proof (state)\nthis:\n  conv_mirror (s, t' # ts) \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror (s, t' # ts))) =\n  set (labels_conv (s, t' # ts)) \\<and>\n  fst (s, t' # ts) = lst_conv (conv_mirror (s, t' # ts)) \\<and>\n  lst_conv (s, t' # ts) = fst (conv_mirror (s, t' # ts))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  conv_mirror \\<sigma> \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror \\<sigma>)) =\n  set (labels_conv \\<sigma>) \\<and>\n  fst \\<sigma> = lst_conv (conv_mirror \\<sigma>) \\<and>\n  lst_conv \\<sigma> = fst (conv_mirror \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DD_subset_helper:\nassumes t:\"trans r\" and \"(r|\\<tau>@\\<sigma>'|, r|\\<tau>| + r|\\<sigma>| ) \\<in> mul_eq r\" and \"set_mset (r|\\<tau>| + r|\\<sigma>| ) \\<subseteq> ds r S\"\nshows \"set_mset r|\\<sigma>'| \\<subseteq> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S", "have d: \"(r|\\<tau>| + r|\\<sigma>'| -s dl r (\\<tau>) , r|\\<tau>| + r|\\<sigma>| ) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  trans r\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "unfolding lemma3_2_2"], ["proof (prove)\nusing this:\n  trans r\n  (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>, r|\\<tau>| + r|\\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S", "have assm:\"set_mset (r|\\<tau>| + r|\\<sigma>| ) \\<subseteq> ds r S\""], ["proof (prove)\nusing this:\n  trans r\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S", "unfolding measure_def"], ["proof (prove)\nusing this:\n  trans r\n  (r|\\<tau> @ \\<sigma>'|, r|\\<tau>| + r|\\<sigma>|) \\<in> mul_eq r\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "hence tau:\"ds r (set_mset r|\\<tau>| ) \\<subseteq> ds r S\""], ["proof (prove)\nusing this:\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. r \\<down>s set_mset r|\\<tau>| \\<subseteq> r \\<down>s S", "using subset_imp_ds_subset[OF t]"], ["proof (prove)\nusing this:\n  set_mset (r|\\<tau>| + r|\\<sigma>|) \\<subseteq> r \\<down>s S\n  ?S \\<subseteq> r \\<down>s ?T \\<Longrightarrow>\n  r \\<down>s ?S \\<subseteq> r \\<down>s ?T\n\ngoal (1 subgoal):\n 1. r \\<down>s set_mset r|\\<tau>| \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  r \\<down>s set_mset r|\\<tau>| \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "have \"set_mset (r|\\<tau>| + (r|\\<sigma>'| -s dl r \\<tau>)) \\<subseteq> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>s S", "using mul_eq_and_ds_imp_ds[OF t d assm]"], ["proof (prove)\nusing this:\n  set_mset (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n    \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "hence \"set_mset (r|\\<sigma>'| -s ds r (set \\<tau>)) \\<subseteq> ds r S\""], ["proof (prove)\nusing this:\n  set_mset (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>l \\<tau>)\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>)\n    \\<subseteq> r \\<down>s S", "unfolding dl_def"], ["proof (prove)\nusing this:\n  set_mset (r|\\<tau>| + r|\\<sigma>'| -s r \\<down>s set \\<tau>)\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>)\n    \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "hence \"set_mset (r|\\<sigma>'| -s ds r (set \\<tau>)) \\<union> ds r (set \\<tau>) \\<subseteq> ds r S\""], ["proof (prove)\nusing this:\n  set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>) \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>) \\<union>\n    r \\<down>s set \\<tau>\n    \\<subseteq> r \\<down>s S", "using tau"], ["proof (prove)\nusing this:\n  set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>) \\<subseteq> r \\<down>s S\n  r \\<down>s set_mset r|\\<tau>| \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>) \\<union>\n    r \\<down>s set \\<tau>\n    \\<subseteq> r \\<down>s S", "by (metis t dl_def dm_def le_sup_iff lemma3_2_1)"], ["proof (state)\nthis:\n  set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>) \\<union>\n  r \\<down>s set \\<tau>\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "thus ?thesis"], ["proof (prove)\nusing this:\n  set_mset (r|\\<sigma>'| -s r \\<down>s set \\<tau>) \\<union>\n  r \\<down>s set \\<tau>\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "unfolding diff_def"], ["proof (prove)\nusing this:\n  set_mset\n   {#x \\<in># r|\\<sigma>'|. x \\<notin> r \\<down>s set \\<tau>#} \\<union>\n  r \\<down>s set \\<tau>\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset r|\\<sigma>'| \\<subseteq> r \\<down>s S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DD_subset_ds:\nassumes t:\"trans r\" and DD: \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"set_mset (measure r (\\<tau>,\\<sigma>)) \\<subseteq> ds r S\" shows \"set_mset (measure r (\\<sigma>',\\<tau>')) \\<subseteq> ds r S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>'))\n    \\<subseteq> r \\<down>s S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>'))\n    \\<subseteq> r \\<down>s S", "have d1:\"(r|labels \\<tau> @ labels \\<sigma>'|, r|labels \\<tau>| + r|labels \\<sigma>| ) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|labels \\<tau> @ labels \\<sigma>'|,\n     r|labels \\<tau>| + r|labels \\<sigma>|)\n    \\<in> mul_eq r", "using DD"], ["proof (prove)\nusing this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (r|labels \\<tau> @ labels \\<sigma>'|,\n     r|labels \\<tau>| + r|labels \\<sigma>|)\n    \\<in> mul_eq r", "unfolding DD_def D2_def D_def"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in (r|labels \\<sigma> @ labels \\<tau>'|,\n       r|labels \\<tau>| + r|labels \\<sigma>|)\n      \\<in> mul_eq r \\<and>\n      (r|labels \\<tau> @ labels \\<sigma>'|,\n       r|labels \\<tau>| + r|labels \\<sigma>|)\n      \\<in> mul_eq r)\n\ngoal (1 subgoal):\n 1. (r|labels \\<tau> @ labels \\<sigma>'|,\n     r|labels \\<tau>| + r|labels \\<sigma>|)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|labels \\<tau> @ labels \\<sigma>'|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>'))\n    \\<subseteq> r \\<down>s S", "have d2:\"(r|labels \\<sigma> @ labels \\<tau>'|, r|labels \\<sigma>| + r|labels \\<tau>| ) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|labels \\<sigma> @ labels \\<tau>'|,\n     r|labels \\<sigma>| + r|labels \\<tau>|)\n    \\<in> mul_eq r", "using DD"], ["proof (prove)\nusing this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma> @ labels \\<tau>'|,\n     r|labels \\<sigma>| + r|labels \\<tau>|)\n    \\<in> mul_eq r", "unfolding DD_def D2_def D_def"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in (r|labels \\<sigma> @ labels \\<tau>'|,\n       r|labels \\<tau>| + r|labels \\<sigma>|)\n      \\<in> mul_eq r \\<and>\n      (r|labels \\<tau> @ labels \\<sigma>'|,\n       r|labels \\<tau>| + r|labels \\<sigma>|)\n      \\<in> mul_eq r)\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma> @ labels \\<tau>'|,\n     r|labels \\<sigma>| + r|labels \\<tau>|)\n    \\<in> mul_eq r", "by (auto simp: union_commute)"], ["proof (state)\nthis:\n  (r|labels \\<sigma> @ labels \\<tau>'|,\n   r|labels \\<sigma>| + r|labels \\<tau>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>'))\n    \\<subseteq> r \\<down>s S", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>'))\n    \\<subseteq> r \\<down>s S", "using DD_subset_helper[OF t d1] DD_subset_helper[OF t d2] assms(3)"], ["proof (prove)\nusing this:\n  set_mset (r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set_mset r|labels \\<sigma>'| \\<subseteq> r \\<down>s ?S\n  set_mset (r|labels \\<sigma>| + r|labels \\<tau>|)\n  \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set_mset r|labels \\<tau>'| \\<subseteq> r \\<down>s ?S\n  set_mset (Decreasing_Diagrams.measure r (\\<tau>, \\<sigma>))\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>'))\n    \\<subseteq> r \\<down>s S", "unfolding measure_def"], ["proof (prove)\nusing this:\n  set_mset (r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set_mset r|labels \\<sigma>'| \\<subseteq> r \\<down>s ?S\n  set_mset (r|labels \\<sigma>| + r|labels \\<tau>|)\n  \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set_mset r|labels \\<tau>'| \\<subseteq> r \\<down>s ?S\n  set_mset\n   (r|labels (fst (\\<tau>, \\<sigma>))| + r|labels (snd (\\<tau>, \\<sigma>))|)\n  \\<subseteq> r \\<down>s S\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|labels (fst (\\<sigma>', \\<tau>'))| +\n      r|labels (snd (\\<sigma>', \\<tau>'))|)\n    \\<subseteq> r \\<down>s S", "by auto"], ["proof (state)\nthis:\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>'))\n  \\<subseteq> r \\<down>s S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_imp_valley:\nassumes t: \"trans r\"\nand IH: \"!!y . ((y,((s,[\\<alpha>_step]@\\<rho>_step),(s,[\\<beta>_step]@\\<upsilon>_step))) \\<in> pex r \\<Longrightarrow> peak ars y \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst y, snd y, \\<sigma>', \\<tau>'))\" (is \"!!y. ((y,?P) \\<in> _ \\<Longrightarrow> _ \\<Longrightarrow> _)\")\nand \"\\<delta>1 \\<in> conv ars\"\nand \"set_mset (measure_conv r \\<delta>1) \\<subseteq> dm r M\"\nand \"(M,{#fst \\<alpha>_step,fst \\<beta>_step#}) \\<in> mul_eq r\"\nshows \"\\<exists> \\<sigma> \\<tau>. ({\\<sigma>,\\<tau>} \\<subseteq> seq ars \\<and> fst \\<sigma> = fst \\<delta>1 \\<and> fst \\<tau> = lst_conv \\<delta>1 \\<and> lst \\<sigma> = lst \\<tau> \\<and> set_mset (measure r (\\<sigma>,\\<tau>)) \\<subseteq> dm r M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<delta>1 \\<and>\n       fst \\<tau> = lst_conv \\<delta>1 \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<delta>1 \\<and>\n       fst \\<tau> = lst_conv \\<delta>1 \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  \\<lbrakk>(?y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n            [\\<beta>_step] @ \\<upsilon>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n  \\<delta>1 \\<in> conv ars\n  set_mset (measure_conv r \\<delta>1) \\<subseteq> r \\<down>m M\n  (M, {#fst \\<alpha>_step, fst \\<beta>_step#}) \\<in> mul_eq r", "obtain s ss where sigma1: \"\\<delta>1 = (s,ss)\""], ["proof (prove)\nusing this:\n  trans r\n  \\<lbrakk>(?y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n            [\\<beta>_step] @ \\<upsilon>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n  \\<delta>1 \\<in> conv ars\n  set_mset (measure_conv r \\<delta>1) \\<subseteq> r \\<down>m M\n  (M, {#fst \\<alpha>_step, fst \\<beta>_step#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (\\<And>s ss.\n        \\<delta>1 = (s, ss) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using surjective_pairing"], ["proof (prove)\nusing this:\n  trans r\n  \\<lbrakk>(?y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n            [\\<beta>_step] @ \\<upsilon>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n  \\<delta>1 \\<in> conv ars\n  set_mset (measure_conv r \\<delta>1) \\<subseteq> r \\<down>m M\n  (M, {#fst \\<alpha>_step, fst \\<beta>_step#}) \\<in> mul_eq r\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (\\<And>s ss.\n        \\<delta>1 = (s, ss) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<delta>1 = (s, ss)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<delta>1 \\<and>\n       fst \\<tau> = lst_conv \\<delta>1 \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<delta>1 \\<and>\n       fst \\<tau> = lst_conv \\<delta>1 \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "using assms(3,4)"], ["proof (prove)\nusing this:\n  \\<delta>1 \\<in> conv ars\n  set_mset (measure_conv r \\<delta>1) \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<delta>1 \\<and>\n       fst \\<tau> = lst_conv \\<delta>1 \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "unfolding sigma1"], ["proof (prove)\nusing this:\n  (s, ss) \\<in> conv ars\n  set_mset (measure_conv r (s, ss)) \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, ss) \\<and>\n       fst \\<tau> = lst_conv (s, ss) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "proof (induct ss arbitrary: s rule:list.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>(s, []) \\<in> conv ars;\n        set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, []) \\<and>\n                            fst \\<tau> = lst_conv (s, []) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "case Nil"], ["proof (state)\nthis:\n  (s, []) \\<in> conv ars\n  set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>(s, []) \\<in> conv ars;\n        set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, []) \\<and>\n                            fst \\<tau> = lst_conv (s, []) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "hence \"(s,[]) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  (s, []) \\<in> conv ars\n  set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. (s, []) \\<in> seq ars", "using seq.intros(1)"], ["proof (prove)\nusing this:\n  (s, []) \\<in> conv ars\n  set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\n  (?a, []) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. (s, []) \\<in> seq ars", "by fast"], ["proof (state)\nthis:\n  (s, []) \\<in> seq ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>(s, []) \\<in> conv ars;\n        set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, []) \\<and>\n                            fst \\<tau> = lst_conv (s, []) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "moreover"], ["proof (state)\nthis:\n  (s, []) \\<in> seq ars\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>(s, []) \\<in> conv ars;\n        set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, []) \\<and>\n                            fst \\<tau> = lst_conv (s, []) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "have \"set_mset (measure r ((s,[]),(s,[]))) \\<subseteq> dm r M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r ((s, []), s, []))\n    \\<subseteq> r \\<down>m M", "unfolding measure_def labels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset\n     (r|map fst (snd (fst ((s, []), s, [])))| +\n      r|map fst (snd (snd ((s, []), s, [])))|)\n    \\<subseteq> r \\<down>m M", "by auto"], ["proof (state)\nthis:\n  set_mset (Decreasing_Diagrams.measure r ((s, []), s, []))\n  \\<subseteq> r \\<down>m M\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>(s, []) \\<in> conv ars;\n        set_mset (measure_conv r (s, [])) \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, []) \\<and>\n                            fst \\<tau> = lst_conv (s, []) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M\n 2. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "ultimately"], ["proof (chain)\npicking this:\n  (s, []) \\<in> seq ars\n  set_mset (Decreasing_Diagrams.measure r ((s, []), s, []))\n  \\<subseteq> r \\<down>m M", "show ?case"], ["proof (prove)\nusing this:\n  (s, []) \\<in> seq ars\n  set_mset (Decreasing_Diagrams.measure r ((s, []), s, []))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, []) \\<and>\n       fst \\<tau> = lst_conv (s, []) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<tau>.\n     {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst (s, []) \\<and>\n     fst \\<tau> = lst_conv (s, []) \\<and>\n     lst \\<sigma> = lst \\<tau> \\<and>\n     set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n     \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "case (Cons t' ts)"], ["proof (state)\nthis:\n  \\<lbrakk>(?s, ts) \\<in> conv ars;\n   set_mset (measure_conv r (?s, ts)) \\<subseteq> r \\<down>m M\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                       fst \\<sigma> = fst (?s, ts) \\<and>\n                       fst \\<tau> = lst_conv (?s, ts) \\<and>\n                       lst \\<sigma> = lst \\<tau> \\<and>\n                       set_mset\n                        (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n                       \\<subseteq> r \\<down>m M\n  (s, t' # ts) \\<in> conv ars\n  set_mset (measure_conv r (s, t' # ts)) \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "obtain d \\<beta> t where dec: \"t' = (d,\\<beta>,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d \\<beta> t.\n        t' = (d, \\<beta>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using surjective_pairing"], ["proof (prove)\nusing this:\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (\\<And>d \\<beta> t.\n        t' = (d, \\<beta>, t) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  t' = (d, \\<beta>, t)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "hence dic: \"{\\<beta>} \\<subseteq> ds r (set_mset M)\""], ["proof (prove)\nusing this:\n  t' = (d, \\<beta>, t)\n\ngoal (1 subgoal):\n 1. {\\<beta>} \\<subseteq> r \\<down>s set_mset M", "using Cons(3)"], ["proof (prove)\nusing this:\n  t' = (d, \\<beta>, t)\n  set_mset (measure_conv r (s, t' # ts)) \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. {\\<beta>} \\<subseteq> r \\<down>s set_mset M", "unfolding dec measure_conv_def labels_conv_def dm_def"], ["proof (prove)\nusing this:\n  (d, \\<beta>, t) = (d, \\<beta>, t)\n  set_mset r|map (\\<lambda>q. fst (snd q)) (snd (s, (d, \\<beta>, t) # ts))|\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. {\\<beta>} \\<subseteq> r \\<down>s set_mset M", "by auto"], ["proof (state)\nthis:\n  {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "have one:\"ds r {\\<beta>} \\<subseteq> dm r M \""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s {\\<beta>} \\<subseteq> r \\<down>m M", "unfolding dm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>s {\\<beta>} \\<subseteq> r \\<down>s set_mset M", "using subset_imp_ds_subset[OF t dic]"], ["proof (prove)\nusing this:\n  r \\<down>s {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. r \\<down>s {\\<beta>} \\<subseteq> r \\<down>s set_mset M", "by auto"], ["proof (state)\nthis:\n  r \\<down>s {\\<beta>} \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "have \"set_mset (measure_conv r (t,ts) -s ds r {\\<beta>})  \\<subseteq> dm r M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (measure_conv r (t, ts) -s r \\<down>s {\\<beta>})\n    \\<subseteq> r \\<down>m M", "using Cons(3)"], ["proof (prove)\nusing this:\n  set_mset (measure_conv r (s, t' # ts)) \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. set_mset (measure_conv r (t, ts) -s r \\<down>s {\\<beta>})\n    \\<subseteq> r \\<down>m M", "unfolding measure_conv_def labels_conv_def dec"], ["proof (prove)\nusing this:\n  set_mset r|map (\\<lambda>q. fst (snd q)) (snd (s, (d, \\<beta>, t) # ts))|\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|map (\\<lambda>q. fst (snd q)) (snd (t, ts))| -s\n      r \\<down>s {\\<beta>})\n    \\<subseteq> r \\<down>m M", "by auto"], ["proof (state)\nthis:\n  set_mset (measure_conv r (t, ts) -s r \\<down>s {\\<beta>})\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "hence \"set_mset (measure_conv r (t,ts)) \\<subseteq> dm r M \\<union> ds r {\\<beta>}\""], ["proof (prove)\nusing this:\n  set_mset (measure_conv r (t, ts) -s r \\<down>s {\\<beta>})\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. set_mset (measure_conv r (t, ts))\n    \\<subseteq> r \\<down>m M \\<union> r \\<down>s {\\<beta>}", "unfolding set_mset_def diff_def"], ["proof (prove)\nusing this:\n  {x. 0 < count\n           {#x \\<in># measure_conv r (t, ts).\n            x \\<notin> r \\<down>s {\\<beta>}#}\n           x}\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. {x. 0 < count (measure_conv r (t, ts)) x}\n    \\<subseteq> r \\<down>m M \\<union> r \\<down>s {\\<beta>}", "by auto"], ["proof (state)\nthis:\n  set_mset (measure_conv r (t, ts))\n  \\<subseteq> r \\<down>m M \\<union> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "hence ts2: \"set_mset (measure_conv r (t,ts)) \\<subseteq> dm r M\""], ["proof (prove)\nusing this:\n  set_mset (measure_conv r (t, ts))\n  \\<subseteq> r \\<down>m M \\<union> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set_mset (measure_conv r (t, ts)) \\<subseteq> r \\<down>m M", "using dic one"], ["proof (prove)\nusing this:\n  set_mset (measure_conv r (t, ts))\n  \\<subseteq> r \\<down>m M \\<union> r \\<down>s {\\<beta>}\n  {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n  r \\<down>s {\\<beta>} \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. set_mset (measure_conv r (t, ts)) \\<subseteq> r \\<down>m M", "by auto"], ["proof (state)\nthis:\n  set_mset (measure_conv r (t, ts)) \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "from Cons(2)"], ["proof (chain)\npicking this:\n  (s, t' # ts) \\<in> conv ars", "have ts: \"(t,ts) \\<in> conv ars\""], ["proof (prove)\nusing this:\n  (s, t' # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (t, ts) \\<in> conv ars", "unfolding dec"], ["proof (prove)\nusing this:\n  (s, (d, \\<beta>, t) # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (t, ts) \\<in> conv ars", "using conv_tail1(1)"], ["proof (prove)\nusing this:\n  (s, (d, \\<beta>, t) # ts) \\<in> conv ars\n  (?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars \\<Longrightarrow>\n  (?t, ?xs) \\<in> conv ?ars\n\ngoal (1 subgoal):\n 1. (t, ts) \\<in> conv ars", "by fast"], ["proof (state)\nthis:\n  (t, ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "from Cons(1)[OF ts ts2]"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma> \\<tau>.\n     {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst (t, ts) \\<and>\n     fst \\<tau> = lst_conv (t, ts) \\<and>\n     lst \\<sigma> = lst \\<tau> \\<and>\n     set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n     \\<subseteq> r \\<down>m M", "obtain \\<sigma>' \\<tau> where\n   ih:\"{\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and> fst \\<sigma>' = fst (t,ts) \\<and> fst \\<tau> = lst_conv (t, ts) \\<and> lst \\<sigma>' = lst \\<tau> \\<and> set_mset (measure r (\\<sigma>',\\<tau>)) \\<subseteq> dm r M\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma> \\<tau>.\n     {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst (t, ts) \\<and>\n     fst \\<tau> = lst_conv (t, ts) \\<and>\n     lst \\<sigma> = lst \\<tau> \\<and>\n     set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n     \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<tau>.\n        {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n        fst \\<sigma>' = fst (t, ts) \\<and>\n        fst \\<tau> = lst_conv (t, ts) \\<and>\n        lst \\<sigma>' = lst \\<tau> \\<and>\n        set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n        \\<subseteq> r \\<down>m M \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "have diff:\"!!x. x \\<in># r|map fst (snd \\<sigma>')|-sds r {\\<beta>} \\<Longrightarrow> x \\<in># r|map fst (snd \\<sigma>')|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in># r|map fst (snd \\<sigma>')| -s\n                r \\<down>s {\\<beta>} \\<Longrightarrow>\n       x \\<in># r|map fst (snd \\<sigma>')|", "by simp"], ["proof (state)\nthis:\n  ?x \\<in># r|map fst (snd \\<sigma>')| -s\n            r \\<down>s {\\<beta>} \\<Longrightarrow>\n  ?x \\<in># r|map fst (snd \\<sigma>')|\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>(s, x2) \\<in> conv ars;\n                    set_mset (measure_conv r (s, x2))\n                    \\<subseteq> r \\<down>m M\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n  {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma> = fst (s, x2) \\<and>\n  fst \\<tau> = lst_conv (s, x2) \\<and>\n  lst \\<sigma> = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n  \\<subseteq> r \\<down>m M;\n        (s, x1 # x2) \\<in> conv ars;\n        set_mset (measure_conv r (s, x1 # x2))\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                            {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                            fst \\<sigma> = fst (s, x1 # x2) \\<and>\n                            fst \\<tau> = lst_conv (s, x1 # x2) \\<and>\n                            lst \\<sigma> = lst \\<tau> \\<and>\n                            set_mset\n                             (Decreasing_Diagrams.measure r\n                               (\\<sigma>, \\<tau>))\n                            \\<subseteq> r \\<down>m M", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "proof (cases d)"], ["proof (state)\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "case True"], ["proof (state)\nthis:\n  d\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence step:\"(s,\\<beta>,t) \\<in> ars\""], ["proof (prove)\nusing this:\n  d\n\ngoal (1 subgoal):\n 1. (s, \\<beta>, t) \\<in> ars", "using conv_tail1(2) Cons(2)"], ["proof (prove)\nusing this:\n  d\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars; ?d\\<rbrakk>\n  \\<Longrightarrow> (?s, ?\\<alpha>, ?t) \\<in> ?ars\n  (s, t' # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, \\<beta>, t) \\<in> ars", "unfolding dec"], ["proof (prove)\nusing this:\n  d\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars; ?d\\<rbrakk>\n  \\<Longrightarrow> (?s, ?\\<alpha>, ?t) \\<in> ?ars\n  (s, (d, \\<beta>, t) # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (s, \\<beta>, t) \\<in> ars", "by auto"], ["proof (state)\nthis:\n  (s, \\<beta>, t) \\<in> ars\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have \"(s,(\\<beta>,t)# snd \\<sigma>') \\<in> seq ars\" (is \"?\\<sigma> \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, (\\<beta>, t) # snd \\<sigma>') \\<in> seq ars", "using seq.intros(2)[OF step]"], ["proof (prove)\nusing this:\n  (t, ?ss) \\<in> seq ars \\<Longrightarrow>\n  (s, (\\<beta>, t) # ?ss) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, (\\<beta>, t) # snd \\<sigma>') \\<in> seq ars", "using ih(1)"], ["proof (prove)\nusing this:\n  (t, ?ss) \\<in> seq ars \\<Longrightarrow>\n  (s, (\\<beta>, t) # ?ss) \\<in> seq ars\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. (s, (\\<beta>, t) # snd \\<sigma>') \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, (\\<beta>, t) # snd \\<sigma>') \\<in> seq ars\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence \"{?\\<sigma>,\\<tau>} \\<subseteq> seq ars\""], ["proof (prove)\nusing this:\n  (s, (\\<beta>, t) # snd \\<sigma>') \\<in> seq ars\n\ngoal (1 subgoal):\n 1. {(s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>} \\<subseteq> seq ars", "using ih"], ["proof (prove)\nusing this:\n  (s, (\\<beta>, t) # snd \\<sigma>') \\<in> seq ars\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. {(s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>} \\<subseteq> seq ars", "by auto"], ["proof (state)\nthis:\n  {(s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>} \\<subseteq> seq ars\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "moreover"], ["proof (state)\nthis:\n  {(s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>} \\<subseteq> seq ars\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have \"(fst ?\\<sigma>) = fst (s, t' # ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (s, (\\<beta>, t) # snd \\<sigma>') = fst (s, t' # ts)", "by auto"], ["proof (state)\nthis:\n  fst (s, (\\<beta>, t) # snd \\<sigma>') = fst (s, t' # ts)\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "moreover"], ["proof (state)\nthis:\n  fst (s, (\\<beta>, t) # snd \\<sigma>') = fst (s, t' # ts)\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have \"fst \\<tau> = lst_conv (s, t' # ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<tau> = lst_conv (s, t' # ts)", "using ih"], ["proof (prove)\nusing this:\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. fst \\<tau> = lst_conv (s, t' # ts)", "unfolding dec lst_conv.simps"], ["proof (prove)\nusing this:\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. fst \\<tau> = lst_conv (t, ts)", "by auto"], ["proof (state)\nthis:\n  fst \\<tau> = lst_conv (s, t' # ts)\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "moreover"], ["proof (state)\nthis:\n  fst \\<tau> = lst_conv (s, t' # ts)\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have \"lst ?\\<sigma> = lst \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (s, (\\<beta>, t) # snd \\<sigma>') = lst \\<tau>", "by (metis \\<open>(s, (\\<beta>, t) # snd \\<sigma>') \\<in> seq ars\\<close> fst_conv ih seq_tail1(3) snd_conv surjective_pairing)"], ["proof (state)\nthis:\n  lst (s, (\\<beta>, t) # snd \\<sigma>') = lst \\<tau>\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "moreover"], ["proof (state)\nthis:\n  lst (s, (\\<beta>, t) # snd \\<sigma>') = lst \\<tau>\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have \"set_mset (measure r (?\\<sigma>,\\<tau>)) \\<subseteq> dm r M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset\n     (Decreasing_Diagrams.measure r\n       ((s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>))\n    \\<subseteq> r \\<down>m M", "using diff ih dic"], ["proof (prove)\nusing this:\n  ?x \\<in># r|map fst (snd \\<sigma>')| -s\n            r \\<down>s {\\<beta>} \\<Longrightarrow>\n  ?x \\<in># r|map fst (snd \\<sigma>')|\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n  {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset\n     (Decreasing_Diagrams.measure r\n       ((s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>))\n    \\<subseteq> r \\<down>m M", "unfolding measure_def labels_def dm_def"], ["proof (prove)\nusing this:\n  ?x \\<in># r|map fst (snd \\<sigma>')| -s\n            r \\<down>s {\\<beta>} \\<Longrightarrow>\n  ?x \\<in># r|map fst (snd \\<sigma>')|\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset\n   (r|map fst (snd (fst (\\<sigma>', \\<tau>)))| +\n    r|map fst (snd (snd (\\<sigma>', \\<tau>)))|)\n  \\<subseteq> r \\<down>s set_mset M\n  {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|map fst (snd (fst ((s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>)))| +\n      r|map fst (snd (snd ((s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>)))|)\n    \\<subseteq> r \\<down>s set_mset M", "by auto"], ["proof (state)\nthis:\n  set_mset\n   (Decreasing_Diagrams.measure r\n     ((s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (2 subgoals):\n 1. d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M\n 2. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "ultimately"], ["proof (chain)\npicking this:\n  {(s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>} \\<subseteq> seq ars\n  fst (s, (\\<beta>, t) # snd \\<sigma>') = fst (s, t' # ts)\n  fst \\<tau> = lst_conv (s, t' # ts)\n  lst (s, (\\<beta>, t) # snd \\<sigma>') = lst \\<tau>\n  set_mset\n   (Decreasing_Diagrams.measure r\n     ((s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>))\n  \\<subseteq> r \\<down>m M", "show ?thesis"], ["proof (prove)\nusing this:\n  {(s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>} \\<subseteq> seq ars\n  fst (s, (\\<beta>, t) # snd \\<sigma>') = fst (s, t' # ts)\n  fst \\<tau> = lst_conv (s, t' # ts)\n  lst (s, (\\<beta>, t) # snd \\<sigma>') = lst \\<tau>\n  set_mset\n   (Decreasing_Diagrams.measure r\n     ((s, (\\<beta>, t) # snd \\<sigma>'), \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<tau>.\n     {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst (s, t' # ts) \\<and>\n     fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n     lst \\<sigma> = lst \\<tau> \\<and>\n     set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n     \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "case False"], ["proof (state)\nthis:\n  \\<not> d\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence step:\"(t,\\<beta>,s) \\<in> ars\""], ["proof (prove)\nusing this:\n  \\<not> d\n\ngoal (1 subgoal):\n 1. (t, \\<beta>, s) \\<in> ars", "using conv_tail1(3) Cons(2)"], ["proof (prove)\nusing this:\n  \\<not> d\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars;\n   \\<not> ?d\\<rbrakk>\n  \\<Longrightarrow> (?t, ?\\<alpha>, ?s) \\<in> ?ars\n  (s, t' # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (t, \\<beta>, s) \\<in> ars", "unfolding dec"], ["proof (prove)\nusing this:\n  \\<not> d\n  \\<lbrakk>(?s, (?d, ?\\<alpha>, ?t) # ?xs) \\<in> conv ?ars;\n   \\<not> ?d\\<rbrakk>\n  \\<Longrightarrow> (?t, ?\\<alpha>, ?s) \\<in> ?ars\n  (s, (d, \\<beta>, t) # ts) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. (t, \\<beta>, s) \\<in> ars", "by auto"], ["proof (state)\nthis:\n  (t, \\<beta>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence \"(t,[(\\<beta>,s)]) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  (t, \\<beta>, s) \\<in> ars\n\ngoal (1 subgoal):\n 1. (t, [(\\<beta>, s)]) \\<in> seq ars", "using seq.intros"], ["proof (prove)\nusing this:\n  (t, \\<beta>, s) \\<in> ars\n  (?a, []) \\<in> seq ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars; (?b, ?ss) \\<in> seq ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (?\\<alpha>, ?b) # ?ss) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. (t, [(\\<beta>, s)]) \\<in> seq ars", "by metis"], ["proof (state)\nthis:\n  (t, [(\\<beta>, s)]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence p:\"peak ars ((t,[(\\<beta>,s)]),\\<sigma>')\" (is \"peak ars ?y\")"], ["proof (prove)\nusing this:\n  (t, [(\\<beta>, s)]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. peak ars ((t, [(\\<beta>, s)]), \\<sigma>')", "using seq.intros"], ["proof (prove)\nusing this:\n  (t, [(\\<beta>, s)]) \\<in> seq ars\n  (?a, []) \\<in> seq ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars; (?b, ?ss) \\<in> seq ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (?\\<alpha>, ?b) # ?ss) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. peak ars ((t, [(\\<beta>, s)]), \\<sigma>')", "unfolding peak_def"], ["proof (prove)\nusing this:\n  (t, [(\\<beta>, s)]) \\<in> seq ars\n  (?a, []) \\<in> seq ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars; (?b, ?ss) \\<in> seq ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (?\\<alpha>, ?b) # ?ss) \\<in> seq ?ars\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) = ((t, [(\\<beta>, s)]), \\<sigma>')\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "using ih"], ["proof (prove)\nusing this:\n  (t, [(\\<beta>, s)]) \\<in> seq ars\n  (?a, []) \\<in> seq ?ars\n  \\<lbrakk>(?a, ?\\<alpha>, ?b) \\<in> ?ars; (?b, ?ss) \\<in> seq ?ars\\<rbrakk>\n  \\<Longrightarrow> (?a, (?\\<alpha>, ?b) # ?ss) \\<in> seq ?ars\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) = ((t, [(\\<beta>, s)]), \\<sigma>')\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  peak ars ((t, [(\\<beta>, s)]), \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence mp: \"set_mset (measure r ?y) \\<subseteq> ds r (set_mset M)\""], ["proof (prove)\nusing this:\n  peak ars ((t, [(\\<beta>, s)]), \\<sigma>')\n\ngoal (1 subgoal):\n 1. set_mset\n     (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n    \\<subseteq> r \\<down>s set_mset M", "using ih dic"], ["proof (prove)\nusing this:\n  peak ars ((t, [(\\<beta>, s)]), \\<sigma>')\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n  {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset\n     (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n    \\<subseteq> r \\<down>s set_mset M", "unfolding measure_def labels_def dm_def"], ["proof (prove)\nusing this:\n  peak ars ((t, [(\\<beta>, s)]), \\<sigma>')\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset\n   (r|map fst (snd (fst (\\<sigma>', \\<tau>)))| +\n    r|map fst (snd (snd (\\<sigma>', \\<tau>)))|)\n  \\<subseteq> r \\<down>s set_mset M\n  {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|map fst (snd (fst ((t, [(\\<beta>, s)]), \\<sigma>')))| +\n      r|map fst (snd (snd ((t, [(\\<beta>, s)]), \\<sigma>')))|)\n    \\<subseteq> r \\<down>s set_mset M", "by simp"], ["proof (state)\nthis:\n  set_mset (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence ne: \"M \\<noteq> {#}\""], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. M \\<noteq> {#}", "using dec dic"], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n  \\<subseteq> r \\<down>s set_mset M\n  t' = (d, \\<beta>, t)\n  {\\<beta>} \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. M \\<noteq> {#}", "unfolding dm_def ds_def"], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n  \\<subseteq> {y. \\<exists>x\\<in>#M. (y, x) \\<in> r}\n  t' = (d, \\<beta>, t)\n  {\\<beta>} \\<subseteq> {y. \\<exists>x\\<in>#M. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. M \\<noteq> {#}", "by auto"], ["proof (state)\nthis:\n  M \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence x:\"(measure r ?y,M) \\<in> mul r\""], ["proof (prove)\nusing this:\n  M \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'), M)\n    \\<in> mul r", "using mp"], ["proof (prove)\nusing this:\n  M \\<noteq> {#}\n  set_mset (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'), M)\n    \\<in> mul r", "unfolding dm_def mul_def"], ["proof (prove)\nusing this:\n  M \\<noteq> {#}\n  set_mset (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'), M)\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>s set_mset J \\<and>\n              J \\<noteq> {#}}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>M \\<noteq> {#};\n     set_mset\n      (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'))\n     \\<subseteq> r \\<down>s set_mset M\\<rbrakk>\n    \\<Longrightarrow> \\<exists>I J K.\n                         Decreasing_Diagrams.measure r\n                          ((t, [(\\<beta>, s)]), \\<sigma>') =\n                         I + K \\<and>\n                         M = I + J \\<and>\n                         set_mset K \\<subseteq> r \\<down>s set_mset J \\<and>\n                         J \\<noteq> {#}", "by (metis add_0)"], ["proof (state)\nthis:\n  (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'), M)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have \"({#fst \\<alpha>_step#}+{#fst \\<beta>_step#},measure r ?P) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#fst \\<alpha>_step#} + {#fst \\<beta>_step#},\n     Decreasing_Diagrams.measure r\n      ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n       [\\<beta>_step] @ \\<upsilon>_step))\n    \\<in> mul_eq r", "unfolding assms(2) measure_def labels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#fst \\<alpha>_step#} + {#fst \\<beta>_step#},\n     r|map fst\n        (snd (fst ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n                   [\\<beta>_step] @ \\<upsilon>_step)))| +\n     r|map fst\n        (snd (snd ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n                   [\\<beta>_step] @ \\<upsilon>_step)))|)\n    \\<in> mul_eq r", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#fst \\<beta>_step, fst \\<alpha>_step#},\n     add_mset (fst \\<beta>_step)\n      (add_mset (fst \\<alpha>_step)\n        (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n         r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step})))\n    \\<in> mul_eq r", "unfolding union_lcomm union_assoc[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#fst \\<beta>_step, fst \\<alpha>_step#},\n     add_mset (fst \\<beta>_step)\n      (add_mset (fst \\<alpha>_step)\n        (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n         r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step})))\n    \\<in> mul_eq r", "using mul_eq_add_right[where M=\"{#fst \\<alpha>_step#}+{#fst \\<beta>_step#}\"]"], ["proof (prove)\nusing this:\n  ({#fst \\<alpha>_step#} + {#fst \\<beta>_step#},\n   {#fst \\<alpha>_step#} + {#fst \\<beta>_step#} + ?P)\n  \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. ({#fst \\<beta>_step, fst \\<alpha>_step#},\n     add_mset (fst \\<beta>_step)\n      (add_mset (fst \\<alpha>_step)\n        (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n         r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step})))\n    \\<in> mul_eq r", "unfolding union_assoc"], ["proof (prove)\nusing this:\n  ({#fst \\<alpha>_step#} + {#fst \\<beta>_step#},\n   {#fst \\<alpha>_step#} + ({#fst \\<beta>_step#} + ?P))\n  \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. ({#fst \\<beta>_step, fst \\<alpha>_step#},\n     add_mset (fst \\<beta>_step)\n      (add_mset (fst \\<alpha>_step)\n        (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n         r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step})))\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  ({#fst \\<alpha>_step#} + {#fst \\<beta>_step#},\n   Decreasing_Diagrams.measure r\n    ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n     [\\<beta>_step] @ \\<upsilon>_step))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence  \"(M,measure r ?P) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  ({#fst \\<alpha>_step#} + {#fst \\<beta>_step#},\n   Decreasing_Diagrams.measure r\n    ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n     [\\<beta>_step] @ \\<upsilon>_step))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (M, Decreasing_Diagrams.measure r\n         ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n          [\\<beta>_step] @ \\<upsilon>_step))\n    \\<in> mul_eq r", "using assms(5) mul_eq_trans t"], ["proof (prove)\nusing this:\n  ({#fst \\<alpha>_step#} + {#fst \\<beta>_step#},\n   Decreasing_Diagrams.measure r\n    ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n     [\\<beta>_step] @ \\<upsilon>_step))\n  \\<in> mul_eq r\n  (M, {#fst \\<alpha>_step, fst \\<beta>_step#}) \\<in> mul_eq r\n  \\<lbrakk>trans ?r; (?M, ?N) \\<in> mul_eq ?r;\n   (?N, ?P) \\<in> mul_eq ?r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?P) \\<in> mul_eq ?r\n  trans r\n\ngoal (1 subgoal):\n 1. (M, Decreasing_Diagrams.measure r\n         ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n          [\\<beta>_step] @ \\<upsilon>_step))\n    \\<in> mul_eq r", "by (auto simp: add_mset_commute)"], ["proof (state)\nthis:\n  (M, Decreasing_Diagrams.measure r\n       ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n        [\\<beta>_step] @ \\<upsilon>_step))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence w:\"(?y,?P) \\<in> pex r\""], ["proof (prove)\nusing this:\n  (M, Decreasing_Diagrams.measure r\n       ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n        [\\<beta>_step] @ \\<upsilon>_step))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (((t, [(\\<beta>, s)]), \\<sigma>'), (s, [\\<alpha>_step] @ \\<rho>_step),\n     s, [\\<beta>_step] @ \\<upsilon>_step)\n    \\<in> pex r", "unfolding assms(1) pex_def"], ["proof (prove)\nusing this:\n  (M, Decreasing_Diagrams.measure r\n       ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n        [\\<beta>_step] @ \\<upsilon>_step))\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (((t, [(\\<beta>, s)]), \\<sigma>'), (s, [\\<alpha>_step] @ \\<rho>_step),\n     s, [\\<beta>_step] @ \\<upsilon>_step)\n    \\<in> {(P1, P2).\n           (Decreasing_Diagrams.measure r P1,\n            Decreasing_Diagrams.measure r P2)\n           \\<in> mul r}", "using mul_and_mul_eq_imp_mul[OF t x]"], ["proof (prove)\nusing this:\n  (M, Decreasing_Diagrams.measure r\n       ((s, [\\<alpha>_step] @ \\<rho>_step), s,\n        [\\<beta>_step] @ \\<upsilon>_step))\n  \\<in> mul_eq r\n  (M, ?P) \\<in> mul_eq r \\<Longrightarrow>\n  (Decreasing_Diagrams.measure r ((t, [(\\<beta>, s)]), \\<sigma>'), ?P)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((t, [(\\<beta>, s)]), \\<sigma>'), (s, [\\<alpha>_step] @ \\<rho>_step),\n     s, [\\<beta>_step] @ \\<upsilon>_step)\n    \\<in> {(P1, P2).\n           (Decreasing_Diagrams.measure r P1,\n            Decreasing_Diagrams.measure r P2)\n           \\<in> mul r}", "by auto"], ["proof (state)\nthis:\n  (((t, [(\\<beta>, s)]), \\<sigma>'), (s, [\\<alpha>_step] @ \\<rho>_step), s,\n   [\\<beta>_step] @ \\<upsilon>_step)\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "obtain \\<sigma>'' \\<tau>'' where DD:\"DD ars r ((t,[(\\<beta>,s)]),\\<sigma>',\\<sigma>'',\\<tau>'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>'' \\<tau>''.\n        DD ars r\n         ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'',\n          \\<tau>'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using IH[OF w p]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>'' \\<tau>'.\n     DD ars r\n      (fst ((t, [(\\<beta>, s)]), \\<sigma>'),\n       snd ((t, [(\\<beta>, s)]), \\<sigma>'), \\<sigma>'', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>'' \\<tau>''.\n        DD ars r\n         ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'',\n          \\<tau>'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  DD ars r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have sigma: \"\\<sigma>'' \\<in> seq ars\" \"fst \\<sigma>'' = fst (s, t' # ts)\" \"lst \\<sigma>'' = lst \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>'' \\<in> seq ars &&&\n    fst \\<sigma>'' = fst (s, t' # ts) &&& lst \\<sigma>'' = lst \\<tau>''", "using DD"], ["proof (prove)\nusing this:\n  DD ars r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<sigma>'' \\<in> seq ars &&&\n    fst \\<sigma>'' = fst (s, t' # ts) &&& lst \\<sigma>'' = lst \\<tau>''", "unfolding DD_def diagram_def lst_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      (if snd \\<sigma> = [] then fst \\<sigma>\n       else snd (last (snd \\<sigma>))) =\n      fst \\<tau>' \\<and>\n      (if snd \\<tau> = [] then fst \\<tau> else snd (last (snd \\<tau>))) =\n      fst \\<sigma>' \\<and>\n      (if snd \\<sigma>' = [] then fst \\<sigma>'\n       else snd (last (snd \\<sigma>'))) =\n      (if snd \\<tau>' = [] then fst \\<tau>'\n       else snd (last (snd \\<tau>')))) \\<and>\n  D2 r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<sigma>'' \\<in> seq ars &&&\n    fst \\<sigma>'' = fst (s, t' # ts) &&&\n    (if snd \\<sigma>'' = [] then fst \\<sigma>''\n     else snd (last (snd \\<sigma>''))) =\n    (if snd \\<tau>'' = [] then fst \\<tau>'' else snd (last (snd \\<tau>'')))", "by auto"], ["proof (state)\nthis:\n  \\<sigma>'' \\<in> seq ars\n  fst \\<sigma>'' = fst (s, t' # ts)\n  lst \\<sigma>'' = lst \\<tau>''\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have tau'': \"\\<tau>'' \\<in> seq ars\" and eq: \"lst \\<tau> = fst \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>'' \\<in> seq ars &&& lst \\<tau> = fst \\<tau>''", "using DD"], ["proof (prove)\nusing this:\n  DD ars r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<tau>'' \\<in> seq ars &&& lst \\<tau> = fst \\<tau>''", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<tau>'' \\<in> seq ars &&& lst \\<tau> = fst \\<tau>''", "using ih"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<tau>'' \\<in> seq ars &&& lst \\<tau> = fst \\<tau>''", "by auto"], ["proof (state)\nthis:\n  \\<tau>'' \\<in> seq ars\n  lst \\<tau> = fst \\<tau>''\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have tau:\"(fst \\<tau>,snd \\<tau> @ snd \\<tau>'') \\<in> seq ars\" (is \"?\\<tau>''' \\<in> _\") and \"lst \\<tau>'' = lst (fst \\<tau>,snd \\<tau>@ snd \\<tau>'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars &&&\n    lst \\<tau>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')", "using seq_concat[OF _ tau'' eq] ih"], ["proof (prove)\nusing this:\n  \\<tau> \\<in> seq ars \\<Longrightarrow>\n  (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars\n  \\<tau> \\<in> seq ars \\<Longrightarrow>\n  lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') = lst \\<tau>''\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars &&&\n    lst \\<tau>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')", "by auto"], ["proof (state)\nthis:\n  (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars\n  lst \\<tau>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence tau2: \"fst ?\\<tau>''' = lst_conv (s,t'#ts)\" \"lst \\<sigma>'' = lst ?\\<tau>'''\""], ["proof (prove)\nusing this:\n  (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars\n  lst \\<tau>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')\n\ngoal (1 subgoal):\n 1. fst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') = lst_conv (s, t' # ts) &&&\n    lst \\<sigma>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')", "using DD ih"], ["proof (prove)\nusing this:\n  (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars\n  lst \\<tau>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')\n  DD ars r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. fst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') = lst_conv (s, t' # ts) &&&\n    lst \\<sigma>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')", "unfolding DD_def diagram_def dec lst_conv.simps"], ["proof (prove)\nusing this:\n  (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars\n  lst \\<tau>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((t, [(\\<beta>, s)]), \\<sigma>', \\<sigma>'', \\<tau>'')\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. fst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') = lst_conv (t, ts) &&&\n    lst \\<sigma>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')", "by auto"], ["proof (state)\nthis:\n  fst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') = lst_conv (s, t' # ts)\n  lst \\<sigma>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "have \"set_mset (measure r (\\<sigma>'',\\<tau>'')) \\<subseteq> ds r (set_mset M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>'', \\<tau>''))\n    \\<subseteq> r \\<down>s set_mset M", "using DD_subset_ds[OF t DD mp]"], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>'', \\<tau>''))\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset (Decreasing_Diagrams.measure r (\\<sigma>'', \\<tau>''))\n    \\<subseteq> r \\<down>s set_mset M", "unfolding measure_def"], ["proof (prove)\nusing this:\n  set_mset\n   (r|labels (fst (\\<sigma>'', \\<tau>''))| +\n    r|labels (snd (\\<sigma>'', \\<tau>''))|)\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|labels (fst (\\<sigma>'', \\<tau>''))| +\n      r|labels (snd (\\<sigma>'', \\<tau>''))|)\n    \\<subseteq> r \\<down>s set_mset M", "by auto"], ["proof (state)\nthis:\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>'', \\<tau>''))\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence \"set_mset (r|labels \\<sigma>''| + r|labels \\<tau>| + (r|labels \\<tau>''| -s (dl r (labels \\<tau>)) )) \\<subseteq> dm r M\""], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>'', \\<tau>''))\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|labels \\<sigma>''| + r|labels \\<tau>| +\n      r|labels \\<tau>''| -s r \\<down>l labels \\<tau>)\n    \\<subseteq> r \\<down>m M", "using ih"], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>'', \\<tau>''))\n  \\<subseteq> r \\<down>s set_mset M\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<sigma>', \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|labels \\<sigma>''| + r|labels \\<tau>| +\n      r|labels \\<tau>''| -s r \\<down>l labels \\<tau>)\n    \\<subseteq> r \\<down>m M", "unfolding measure_def dm_def diff_def"], ["proof (prove)\nusing this:\n  set_mset\n   (r|labels (fst (\\<sigma>'', \\<tau>''))| +\n    r|labels (snd (\\<sigma>'', \\<tau>''))|)\n  \\<subseteq> r \\<down>s set_mset M\n  {\\<sigma>', \\<tau>} \\<subseteq> seq ars \\<and>\n  fst \\<sigma>' = fst (t, ts) \\<and>\n  fst \\<tau> = lst_conv (t, ts) \\<and>\n  lst \\<sigma>' = lst \\<tau> \\<and>\n  set_mset\n   (r|labels (fst (\\<sigma>', \\<tau>))| +\n    r|labels (snd (\\<sigma>', \\<tau>))|)\n  \\<subseteq> r \\<down>s set_mset M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|labels \\<sigma>''| + r|labels \\<tau>| +\n      {#x \\<in># r|labels \\<tau>''|. x \\<notin> r \\<down>l labels \\<tau>#})\n    \\<subseteq> r \\<down>s set_mset M", "by auto"], ["proof (state)\nthis:\n  set_mset\n   (r|labels \\<sigma>''| + r|labels \\<tau>| +\n    r|labels \\<tau>''| -s r \\<down>l labels \\<tau>)\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "hence fin: \"set_mset (measure r (\\<sigma>'',?\\<tau>''')) \\<subseteq> dm r M\""], ["proof (prove)\nusing this:\n  set_mset\n   (r|labels \\<sigma>''| + r|labels \\<tau>| +\n    r|labels \\<tau>''| -s r \\<down>l labels \\<tau>)\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. set_mset\n     (Decreasing_Diagrams.measure r\n       (\\<sigma>'', fst \\<tau>, snd \\<tau> @ snd \\<tau>''))\n    \\<subseteq> r \\<down>m M", "unfolding measure_def labels_def"], ["proof (prove)\nusing this:\n  set_mset\n   (r|map fst (snd \\<sigma>'')| + r|map fst (snd \\<tau>)| +\n    r|map fst (snd \\<tau>'')| -s r \\<down>l map fst (snd \\<tau>))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. set_mset\n     (r|map fst\n         (snd (fst (\\<sigma>'', fst \\<tau>, snd \\<tau> @ snd \\<tau>'')))| +\n      r|map fst\n         (snd (snd (\\<sigma>'', fst \\<tau>, snd \\<tau> @ snd \\<tau>'')))|)\n    \\<subseteq> r \\<down>m M", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in># r|map fst (snd \\<tau>) @ map fst (snd \\<tau>'')|;\n        set_mset r|map fst (snd \\<sigma>'')| \\<subseteq> r \\<down>m M;\n        set_mset r|map fst (snd \\<tau>)| \\<subseteq> r \\<down>m M;\n        set_mset r|map fst (snd \\<tau>'')| - r \\<down>l map fst (snd \\<tau>)\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> r \\<down>m M", "unfolding lemma3_2_2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in># r|map fst (snd \\<tau>)| +\n                         r|map fst (snd \\<tau>'')| -s\n                         r \\<down>l map fst (snd \\<tau>);\n        set_mset r|map fst (snd \\<sigma>'')| \\<subseteq> r \\<down>m M;\n        set_mset r|map fst (snd \\<tau>)| \\<subseteq> r \\<down>m M;\n        set_mset r|map fst (snd \\<tau>'')| - r \\<down>l map fst (snd \\<tau>)\n        \\<subseteq> r \\<down>m M\\<rbrakk>\n       \\<Longrightarrow> x \\<in> r \\<down>m M", "by auto"], ["proof (state)\nthis:\n  set_mset\n   (Decreasing_Diagrams.measure r\n     (\\<sigma>'', fst \\<tau>, snd \\<tau> @ snd \\<tau>''))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<not> d \\<Longrightarrow>\n    \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "using sigma tau tau2 fin"], ["proof (prove)\nusing this:\n  \\<sigma>'' \\<in> seq ars\n  fst \\<sigma>'' = fst (s, t' # ts)\n  lst \\<sigma>'' = lst \\<tau>''\n  (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') \\<in> seq ars\n  fst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'') = lst_conv (s, t' # ts)\n  lst \\<sigma>'' = lst (fst \\<tau>, snd \\<tau> @ snd \\<tau>'')\n  set_mset\n   (Decreasing_Diagrams.measure r\n     (\\<sigma>'', fst \\<tau>, snd \\<tau> @ snd \\<tau>''))\n  \\<subseteq> r \\<down>m M\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma> \\<tau>.\n       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst (s, t' # ts) \\<and>\n       fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n       lst \\<sigma> = lst \\<tau> \\<and>\n       set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n       \\<subseteq> r \\<down>m M", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<tau>.\n     {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst (s, t' # ts) \\<and>\n     fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n     lst \\<sigma> = lst \\<tau> \\<and>\n     set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n     \\<subseteq> r \\<down>m M\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<tau>.\n     {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst (s, t' # ts) \\<and>\n     fst \\<tau> = lst_conv (s, t' # ts) \\<and>\n     lst \\<sigma> = lst \\<tau> \\<and>\n     set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n     \\<subseteq> r \\<down>m M\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma> \\<tau>.\n     {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n     fst \\<sigma> = fst \\<delta>1 \\<and>\n     fst \\<tau> = lst_conv \\<delta>1 \\<and>\n     lst \\<sigma> = lst \\<tau> \\<and>\n     set_mset (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n     \\<subseteq> r \\<down>m M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma labels_multiset: assumes \"length (labels \\<sigma>) \\<le> 1\" and \"set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\" shows \"(r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "proof (cases \"snd \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. snd \\<sigma> = [] \\<Longrightarrow>\n    (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r\n 2. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "case Nil"], ["proof (state)\nthis:\n  snd \\<sigma> = []\n\ngoal (2 subgoals):\n 1. snd \\<sigma> = [] \\<Longrightarrow>\n    (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r\n 2. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "hence \"r|labels \\<sigma>| = {#}\""], ["proof (prove)\nusing this:\n  snd \\<sigma> = []\n\ngoal (1 subgoal):\n 1. r|labels \\<sigma>| = {#}", "unfolding labels_def"], ["proof (prove)\nusing this:\n  snd \\<sigma> = []\n\ngoal (1 subgoal):\n 1. r|map fst (snd \\<sigma>)| = {#}", "by auto"], ["proof (state)\nthis:\n  r|labels \\<sigma>| = {#}\n\ngoal (2 subgoals):\n 1. snd \\<sigma> = [] \\<Longrightarrow>\n    (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r\n 2. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  r|labels \\<sigma>| = {#}\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "unfolding mul_eq_def"], ["proof (prove)\nusing this:\n  r|labels \\<sigma>| = {#}\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>|, {#\\<alpha>#})\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and> set_mset K \\<subseteq> r \\<down>m J}", "by auto"], ["proof (state)\nthis:\n  (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "case (Cons x xs)"], ["proof (state)\nthis:\n  snd \\<sigma> = x # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "hence l:\"length (labels \\<sigma>) = 1\""], ["proof (prove)\nusing this:\n  snd \\<sigma> = x # xs\n\ngoal (1 subgoal):\n 1. length (labels \\<sigma>) = 1", "using assms(1)"], ["proof (prove)\nusing this:\n  snd \\<sigma> = x # xs\n  length (labels \\<sigma>) \\<le> 1\n\ngoal (1 subgoal):\n 1. length (labels \\<sigma>) = 1", "unfolding labels_def"], ["proof (prove)\nusing this:\n  snd \\<sigma> = x # xs\n  length (map fst (snd \\<sigma>)) \\<le> 1\n\ngoal (1 subgoal):\n 1. length (map fst (snd \\<sigma>)) = 1", "by auto"], ["proof (state)\nthis:\n  length (labels \\<sigma>) = 1\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "from this"], ["proof (chain)\npicking this:\n  length (labels \\<sigma>) = 1", "have \"labels \\<sigma> \\<noteq> []\""], ["proof (prove)\nusing this:\n  length (labels \\<sigma>) = 1\n\ngoal (1 subgoal):\n 1. labels \\<sigma> \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  labels \\<sigma> \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "from this"], ["proof (chain)\npicking this:\n  labels \\<sigma> \\<noteq> []", "obtain a as where \"labels \\<sigma> = a#as\""], ["proof (prove)\nusing this:\n  labels \\<sigma> \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a as.\n        labels \\<sigma> = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using neq_Nil_conv"], ["proof (prove)\nusing this:\n  labels \\<sigma> \\<noteq> []\n  (?xs \\<noteq> []) = (\\<exists>y ys. ?xs = y # ys)\n\ngoal (1 subgoal):\n 1. (\\<And>a as.\n        labels \\<sigma> = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  labels \\<sigma> = a # as\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "hence leq: \"labels \\<sigma> = [a]\""], ["proof (prove)\nusing this:\n  labels \\<sigma> = a # as\n\ngoal (1 subgoal):\n 1. labels \\<sigma> = [a]", "using l"], ["proof (prove)\nusing this:\n  labels \\<sigma> = a # as\n  length (labels \\<sigma>) = 1\n\ngoal (1 subgoal):\n 1. labels \\<sigma> = [a]", "by auto"], ["proof (state)\nthis:\n  labels \\<sigma> = [a]\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "hence \"set (labels \\<sigma>) = {\\<alpha>}\""], ["proof (prove)\nusing this:\n  labels \\<sigma> = [a]\n\ngoal (1 subgoal):\n 1. set (labels \\<sigma>) = {\\<alpha>}", "using assms(2)"], ["proof (prove)\nusing this:\n  labels \\<sigma> = [a]\n  set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. set (labels \\<sigma>) = {\\<alpha>}", "by auto"], ["proof (state)\nthis:\n  set (labels \\<sigma>) = {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "hence \"(r|labels \\<sigma>| ) = {#\\<alpha>#}\""], ["proof (prove)\nusing this:\n  set (labels \\<sigma>) = {\\<alpha>}\n\ngoal (1 subgoal):\n 1. r|labels \\<sigma>| = {#\\<alpha>#}", "unfolding leq lexmax.simps diff_def"], ["proof (prove)\nusing this:\n  set [a] = {\\<alpha>}\n\ngoal (1 subgoal):\n 1. {#a#} + {#x \\<in># {#}. x \\<notin> r \\<down>s {a}#} = {#\\<alpha>#}", "by auto"], ["proof (state)\nthis:\n  r|labels \\<sigma>| = {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "thus ?thesis"], ["proof (prove)\nusing this:\n  r|labels \\<sigma>| = {#\\<alpha>#}\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "using mul_eq_reflexive"], ["proof (prove)\nusing this:\n  r|labels \\<sigma>| = {#\\<alpha>#}\n  (?M, ?M) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma decreasing_imp_local_decreasing:\nassumes t:\"trans r\" and i:\"irrefl r\" and DD: \"DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\" and \"set (labels \\<tau>) \\<subseteq> ds r {\\<beta>}\"\nand \"length (labels \\<sigma>) \\<le> 1\" and \"set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\"\nshows \"\\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3. (\\<sigma>'=(fst \\<sigma>1,snd \\<sigma>1@snd \\<sigma>2@snd \\<sigma>3) \\<and> lst \\<sigma>1=fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3 \\<and> lst \\<sigma>3 = lst \\<sigma>'\n                 \\<and> LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3))\"\n      \"set (labels \\<tau>') \\<subseteq> ds r ({\\<alpha>,\\<beta>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3) &&&\n    set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)\n 2. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "show \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3. (\\<sigma>' = (fst \\<sigma>1,snd \\<sigma>1@snd \\<sigma>2@snd \\<sigma>3) \\<and>\n         lst \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3 \\<and> lst \\<sigma>3 = lst \\<sigma>' \\<and> LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "from DD"], ["proof (chain)\npicking this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "have \\<sigma>':\"\\<sigma>' \\<in> seq ars\""], ["proof (prove)\nusing this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> seq ars", "using assms"], ["proof (prove)\nusing this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  trans r\n  irrefl r\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  set (labels \\<tau>) \\<subseteq> r \\<down>s {\\<beta>}\n  length (labels \\<sigma>) \\<le> 1\n  set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  trans r\n  irrefl r\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  set (labels \\<tau>) \\<subseteq> r \\<down>s {\\<beta>}\n  length (labels \\<sigma>) \\<le> 1\n  set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "from DD"], ["proof (chain)\npicking this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "have x: \"(r|labels \\<sigma>'| -s dl r (labels \\<tau>),r|labels \\<sigma>| ) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>l labels \\<tau>, r|labels \\<sigma>|)\n    \\<in> mul_eq r", "unfolding DD_def D2_def"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>l labels \\<tau>, r|labels \\<sigma>|)\n    \\<in> mul_eq r", "using D_eq(2)[OF t i]"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  (r|?\\<sigma>'| -s r \\<down>l ?\\<tau>, r|?\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>l labels \\<tau>, r|labels \\<sigma>|)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|labels \\<sigma>'| -s r \\<down>l labels \\<tau>, r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"dl r (labels \\<tau>) \\<subseteq> ds r (ds r {\\<beta>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s (r \\<down>s {\\<beta>})", "using assms(4)"], ["proof (prove)\nusing this:\n  set (labels \\<tau>) \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s (r \\<down>s {\\<beta>})", "unfolding dl_def ds_def"], ["proof (prove)\nusing this:\n  set (labels \\<tau>)\n  \\<subseteq> {y. \\<exists>x\\<in>{\\<beta>}. (y, x) \\<in> r}\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>set (labels \\<tau>). (y, x) \\<in> r}\n    \\<subseteq> {y. \\<exists>x\\<in>{y. \\<exists>x\\<in>{\\<beta>}.\n    (y, x) \\<in> r}.\n                       (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s (r \\<down>s {\\<beta>})\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "hence \"dl r (labels \\<tau>) \\<subseteq> ds r {\\<beta>}\""], ["proof (prove)\nusing this:\n  r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s (r \\<down>s {\\<beta>})\n\ngoal (1 subgoal):\n 1. r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s {\\<beta>}", "using ds_ds_subseteq_ds[OF t]"], ["proof (prove)\nusing this:\n  r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s (r \\<down>s {\\<beta>})\n  r \\<down>s (r \\<down>s ?S) \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s {\\<beta>}", "by auto"], ["proof (state)\nthis:\n  r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "hence x:\"(r|labels \\<sigma>'| -s ds r {\\<beta>},r|labels \\<sigma>| ) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, r|labels \\<sigma>|)\n    \\<in> mul_eq r", "using x"], ["proof (prove)\nusing this:\n  r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s {\\<beta>}\n  (r|labels \\<sigma>'| -s r \\<down>l labels \\<tau>, r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, r|labels \\<sigma>|)\n    \\<in> mul_eq r", "unfolding diff_def"], ["proof (prove)\nusing this:\n  r \\<down>l labels \\<tau> \\<subseteq> r \\<down>s {\\<beta>}\n  ({#x \\<in># r|labels \\<sigma>'|. x \\<notin> r \\<down>l labels \\<tau>#},\n   r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. ({#x \\<in># r|labels \\<sigma>'|. x \\<notin> r \\<down>s {\\<beta>}#},\n     r|labels \\<sigma>|)\n    \\<in> mul_eq r", "by (metis diff_def lemma2_6_8 mul_eq_trans t)"], ["proof (state)\nthis:\n  (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "hence x:\"(r|labels \\<sigma>'| -s dl r [\\<beta>],{#\\<alpha>#}) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>l [\\<beta>], {#\\<alpha>#})\n    \\<in> mul_eq r", "using labels_multiset[OF assms(5,6)]"], ["proof (prove)\nusing this:\n  (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (?r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>l [\\<beta>], {#\\<alpha>#})\n    \\<in> mul_eq r", "unfolding dl_def"], ["proof (prove)\nusing this:\n  (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (?r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>s set [\\<beta>], {#\\<alpha>#})\n    \\<in> mul_eq r", "using mul_eq_trans[OF t x]"], ["proof (prove)\nusing this:\n  (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (?r|labels \\<sigma>|, {#\\<alpha>#}) \\<in> mul_eq ?r\n  (r|labels \\<sigma>|, ?P) \\<in> mul_eq r \\<Longrightarrow>\n  (r|labels \\<sigma>'| -s r \\<down>s {\\<beta>}, ?P) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|labels \\<sigma>'| -s r \\<down>s set [\\<beta>], {#\\<alpha>#})\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|labels \\<sigma>'| -s r \\<down>l [\\<beta>], {#\\<alpha>#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "obtain \\<sigma>1' \\<sigma>2' \\<sigma>3' where l:\"labels \\<sigma>' = \\<sigma>1'@(\\<sigma>2'@\\<sigma>3')\" and \\<sigma>1'l: \"set \\<sigma>1' \\<subseteq> ds r {\\<beta>}\" and\n   \\<sigma>2'l: \"length \\<sigma>2' \\<le> 1 \\<and> set \\<sigma>2' \\<subseteq> {\\<alpha>}\" and \\<sigma>3'l: \"set \\<sigma>3' \\<subseteq> ds r {\\<alpha>,\\<beta>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1' \\<sigma>2' \\<sigma>3'.\n        \\<lbrakk>labels \\<sigma>' = \\<sigma>1' @ \\<sigma>2' @ \\<sigma>3';\n         set \\<sigma>1' \\<subseteq> r \\<down>s {\\<beta>};\n         length \\<sigma>2' \\<le> 1 \\<and>\n         set \\<sigma>2' \\<subseteq> {\\<alpha>};\n         set \\<sigma>3' \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using proposition3_4_inv_lists[OF t i x]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     (labels \\<sigma>' = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n      set \\<sigma>1 \\<subseteq> r \\<down>l [\\<beta>] \\<and>\n      length \\<sigma>2 \\<le> 1 \\<and>\n      set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n     set \\<sigma>3 \\<subseteq> r \\<down>l [\\<alpha>, \\<beta>]\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1' \\<sigma>2' \\<sigma>3'.\n        \\<lbrakk>labels \\<sigma>' = \\<sigma>1' @ \\<sigma>2' @ \\<sigma>3';\n         set \\<sigma>1' \\<subseteq> r \\<down>s {\\<beta>};\n         length \\<sigma>2' \\<le> 1 \\<and>\n         set \\<sigma>2' \\<subseteq> {\\<alpha>};\n         set \\<sigma>3' \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding dl_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     (labels \\<sigma>' = \\<sigma>1 @ \\<sigma>2 @ \\<sigma>3 \\<and>\n      set \\<sigma>1 \\<subseteq> r \\<down>s set [\\<beta>] \\<and>\n      length \\<sigma>2 \\<le> 1 \\<and>\n      set \\<sigma>2 \\<subseteq> {\\<alpha>}) \\<and>\n     set \\<sigma>3 \\<subseteq> r \\<down>s set [\\<alpha>, \\<beta>]\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1' \\<sigma>2' \\<sigma>3'.\n        \\<lbrakk>labels \\<sigma>' = \\<sigma>1' @ \\<sigma>2' @ \\<sigma>3';\n         set \\<sigma>1' \\<subseteq> r \\<down>s {\\<beta>};\n         length \\<sigma>2' \\<le> 1 \\<and>\n         set \\<sigma>2' \\<subseteq> {\\<alpha>};\n         set \\<sigma>3' \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  labels \\<sigma>' = \\<sigma>1' @ \\<sigma>2' @ \\<sigma>3'\n  set \\<sigma>1' \\<subseteq> r \\<down>s {\\<beta>}\n  length \\<sigma>2' \\<le> 1 \\<and> set \\<sigma>2' \\<subseteq> {\\<alpha>}\n  set \\<sigma>3' \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "obtain \\<sigma>1 \\<sigma>23 where \\<sigma>1:\"\\<sigma>1 \\<in> seq ars\" and \\<sigma>23: \"\\<sigma>23 \\<in> seq ars\" and lf1: \"lst \\<sigma>1 = fst \\<sigma>23\" and lf1b: \"lst \\<sigma>' = lst \\<sigma>23\" and\n   \\<sigma>'_eq:\"\\<sigma>' = (fst \\<sigma>1,snd \\<sigma>1@snd \\<sigma>23)\" and \\<sigma>1l:\"labels \\<sigma>1 = \\<sigma>1'\" and l2:\"labels \\<sigma>23 = \\<sigma>2'@\\<sigma>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>23.\n        \\<lbrakk>\\<sigma>1 \\<in> seq ars; \\<sigma>23 \\<in> seq ars;\n         lst \\<sigma>1 = fst \\<sigma>23; lst \\<sigma>' = lst \\<sigma>23;\n         \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>23);\n         labels \\<sigma>1 = \\<sigma>1';\n         labels \\<sigma>23 = \\<sigma>2' @ \\<sigma>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using seq_decompose[OF \\<sigma>' l]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst \\<sigma>' \\<and>\n     labels \\<sigma>1 = \\<sigma>1' \\<and>\n     labels \\<sigma>2 = \\<sigma>2' @ \\<sigma>3'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>23.\n        \\<lbrakk>\\<sigma>1 \\<in> seq ars; \\<sigma>23 \\<in> seq ars;\n         lst \\<sigma>1 = fst \\<sigma>23; lst \\<sigma>' = lst \\<sigma>23;\n         \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>23);\n         labels \\<sigma>1 = \\<sigma>1';\n         labels \\<sigma>23 = \\<sigma>2' @ \\<sigma>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>23 \\<in> seq ars\n  lst \\<sigma>1 = fst \\<sigma>23\n  lst \\<sigma>' = lst \\<sigma>23\n  \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>23)\n  labels \\<sigma>1 = \\<sigma>1'\n  labels \\<sigma>23 = \\<sigma>2' @ \\<sigma>3'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "obtain \\<sigma>2 \\<sigma>3 where \\<sigma>2:\"\\<sigma>2 \\<in> seq ars\" and \\<sigma>3:\"\\<sigma>3 \\<in> seq ars\" and lf2:\"lst \\<sigma>2 = fst \\<sigma>3\" and lf2b:\"lst \\<sigma>23 = lst \\<sigma>3\" and\n   \\<sigma>23_eq:\"\\<sigma>23 = (fst \\<sigma>2,snd \\<sigma>2@snd \\<sigma>3)\" and \\<sigma>2l: \"labels \\<sigma>2 = \\<sigma>2'\" and \\<sigma>3l: \"labels \\<sigma>3 = \\<sigma>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>2 \\<sigma>3.\n        \\<lbrakk>\\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n         lst \\<sigma>2 = fst \\<sigma>3; lst \\<sigma>23 = lst \\<sigma>3;\n         \\<sigma>23 = (fst \\<sigma>2, snd \\<sigma>2 @ snd \\<sigma>3);\n         labels \\<sigma>2 = \\<sigma>2';\n         labels \\<sigma>3 = \\<sigma>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using seq_decompose[OF \\<sigma>23 l2]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2.\n     {\\<sigma>1, \\<sigma>2} \\<subseteq> seq ars \\<and>\n     \\<sigma>23 = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = lst \\<sigma>23 \\<and>\n     labels \\<sigma>1 = \\<sigma>2' \\<and> labels \\<sigma>2 = \\<sigma>3'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>2 \\<sigma>3.\n        \\<lbrakk>\\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n         lst \\<sigma>2 = fst \\<sigma>3; lst \\<sigma>23 = lst \\<sigma>3;\n         \\<sigma>23 = (fst \\<sigma>2, snd \\<sigma>2 @ snd \\<sigma>3);\n         labels \\<sigma>2 = \\<sigma>2';\n         labels \\<sigma>3 = \\<sigma>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<sigma>2 \\<in> seq ars\n  \\<sigma>3 \\<in> seq ars\n  lst \\<sigma>2 = fst \\<sigma>3\n  lst \\<sigma>23 = lst \\<sigma>3\n  \\<sigma>23 = (fst \\<sigma>2, snd \\<sigma>2 @ snd \\<sigma>3)\n  labels \\<sigma>2 = \\<sigma>2'\n  labels \\<sigma>3 = \\<sigma>3'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"\\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' =\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)", "using \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<sigma>'_eq \\<sigma>23_eq"], ["proof (prove)\nusing this:\n  \\<sigma>1 \\<in> seq ars\n  \\<sigma>2 \\<in> seq ars\n  \\<sigma>3 \\<in> seq ars\n  \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>23)\n  \\<sigma>23 = (fst \\<sigma>2, snd \\<sigma>2 @ snd \\<sigma>3)\n\ngoal (1 subgoal):\n 1. \\<sigma>' =\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "moreover"], ["proof (state)\nthis:\n  \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"lst \\<sigma>1 = fst \\<sigma>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<sigma>1 = fst \\<sigma>2", "using lf1 \\<sigma>23_eq"], ["proof (prove)\nusing this:\n  lst \\<sigma>1 = fst \\<sigma>23\n  \\<sigma>23 = (fst \\<sigma>2, snd \\<sigma>2 @ snd \\<sigma>3)\n\ngoal (1 subgoal):\n 1. lst \\<sigma>1 = fst \\<sigma>2", "by auto"], ["proof (state)\nthis:\n  lst \\<sigma>1 = fst \\<sigma>2\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "moreover"], ["proof (state)\nthis:\n  lst \\<sigma>1 = fst \\<sigma>2\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"lst \\<sigma>2 = fst \\<sigma>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<sigma>2 = fst \\<sigma>3", "using lf2"], ["proof (prove)\nusing this:\n  lst \\<sigma>2 = fst \\<sigma>3\n\ngoal (1 subgoal):\n 1. lst \\<sigma>2 = fst \\<sigma>3", "by auto"], ["proof (state)\nthis:\n  lst \\<sigma>2 = fst \\<sigma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "moreover"], ["proof (state)\nthis:\n  lst \\<sigma>2 = fst \\<sigma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"lst \\<sigma>3 = lst \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<sigma>3 = lst \\<sigma>'", "using lf1b lf2b"], ["proof (prove)\nusing this:\n  lst \\<sigma>' = lst \\<sigma>23\n  lst \\<sigma>23 = lst \\<sigma>3\n\ngoal (1 subgoal):\n 1. lst \\<sigma>3 = lst \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  lst \\<sigma>3 = lst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "moreover"], ["proof (state)\nthis:\n  lst \\<sigma>3 = lst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"set (labels \\<sigma>1) \\<subseteq> ds r {\\<beta>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>}", "using \\<sigma>1l \\<sigma>1'l"], ["proof (prove)\nusing this:\n  labels \\<sigma>1 = \\<sigma>1'\n  set \\<sigma>1' \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>}", "by auto"], ["proof (state)\nthis:\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "moreover"], ["proof (state)\nthis:\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"length (labels \\<sigma>2) \\<le> 1 \\<and> set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (labels \\<sigma>2) \\<le> 1 \\<and>\n    set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}", "using \\<sigma>2l \\<sigma>2'l"], ["proof (prove)\nusing this:\n  labels \\<sigma>2 = \\<sigma>2'\n  length \\<sigma>2' \\<le> 1 \\<and> set \\<sigma>2' \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. length (labels \\<sigma>2) \\<le> 1 \\<and>\n    set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}", "by auto"], ["proof (state)\nthis:\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "moreover"], ["proof (state)\nthis:\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "have \"set (labels \\<sigma>3) \\<subseteq> ds r {\\<alpha>, \\<beta>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels \\<sigma>3) \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "using \\<sigma>3l \\<sigma>3'l"], ["proof (prove)\nusing this:\n  labels \\<sigma>3 = \\<sigma>3'\n  set \\<sigma>3' \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels \\<sigma>3) \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "by auto"], ["proof (state)\nthis:\n  set (labels \\<sigma>3) \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = fst \\<sigma>3\n  lst \\<sigma>3 = lst \\<sigma>'\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>}\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}\n  set (labels \\<sigma>3) \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = fst \\<sigma>3\n  lst \\<sigma>3 = lst \\<sigma>'\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>}\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}\n  set (labels \\<sigma>3) \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n        (labels \\<sigma>3)", "unfolding LD_1'_def"], ["proof (prove)\nusing this:\n  \\<sigma>' = (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n  lst \\<sigma>1 = fst \\<sigma>2\n  lst \\<sigma>2 = fst \\<sigma>3\n  lst \\<sigma>3 = lst \\<sigma>'\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>}\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {\\<alpha>}\n  set (labels \\<sigma>3) \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n       \\<sigma>' =\n       (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n       lst \\<sigma>3 = lst \\<sigma>' \\<and>\n       set (labels \\<sigma>1) \\<subseteq> r \\<down>s {\\<beta>} \\<and>\n       length (labels \\<sigma>2) \\<le> 1 \\<and>\n       set (labels \\<sigma>2) \\<subseteq> {\\<alpha>} \\<and>\n       set (labels \\<sigma>3) \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "by fast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     \\<sigma>' =\n     (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n     lst \\<sigma>3 = lst \\<sigma>' \\<and>\n     LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n      (labels \\<sigma>3)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     \\<sigma>' =\n     (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n     lst \\<sigma>3 = lst \\<sigma>' \\<and>\n     LD_1' r \\<beta> \\<alpha> (labels \\<sigma>1) (labels \\<sigma>2)\n      (labels \\<sigma>3)\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "show \"set (labels \\<tau>') \\<subseteq> ds r ({\\<alpha>,\\<beta>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "have x:\"(r|labels \\<tau>'| -s dl r (labels \\<sigma>),r|labels \\<tau>| ) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|labels \\<tau>'| -s r \\<down>l labels \\<sigma>, r|labels \\<tau>|)\n    \\<in> mul_eq r", "using DD D_eq[OF t i]"], ["proof (prove)\nusing this:\n  DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  (r|?\\<tau>'| -s r \\<down>l ?\\<sigma>, r|?\\<tau>|) \\<in> mul_eq r\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  (r|?\\<sigma>'| -s r \\<down>l ?\\<tau>, r|?\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|labels \\<tau>'| -s r \\<down>l labels \\<sigma>, r|labels \\<tau>|)\n    \\<in> mul_eq r", "unfolding DD_def D2_def"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  (r|?\\<tau>'| -s r \\<down>l ?\\<sigma>, r|?\\<tau>|) \\<in> mul_eq r\n  D r ?\\<tau> ?\\<sigma> ?\\<sigma>' ?\\<tau>' \\<Longrightarrow>\n  (r|?\\<sigma>'| -s r \\<down>l ?\\<tau>, r|?\\<sigma>|) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (r|labels \\<tau>'| -s r \\<down>l labels \\<sigma>, r|labels \\<tau>|)\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|labels \\<tau>'| -s r \\<down>l labels \\<sigma>, r|labels \\<tau>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "have y:\"set_mset r|labels \\<tau>| \\<subseteq> ds r {\\<beta>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset r|labels \\<tau>| \\<subseteq> r \\<down>s {\\<beta>}", "using leq_imp_subseteq[OF lexmax_le_multiset[OF t]] assms(4)"], ["proof (prove)\nusing this:\n  set_mset r|?\\<sigma>1| \\<subseteq> set_mset (mset ?\\<sigma>1)\n  set (labels \\<tau>) \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set_mset r|labels \\<tau>| \\<subseteq> r \\<down>s {\\<beta>}", "by auto"], ["proof (state)\nthis:\n  set_mset r|labels \\<tau>| \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "hence  \"set_mset (r|labels \\<tau>'|-s ds r (set (labels \\<sigma>))) \\<subseteq> ds r {\\<beta>}\""], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>| \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set_mset (r|labels \\<tau>'| -s r \\<down>s set (labels \\<sigma>))\n    \\<subseteq> r \\<down>s {\\<beta>}", "using mul_eq_and_ds_imp_ds[OF t x y]"], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>| \\<subseteq> r \\<down>s {\\<beta>}\n  set_mset (r|labels \\<tau>'| -s r \\<down>l labels \\<sigma>)\n  \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set_mset (r|labels \\<tau>'| -s r \\<down>s set (labels \\<sigma>))\n    \\<subseteq> r \\<down>s {\\<beta>}", "unfolding dl_def"], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>| \\<subseteq> r \\<down>s {\\<beta>}\n  set_mset (r|labels \\<tau>'| -s r \\<down>s set (labels \\<sigma>))\n  \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set_mset (r|labels \\<tau>'| -s r \\<down>s set (labels \\<sigma>))\n    \\<subseteq> r \\<down>s {\\<beta>}", "by auto"], ["proof (state)\nthis:\n  set_mset (r|labels \\<tau>'| -s r \\<down>s set (labels \\<sigma>))\n  \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "hence \"set_mset (r|labels \\<tau>'| ) \\<subseteq> ds r {\\<beta>} \\<union> ds r (set (labels \\<sigma>))\""], ["proof (prove)\nusing this:\n  set_mset (r|labels \\<tau>'| -s r \\<down>s set (labels \\<sigma>))\n  \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set_mset r|labels \\<tau>'|\n    \\<subseteq> r \\<down>s {\\<beta>} \\<union>\n                r \\<down>s set (labels \\<sigma>)", "unfolding diff_def"], ["proof (prove)\nusing this:\n  set_mset\n   {#x \\<in># r|labels \\<tau>'|.\n    x \\<notin> r \\<down>s set (labels \\<sigma>)#}\n  \\<subseteq> r \\<down>s {\\<beta>}\n\ngoal (1 subgoal):\n 1. set_mset r|labels \\<tau>'|\n    \\<subseteq> r \\<down>s {\\<beta>} \\<union>\n                r \\<down>s set (labels \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  set_mset r|labels \\<tau>'|\n  \\<subseteq> r \\<down>s {\\<beta>} \\<union> r \\<down>s set (labels \\<sigma>)\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "hence \"set_mset (r|labels \\<tau>'| ) \\<subseteq> ds r {\\<alpha>,\\<beta>}\""], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>'|\n  \\<subseteq> r \\<down>s {\\<beta>} \\<union> r \\<down>s set (labels \\<sigma>)\n\ngoal (1 subgoal):\n 1. set_mset r|labels \\<tau>'| \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "using assms(6)"], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>'|\n  \\<subseteq> r \\<down>s {\\<beta>} \\<union> r \\<down>s set (labels \\<sigma>)\n  set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. set_mset r|labels \\<tau>'| \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "unfolding ds_def"], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>'|\n  \\<subseteq> {y. \\<exists>x\\<in>{\\<beta>}. (y, x) \\<in> r} \\<union>\n              {y. \\<exists>x\\<in>set (labels \\<sigma>). (y, x) \\<in> r}\n  set (labels \\<sigma>) \\<subseteq> {\\<alpha>}\n\ngoal (1 subgoal):\n 1. set_mset r|labels \\<tau>'|\n    \\<subseteq> {y. \\<exists>x\\<in>{\\<alpha>, \\<beta>}. (y, x) \\<in> r}", "by auto"], ["proof (state)\nthis:\n  set_mset r|labels \\<tau>'| \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "thus ?thesis"], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>'| \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "using lexmax_set[OF t]"], ["proof (prove)\nusing this:\n  set_mset r|labels \\<tau>'| \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n  set_mset r|?\\<sigma>| \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set ?\\<sigma> \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}", "by auto"], ["proof (state)\nthis:\n  set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (labels \\<tau>') \\<subseteq> r \\<down>s {\\<alpha>, \\<beta>}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma local_decreasing_extended_imp_decreasing:\nassumes \"LT1 ars r (s,[\\<beta>_step]) (s,[\\<alpha>_step]) \\<gamma>1 \\<gamma>2 \\<gamma>3\"\nand t: \"trans r\" and i: \"irrefl r\"\nand IH:\"!!y . ((y,((s,[\\<beta>_step]@\\<upsilon>_step),(s,[\\<alpha>_step]@\\<rho>_step))) \\<in> pex r \\<Longrightarrow> peak ars y \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst y, snd y, \\<sigma>', \\<tau>'))\" (is \"!!y. ((y,?P) \\<in> _ \\<Longrightarrow> _ \\<Longrightarrow> _)\")\nshows \"\\<exists> \\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''. ({\\<sigma>1,\\<sigma>2,\\<sigma>3',\\<gamma>1'''} \\<subseteq> seq ars \\<and>\n  set (labels \\<sigma>1) \\<subseteq> ds r {fst \\<beta>_step} \\<and> length (labels \\<sigma>2) \\<le> 1 \\<and> set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and> set (labels \\<sigma>3') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}) \\<and>\n  set (labels \\<gamma>1''') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and> lst \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3' \\<and> lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "from assms labels_multiset"], ["proof (chain)\npicking this:\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n  trans r\n  irrefl r\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n  \\<lbrakk>length (labels ?\\<sigma>) \\<le> 1;\n   set (labels ?\\<sigma>) \\<subseteq> {?\\<alpha>}\\<rbrakk>\n  \\<Longrightarrow> (?r|labels ?\\<sigma>|, {#?\\<alpha>#}) \\<in> mul_eq ?r", "have s2:\"(r|labels \\<gamma>2|,{#fst \\<alpha>_step#}) \\<in> mul_eq r\""], ["proof (prove)\nusing this:\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n  trans r\n  irrefl r\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n  \\<lbrakk>length (labels ?\\<sigma>) \\<le> 1;\n   set (labels ?\\<sigma>) \\<subseteq> {?\\<alpha>}\\<rbrakk>\n  \\<Longrightarrow> (?r|labels ?\\<sigma>|, {#?\\<alpha>#}) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. (r|labels \\<gamma>2|, {#fst \\<alpha>_step#}) \\<in> mul_eq r", "unfolding LT1_def local_triangle1_def LD_1'_def labels_def"], ["proof (prove)\nusing this:\n  (local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]) \\<and>\n   \\<gamma>2 \\<in> seq ars \\<and>\n   {\\<gamma>1, \\<gamma>3} \\<subseteq> conv ars \\<and>\n   lst (s, [\\<beta>_step]) = fst \\<gamma>1 \\<and>\n   lst_conv \\<gamma>1 = fst \\<gamma>2 \\<and>\n   lst \\<gamma>2 = fst \\<gamma>3) \\<and>\n  set (labels_conv \\<gamma>1)\n  \\<subseteq> r \\<down>s {hd (map fst (snd (s, [\\<beta>_step])))} \\<and>\n  length (map fst (snd \\<gamma>2)) \\<le> 1 \\<and>\n  set (map fst (snd \\<gamma>2))\n  \\<subseteq> {hd (map fst (snd (s, [\\<alpha>_step])))} \\<and>\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s\n              {hd (map fst (snd (s, [\\<alpha>_step]))),\n               hd (map fst (snd (s, [\\<beta>_step])))}\n  trans r\n  irrefl r\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n  \\<lbrakk>length (map fst (snd ?\\<sigma>)) \\<le> 1;\n   set (map fst (snd ?\\<sigma>)) \\<subseteq> {?\\<alpha>}\\<rbrakk>\n  \\<Longrightarrow> (?r|map fst (snd ?\\<sigma>)|, {#?\\<alpha>#})\n                    \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. (r|map fst (snd \\<gamma>2)|, {#fst \\<alpha>_step#}) \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  (r|labels \\<gamma>2|, {#fst \\<alpha>_step#}) \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "from assms"], ["proof (chain)\npicking this:\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n  trans r\n  irrefl r\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')", "have \\<gamma>1: \"\\<gamma>1 \\<in> conv ars\" and \\<gamma>3: \"\\<gamma>3 \\<in> conv ars\" and \\<gamma>2_l: \"length (labels \\<gamma>2) \\<le> 1\"\n  and \\<gamma>2_s: \"set (labels \\<gamma>2) \\<subseteq> {fst \\<alpha>_step}\" and \\<gamma>3_s: \"set (labels_conv \\<gamma>3) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\"\n  and \"set (labels_conv \\<gamma>1) \\<subseteq> ds r {fst \\<beta>_step}\""], ["proof (prove)\nusing this:\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n  trans r\n  irrefl r\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<gamma>1 \\<in> conv ars &&&\n     \\<gamma>3 \\<in> conv ars &&& length (labels \\<gamma>2) \\<le> 1) &&&\n    set (labels \\<gamma>2) \\<subseteq> {fst \\<alpha>_step} &&&\n    set (labels_conv \\<gamma>3)\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} &&&\n    set (labels_conv \\<gamma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step}", "unfolding LT_def LD'_def LT1_def LD_1'_def labels_def local_triangle1_def"], ["proof (prove)\nusing this:\n  (local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]) \\<and>\n   \\<gamma>2 \\<in> seq ars \\<and>\n   {\\<gamma>1, \\<gamma>3} \\<subseteq> conv ars \\<and>\n   lst (s, [\\<beta>_step]) = fst \\<gamma>1 \\<and>\n   lst_conv \\<gamma>1 = fst \\<gamma>2 \\<and>\n   lst \\<gamma>2 = fst \\<gamma>3) \\<and>\n  set (labels_conv \\<gamma>1)\n  \\<subseteq> r \\<down>s {hd (map fst (snd (s, [\\<beta>_step])))} \\<and>\n  length (map fst (snd \\<gamma>2)) \\<le> 1 \\<and>\n  set (map fst (snd \\<gamma>2))\n  \\<subseteq> {hd (map fst (snd (s, [\\<alpha>_step])))} \\<and>\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s\n              {hd (map fst (snd (s, [\\<alpha>_step]))),\n               hd (map fst (snd (s, [\\<beta>_step])))}\n  trans r\n  irrefl r\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<gamma>1 \\<in> conv ars &&&\n     \\<gamma>3 \\<in> conv ars &&&\n     length (map fst (snd \\<gamma>2)) \\<le> 1) &&&\n    set (map fst (snd \\<gamma>2)) \\<subseteq> {fst \\<alpha>_step} &&&\n    set (labels_conv \\<gamma>3)\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} &&&\n    set (labels_conv \\<gamma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  \\<gamma>1 \\<in> conv ars\n  \\<gamma>3 \\<in> conv ars\n  length (labels \\<gamma>2) \\<le> 1\n  set (labels \\<gamma>2) \\<subseteq> {fst \\<alpha>_step}\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels_conv \\<gamma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "hence \"set_mset (measure_conv r \\<gamma>1) \\<subseteq> ds r {fst \\<beta>_step}\""], ["proof (prove)\nusing this:\n  \\<gamma>1 \\<in> conv ars\n  \\<gamma>3 \\<in> conv ars\n  length (labels \\<gamma>2) \\<le> 1\n  set (labels \\<gamma>2) \\<subseteq> {fst \\<alpha>_step}\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels_conv \\<gamma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set_mset (measure_conv r \\<gamma>1)\n    \\<subseteq> r \\<down>s {fst \\<beta>_step}", "unfolding measure_conv_def"], ["proof (prove)\nusing this:\n  \\<gamma>1 \\<in> conv ars\n  \\<gamma>3 \\<in> conv ars\n  length (labels \\<gamma>2) \\<le> 1\n  set (labels \\<gamma>2) \\<subseteq> {fst \\<alpha>_step}\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels_conv \\<gamma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set_mset r|labels_conv \\<gamma>1|\n    \\<subseteq> r \\<down>s {fst \\<beta>_step}", "using lexmax_le_multiset[OF t]"], ["proof (prove)\nusing this:\n  \\<gamma>1 \\<in> conv ars\n  \\<gamma>3 \\<in> conv ars\n  length (labels \\<gamma>2) \\<le> 1\n  set (labels \\<gamma>2) \\<subseteq> {fst \\<alpha>_step}\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels_conv \\<gamma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  r|?\\<sigma>| \\<subseteq># mset ?\\<sigma>\n\ngoal (1 subgoal):\n 1. set_mset r|labels_conv \\<gamma>1|\n    \\<subseteq> r \\<down>s {fst \\<beta>_step}", "by (metis set_mset_mset submultiset_implies_subset subset_trans)"], ["proof (state)\nthis:\n  set_mset (measure_conv r \\<gamma>1)\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "hence \\<gamma>1_s: \"set_mset (measure_conv r \\<gamma>1) \\<subseteq> dm r {#fst \\<beta>_step#}\""], ["proof (prove)\nusing this:\n  set_mset (measure_conv r \\<gamma>1)\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set_mset (measure_conv r \\<gamma>1)\n    \\<subseteq> r \\<down>m {#fst \\<beta>_step#}", "unfolding dm_def"], ["proof (prove)\nusing this:\n  set_mset (measure_conv r \\<gamma>1)\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set_mset (measure_conv r \\<gamma>1)\n    \\<subseteq> r \\<down>s set_mset {#fst \\<beta>_step#}", "by auto"], ["proof (state)\nthis:\n  set_mset (measure_conv r \\<gamma>1)\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have x: \"({#fst \\<beta>_step#}, {#fst \\<beta>_step, fst \\<alpha>_step#}) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#fst \\<beta>_step#}, {#fst \\<beta>_step, fst \\<alpha>_step#})\n    \\<in> mul_eq r", "using mul_eq_add_right[of \"{#_#}\"]"], ["proof (prove)\nusing this:\n  ({#?uu5#}, {#?uu5#} + ?P) \\<in> mul_eq ?r\n\ngoal (1 subgoal):\n 1. ({#fst \\<beta>_step#}, {#fst \\<beta>_step, fst \\<alpha>_step#})\n    \\<in> mul_eq r", "by auto"], ["proof (state)\nthis:\n  ({#fst \\<beta>_step#}, {#fst \\<beta>_step, fst \\<alpha>_step#})\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "obtain \\<gamma>1' \\<gamma>1'' where \\<gamma>1': \"\\<gamma>1' \\<in> seq ars\" and \\<gamma>1'': \"\\<gamma>1'' \\<in> seq ars\" and eqx:\"fst \\<gamma>1' = fst \\<gamma>1\"\n  and  \"fst \\<gamma>1'' = lst_conv \\<gamma>1\" and \\<gamma>1'_eq: \"lst \\<gamma>1' = lst \\<gamma>1''\"  and m2: \"set_mset (measure r (\\<gamma>1',\\<gamma>1'')) \\<subseteq> dm r {#fst \\<beta>_step#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>1' \\<gamma>1''.\n        \\<lbrakk>\\<gamma>1' \\<in> seq ars; \\<gamma>1'' \\<in> seq ars;\n         fst \\<gamma>1' = fst \\<gamma>1;\n         fst \\<gamma>1'' = lst_conv \\<gamma>1;\n         lst \\<gamma>1' = lst \\<gamma>1'';\n         set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n         \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using conv_imp_valley[OF t IH \\<gamma>1 \\<gamma>1_s x]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (?s, [\\<beta>_step] @ ?\\<rho>_step), ?s,\n                        [\\<alpha>_step] @ ?\\<upsilon>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<beta>_step] @ \\<upsilon>_step),\n                                 s, [\\<alpha>_step] @ \\<rho>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (?s, [\\<beta>_step] @ ?\\<rho>_step), ?s,\n                [\\<alpha>_step] @ ?\\<upsilon>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                       fst \\<sigma> = fst \\<gamma>1 \\<and>\n                       fst \\<tau> = lst_conv \\<gamma>1 \\<and>\n                       lst \\<sigma> = lst \\<tau> \\<and>\n                       set_mset\n                        (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n                       \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>1' \\<gamma>1''.\n        \\<lbrakk>\\<gamma>1' \\<in> seq ars; \\<gamma>1'' \\<in> seq ars;\n         fst \\<gamma>1' = fst \\<gamma>1;\n         fst \\<gamma>1'' = lst_conv \\<gamma>1;\n         lst \\<gamma>1' = lst \\<gamma>1'';\n         set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n         \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b aa ba.\n                \\<lbrakk>(fst \\<gamma>1, b) \\<in> seq ars;\n                 (lst_conv \\<gamma>1, ba) \\<in> seq ars; a = fst \\<gamma>1;\n                 aa = lst_conv \\<gamma>1;\n                 lst (fst \\<gamma>1, b) = lst (lst_conv \\<gamma>1, ba);\n                 set_mset\n                  (Decreasing_Diagrams.measure r\n                    ((fst \\<gamma>1, b), lst_conv \\<gamma>1, ba))\n                 \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>sa \\<rho>_stepa \\<upsilon>_stepa.\n        (\\<And>a b aa ba.\n            \\<lbrakk>(((a, b), aa, ba), (sa, \\<beta>_step # \\<rho>_stepa),\n                      sa, \\<alpha>_step # \\<upsilon>_stepa)\n                     \\<in> pex r;\n             peak ars ((a, b), aa, ba)\\<rbrakk>\n            \\<Longrightarrow> (((a, b), aa, ba),\n                               (s, \\<beta>_step # \\<upsilon>_step), s,\n                               \\<alpha>_step # \\<rho>_step)\n                              \\<in> pex r) \\<Longrightarrow>\n        \\<exists>a b.\n           (a, b) \\<in> seq ars \\<and>\n           (\\<exists>ba.\n               (lst_conv \\<gamma>1, ba) \\<in> seq ars \\<and>\n               a = fst \\<gamma>1 \\<and>\n               lst (a, b) = lst (lst_conv \\<gamma>1, ba) \\<and>\n               set_mset\n                (Decreasing_Diagrams.measure r\n                  ((a, b), lst_conv \\<gamma>1, ba))\n               \\<subseteq> r \\<down>m {#fst \\<beta>_step#})\\<rbrakk>\n    \\<Longrightarrow> thesis", "by fast"], ["proof (state)\nthis:\n  \\<gamma>1' \\<in> seq ars\n  \\<gamma>1'' \\<in> seq ars\n  fst \\<gamma>1' = fst \\<gamma>1\n  fst \\<gamma>1'' = lst_conv \\<gamma>1\n  lst \\<gamma>1' = lst \\<gamma>1''\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "hence Q:\"peak ars (\\<gamma>1'',\\<gamma>2)\" (is \"peak ars ?Q\")"], ["proof (prove)\nusing this:\n  \\<gamma>1' \\<in> seq ars\n  \\<gamma>1'' \\<in> seq ars\n  fst \\<gamma>1' = fst \\<gamma>1\n  fst \\<gamma>1'' = lst_conv \\<gamma>1\n  lst \\<gamma>1' = lst \\<gamma>1''\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. peak ars (\\<gamma>1'', \\<gamma>2)", "unfolding peak_def"], ["proof (prove)\nusing this:\n  \\<gamma>1' \\<in> seq ars\n  \\<gamma>1'' \\<in> seq ars\n  fst \\<gamma>1' = fst \\<gamma>1\n  fst \\<gamma>1'' = lst_conv \\<gamma>1\n  lst \\<gamma>1' = lst \\<gamma>1''\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) = (\\<gamma>1'', \\<gamma>2)\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<gamma>1' \\<in> seq ars\n  \\<gamma>1'' \\<in> seq ars\n  fst \\<gamma>1' = fst \\<gamma>1\n  fst \\<gamma>1'' = lst_conv \\<gamma>1\n  lst \\<gamma>1' = lst \\<gamma>1''\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) = (\\<gamma>1'', \\<gamma>2)\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "unfolding LT_def LD'_def LT1_def local_triangle1_def"], ["proof (prove)\nusing this:\n  \\<gamma>1' \\<in> seq ars\n  \\<gamma>1'' \\<in> seq ars\n  fst \\<gamma>1' = fst \\<gamma>1\n  fst \\<gamma>1'' = lst_conv \\<gamma>1\n  lst \\<gamma>1' = lst \\<gamma>1''\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n  (local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]) \\<and>\n   \\<gamma>2 \\<in> seq ars \\<and>\n   {\\<gamma>1, \\<gamma>3} \\<subseteq> conv ars \\<and>\n   lst (s, [\\<beta>_step]) = fst \\<gamma>1 \\<and>\n   lst_conv \\<gamma>1 = fst \\<gamma>2 \\<and>\n   lst \\<gamma>2 = fst \\<gamma>3) \\<and>\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels_conv \\<gamma>1)\n   (labels \\<gamma>2) (labels_conv \\<gamma>3)\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) = (\\<gamma>1'', \\<gamma>2)\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  peak ars (\\<gamma>1'', \\<gamma>2)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "from m2"], ["proof (chain)\npicking this:\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}", "have  \\<gamma>1's: \"set (labels \\<gamma>1') \\<subseteq> ds r {fst \\<beta>_step}\" and \\<gamma>1''s: \"set (labels \\<gamma>1'') \\<subseteq> ds r {fst \\<beta>_step}\""], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. set (labels \\<gamma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step} &&&\n    set (labels \\<gamma>1'') \\<subseteq> r \\<down>s {fst \\<beta>_step}", "unfolding measure_def dm_def"], ["proof (prove)\nusing this:\n  set_mset\n   (r|labels (fst (\\<gamma>1', \\<gamma>1''))| +\n    r|labels (snd (\\<gamma>1', \\<gamma>1''))|)\n  \\<subseteq> r \\<down>s set_mset {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. set (labels \\<gamma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step} &&&\n    set (labels \\<gamma>1'') \\<subseteq> r \\<down>s {fst \\<beta>_step}", "using lexmax_set[OF t]"], ["proof (prove)\nusing this:\n  set_mset\n   (r|labels (fst (\\<gamma>1', \\<gamma>1''))| +\n    r|labels (snd (\\<gamma>1', \\<gamma>1''))|)\n  \\<subseteq> r \\<down>s set_mset {#fst \\<beta>_step#}\n  set_mset r|?\\<sigma>| \\<subseteq> r \\<down>s ?S \\<Longrightarrow>\n  set ?\\<sigma> \\<subseteq> r \\<down>s ?S\n\ngoal (1 subgoal):\n 1. set (labels \\<gamma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step} &&&\n    set (labels \\<gamma>1'') \\<subseteq> r \\<down>s {fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  set (labels \\<gamma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  set (labels \\<gamma>1'') \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "from m2"], ["proof (chain)\npicking this:\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}", "have \\<tau>1'_m:\"(r|labels \\<gamma>1''|,{#fst \\<beta>_step#}) \\<in> mul r\""], ["proof (prove)\nusing this:\n  set_mset (Decreasing_Diagrams.measure r (\\<gamma>1', \\<gamma>1''))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. (r|labels \\<gamma>1''|, {#fst \\<beta>_step#}) \\<in> mul r", "unfolding measure_def mul_def"], ["proof (prove)\nusing this:\n  set_mset\n   (r|labels (fst (\\<gamma>1', \\<gamma>1''))| +\n    r|labels (snd (\\<gamma>1', \\<gamma>1''))|)\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. (r|labels \\<gamma>1''|, {#fst \\<beta>_step#})\n    \\<in> {(M, N).\n           \\<exists>I J K.\n              M = I + K \\<and>\n              N = I + J \\<and>\n              set_mset K \\<subseteq> r \\<down>m J \\<and> J \\<noteq> {#}}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_mset r|labels \\<gamma>1'|\n             \\<subseteq> r \\<down>m {#fst \\<beta>_step#};\n     set_mset r|labels \\<gamma>1''|\n     \\<subseteq> r \\<down>m {#fst \\<beta>_step#}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>I J K.\n                         r|labels \\<gamma>1''| = I + K \\<and>\n                         {#fst \\<beta>_step#} = I + J \\<and>\n                         set_mset K \\<subseteq> r \\<down>m J \\<and>\n                         J \\<noteq> {#}", "by (metis dm_def empty_neutral(1) set_mset_single add_mset_not_empty)"], ["proof (state)\nthis:\n  (r|labels \\<gamma>1''|, {#fst \\<beta>_step#}) \\<in> mul r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "hence y:\"(r|labels \\<gamma>1''| + r|labels \\<gamma>2|,{#fst \\<alpha>_step#}+{#fst \\<beta>_step#}) \\<in> mul r\""], ["proof (prove)\nusing this:\n  (r|labels \\<gamma>1''|, {#fst \\<beta>_step#}) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n     {#fst \\<alpha>_step#} + {#fst \\<beta>_step#})\n    \\<in> mul r", "using mul_add_mul_eq_imp_mul[OF \\<tau>1'_m s2] union_commute"], ["proof (prove)\nusing this:\n  (r|labels \\<gamma>1''|, {#fst \\<beta>_step#}) \\<in> mul r\n  (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n   {#fst \\<beta>_step#} + {#fst \\<alpha>_step#})\n  \\<in> mul r\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n     {#fst \\<alpha>_step#} + {#fst \\<beta>_step#})\n    \\<in> mul r", "by metis"], ["proof (state)\nthis:\n  (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n   {#fst \\<alpha>_step#} + {#fst \\<beta>_step#})\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \"(r|labels \\<gamma>1''| + r|labels \\<gamma>2|, {#fst \\<alpha>_step,fst \\<beta>_step#} + (r|map fst \\<rho>_step|-sds r {fst \\<alpha>_step} + r|map fst \\<upsilon>_step|-sds r {fst \\<beta>_step})) \\<in> mul r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n     {#fst \\<alpha>_step, fst \\<beta>_step#} +\n     (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n      r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step}))\n    \\<in> mul r", "using mul_add_right[OF y]"], ["proof (prove)\nusing this:\n  (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n   {#fst \\<alpha>_step#} + {#fst \\<beta>_step#} + ?P)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n     {#fst \\<alpha>_step, fst \\<beta>_step#} +\n     (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n      r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step}))\n    \\<in> mul r", "by (auto simp: add_mset_commute)"], ["proof (state)\nthis:\n  (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n   {#fst \\<alpha>_step, fst \\<beta>_step#} +\n   (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n    r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step}))\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "hence q:\"(?Q,?P) \\<in> pex r\""], ["proof (prove)\nusing this:\n  (r|labels \\<gamma>1''| + r|labels \\<gamma>2|,\n   {#fst \\<alpha>_step, fst \\<beta>_step#} +\n   (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n    r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step}))\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. ((\\<gamma>1'', \\<gamma>2), (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n     [\\<alpha>_step] @ \\<rho>_step)\n    \\<in> pex r", "unfolding pex_def measure_def labels_def"], ["proof (prove)\nusing this:\n  (r|map fst (snd \\<gamma>1'')| + r|map fst (snd \\<gamma>2)|,\n   {#fst \\<alpha>_step, fst \\<beta>_step#} +\n   (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n    r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step}))\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. ((\\<gamma>1'', \\<gamma>2), (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n     [\\<alpha>_step] @ \\<rho>_step)\n    \\<in> {(P1, P2).\n           (r|map fst (snd (fst P1))| + r|map fst (snd (snd P1))|,\n            r|map fst (snd (fst P2))| + r|map fst (snd (snd P2))|)\n           \\<in> mul r}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|map fst (snd \\<gamma>1'')| + r|map fst (snd \\<gamma>2)|,\n     add_mset (fst \\<alpha>_step)\n      (add_mset (fst \\<beta>_step)\n        (r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step} +\n         r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step})))\n    \\<in> mul r \\<Longrightarrow>\n    (r|map fst (snd \\<gamma>1'')| + r|map fst (snd \\<gamma>2)|,\n     add_mset (fst \\<alpha>_step)\n      (add_mset (fst \\<beta>_step)\n        (r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step} +\n         r|map fst \\<rho>_step| -s r \\<down>s {fst \\<alpha>_step})))\n    \\<in> mul r", "by (metis union_assoc union_commute union_lcomm)"], ["proof (state)\nthis:\n  ((\\<gamma>1'', \\<gamma>2), (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n   [\\<alpha>_step] @ \\<rho>_step)\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "obtain \\<gamma>1''' \\<sigma>' where DD:\"DD ars r (\\<gamma>1'',\\<gamma>2,\\<sigma>',\\<gamma>1''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<gamma>1'''.\n        DD ars r\n         (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using IH[OF q Q]"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      (fst (\\<gamma>1'', \\<gamma>2), snd (\\<gamma>1'', \\<gamma>2),\n       \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<gamma>1'''.\n        DD ars r\n         (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  DD ars r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "from DD"], ["proof (chain)\npicking this:\n  DD ars r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')", "have \\<sigma>': \"\\<sigma>' \\<in> seq ars\" and \\<gamma>1''':\"\\<gamma>1''' \\<in> seq ars\""], ["proof (prove)\nusing this:\n  DD ars r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> seq ars &&& \\<gamma>1''' \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<in> seq ars &&& \\<gamma>1''' \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' \\<in> seq ars\n  \\<gamma>1''' \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "from decreasing_imp_local_decreasing[OF t i DD \\<gamma>1''s \\<gamma>2_l \\<gamma>2_s]"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     \\<sigma>' =\n     (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n     lst \\<sigma>3 = lst \\<sigma>' \\<and>\n     LD_1' r (fst \\<beta>_step) (fst \\<alpha>_step) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3)\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "obtain \\<sigma>1' \\<sigma>2' \\<sigma>3' where \\<sigma>'_dec: \"\\<sigma>' = (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3')\"\n   and eq1: \"lst \\<sigma>1' = fst \\<sigma>2'\" \"lst \\<sigma>2' = fst \\<sigma>3'\" \"lst \\<sigma>3' = lst \\<sigma>'\"\n   and \\<sigma>1s: \"set (labels \\<sigma>1') \\<subseteq> ds r {fst \\<beta>_step}\" and \\<sigma>2l: \"length (labels \\<sigma>2') \\<le> 1\" and \\<sigma>2's: \"set (labels \\<sigma>2') \\<subseteq> {fst \\<alpha>_step}\" and \"set (labels \\<sigma>3') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\"\n   and \\<sigma>3's: \"set (labels \\<sigma>3') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\" and \\<gamma>1'''s: \"set (labels \\<gamma>1''') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     \\<sigma>' =\n     (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n     lst \\<sigma>3 = lst \\<sigma>' \\<and>\n     LD_1' r (fst \\<beta>_step) (fst \\<alpha>_step) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3)\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1' \\<sigma>2' \\<sigma>3'.\n        \\<lbrakk>\\<sigma>' =\n                 (fst \\<sigma>1',\n                  snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3');\n         lst \\<sigma>1' = fst \\<sigma>2'; lst \\<sigma>2' = fst \\<sigma>3';\n         lst \\<sigma>3' = lst \\<sigma>';\n         set (labels \\<sigma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step};\n         length (labels \\<sigma>2') \\<le> 1;\n         set (labels \\<sigma>2') \\<subseteq> {fst \\<alpha>_step};\n         set (labels \\<sigma>3')\n         \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n         set (labels \\<sigma>3')\n         \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n         set (labels \\<gamma>1''')\n         \\<subseteq> r \\<down>s\n                     {fst \\<alpha>_step, fst \\<beta>_step}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding LD_1'_def"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3.\n     \\<sigma>' =\n     (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = fst \\<sigma>3 \\<and>\n     lst \\<sigma>3 = lst \\<sigma>' \\<and>\n     set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n     length (labels \\<sigma>2) \\<le> 1 \\<and>\n     set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n     set (labels \\<sigma>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1' \\<sigma>2' \\<sigma>3'.\n        \\<lbrakk>\\<sigma>' =\n                 (fst \\<sigma>1',\n                  snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3');\n         lst \\<sigma>1' = fst \\<sigma>2'; lst \\<sigma>2' = fst \\<sigma>3';\n         lst \\<sigma>3' = lst \\<sigma>';\n         set (labels \\<sigma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step};\n         length (labels \\<sigma>2') \\<le> 1;\n         set (labels \\<sigma>2') \\<subseteq> {fst \\<alpha>_step};\n         set (labels \\<sigma>3')\n         \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n         set (labels \\<sigma>3')\n         \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n         set (labels \\<gamma>1''')\n         \\<subseteq> r \\<down>s\n                     {fst \\<alpha>_step, fst \\<beta>_step}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<sigma>' =\n  (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3')\n  lst \\<sigma>1' = fst \\<sigma>2'\n  lst \\<sigma>2' = fst \\<sigma>3'\n  lst \\<sigma>3' = lst \\<sigma>'\n  set (labels \\<sigma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  length (labels \\<sigma>2') \\<le> 1\n  set (labels \\<sigma>2') \\<subseteq> {fst \\<alpha>_step}\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \\<sigma>'_ds: \"(fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3') \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3')\n    \\<in> seq ars", "using \\<sigma>' \\<sigma>'_dec"], ["proof (prove)\nusing this:\n  \\<sigma>' \\<in> seq ars\n  \\<sigma>' =\n  (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3')\n\ngoal (1 subgoal):\n 1. (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3')\n    \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3')\n  \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \\<sigma>1':\"\\<sigma>1' \\<in> seq ars\" and tmp: \"(fst \\<sigma>2',snd \\<sigma>2'@snd \\<sigma>3') \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<in> seq ars &&&\n    (fst \\<sigma>2', snd \\<sigma>2' @ snd \\<sigma>3') \\<in> seq ars", "using seq_chop[OF \\<sigma>'_ds] surjective_pairing eq1"], ["proof (prove)\nusing this:\n  (fst \\<sigma>1', snd \\<sigma>1') \\<in> seq ars\n  (lst (fst \\<sigma>1', snd \\<sigma>1'), snd \\<sigma>2' @ snd \\<sigma>3')\n  \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n  lst \\<sigma>1' = fst \\<sigma>2'\n  lst \\<sigma>2' = fst \\<sigma>3'\n  lst \\<sigma>3' = lst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>1' \\<in> seq ars &&&\n    (fst \\<sigma>2', snd \\<sigma>2' @ snd \\<sigma>3') \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<sigma>1' \\<in> seq ars\n  (fst \\<sigma>2', snd \\<sigma>2' @ snd \\<sigma>3') \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \\<sigma>2': \"\\<sigma>2' \\<in> seq ars\" and \\<sigma>3': \"\\<sigma>3' \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>2' \\<in> seq ars &&& \\<sigma>3' \\<in> seq ars", "using seq_chop[OF tmp]"], ["proof (prove)\nusing this:\n  (fst \\<sigma>2', snd \\<sigma>2') \\<in> seq ars\n  (lst (fst \\<sigma>2', snd \\<sigma>2'), snd \\<sigma>3') \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<sigma>2' \\<in> seq ars &&& \\<sigma>3' \\<in> seq ars", "using surjective_pairing eq1"], ["proof (prove)\nusing this:\n  (fst \\<sigma>2', snd \\<sigma>2') \\<in> seq ars\n  (lst (fst \\<sigma>2', snd \\<sigma>2'), snd \\<sigma>3') \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n  lst \\<sigma>1' = fst \\<sigma>2'\n  lst \\<sigma>2' = fst \\<sigma>3'\n  lst \\<sigma>3' = lst \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>2' \\<in> seq ars &&& \\<sigma>3' \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<sigma>2' \\<in> seq ars\n  \\<sigma>3' \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have eq:\"lst \\<gamma>1' = fst \\<sigma>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<gamma>1' = fst \\<sigma>1'", "using DD \\<gamma>1'_eq"], ["proof (prove)\nusing this:\n  DD ars r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n  lst \\<gamma>1' = lst \\<gamma>1''\n\ngoal (1 subgoal):\n 1. lst \\<gamma>1' = fst \\<sigma>1'", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n  lst \\<gamma>1' = lst \\<gamma>1''\n\ngoal (1 subgoal):\n 1. lst \\<gamma>1' = fst \\<sigma>1'", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lst \\<gamma>1' = fst \\<sigma>'; \\<gamma>2 \\<in> seq ars;\n     \\<gamma>1'' \\<in> seq ars; \\<sigma>' \\<in> seq ars;\n     \\<gamma>1''' \\<in> seq ars; fst \\<gamma>2 = fst \\<gamma>1'';\n     lst \\<gamma>2 = fst \\<gamma>1'''; lst \\<gamma>1'' = fst \\<sigma>';\n     lst \\<sigma>' = lst \\<gamma>1''';\n     D2 r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\\<rbrakk>\n    \\<Longrightarrow> fst \\<sigma>' = fst \\<sigma>1'", "unfolding \\<sigma>'_dec"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lst \\<gamma>1' =\n             fst (fst \\<sigma>1',\n                  snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3');\n     \\<gamma>2 \\<in> seq ars; \\<gamma>1'' \\<in> seq ars;\n     (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3')\n     \\<in> seq ars;\n     \\<gamma>1''' \\<in> seq ars; fst \\<gamma>2 = fst \\<gamma>1'';\n     lst \\<gamma>2 = fst \\<gamma>1''';\n     lst \\<gamma>1'' =\n     fst (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3');\n     lst (fst \\<sigma>1',\n          snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3') =\n     lst \\<gamma>1''';\n     D2 r\n      (\\<gamma>1'', \\<gamma>2,\n       (fst \\<sigma>1', snd \\<sigma>1' @ snd \\<sigma>2' @ snd \\<sigma>3'),\n       \\<gamma>1''')\\<rbrakk>\n    \\<Longrightarrow> fst (fst \\<sigma>1',\n                           snd \\<sigma>1' @\n                           snd \\<sigma>2' @ snd \\<sigma>3') =\n                      fst \\<sigma>1'", "by auto"], ["proof (state)\nthis:\n  lst \\<gamma>1' = fst \\<sigma>1'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \\<sigma>1: \"(fst \\<gamma>1',snd \\<gamma>1'@snd \\<sigma>1') \\<in> seq ars\" (is \"?\\<sigma>1 \\<in> _\") and eq0:\"lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars &&&\n    lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'", "using seq_concat[OF \\<gamma>1' \\<sigma>1' eq]"], ["proof (prove)\nusing this:\n  (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'\n\ngoal (1 subgoal):\n 1. (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars &&&\n    lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'", "by auto"], ["proof (state)\nthis:\n  (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "moreover"], ["proof (state)\nthis:\n  (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \"set (labels ?\\<sigma>1) \\<subseteq> ds r {fst \\<beta>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1'))\n    \\<subseteq> r \\<down>s {fst \\<beta>_step}", "using \\<sigma>1s \\<gamma>1's"], ["proof (prove)\nusing this:\n  set (labels \\<sigma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  set (labels \\<gamma>1') \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set (labels (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1'))\n    \\<subseteq> r \\<down>s {fst \\<beta>_step}", "unfolding labels_def dm_def"], ["proof (prove)\nusing this:\n  set (map fst (snd \\<sigma>1')) \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  set (map fst (snd \\<gamma>1')) \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set (map fst (snd (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')))\n    \\<subseteq> r \\<down>s {fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  set (labels (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1'))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "moreover"], ["proof (state)\nthis:\n  set (labels (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1'))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \"snd \\<beta>_step = fst ?\\<sigma>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<beta>_step = fst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')", "using assms(1)"], ["proof (prove)\nusing this:\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n\ngoal (1 subgoal):\n 1. snd \\<beta>_step = fst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')", "unfolding LT1_def local_triangle1_def lst_def \\<sigma>'_dec eqx"], ["proof (prove)\nusing this:\n  (local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]) \\<and>\n   \\<gamma>2 \\<in> seq ars \\<and>\n   {\\<gamma>1, \\<gamma>3} \\<subseteq> conv ars \\<and>\n   (if snd (s, [\\<beta>_step]) = [] then fst (s, [\\<beta>_step])\n    else snd (last (snd (s, [\\<beta>_step])))) =\n   fst \\<gamma>1 \\<and>\n   lst_conv \\<gamma>1 = fst \\<gamma>2 \\<and>\n   (if snd \\<gamma>2 = [] then fst \\<gamma>2\n    else snd (last (snd \\<gamma>2))) =\n   fst \\<gamma>3) \\<and>\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels_conv \\<gamma>1)\n   (labels \\<gamma>2) (labels_conv \\<gamma>3)\n\ngoal (1 subgoal):\n 1. snd \\<beta>_step = fst (fst \\<gamma>1, snd \\<gamma>1' @ snd \\<sigma>1')", "by auto"], ["proof (state)\nthis:\n  snd \\<beta>_step = fst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "moreover"], ["proof (state)\nthis:\n  snd \\<beta>_step = fst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \"lst ?\\<sigma>1 = fst \\<sigma>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = fst \\<sigma>2'", "unfolding eq0 eq1"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<sigma>2' = fst \\<sigma>2'", "by auto"], ["proof (state)\nthis:\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = fst \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "moreover"], ["proof (state)\nthis:\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = fst \\<sigma>2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \"lst \\<sigma>3' = lst \\<gamma>1'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<sigma>3' = lst \\<gamma>1'''", "unfolding eq1"], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<sigma>' = lst \\<gamma>1'''", "using DD"], ["proof (prove)\nusing this:\n  DD ars r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n\ngoal (1 subgoal):\n 1. lst \\<sigma>' = lst \\<gamma>1'''", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n\ngoal (1 subgoal):\n 1. lst \\<sigma>' = lst \\<gamma>1'''", "by auto"], ["proof (state)\nthis:\n  lst \\<sigma>3' = lst \\<gamma>1'''\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "moreover"], ["proof (state)\nthis:\n  lst \\<sigma>3' = lst \\<gamma>1'''\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "have \"fst \\<gamma>1''' = fst \\<gamma>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<gamma>1''' = fst \\<gamma>3", "using DD assms(1)"], ["proof (prove)\nusing this:\n  DD ars r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n\ngoal (1 subgoal):\n 1. fst \\<gamma>1''' = fst \\<gamma>3", "unfolding DD_def diagram_def LT1_def local_triangle1_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r (\\<gamma>1'', \\<gamma>2, \\<sigma>', \\<gamma>1''')\n  (local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]) \\<and>\n   \\<gamma>2 \\<in> seq ars \\<and>\n   {\\<gamma>1, \\<gamma>3} \\<subseteq> conv ars \\<and>\n   lst (s, [\\<beta>_step]) = fst \\<gamma>1 \\<and>\n   lst_conv \\<gamma>1 = fst \\<gamma>2 \\<and>\n   lst \\<gamma>2 = fst \\<gamma>3) \\<and>\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels_conv \\<gamma>1)\n   (labels \\<gamma>2) (labels_conv \\<gamma>3)\n\ngoal (1 subgoal):\n 1. fst \\<gamma>1''' = fst \\<gamma>3", "by auto"], ["proof (state)\nthis:\n  fst \\<gamma>1''' = fst \\<gamma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "ultimately"], ["proof (chain)\npicking this:\n  (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'\n  set (labels (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1'))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  snd \\<beta>_step = fst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = fst \\<sigma>2'\n  lst \\<sigma>3' = lst \\<gamma>1'''\n  fst \\<gamma>1''' = fst \\<gamma>3", "show ?thesis"], ["proof (prove)\nusing this:\n  (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'\n  set (labels (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1'))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  snd \\<beta>_step = fst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = fst \\<sigma>2'\n  lst \\<sigma>3' = lst \\<gamma>1'''\n  fst \\<gamma>1''' = fst \\<gamma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "using \\<sigma>2' \\<sigma>2's \\<sigma>3' \\<sigma>3's  \\<gamma>1''' \\<gamma>1'''s eq1 surjective_pairing \\<sigma>2l"], ["proof (prove)\nusing this:\n  (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') \\<in> seq ars\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = lst \\<sigma>1'\n  set (labels (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1'))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step}\n  snd \\<beta>_step = fst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1')\n  lst (fst \\<gamma>1', snd \\<gamma>1' @ snd \\<sigma>1') = fst \\<sigma>2'\n  lst \\<sigma>3' = lst \\<gamma>1'''\n  fst \\<gamma>1''' = fst \\<gamma>3\n  \\<sigma>2' \\<in> seq ars\n  set (labels \\<sigma>2') \\<subseteq> {fst \\<alpha>_step}\n  \\<sigma>3' \\<in> seq ars\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  \\<gamma>1''' \\<in> seq ars\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  lst \\<sigma>1' = fst \\<sigma>2'\n  lst \\<sigma>2' = fst \\<sigma>3'\n  lst \\<sigma>3' = lst \\<sigma>'\n  ?t = (fst ?t, snd ?t)\n  length (labels \\<sigma>2') \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n        \\<subseteq> seq ars \\<and>\n        set (labels \\<sigma>1)\n        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n        length (labels \\<sigma>2) \\<le> 1 \\<and>\n        set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n        set (labels \\<sigma>3')\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n       set (labels \\<gamma>1''')\n       \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n       fst \\<gamma>1''' = fst \\<gamma>3", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n     ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n      \\<subseteq> seq ars \\<and>\n      set (labels \\<sigma>1)\n      \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n      length (labels \\<sigma>2) \\<le> 1 \\<and>\n      set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n      set (labels \\<sigma>3')\n      \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) \\<and>\n     set (labels \\<gamma>1''')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n     snd \\<beta>_step = fst \\<sigma>1 \\<and>\n     lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n     lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n     lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n     fst \\<gamma>1''' = fst \\<gamma>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LDD_imp_DD:\nassumes t:\"trans r\" and i:\"irrefl r\" and \"LDD ars r (\\<tau>,\\<sigma>,\\<sigma>1,\\<sigma>2,\\<sigma>3,\\<tau>1,\\<tau>2,\\<tau>3)\"\nshows \"\\<exists> \\<sigma>' \\<tau>'. DD ars r (\\<tau>,\\<sigma>,\\<sigma>',\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)", "have \"length (labels \\<sigma>) = 1\""], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)\n\ngoal (1 subgoal):\n 1. length (labels \\<sigma>) = 1", "unfolding LDD_def LDD1_def local_diagram1_def local_peak_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in peak ars (\\<beta>, \\<alpha>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3)) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in peak ars (\\<alpha>, \\<beta>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>)) (labels \\<tau>1)\n       (labels \\<tau>2) (labels \\<tau>3)) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. length (labels \\<sigma>) = 1", "unfolding labels_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in peak ars (\\<beta>, \\<alpha>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (map fst (snd \\<beta>))) (hd (map fst (snd \\<alpha>)))\n       (map fst (snd \\<sigma>1)) (map fst (snd \\<sigma>2))\n       (map fst (snd \\<sigma>3))) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in peak ars (\\<alpha>, \\<beta>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (map fst (snd \\<alpha>))) (hd (map fst (snd \\<beta>)))\n       (map fst (snd \\<tau>1)) (map fst (snd \\<tau>2))\n       (map fst (snd \\<tau>3))) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. length (map fst (snd \\<sigma>)) = 1", "by auto"], ["proof (state)\nthis:\n  length (labels \\<sigma>) = 1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  length (labels \\<sigma>) = 1", "obtain \\<alpha> where l: \"labels \\<sigma> = [\\<alpha>]\""], ["proof (prove)\nusing this:\n  length (labels \\<sigma>) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        labels \\<sigma> = [\\<alpha>] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Nil append_butlast_last_id butlast_conv_take diff_self_eq_0 length_0_conv take_0 zero_neq_one)"], ["proof (state)\nthis:\n  labels \\<sigma> = [\\<alpha>]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "hence \\<sigma>l: \"labels \\<sigma> = [hd (labels \\<sigma>)]\""], ["proof (prove)\nusing this:\n  labels \\<sigma> = [\\<alpha>]\n\ngoal (1 subgoal):\n 1. labels \\<sigma> = [hd (labels \\<sigma>)]", "by auto"], ["proof (state)\nthis:\n  labels \\<sigma> = [hd (labels \\<sigma>)]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)", "have \"length (labels \\<tau>) = 1\""], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)\n\ngoal (1 subgoal):\n 1. length (labels \\<tau>) = 1", "unfolding LDD_def LDD1_def local_diagram1_def local_peak_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in peak ars (\\<beta>, \\<alpha>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3)) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in peak ars (\\<alpha>, \\<beta>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>)) (labels \\<tau>1)\n       (labels \\<tau>2) (labels \\<tau>3)) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. length (labels \\<tau>) = 1", "unfolding labels_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in peak ars (\\<beta>, \\<alpha>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (map fst (snd \\<beta>))) (hd (map fst (snd \\<alpha>)))\n       (map fst (snd \\<sigma>1)) (map fst (snd \\<sigma>2))\n       (map fst (snd \\<sigma>3))) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in peak ars (\\<alpha>, \\<beta>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (map fst (snd \\<alpha>))) (hd (map fst (snd \\<beta>)))\n       (map fst (snd \\<tau>1)) (map fst (snd \\<tau>2))\n       (map fst (snd \\<tau>3))) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. length (map fst (snd \\<tau>)) = 1", "by auto"], ["proof (state)\nthis:\n  length (labels \\<tau>) = 1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  length (labels \\<tau>) = 1", "obtain \\<beta> where l: \"labels \\<tau> = [\\<beta>]\""], ["proof (prove)\nusing this:\n  length (labels \\<tau>) = 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        labels \\<tau> = [\\<beta>] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Nil append_butlast_last_id butlast_conv_take diff_self_eq_0 length_0_conv take_0 zero_neq_one)"], ["proof (state)\nthis:\n  labels \\<tau> = [\\<beta>]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "hence \\<tau>l: \"labels \\<tau> = [hd (labels \\<tau>)]\""], ["proof (prove)\nusing this:\n  labels \\<tau> = [\\<beta>]\n\ngoal (1 subgoal):\n 1. labels \\<tau> = [hd (labels \\<tau>)]", "by auto"], ["proof (state)\nthis:\n  labels \\<tau> = [hd (labels \\<tau>)]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)", "have \\<sigma>':\"(fst \\<sigma>1,snd \\<sigma>1@snd \\<sigma>2@snd \\<sigma>3) \\<in> seq ars\" (is \"?\\<sigma>' \\<in> _\") and \\<tau>':\"(fst \\<tau>1,snd \\<tau>1@snd \\<tau>2@snd \\<tau>3) \\<in> seq ars\" (is \"?\\<tau>' \\<in> _\")"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)\n\ngoal (1 subgoal):\n 1. (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n    \\<in> seq ars &&&\n    (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) \\<in> seq ars", "unfolding LDD_def LDD1_def local_diagram1_def local_peak_def peak_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in (let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n            in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n               fst \\<tau> = fst \\<sigma>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3)) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in (let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n            in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n               fst \\<tau> = fst \\<sigma>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>)) (labels \\<tau>1)\n       (labels \\<tau>2) (labels \\<tau>3)) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n    \\<in> seq ars &&&\n    (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) \\<in> seq ars", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     \\<sigma> \\<in> seq ars; \\<tau> \\<in> seq ars;\n     fst \\<sigma> = fst \\<tau>; length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> (fst \\<sigma>1,\n                       snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n                      \\<in> seq ars\n 2. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     \\<sigma> \\<in> seq ars; \\<tau> \\<in> seq ars;\n     fst \\<sigma> = fst \\<tau>; length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n                      \\<in> seq ars", "apply (metis fst_eqD seq_concat(1) snd_eqD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     \\<sigma> \\<in> seq ars; \\<tau> \\<in> seq ars;\n     fst \\<sigma> = fst \\<tau>; length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n                      \\<in> seq ars", "by (metis fst_eqD seq_concat(1) snd_eqD)"], ["proof (state)\nthis:\n  (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n  \\<in> seq ars\n  (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)", "have sigmas: \"fst ?\\<sigma>' = fst \\<sigma>1\" \"lst ?\\<sigma>' = lst \\<sigma>3\""], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)\n\ngoal (1 subgoal):\n 1. fst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n    fst \\<sigma>1 &&&\n    lst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n    lst \\<sigma>3", "unfolding LDD_def LDD1_def local_diagram1_def local_peak_def peak_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in (let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n            in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n               fst \\<tau> = fst \\<sigma>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3)) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in (let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n            in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n               fst \\<tau> = fst \\<sigma>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>)) (labels \\<tau>1)\n       (labels \\<tau>2) (labels \\<tau>3)) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. fst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n    fst \\<sigma>1 &&&\n    lst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n    lst \\<sigma>3", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     \\<sigma> \\<in> seq ars; \\<tau> \\<in> seq ars;\n     fst \\<sigma> = fst \\<tau>; length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> lst (fst \\<sigma>1,\n                           snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n                      lst \\<tau>3", "by (metis (hide_lams, no_types) \\<sigma>' append_assoc seq_chop(1) seq_concat(2) seq_concat_helper)"], ["proof (state)\nthis:\n  fst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n  fst \\<sigma>1\n  lst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n  lst \\<sigma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "from assms"], ["proof (chain)\npicking this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)", "have taus: \"fst ?\\<tau>' = fst \\<tau>1\" \"lst ?\\<tau>' = lst \\<tau>3\""], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)\n\ngoal (1 subgoal):\n 1. fst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) =\n    fst \\<tau>1 &&&\n    lst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) = lst \\<tau>3", "unfolding LDD_def LDD1_def local_diagram1_def local_peak_def peak_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in (let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n            in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n               fst \\<tau> = fst \\<sigma>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3)) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in (let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n            in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n               fst \\<tau> = fst \\<sigma>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>)) (labels \\<tau>1)\n       (labels \\<tau>2) (labels \\<tau>3)) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. fst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) =\n    fst \\<tau>1 &&&\n    lst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) = lst \\<tau>3", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     \\<sigma> \\<in> seq ars; \\<tau> \\<in> seq ars;\n     fst \\<sigma> = fst \\<tau>; length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> lst (fst \\<tau>1,\n                           snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) =\n                      lst \\<tau>3", "by (metis (hide_lams, no_types) \\<tau>' append_assoc seq_chop(1) seq_concat(2) seq_concat_helper)"], ["proof (state)\nthis:\n  fst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) = fst \\<tau>1\n  lst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "have \"diagram ars (\\<tau>,\\<sigma>,?\\<sigma>',?\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, \\<sigma>,\n      (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n      fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "using assms"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)\n\ngoal (1 subgoal):\n 1. diagram ars\n     (\\<tau>, \\<sigma>,\n      (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n      fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "unfolding LDD_def LDD1_def local_diagram1_def diagram_def local_peak_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (((let (\\<tau>, \\<sigma>) = (\\<beta>, \\<alpha>)\n        in peak ars (\\<beta>, \\<alpha>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3)) \\<and>\n     (((let (\\<tau>, \\<sigma>) = (\\<alpha>, \\<beta>)\n        in peak ars (\\<alpha>, \\<beta>) \\<and>\n           length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1) \\<and>\n       {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>)) (labels \\<tau>1)\n       (labels \\<tau>2) (labels \\<tau>3)) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<tau>, \\<sigma>,\n           (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n           fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n    in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n       fst \\<sigma> = fst \\<tau> \\<and>\n       lst \\<sigma> = fst \\<tau>' \\<and>\n       lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>'", "apply auto"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>trans r; irrefl r; peak ars (\\<tau>, \\<sigma>);\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     peak ars (\\<sigma>, \\<tau>); length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> \\<in> seq ars\n 2. \\<lbrakk>trans r; irrefl r; peak ars (\\<tau>, \\<sigma>);\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     peak ars (\\<sigma>, \\<tau>); length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<in> seq ars\n 3. \\<lbrakk>trans r; irrefl r; peak ars (\\<tau>, \\<sigma>);\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     peak ars (\\<sigma>, \\<tau>); length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> (fst \\<sigma>1,\n                       snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n                      \\<in> seq ars\n 4. \\<lbrakk>trans r; irrefl r; peak ars (\\<tau>, \\<sigma>);\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     peak ars (\\<sigma>, \\<tau>); length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n                      \\<in> seq ars\n 5. \\<lbrakk>trans r; irrefl r; peak ars (\\<tau>, \\<sigma>);\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     peak ars (\\<sigma>, \\<tau>); length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> fst \\<sigma> = fst \\<tau>\n 6. \\<lbrakk>trans r; irrefl r; peak ars (\\<tau>, \\<sigma>);\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     peak ars (\\<sigma>, \\<tau>); length (snd \\<sigma>) = Suc 0;\n     length (snd \\<tau>) = Suc 0; \\<tau>1 \\<in> seq ars;\n     \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> lst (fst \\<sigma>1,\n                           snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n                      lst (fst \\<tau>1,\n                           snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "unfolding peak_def"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>trans r; irrefl r;\n     let (\\<tau>, \\<sigma>) = (\\<tau>, \\<sigma>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     let (\\<tau>, \\<sigma>) = (\\<sigma>, \\<tau>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> \\<in> seq ars\n 2. \\<lbrakk>trans r; irrefl r;\n     let (\\<tau>, \\<sigma>) = (\\<tau>, \\<sigma>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     let (\\<tau>, \\<sigma>) = (\\<sigma>, \\<tau>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<in> seq ars\n 3. \\<lbrakk>trans r; irrefl r;\n     let (\\<tau>, \\<sigma>) = (\\<tau>, \\<sigma>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     let (\\<tau>, \\<sigma>) = (\\<sigma>, \\<tau>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> (fst \\<sigma>1,\n                       snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n                      \\<in> seq ars\n 4. \\<lbrakk>trans r; irrefl r;\n     let (\\<tau>, \\<sigma>) = (\\<tau>, \\<sigma>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     let (\\<tau>, \\<sigma>) = (\\<sigma>, \\<tau>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n                      \\<in> seq ars\n 5. \\<lbrakk>trans r; irrefl r;\n     let (\\<tau>, \\<sigma>) = (\\<tau>, \\<sigma>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     let (\\<tau>, \\<sigma>) = (\\<sigma>, \\<tau>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> fst \\<sigma> = fst \\<tau>\n 6. \\<lbrakk>trans r; irrefl r;\n     let (\\<tau>, \\<sigma>) = (\\<tau>, \\<sigma>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     \\<sigma>1 \\<in> seq ars; \\<sigma>2 \\<in> seq ars;\n     \\<sigma>3 \\<in> seq ars; lst \\<tau> = fst \\<sigma>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     let (\\<tau>, \\<sigma>) = (\\<sigma>, \\<tau>)\n     in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n        fst \\<tau> = fst \\<sigma>;\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3\\<rbrakk>\n    \\<Longrightarrow> lst (fst \\<sigma>1,\n                           snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n                      lst (fst \\<tau>1,\n                           snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3; \\<tau> \\<in> seq ars;\n     \\<sigma> \\<in> seq ars; fst \\<tau> = fst \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (fst \\<sigma>1,\n                       snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n                      \\<in> seq ars\n 2. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3; \\<tau> \\<in> seq ars;\n     \\<sigma> \\<in> seq ars; fst \\<tau> = fst \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n                      \\<in> seq ars\n 3. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3; \\<tau> \\<in> seq ars;\n     \\<sigma> \\<in> seq ars; fst \\<tau> = fst \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> lst (fst \\<sigma>1,\n                           snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n                      lst (fst \\<tau>1,\n                           snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "using sigmas taus \\<sigma>' \\<tau>'"], ["proof (prove)\nusing this:\n  fst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n  fst \\<sigma>1\n  lst (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n  lst \\<sigma>3\n  fst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) = fst \\<tau>1\n  lst (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) = lst \\<tau>3\n  (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n  \\<in> seq ars\n  (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3) \\<in> seq ars\n\ngoal (3 subgoals):\n 1. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3; \\<tau> \\<in> seq ars;\n     \\<sigma> \\<in> seq ars; fst \\<tau> = fst \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (fst \\<sigma>1,\n                       snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3)\n                      \\<in> seq ars\n 2. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3; \\<tau> \\<in> seq ars;\n     \\<sigma> \\<in> seq ars; fst \\<tau> = fst \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> (fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n                      \\<in> seq ars\n 3. \\<lbrakk>trans r; irrefl r; \\<sigma>1 \\<in> seq ars;\n     \\<sigma>2 \\<in> seq ars; \\<sigma>3 \\<in> seq ars;\n     lst \\<tau> = fst \\<sigma>1; lst \\<sigma>1 = fst \\<sigma>2;\n     lst \\<sigma>2 = fst \\<sigma>3;\n     LD_1' r (hd (labels \\<tau>)) (hd (labels \\<sigma>)) (labels \\<sigma>1)\n      (labels \\<sigma>2) (labels \\<sigma>3);\n     length (snd \\<sigma>) = Suc 0; length (snd \\<tau>) = Suc 0;\n     \\<tau>1 \\<in> seq ars; \\<tau>2 \\<in> seq ars; \\<tau>3 \\<in> seq ars;\n     lst \\<sigma> = fst \\<tau>1; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<tau>2 = fst \\<tau>3;\n     LD_1' r (hd (labels \\<sigma>)) (hd (labels \\<tau>)) (labels \\<tau>1)\n      (labels \\<tau>2) (labels \\<tau>3);\n     lst \\<sigma>3 = lst \\<tau>3; \\<tau> \\<in> seq ars;\n     \\<sigma> \\<in> seq ars; fst \\<tau> = fst \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> lst (fst \\<sigma>1,\n                           snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3) =\n                      lst (fst \\<tau>1,\n                           snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "by auto"], ["proof (state)\nthis:\n  diagram ars\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "moreover"], ["proof (state)\nthis:\n  diagram ars\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "have \"D2 r (\\<tau>,\\<sigma>,?\\<sigma>',?\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D2 r\n     (\\<tau>, \\<sigma>,\n      (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n      fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "using assms proposition3_4[OF t i] \\<sigma>l \\<tau>l"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  LDD ars r\n   (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n    \\<tau>3)\n  LD' r ?\\<beta> ?\\<alpha> ?\\<sigma>1.0 ?\\<sigma>2.0 ?\\<sigma>3.0 ?\\<tau>1.0\n   ?\\<tau>2.0 ?\\<tau>3.0 \\<Longrightarrow>\n  D r [?\\<beta>] [?\\<alpha>] (?\\<sigma>1.0 @ ?\\<sigma>2.0 @ ?\\<sigma>3.0)\n   (?\\<tau>1.0 @ ?\\<tau>2.0 @ ?\\<tau>3.0)\n  labels \\<sigma> = [hd (labels \\<sigma>)]\n  labels \\<tau> = [hd (labels \\<tau>)]\n\ngoal (1 subgoal):\n 1. D2 r\n     (\\<tau>, \\<sigma>,\n      (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n      fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "unfolding LDD_def LDD1_def D2_def LD'_def labels_def"], ["proof (prove)\nusing this:\n  trans r\n  irrefl r\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        (\\<tau>, \\<sigma>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n         \\<tau>2, \\<tau>3)\n  in (local_diagram1 ars \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2\n       \\<sigma>3 \\<and>\n      LD_1' r (hd (map fst (snd \\<beta>))) (hd (map fst (snd \\<alpha>)))\n       (map fst (snd \\<sigma>1)) (map fst (snd \\<sigma>2))\n       (map fst (snd \\<sigma>3))) \\<and>\n     (local_diagram1 ars \\<alpha> \\<beta> \\<tau>1 \\<tau>2 \\<tau>3 \\<and>\n      LD_1' r (hd (map fst (snd \\<alpha>))) (hd (map fst (snd \\<beta>)))\n       (map fst (snd \\<tau>1)) (map fst (snd \\<tau>2))\n       (map fst (snd \\<tau>3))) \\<and>\n     lst \\<sigma>3 = lst \\<tau>3\n  LD_1' r ?\\<beta> ?\\<alpha> ?\\<sigma>1.0 ?\\<sigma>2.0 ?\\<sigma>3.0 \\<and>\n  LD_1' r ?\\<alpha> ?\\<beta> ?\\<tau>1.0 ?\\<tau>2.0\n   ?\\<tau>3.0 \\<Longrightarrow>\n  D r [?\\<beta>] [?\\<alpha>] (?\\<sigma>1.0 @ ?\\<sigma>2.0 @ ?\\<sigma>3.0)\n   (?\\<tau>1.0 @ ?\\<tau>2.0 @ ?\\<tau>3.0)\n  map fst (snd \\<sigma>) = [hd (map fst (snd \\<sigma>))]\n  map fst (snd \\<tau>) = [hd (map fst (snd \\<tau>))]\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n          (\\<tau>, \\<sigma>,\n           (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n           fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n    in D r (map fst (snd \\<tau>)) (map fst (snd \\<sigma>))\n        (map fst (snd \\<sigma>')) (map fst (snd \\<tau>'))", "by auto"], ["proof (state)\nthis:\n  D2 r\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "ultimately"], ["proof (chain)\npicking this:\n  diagram ars\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n  D2 r\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)", "show ?thesis"], ["proof (prove)\nusing this:\n  diagram ars\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n  D2 r\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "unfolding DD_def"], ["proof (prove)\nusing this:\n  diagram ars\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n  D2 r\n   (\\<tau>, \\<sigma>,\n    (fst \\<sigma>1, snd \\<sigma>1 @ snd \\<sigma>2 @ snd \\<sigma>3),\n    fst \\<tau>1, snd \\<tau>1 @ snd \\<tau>2 @ snd \\<tau>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n       D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LT_imp_DD:\nassumes t:\"trans r\"\nand i:\"irrefl r\"\nand IH:\"!!y . ((y,((s,[\\<beta>_step]@\\<upsilon>_step),(s,[\\<alpha>_step]@\\<rho>_step))) \\<in> pex r \\<Longrightarrow> peak ars y \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst y, snd y, \\<sigma>', \\<tau>'))\" (is \"!!y. ((y,?P) \\<in> _ \\<Longrightarrow> _ \\<Longrightarrow> _)\")\nand LT: \"LT ars r ((s,[\\<beta>_step]),(s,[\\<alpha>_step]),\\<gamma>1,\\<gamma>2,\\<gamma>3,\\<delta>1,\\<delta>2,\\<delta>3)\"\nshows \"\\<exists> \\<kappa> \\<mu>. DD ars r ((s,[\\<beta>_step]),(s,[\\<alpha>_step]),\\<kappa>,\\<mu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "from LT"], ["proof (chain)\npicking this:\n  LT ars r\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n    \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)", "have LTa: \"LT1 ars r (s,[\\<beta>_step]) (s,[\\<alpha>_step]) \\<gamma>1 \\<gamma>2 \\<gamma>3\" and LTb: \"LT1 ars r (s,[\\<alpha>_step]) (s,[\\<beta>_step]) \\<delta>1 \\<delta>2 \\<delta>3\""], ["proof (prove)\nusing this:\n  LT ars r\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n    \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n\ngoal (1 subgoal):\n 1. LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n     \\<gamma>3 &&&\n    LT1 ars r (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<delta>1 \\<delta>2\n     \\<delta>3", "unfolding LT_def"], ["proof (prove)\nusing this:\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n         \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n  in LT1 ars r \\<beta> \\<alpha> \\<sigma>1 \\<sigma>2 \\<sigma>3 \\<and>\n     LT1 ars r \\<alpha> \\<beta> \\<tau>1 \\<tau>2 \\<tau>3 \\<and>\n     lst_conv \\<sigma>3 = lst_conv \\<tau>3\n\ngoal (1 subgoal):\n 1. LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n     \\<gamma>3 &&&\n    LT1 ars r (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<delta>1 \\<delta>2\n     \\<delta>3", "by auto"], ["proof (state)\nthis:\n  LT1 ars r (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<gamma>1 \\<gamma>2\n   \\<gamma>3\n  LT1 ars r (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<delta>1 \\<delta>2\n   \\<delta>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "from local_decreasing_extended_imp_decreasing[OF LTa t i IH]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                        [\\<alpha>_step] @ ?\\<rho>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<beta>_step] @ \\<upsilon>_step),\n                                 s, [\\<alpha>_step] @ \\<rho>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                [\\<alpha>_step] @ ?\\<rho>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n                       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n                        \\<subseteq> seq ars \\<and>\n                        set (labels \\<sigma>1)\n                        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n                        length (labels \\<sigma>2) \\<le> 1 \\<and>\n                        set (labels \\<sigma>2)\n                        \\<subseteq> {fst \\<alpha>_step} \\<and>\n                        set (labels \\<sigma>3')\n                        \\<subseteq> r \\<down>s\n                                    {fst \\<alpha>_step,\n                                     fst \\<beta>_step}) \\<and>\n                       set (labels \\<gamma>1''')\n                       \\<subseteq> r \\<down>s\n                                   {fst \\<alpha>_step,\n                                    fst \\<beta>_step} \\<and>\n                       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n                       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n                       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n                       fst \\<gamma>1''' = fst \\<gamma>3", "obtain \\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1''' where sigmas:\"{\\<sigma>1,\\<sigma>2,\\<sigma>3',\\<gamma>1'''} \\<subseteq> seq ars\" and\n    onetwo1: \"set (labels \\<sigma>1) \\<subseteq> ds r {fst \\<beta>_step} \\<and> length (labels \\<sigma>2) \\<le> 1 \\<and> set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n    set (labels \\<sigma>3') \\<subseteq> ds r {fst \\<alpha>_step, fst \\<beta>_step} \\<and> set (labels \\<gamma>1''') \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step} \\<and>\n     snd \\<beta>_step = fst \\<sigma>1 \\<and> lst \\<sigma>1 = fst \\<sigma>2 \\<and> lst \\<sigma>2 = fst \\<sigma>3' \\<and> lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                        [\\<alpha>_step] @ ?\\<rho>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<beta>_step] @ \\<upsilon>_step),\n                                 s, [\\<alpha>_step] @ \\<rho>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                [\\<alpha>_step] @ ?\\<rho>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n                       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n                        \\<subseteq> seq ars \\<and>\n                        set (labels \\<sigma>1)\n                        \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n                        length (labels \\<sigma>2) \\<le> 1 \\<and>\n                        set (labels \\<sigma>2)\n                        \\<subseteq> {fst \\<alpha>_step} \\<and>\n                        set (labels \\<sigma>3')\n                        \\<subseteq> r \\<down>s\n                                    {fst \\<alpha>_step,\n                                     fst \\<beta>_step}) \\<and>\n                       set (labels \\<gamma>1''')\n                       \\<subseteq> r \\<down>s\n                                   {fst \\<alpha>_step,\n                                    fst \\<beta>_step} \\<and>\n                       snd \\<beta>_step = fst \\<sigma>1 \\<and>\n                       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n                       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n                       fst \\<gamma>1''' = fst \\<gamma>3\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n        \\<lbrakk>{\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n                 \\<subseteq> seq ars;\n         set (labels \\<sigma>1)\n         \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n         length (labels \\<sigma>2) \\<le> 1 \\<and>\n         set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n         set (labels \\<sigma>3')\n         \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n         set (labels \\<gamma>1''')\n         \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n         snd \\<beta>_step = fst \\<sigma>1 \\<and>\n         lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n         lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n         lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n         fst \\<gamma>1''' = fst \\<gamma>3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  {\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''} \\<subseteq> seq ars\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have ih2: \"!!y. (y, (s, [\\<alpha>_step] @ \\<rho>_step),(s,[\\<beta>_step] @ \\<upsilon>_step)) \\<in> pex r \\<Longrightarrow> peak ars y \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst y, snd y, \\<sigma>', \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>(y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n                 [\\<beta>_step] @ \\<upsilon>_step)\n                \\<in> pex r;\n        peak ars y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst y, snd y, \\<sigma>', \\<tau>')", "using IH"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>(y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n                 [\\<beta>_step] @ \\<upsilon>_step)\n                \\<in> pex r;\n        peak ars y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst y, snd y, \\<sigma>', \\<tau>')", "unfolding pex_def measure_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y, (s, [\\<beta>_step] @ \\<upsilon>_step), s,\n            [\\<alpha>_step] @ \\<rho>_step)\n           \\<in> {(P1, P2).\n                  (r|labels (fst P1)| + r|labels (snd P1)|,\n                   r|labels (fst P2)| + r|labels (snd P2)|)\n                  \\<in> mul r};\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>(y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n                 [\\<beta>_step] @ \\<upsilon>_step)\n                \\<in> {(P1, P2).\n                       (r|labels (fst P1)| + r|labels (snd P1)|,\n                        r|labels (fst P2)| + r|labels (snd P2)|)\n                       \\<in> mul r};\n        peak ars y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst y, snd y, \\<sigma>', \\<tau>')", "by (auto simp: union_commute)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n            [\\<beta>_step] @ \\<upsilon>_step)\n           \\<in> pex r;\n   peak ars ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y, snd ?y, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "from local_decreasing_extended_imp_decreasing[OF LTb t i ih2]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (s, [\\<alpha>_step] @ ?\\<upsilon>_step), s,\n                        [\\<beta>_step] @ ?\\<rho>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n                                 [\\<beta>_step] @ \\<upsilon>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (s, [\\<alpha>_step] @ ?\\<upsilon>_step), s,\n                [\\<beta>_step] @ ?\\<rho>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n                       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n                        \\<subseteq> seq ars \\<and>\n                        set (labels \\<sigma>1)\n                        \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n                        length (labels \\<sigma>2) \\<le> 1 \\<and>\n                        set (labels \\<sigma>2)\n                        \\<subseteq> {fst \\<beta>_step} \\<and>\n                        set (labels \\<sigma>3')\n                        \\<subseteq> r \\<down>s\n                                    {fst \\<beta>_step,\n                                     fst \\<alpha>_step}) \\<and>\n                       set (labels \\<gamma>1''')\n                       \\<subseteq> r \\<down>s\n                                   {fst \\<beta>_step,\n                                    fst \\<alpha>_step} \\<and>\n                       snd \\<alpha>_step = fst \\<sigma>1 \\<and>\n                       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n                       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n                       fst \\<gamma>1''' = fst \\<delta>3", "obtain \\<tau>1 \\<tau>2 \\<tau>3' \\<delta>1''' where taus:\"{\\<tau>1,\\<tau>2,\\<tau>3',\\<delta>1'''} \\<subseteq> seq ars\" and\n    onetwo2: \"set (labels \\<tau>1) \\<subseteq> ds r {fst \\<alpha>_step} \\<and> length (labels \\<tau>2) \\<le> 1 \\<and> set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n    set (labels \\<tau>3') \\<subseteq> ds r {fst \\<beta>_step,fst \\<alpha>_step} \\<and> set (labels \\<delta>1''') \\<subseteq> ds r {fst \\<beta>_step,fst \\<alpha>_step} \\<and>\n     snd \\<alpha>_step = fst \\<tau>1 \\<and> lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3' \\<and> lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (s, [\\<alpha>_step] @ ?\\<upsilon>_step), s,\n                        [\\<beta>_step] @ ?\\<rho>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<alpha>_step] @ \\<rho>_step), s,\n                                 [\\<beta>_step] @ \\<upsilon>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (s, [\\<alpha>_step] @ ?\\<upsilon>_step), s,\n                [\\<beta>_step] @ ?\\<rho>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>1 \\<sigma>2 \\<sigma>3' \\<gamma>1'''.\n                       ({\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''}\n                        \\<subseteq> seq ars \\<and>\n                        set (labels \\<sigma>1)\n                        \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n                        length (labels \\<sigma>2) \\<le> 1 \\<and>\n                        set (labels \\<sigma>2)\n                        \\<subseteq> {fst \\<beta>_step} \\<and>\n                        set (labels \\<sigma>3')\n                        \\<subseteq> r \\<down>s\n                                    {fst \\<beta>_step,\n                                     fst \\<alpha>_step}) \\<and>\n                       set (labels \\<gamma>1''')\n                       \\<subseteq> r \\<down>s\n                                   {fst \\<beta>_step,\n                                    fst \\<alpha>_step} \\<and>\n                       snd \\<alpha>_step = fst \\<sigma>1 \\<and>\n                       lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n                       lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n                       lst \\<sigma>3' = lst \\<gamma>1''' \\<and>\n                       fst \\<gamma>1''' = fst \\<delta>3\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>1 \\<tau>2 \\<tau>3' \\<delta>1'''.\n        \\<lbrakk>{\\<tau>1, \\<tau>2, \\<tau>3', \\<delta>1'''}\n                 \\<subseteq> seq ars;\n         set (labels \\<tau>1)\n         \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n         length (labels \\<tau>2) \\<le> 1 \\<and>\n         set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n         set (labels \\<tau>3')\n         \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n         set (labels \\<delta>1''')\n         \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n         snd \\<alpha>_step = fst \\<tau>1 \\<and>\n         lst \\<tau>1 = fst \\<tau>2 \\<and>\n         lst \\<tau>2 = fst \\<tau>3' \\<and>\n         lst \\<tau>3' = lst \\<delta>1''' \\<and>\n         fst \\<delta>1''' = fst \\<delta>3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  {\\<tau>1, \\<tau>2, \\<tau>3', \\<delta>1'''} \\<subseteq> seq ars\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \\<gamma>3: \"\\<gamma>3 \\<in> conv ars\" and \\<gamma>3m:\"set (labels_conv \\<gamma>3) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\" and\n         \\<delta>3: \"\\<delta>3 \\<in> conv ars\" (is \"?c2 \\<in> _\") and \\<delta>3m: \"set (labels_conv \\<delta>3) \\<subseteq> ds r {fst \\<beta>_step,fst \\<alpha>_step}\" and\n         eq: \"lst_conv \\<gamma>3 = lst_conv \\<delta>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<gamma>3 \\<in> conv ars &&&\n     set (labels_conv \\<gamma>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    \\<delta>3 \\<in> conv ars &&&\n    set (labels_conv \\<delta>3)\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} &&&\n    lst_conv \\<gamma>3 = lst_conv \\<delta>3", "using LT"], ["proof (prove)\nusing this:\n  LT ars r\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n    \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n\ngoal (1 subgoal):\n 1. (\\<gamma>3 \\<in> conv ars &&&\n     set (labels_conv \\<gamma>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    \\<delta>3 \\<in> conv ars &&&\n    set (labels_conv \\<delta>3)\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} &&&\n    lst_conv \\<gamma>3 = lst_conv \\<delta>3", "unfolding LT_def LT1_def local_triangle1_def LD_1'_def labels_def"], ["proof (prove)\nusing this:\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n         \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n  in ((local_peak ars (\\<beta>, \\<alpha>) \\<and>\n       \\<sigma>2 \\<in> seq ars \\<and>\n       {\\<sigma>1, \\<sigma>3} \\<subseteq> conv ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst_conv \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      set (labels_conv \\<sigma>1)\n      \\<subseteq> r \\<down>s {hd (map fst (snd \\<beta>))} \\<and>\n      length (map fst (snd \\<sigma>2)) \\<le> 1 \\<and>\n      set (map fst (snd \\<sigma>2))\n      \\<subseteq> {hd (map fst (snd \\<alpha>))} \\<and>\n      set (labels_conv \\<sigma>3)\n      \\<subseteq> r \\<down>s\n                  {hd (map fst (snd \\<alpha>)),\n                   hd (map fst (snd \\<beta>))}) \\<and>\n     ((local_peak ars (\\<alpha>, \\<beta>) \\<and>\n       \\<tau>2 \\<in> seq ars \\<and>\n       {\\<tau>1, \\<tau>3} \\<subseteq> conv ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst_conv \\<tau>1 = fst \\<tau>2 \\<and>\n       lst \\<tau>2 = fst \\<tau>3) \\<and>\n      set (labels_conv \\<tau>1)\n      \\<subseteq> r \\<down>s {hd (map fst (snd \\<alpha>))} \\<and>\n      length (map fst (snd \\<tau>2)) \\<le> 1 \\<and>\n      set (map fst (snd \\<tau>2))\n      \\<subseteq> {hd (map fst (snd \\<beta>))} \\<and>\n      set (labels_conv \\<tau>3)\n      \\<subseteq> r \\<down>s\n                  {hd (map fst (snd \\<beta>)),\n                   hd (map fst (snd \\<alpha>))}) \\<and>\n     lst_conv \\<sigma>3 = lst_conv \\<tau>3\n\ngoal (1 subgoal):\n 1. (\\<gamma>3 \\<in> conv ars &&&\n     set (labels_conv \\<gamma>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    \\<delta>3 \\<in> conv ars &&&\n    set (labels_conv \\<delta>3)\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} &&&\n    lst_conv \\<gamma>3 = lst_conv \\<delta>3", "by auto"], ["proof (state)\nthis:\n  \\<gamma>3 \\<in> conv ars\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  \\<delta>3 \\<in> conv ars\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n  lst_conv \\<gamma>3 = lst_conv \\<delta>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "hence \\<delta>3m: \"set (labels_conv \\<delta>3) \\<subseteq> ds r {fst \\<alpha>_step, fst \\<beta>_step}\""], ["proof (prove)\nusing this:\n  \\<gamma>3 \\<in> conv ars\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  \\<delta>3 \\<in> conv ars\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n  lst_conv \\<gamma>3 = lst_conv \\<delta>3\n\ngoal (1 subgoal):\n 1. set (labels_conv \\<delta>3)\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using insert_commute"], ["proof (prove)\nusing this:\n  \\<gamma>3 \\<in> conv ars\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  \\<delta>3 \\<in> conv ars\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n  lst_conv \\<gamma>3 = lst_conv \\<delta>3\n  insert ?x (insert ?y ?A) = insert ?y (insert ?x ?A)\n\ngoal (1 subgoal):\n 1. set (labels_conv \\<delta>3)\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "by metis"], ["proof (state)\nthis:\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "(*concat*)"], ["proof (state)\nthis:\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \\<delta>1''': \"\\<delta>1''' \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta>1''' \\<in> seq ars", "using taus"], ["proof (prove)\nusing this:\n  {\\<tau>1, \\<tau>2, \\<tau>3', \\<delta>1'''} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. \\<delta>1''' \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<delta>1''' \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \\<gamma>1''': \"\\<gamma>1''' \\<in> seq ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>1''' \\<in> seq ars", "using sigmas"], ["proof (prove)\nusing this:\n  {\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. \\<gamma>1''' \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<gamma>1''' \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c1: \"(fst \\<delta>1''',map (Pair True) (snd \\<delta>1''')) \\<in> conv ars\" (is \"?c0 \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')) \\<in> conv ars", "using seq_imp_conv \\<delta>1''' surjective_pairing"], ["proof (prove)\nusing this:\n  (?s, ?ss) \\<in> seq ?ars \\<Longrightarrow>\n  (?s, map (Pair True) ?ss) \\<in> conv ?ars \\<and>\n  lst_conv (?s, map (Pair True) ?ss) = lst (?s, ?ss) \\<and>\n  labels (?s, ?ss) = labels_conv (?s, map (Pair True) ?ss)\n  \\<delta>1''' \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')) \\<in> conv ars", "by metis"], ["proof (state)\nthis:\n  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')) \\<in> conv ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c11: \"lst \\<delta>1''' = lst_conv ?c0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<delta>1''' =\n    lst_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))", "using seq_imp_conv \\<delta>1''' surjective_pairing"], ["proof (prove)\nusing this:\n  (?s, ?ss) \\<in> seq ?ars \\<Longrightarrow>\n  (?s, map (Pair True) ?ss) \\<in> conv ?ars \\<and>\n  lst_conv (?s, map (Pair True) ?ss) = lst (?s, ?ss) \\<and>\n  labels (?s, ?ss) = labels_conv (?s, map (Pair True) ?ss)\n  \\<delta>1''' \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. lst \\<delta>1''' =\n    lst_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))", "by metis"], ["proof (state)\nthis:\n  lst \\<delta>1''' =\n  lst_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c1l: \"set (labels_conv ?c0) \\<subseteq> ds r {fst \\<beta>_step,fst \\<alpha>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}", "using onetwo2 seq_imp_conv \\<delta>1''' surjective_pairing"], ["proof (prove)\nusing this:\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n  (?s, ?ss) \\<in> seq ?ars \\<Longrightarrow>\n  (?s, map (Pair True) ?ss) \\<in> conv ?ars \\<and>\n  lst_conv (?s, map (Pair True) ?ss) = lst (?s, ?ss) \\<and>\n  labels (?s, ?ss) = labels_conv (?s, map (Pair True) ?ss)\n  \\<delta>1''' \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}", "by metis"], ["proof (state)\nthis:\n  set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "hence c1l:\"set (labels_conv ?c0) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\""], ["proof (prove)\nusing this:\n  set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n\ngoal (1 subgoal):\n 1. set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using insert_commute"], ["proof (prove)\nusing this:\n  set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n  insert ?x (insert ?y ?A) = insert ?y (insert ?x ?A)\n\ngoal (1 subgoal):\n 1. set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "by metis"], ["proof (state)\nthis:\n  set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c1: \"conv_mirror ?c0 \\<in> conv ars\" (is \"?c1 \\<in> _\")\n             \"set (labels_conv (conv_mirror ?c0)) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\"\n             \"fst (conv_mirror ?c0) = lst \\<tau>3'\"\n             \"lst_conv (conv_mirror ?c0) = fst \\<delta>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n     \\<in> conv ars &&&\n     set (labels_conv\n           (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n    lst \\<tau>3' &&&\n    lst_conv\n     (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n    fst \\<delta>3", "using conv_mirror[OF c1] c11 c1l c1 onetwo2"], ["proof (prove)\nusing this:\n  conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n  \\<in> conv ars \\<and>\n  set (labels_conv\n        (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))) =\n  set (labels_conv\n        (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) \\<and>\n  fst (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')) =\n  lst_conv\n   (conv_mirror\n     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) \\<and>\n  lst_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')) =\n  fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  lst \\<delta>1''' =\n  lst_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n  set (labels_conv (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')) \\<in> conv ars\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n\ngoal (1 subgoal):\n 1. (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n     \\<in> conv ars &&&\n     set (labels_conv\n           (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n    lst \\<tau>3' &&&\n    lst_conv\n     (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n    fst \\<delta>3", "by auto"], ["proof (state)\nthis:\n  conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n  \\<in> conv ars\n  set (labels_conv\n        (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  lst \\<tau>3'\n  lst_conv\n   (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  fst \\<delta>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c2: \"?c2 \\<in> conv ars\"\n             \"set (labels_conv ?c2) \\<subseteq> ds r {fst \\<alpha>_step, fst \\<beta>_step}\"\n             \"fst ?c2 = fst \\<delta>3\"\n             \"lst_conv ?c2 = lst_conv \\<gamma>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta>3 \\<in> conv ars &&&\n     set (labels_conv \\<delta>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    fst \\<delta>3 = fst \\<delta>3 &&&\n    lst_conv \\<delta>3 = lst_conv \\<gamma>3", "using \\<delta>3 eq \\<delta>3m"], ["proof (prove)\nusing this:\n  \\<delta>3 \\<in> conv ars\n  lst_conv \\<gamma>3 = lst_conv \\<delta>3\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. (\\<delta>3 \\<in> conv ars &&&\n     set (labels_conv \\<delta>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    fst \\<delta>3 = fst \\<delta>3 &&&\n    lst_conv \\<delta>3 = lst_conv \\<gamma>3", "by auto"], ["proof (state)\nthis:\n  \\<delta>3 \\<in> conv ars\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst \\<delta>3 = fst \\<delta>3\n  lst_conv \\<delta>3 = lst_conv \\<gamma>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \"conv_mirror \\<gamma>3 \\<in> conv ars\" (is \"?c3 \\<in> _\") \"set (labels_conv (conv_mirror \\<gamma>3)) = set (labels_conv \\<gamma>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_mirror \\<gamma>3 \\<in> conv ars &&&\n    set (labels_conv (conv_mirror \\<gamma>3)) = set (labels_conv \\<gamma>3)", "using conv_mirror[OF \\<gamma>3]"], ["proof (prove)\nusing this:\n  conv_mirror \\<gamma>3 \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror \\<gamma>3)) =\n  set (labels_conv \\<gamma>3) \\<and>\n  fst \\<gamma>3 = lst_conv (conv_mirror \\<gamma>3) \\<and>\n  lst_conv \\<gamma>3 = fst (conv_mirror \\<gamma>3)\n\ngoal (1 subgoal):\n 1. conv_mirror \\<gamma>3 \\<in> conv ars &&&\n    set (labels_conv (conv_mirror \\<gamma>3)) = set (labels_conv \\<gamma>3)", "by auto"], ["proof (state)\nthis:\n  conv_mirror \\<gamma>3 \\<in> conv ars\n  set (labels_conv (conv_mirror \\<gamma>3)) = set (labels_conv \\<gamma>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "hence c3: \"?c3 \\<in> conv ars\"\n              \"set (labels_conv ?c3) \\<subseteq> ds r {fst \\<alpha>_step, fst \\<beta>_step}\"\n              \"fst ?c3 = lst_conv \\<delta>3\"\n              \"lst_conv ?c3 = fst \\<gamma>1'''\""], ["proof (prove)\nusing this:\n  conv_mirror \\<gamma>3 \\<in> conv ars\n  set (labels_conv (conv_mirror \\<gamma>3)) = set (labels_conv \\<gamma>3)\n\ngoal (1 subgoal):\n 1. (conv_mirror \\<gamma>3 \\<in> conv ars &&&\n     set (labels_conv (conv_mirror \\<gamma>3))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    fst (conv_mirror \\<gamma>3) = lst_conv \\<delta>3 &&&\n    lst_conv (conv_mirror \\<gamma>3) = fst \\<gamma>1'''", "using conv_mirror[OF \\<gamma>3] eq onetwo1 \\<gamma>3m"], ["proof (prove)\nusing this:\n  conv_mirror \\<gamma>3 \\<in> conv ars\n  set (labels_conv (conv_mirror \\<gamma>3)) = set (labels_conv \\<gamma>3)\n  conv_mirror \\<gamma>3 \\<in> conv ars \\<and>\n  set (labels_conv (conv_mirror \\<gamma>3)) =\n  set (labels_conv \\<gamma>3) \\<and>\n  fst \\<gamma>3 = lst_conv (conv_mirror \\<gamma>3) \\<and>\n  lst_conv \\<gamma>3 = fst (conv_mirror \\<gamma>3)\n  lst_conv \\<gamma>3 = lst_conv \\<delta>3\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  set (labels_conv \\<gamma>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. (conv_mirror \\<gamma>3 \\<in> conv ars &&&\n     set (labels_conv (conv_mirror \\<gamma>3))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}) &&&\n    fst (conv_mirror \\<gamma>3) = lst_conv \\<delta>3 &&&\n    lst_conv (conv_mirror \\<gamma>3) = fst \\<gamma>1'''", "by auto"], ["proof (state)\nthis:\n  conv_mirror \\<gamma>3 \\<in> conv ars\n  set (labels_conv (conv_mirror \\<gamma>3))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst (conv_mirror \\<gamma>3) = lst_conv \\<delta>3\n  lst_conv (conv_mirror \\<gamma>3) = fst \\<gamma>1'''\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c4: \"(fst \\<gamma>1''',map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars\" (is \"?c4 \\<in> _\") \"set (labels_conv (fst \\<gamma>1''',map (Pair True) (snd \\<gamma>1'''))) = set (labels \\<gamma>1''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n    \\<in> conv ars &&&\n    set (labels_conv\n          (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    set (labels \\<gamma>1''')", "using seq_imp_conv \\<gamma>1''' surjective_pairing"], ["proof (prove)\nusing this:\n  (?s, ?ss) \\<in> seq ?ars \\<Longrightarrow>\n  (?s, map (Pair True) ?ss) \\<in> conv ?ars \\<and>\n  lst_conv (?s, map (Pair True) ?ss) = lst (?s, ?ss) \\<and>\n  labels (?s, ?ss) = labels_conv (?s, map (Pair True) ?ss)\n  \\<gamma>1''' \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n    \\<in> conv ars &&&\n    set (labels_conv\n          (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    set (labels \\<gamma>1''')", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    set (labels \\<gamma>1''')", "using seq_imp_conv \\<gamma>1''' surjective_pairing"], ["proof (prove)\nusing this:\n  (?s, ?ss) \\<in> seq ?ars \\<Longrightarrow>\n  (?s, map (Pair True) ?ss) \\<in> conv ?ars \\<and>\n  lst_conv (?s, map (Pair True) ?ss) = lst (?s, ?ss) \\<and>\n  labels (?s, ?ss) = labels_conv (?s, map (Pair True) ?ss)\n  \\<gamma>1''' \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    set (labels \\<gamma>1''')", "by metis"], ["proof (state)\nthis:\n  (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars\n  set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  set (labels \\<gamma>1''')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c4: \"?c4 \\<in> conv ars\"\n             \"lst_conv ?c4 = lst \\<gamma>1'''\"\n             \"set (labels_conv ?c4) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n    \\<in> conv ars &&&\n    lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n    lst \\<gamma>1''' &&&\n    set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using  seq_imp_conv \\<gamma>1''' surjective_pairing"], ["proof (prove)\nusing this:\n  (?s, ?ss) \\<in> seq ?ars \\<Longrightarrow>\n  (?s, map (Pair True) ?ss) \\<in> conv ?ars \\<and>\n  lst_conv (?s, map (Pair True) ?ss) = lst (?s, ?ss) \\<and>\n  labels (?s, ?ss) = labels_conv (?s, map (Pair True) ?ss)\n  \\<gamma>1''' \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n    \\<in> conv ars &&&\n    lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n    lst \\<gamma>1''' &&&\n    set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "apply metis"], ["proof (prove)\ngoal (2 subgoals):\n 1. lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n    lst \\<gamma>1'''\n 2. set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using seq_imp_conv \\<gamma>1''' surjective_pairing"], ["proof (prove)\nusing this:\n  (?s, ?ss) \\<in> seq ?ars \\<Longrightarrow>\n  (?s, map (Pair True) ?ss) \\<in> conv ?ars \\<and>\n  lst_conv (?s, map (Pair True) ?ss) = lst (?s, ?ss) \\<and>\n  labels (?s, ?ss) = labels_conv (?s, map (Pair True) ?ss)\n  \\<gamma>1''' \\<in> seq ars\n  ?t = (fst ?t, snd ?t)\n\ngoal (2 subgoals):\n 1. lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n    lst \\<gamma>1'''\n 2. set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using c4(2) onetwo1"], ["proof (prove)\nusing this:\n  set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  set (labels \\<gamma>1''')\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n\ngoal (1 subgoal):\n 1. set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars\n  lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n  lst \\<gamma>1'''\n  set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have eq: \"lst_conv ?c1 = fst ?c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst_conv\n     (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n    fst \\<delta>3", "using c1 c2"], ["proof (prove)\nusing this:\n  conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n  \\<in> conv ars\n  set (labels_conv\n        (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  lst \\<tau>3'\n  lst_conv\n   (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  fst \\<delta>3\n  \\<delta>3 \\<in> conv ars\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst \\<delta>3 = fst \\<delta>3\n  lst_conv \\<delta>3 = lst_conv \\<gamma>3\n\ngoal (1 subgoal):\n 1. lst_conv\n     (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n    fst \\<delta>3", "by auto"], ["proof (state)\nthis:\n  lst_conv\n   (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  fst \\<delta>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c12: \"(fst ?c1,snd ?c1@snd ?c2) \\<in> conv ars\" (is \"?c12 \\<in> _\")\n     \"fst (fst ?c1,snd ?c1@snd ?c2) = fst ?c1\" \"lst_conv (fst ?c1,snd ?c1@snd ?c2) = lst_conv ?c2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (conv_mirror\n           (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n     snd (conv_mirror\n           (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n     snd \\<delta>3)\n    \\<in> conv ars &&&\n    fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) =\n    fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) &&&\n    lst_conv\n     (fst (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n      snd (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n      snd \\<delta>3) =\n    lst_conv \\<delta>3", "using conv_concat[OF c1(1) c2(1) eq]"], ["proof (prove)\nusing this:\n  (fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n   snd (conv_mirror\n         (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n   snd \\<delta>3)\n  \\<in> conv ars\n  lst_conv\n   (fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n    snd (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n    snd \\<delta>3) =\n  lst_conv \\<delta>3\n\ngoal (1 subgoal):\n 1. (fst (conv_mirror\n           (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n     snd (conv_mirror\n           (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n     snd \\<delta>3)\n    \\<in> conv ars &&&\n    fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) =\n    fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) &&&\n    lst_conv\n     (fst (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n      snd (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n      snd \\<delta>3) =\n    lst_conv \\<delta>3", "by auto"], ["proof (state)\nthis:\n  (fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n   snd (conv_mirror\n         (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n   snd \\<delta>3)\n  \\<in> conv ars\n  fst (fst (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n       snd (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n       snd \\<delta>3) =\n  fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  lst_conv\n   (fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n    snd (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n    snd \\<delta>3) =\n  lst_conv \\<delta>3\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have eq: \"lst_conv ?c12 = fst ?c3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst_conv\n     (fst (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n      snd (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n      snd \\<delta>3) =\n    fst (conv_mirror \\<gamma>3)", "using c12 c3"], ["proof (prove)\nusing this:\n  (fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n   snd (conv_mirror\n         (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n   snd \\<delta>3)\n  \\<in> conv ars\n  fst (fst (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n       snd (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n       snd \\<delta>3) =\n  fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1''')))\n  lst_conv\n   (fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n    snd (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n    snd \\<delta>3) =\n  lst_conv \\<delta>3\n  conv_mirror \\<gamma>3 \\<in> conv ars\n  set (labels_conv (conv_mirror \\<gamma>3))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst (conv_mirror \\<gamma>3) = lst_conv \\<delta>3\n  lst_conv (conv_mirror \\<gamma>3) = fst \\<gamma>1'''\n\ngoal (1 subgoal):\n 1. lst_conv\n     (fst (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n      snd (conv_mirror\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n      snd \\<delta>3) =\n    fst (conv_mirror \\<gamma>3)", "by auto"], ["proof (state)\nthis:\n  lst_conv\n   (fst (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n    snd (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n    snd \\<delta>3) =\n  fst (conv_mirror \\<gamma>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c123: \"(fst ?c12,snd ?c12@snd ?c3) \\<in> conv ars\" (is \"?c123 \\<in> _\")\n     \"fst (fst ?c12,snd ?c12@snd ?c3) = fst ?c12\" \"lst_conv (fst ?c12,snd ?c12@snd ?c3) = lst_conv ?c3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (fst (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n          snd (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n          snd \\<delta>3),\n     snd (fst (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n          snd (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n          snd \\<delta>3) @\n     snd (conv_mirror \\<gamma>3))\n    \\<in> conv ars &&&\n    fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) =\n    fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) &&&\n    lst_conv\n     (fst (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3),\n      snd (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3) @\n      snd (conv_mirror \\<gamma>3)) =\n    lst_conv (conv_mirror \\<gamma>3)", "using conv_concat[OF c12(1) c3(1) eq]"], ["proof (prove)\nusing this:\n  (fst (fst (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n        snd (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n        snd \\<delta>3),\n   snd (fst (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n        snd (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n        snd \\<delta>3) @\n   snd (conv_mirror \\<gamma>3))\n  \\<in> conv ars\n  lst_conv\n   (fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3),\n    snd (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) @\n    snd (conv_mirror \\<gamma>3)) =\n  lst_conv (conv_mirror \\<gamma>3)\n\ngoal (1 subgoal):\n 1. (fst (fst (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n          snd (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n          snd \\<delta>3),\n     snd (fst (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n          snd (conv_mirror\n                (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n          snd \\<delta>3) @\n     snd (conv_mirror \\<gamma>3))\n    \\<in> conv ars &&&\n    fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) =\n    fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) &&&\n    lst_conv\n     (fst (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3),\n      snd (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3) @\n      snd (conv_mirror \\<gamma>3)) =\n    lst_conv (conv_mirror \\<gamma>3)", "by auto"], ["proof (state)\nthis:\n  (fst (fst (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n        snd (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n        snd \\<delta>3),\n   snd (fst (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n        snd (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n        snd \\<delta>3) @\n   snd (conv_mirror \\<gamma>3))\n  \\<in> conv ars\n  fst (fst (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3),\n       snd (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3) @\n       snd (conv_mirror \\<gamma>3)) =\n  fst (fst (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n       snd (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n       snd \\<delta>3)\n  lst_conv\n   (fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3),\n    snd (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) @\n    snd (conv_mirror \\<gamma>3)) =\n  lst_conv (conv_mirror \\<gamma>3)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have eq: \"lst_conv ?c123 = fst ?c4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst_conv\n     (fst (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3),\n      snd (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3) @\n      snd (conv_mirror \\<gamma>3)) =\n    fst (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))", "using c123 c2 c4 onetwo1 onetwo2"], ["proof (prove)\nusing this:\n  (fst (fst (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n        snd (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n        snd \\<delta>3),\n   snd (fst (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n        snd (conv_mirror\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n        snd \\<delta>3) @\n   snd (conv_mirror \\<gamma>3))\n  \\<in> conv ars\n  fst (fst (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3),\n       snd (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3) @\n       snd (conv_mirror \\<gamma>3)) =\n  fst (fst (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n       snd (conv_mirror\n             (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n       snd \\<delta>3)\n  lst_conv\n   (fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3),\n    snd (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) @\n    snd (conv_mirror \\<gamma>3)) =\n  lst_conv (conv_mirror \\<gamma>3)\n  \\<delta>3 \\<in> conv ars\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst \\<delta>3 = fst \\<delta>3\n  lst_conv \\<delta>3 = lst_conv \\<gamma>3\n  (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars\n  lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n  lst \\<gamma>1'''\n  set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n\ngoal (1 subgoal):\n 1. lst_conv\n     (fst (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3),\n      snd (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3) @\n      snd (conv_mirror \\<gamma>3)) =\n    fst (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | x # xs \\<Rightarrow>\n                       let (d, \\<alpha>, t) = x\n                       in (fst (conv_mirror (t, xs)),\n                           snd (conv_mirror (t, xs)) @\n                           [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | x # xs \\<Rightarrow>\n                       let (d, \\<alpha>, t) = x\n                       in (fst (conv_mirror (t, xs)),\n                           snd (conv_mirror (t, xs)) @\n                           [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | x # xs \\<Rightarrow>\n                         let (d, \\<alpha>, t) = x\n                         in (fst (conv_mirror (t, xs)),\n                             snd (conv_mirror (t, xs)) @\n                             [(\\<not> d, \\<alpha>, s)])))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | x # xs \\<Rightarrow>\n                let (d, \\<alpha>, t) = x\n                in (fst (conv_mirror (t, xs)),\n                    snd (conv_mirror (t, xs)) @\n                    [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | x # xs \\<Rightarrow>\n                let (d, \\<alpha>, t) = x\n                in (fst (conv_mirror (t, xs)),\n                    snd (conv_mirror (t, xs)) @\n                    [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | x # xs \\<Rightarrow>\n                  let (d, \\<alpha>, t) = x\n                  in (fst (conv_mirror (t, xs)),\n                      snd (conv_mirror (t, xs)) @\n                      [(\\<not> d, \\<alpha>, s)]))) =\n     lst_conv\n      (case \\<gamma>3 of\n       (s, ss) \\<Rightarrow>\n         case ss of [] \\<Rightarrow> (s, ss)\n         | x # xs \\<Rightarrow>\n             let (d, \\<alpha>, t) = x\n             in (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)]));\n     \\<delta>3 \\<in> conv ars;\n     set (labels_conv \\<delta>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     lst_conv \\<delta>3 = lst_conv \\<gamma>3;\n     (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars;\n     lst_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) =\n     lst \\<gamma>1''';\n     set (labels_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step};\n     set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step};\n     length (labels \\<sigma>2) \\<le> Suc 0;\n     length (labels \\<tau>2) \\<le> Suc 0;\n     set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step};\n     set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step};\n     set (labels \\<sigma>3')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<tau>3')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     set (labels \\<gamma>1''')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<delta>1''')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     snd \\<beta>_step = fst \\<sigma>1; snd \\<alpha>_step = fst \\<tau>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<sigma>2 = fst \\<sigma>3'; lst \\<tau>2 = fst \\<tau>3';\n     lst \\<sigma>3' = lst \\<gamma>1'''; fst \\<gamma>1''' = fst \\<gamma>3;\n     lst \\<tau>3' = lst \\<delta>1''';\n     fst \\<delta>1''' = fst \\<delta>3\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (case \\<gamma>3 of\n                        (s, ss) \\<Rightarrow>\n                          case ss of [] \\<Rightarrow> (s, ss)\n                          | x # xs \\<Rightarrow>\n                              let (d, \\<alpha>, t) = x\n                              in (fst (conv_mirror (t, xs)),\n                                  snd (conv_mirror (t, xs)) @\n                                  [(\\<not> d, \\<alpha>, s)])) =\n                      fst \\<gamma>3", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @\n                   [(\\<not> d, \\<alpha>, s)]))) =\n     lst_conv\n      (case \\<gamma>3 of\n       (s, ss) \\<Rightarrow>\n         case ss of [] \\<Rightarrow> (s, ss)\n         | (d, \\<alpha>, t) # xs \\<Rightarrow>\n             (fst (conv_mirror (t, xs)),\n              snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)]));\n     \\<delta>3 \\<in> conv ars;\n     set (labels_conv \\<delta>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     lst_conv \\<delta>3 = lst_conv \\<gamma>3;\n     (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars;\n     lst_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) =\n     lst \\<gamma>1''';\n     set (labels_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step};\n     set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step};\n     length (labels \\<sigma>2) \\<le> Suc 0;\n     length (labels \\<tau>2) \\<le> Suc 0;\n     set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step};\n     set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step};\n     set (labels \\<sigma>3')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<tau>3')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     set (labels \\<gamma>1''')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<delta>1''')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     snd \\<beta>_step = fst \\<sigma>1; snd \\<alpha>_step = fst \\<tau>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<sigma>2 = fst \\<sigma>3'; lst \\<tau>2 = fst \\<tau>3';\n     lst \\<sigma>3' = lst \\<gamma>1'''; fst \\<gamma>1''' = fst \\<gamma>3;\n     lst \\<tau>3' = lst \\<delta>1''';\n     fst \\<delta>1''' = fst \\<delta>3\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (case \\<gamma>3 of\n                        (s, ss) \\<Rightarrow>\n                          case ss of [] \\<Rightarrow> (s, ss)\n                          | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                              (fst (conv_mirror (t, xs)),\n                               snd (conv_mirror (t, xs)) @\n                               [(\\<not> d, \\<alpha>, s)])) =\n                      fst \\<gamma>3", "using c3(4)"], ["proof (prove)\nusing this:\n  lst_conv (conv_mirror \\<gamma>3) = fst \\<gamma>1'''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @\n                   [(\\<not> d, \\<alpha>, s)]))) =\n     lst_conv\n      (case \\<gamma>3 of\n       (s, ss) \\<Rightarrow>\n         case ss of [] \\<Rightarrow> (s, ss)\n         | (d, \\<alpha>, t) # xs \\<Rightarrow>\n             (fst (conv_mirror (t, xs)),\n              snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)]));\n     \\<delta>3 \\<in> conv ars;\n     set (labels_conv \\<delta>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     lst_conv \\<delta>3 = lst_conv \\<gamma>3;\n     (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars;\n     lst_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) =\n     lst \\<gamma>1''';\n     set (labels_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step};\n     set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step};\n     length (labels \\<sigma>2) \\<le> Suc 0;\n     length (labels \\<tau>2) \\<le> Suc 0;\n     set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step};\n     set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step};\n     set (labels \\<sigma>3')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<tau>3')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     set (labels \\<gamma>1''')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<delta>1''')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     snd \\<beta>_step = fst \\<sigma>1; snd \\<alpha>_step = fst \\<tau>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<sigma>2 = fst \\<sigma>3'; lst \\<tau>2 = fst \\<tau>3';\n     lst \\<sigma>3' = lst \\<gamma>1'''; fst \\<gamma>1''' = fst \\<gamma>3;\n     lst \\<tau>3' = lst \\<delta>1''';\n     fst \\<delta>1''' = fst \\<delta>3\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (case \\<gamma>3 of\n                        (s, ss) \\<Rightarrow>\n                          case ss of [] \\<Rightarrow> (s, ss)\n                          | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                              (fst (conv_mirror (t, xs)),\n                               snd (conv_mirror (t, xs)) @\n                               [(\\<not> d, \\<alpha>, s)])) =\n                      fst \\<gamma>3", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>3)])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>3, map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>3)])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @\n                   [(\\<not> d, \\<alpha>, s)]))) =\n     lst_conv\n      (case \\<gamma>3 of\n       (s, ss) \\<Rightarrow>\n         case ss of [] \\<Rightarrow> (s, ss)\n         | (d, \\<alpha>, t) # xs \\<Rightarrow>\n             (fst (conv_mirror (t, xs)),\n              snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)]));\n     \\<delta>3 \\<in> conv ars;\n     set (labels_conv \\<delta>3)\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     lst_conv \\<delta>3 = lst_conv \\<gamma>3;\n     (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars;\n     lst_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')) =\n     lst \\<gamma>1''';\n     set (labels_conv (fst \\<gamma>3, map (Pair True) (snd \\<gamma>1''')))\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step};\n     set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step};\n     length (labels \\<sigma>2) \\<le> Suc 0;\n     length (labels \\<tau>2) \\<le> Suc 0;\n     set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step};\n     set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step};\n     set (labels \\<sigma>3')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<tau>3')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     set (labels \\<gamma>1''')\n     \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n     set (labels \\<delta>1''')\n     \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step};\n     snd \\<beta>_step = fst \\<sigma>1; snd \\<alpha>_step = fst \\<tau>1;\n     lst \\<sigma>1 = fst \\<sigma>2; lst \\<tau>1 = fst \\<tau>2;\n     lst \\<sigma>2 = fst \\<sigma>3'; lst \\<tau>2 = fst \\<tau>3';\n     lst \\<sigma>3' = lst \\<gamma>1'''; fst \\<gamma>1''' = fst \\<gamma>3;\n     lst \\<tau>3' = lst \\<delta>1'''; fst \\<delta>1''' = fst \\<delta>3;\n     lst_conv\n      (case \\<gamma>3 of\n       (s, ss) \\<Rightarrow>\n         case ss of [] \\<Rightarrow> (s, ss)\n         | x # xs \\<Rightarrow>\n             let (d, \\<alpha>, t) = x\n             in (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) =\n     fst \\<gamma>3\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (case \\<gamma>3 of\n                        (s, ss) \\<Rightarrow>\n                          case ss of [] \\<Rightarrow> (s, ss)\n                          | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                              (fst (conv_mirror (t, xs)),\n                               snd (conv_mirror (t, xs)) @\n                               [(\\<not> d, \\<alpha>, s)])) =\n                      fst \\<gamma>3", "by metis"], ["proof (state)\nthis:\n  lst_conv\n   (fst (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3),\n    snd (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3) @\n    snd (conv_mirror \\<gamma>3)) =\n  fst (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c1234: \"(fst ?c123,snd ?c123@snd ?c4) \\<in> conv ars\" (is \"?c1234 \\<in> _\")\n     \"fst (fst ?c123,snd ?c123@snd ?c4) = fst ?c123\" \"lst_conv (fst ?c123,snd ?c123@snd ?c4) = lst_conv ?c4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (fst (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3),\n          snd (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3) @\n          snd (conv_mirror \\<gamma>3)),\n     snd (fst (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3),\n          snd (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3) @\n          snd (conv_mirror \\<gamma>3)) @\n     snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<in> conv ars &&&\n    fst (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) &&&\n    lst_conv\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))", "using conv_concat[OF c123(1) c4(1) eq]"], ["proof (prove)\nusing this:\n  (fst (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)),\n   snd (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)) @\n   snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<in> conv ars\n  lst_conv\n   (fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)),\n    snd (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) @\n    snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n\ngoal (1 subgoal):\n 1. (fst (fst (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3),\n          snd (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3) @\n          snd (conv_mirror \\<gamma>3)),\n     snd (fst (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3),\n          snd (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3) @\n          snd (conv_mirror \\<gamma>3)) @\n     snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<in> conv ars &&&\n    fst (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) &&&\n    lst_conv\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))", "by auto"], ["proof (state)\nthis:\n  (fst (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)),\n   snd (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)) @\n   snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<in> conv ars\n  fst (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  fst (fst (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3),\n       snd (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3) @\n       snd (conv_mirror \\<gamma>3))\n  lst_conv\n   (fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)),\n    snd (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) @\n    snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "hence c1234: \"?c1234 \\<in> conv ars\" (is \"?c1234 \\<in> _\")\n     \"fst (?c1234) = lst \\<tau>3'\" \"lst_conv ?c1234 = lst \\<sigma>3'\""], ["proof (prove)\nusing this:\n  (fst (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)),\n   snd (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)) @\n   snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<in> conv ars\n  fst (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  fst (fst (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3),\n       snd (fst (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n            snd (conv_mirror\n                  (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n            snd \\<delta>3) @\n       snd (conv_mirror \\<gamma>3))\n  lst_conv\n   (fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)),\n    snd (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) @\n    snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\n\ngoal (1 subgoal):\n 1. (fst (fst (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3),\n          snd (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3) @\n          snd (conv_mirror \\<gamma>3)),\n     snd (fst (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3),\n          snd (fst (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))),\n               snd (conv_mirror\n                     (fst \\<delta>1''',\n                      map (Pair True) (snd \\<delta>1'''))) @\n               snd \\<delta>3) @\n          snd (conv_mirror \\<gamma>3)) @\n     snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n    \\<in> conv ars &&&\n    fst (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    lst \\<tau>3' &&&\n    lst_conv\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n    lst \\<sigma>3'", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | x # xs \\<Rightarrow>\n                       let (d, \\<alpha>, t) = x\n                       in (fst (conv_mirror (t, xs)),\n                           snd (conv_mirror (t, xs)) @\n                           [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | x # xs \\<Rightarrow>\n                       let (d, \\<alpha>, t) = x\n                       in (fst (conv_mirror (t, xs)),\n                           snd (conv_mirror (t, xs)) @\n                           [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | x # xs \\<Rightarrow>\n                         let (d, \\<alpha>, t) = x\n                         in (fst (conv_mirror (t, xs)),\n                             snd (conv_mirror (t, xs)) @\n                             [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | x # xs \\<Rightarrow>\n                let (d, \\<alpha>, t) = x\n                in (fst (conv_mirror (t, xs)),\n                    snd (conv_mirror (t, xs)) @\n                    [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | x # xs \\<Rightarrow>\n                let (d, \\<alpha>, t) = x\n                in (fst (conv_mirror (t, xs)),\n                    snd (conv_mirror (t, xs)) @\n                    [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | x # xs \\<Rightarrow>\n                  let (d, \\<alpha>, t) = x\n                  in (fst (conv_mirror (t, xs)),\n                      snd (conv_mirror (t, xs)) @\n                      [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv\n      (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\\<rbrakk>\n    \\<Longrightarrow> fst (case map (Pair True) (snd \\<delta>1''') of\n                           [] \\<Rightarrow>\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))\n                           | x # xs \\<Rightarrow>\n                               let (d, \\<alpha>, t) = x\n                               in (fst (conv_mirror (t, xs)),\n                                   snd (conv_mirror (t, xs)) @\n                                   [(\\<not> d, \\<alpha>,\n                                     fst \\<delta>1''')])) =\n                      lst \\<tau>3'\n 2. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | x # xs \\<Rightarrow>\n                       let (d, \\<alpha>, t) = x\n                       in (fst (conv_mirror (t, xs)),\n                           snd (conv_mirror (t, xs)) @\n                           [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | x # xs \\<Rightarrow>\n                       let (d, \\<alpha>, t) = x\n                       in (fst (conv_mirror (t, xs)),\n                           snd (conv_mirror (t, xs)) @\n                           [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | x # xs \\<Rightarrow>\n                         let (d, \\<alpha>, t) = x\n                         in (fst (conv_mirror (t, xs)),\n                             snd (conv_mirror (t, xs)) @\n                             [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | x # xs \\<Rightarrow>\n                let (d, \\<alpha>, t) = x\n                in (fst (conv_mirror (t, xs)),\n                    snd (conv_mirror (t, xs)) @\n                    [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | x # xs \\<Rightarrow>\n                let (d, \\<alpha>, t) = x\n                in (fst (conv_mirror (t, xs)),\n                    snd (conv_mirror (t, xs)) @\n                    [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | x # xs \\<Rightarrow>\n                  let (d, \\<alpha>, t) = x\n                  in (fst (conv_mirror (t, xs)),\n                      snd (conv_mirror (t, xs)) @\n                      [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv\n      (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (fst \\<gamma>1''',\n                        map (Pair True) (snd \\<gamma>1''')) =\n                      lst \\<sigma>3'", "unfolding Let_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv\n      (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\\<rbrakk>\n    \\<Longrightarrow> fst (case map (Pair True) (snd \\<delta>1''') of\n                           [] \\<Rightarrow>\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))\n                           | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                               (fst (conv_mirror (t, xs)),\n                                snd (conv_mirror (t, xs)) @\n                                [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) =\n                      lst \\<tau>3'\n 2. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv\n      (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (fst \\<gamma>1''',\n                        map (Pair True) (snd \\<gamma>1''')) =\n                      lst \\<sigma>3'", "using c1(3)"], ["proof (prove)\nusing this:\n  fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  lst \\<tau>3'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv\n      (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\\<rbrakk>\n    \\<Longrightarrow> fst (case map (Pair True) (snd \\<delta>1''') of\n                           [] \\<Rightarrow>\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))\n                           | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                               (fst (conv_mirror (t, xs)),\n                                snd (conv_mirror (t, xs)) @\n                                [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) =\n                      lst \\<tau>3'\n 2. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv\n      (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (fst \\<gamma>1''',\n                        map (Pair True) (snd \\<gamma>1''')) =\n                      lst \\<sigma>3'", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''));\n     fst (case map (Pair True) (snd \\<delta>1''') of\n          [] \\<Rightarrow>\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n          | x # xs \\<Rightarrow>\n              let (d, \\<alpha>, t) = x\n              in (fst (conv_mirror (t, xs)),\n                  snd (conv_mirror (t, xs)) @\n                  [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) =\n     lst \\<tau>3'\\<rbrakk>\n    \\<Longrightarrow> fst (case map (Pair True) (snd \\<delta>1''') of\n                           [] \\<Rightarrow>\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))\n                           | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                               (fst (conv_mirror (t, xs)),\n                                snd (conv_mirror (t, xs)) @\n                                [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) =\n                      lst \\<tau>3'\n 2. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''));\n     fst (case map (Pair True) (snd \\<delta>1''') of\n          [] \\<Rightarrow>\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n          | x # xs \\<Rightarrow>\n              let (d, \\<alpha>, t) = x\n              in (fst (conv_mirror (t, xs)),\n                  snd (conv_mirror (t, xs)) @\n                  [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) =\n     lst \\<tau>3'\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (fst \\<gamma>1''',\n                        map (Pair True) (snd \\<gamma>1''')) =\n                      lst \\<sigma>3'", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''));\n     fst (case map (Pair True) (snd \\<delta>1''') of\n          [] \\<Rightarrow>\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n          | x # xs \\<Rightarrow>\n              let (d, \\<alpha>, t) = x\n              in (fst (conv_mirror (t, xs)),\n                  snd (conv_mirror (t, xs)) @\n                  [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) =\n     lst \\<tau>3'\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (fst \\<gamma>1''',\n                        map (Pair True) (snd \\<gamma>1''')) =\n                      lst \\<sigma>3'", "using c4(2) onetwo1"], ["proof (prove)\nusing this:\n  lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n  lst \\<gamma>1'''\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(fst (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n              snd (case map (Pair True) (snd \\<delta>1''') of\n                   [] \\<Rightarrow>\n                     (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n                   | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                       (fst (conv_mirror (t, xs)),\n                        snd (conv_mirror (t, xs)) @\n                        [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n              snd \\<delta>3 @\n              snd (case \\<gamma>3 of\n                   (s, ss) \\<Rightarrow>\n                     case ss of [] \\<Rightarrow> (s, ss)\n                     | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                         (fst (conv_mirror (t, xs)),\n                          snd (conv_mirror (t, xs)) @\n                          [(\\<not> d, \\<alpha>, s)])) @\n              map (Pair True) (snd \\<gamma>1'''))\n             \\<in> conv ars;\n     lst_conv\n      (fst (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])),\n       snd (case map (Pair True) (snd \\<delta>1''') of\n            [] \\<Rightarrow>\n              (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n            | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                (fst (conv_mirror (t, xs)),\n                 snd (conv_mirror (t, xs)) @\n                 [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) @\n       snd \\<delta>3 @\n       snd (case \\<gamma>3 of\n            (s, ss) \\<Rightarrow>\n              case ss of [] \\<Rightarrow> (s, ss)\n              | (d, \\<alpha>, t) # xs \\<Rightarrow>\n                  (fst (conv_mirror (t, xs)),\n                   snd (conv_mirror (t, xs)) @ [(\\<not> d, \\<alpha>, s)])) @\n       map (Pair True) (snd \\<gamma>1''')) =\n     lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''));\n     fst (case map (Pair True) (snd \\<delta>1''') of\n          [] \\<Rightarrow>\n            (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n          | x # xs \\<Rightarrow>\n              let (d, \\<alpha>, t) = x\n              in (fst (conv_mirror (t, xs)),\n                  snd (conv_mirror (t, xs)) @\n                  [(\\<not> d, \\<alpha>, fst \\<delta>1''')])) =\n     lst \\<tau>3'\\<rbrakk>\n    \\<Longrightarrow> lst_conv\n                       (fst \\<gamma>1''',\n                        map (Pair True) (snd \\<gamma>1''')) =\n                      lst \\<sigma>3'", "by metis"], ["proof (state)\nthis:\n  (fst (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)),\n   snd (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)) @\n   snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<in> conv ars\n  fst (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst \\<tau>3'\n  lst_conv\n   (fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)),\n    snd (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) @\n    snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst \\<sigma>3'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c12l: \"set (labels_conv ?c12) \\<subseteq> ds r {fst \\<alpha>_step, fst \\<beta>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using conv_concat_labels[OF c1(1) c2(1)] c1 c2"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (labels_conv\n                 (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))))\n           \\<subseteq> ?S;\n   set (labels_conv \\<delta>3) \\<subseteq> ?T\\<rbrakk>\n  \\<Longrightarrow> set (labels_conv\n                          (fst (conv_mirror\n                                 (fst \\<delta>1''',\n                                  map (Pair True) (snd \\<delta>1'''))),\n                           snd (conv_mirror\n                                 (fst \\<delta>1''',\n                                  map (Pair True) (snd \\<delta>1'''))) @\n                           snd \\<delta>3))\n                    \\<subseteq> ?S \\<union> ?T\n  conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))\n  \\<in> conv ars\n  set (labels_conv\n        (conv_mirror\n          (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  lst \\<tau>3'\n  lst_conv\n   (conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) =\n  fst \\<delta>3\n  \\<delta>3 \\<in> conv ars\n  set (labels_conv \\<delta>3)\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst \\<delta>3 = fst \\<delta>3\n  lst_conv \\<delta>3 = lst_conv \\<gamma>3\n\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n           snd (conv_mirror\n                 (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n           snd \\<delta>3))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  set (labels_conv\n        (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c123l: \"set (labels_conv ?c123) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using conv_concat_labels[OF c12(1) c3(1)] c12l c3"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (labels_conv\n                 (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3))\n           \\<subseteq> ?S;\n   set (labels_conv (conv_mirror \\<gamma>3)) \\<subseteq> ?T\\<rbrakk>\n  \\<Longrightarrow> set (labels_conv\n                          (fst (fst (conv_mirror\n(fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n                                snd (conv_mirror\n(fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n                                snd \\<delta>3),\n                           snd (fst (conv_mirror\n(fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n                                snd (conv_mirror\n(fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n                                snd \\<delta>3) @\n                           snd (conv_mirror \\<gamma>3)))\n                    \\<subseteq> ?S \\<union> ?T\n  set (labels_conv\n        (fst (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n         snd (conv_mirror\n               (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n         snd \\<delta>3))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  conv_mirror \\<gamma>3 \\<in> conv ars\n  set (labels_conv (conv_mirror \\<gamma>3))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  fst (conv_mirror \\<gamma>3) = lst_conv \\<delta>3\n  lst_conv (conv_mirror \\<gamma>3) = fst \\<gamma>1'''\n\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  set (labels_conv\n        (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have c1234l:\"set (labels_conv ?c1234) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst (fst (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3),\n                snd (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3) @\n                snd (conv_mirror \\<gamma>3)),\n           snd (fst (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3),\n                snd (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3) @\n                snd (conv_mirror \\<gamma>3)) @\n           snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using conv_concat_labels[OF c123(1) c4(1)] c123l c4"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (labels_conv\n                 (fst (fst (conv_mirror\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))),\n                       snd (conv_mirror\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))) @\n                       snd \\<delta>3),\n                  snd (fst (conv_mirror\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))),\n                       snd (conv_mirror\n                             (fst \\<delta>1''',\n                              map (Pair True) (snd \\<delta>1'''))) @\n                       snd \\<delta>3) @\n                  snd (conv_mirror \\<gamma>3)))\n           \\<subseteq> ?S;\n   set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n   \\<subseteq> ?T\\<rbrakk>\n  \\<Longrightarrow> set (labels_conv\n                          (fst (fst (fst\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n                                     snd\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n                                     snd \\<delta>3),\n                                snd (fst\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n                                     snd\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n                                     snd \\<delta>3) @\n                                snd (conv_mirror \\<gamma>3)),\n                           snd (fst (fst\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n                                     snd\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n                                     snd \\<delta>3),\n                                snd (fst\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n                                     snd\n(conv_mirror (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n                                     snd \\<delta>3) @\n                                snd (conv_mirror \\<gamma>3)) @\n                           snd (fst \\<gamma>1''',\n                                map (Pair True) (snd \\<gamma>1'''))))\n                    \\<subseteq> ?S \\<union> ?T\n  set (labels_conv\n        (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) \\<in> conv ars\n  lst_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')) =\n  lst \\<gamma>1'''\n  set (labels_conv (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set (labels_conv\n          (fst (fst (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3),\n                snd (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3) @\n                snd (conv_mirror \\<gamma>3)),\n           snd (fst (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3),\n                snd (fst (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))),\n                     snd (conv_mirror\n                           (fst \\<delta>1''',\n                            map (Pair True) (snd \\<delta>1'''))) @\n                     snd \\<delta>3) @\n                snd (conv_mirror \\<gamma>3)) @\n           snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  set (labels_conv\n        (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "hence \"set_mset (r|labels_conv ?c1234| ) \\<subseteq> ds r {fst \\<alpha>_step,fst \\<beta>_step}\""], ["proof (prove)\nusing this:\n  set (labels_conv\n        (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set_mset\n     r|labels_conv\n        (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))|\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using submultiset_implies_subset[OF lexmax_le_multiset[OF t]]"], ["proof (prove)\nusing this:\n  set (labels_conv\n        (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n  set_mset r|?\\<sigma>1| \\<subseteq> set_mset (mset ?\\<sigma>1)\n\ngoal (1 subgoal):\n 1. set_mset\n     r|labels_conv\n        (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))|\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "by auto"], ["proof (state)\nthis:\n  set_mset\n   r|labels_conv\n      (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))|\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "hence \"set_mset (measure_conv r ?c1234) \\<subseteq> dm r {#fst \\<beta>_step, fst \\<alpha>_step#}\""], ["proof (prove)\nusing this:\n  set_mset\n   r|labels_conv\n      (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))|\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set_mset\n     (measure_conv r\n       (fst (fst (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3),\n             snd (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3) @\n             snd (conv_mirror \\<gamma>3)),\n        snd (fst (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3),\n             snd (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3) @\n             snd (conv_mirror \\<gamma>3)) @\n        snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n    \\<subseteq> r \\<down>m {#fst \\<beta>_step, fst \\<alpha>_step#}", "unfolding measure_conv_def dm_def"], ["proof (prove)\nusing this:\n  set_mset\n   r|labels_conv\n      (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))|\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set_mset\n     r|labels_conv\n        (fst (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)),\n         snd (fst (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3),\n              snd (fst (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))),\n                   snd (conv_mirror\n                         (fst \\<delta>1''',\n                          map (Pair True) (snd \\<delta>1'''))) @\n                   snd \\<delta>3) @\n              snd (conv_mirror \\<gamma>3)) @\n         snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))|\n    \\<subseteq> r \\<down>s set_mset {#fst \\<beta>_step, fst \\<alpha>_step#}", "by (auto simp: add_mset_commute)"], ["proof (state)\nthis:\n  set_mset\n   (measure_conv r\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step, fst \\<alpha>_step#}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "hence m: \"set_mset (measure_conv r ?c1234) \\<subseteq> dm r {#fst \\<alpha>_step, fst \\<beta>_step#}\""], ["proof (prove)\nusing this:\n  set_mset\n   (measure_conv r\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>m {#fst \\<beta>_step, fst \\<alpha>_step#}\n\ngoal (1 subgoal):\n 1. set_mset\n     (measure_conv r\n       (fst (fst (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3),\n             snd (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3) @\n             snd (conv_mirror \\<gamma>3)),\n        snd (fst (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3),\n             snd (fst (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))),\n                  snd (conv_mirror\n                        (fst \\<delta>1''',\n                         map (Pair True) (snd \\<delta>1'''))) @\n                  snd \\<delta>3) @\n             snd (conv_mirror \\<gamma>3)) @\n        snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n    \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}", "by (auto simp: add_mset_commute)"], ["proof (state)\nthis:\n  set_mset\n   (measure_conv r\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "from c1234 m"], ["proof (chain)\npicking this:\n  (fst (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)),\n   snd (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)) @\n   snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<in> conv ars\n  fst (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst \\<tau>3'\n  lst_conv\n   (fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)),\n    snd (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) @\n    snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst \\<sigma>3'\n  set_mset\n   (measure_conv r\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}", "obtain \\<rho> where \\<rho>:\"\\<rho> \\<in> conv ars\" and \\<rho>m:\"set_mset (measure_conv r \\<rho>) \\<subseteq> dm r {# fst \\<alpha>_step, fst \\<beta>_step#}\"\n    and eq1: \"fst \\<rho> = lst \\<tau>3'\" and eq2: \"lst_conv \\<rho> = lst \\<sigma>3'\""], ["proof (prove)\nusing this:\n  (fst (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)),\n   snd (fst (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3),\n        snd (fst (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n             snd (conv_mirror\n                   (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))) @\n             snd \\<delta>3) @\n        snd (conv_mirror \\<gamma>3)) @\n   snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1''')))\n  \\<in> conv ars\n  fst (fst (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)),\n       snd (fst (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3),\n            snd (fst (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))),\n                 snd (conv_mirror\n                       (fst \\<delta>1''',\n                        map (Pair True) (snd \\<delta>1'''))) @\n                 snd \\<delta>3) @\n            snd (conv_mirror \\<gamma>3)) @\n       snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst \\<tau>3'\n  lst_conv\n   (fst (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)),\n    snd (fst (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3),\n         snd (fst (conv_mirror\n                    (fst \\<delta>1''', map (Pair True) (snd \\<delta>1'''))),\n              snd (conv_mirror\n                    (fst \\<delta>1''',\n                     map (Pair True) (snd \\<delta>1'''))) @\n              snd \\<delta>3) @\n         snd (conv_mirror \\<gamma>3)) @\n    snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))) =\n  lst \\<sigma>3'\n  set_mset\n   (measure_conv r\n     (fst (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)),\n      snd (fst (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3),\n           snd (fst (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))),\n                snd (conv_mirror\n                      (fst \\<delta>1''',\n                       map (Pair True) (snd \\<delta>1'''))) @\n                snd \\<delta>3) @\n           snd (conv_mirror \\<gamma>3)) @\n      snd (fst \\<gamma>1''', map (Pair True) (snd \\<gamma>1'''))))\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        \\<lbrakk>\\<rho> \\<in> conv ars;\n         set_mset (measure_conv r \\<rho>)\n         \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#};\n         fst \\<rho> = lst \\<tau>3';\n         lst_conv \\<rho> = lst \\<sigma>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<rho> \\<in> conv ars\n  set_mset (measure_conv r \\<rho>)\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}\n  fst \\<rho> = lst \\<tau>3'\n  lst_conv \\<rho> = lst \\<sigma>3'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have M:\"({#fst \\<alpha>_step,fst \\<beta>_step#},{#fst \\<beta>_step,fst \\<alpha>_step#}) \\<in> mul_eq r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#fst \\<alpha>_step, fst \\<beta>_step#},\n     {#fst \\<beta>_step, fst \\<alpha>_step#})\n    \\<in> mul_eq r", "using mul_eq_reflexive add_mset_commute"], ["proof (prove)\nusing this:\n  (?M, ?M) \\<in> mul_eq ?r\n  add_mset ?x (add_mset ?y ?M) = add_mset ?y (add_mset ?x ?M)\n\ngoal (1 subgoal):\n 1. ({#fst \\<alpha>_step, fst \\<beta>_step#},\n     {#fst \\<beta>_step, fst \\<alpha>_step#})\n    \\<in> mul_eq r", "by metis"], ["proof (state)\nthis:\n  ({#fst \\<alpha>_step, fst \\<beta>_step#},\n   {#fst \\<beta>_step, fst \\<alpha>_step#})\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "from conv_imp_valley[OF t IH \\<rho> \\<rho>m M]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (?s, [\\<beta>_step] @ ?\\<rho>_step), ?s,\n                        [\\<alpha>_step] @ ?\\<upsilon>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<beta>_step] @ \\<upsilon>_step),\n                                 s, [\\<alpha>_step] @ \\<rho>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (?s, [\\<beta>_step] @ ?\\<rho>_step), ?s,\n                [\\<alpha>_step] @ ?\\<upsilon>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                       fst \\<sigma> = fst \\<rho> \\<and>\n                       fst \\<tau> = lst_conv \\<rho> \\<and>\n                       lst \\<sigma> = lst \\<tau> \\<and>\n                       set_mset\n                        (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n                       \\<subseteq> r \\<down>m\n                                   {#fst \\<alpha>_step, fst \\<beta>_step#}", "obtain \\<tau>3'' \\<sigma>3'' where\n     \\<tau>3'':\"\\<tau>3'' \\<in> seq ars\" and \\<sigma>3'': \"\\<sigma>3'' \\<in> seq ars\" and eq:\"fst \\<tau>3'' = fst \\<rho> \\<and> fst \\<sigma>3'' = lst_conv \\<rho> \\<and> lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n    set_mset (measure r (\\<tau>3'', \\<sigma>3'')) \\<subseteq> dm r {#fst \\<alpha>_step, fst \\<beta>_step#}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (?s, [\\<beta>_step] @ ?\\<rho>_step), ?s,\n                        [\\<alpha>_step] @ ?\\<upsilon>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<beta>_step] @ \\<upsilon>_step),\n                                 s, [\\<alpha>_step] @ \\<rho>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (?s, [\\<beta>_step] @ ?\\<rho>_step), ?s,\n                [\\<alpha>_step] @ ?\\<upsilon>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma> \\<tau>.\n                       {\\<sigma>, \\<tau>} \\<subseteq> seq ars \\<and>\n                       fst \\<sigma> = fst \\<rho> \\<and>\n                       fst \\<tau> = lst_conv \\<rho> \\<and>\n                       lst \\<sigma> = lst \\<tau> \\<and>\n                       set_mset\n                        (Decreasing_Diagrams.measure r (\\<sigma>, \\<tau>))\n                       \\<subseteq> r \\<down>m\n                                   {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>3'' \\<sigma>3''.\n        \\<lbrakk>\\<tau>3'' \\<in> seq ars; \\<sigma>3'' \\<in> seq ars;\n         fst \\<tau>3'' = fst \\<rho> \\<and>\n         fst \\<sigma>3'' = lst_conv \\<rho> \\<and>\n         lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n         set_mset (Decreasing_Diagrams.measure r (\\<tau>3'', \\<sigma>3''))\n         \\<subseteq> r \\<down>m\n                     {#fst \\<alpha>_step, fst \\<beta>_step#}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b ba.\n                \\<lbrakk>(fst \\<rho>, b) \\<in> seq ars;\n                 (lst_conv \\<rho>, ba) \\<in> seq ars;\n                 lst (fst \\<rho>, b) = lst (lst_conv \\<rho>, ba) \\<and>\n                 set_mset\n                  (Decreasing_Diagrams.measure r\n                    ((fst \\<rho>, b), lst_conv \\<rho>, ba))\n                 \\<subseteq> r \\<down>m\n                             {#fst \\<alpha>_step,\n                               fst \\<beta>_step#}\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>sa \\<rho>_stepa \\<upsilon>_stepa.\n        (\\<And>a b aa ba.\n            \\<lbrakk>(((a, b), aa, ba), (sa, \\<beta>_step # \\<rho>_stepa),\n                      sa, \\<alpha>_step # \\<upsilon>_stepa)\n                     \\<in> pex r;\n             peak ars ((a, b), aa, ba)\\<rbrakk>\n            \\<Longrightarrow> (((a, b), aa, ba),\n                               (s, \\<beta>_step # \\<upsilon>_step), s,\n                               \\<alpha>_step # \\<rho>_step)\n                              \\<in> pex r) \\<Longrightarrow>\n        \\<exists>a b.\n           (a, b) \\<in> seq ars \\<and>\n           (\\<exists>ba.\n               (lst_conv \\<rho>, ba) \\<in> seq ars \\<and>\n               a = fst \\<rho> \\<and>\n               lst (a, b) = lst (lst_conv \\<rho>, ba) \\<and>\n               set_mset\n                (Decreasing_Diagrams.measure r\n                  ((a, b), lst_conv \\<rho>, ba))\n               \\<subseteq> r \\<down>m\n                           {#fst \\<alpha>_step, fst \\<beta>_step#})\\<rbrakk>\n    \\<Longrightarrow> thesis", "by fast"], ["proof (state)\nthis:\n  \\<tau>3'' \\<in> seq ars\n  \\<sigma>3'' \\<in> seq ars\n  fst \\<tau>3'' = fst \\<rho> \\<and>\n  fst \\<sigma>3'' = lst_conv \\<rho> \\<and>\n  lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<tau>3'', \\<sigma>3''))\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have s1: \"set (labels \\<sigma>3'') \\<subseteq> ds r {fst \\<alpha>_step, fst \\<beta>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels \\<sigma>3'')\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "using eq"], ["proof (prove)\nusing this:\n  fst \\<tau>3'' = fst \\<rho> \\<and>\n  fst \\<sigma>3'' = lst_conv \\<rho> \\<and>\n  lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<tau>3'', \\<sigma>3''))\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. set (labels \\<sigma>3'')\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "unfolding dm_def measure_def"], ["proof (prove)\nusing this:\n  fst \\<tau>3'' = fst \\<rho> \\<and>\n  fst \\<sigma>3'' = lst_conv \\<rho> \\<and>\n  lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n  set_mset\n   (r|labels (fst (\\<tau>3'', \\<sigma>3''))| +\n    r|labels (snd (\\<tau>3'', \\<sigma>3''))|)\n  \\<subseteq> r \\<down>s set_mset {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. set (labels \\<sigma>3'')\n    \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (labels \\<sigma>3'');\n        fst \\<tau>3'' = fst \\<rho>; fst \\<sigma>3'' = lst_conv \\<rho>;\n        lst \\<tau>3'' = lst \\<sigma>3'';\n        set_mset r|labels \\<tau>3''|\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n        set_mset r|labels \\<sigma>3''|\n        \\<subseteq> r \\<down>s\n                    {fst \\<alpha>_step, fst \\<beta>_step}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> r \\<down>s\n                                 {fst \\<alpha>_step, fst \\<beta>_step}", "by (metis (hide_lams, no_types) insert_commute lexmax_set subsetD t)"], ["proof (state)\nthis:\n  set (labels \\<sigma>3'')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have s2: \"set (labels \\<tau>3'') \\<subseteq> ds r {fst \\<beta>_step, fst \\<alpha>_step}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (labels \\<tau>3'')\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}", "using eq"], ["proof (prove)\nusing this:\n  fst \\<tau>3'' = fst \\<rho> \\<and>\n  fst \\<sigma>3'' = lst_conv \\<rho> \\<and>\n  lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<tau>3'', \\<sigma>3''))\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>3'')\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}", "unfolding dm_def measure_def"], ["proof (prove)\nusing this:\n  fst \\<tau>3'' = fst \\<rho> \\<and>\n  fst \\<sigma>3'' = lst_conv \\<rho> \\<and>\n  lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n  set_mset\n   (r|labels (fst (\\<tau>3'', \\<sigma>3''))| +\n    r|labels (snd (\\<tau>3'', \\<sigma>3''))|)\n  \\<subseteq> r \\<down>s set_mset {#fst \\<alpha>_step, fst \\<beta>_step#}\n\ngoal (1 subgoal):\n 1. set (labels \\<tau>3'')\n    \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (labels \\<tau>3''); fst \\<tau>3'' = fst \\<rho>;\n        fst \\<sigma>3'' = lst_conv \\<rho>; lst \\<tau>3'' = lst \\<sigma>3'';\n        set_mset r|labels \\<tau>3''|\n        \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step};\n        set_mset r|labels \\<sigma>3''|\n        \\<subseteq> r \\<down>s\n                    {fst \\<alpha>_step, fst \\<beta>_step}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> r \\<down>s\n                                 {fst \\<beta>_step, fst \\<alpha>_step}", "by (metis (hide_lams, no_types) insert_commute lexmax_set subsetD t)"], ["proof (state)\nthis:\n  set (labels \\<tau>3'')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \\<sigma>1_eq: \"lst (s, [\\<beta>_step]) = fst \\<sigma>1\" and \\<tau>1_eq: \"lst (s, [\\<alpha>_step]) = fst \\<tau>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (s, [\\<beta>_step]) = fst \\<sigma>1 &&&\n    lst (s, [\\<alpha>_step]) = fst \\<tau>1", "using onetwo1 onetwo2 surjective_pairing"], ["proof (prove)\nusing this:\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. lst (s, [\\<beta>_step]) = fst \\<sigma>1 &&&\n    lst (s, [\\<alpha>_step]) = fst \\<tau>1", "unfolding lst_def"], ["proof (prove)\nusing this:\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  (if snd \\<sigma>1 = [] then fst \\<sigma>1\n   else snd (last (snd \\<sigma>1))) =\n  fst \\<sigma>2 \\<and>\n  (if snd \\<sigma>2 = [] then fst \\<sigma>2\n   else snd (last (snd \\<sigma>2))) =\n  fst \\<sigma>3' \\<and>\n  (if snd \\<sigma>3' = [] then fst \\<sigma>3'\n   else snd (last (snd \\<sigma>3'))) =\n  (if snd \\<gamma>1''' = [] then fst \\<gamma>1'''\n   else snd (last (snd \\<gamma>1'''))) \\<and>\n  fst \\<gamma>1''' = fst \\<gamma>3\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  (if snd \\<tau>1 = [] then fst \\<tau>1 else snd (last (snd \\<tau>1))) =\n  fst \\<tau>2 \\<and>\n  (if snd \\<tau>2 = [] then fst \\<tau>2 else snd (last (snd \\<tau>2))) =\n  fst \\<tau>3' \\<and>\n  (if snd \\<tau>3' = [] then fst \\<tau>3' else snd (last (snd \\<tau>3'))) =\n  (if snd \\<delta>1''' = [] then fst \\<delta>1'''\n   else snd (last (snd \\<delta>1'''))) \\<and>\n  fst \\<delta>1''' = fst \\<delta>3\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. (if snd (s, [\\<beta>_step]) = [] then fst (s, [\\<beta>_step])\n     else snd (last (snd (s, [\\<beta>_step])))) =\n    fst \\<sigma>1 &&&\n    (if snd (s, [\\<alpha>_step]) = [] then fst (s, [\\<alpha>_step])\n     else snd (last (snd (s, [\\<alpha>_step])))) =\n    fst \\<tau>1", "by auto"], ["proof (state)\nthis:\n  lst (s, [\\<beta>_step]) = fst \\<sigma>1\n  lst (s, [\\<alpha>_step]) = fst \\<tau>1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have eqn: \" lst \\<tau>3'' = lst \\<sigma>3''\" and \\<sigma>_eq: \"lst \\<sigma>3' = fst \\<sigma>3''\" and \\<tau>_eq: \"lst \\<tau>3' = fst \\<tau>3''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst \\<tau>3'' = lst \\<sigma>3'' &&&\n    lst \\<sigma>3' = fst \\<sigma>3'' &&& lst \\<tau>3' = fst \\<tau>3''", "using eq eq1 eq2"], ["proof (prove)\nusing this:\n  fst \\<tau>3'' = fst \\<rho> \\<and>\n  fst \\<sigma>3'' = lst_conv \\<rho> \\<and>\n  lst \\<tau>3'' = lst \\<sigma>3'' \\<and>\n  set_mset (Decreasing_Diagrams.measure r (\\<tau>3'', \\<sigma>3''))\n  \\<subseteq> r \\<down>m {#fst \\<alpha>_step, fst \\<beta>_step#}\n  fst \\<rho> = lst \\<tau>3'\n  lst_conv \\<rho> = lst \\<sigma>3'\n\ngoal (1 subgoal):\n 1. lst \\<tau>3'' = lst \\<sigma>3'' &&&\n    lst \\<sigma>3' = fst \\<sigma>3'' &&& lst \\<tau>3' = fst \\<tau>3''", "by auto"], ["proof (state)\nthis:\n  lst \\<tau>3'' = lst \\<sigma>3''\n  lst \\<sigma>3' = fst \\<sigma>3''\n  lst \\<tau>3' = fst \\<tau>3''\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \\<sigma>3':\"(fst \\<sigma>3',snd \\<sigma>3'@snd \\<sigma>3'') \\<in> seq ars\" (is \"?\\<sigma>3 \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') \\<in> seq ars", "using seq_concat[OF _ \\<sigma>3'' \\<sigma>_eq] sigmas"], ["proof (prove)\nusing this:\n  \\<sigma>3' \\<in> seq ars \\<Longrightarrow>\n  (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') \\<in> seq ars\n  \\<sigma>3' \\<in> seq ars \\<Longrightarrow>\n  lst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') = lst \\<sigma>3''\n  {\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') \\<in> seq ars", "by blast"], ["proof (state)\nthis:\n  (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \\<tau>3':\"(fst \\<tau>3',snd \\<tau>3'@snd \\<tau>3'') \\<in> seq ars\" (is \"?\\<tau>3 \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') \\<in> seq ars", "using seq_concat[OF _ \\<tau>3'' \\<tau>_eq] taus"], ["proof (prove)\nusing this:\n  \\<tau>3' \\<in> seq ars \\<Longrightarrow>\n  (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') \\<in> seq ars\n  \\<tau>3' \\<in> seq ars \\<Longrightarrow>\n  lst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') = lst \\<tau>3''\n  {\\<tau>1, \\<tau>2, \\<tau>3', \\<delta>1'''} \\<subseteq> seq ars\n\ngoal (1 subgoal):\n 1. (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') \\<in> seq ars", "by blast"], ["proof (state)\nthis:\n  (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \"fst ?\\<sigma>3 = lst \\<sigma>2\" and \"fst ?\\<tau>3 = lst \\<tau>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') =\n    lst \\<sigma>2 &&&\n    fst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') = lst \\<tau>2", "using onetwo1 onetwo2"], ["proof (prove)\nusing this:\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n\ngoal (1 subgoal):\n 1. fst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') =\n    lst \\<sigma>2 &&&\n    fst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') = lst \\<tau>2", "by auto"], ["proof (state)\nthis:\n  fst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') = lst \\<sigma>2\n  fst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') = lst \\<tau>2\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have lst:\"lst ?\\<sigma>3 = lst ?\\<tau>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') =\n    lst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')", "using eqn \\<sigma>3'' \\<sigma>3' \\<sigma>_eq \\<tau>3'' \\<tau>_eq \\<tau>3' seq_chop(1) seq_concat(2) surjective_pairing"], ["proof (prove)\nusing this:\n  lst \\<tau>3'' = lst \\<sigma>3''\n  \\<sigma>3'' \\<in> seq ars\n  (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') \\<in> seq ars\n  lst \\<sigma>3' = fst \\<sigma>3''\n  \\<tau>3'' \\<in> seq ars\n  lst \\<tau>3' = fst \\<tau>3''\n  (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') \\<in> seq ars\n  (?s, ?ss @ ?ts) \\<in> seq ?ars \\<Longrightarrow> (?s, ?ss) \\<in> seq ?ars\n  \\<lbrakk>?ss1.0 \\<in> seq ?ars; ?ss2.0 \\<in> seq ?ars;\n   lst ?ss1.0 = fst ?ss2.0\\<rbrakk>\n  \\<Longrightarrow> lst (fst ?ss1.0, snd ?ss1.0 @ snd ?ss2.0) = lst ?ss2.0\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. lst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') =\n    lst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')", "by metis"], ["proof (state)\nthis:\n  lst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') =\n  lst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \"local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1 \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1\n     \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')", "using sigmas \\<sigma>3' onetwo1 \\<sigma>1_eq LT"], ["proof (prove)\nusing this:\n  {\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''} \\<subseteq> seq ars\n  (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') \\<in> seq ars\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  lst (s, [\\<beta>_step]) = fst \\<sigma>1\n  LT ars r\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n    \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n\ngoal (1 subgoal):\n 1. local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1\n     \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')", "unfolding local_diagram1_def  LT_def LT1_def local_triangle1_def"], ["proof (prove)\nusing this:\n  {\\<sigma>1, \\<sigma>2, \\<sigma>3', \\<gamma>1'''} \\<subseteq> seq ars\n  (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') \\<in> seq ars\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  lst (s, [\\<beta>_step]) = fst \\<sigma>1\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n         \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n  in ((local_peak ars (\\<beta>, \\<alpha>) \\<and>\n       \\<sigma>2 \\<in> seq ars \\<and>\n       {\\<sigma>1, \\<sigma>3} \\<subseteq> conv ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst_conv \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels_conv \\<sigma>1) (labels \\<sigma>2)\n       (labels_conv \\<sigma>3)) \\<and>\n     ((local_peak ars (\\<alpha>, \\<beta>) \\<and>\n       \\<tau>2 \\<in> seq ars \\<and>\n       {\\<tau>1, \\<tau>3} \\<subseteq> conv ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst_conv \\<tau>1 = fst \\<tau>2 \\<and>\n       lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>))\n       (labels_conv \\<tau>1) (labels \\<tau>2) (labels_conv \\<tau>3)) \\<and>\n     lst_conv \\<sigma>3 = lst_conv \\<tau>3\n\ngoal (1 subgoal):\n 1. local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]) \\<and>\n    {\\<sigma>1, \\<sigma>2,\n     (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')}\n    \\<subseteq> seq ars \\<and>\n    lst (s, [\\<beta>_step]) = fst \\<sigma>1 \\<and>\n    lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n    lst \\<sigma>2 = fst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')", "by auto"], ["proof (state)\nthis:\n  local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1\n   \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "moreover"], ["proof (state)\nthis:\n  local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1\n   \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \"local_diagram1 ars (s,[\\<alpha>_step]) (s,[\\<beta>_step]) \\<tau>1 \\<tau>2 (fst \\<tau>3',snd \\<tau>3'@snd \\<tau>3'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_diagram1 ars (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<tau>1\n     \\<tau>2 (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')", "using taus \\<tau>3' onetwo2 \\<tau>1_eq LT"], ["proof (prove)\nusing this:\n  {\\<tau>1, \\<tau>2, \\<tau>3', \\<delta>1'''} \\<subseteq> seq ars\n  (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') \\<in> seq ars\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n  lst (s, [\\<alpha>_step]) = fst \\<tau>1\n  LT ars r\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n    \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n\ngoal (1 subgoal):\n 1. local_diagram1 ars (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<tau>1\n     \\<tau>2 (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')", "unfolding local_diagram1_def LT_def LT1_def local_triangle1_def"], ["proof (prove)\nusing this:\n  {\\<tau>1, \\<tau>2, \\<tau>3', \\<delta>1'''} \\<subseteq> seq ars\n  (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'') \\<in> seq ars\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n  lst (s, [\\<alpha>_step]) = fst \\<tau>1\n  let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1, \\<tau>2,\n        \\<tau>3) =\n        ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n         \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n  in ((local_peak ars (\\<beta>, \\<alpha>) \\<and>\n       \\<sigma>2 \\<in> seq ars \\<and>\n       {\\<sigma>1, \\<sigma>3} \\<subseteq> conv ars \\<and>\n       lst \\<beta> = fst \\<sigma>1 \\<and>\n       lst_conv \\<sigma>1 = fst \\<sigma>2 \\<and>\n       lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n      LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n       (labels_conv \\<sigma>1) (labels \\<sigma>2)\n       (labels_conv \\<sigma>3)) \\<and>\n     ((local_peak ars (\\<alpha>, \\<beta>) \\<and>\n       \\<tau>2 \\<in> seq ars \\<and>\n       {\\<tau>1, \\<tau>3} \\<subseteq> conv ars \\<and>\n       lst \\<alpha> = fst \\<tau>1 \\<and>\n       lst_conv \\<tau>1 = fst \\<tau>2 \\<and>\n       lst \\<tau>2 = fst \\<tau>3) \\<and>\n      LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>))\n       (labels_conv \\<tau>1) (labels \\<tau>2) (labels_conv \\<tau>3)) \\<and>\n     lst_conv \\<sigma>3 = lst_conv \\<tau>3\n\ngoal (1 subgoal):\n 1. local_peak ars ((s, [\\<alpha>_step]), s, [\\<beta>_step]) \\<and>\n    {\\<tau>1, \\<tau>2, (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')}\n    \\<subseteq> seq ars \\<and>\n    lst (s, [\\<alpha>_step]) = fst \\<tau>1 \\<and>\n    lst \\<tau>1 = fst \\<tau>2 \\<and>\n    lst \\<tau>2 = fst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')", "by auto"], ["proof (state)\nthis:\n  local_diagram1 ars (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<tau>1\n   \\<tau>2 (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "moreover"], ["proof (state)\nthis:\n  local_diagram1 ars (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<tau>1\n   \\<tau>2 (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \"LD_1' r (hd (labels (s, [\\<beta>_step]))) (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1) (labels \\<sigma>2) (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LD_1' r (hd (labels (s, [\\<beta>_step])))\n     (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1)\n     (labels \\<sigma>2)\n     (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))", "using onetwo1 s1"], ["proof (prove)\nusing this:\n  set (labels \\<sigma>1) \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (labels \\<sigma>2) \\<le> 1 \\<and>\n  set (labels \\<sigma>2) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (labels \\<sigma>3')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (labels \\<gamma>1''')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  set (labels \\<sigma>3'')\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. LD_1' r (hd (labels (s, [\\<beta>_step])))\n     (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1)\n     (labels \\<sigma>2)\n     (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))", "unfolding LD_1'_def labels_def"], ["proof (prove)\nusing this:\n  set (map fst (snd \\<sigma>1))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step} \\<and>\n  length (map fst (snd \\<sigma>2)) \\<le> 1 \\<and>\n  set (map fst (snd \\<sigma>2)) \\<subseteq> {fst \\<alpha>_step} \\<and>\n  set (map fst (snd \\<sigma>3'))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  set (map fst (snd \\<gamma>1'''))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step} \\<and>\n  snd \\<beta>_step = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst \\<sigma>3' \\<and>\n  lst \\<sigma>3' = lst \\<gamma>1''' \\<and> fst \\<gamma>1''' = fst \\<gamma>3\n  set (map fst (snd \\<sigma>3''))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step, fst \\<beta>_step}\n\ngoal (1 subgoal):\n 1. set (map fst (snd \\<sigma>1))\n    \\<subseteq> r \\<down>s {hd (map fst (snd (s, [\\<beta>_step])))} \\<and>\n    length (map fst (snd \\<sigma>2)) \\<le> 1 \\<and>\n    set (map fst (snd \\<sigma>2))\n    \\<subseteq> {hd (map fst (snd (s, [\\<alpha>_step])))} \\<and>\n    set (map fst (snd (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')))\n    \\<subseteq> r \\<down>s\n                {hd (map fst (snd (s, [\\<alpha>_step]))),\n                 hd (map fst (snd (s, [\\<beta>_step])))}", "by auto"], ["proof (state)\nthis:\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1) (labels \\<sigma>2)\n   (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "moreover"], ["proof (state)\nthis:\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1) (labels \\<sigma>2)\n   (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "have \"LD_1' r (hd (labels (s, [\\<alpha>_step]))) (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2) (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LD_1' r (hd (labels (s, [\\<alpha>_step])))\n     (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2)\n     (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))", "using onetwo2 s2"], ["proof (prove)\nusing this:\n  set (labels \\<tau>1) \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (labels \\<tau>2) \\<le> 1 \\<and>\n  set (labels \\<tau>2) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (labels \\<tau>3')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (labels \\<delta>1''')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n  set (labels \\<tau>3'')\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n\ngoal (1 subgoal):\n 1. LD_1' r (hd (labels (s, [\\<alpha>_step])))\n     (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2)\n     (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))", "unfolding LD_1'_def labels_def"], ["proof (prove)\nusing this:\n  set (map fst (snd \\<tau>1))\n  \\<subseteq> r \\<down>s {fst \\<alpha>_step} \\<and>\n  length (map fst (snd \\<tau>2)) \\<le> 1 \\<and>\n  set (map fst (snd \\<tau>2)) \\<subseteq> {fst \\<beta>_step} \\<and>\n  set (map fst (snd \\<tau>3'))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  set (map fst (snd \\<delta>1'''))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step} \\<and>\n  snd \\<alpha>_step = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst \\<tau>3' \\<and>\n  lst \\<tau>3' = lst \\<delta>1''' \\<and> fst \\<delta>1''' = fst \\<delta>3\n  set (map fst (snd \\<tau>3''))\n  \\<subseteq> r \\<down>s {fst \\<beta>_step, fst \\<alpha>_step}\n\ngoal (1 subgoal):\n 1. set (map fst (snd \\<tau>1))\n    \\<subseteq> r \\<down>s {hd (map fst (snd (s, [\\<alpha>_step])))} \\<and>\n    length (map fst (snd \\<tau>2)) \\<le> 1 \\<and>\n    set (map fst (snd \\<tau>2))\n    \\<subseteq> {hd (map fst (snd (s, [\\<beta>_step])))} \\<and>\n    set (map fst (snd (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')))\n    \\<subseteq> r \\<down>s\n                {hd (map fst (snd (s, [\\<beta>_step]))),\n                 hd (map fst (snd (s, [\\<alpha>_step])))}", "by auto"], ["proof (state)\nthis:\n  LD_1' r (hd (labels (s, [\\<alpha>_step])))\n   (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2)\n   (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "ultimately"], ["proof (chain)\npicking this:\n  local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1\n   \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')\n  local_diagram1 ars (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<tau>1\n   \\<tau>2 (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1) (labels \\<sigma>2)\n   (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))\n  LD_1' r (hd (labels (s, [\\<alpha>_step])))\n   (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2)\n   (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))", "have LDD: \"LDD ars r ((s,[\\<beta>_step]),(s,[\\<alpha>_step]),\\<sigma>1,\\<sigma>2,?\\<sigma>3,\\<tau>1,\\<tau>2,?\\<tau>3)\""], ["proof (prove)\nusing this:\n  local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1\n   \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')\n  local_diagram1 ars (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<tau>1\n   \\<tau>2 (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1) (labels \\<sigma>2)\n   (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))\n  LD_1' r (hd (labels (s, [\\<alpha>_step])))\n   (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2)\n   (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))\n\ngoal (1 subgoal):\n 1. LDD ars r\n     ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<sigma>1, \\<sigma>2,\n      (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''), \\<tau>1, \\<tau>2,\n      fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')", "using lst"], ["proof (prove)\nusing this:\n  local_diagram1 ars (s, [\\<beta>_step]) (s, [\\<alpha>_step]) \\<sigma>1\n   \\<sigma>2 (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')\n  local_diagram1 ars (s, [\\<alpha>_step]) (s, [\\<beta>_step]) \\<tau>1\n   \\<tau>2 (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1) (labels \\<sigma>2)\n   (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))\n  LD_1' r (hd (labels (s, [\\<alpha>_step])))\n   (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2)\n   (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))\n  lst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') =\n  lst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n\ngoal (1 subgoal):\n 1. LDD ars r\n     ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<sigma>1, \\<sigma>2,\n      (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''), \\<tau>1, \\<tau>2,\n      fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')", "unfolding LDD_def LDD1_def local_diagram1_def"], ["proof (prove)\nusing this:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]) \\<and>\n  {\\<sigma>1, \\<sigma>2, (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')}\n  \\<subseteq> seq ars \\<and>\n  lst (s, [\\<beta>_step]) = fst \\<sigma>1 \\<and>\n  lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n  lst \\<sigma>2 = fst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'')\n  local_peak ars ((s, [\\<alpha>_step]), s, [\\<beta>_step]) \\<and>\n  {\\<tau>1, \\<tau>2, (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')}\n  \\<subseteq> seq ars \\<and>\n  lst (s, [\\<alpha>_step]) = fst \\<tau>1 \\<and>\n  lst \\<tau>1 = fst \\<tau>2 \\<and>\n  lst \\<tau>2 = fst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n  LD_1' r (hd (labels (s, [\\<beta>_step])))\n   (hd (labels (s, [\\<alpha>_step]))) (labels \\<sigma>1) (labels \\<sigma>2)\n   (labels (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''))\n  LD_1' r (hd (labels (s, [\\<alpha>_step])))\n   (hd (labels (s, [\\<beta>_step]))) (labels \\<tau>1) (labels \\<tau>2)\n   (labels (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3''))\n  lst (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3'') =\n  lst (fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n\ngoal (1 subgoal):\n 1. let (\\<beta>, \\<alpha>, \\<sigma>1, \\<sigma>2, \\<sigma>3, \\<tau>1,\n          \\<tau>2, \\<tau>3) =\n          ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<sigma>1, \\<sigma>2,\n           (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''), \\<tau>1,\n           \\<tau>2, fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n    in ((local_peak ars (\\<beta>, \\<alpha>) \\<and>\n         {\\<sigma>1, \\<sigma>2, \\<sigma>3} \\<subseteq> seq ars \\<and>\n         lst \\<beta> = fst \\<sigma>1 \\<and>\n         lst \\<sigma>1 = fst \\<sigma>2 \\<and>\n         lst \\<sigma>2 = fst \\<sigma>3) \\<and>\n        LD_1' r (hd (labels \\<beta>)) (hd (labels \\<alpha>))\n         (labels \\<sigma>1) (labels \\<sigma>2) (labels \\<sigma>3)) \\<and>\n       ((local_peak ars (\\<alpha>, \\<beta>) \\<and>\n         {\\<tau>1, \\<tau>2, \\<tau>3} \\<subseteq> seq ars \\<and>\n         lst \\<alpha> = fst \\<tau>1 \\<and>\n         lst \\<tau>1 = fst \\<tau>2 \\<and> lst \\<tau>2 = fst \\<tau>3) \\<and>\n        LD_1' r (hd (labels \\<alpha>)) (hd (labels \\<beta>))\n         (labels \\<tau>1) (labels \\<tau>2) (labels \\<tau>3)) \\<and>\n       lst \\<sigma>3 = lst \\<tau>3", "by auto"], ["proof (state)\nthis:\n  LDD ars r\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<sigma>1, \\<sigma>2,\n    (fst \\<sigma>3', snd \\<sigma>3' @ snd \\<sigma>3''), \\<tau>1, \\<tau>2,\n    fst \\<tau>3', snd \\<tau>3' @ snd \\<tau>3'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "from LDD_imp_DD[OF t i LDD]"], ["proof (chain)\npicking this:\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<sigma>', \\<tau>')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<kappa> \\<mu>.\n       DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<kappa> \\<mu>.\n     DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LT_imp_D: assumes t:\"trans r\" and \"wf r\" and \"\\<forall>p. (local_peak ars p \\<longrightarrow> (\\<exists> \\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3. LT ars r (fst p,snd p,\\<gamma>1,\\<gamma>2,\\<gamma>3,\\<delta>1,\\<delta>2,\\<delta>3)))\"\nand \"peak ars P\" shows \"(\\<exists> \\<sigma>' \\<tau>'. DD ars r (fst P,snd P,\\<sigma>',\\<tau>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have i: \"irrefl r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irrefl r", "using assms(1,2) acyclic_irrefl trancl_id wf_acyclic"], ["proof (prove)\nusing this:\n  trans r\n  wf r\n  acyclic ?r = irrefl (?r\\<^sup>+)\n  trans ?r \\<Longrightarrow> ?r\\<^sup>+ = ?r\n  wf ?r \\<Longrightarrow> acyclic ?r\n\ngoal (1 subgoal):\n 1. irrefl r", "by metis"], ["proof (state)\nthis:\n  irrefl r\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have wf: \"wf (pex r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (pex r)", "using wf[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  wf (pex r)\n\ngoal (1 subgoal):\n 1. wf (pex r)", "."], ["proof (state)\nthis:\n  wf (pex r)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using assms(4)"], ["proof (prove)\nusing this:\n  peak ars P\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof (induct rule:wf_induct_rule[OF wf])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> pex r; peak ars y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n  DD ars r (fst y, snd y, \\<sigma>', \\<tau>');\n        peak ars x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst x, snd x, \\<sigma>', \\<tau>')", "case (1 P)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y1, P) \\<in> pex r; peak ars ?y1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y1, snd ?y1, \\<sigma>', \\<tau>')\n  peak ars P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> pex r; peak ars y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n  DD ars r (fst y, snd y, \\<sigma>', \\<tau>');\n        peak ars x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst x, snd x, \\<sigma>', \\<tau>')", "obtain s \\<tau> \\<sigma> where decompose:\"P = (\\<tau>,\\<sigma>)\" and tau:\"\\<tau> \\<in> seq ars\" and sigma:\"\\<sigma> \\<in> seq ars\"\n   and tau_s: \"fst \\<tau> = s\" and sigma_s: \"fst \\<sigma> = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma> s.\n        \\<lbrakk>P = (\\<tau>, \\<sigma>); \\<tau> \\<in> seq ars;\n         \\<sigma> \\<in> seq ars; fst \\<tau> = s; fst \\<sigma> = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y1, P) \\<in> pex r; peak ars ?y1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y1, snd ?y1, \\<sigma>', \\<tau>')\n  peak ars P\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma> s.\n        \\<lbrakk>P = (\\<tau>, \\<sigma>); \\<tau> \\<in> seq ars;\n         \\<sigma> \\<in> seq ars; fst \\<tau> = s; fst \\<sigma> = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding peak_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?y1, P) \\<in> pex r;\n   let (\\<tau>, \\<sigma>) = ?y1\n   in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n      fst \\<tau> = fst \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ars r (fst ?y1, snd ?y1, \\<sigma>', \\<tau>')\n  let (\\<tau>, \\<sigma>) = P\n  in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and> fst \\<tau> = fst \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau> \\<sigma> s.\n        \\<lbrakk>P = (\\<tau>, \\<sigma>); \\<tau> \\<in> seq ars;\n         \\<sigma> \\<in> seq ars; fst \\<tau> = s; fst \\<sigma> = s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P = (\\<tau>, \\<sigma>)\n  \\<tau> \\<in> seq ars\n  \\<sigma> \\<in> seq ars\n  fst \\<tau> = s\n  fst \\<sigma> = s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> pex r; peak ars y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n  DD ars r (fst y, snd y, \\<sigma>', \\<tau>');\n        peak ars x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                            DD ars r (fst x, snd x, \\<sigma>', \\<tau>')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof (cases \"snd \\<tau>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. snd \\<tau> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case Nil"], ["proof (state)\nthis:\n  snd \\<tau> = []\n\ngoal (2 subgoals):\n 1. snd \\<tau> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from mirror_DD[OF assms(1) i trivial_DD[OF sigma]]"], ["proof (chain)\npicking this:\n  DD ars r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])", "show ?thesis"], ["proof (prove)\nusing this:\n  DD ars r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using tau_s sigma_s Nil surjective_pairing"], ["proof (prove)\nusing this:\n  DD ars r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<tau> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding decompose fst_conv snd_conv DD_def"], ["proof (prove)\nusing this:\n  diagram ars\n   ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, []) \\<and>\n  D2 r ((fst \\<sigma>, []), \\<sigma>, \\<sigma>, lst \\<sigma>, [])\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<tau> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n       D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "by metis"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case (Cons \\<beta>_step \\<upsilon>_step)"], ["proof (state)\nthis:\n  snd \\<tau> = \\<beta>_step # \\<upsilon>_step\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence tau_dec: \"\\<tau> = (s,[\\<beta>_step]@\\<upsilon>_step)\""], ["proof (prove)\nusing this:\n  snd \\<tau> = \\<beta>_step # \\<upsilon>_step\n\ngoal (1 subgoal):\n 1. \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<tau> = \\<beta>_step # \\<upsilon>_step \\<Longrightarrow>\n    \\<tau> = (s, \\<beta>_step # \\<upsilon>_step)", "using tau_s surjective_pairing"], ["proof (prove)\nusing this:\n  fst \\<tau> = s\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. snd \\<tau> = \\<beta>_step # \\<upsilon>_step \\<Longrightarrow>\n    \\<tau> = (s, \\<beta>_step # \\<upsilon>_step)", "by metis"], ["proof (state)\nthis:\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence tau2:\" (s,[\\<beta>_step]@\\<upsilon>_step) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step] @ \\<upsilon>_step) \\<in> seq ars", "using tau"], ["proof (prove)\nusing this:\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n  \\<tau> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step] @ \\<upsilon>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<beta>_step] @ \\<upsilon>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<tau> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "proof (cases \"snd \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. snd \\<sigma> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case Nil"], ["proof (state)\nthis:\n  snd \\<sigma> = []\n\ngoal (2 subgoals):\n 1. snd \\<sigma> = [] \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n 2. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from trivial_DD[OF tau]"], ["proof (chain)\npicking this:\n  DD ars ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)", "show ?thesis"], ["proof (prove)\nusing this:\n  DD ars ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using tau_s sigma_s Nil surjective_pairing"], ["proof (prove)\nusing this:\n  DD ars ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<sigma> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding decompose fst_conv snd_conv DD_def"], ["proof (prove)\nusing this:\n  diagram ars (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>) \\<and>\n  D2 ?r (\\<tau>, (fst \\<tau>, []), (lst \\<tau>, []), \\<tau>)\n  fst \\<tau> = s\n  fst \\<sigma> = s\n  snd \\<sigma> = []\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       diagram ars (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') \\<and>\n       D2 r (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>')", "by metis"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "case (Cons \\<alpha>_step \\<rho>_step)"], ["proof (state)\nthis:\n  snd \\<sigma> = \\<alpha>_step # \\<rho>_step\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence sigma_dec: \"\\<sigma> = (s,[\\<alpha>_step]@\\<rho>_step)\""], ["proof (prove)\nusing this:\n  snd \\<sigma> = \\<alpha>_step # \\<rho>_step\n\ngoal (1 subgoal):\n 1. \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<sigma> = \\<alpha>_step # \\<rho>_step \\<Longrightarrow>\n    \\<sigma> = (s, \\<alpha>_step # \\<rho>_step)", "using sigma_s surjective_pairing"], ["proof (prove)\nusing this:\n  fst \\<sigma> = s\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. snd \\<sigma> = \\<alpha>_step # \\<rho>_step \\<Longrightarrow>\n    \\<sigma> = (s, \\<alpha>_step # \\<rho>_step)", "by metis"], ["proof (state)\nthis:\n  \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence sigma2:\"(s,[\\<alpha>_step]@\\<rho>_step) \\<in> seq ars\""], ["proof (prove)\nusing this:\n  \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)\n\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step] @ \\<rho>_step) \\<in> seq ars", "using sigma"], ["proof (prove)\nusing this:\n  \\<sigma> = (s, [\\<alpha>_step] @ \\<rho>_step)\n  \\<sigma> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step] @ \\<rho>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<alpha>_step] @ \\<rho>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have alpha:\"(s,[\\<alpha>_step]) \\<in> seq ars\" (is \"?\\<alpha> \\<in> _\")\n     and rho: \"(lst (s,[\\<alpha>_step]),\\<rho>_step) \\<in> seq ars\" (is \"?\\<rho> \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars", "using seq_chop[OF sigma2]"], ["proof (prove)\nusing this:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<alpha>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence alpha': \"(s,fst \\<alpha>_step, snd \\<alpha>_step) \\<in> ars\""], ["proof (prove)\nusing this:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, fst \\<alpha>_step, snd \\<alpha>_step) \\<in> ars", "by (metis seq_tail1(2))"], ["proof (state)\nthis:\n  (s, fst \\<alpha>_step, snd \\<alpha>_step) \\<in> ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have beta:\"(s,[\\<beta>_step]) \\<in> seq ars\" (is \"?\\<beta> \\<in> _\")\n     and upsilon: \"(lst (s,[\\<beta>_step]),\\<upsilon>_step) \\<in> seq ars\" (is \"?\\<upsilon> \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars", "using seq_chop[OF tau2]"], ["proof (prove)\nusing this:\n  (s, [\\<beta>_step]) \\<in> seq ars\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. (s, [\\<beta>_step]) \\<in> seq ars &&&\n    (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (s, [\\<beta>_step]) \\<in> seq ars\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have lp:\"local_peak ars (?\\<beta>,?\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])", "using alpha beta"], ["proof (prove)\nusing this:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (s, [\\<beta>_step]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])", "unfolding local_peak_def peak_def"], ["proof (prove)\nusing this:\n  (s, [\\<alpha>_step]) \\<in> seq ars\n  (s, [\\<beta>_step]) \\<in> seq ars\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) = ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n    in (let (\\<tau>, \\<sigma>) = ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n        in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n           fst \\<tau> = fst \\<sigma>) \\<and>\n       length (snd \\<tau>) = 1 \\<and> length (snd \\<sigma>) = 1", "by auto"], ["proof (state)\nthis:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "(* difference begin*)"], ["proof (state)\nthis:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])", "obtain \\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3 where LT: \"LT ars r (?\\<beta>, ?\\<alpha>, \\<gamma>1, \\<gamma>2, \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\""], ["proof (prove)\nusing this:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3.\n        LT ars r\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n          \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(3)"], ["proof (prove)\nusing this:\n  local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step])\n  \\<forall>p.\n     local_peak ars p \\<longrightarrow>\n     (\\<exists>\\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3.\n         LT ars r\n          (fst p, snd p, \\<gamma>1, \\<gamma>2, \\<gamma>3, \\<delta>1,\n           \\<delta>2, \\<delta>3))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3.\n        LT ars r\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n          \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b aa ba ab bb ac bc ad bd ae be.\n                LT ars r\n                 ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), (a, b),\n                  (aa, ba), (ab, bb), (ac, bc), (ad, bd), ae,\n                  be) \\<Longrightarrow>\n                thesis;\n     local_peak ars ((s, [\\<beta>_step]), s, [\\<alpha>_step]);\n     \\<forall>a b aa ba.\n        local_peak ars ((a, b), aa, ba) \\<longrightarrow>\n        (\\<exists>ab bb ac bc ad bd ae be af bf ag bg.\n            LT ars r\n             ((a, b), (aa, ba), (ab, bb), (ac, bc), (ad, bd), (ae, be),\n              (af, bf), ag, bg))\\<rbrakk>\n    \\<Longrightarrow> thesis", "by metis"], ["proof (state)\nthis:\n  LT ars r\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<gamma>1, \\<gamma>2,\n    \\<gamma>3, \\<delta>1, \\<delta>2, \\<delta>3)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have P:\"P = ((s,[\\<beta>_step]@\\<upsilon>_step),(s,[\\<alpha>_step]@\\<rho>_step))\" (is \"P = ?P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. P =\n    ((s, [\\<beta>_step] @ \\<upsilon>_step), s,\n     [\\<alpha>_step] @ \\<rho>_step)", "using decompose"], ["proof (prove)\nusing this:\n  P = (\\<tau>, \\<sigma>)\n\ngoal (1 subgoal):\n 1. P =\n    ((s, [\\<beta>_step] @ \\<upsilon>_step), s,\n     [\\<alpha>_step] @ \\<rho>_step)", "unfolding tau_dec sigma_dec"], ["proof (prove)\nusing this:\n  P =\n  ((s, [\\<beta>_step] @ \\<upsilon>_step), s, [\\<alpha>_step] @ \\<rho>_step)\n\ngoal (1 subgoal):\n 1. P =\n    ((s, [\\<beta>_step] @ \\<upsilon>_step), s,\n     [\\<alpha>_step] @ \\<rho>_step)", "by auto"], ["proof (state)\nthis:\n  P =\n  ((s, [\\<beta>_step] @ \\<upsilon>_step), s, [\\<alpha>_step] @ \\<rho>_step)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "obtain \\<kappa> \\<mu> where D:\"DD ars r (?\\<beta>,?\\<alpha>,\\<kappa>,\\<mu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa> \\<mu>.\n        DD ars r\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>,\n          \\<mu>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using LT_imp_DD[OF t i 1(1) LT]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                        [\\<alpha>_step] @ ?\\<rho>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, P) \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                [\\<alpha>_step] @ ?\\<rho>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<kappa> \\<mu>.\n                       DD ars r\n                        ((s, [\\<beta>_step]), (s, [\\<alpha>_step]),\n                         \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa> \\<mu>.\n        DD ars r\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>,\n          \\<mu>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding P"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                        [\\<alpha>_step] @ ?\\<rho>_step)\n                       \\<in> pex r;\n               peak ars y\\<rbrakk>\n              \\<Longrightarrow> (y, (s, [\\<beta>_step] @ \\<upsilon>_step),\n                                 s, [\\<alpha>_step] @ \\<rho>_step)\n                                \\<in> pex r;\n   \\<And>y.\n      \\<lbrakk>(y, (s, [\\<beta>_step] @ ?\\<upsilon>_step), s,\n                [\\<alpha>_step] @ ?\\<rho>_step)\n               \\<in> pex r;\n       peak ars y\\<rbrakk>\n      \\<Longrightarrow> peak ars y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<kappa> \\<mu>.\n                       DD ars r\n                        ((s, [\\<beta>_step]), (s, [\\<alpha>_step]),\n                         \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa> \\<mu>.\n        DD ars r\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>,\n          \\<mu>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fast"], ["proof (state)\nthis:\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "(*difference end*)"], ["proof (state)\nthis:\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence kappa: \"\\<kappa>\\<in>seq ars\" and mu: \"\\<mu>\\<in>seq ars\""], ["proof (prove)\nusing this:\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa> \\<in> seq ars &&& \\<mu> \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa> \\<in> seq ars &&& \\<mu> \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<kappa> \\<in> seq ars\n  \\<mu> \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have P_IH1: \" peak ars (?\\<upsilon>,\\<kappa>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. peak ars ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)", "using upsilon kappa D"], ["proof (prove)\nusing this:\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n  \\<kappa> \\<in> seq ars\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. peak ars ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)", "unfolding DD_def diagram_def peak_def"], ["proof (prove)\nusing this:\n  (lst (s, [\\<beta>_step]), \\<upsilon>_step) \\<in> seq ars\n  \\<kappa> \\<in> seq ars\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) =\n          ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  peak ars ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have beta_ne: \"labels ?\\<beta> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, [\\<beta>_step]) \\<noteq> []", "unfolding labels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (snd (s, [\\<beta>_step])) \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  labels (s, [\\<beta>_step]) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have dec: \"D r (labels ?\\<beta>) (labels ?\\<alpha>) (labels \\<kappa>) (labels \\<mu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n     (labels \\<kappa>) (labels \\<mu>)", "using D"], ["proof (prove)\nusing this:\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n     (labels \\<kappa>) (labels \\<mu>)", "unfolding DD_def D2_def"], ["proof (prove)\nusing this:\n  diagram ars\n   ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>) \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n\ngoal (1 subgoal):\n 1. D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n     (labels \\<kappa>) (labels \\<mu>)", "by auto"], ["proof (state)\nthis:\n  D r (labels (s, [\\<beta>_step])) (labels (s, [\\<alpha>_step]))\n   (labels \\<kappa>) (labels \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have x1:\"((?\\<upsilon>,\\<kappa>), (\\<tau>,?\\<alpha>)) \\<in> pex r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n     [\\<alpha>_step])\n    \\<in> pex r", "using lemma3_6[OF assms(1) beta_ne dec]"], ["proof (prove)\nusing this:\n  (r|labels \\<kappa>| + r|?\\<upsilon>|,\n   r|labels (s, [\\<alpha>_step])| +\n   r|labels (s, [\\<beta>_step]) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n     [\\<alpha>_step])\n    \\<in> pex r", "unfolding pex_def measure_def decompose labels_def tau_dec"], ["proof (prove)\nusing this:\n  (r|map fst (snd \\<kappa>)| + r|?\\<upsilon>|,\n   r|map fst (snd (s, [\\<alpha>_step]))| +\n   r|map fst (snd (s, [\\<beta>_step])) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n     (s, [\\<beta>_step] @ \\<upsilon>_step), s, [\\<alpha>_step])\n    \\<in> {(P1, P2).\n           (r|map fst (snd (fst P1))| + r|map fst (snd (snd P1))|,\n            r|map fst (snd (fst P2))| + r|map fst (snd (snd P2))|)\n           \\<in> mul r}", "apply (auto simp: add_mset_commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<upsilon>.\n        (r|map fst (snd \\<kappa>)| + r|\\<upsilon>|,\n         add_mset (fst \\<alpha>_step)\n          (add_mset (fst \\<beta>_step)\n            ({#} -s r \\<down>s {fst \\<alpha>_step} +\n             r|\\<upsilon>| -s r \\<down>s {fst \\<beta>_step})))\n        \\<in> mul r) \\<Longrightarrow>\n    (r|map fst \\<upsilon>_step| + r|map fst (snd \\<kappa>)|,\n     add_mset (fst \\<alpha>_step)\n      (add_mset (fst \\<beta>_step)\n        (r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step} +\n         {#} -s r \\<down>s {fst \\<alpha>_step})))\n    \\<in> mul r", "using union_commute"], ["proof (prove)\nusing this:\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. (\\<And>\\<upsilon>.\n        (r|map fst (snd \\<kappa>)| + r|\\<upsilon>|,\n         add_mset (fst \\<alpha>_step)\n          (add_mset (fst \\<beta>_step)\n            ({#} -s r \\<down>s {fst \\<alpha>_step} +\n             r|\\<upsilon>| -s r \\<down>s {fst \\<beta>_step})))\n        \\<in> mul r) \\<Longrightarrow>\n    (r|map fst \\<upsilon>_step| + r|map fst (snd \\<kappa>)|,\n     add_mset (fst \\<alpha>_step)\n      (add_mset (fst \\<beta>_step)\n        (r|map fst \\<upsilon>_step| -s r \\<down>s {fst \\<beta>_step} +\n         {#} -s r \\<down>s {fst \\<alpha>_step})))\n    \\<in> mul r", "by metis"], ["proof (state)\nthis:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have \"(lexmax r (labels \\<tau>) + lexmax r (labels (?\\<alpha>)), lexmax r (labels \\<tau>) + lexmax r (labels \\<sigma>)) \\<in> mul_eq r\" (is \"(?l,?r) \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n     r|labels \\<tau>| + r|labels \\<sigma>|)\n    \\<in> mul_eq r", "unfolding sigma_dec labels_def snd_conv list.map lexmax.simps diff_from_empty"], ["proof (prove)\ngoal (1 subgoal):\n 1. (r|map fst (snd \\<tau>)| + ({#fst \\<alpha>_step#} + {#}),\n     r|map fst (snd \\<tau>)| + r|map fst ([\\<alpha>_step] @ \\<rho>_step)|)\n    \\<in> mul_eq r", "by (simp add: lemma2_6_2_a t)"], ["proof (state)\nthis:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence \"((?\\<upsilon>,\\<kappa>),P) \\<in> pex r\""], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r", "using x1"], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r", "unfolding sigma_s pex_def measure_def decompose"], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> {(P1, P2).\n         (r|labels (fst P1)| + r|labels (snd P1)|,\n          r|labels (fst P2)| + r|labels (snd P2)|)\n         \\<in> mul r}\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>,\n     \\<sigma>)\n    \\<in> {(P1, P2).\n           (r|labels (fst P1)| + r|labels (snd P1)|,\n            r|labels (fst P2)| + r|labels (snd P2)|)\n           \\<in> mul r}", "using mul_and_mul_eq_imp_mul[OF assms(1)]"], ["proof (prove)\nusing this:\n  (r|labels \\<tau>| + r|labels (s, [\\<alpha>_step])|,\n   r|labels \\<tau>| + r|labels \\<sigma>|)\n  \\<in> mul_eq r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, s,\n   [\\<alpha>_step])\n  \\<in> {(P1, P2).\n         (r|labels (fst P1)| + r|labels (snd P1)|,\n          r|labels (fst P2)| + r|labels (snd P2)|)\n         \\<in> mul r}\n  \\<lbrakk>(?M, ?N) \\<in> mul r; (?N, ?P) \\<in> mul_eq r\\<rbrakk>\n  \\<Longrightarrow> (?M, ?P) \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>,\n     \\<sigma>)\n    \\<in> {(P1, P2).\n           (r|labels (fst P1)| + r|labels (snd P1)|,\n            r|labels (fst P2)| + r|labels (snd P2)|)\n           \\<in> mul r}", "by auto"], ["proof (state)\nthis:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r", "obtain \\<kappa>' \\<upsilon>' where IH1: \"DD ars r (?\\<upsilon>,\\<kappa>,\\<kappa>',\\<upsilon>')\""], ["proof (prove)\nusing this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>' \\<upsilon>'.\n        DD ars r\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1(1)[OF _ P_IH1]"], ["proof (prove)\nusing this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P) \\<in> pex r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), P)\n  \\<in> pex r \\<Longrightarrow>\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      (fst ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       snd ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>' \\<upsilon>'.\n        DD ars r\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding decompose"], ["proof (prove)\nusing this:\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, \\<sigma>)\n  \\<in> pex r\n  (((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>), \\<tau>, \\<sigma>)\n  \\<in> pex r \\<Longrightarrow>\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      (fst ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       snd ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>),\n       \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>' \\<upsilon>'.\n        DD ars r\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence kappa':\"\\<kappa>'\\<in>seq ars\" and upsilon': \"\\<upsilon>'\\<in>seq ars\""], ["proof (prove)\nusing this:\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. \\<kappa>' \\<in> seq ars &&& \\<upsilon>' \\<in> seq ars", "using D"], ["proof (prove)\nusing this:\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa>' \\<in> seq ars &&& \\<upsilon>' \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. \\<kappa>' \\<in> seq ars &&& \\<upsilon>' \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  \\<kappa>' \\<in> seq ars\n  \\<upsilon>' \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have tau': \"(fst \\<mu>,snd \\<mu>@(snd \\<upsilon>')) \\<in> seq ars\" (is \"?\\<tau>' \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars", "using seq_concat(1)[OF mu upsilon'] D IH1"], ["proof (prove)\nusing this:\n  lst \\<mu> = fst \\<upsilon>' \\<Longrightarrow>\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n  DD ars r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars", "unfolding DD_def diagram_def"], ["proof (prove)\nusing this:\n  lst \\<mu> = fst \\<upsilon>' \\<Longrightarrow>\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n          \\<upsilon>')\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r\n   ((lst (s, [\\<beta>_step]), \\<upsilon>_step), \\<kappa>, \\<kappa>',\n    \\<upsilon>')\n\ngoal (1 subgoal):\n 1. (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars", "by auto"], ["proof (state)\nthis:\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have DIH1: \"DD ars r (\\<tau>,?\\<alpha>,\\<kappa>',?\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DD ars r\n     (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n      snd \\<mu> @ snd \\<upsilon>')", "using lemma3_5_DD[OF assms(1) i D IH1] tau_dec"], ["proof (prove)\nusing this:\n  DD ars r\n   ((fst (s, [\\<beta>_step]),\n     snd (s, [\\<beta>_step]) @\n     snd (lst (s, [\\<beta>_step]), \\<upsilon>_step)),\n    (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>, snd \\<mu> @ snd \\<upsilon>')\n  \\<tau> = (s, [\\<beta>_step] @ \\<upsilon>_step)\n\ngoal (1 subgoal):\n 1. DD ars r\n     (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n      snd \\<mu> @ snd \\<upsilon>')", "by auto"], ["proof (state)\nthis:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "hence dec_dih1: \"D r (labels \\<tau>) (labels ?\\<alpha>) (labels \\<kappa>') (labels ?\\<tau>')\""], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n\ngoal (1 subgoal):\n 1. D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n     (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))", "using DIH1"], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>')\n\ngoal (1 subgoal):\n 1. D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n     (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))", "unfolding DD_def D2_def"], ["proof (prove)\nusing this:\n  diagram ars\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n          snd \\<mu> @ snd \\<upsilon>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n  diagram ars\n   (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n    snd \\<mu> @ snd \\<upsilon>') \\<and>\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         (\\<tau>, (s, [\\<alpha>_step]), \\<kappa>', fst \\<mu>,\n          snd \\<mu> @ snd \\<upsilon>')\n   in D r (labels \\<tau>) (labels \\<sigma>) (labels \\<sigma>')\n       (labels \\<tau>'))\n\ngoal (1 subgoal):\n 1. D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n     (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))", "by simp"], ["proof (state)\nthis:\n  D r (labels \\<tau>) (labels (s, [\\<alpha>_step])) (labels \\<kappa>')\n   (labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have P_IH2: \"peak ars (?\\<tau>',?\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. peak ars\n     ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step)", "using tau' rho D"], ["proof (prove)\nusing this:\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n  DD ars r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. peak ars\n     ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step)", "unfolding DD_def diagram_def peak_def"], ["proof (prove)\nusing this:\n  (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>') \\<in> seq ars\n  (lst (s, [\\<alpha>_step]), \\<rho>_step) \\<in> seq ars\n  (let (\\<tau>, \\<sigma>, \\<sigma>', \\<tau>') =\n         ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n   in {\\<sigma>, \\<tau>, \\<sigma>', \\<tau>'} \\<subseteq> seq ars \\<and>\n      fst \\<sigma> = fst \\<tau> \\<and>\n      lst \\<sigma> = fst \\<tau>' \\<and>\n      lst \\<tau> = fst \\<sigma>' \\<and> lst \\<sigma>' = lst \\<tau>') \\<and>\n  D2 r ((s, [\\<beta>_step]), (s, [\\<alpha>_step]), \\<kappa>, \\<mu>)\n\ngoal (1 subgoal):\n 1. let (\\<tau>, \\<sigma>) =\n          ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n           lst (s, [\\<alpha>_step]), \\<rho>_step)\n    in {\\<tau>, \\<sigma>} \\<subseteq> seq ars \\<and>\n       fst \\<tau> = fst \\<sigma>", "by auto"], ["proof (state)\nthis:\n  peak ars\n   ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have alpha_ne: \"labels ?\\<alpha> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. labels (s, [\\<alpha>_step]) \\<noteq> []", "unfolding labels_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map fst (snd (s, [\\<alpha>_step])) \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  labels (s, [\\<alpha>_step]) \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "have \"((?\\<tau>',?\\<rho>),P) \\<in> pex r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step),\n     P)\n    \\<in> pex r", "using lemma3_6_v[OF assms(1) i alpha_ne dec_dih1]"], ["proof (prove)\nusing this:\n  (r|labels (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>')| + r|?\\<upsilon>|,\n   r|labels \\<tau>| + r|labels (s, [\\<alpha>_step]) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step),\n     P)\n    \\<in> pex r", "unfolding pex_def measure_def decompose labels_def sigma_dec"], ["proof (prove)\nusing this:\n  (r|map fst (snd (fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'))| +\n   r|?\\<upsilon>|,\n   r|map fst (snd \\<tau>)| +\n   r|map fst (snd (s, [\\<alpha>_step])) @ ?\\<upsilon>|)\n  \\<in> mul r\n\ngoal (1 subgoal):\n 1. (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n      \\<rho>_step),\n     \\<tau>, s, [\\<alpha>_step] @ \\<rho>_step)\n    \\<in> {(P1, P2).\n           (r|map fst (snd (fst P1))| + r|map fst (snd (snd P1))|,\n            r|map fst (snd (fst P2))| + r|map fst (snd (snd P2))|)\n           \\<in> mul r}", "by auto"], ["proof (state)\nthis:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "from this"], ["proof (chain)\npicking this:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r", "obtain \\<rho>' \\<tau>'' where IH2: \"DD ars r (?\\<tau>',?\\<rho>,\\<rho>',\\<tau>'')\""], ["proof (prove)\nusing this:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>' \\<tau>''.\n        DD ars r\n         ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n          (lst (s, [\\<alpha>_step]), \\<rho>_step), \\<rho>',\n          \\<tau>'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 1(1)[OF _ P_IH2]"], ["proof (prove)\nusing this:\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r\n  (((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'), lst (s, [\\<alpha>_step]),\n    \\<rho>_step),\n   P)\n  \\<in> pex r \\<Longrightarrow>\n  \\<exists>\\<sigma>' \\<tau>'.\n     DD ars r\n      (fst ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n            lst (s, [\\<alpha>_step]), \\<rho>_step),\n       snd ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n            lst (s, [\\<alpha>_step]), \\<rho>_step),\n       \\<sigma>', \\<tau>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>' \\<tau>''.\n        DD ars r\n         ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n          (lst (s, [\\<alpha>_step]), \\<rho>_step), \\<rho>',\n          \\<tau>'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  DD ars r\n   ((fst \\<mu>, snd \\<mu> @ snd \\<upsilon>'),\n    (lst (s, [\\<alpha>_step]), \\<rho>_step), \\<rho>', \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       snd \\<sigma> = a # list \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<tau>'.\n          DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "using lemma3_5_DD_v[OF assms(1) i DIH1 IH2]"], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>,\n    (fst (s, [\\<alpha>_step]),\n     snd (s, [\\<alpha>_step]) @\n     snd (lst (s, [\\<alpha>_step]), \\<rho>_step)),\n    (fst \\<kappa>', snd \\<kappa>' @ snd \\<rho>'), \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')", "unfolding decompose fst_conv snd_conv sigma_dec"], ["proof (prove)\nusing this:\n  DD ars r\n   (\\<tau>, (s, [\\<alpha>_step] @ \\<rho>_step),\n    (fst \\<kappa>', snd \\<kappa>' @ snd \\<rho>'), \\<tau>'')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<tau>'.\n       DD ars r\n        (\\<tau>, (s, [\\<alpha>_step] @ \\<rho>_step), \\<sigma>', \\<tau>')", "by fast"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<tau>'. DD ars r (fst P, snd P, \\<sigma>', \\<tau>')\n\ngoal:\nNo subgoals!", "qed"], ["", "definition LD_conv :: \"'b set \\<Rightarrow> 'a rel \\<Rightarrow> bool\"\n where \"LD_conv L ars = (\\<exists> (r:: ('b rel)) (lrs::('a,'b) lars). (ars = unlabel lrs) \\<and> trans r \\<and> wf r \\<and> (\\<forall>p. (local_peak lrs p \\<longrightarrow> (\\<exists> \\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3. LT lrs r (fst p,snd p,\\<gamma>1,\\<gamma>2,\\<gamma>3,\\<delta>1,\\<delta>2,\\<delta>3)))))\""], ["", "lemma sound_conv: assumes \"LD_conv L ars\" shows \"CR ars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CR ars", "using assms LT_imp_D D_imp_CR"], ["proof (prove)\nusing this:\n  LD_conv L ars\n  \\<lbrakk>trans ?r; wf ?r;\n   \\<forall>p.\n      local_peak ?ars p \\<longrightarrow>\n      (\\<exists>\\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3.\n          LT ?ars ?r\n           (fst p, snd p, \\<gamma>1, \\<gamma>2, \\<gamma>3, \\<delta>1,\n            \\<delta>2, \\<delta>3));\n   peak ?ars ?P\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ?ars ?r (fst ?P, snd ?P, \\<sigma>', \\<tau>')\n  \\<forall>P.\n     peak ?ars P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD ?ars ?r (fst P, snd P, \\<sigma>', \\<tau>')) \\<Longrightarrow>\n  CR (unlabel ?ars)\n\ngoal (1 subgoal):\n 1. CR ars", "unfolding LD_conv_def"], ["proof (prove)\nusing this:\n  \\<exists>r lrs.\n     ars = unlabel lrs \\<and>\n     trans r \\<and>\n     wf r \\<and>\n     (\\<forall>p.\n         local_peak lrs p \\<longrightarrow>\n         (\\<exists>\\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2\n             \\<delta>3.\n             LT lrs r\n              (fst p, snd p, \\<gamma>1, \\<gamma>2, \\<gamma>3, \\<delta>1,\n               \\<delta>2, \\<delta>3)))\n  \\<lbrakk>trans ?r; wf ?r;\n   \\<forall>p.\n      local_peak ?ars p \\<longrightarrow>\n      (\\<exists>\\<gamma>1 \\<gamma>2 \\<gamma>3 \\<delta>1 \\<delta>2 \\<delta>3.\n          LT ?ars ?r\n           (fst p, snd p, \\<gamma>1, \\<gamma>2, \\<gamma>3, \\<delta>1,\n            \\<delta>2, \\<delta>3));\n   peak ?ars ?P\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<sigma>' \\<tau>'.\n                       DD ?ars ?r (fst ?P, snd ?P, \\<sigma>', \\<tau>')\n  \\<forall>P.\n     peak ?ars P \\<longrightarrow>\n     (\\<exists>\\<sigma>' \\<tau>'.\n         DD ?ars ?r (fst P, snd P, \\<sigma>', \\<tau>')) \\<Longrightarrow>\n  CR (unlabel ?ars)\n\ngoal (1 subgoal):\n 1. CR ars", "by metis"], ["", "hide_const (open) D"], ["", "hide_const (open) seq"], ["", "hide_const (open) measure"], ["", "hide_fact (open) split"], ["", "end"]]}