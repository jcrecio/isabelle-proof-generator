{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/Compiler/Hidden.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma hidden_last_index: \"x \\<in> set xs \\<Longrightarrow> hidden (xs @ [x]) (last_index xs x)\"", "lemma hidden_inacc: \"hidden xs i \\<Longrightarrow> last_index xs x \\<noteq> i\"", "lemma [simp]: \"hidden xs i \\<Longrightarrow> hidden (xs@[x]) i\"", "lemma fun_upds_apply:\n \"(m(xs[\\<mapsto>]ys)) x =\n  (let xs' = take (size ys) xs\n   in if x \\<in> set xs' then Some(ys ! last_index xs' x) else m x)\"", "lemma map_upds_apply_eq_Some:\n  \"((m(xs[\\<mapsto>]ys)) x = Some y) =\n  (let xs' = take (size ys) xs\n   in if x \\<in> set xs' then ys ! last_index xs' x = y else m x = Some y)\"", "lemma map_upds_upd_conv_last_index:\n  \"\\<lbrakk>x \\<in> set xs; size xs \\<le> size ys \\<rbrakk>\n  \\<Longrightarrow> m(xs[\\<mapsto>]ys)(x\\<mapsto>y) = m(xs[\\<mapsto>]ys[last_index xs x := y])\""], "translations": [["", "lemma hidden_last_index: \"x \\<in> set xs \\<Longrightarrow> hidden (xs @ [x]) (last_index xs x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow> hidden (xs @ [x]) (last_index xs x)", "apply(auto simp add: hidden_def nth_append rev_nth[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set xs;\n     x \\<notin> set (drop (Suc (last_index xs x) - length xs) [x])\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (drop (Suc (last_index xs x)) xs)", "apply(drule last_index_less[OF _ le_refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> set (drop (Suc (last_index xs x) - length xs) [x]);\n     last_index xs x < length xs\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (drop (Suc (last_index xs x)) xs)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hidden_inacc: \"hidden xs i \\<Longrightarrow> last_index xs x \\<noteq> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hidden xs i \\<Longrightarrow> last_index xs x \\<noteq> i", "by(auto simp add: hidden_def last_index_drop last_index_less_size_conv)"], ["", "lemma [simp]: \"hidden xs i \\<Longrightarrow> hidden (xs@[x]) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hidden xs i \\<Longrightarrow> hidden (xs @ [x]) i", "by(auto simp add:hidden_def nth_append)"], ["", "lemma fun_upds_apply:\n \"(m(xs[\\<mapsto>]ys)) x =\n  (let xs' = take (size ys) xs\n   in if x \\<in> set xs' then Some(ys ! last_index xs' x) else m x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m(xs [\\<mapsto>] ys)) x =\n    (let xs' = take (length ys) xs\n     in if x \\<in> set xs' then Some (ys ! last_index xs' x) else m x)", "apply(induct xs arbitrary: m ys)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m ys.\n       (m([] [\\<mapsto>] ys)) x =\n       (let xs' = take (length ys) []\n        in if x \\<in> set xs' then Some (ys ! last_index xs' x) else m x)\n 2. \\<And>a xs m ys.\n       (\\<And>m ys.\n           (m(xs [\\<mapsto>] ys)) x =\n           (let xs' = take (length ys) xs\n            in if x \\<in> set xs' then Some (ys ! last_index xs' x)\n               else m x)) \\<Longrightarrow>\n       (m(a # xs [\\<mapsto>] ys)) x =\n       (let xs' = take (length ys) (a # xs)\n        in if x \\<in> set xs' then Some (ys ! last_index xs' x) else m x)", "apply (simp add: Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs m ys.\n       (\\<And>m ys.\n           (m(xs [\\<mapsto>] ys)) x =\n           (let xs' = take (length ys) xs\n            in if x \\<in> set xs' then Some (ys ! last_index xs' x)\n               else m x)) \\<Longrightarrow>\n       (m(a # xs [\\<mapsto>] ys)) x =\n       (let xs' = take (length ys) (a # xs)\n        in if x \\<in> set xs' then Some (ys ! last_index xs' x) else m x)", "apply(case_tac ys)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs m ys.\n       \\<lbrakk>\\<And>m ys.\n                   (m(xs [\\<mapsto>] ys)) x =\n                   (let xs' = take (length ys) xs\n                    in if x \\<in> set xs' then Some (ys ! last_index xs' x)\n                       else m x);\n        ys = []\\<rbrakk>\n       \\<Longrightarrow> (m(a # xs [\\<mapsto>] ys)) x =\n                         (let xs' = take (length ys) (a # xs)\n                          in if x \\<in> set xs'\n                             then Some (ys ! last_index xs' x) else m x)\n 2. \\<And>a xs m ys aa list.\n       \\<lbrakk>\\<And>m ys.\n                   (m(xs [\\<mapsto>] ys)) x =\n                   (let xs' = take (length ys) xs\n                    in if x \\<in> set xs' then Some (ys ! last_index xs' x)\n                       else m x);\n        ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> (m(a # xs [\\<mapsto>] ys)) x =\n                         (let xs' = take (length ys) (a # xs)\n                          in if x \\<in> set xs'\n                             then Some (ys ! last_index xs' x) else m x)", "apply (simp add:Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs m ys aa list.\n       \\<lbrakk>\\<And>m ys.\n                   (m(xs [\\<mapsto>] ys)) x =\n                   (let xs' = take (length ys) xs\n                    in if x \\<in> set xs' then Some (ys ! last_index xs' x)\n                       else m x);\n        ys = aa # list\\<rbrakk>\n       \\<Longrightarrow> (m(a # xs [\\<mapsto>] ys)) x =\n                         (let xs' = take (length ys) (a # xs)\n                          in if x \\<in> set xs'\n                             then Some (ys ! last_index xs' x) else m x)", "apply (simp add: Let_def last_index_Cons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_upds_apply_eq_Some:\n  \"((m(xs[\\<mapsto>]ys)) x = Some y) =\n  (let xs' = take (size ys) xs\n   in if x \\<in> set xs' then ys ! last_index xs' x = y else m x = Some y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((m(xs [\\<mapsto>] ys)) x = Some y) =\n    (let xs' = take (length ys) xs\n     in if x \\<in> set xs' then ys ! last_index xs' x = y else m x = Some y)", "by(simp add:fun_upds_apply Let_def)"], ["", "lemma map_upds_upd_conv_last_index:\n  \"\\<lbrakk>x \\<in> set xs; size xs \\<le> size ys \\<rbrakk>\n  \\<Longrightarrow> m(xs[\\<mapsto>]ys)(x\\<mapsto>y) = m(xs[\\<mapsto>]ys[last_index xs x := y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set xs; length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> m(xs [\\<mapsto>] ys, x \\<mapsto> y) = m(xs [\\<mapsto>]\n                      ys[last_index xs x := y])", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> set xs; length xs \\<le> length ys\\<rbrakk>\n       \\<Longrightarrow> (m(xs [\\<mapsto>] ys, x \\<mapsto> y)) xa =\n                         (m(xs [\\<mapsto>] ys[last_index xs x := y])) xa", "apply(simp add:fun_upds_apply eq_sym_conv Let_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}