{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/JVM/JVMExceptions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma find_handler_cases:\n \"find_handler P a h frs sh = js\n  \\<Longrightarrow> (\\<exists>frs'. frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or> (js = (Some a, h, [], sh))\"", "lemma find_handler_heap[simp]:\n\"find_handler P a h frs sh = (xp',h',frs',sh') \\<Longrightarrow> h' = h\"", "lemma find_handler_sheap[simp]:\n\"find_handler P a h frs sh = (xp',h',frs',sh') \\<Longrightarrow> sh' = sh\"", "lemma find_handler_frames[simp]:\n\"find_handler P a h frs sh = (xp',h',frs',sh') \\<Longrightarrow> length frs' \\<le> length frs\"", "lemma find_handler_None:\n \"find_handler P a h frs sh = (None, h, frs', sh') \\<Longrightarrow> frs' \\<noteq> []\"", "lemma find_handler_Some:\n \"find_handler P a h frs sh = (Some x, h, frs', sh') \\<Longrightarrow> frs' = []\"", "lemma find_handler_Some_same_error_same_heap[simp]:\n \"find_handler P a h frs sh = (Some x, h', frs', sh') \\<Longrightarrow> x = a \\<and> h = h' \\<and> sh = sh'\"", "lemma find_handler_prealloc_pres:\nassumes \"preallocated h\"\nand fh: \"find_handler P a h frs sh = (xp',h',frs',sh')\"\nshows \"preallocated h'\"", "lemma find_handler_frs_tl_neq:\n \"ics_of f \\<noteq> No_ics\n  \\<Longrightarrow> (xp, h, f#frs, sh) \\<noteq> find_handler P xa h' (f' # frs) sh'\""], "translations": [["", "lemma find_handler_cases:\n \"find_handler P a h frs sh = js\n  \\<Longrightarrow> (\\<exists>frs'. frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or> (js = (Some a, h, [], sh))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = js \\<Longrightarrow>\n    (\\<exists>frs'. frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n    js = (\\<lfloor>a\\<rfloor>, h, [], sh)", "proof(induct P a h frs sh rule: find_handler.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P a h sh.\n       find_handler P a h [] sh = js \\<Longrightarrow>\n       (\\<exists>frs'.\n           frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n       js = (\\<lfloor>a\\<rfloor>, h, [], sh)\n 2. \\<And>P a h fr frs sh.\n       \\<lbrakk>\\<And>x xa y xb ya xc yb xd yc xe yd.\n                   \\<lbrakk>x = fr; (xa, y) = x; (xb, ya) = y;\n                    (xc, yb) = ya; (xd, yc) = yb; (xe, yd) = yc;\n                    match_ex_table P (cname_of h a) xe\n                     (ex_table_of P xc xd) =\n                    None;\n                    (xd = clinit) = False;\n                    find_handler P a h frs sh = js\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>frs'.\n   frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n                                     js = (\\<lfloor>a\\<rfloor>, h, [], sh);\n        find_handler P a h (fr # frs) sh = js\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>frs'.\n                             frs' \\<noteq> [] \\<and>\n                             js = (None, h, frs', sh)) \\<or>\n                         js = (\\<lfloor>a\\<rfloor>, h, [], sh)", "case 1"], ["proof (state)\nthis:\n  find_handler P_ a_ h_ [] sh_ = js\n\ngoal (2 subgoals):\n 1. \\<And>P a h sh.\n       find_handler P a h [] sh = js \\<Longrightarrow>\n       (\\<exists>frs'.\n           frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n       js = (\\<lfloor>a\\<rfloor>, h, [], sh)\n 2. \\<And>P a h fr frs sh.\n       \\<lbrakk>\\<And>x xa y xb ya xc yb xd yc xe yd.\n                   \\<lbrakk>x = fr; (xa, y) = x; (xb, ya) = y;\n                    (xc, yb) = ya; (xd, yc) = yb; (xe, yd) = yc;\n                    match_ex_table P (cname_of h a) xe\n                     (ex_table_of P xc xd) =\n                    None;\n                    (xd = clinit) = False;\n                    find_handler P a h frs sh = js\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>frs'.\n   frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n                                     js = (\\<lfloor>a\\<rfloor>, h, [], sh);\n        find_handler P a h (fr # frs) sh = js\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>frs'.\n                             frs' \\<noteq> [] \\<and>\n                             js = (None, h, frs', sh)) \\<or>\n                         js = (\\<lfloor>a\\<rfloor>, h, [], sh)", "then"], ["proof (chain)\npicking this:\n  find_handler P_ a_ h_ [] sh_ = js", "show ?case"], ["proof (prove)\nusing this:\n  find_handler P_ a_ h_ [] sh_ = js\n\ngoal (1 subgoal):\n 1. (\\<exists>frs'.\n        frs' \\<noteq> [] \\<and> js = (None, h_, frs', sh_)) \\<or>\n    js = (\\<lfloor>a_\\<rfloor>, h_, [], sh_)", "by clarsimp"], ["proof (state)\nthis:\n  (\\<exists>frs'. frs' \\<noteq> [] \\<and> js = (None, h_, frs', sh_)) \\<or>\n  js = (\\<lfloor>a_\\<rfloor>, h_, [], sh_)\n\ngoal (1 subgoal):\n 1. \\<And>P a h fr frs sh.\n       \\<lbrakk>\\<And>x xa y xb ya xc yb xd yc xe yd.\n                   \\<lbrakk>x = fr; (xa, y) = x; (xb, ya) = y;\n                    (xc, yb) = ya; (xd, yc) = yb; (xe, yd) = yc;\n                    match_ex_table P (cname_of h a) xe\n                     (ex_table_of P xc xd) =\n                    None;\n                    (xd = clinit) = False;\n                    find_handler P a h frs sh = js\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>frs'.\n   frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n                                     js = (\\<lfloor>a\\<rfloor>, h, [], sh);\n        find_handler P a h (fr # frs) sh = js\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>frs'.\n                             frs' \\<noteq> [] \\<and>\n                             js = (None, h, frs', sh)) \\<or>\n                         js = (\\<lfloor>a\\<rfloor>, h, [], sh)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P a h fr frs sh.\n       \\<lbrakk>\\<And>x xa y xb ya xc yb xd yc xe yd.\n                   \\<lbrakk>x = fr; (xa, y) = x; (xb, ya) = y;\n                    (xc, yb) = ya; (xd, yc) = yb; (xe, yd) = yc;\n                    match_ex_table P (cname_of h a) xe\n                     (ex_table_of P xc xd) =\n                    None;\n                    (xd = clinit) = False;\n                    find_handler P a h frs sh = js\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>frs'.\n   frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n                                     js = (\\<lfloor>a\\<rfloor>, h, [], sh);\n        find_handler P a h (fr # frs) sh = js\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>frs'.\n                             frs' \\<noteq> [] \\<and>\n                             js = (None, h, frs', sh)) \\<or>\n                         js = (\\<lfloor>a\\<rfloor>, h, [], sh)", "case (2 P a h fr frs sh)"], ["proof (state)\nthis:\n  \\<lbrakk>?x = fr; (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya;\n   (?xd, ?yc) = ?yb; (?xe, ?yd) = ?yc;\n   match_ex_table P (cname_of h a) ?xe (ex_table_of P ?xc ?xd) = None;\n   (?xd = clinit) = False; find_handler P a h frs sh = js\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>frs'.\n                        frs' \\<noteq> [] \\<and>\n                        js = (None, h, frs', sh)) \\<or>\n                    js = (\\<lfloor>a\\<rfloor>, h, [], sh)\n  find_handler P a h (fr # frs) sh = js\n\ngoal (1 subgoal):\n 1. \\<And>P a h fr frs sh.\n       \\<lbrakk>\\<And>x xa y xb ya xc yb xd yc xe yd.\n                   \\<lbrakk>x = fr; (xa, y) = x; (xb, ya) = y;\n                    (xc, yb) = ya; (xd, yc) = yb; (xe, yd) = yc;\n                    match_ex_table P (cname_of h a) xe\n                     (ex_table_of P xc xd) =\n                    None;\n                    (xd = clinit) = False;\n                    find_handler P a h frs sh = js\\<rbrakk>\n                   \\<Longrightarrow> (\\<exists>frs'.\n   frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n                                     js = (\\<lfloor>a\\<rfloor>, h, [], sh);\n        find_handler P a h (fr # frs) sh = js\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>frs'.\n                             frs' \\<noteq> [] \\<and>\n                             js = (None, h, frs', sh)) \\<or>\n                         js = (\\<lfloor>a\\<rfloor>, h, [], sh)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x = fr; (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya;\n   (?xd, ?yc) = ?yb; (?xe, ?yd) = ?yc;\n   match_ex_table P (cname_of h a) ?xe (ex_table_of P ?xc ?xd) = None;\n   (?xd = clinit) = False; find_handler P a h frs sh = js\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>frs'.\n                        frs' \\<noteq> [] \\<and>\n                        js = (None, h, frs', sh)) \\<or>\n                    js = (\\<lfloor>a\\<rfloor>, h, [], sh)\n  find_handler P a h (fr # frs) sh = js", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x = fr; (?xa, ?y) = ?x; (?xb, ?ya) = ?y; (?xc, ?yb) = ?ya;\n   (?xd, ?yc) = ?yb; (?xe, ?yd) = ?yc;\n   match_ex_table P (cname_of h a) ?xe (ex_table_of P ?xc ?xd) = None;\n   (?xd = clinit) = False; find_handler P a h frs sh = js\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>frs'.\n                        frs' \\<noteq> [] \\<and>\n                        js = (None, h, frs', sh)) \\<or>\n                    js = (\\<lfloor>a\\<rfloor>, h, [], sh)\n  find_handler P a h (fr # frs) sh = js\n\ngoal (1 subgoal):\n 1. (\\<exists>frs'. frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n    js = (\\<lfloor>a\\<rfloor>, h, [], sh)", "by(cases fr, auto split: bool.splits list.splits init_call_status.splits)"], ["proof (state)\nthis:\n  (\\<exists>frs'. frs' \\<noteq> [] \\<and> js = (None, h, frs', sh)) \\<or>\n  js = (\\<lfloor>a\\<rfloor>, h, [], sh)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_handler_heap[simp]:\n\"find_handler P a h frs sh = (xp',h',frs',sh') \\<Longrightarrow> h' = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n    h' = h", "by(auto dest: find_handler_cases)"], ["", "lemma find_handler_sheap[simp]:\n\"find_handler P a h frs sh = (xp',h',frs',sh') \\<Longrightarrow> sh' = sh\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n    sh' = sh", "by(auto dest: find_handler_cases)"], ["", "lemma find_handler_frames[simp]:\n\"find_handler P a h frs sh = (xp',h',frs',sh') \\<Longrightarrow> length frs' \\<le> length frs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n    length frs' \\<le> length frs", "proof(induct frs)"], ["proof (state)\ngoal (2 subgoals):\n 1. find_handler P a h [] sh = (xp', h', frs', sh') \\<Longrightarrow>\n    length frs' \\<le> length []\n 2. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                length frs' \\<le> length frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> length frs' \\<le> length (aa # frs)", "case Nil"], ["proof (state)\nthis:\n  find_handler P a h [] sh = (xp', h', frs', sh')\n\ngoal (2 subgoals):\n 1. find_handler P a h [] sh = (xp', h', frs', sh') \\<Longrightarrow>\n    length frs' \\<le> length []\n 2. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                length frs' \\<le> length frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> length frs' \\<le> length (aa # frs)", "then"], ["proof (chain)\npicking this:\n  find_handler P a h [] sh = (xp', h', frs', sh')", "show ?case"], ["proof (prove)\nusing this:\n  find_handler P a h [] sh = (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. length frs' \\<le> length []", "by simp"], ["proof (state)\nthis:\n  length frs' \\<le> length []\n\ngoal (1 subgoal):\n 1. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                length frs' \\<le> length frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> length frs' \\<le> length (aa # frs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                length frs' \\<le> length frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> length frs' \\<le> length (aa # frs)", "case (Cons a frs)"], ["proof (state)\nthis:\n  find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n  length frs' \\<le> length frs\n  find_handler P a h (a # frs) sh = (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. \\<And>aa frs.\n       \\<lbrakk>find_handler P a h frs sh =\n                (xp', h', frs', sh') \\<Longrightarrow>\n                length frs' \\<le> length frs;\n        find_handler P a h (aa # frs) sh = (xp', h', frs', sh')\\<rbrakk>\n       \\<Longrightarrow> length frs' \\<le> length (aa # frs)", "then"], ["proof (chain)\npicking this:\n  find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n  length frs' \\<le> length frs\n  find_handler P a h (a # frs) sh = (xp', h', frs', sh')", "show ?case"], ["proof (prove)\nusing this:\n  find_handler P a h frs sh = (xp', h', frs', sh') \\<Longrightarrow>\n  length frs' \\<le> length frs\n  find_handler P a h (a # frs) sh = (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. length frs' \\<le> length (a # frs)", "by(auto simp: split_beta split: bool.splits list.splits init_call_status.splits)"], ["proof (state)\nthis:\n  length frs' \\<le> length (a # frs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_handler_None:\n \"find_handler P a h frs sh = (None, h, frs', sh') \\<Longrightarrow> frs' \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh = (None, h, frs', sh') \\<Longrightarrow>\n    frs' \\<noteq> []", "by (drule find_handler_cases, clarsimp)"], ["", "lemma find_handler_Some:\n \"find_handler P a h frs sh = (Some x, h, frs', sh') \\<Longrightarrow> frs' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh =\n    (\\<lfloor>x\\<rfloor>, h, frs', sh') \\<Longrightarrow>\n    frs' = []", "by (drule find_handler_cases, clarsimp)"], ["", "lemma find_handler_Some_same_error_same_heap[simp]:\n \"find_handler P a h frs sh = (Some x, h', frs', sh') \\<Longrightarrow> x = a \\<and> h = h' \\<and> sh = sh'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_handler P a h frs sh =\n    (\\<lfloor>x\\<rfloor>, h', frs', sh') \\<Longrightarrow>\n    x = a \\<and> h = h' \\<and> sh = sh'", "by(auto dest: find_handler_cases)"], ["", "lemma find_handler_prealloc_pres:\nassumes \"preallocated h\"\nand fh: \"find_handler P a h frs sh = (xp',h',frs',sh')\"\nshows \"preallocated h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preallocated h'", "using assms find_handler_heap[OF fh]"], ["proof (prove)\nusing this:\n  preallocated h\n  find_handler P a h frs sh = (xp', h', frs', sh')\n  h' = h\n\ngoal (1 subgoal):\n 1. preallocated h'", "by simp"], ["", "lemma find_handler_frs_tl_neq:\n \"ics_of f \\<noteq> No_ics\n  \\<Longrightarrow> (xp, h, f#frs, sh) \\<noteq> find_handler P xa h' (f' # frs) sh'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ics_of f \\<noteq> No_ics \\<Longrightarrow>\n    (xp, h, f # frs, sh) \\<noteq> find_handler P xa h' (f' # frs) sh'", "proof(induct frs arbitrary: f f')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f f'.\n       ics_of f \\<noteq> No_ics \\<Longrightarrow>\n       (xp, h, [f], sh) \\<noteq> find_handler P xa h' [f'] sh'\n 2. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "case Nil"], ["proof (state)\nthis:\n  ics_of f \\<noteq> No_ics\n\ngoal (2 subgoals):\n 1. \\<And>f f'.\n       ics_of f \\<noteq> No_ics \\<Longrightarrow>\n       (xp, h, [f], sh) \\<noteq> find_handler P xa h' [f'] sh'\n 2. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "then"], ["proof (chain)\npicking this:\n  ics_of f \\<noteq> No_ics", "show ?case"], ["proof (prove)\nusing this:\n  ics_of f \\<noteq> No_ics\n\ngoal (1 subgoal):\n 1. (xp, h, [f], sh) \\<noteq> find_handler P xa h' [f'] sh'", "by(auto simp: split_beta split: bool.splits)"], ["proof (state)\nthis:\n  (xp, h, [f], sh) \\<noteq> find_handler P xa h' [f'] sh'\n\ngoal (1 subgoal):\n 1. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "case (Cons a frs)"], ["proof (state)\nthis:\n  ics_of ?f \\<noteq> No_ics \\<Longrightarrow>\n  (xp, h, ?f # frs, sh) \\<noteq> find_handler P xa h' (?f' # frs) sh'\n  ics_of f \\<noteq> No_ics\n\ngoal (1 subgoal):\n 1. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "obtain xp1 h1 frs1 sh1 where fh: \"find_handler P xa h' (a # frs) sh' = (xp1,h1,frs1,sh1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xp1 h1 frs1 sh1.\n        find_handler P xa h' (a # frs) sh' =\n        (xp1, h1, frs1, sh1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"find_handler P xa h' (a # frs) sh'\")"], ["proof (state)\nthis:\n  find_handler P xa h' (a # frs) sh' = (xp1, h1, frs1, sh1)\n\ngoal (1 subgoal):\n 1. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "then"], ["proof (chain)\npicking this:\n  find_handler P xa h' (a # frs) sh' = (xp1, h1, frs1, sh1)", "have \"length frs1 \\<le> length (a#frs)\""], ["proof (prove)\nusing this:\n  find_handler P xa h' (a # frs) sh' = (xp1, h1, frs1, sh1)\n\ngoal (1 subgoal):\n 1. length frs1 \\<le> length (a # frs)", "by(rule find_handler_frames[where P=P and a=xa and h=h' and frs=\"a#frs\" and sh=sh'])"], ["proof (state)\nthis:\n  length frs1 \\<le> length (a # frs)\n\ngoal (1 subgoal):\n 1. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "then"], ["proof (chain)\npicking this:\n  length frs1 \\<le> length (a # frs)", "have neq: \"f#a#frs \\<noteq> frs1\""], ["proof (prove)\nusing this:\n  length frs1 \\<le> length (a # frs)\n\ngoal (1 subgoal):\n 1. f # a # frs \\<noteq> frs1", "by(clarsimp dest: impossible_Cons)"], ["proof (state)\nthis:\n  f # a # frs \\<noteq> frs1\n\ngoal (1 subgoal):\n 1. \\<And>a frs f f'.\n       \\<lbrakk>\\<And>f f'.\n                   ics_of f \\<noteq> No_ics \\<Longrightarrow>\n                   (xp, h, f # frs, sh) \\<noteq>\n                   find_handler P xa h' (f' # frs) sh';\n        ics_of f \\<noteq> No_ics\\<rbrakk>\n       \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                         find_handler P xa h' (f' # a # frs) sh'", "then"], ["proof (chain)\npicking this:\n  f # a # frs \\<noteq> frs1", "show ?case"], ["proof (prove)\nusing this:\n  f # a # frs \\<noteq> frs1\n\ngoal (1 subgoal):\n 1. (xp, h, f # a # frs, sh) \\<noteq>\n    find_handler P xa h' (f' # a # frs) sh'", "proof(cases \"find_handler P xa h' (f' # a # frs) sh' = find_handler P xa h' (a # frs) sh'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>f # a # frs \\<noteq> frs1;\n     find_handler P xa h' (f' # a # frs) sh' =\n     find_handler P xa h' (a # frs) sh'\\<rbrakk>\n    \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                      find_handler P xa h' (f' # a # frs) sh'\n 2. \\<lbrakk>f # a # frs \\<noteq> frs1;\n     find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n     find_handler P xa h' (a # frs) sh'\\<rbrakk>\n    \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                      find_handler P xa h' (f' # a # frs) sh'", "case True"], ["proof (state)\nthis:\n  find_handler P xa h' (f' # a # frs) sh' =\n  find_handler P xa h' (a # frs) sh'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>f # a # frs \\<noteq> frs1;\n     find_handler P xa h' (f' # a # frs) sh' =\n     find_handler P xa h' (a # frs) sh'\\<rbrakk>\n    \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                      find_handler P xa h' (f' # a # frs) sh'\n 2. \\<lbrakk>f # a # frs \\<noteq> frs1;\n     find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n     find_handler P xa h' (a # frs) sh'\\<rbrakk>\n    \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                      find_handler P xa h' (f' # a # frs) sh'", "then"], ["proof (chain)\npicking this:\n  find_handler P xa h' (f' # a # frs) sh' =\n  find_handler P xa h' (a # frs) sh'", "show ?thesis"], ["proof (prove)\nusing this:\n  find_handler P xa h' (f' # a # frs) sh' =\n  find_handler P xa h' (a # frs) sh'\n\ngoal (1 subgoal):\n 1. (xp, h, f # a # frs, sh) \\<noteq>\n    find_handler P xa h' (f' # a # frs) sh'", "using neq fh"], ["proof (prove)\nusing this:\n  find_handler P xa h' (f' # a # frs) sh' =\n  find_handler P xa h' (a # frs) sh'\n  f # a # frs \\<noteq> frs1\n  find_handler P xa h' (a # frs) sh' = (xp1, h1, frs1, sh1)\n\ngoal (1 subgoal):\n 1. (xp, h, f # a # frs, sh) \\<noteq>\n    find_handler P xa h' (f' # a # frs) sh'", "by simp"], ["proof (state)\nthis:\n  (xp, h, f # a # frs, sh) \\<noteq> find_handler P xa h' (f' # a # frs) sh'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f # a # frs \\<noteq> frs1;\n     find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n     find_handler P xa h' (a # frs) sh'\\<rbrakk>\n    \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                      find_handler P xa h' (f' # a # frs) sh'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f # a # frs \\<noteq> frs1;\n     find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n     find_handler P xa h' (a # frs) sh'\\<rbrakk>\n    \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                      find_handler P xa h' (f' # a # frs) sh'", "case False"], ["proof (state)\nthis:\n  find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n  find_handler P xa h' (a # frs) sh'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f # a # frs \\<noteq> frs1;\n     find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n     find_handler P xa h' (a # frs) sh'\\<rbrakk>\n    \\<Longrightarrow> (xp, h, f # a # frs, sh) \\<noteq>\n                      find_handler P xa h' (f' # a # frs) sh'", "then"], ["proof (chain)\npicking this:\n  find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n  find_handler P xa h' (a # frs) sh'", "show ?thesis"], ["proof (prove)\nusing this:\n  find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n  find_handler P xa h' (a # frs) sh'\n\ngoal (1 subgoal):\n 1. (xp, h, f # a # frs, sh) \\<noteq>\n    find_handler P xa h' (f' # a # frs) sh'", "using Cons.prems"], ["proof (prove)\nusing this:\n  find_handler P xa h' (f' # a # frs) sh' \\<noteq>\n  find_handler P xa h' (a # frs) sh'\n  ics_of f \\<noteq> No_ics\n\ngoal (1 subgoal):\n 1. (xp, h, f # a # frs, sh) \\<noteq>\n    find_handler P xa h' (f' # a # frs) sh'", "by(fastforce simp: split_beta split: bool.splits init_call_status.splits list.splits)"], ["proof (state)\nthis:\n  (xp, h, f # a # frs, sh) \\<noteq> find_handler P xa h' (f' # a # frs) sh'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xp, h, f # a # frs, sh) \\<noteq> find_handler P xa h' (f' # a # frs) sh'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}