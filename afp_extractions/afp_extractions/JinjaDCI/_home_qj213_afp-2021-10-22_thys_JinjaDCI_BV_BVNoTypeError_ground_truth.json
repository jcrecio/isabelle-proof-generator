{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/BV/BVNoTypeError.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma has_methodI:\n  \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D \\<Longrightarrow> P \\<turnstile> C has M,b\"", "lemma typeof_NoneD [simp,dest]: \"typeof v = Some x \\<Longrightarrow> \\<not>is_Addr v\"", "lemma is_Ref_def2:\n  \"is_Ref v = (v = Null \\<or> (\\<exists>a. v = Addr a))\"", "lemma [iff]: \"is_Ref Null\"", "lemma is_RefI [intro, simp]: \"P,h \\<turnstile> v :\\<le> T \\<Longrightarrow> is_refT T \\<Longrightarrow> is_Ref v\"", "lemma is_IntgI [intro, simp]: \"P,h \\<turnstile> v :\\<le> Integer \\<Longrightarrow> is_Intg v\"", "lemma is_BoolI [intro, simp]: \"P,h \\<turnstile> v :\\<le> Boolean \\<Longrightarrow> is_Bool v\"", "lemma wt_jvm_prog_states_NonStatic:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P \\<turnstile> C sees M,NonStatic: Ts\\<rightarrow>T = (mxs, mxl, ins, et) in C; \n     \\<Phi> C M ! pc = \\<tau>; pc < size ins \\<rbrakk>\n  \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1+size Ts+mxl)\"", "lemma wt_jvm_prog_states_Static:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P \\<turnstile> C sees M,Static: Ts\\<rightarrow>T = (mxs, mxl, ins, et) in C; \n     \\<Phi> C M ! pc = \\<tau>; pc < size ins \\<rbrakk>\n  \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (size Ts+mxl)\"", "theorem no_type_error:\n  fixes \\<sigma> :: jvm_state\n  assumes welltyped: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\" and conforms: \"P,\\<Phi> \\<turnstile> \\<sigma> \\<surd>\"\n  shows \"exec_d P \\<sigma> \\<noteq> TypeError\"", "theorem welltyped_aggressive_imp_defensive:\n  \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P \\<Longrightarrow> P,\\<Phi> \\<turnstile> \\<sigma> \\<surd> \\<Longrightarrow> P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n  \\<Longrightarrow> P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> (Normal \\<sigma>')\"", "lemma not_TypeError_eq [iff]:\n  \"x \\<noteq> TypeError = (\\<exists>t. x = Normal t)\"", "theorem (in cnf) no_type_errors:\n  \"P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow> \\<sigma>' \\<noteq> TypeError\""], "translations": [["", "lemma has_methodI:\n  \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D \\<Longrightarrow> P \\<turnstile> C has M,b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n    P \\<turnstile> C has M, b", "by (unfold has_method_def) blast"], ["", "text \\<open>\n  Some simple lemmas about the type testing functions of the\n  defensive JVM:\n\\<close>"], ["", "lemma typeof_NoneD [simp,dest]: \"typeof v = Some x \\<Longrightarrow> \\<not>is_Addr v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = \\<lfloor>x\\<rfloor> \\<Longrightarrow> \\<not> is_Addr v", "by (cases v) auto"], ["", "lemma is_Ref_def2:\n  \"is_Ref v = (v = Null \\<or> (\\<exists>a. v = Addr a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Ref v = (v = Null \\<or> (\\<exists>a. v = Addr a))", "by (cases v) (auto simp add: is_Ref_def)"], ["", "lemma [iff]: \"is_Ref Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Ref Null", "by (simp add: is_Ref_def2)"], ["", "lemma is_RefI [intro, simp]: \"P,h \\<turnstile> v :\\<le> T \\<Longrightarrow> is_refT T \\<Longrightarrow> is_Ref v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; is_refT T\\<rbrakk>\n    \\<Longrightarrow> is_Ref v", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; is_refT T\\<rbrakk>\n    \\<Longrightarrow> is_Ref v", "apply (cases T)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; is_refT T; T = Void\\<rbrakk>\n    \\<Longrightarrow> is_Ref v\n 2. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; is_refT T; T = Boolean\\<rbrakk>\n    \\<Longrightarrow> is_Ref v\n 3. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; is_refT T; T = Integer\\<rbrakk>\n    \\<Longrightarrow> is_Ref v\n 4. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; is_refT T; T = NT\\<rbrakk>\n    \\<Longrightarrow> is_Ref v\n 5. \\<And>x5.\n       \\<lbrakk>P,h \\<turnstile> v :\\<le> T; is_refT T;\n        T = Class x5\\<rbrakk>\n       \\<Longrightarrow> is_Ref v", "apply (auto simp add: is_refT_def is_Ref_def dest: conf_ClassD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma is_IntgI [intro, simp]: \"P,h \\<turnstile> v :\\<le> Integer \\<Longrightarrow> is_Intg v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> v :\\<le> Integer \\<Longrightarrow> is_Intg v", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> v :\\<le> Integer \\<Longrightarrow> is_Intg v", "apply (unfold conf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T'\\<rfloor> \\<and>\n       subtype P T' Integer \\<Longrightarrow>\n    is_Intg v", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma is_BoolI [intro, simp]: \"P,h \\<turnstile> v :\\<le> Boolean \\<Longrightarrow> is_Bool v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> v :\\<le> Boolean \\<Longrightarrow> is_Bool v", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> v :\\<le> Boolean \\<Longrightarrow> is_Bool v", "apply (unfold conf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T'\\<rfloor> \\<and>\n       subtype P T' Boolean \\<Longrightarrow>\n    is_Bool v", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "declare defs1 [simp del]"], ["", "lemma wt_jvm_prog_states_NonStatic:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P \\<turnstile> C sees M,NonStatic: Ts\\<rightarrow>T = (mxs, mxl, ins, et) in C; \n     \\<Phi> C M ! pc = \\<tau>; pc < size ins \\<rbrakk>\n  \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1+size Ts+mxl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P \\<turnstile> C sees M, NonStatic :  Ts\\<rightarrow>T = (mxs, mxl,\n                         ins, et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P \\<turnstile> C sees M, NonStatic :  Ts\\<rightarrow>T = (mxs, mxl,\n                         ins, et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "apply (unfold wf_jvm_prog_phi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog\n              (\\<lambda>P C (M, b, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is, xt).\n                  wt_method P C b Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt\n                   (\\<Phi> C M))\n              P;\n     P \\<turnstile> C sees M, NonStatic :  Ts\\<rightarrow>T = (mxs, mxl,\n                         ins, et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "apply (drule (1) sees_wf_mdecl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M, NonStatic :  Ts\\<rightarrow>T = (mxs,\n                                 mxl, ins, et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins;\n     wf_mdecl\n      (\\<lambda>P C (M, b, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is, xt).\n          wt_method P C b Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt (\\<Phi> C M))\n      P C (M, NonStatic, Ts, T, mxs, mxl, ins, et)\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (1 + length Ts + mxl)", "apply (simp add: wf_mdecl_def wt_method_def check_types_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M, NonStatic :  Ts\\<rightarrow>T = (mxs,\n                                 mxl, ins, et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins;\n     (\\<forall>x\\<in>set Ts. is_type P x) \\<and>\n     is_type P T \\<and>\n     ins \\<noteq> [] \\<and>\n     length (\\<Phi> C M) = length ins \\<and>\n     OK ` set (\\<Phi> C M)\n     \\<subseteq> states P mxs (Suc (length Ts + mxl)) \\<and>\n     wt_start P C NonStatic Ts mxl (\\<Phi> C M) \\<and>\n     (\\<forall>pc<length ins.\n         P,T,mxs,length\n                  ins,et \\<turnstile> ins ! pc,pc :: \\<Phi> C M)\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (Suc (length Ts + mxl))", "apply (blast intro: nth_in)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma wt_jvm_prog_states_Static:\n  \"\\<lbrakk> wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P \\<turnstile> C sees M,Static: Ts\\<rightarrow>T = (mxs, mxl, ins, et) in C; \n     \\<Phi> C M ! pc = \\<tau>; pc < size ins \\<rbrakk>\n  \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (size Ts+mxl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P \\<turnstile> C sees M, Static :  Ts\\<rightarrow>T = (mxs, mxl, ins,\n                      et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (length Ts + mxl)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P \\<turnstile> C sees M, Static :  Ts\\<rightarrow>T = (mxs, mxl, ins,\n                      et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (length Ts + mxl)", "apply (unfold wf_jvm_prog_phi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog\n              (\\<lambda>P C (M, b, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is, xt).\n                  wt_method P C b Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt\n                   (\\<Phi> C M))\n              P;\n     P \\<turnstile> C sees M, Static :  Ts\\<rightarrow>T = (mxs, mxl, ins,\n                      et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (length Ts + mxl)", "apply (drule (1) sees_wf_mdecl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M, Static :  Ts\\<rightarrow>T = (mxs,\n                              mxl, ins, et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins;\n     wf_mdecl\n      (\\<lambda>P C (M, b, Ts, T\\<^sub>r, mxs, mxl\\<^sub>0, is, xt).\n          wt_method P C b Ts T\\<^sub>r mxs mxl\\<^sub>0 is xt (\\<Phi> C M))\n      P C (M, Static, Ts, T, mxs, mxl, ins, et)\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (length Ts + mxl)", "apply (simp add: wf_mdecl_def wt_method_def check_types_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees M, Static :  Ts\\<rightarrow>T = (mxs,\n                              mxl, ins, et) in C;\n     \\<Phi> C M ! pc = \\<tau>; pc < length ins;\n     (\\<forall>x\\<in>set Ts. is_type P x) \\<and>\n     is_type P T \\<and>\n     ins \\<noteq> [] \\<and>\n     length (\\<Phi> C M) = length ins \\<and>\n     OK ` set (\\<Phi> C M) \\<subseteq> states P mxs (length Ts + mxl) \\<and>\n     wt_start P C Static Ts mxl (\\<Phi> C M) \\<and>\n     (\\<forall>pc<length ins.\n         P,T,mxs,length\n                  ins,et \\<turnstile> ins ! pc,pc :: \\<Phi> C M)\\<rbrakk>\n    \\<Longrightarrow> OK \\<tau> \\<in> states P mxs (length Ts + mxl)", "apply (blast intro: nth_in)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text \\<open>\n  The main theorem: welltyped programs do not produce type errors if they\n  are started in a conformant state.\n\\<close>"], ["", "theorem no_type_error:\n  fixes \\<sigma> :: jvm_state\n  assumes welltyped: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\" and conforms: \"P,\\<Phi> \\<turnstile> \\<sigma> \\<surd>\"\n  shows \"exec_d P \\<sigma> \\<noteq> TypeError\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "from welltyped"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P", "obtain mb where wf: \"wf_prog mb P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. (\\<And>mb. wf_prog mb P \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fast dest: wt_jvm_progD)"], ["proof (state)\nthis:\n  wf_prog mb P\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "obtain xcp h frs sh where s [simp]: \"\\<sigma> = (xcp, h, frs, sh)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xcp h frs sh.\n        \\<sigma> = (xcp, h, frs, sh) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \\<sigma>)"], ["proof (state)\nthis:\n  \\<sigma> = (xcp, h, frs, sh)\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "from conforms"], ["proof (chain)\npicking this:\n  P,\\<Phi> |- \\<sigma> [ok]", "have \"xcp \\<noteq> None \\<or> frs = [] \\<Longrightarrow> check P \\<sigma>\""], ["proof (prove)\nusing this:\n  P,\\<Phi> |- \\<sigma> [ok]\n\ngoal (1 subgoal):\n 1. xcp \\<noteq> None \\<or> frs = [] \\<Longrightarrow> check P \\<sigma>", "by (unfold correct_state_def check_def) auto"], ["proof (state)\nthis:\n  xcp \\<noteq> None \\<or> frs = [] \\<Longrightarrow> check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "moreover"], ["proof (state)\nthis:\n  xcp \\<noteq> None \\<or> frs = [] \\<Longrightarrow> check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "{"], ["proof (state)\nthis:\n  xcp \\<noteq> None \\<or> frs = [] \\<Longrightarrow> check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "assume \"\\<not>(xcp \\<noteq> None \\<or> frs = [])\""], ["proof (state)\nthis:\n  \\<not> (xcp \\<noteq> None \\<or> frs = [])\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "then"], ["proof (chain)\npicking this:\n  \\<not> (xcp \\<noteq> None \\<or> frs = [])", "obtain stk reg C M pc ics frs' where\n      xcp [simp]: \"xcp = None\" and\n      frs [simp]: \"frs = (stk,reg,C,M,pc,ics)#frs'\""], ["proof (prove)\nusing this:\n  \\<not> (xcp \\<noteq> None \\<or> frs = [])\n\ngoal (1 subgoal):\n 1. (\\<And>stk reg C M pc ics frs'.\n        \\<lbrakk>xcp = None; frs = (stk, reg, C, M, pc, ics) # frs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (clarsimp simp add: neq_Nil_conv)"], ["proof (state)\nthis:\n  xcp = None\n  frs = (stk, reg, C, M, pc, ics) # frs'\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "from conforms"], ["proof (chain)\npicking this:\n  P,\\<Phi> |- \\<sigma> [ok]", "obtain  ST LT b Ts T mxs mxl ins xt where\n      hconf:  \"P \\<turnstile> h \\<surd>\" and\n      shconf:  \"P,h \\<turnstile>\\<^sub>s sh \\<surd>\" and\n      meth:   \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\" and\n      \\<Phi>:      \"\\<Phi> C M ! pc = Some (ST,LT)\" and\n      frame:  \"conf_f P h sh (ST,LT) ins (stk,reg,C,M,pc,ics)\" and\n      frames: \"conf_fs P h sh \\<Phi> C M (size Ts) T frs'\""], ["proof (prove)\nusing this:\n  P,\\<Phi> |- \\<sigma> [ok]\n\ngoal (1 subgoal):\n 1. (\\<And>b Ts T mxs mxl ins xt ST LT.\n        \\<lbrakk>P \\<turnstile> h \\<surd>;\n         P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n         P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins,\n                     xt) in C;\n         \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>;\n         conf_f P h sh (ST, LT) ins (stk, reg, C, M, pc, ics);\n         conf_fs P h sh \\<Phi> C M (length Ts) T frs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp add: correct_state_def dest: sees_method_fun)"], ["proof (state)\nthis:\n  P \\<turnstile> h \\<surd>\n  P,h \\<turnstile>\\<^sub>s sh \\<surd>\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  conf_f P h sh (ST, LT) ins (stk, reg, C, M, pc, ics)\n  conf_fs P h sh \\<Phi> C M (length Ts) T frs'\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "from frame"], ["proof (chain)\npicking this:\n  conf_f P h sh (ST, LT) ins (stk, reg, C, M, pc, ics)", "obtain\n      stk: \"P,h \\<turnstile> stk [:\\<le>] ST\" and\n      reg: \"P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\" and\n      pc:  \"pc < size ins\""], ["proof (prove)\nusing this:\n  conf_f P h sh (ST, LT) ins (stk, reg, C, M, pc, ics)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      pc < length ins\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: conf_f_def)"], ["proof (state)\nthis:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  pc < length ins\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "from welltyped meth \\<Phi> pc"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  pc < length ins", "have \"OK (Some (ST, LT)) \\<in> states P mxs (1+size Ts+mxl)\n        \\<or> OK (Some (ST, LT)) \\<in> states P mxs (size Ts+mxl)\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  pc < length ins\n\ngoal (1 subgoal):\n 1. OK \\<lfloor>(ST, LT)\\<rfloor>\n    \\<in> states P mxs (1 + length Ts + mxl) \\<or>\n    OK \\<lfloor>(ST, LT)\\<rfloor> \\<in> states P mxs (length Ts + mxl)", "by (cases b, auto dest: wt_jvm_prog_states_NonStatic wt_jvm_prog_states_Static)"], ["proof (state)\nthis:\n  OK \\<lfloor>(ST, LT)\\<rfloor>\n  \\<in> states P mxs (1 + length Ts + mxl) \\<or>\n  OK \\<lfloor>(ST, LT)\\<rfloor> \\<in> states P mxs (length Ts + mxl)\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "hence \"size ST \\<le> mxs\""], ["proof (prove)\nusing this:\n  OK \\<lfloor>(ST, LT)\\<rfloor>\n  \\<in> states P mxs (1 + length Ts + mxl) \\<or>\n  OK \\<lfloor>(ST, LT)\\<rfloor> \\<in> states P mxs (length Ts + mxl)\n\ngoal (1 subgoal):\n 1. length ST \\<le> mxs", "by (auto simp add: JVM_states_unfold)"], ["proof (state)\nthis:\n  length ST \\<le> mxs\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "with stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  length ST \\<le> mxs", "have mxs: \"size stk \\<le> mxs\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  length ST \\<le> mxs\n\ngoal (1 subgoal):\n 1. length stk \\<le> mxs", "by (auto dest: list_all2_lengthD)"], ["proof (state)\nthis:\n  length stk \\<le> mxs\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "from welltyped meth pc"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  pc < length ins", "have \"P,T,mxs,size ins,xt \\<turnstile> ins!pc,pc :: \\<Phi> C M\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  pc < length ins\n\ngoal (1 subgoal):\n 1. P,T,mxs,length ins,xt \\<turnstile> ins ! pc,pc :: \\<Phi> C M", "by (rule wt_jvm_prog_impl_wt_instr)"], ["proof (state)\nthis:\n  P,T,mxs,length ins,xt \\<turnstile> ins ! pc,pc :: \\<Phi> C M\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "hence app\\<^sub>0: \"app (ins!pc) P mxs T pc (size ins) xt (\\<Phi> C M!pc) \""], ["proof (prove)\nusing this:\n  P,T,mxs,length ins,xt \\<turnstile> ins ! pc,pc :: \\<Phi> C M\n\ngoal (1 subgoal):\n 1. app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)", "by (simp add: wt_instr_def)"], ["proof (state)\nthis:\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "with \\<Phi>"], ["proof (chain)\npicking this:\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)", "have eff: \n      \"\\<forall>(pc',s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)). pc' < size ins\""], ["proof (prove)\nusing this:\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n\ngoal (1 subgoal):\n 1. \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n       pc' < length ins", "by (unfold app_def) simp"], ["proof (state)\nthis:\n  \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n     pc' < length ins\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "from app\\<^sub>0 \\<Phi>"], ["proof (chain)\npicking this:\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>", "have app:\n      \"xcpt_app (ins!pc) P pc mxs xt (ST,LT) \\<and> app\\<^sub>i (ins!pc, P, pc, mxs, T, (ST,LT))\""], ["proof (prove)\nusing this:\n  app (ins ! pc) P mxs T pc (length ins) xt (\\<Phi> C M ! pc)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n\ngoal (1 subgoal):\n 1. xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n    app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)", "by (clarsimp simp add: app_def)"], ["proof (state)\nthis:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "with eff stk reg"], ["proof (chain)\npicking this:\n  \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n     pc' < length ins\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)", "have \"check_instr (ins!pc) P h stk reg C M pc frs' sh\""], ["proof (prove)\nusing this:\n  \\<forall>(pc', s')\\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n     pc' < length ins\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "proof (cases \"ins!pc\")"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 18 subgoals...", "case (Getfield F C)"], ["proof (state)\nthis:\n  ins ! pc = Getfield F C\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Getfield F C", "obtain v vT stk' where\n        field: \"P \\<turnstile> C sees F,NonStatic:vT in C\" and\n        stk:   \"stk = v # stk'\" and\n        conf:  \"P,h \\<turnstile> v :\\<le> Class C\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Getfield F C\n\ngoal (1 subgoal):\n 1. (\\<And>vT v stk'.\n        \\<lbrakk>P \\<turnstile> C sees F,NonStatic:vT in C; stk = v # stk';\n         P,h \\<turnstile> v :\\<le> Class C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  stk = v # stk'\n  P,h \\<turnstile> v :\\<le> Class C\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "from conf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> v :\\<le> Class C", "have is_Ref: \"is_Ref v\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> v :\\<le> Class C\n\ngoal (1 subgoal):\n 1. is_Ref v", "by auto"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref v\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "assume \"v \\<noteq> Null\""], ["proof (state)\nthis:\n  v \\<noteq> Null\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "with conf field is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> v :\\<le> Class C\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  is_Ref v\n  wf_prog mb P\n  v \\<noteq> Null", "have \"\\<exists>D vs. h (the_Addr v) = Some (D,vs) \\<and> P \\<turnstile> D \\<preceq>\\<^sup>* C\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> v :\\<le> Class C\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  is_Ref v\n  wf_prog mb P\n  v \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<exists>D vs.\n       h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n       P \\<turnstile> D \\<preceq>\\<^sup>* C", "by (auto dest!: non_npD)"], ["proof (state)\nthis:\n  \\<exists>D vs.\n     h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "}"], ["proof (state)\nthis:\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 18 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs' sh", "using Getfield field stk hconf"], ["proof (prove)\nusing this:\n  is_Ref v\n  v \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n  ins ! pc = Getfield F C\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  stk = v # stk'\n  P \\<turnstile> h \\<surd>\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs' sh", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_Ref v;\n     v \\<noteq> Null \\<Longrightarrow>\n     \\<exists>D.\n        (\\<exists>vs. h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>) \\<and>\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n     ins ! pc = Getfield F C; P \\<turnstile> C sees F,NonStatic:vT in C;\n     stk = v # stk'; P \\<turnstile> h \\<surd>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>C' T.\n                          P \\<turnstile> C sees F,NonStatic:T in C') \\<and>\n                      (v \\<noteq> Null \\<longrightarrow>\n                       (\\<exists>a b.\n                           h (the_Addr v) = \\<lfloor>(a, b)\\<rfloor>) \\<and>\n                       (case the (h (the_Addr v)) of\n                        (D, vs) \\<Rightarrow>\n                          P \\<turnstile> D \\<preceq>\\<^sup>* C \\<and>\n                          (\\<exists>y.\n                              vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                          P,h \\<turnstile> the (vs (F, C)) :\\<le> vT))", "apply (rule conjI, fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_Ref v;\n     v \\<noteq> Null \\<Longrightarrow>\n     \\<exists>D.\n        (\\<exists>vs. h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>) \\<and>\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n     ins ! pc = Getfield F C; P \\<turnstile> C sees F,NonStatic:vT in C;\n     stk = v # stk'; P \\<turnstile> h \\<surd>\\<rbrakk>\n    \\<Longrightarrow> v \\<noteq> Null \\<longrightarrow>\n                      (\\<exists>a b.\n                          h (the_Addr v) = \\<lfloor>(a, b)\\<rfloor>) \\<and>\n                      (case the (h (the_Addr v)) of\n                       (D, vs) \\<Rightarrow>\n                         P \\<turnstile> D \\<preceq>\\<^sup>* C \\<and>\n                         (\\<exists>y.\n                             vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (vs (F, C)) :\\<le> vT)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D vs.\n       \\<lbrakk>is_Ref v; ins ! pc = Getfield F C;\n        P \\<turnstile> C sees F,NonStatic:vT in C; stk = v # stk';\n        P \\<turnstile> h \\<surd>; v \\<noteq> Null;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (vs (F, C)) :\\<le> vT", "apply (drule has_visible_field)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D vs.\n       \\<lbrakk>is_Ref v; ins ! pc = Getfield F C; stk = v # stk';\n        P \\<turnstile> h \\<surd>; v \\<noteq> Null;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>;\n        P \\<turnstile> C has F,NonStatic:vT in C\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (vs (F, C)) :\\<le> vT", "apply (drule (1) has_field_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D vs.\n       \\<lbrakk>is_Ref v; ins ! pc = Getfield F C; stk = v # stk';\n        P \\<turnstile> h \\<surd>; v \\<noteq> Null;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>;\n        P \\<turnstile> D has F,NonStatic:vT in C\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (vs (F, C)) :\\<le> vT", "apply (drule (1) hconfD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D vs.\n       \\<lbrakk>is_Ref v; ins ! pc = Getfield F C; stk = v # stk';\n        v \\<noteq> Null; P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>;\n        P \\<turnstile> D has F,NonStatic:vT in C;\n        P,h \\<turnstile> (D, vs) \\<surd>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (vs (F, C)) :\\<le> vT", "apply (unfold oconf_def has_field_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D vs.\n       \\<lbrakk>is_Ref v; ins ! pc = Getfield F C; stk = v # stk';\n        v \\<noteq> Null; P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>;\n        \\<exists>FDTs.\n           P \\<turnstile> D has_fields FDTs \\<and>\n           map_of FDTs (F, C) = \\<lfloor>(NonStatic, vT)\\<rfloor>;\n        let (C, fs) = (D, vs)\n        in \\<forall>F D T.\n              (\\<exists>FDTs.\n                  P \\<turnstile> C has_fields FDTs \\<and>\n                  map_of FDTs (F, D) =\n                  \\<lfloor>(NonStatic, T)\\<rfloor>) \\<longrightarrow>\n              (\\<exists>v.\n                  fs (F, D) = \\<lfloor>v\\<rfloor> \\<and>\n                  P,h \\<turnstile> v :\\<le> T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (vs (F, C)) :\\<le> vT", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D vs FDTs.\n       \\<lbrakk>is_Ref v; ins ! pc = Getfield F C; stk = v # stk';\n        v \\<noteq> Null; P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        h (the_Addr v) = \\<lfloor>(D, vs)\\<rfloor>;\n        \\<forall>F Da T.\n           (\\<exists>FDTs.\n               P \\<turnstile> D has_fields FDTs \\<and>\n               map_of FDTs (F, Da) =\n               \\<lfloor>(NonStatic, T)\\<rfloor>) \\<longrightarrow>\n           (\\<exists>v.\n               vs (F, Da) = \\<lfloor>v\\<rfloor> \\<and>\n               P,h \\<turnstile> v :\\<le> T);\n        P \\<turnstile> D has_fields FDTs;\n        map_of FDTs (F, C) = \\<lfloor>(NonStatic, vT)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             vs (F, C) = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (vs (F, C)) :\\<le> vT", "apply (fastforce dest: has_fields_fun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 17 subgoals...", "case (Getstatic C F D)"], ["proof (state)\nthis:\n  ins ! pc = Getstatic C F D\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 17 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Getstatic C F D", "obtain vT where\n        field: \"P \\<turnstile> C sees F,Static:vT in D\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Getstatic C F D\n\ngoal (1 subgoal):\n 1. (\\<And>vT.\n        P \\<turnstile> C sees F,Static:vT in D \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P \\<turnstile> C sees F,Static:vT in D\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C sees F,Static:vT in D", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees F,Static:vT in D\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs' sh", "using Getstatic field stk shconf"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees F,Static:vT in D\n  ins ! pc = Getstatic C F D\n  P \\<turnstile> C sees F,Static:vT in D\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile>\\<^sub>s sh \\<surd>\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs' sh", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ins ! pc = Getstatic C F D;\n     P \\<turnstile> C sees F,Static:vT in D;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile>\\<^sub>s sh \\<surd>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>T.\n                          P \\<turnstile> C sees F,Static:T in D) \\<and>\n                      ((\\<exists>a b.\n                           sh D =\n                           \\<lfloor>(a, b)\\<rfloor>) \\<longrightarrow>\n                       (case the (sh D) of\n                        (sfs, i) \\<Rightarrow>\n                          (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                          P,h \\<turnstile> the (sfs F) :\\<le> vT))", "apply (rule conjI, fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ins ! pc = Getstatic C F D;\n     P \\<turnstile> C sees F,Static:vT in D;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile>\\<^sub>s sh \\<surd>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a b.\n                          sh D = \\<lfloor>(a, b)\\<rfloor>) \\<longrightarrow>\n                      (case the (sh D) of\n                       (sfs, i) \\<Rightarrow>\n                         (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (sfs F) :\\<le> vT)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sfs i.\n       \\<lbrakk>ins ! pc = Getstatic C F D;\n        P \\<turnstile> C sees F,Static:vT in D;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n        sh D = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (sfs F) :\\<le> vT", "apply (drule has_visible_field)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sfs i.\n       \\<lbrakk>ins ! pc = Getstatic C F D;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n        sh D = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile> C has F,Static:vT in D\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (sfs F) :\\<le> vT", "apply (drule has_field_idemp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sfs i.\n       \\<lbrakk>ins ! pc = Getstatic C F D;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n        sh D = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile> D has F,Static:vT in D\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (sfs F) :\\<le> vT", "apply (drule (1) shconfD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sfs i.\n       \\<lbrakk>ins ! pc = Getstatic C F D;\n        P,h \\<turnstile> stk [:\\<le>] ST; sh D = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile> D has F,Static:vT in D;\n        P,h,D \\<turnstile>\\<^sub>s sfs \\<surd>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (sfs F) :\\<le> vT", "apply (unfold soconf_def has_field_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sfs i.\n       \\<lbrakk>ins ! pc = Getstatic C F D;\n        P,h \\<turnstile> stk [:\\<le>] ST; sh D = \\<lfloor>(sfs, i)\\<rfloor>;\n        \\<exists>FDTs.\n           P \\<turnstile> D has_fields FDTs \\<and>\n           map_of FDTs (F, D) = \\<lfloor>(Static, vT)\\<rfloor>;\n        \\<forall>F T.\n           (\\<exists>FDTs.\n               P \\<turnstile> D has_fields FDTs \\<and>\n               map_of FDTs (F, D) =\n               \\<lfloor>(Static, T)\\<rfloor>) \\<longrightarrow>\n           (\\<exists>v.\n               sfs F = \\<lfloor>v\\<rfloor> \\<and>\n               P,h \\<turnstile> v :\\<le> T)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (sfs F) :\\<le> vT", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sfs i FDTs.\n       \\<lbrakk>ins ! pc = Getstatic C F D;\n        P,h \\<turnstile> stk [:\\<le>] ST; sh D = \\<lfloor>(sfs, i)\\<rfloor>;\n        \\<forall>F T.\n           (\\<exists>FDTs.\n               P \\<turnstile> D has_fields FDTs \\<and>\n               map_of FDTs (F, D) =\n               \\<lfloor>(Static, T)\\<rfloor>) \\<longrightarrow>\n           (\\<exists>v.\n               sfs F = \\<lfloor>v\\<rfloor> \\<and>\n               P,h \\<turnstile> v :\\<le> T);\n        P \\<turnstile> D has_fields FDTs;\n        map_of FDTs (F, D) = \\<lfloor>(Static, vT)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y. sfs F = \\<lfloor>y\\<rfloor>) \\<and>\n                         P,h \\<turnstile> the (sfs F) :\\<le> vT", "apply (fastforce dest: has_fields_fun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 16 subgoals...", "case (Putfield F C)"], ["proof (state)\nthis:\n  ins ! pc = Putfield F C\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "with app stk reg \\<Phi>"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Putfield F C", "obtain v ref vT stk' where\n        field: \"P \\<turnstile> C sees F,NonStatic:vT in C\" and\n        stk:   \"stk = v # ref # stk'\" and\n        confv: \"P,h \\<turnstile> v :\\<le> vT\" and\n        confr: \"P,h \\<turnstile> ref :\\<le> Class C\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  P,h \\<turnstile> stk [:\\<le>] ST\n  P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT\n  \\<Phi> C__ M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  ins ! pc = Putfield F C\n\ngoal (1 subgoal):\n 1. (\\<And>vT v ref stk'.\n        \\<lbrakk>P \\<turnstile> C sees F,NonStatic:vT in C;\n         stk = v # ref # stk'; P,h \\<turnstile> v :\\<le> vT;\n         P,h \\<turnstile> ref :\\<le> Class C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  stk = v # ref # stk'\n  P,h \\<turnstile> v :\\<le> vT\n  P,h \\<turnstile> ref :\\<le> Class C\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "from confr"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> Class C", "have is_Ref: \"is_Ref ref\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> Class C\n\ngoal (1 subgoal):\n 1. is_Ref ref", "by simp"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "moreover"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "{"], ["proof (state)\nthis:\n  is_Ref ref\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "assume \"ref \\<noteq> Null\""], ["proof (state)\nthis:\n  ref \\<noteq> Null\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "with confr field is_Ref wf"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> ref :\\<le> Class C\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  is_Ref ref\n  wf_prog mb P\n  ref \\<noteq> Null", "have \"\\<exists>D vs. h (the_Addr ref) = Some (D,vs) \\<and> P \\<turnstile> D \\<preceq>\\<^sup>* C\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> ref :\\<le> Class C\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  is_Ref ref\n  wf_prog mb P\n  ref \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<exists>D vs.\n       h (the_Addr ref) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n       P \\<turnstile> D \\<preceq>\\<^sup>* C", "by (auto dest: non_npD)"], ["proof (state)\nthis:\n  \\<exists>D vs.\n     h (the_Addr ref) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "}"], ["proof (state)\nthis:\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr ref) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Return\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 16 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr ref) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C", "show ?thesis"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr ref) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs' sh", "using Putfield field stk confv"], ["proof (prove)\nusing this:\n  is_Ref ref\n  ref \\<noteq> Null \\<Longrightarrow>\n  \\<exists>D vs.\n     h (the_Addr ref) = \\<lfloor>(D, vs)\\<rfloor> \\<and>\n     P \\<turnstile> D \\<preceq>\\<^sup>* C\n  ins ! pc = Putfield F C\n  P \\<turnstile> C sees F,NonStatic:vT in C\n  stk = v # ref # stk'\n  P,h \\<turnstile> v :\\<le> vT\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs' sh", "by fastforce"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "case (Invoke M' n)"], ["proof (state)\nthis:\n  ins ! pc = Invoke M' n\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "with app"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n", "have n: \"n < size ST\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n\n\ngoal (1 subgoal):\n 1. n < length ST", "by simp"], ["proof (state)\nthis:\n  n < length ST\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "from stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST", "have [simp]: \"size stk = size ST\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n\ngoal (1 subgoal):\n 1. length stk = length ST", "by (rule list_all2_lengthD)"], ["proof (state)\nthis:\n  length stk = length ST\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "{"], ["proof (state)\nthis:\n  length stk = length ST\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "assume \"stk!n = Null\""], ["proof (state)\nthis:\n  stk ! n = Null\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "with n Invoke"], ["proof (chain)\npicking this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null", "have ?thesis"], ["proof (prove)\nusing this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "by simp"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "}"], ["proof (state)\nthis:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "moreover"], ["proof (state)\nthis:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "{"], ["proof (state)\nthis:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "assume \"ST!n = NT\""], ["proof (state)\nthis:\n  ST ! n = NT\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "with n stk"], ["proof (chain)\npicking this:\n  n < length ST\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST ! n = NT", "have \"stk!n = Null\""], ["proof (prove)\nusing this:\n  n < length ST\n  P,h \\<turnstile> stk [:\\<le>] ST\n  ST ! n = NT\n\ngoal (1 subgoal):\n 1. stk ! n = Null", "by (auto simp: list_all2_conv_all_nth)"], ["proof (state)\nthis:\n  stk ! n = Null\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "with n Invoke"], ["proof (chain)\npicking this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null", "have ?thesis"], ["proof (prove)\nusing this:\n  n < length ST\n  ins ! pc = Invoke M' n\n  stk ! n = Null\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "by simp"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "}"], ["proof (state)\nthis:\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "moreover"], ["proof (state)\nthis:\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "{"], ["proof (state)\nthis:\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "assume Null: \"stk!n \\<noteq> Null\" and NT: \"ST!n \\<noteq> NT\""], ["proof (state)\nthis:\n  stk ! n \\<noteq> Null\n  ST ! n \\<noteq> NT\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "from NT app Invoke"], ["proof (chain)\npicking this:\n  ST ! n \\<noteq> NT\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n", "obtain D D' Ts T m where\n          D:  \"ST!n = Class D\" and\n          M': \"P \\<turnstile> D sees M',NonStatic: Ts\\<rightarrow>T = m in D'\" and\n          Ts: \"P \\<turnstile> rev (take n ST) [\\<le>] Ts\""], ["proof (prove)\nusing this:\n  ST ! n \\<noteq> NT\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invoke M' n\n\ngoal (1 subgoal):\n 1. (\\<And>D Ts T m D'.\n        \\<lbrakk>ST ! n = Class D;\n         P \\<turnstile> D sees M', NonStatic :  Ts\\<rightarrow>T = m in D';\n         P \\<turnstile> rev (take n ST) [\\<le>] Ts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ST ! n = Class D\n  P \\<turnstile> D sees M', NonStatic :  Ts\\<rightarrow>T = m in D'\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "from D stk n"], ["proof (chain)\npicking this:\n  ST ! n = Class D\n  P,h \\<turnstile> stk [:\\<le>] ST\n  n < length ST", "have \"P,h \\<turnstile> stk!n :\\<le> Class D\""], ["proof (prove)\nusing this:\n  ST ! n = Class D\n  P,h \\<turnstile> stk [:\\<le>] ST\n  n < length ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> stk ! n :\\<le> Class D", "by (auto simp: list_all2_conv_all_nth)"], ["proof (state)\nthis:\n  P,h \\<turnstile> stk ! n :\\<le> Class D\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "with Null"], ["proof (chain)\npicking this:\n  stk ! n \\<noteq> Null\n  P,h \\<turnstile> stk ! n :\\<le> Class D", "obtain a C' fs where \n          [simp]: \"stk!n = Addr a\" \"h a = Some (C',fs)\" and\n          \"P \\<turnstile> C' \\<preceq>\\<^sup>* D\""], ["proof (prove)\nusing this:\n  stk ! n \\<noteq> Null\n  P,h \\<turnstile> stk ! n :\\<le> Class D\n\ngoal (1 subgoal):\n 1. (\\<And>a C' fs.\n        \\<lbrakk>stk ! n = Addr a; h a = \\<lfloor>(C', fs)\\<rfloor>;\n         P \\<turnstile> C' \\<preceq>\\<^sup>* D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce dest!: conf_ClassD)"], ["proof (state)\nthis:\n  stk ! n = Addr a\n  h a = \\<lfloor>(C', fs)\\<rfloor>\n  P \\<turnstile> C' \\<preceq>\\<^sup>* D\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "with M' wf"], ["proof (chain)\npicking this:\n  P \\<turnstile> D sees M', NonStatic :  Ts\\<rightarrow>T = m in D'\n  wf_prog mb P\n  stk ! n = Addr a\n  h a = \\<lfloor>(C', fs)\\<rfloor>\n  P \\<turnstile> C' \\<preceq>\\<^sup>* D", "obtain m' Ts' T' D'' where \n          C': \"P \\<turnstile> C' sees M',NonStatic: Ts'\\<rightarrow>T' = m' in D''\" and\n          Ts': \"P \\<turnstile> Ts [\\<le>] Ts'\""], ["proof (prove)\nusing this:\n  P \\<turnstile> D sees M', NonStatic :  Ts\\<rightarrow>T = m in D'\n  wf_prog mb P\n  stk ! n = Addr a\n  h a = \\<lfloor>(C', fs)\\<rfloor>\n  P \\<turnstile> C' \\<preceq>\\<^sup>* D\n\ngoal (1 subgoal):\n 1. (\\<And>Ts' T' m' D''.\n        \\<lbrakk>P \\<turnstile> C' sees M', NonStatic :  Ts'\\<rightarrow>T' = m' in D'';\n         P \\<turnstile> Ts [\\<le>] Ts'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto dest!: sees_method_mono)"], ["proof (state)\nthis:\n  P \\<turnstile> C' sees M', NonStatic :  Ts'\\<rightarrow>T' = m' in D''\n  P \\<turnstile> Ts [\\<le>] Ts'\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "from stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST", "have \"P,h \\<turnstile> take n stk [:\\<le>] take n ST\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> take n stk [:\\<le>] take n ST", ".."], ["proof (state)\nthis:\n  P,h \\<turnstile> take n stk [:\\<le>] take n ST\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "hence \"P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> take n stk [:\\<le>] take n ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)", ".."], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "also"], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "note Ts"], ["proof (state)\nthis:\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "also"], ["proof (state)\nthis:\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "note Ts'"], ["proof (state)\nthis:\n  P \\<turnstile> Ts [\\<le>] Ts'\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "finally"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'", "have \"P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'", "."], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "with Invoke Null n C'"], ["proof (chain)\npicking this:\n  ins ! pc = Invoke M' n\n  stk ! n \\<noteq> Null\n  n < length ST\n  P \\<turnstile> C' sees M', NonStatic :  Ts'\\<rightarrow>T' = m' in D''\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'", "have ?thesis"], ["proof (prove)\nusing this:\n  ins ! pc = Invoke M' n\n  stk ! n \\<noteq> Null\n  n < length ST\n  P \\<turnstile> C' sees M', NonStatic :  Ts'\\<rightarrow>T' = m' in D''\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts'\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "by (auto simp add: is_Ref_def2 has_methodI)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "}"], ["proof (state)\nthis:\n  \\<lbrakk>stk ! n \\<noteq> Null; ST ! n \\<noteq> NT\\<rbrakk>\n  \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = Pop\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 15 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n  \\<lbrakk>stk ! n \\<noteq> Null; ST ! n \\<noteq> NT\\<rbrakk>\n  \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh", "show ?thesis"], ["proof (prove)\nusing this:\n  stk ! n = Null \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n  ST ! n = NT \\<Longrightarrow>\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n  \\<lbrakk>stk ! n \\<noteq> Null; ST ! n \\<noteq> NT\\<rbrakk>\n  \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "by blast"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 14 subgoals...", "case (Invokestatic C M' n)"], ["proof (state)\nthis:\n  ins ! pc = Invokestatic C M' n\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "with app"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invokestatic C M' n", "have n: \"n \\<le> size ST\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invokestatic C M' n\n\ngoal (1 subgoal):\n 1. n \\<le> length ST", "by simp"], ["proof (state)\nthis:\n  n \\<le> length ST\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "from stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST", "have [simp]: \"size stk = size ST\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n\ngoal (1 subgoal):\n 1. length stk = length ST", "by (rule list_all2_lengthD)"], ["proof (state)\nthis:\n  length stk = length ST\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "from app Invokestatic"], ["proof (chain)\npicking this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invokestatic C M' n", "obtain D Ts T m where\n        M': \"P \\<turnstile> C sees M',Static: Ts\\<rightarrow>T = m in D\" and\n        Ts: \"P \\<turnstile> rev (take n ST) [\\<le>] Ts\""], ["proof (prove)\nusing this:\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  ins ! pc = Invokestatic C M' n\n\ngoal (1 subgoal):\n 1. (\\<And>Ts T m D.\n        \\<lbrakk>P \\<turnstile> C sees M', Static :  Ts\\<rightarrow>T = m in D;\n         P \\<turnstile> rev (take n ST) [\\<le>] Ts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P \\<turnstile> C sees M', Static :  Ts\\<rightarrow>T = m in D\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "from stk"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST", "have \"P,h \\<turnstile> take n stk [:\\<le>] take n ST\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> take n stk [:\\<le>] take n ST", ".."], ["proof (state)\nthis:\n  P,h \\<turnstile> take n stk [:\\<le>] take n ST\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "hence \"P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> take n stk [:\\<le>] take n ST\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)", ".."], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "also"], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] rev (take n ST)\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "note Ts"], ["proof (state)\nthis:\n  P \\<turnstile> rev (take n ST) [\\<le>] Ts\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "finally"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts", "have \"P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts\""], ["proof (prove)\nusing this:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts\n\ngoal (1 subgoal):\n 1. P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts", "."], ["proof (state)\nthis:\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt\n                                  (\\<Phi> C__ M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n      ins ! pc = IAdd\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\nA total of 14 subgoals...", "with Invokestatic n M'"], ["proof (chain)\npicking this:\n  ins ! pc = Invokestatic C M' n\n  n \\<le> length ST\n  P \\<turnstile> C sees M', Static :  Ts\\<rightarrow>T = m in D\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts", "show ?thesis"], ["proof (prove)\nusing this:\n  ins ! pc = Invokestatic C M' n\n  n \\<le> length ST\n  P \\<turnstile> C sees M', Static :  Ts\\<rightarrow>T = m in D\n  P,h \\<turnstile> rev (take n stk) [:\\<le>] Ts\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C__ M pc frs' sh", "by (auto simp add: is_Ref_def2 has_methodI)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C__ M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 7. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C__ M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n     ins ! pc = IAdd\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs' sh\n 10. \\<And>x15.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C__ M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T__, ST, LT);\n         ins ! pc = Goto x15\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C__ M pc frs'\n                           sh\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = IAdd\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<And>x15.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Goto x15\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 13 subgoals...", "case Return"], ["proof (state)\nthis:\n  ins ! pc = Return\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Return\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = IAdd\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<And>x15.\n        \\<lbrakk>\\<forall>(pc', s')\n                          \\<in>set (eff (ins ! pc) P pc xt\n                                     (\\<Phi> C M ! pc)).\n                    pc' < length ins;\n         P,h \\<turnstile> stk [:\\<le>] ST;\n         P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n         xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n         app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n         ins ! pc = Goto x15\\<rbrakk>\n        \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 13 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "proof(cases \"M = clinit\")"], ["proof (state)\ngoal (2 subgoals):\n 1. M = clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. M \\<noteq> clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh", "case True"], ["proof (state)\nthis:\n  M = clinit\n\ngoal (2 subgoals):\n 1. M = clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. M \\<noteq> clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh", "have \"is_class P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P C", "by(rule sees_method_is_class[OF meth])"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (2 subgoals):\n 1. M = clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. M \\<noteq> clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh", "with wf_sees_clinit[OF wf]"], ["proof (chain)\npicking this:\n  class P ?C = \\<lfloor>?a\\<rfloor> \\<Longrightarrow>\n  \\<exists>m.\n     P \\<turnstile> ?C sees clinit, Static :  []\\<rightarrow>Void = m in ?C\n  is_class P C", "obtain m where \"P \\<turnstile> C sees clinit,Static: [] \\<rightarrow> Void = m in C\""], ["proof (prove)\nusing this:\n  class P ?C = \\<lfloor>?a\\<rfloor> \\<Longrightarrow>\n  \\<exists>m.\n     P \\<turnstile> ?C sees clinit, Static :  []\\<rightarrow>Void = m in ?C\n  is_class P C\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp: is_class_def)"], ["proof (state)\nthis:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (2 subgoals):\n 1. M = clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. M \\<noteq> clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh", "with stk app \\<Phi> meth frames True Return"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  conf_fs P h sh \\<Phi> C M (length Ts) T frs'\n  M = clinit\n  ins ! pc = Return\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "show ?thesis"], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  conf_fs P h sh \\<Phi> C M (length Ts) T frs'\n  M = clinit\n  ins ! pc = Return\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "by (auto simp add: has_methodI)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (1 subgoal):\n 1. M \\<noteq> clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<noteq> clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh", "case False"], ["proof (state)\nthis:\n  M \\<noteq> clinit\n\ngoal (1 subgoal):\n 1. M \\<noteq> clinit \\<Longrightarrow>\n    check_instr (ins ! pc) P h stk reg C M pc frs' sh", "with stk app \\<Phi> meth frames Return"], ["proof (chain)\npicking this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  conf_fs P h sh \\<Phi> C M (length Ts) T frs'\n  ins ! pc = Return\n  M \\<noteq> clinit", "show ?thesis"], ["proof (prove)\nusing this:\n  P,h \\<turnstile> stk [:\\<le>] ST\n  xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n  app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT)\n  \\<Phi> C M ! pc = \\<lfloor>(ST, LT)\\<rfloor>\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  conf_fs P h sh \\<Phi> C M (length Ts) T frs'\n  ins ! pc = Return\n  M \\<noteq> clinit\n\ngoal (1 subgoal):\n 1. check_instr (ins ! pc) P h stk reg C M pc frs' sh", "by (auto intro: has_methodI)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Load x1\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 2. \\<And>x2.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Store x2\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 3. \\<And>x3.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Push x3\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 4. \\<And>x4.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = New x4\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 6. \\<And>x9.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 7. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = Pop\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 8. \\<lbrakk>\\<forall>(pc', s')\n                      \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                pc' < length ins;\n     P,h \\<turnstile> stk [:\\<le>] ST;\n     P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n     xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n     app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n     ins ! pc = IAdd\\<rbrakk>\n    \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 9. \\<And>x15.\n       \\<lbrakk>\\<forall>(pc', s')\n                         \\<in>set (eff (ins ! pc) P pc xt\n                                    (\\<Phi> C M ! pc)).\n                   pc' < length ins;\n        P,h \\<turnstile> stk [:\\<le>] ST;\n        P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n        xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n        app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n        ins ! pc = Goto x15\\<rbrakk>\n       \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\n 10. \\<lbrakk>\\<forall>(pc', s')\n                       \\<in>set (eff (ins ! pc) P pc xt (\\<Phi> C M ! pc)).\n                 pc' < length ins;\n      P,h \\<turnstile> stk [:\\<le>] ST;\n      P,h \\<turnstile> reg [:\\<le>\\<^sub>\\<top>] LT;\n      xcpt_app (ins ! pc) P pc mxs xt (ST, LT) \\<and>\n      app\\<^sub>i (ins ! pc, P, pc, mxs, T, ST, LT);\n      ins ! pc = CmpEq\\<rbrakk>\n     \\<Longrightarrow> check_instr (ins ! pc) P h stk reg C M pc frs' sh\nA total of 12 subgoals...", "qed (auto simp add: list_all2_lengthD)"], ["proof (state)\nthis:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "hence \"check P \\<sigma>\""], ["proof (prove)\nusing this:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "using meth pc mxs"], ["proof (prove)\nusing this:\n  check_instr (ins ! pc) P h stk reg C M pc frs' sh\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = (mxs, mxl, ins, xt) in C\n  pc < length ins\n  length stk \\<le> mxs\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "by (auto simp: check_def intro: has_methodI)"], ["proof (state)\nthis:\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "}"], ["proof (state)\nthis:\n  \\<not> (xcp \\<noteq> None \\<or> frs = []) \\<Longrightarrow>\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "ultimately"], ["proof (chain)\npicking this:\n  xcp \\<noteq> None \\<or> frs = [] \\<Longrightarrow> check P \\<sigma>\n  \\<not> (xcp \\<noteq> None \\<or> frs = []) \\<Longrightarrow>\n  check P \\<sigma>", "have \"check P \\<sigma>\""], ["proof (prove)\nusing this:\n  xcp \\<noteq> None \\<or> frs = [] \\<Longrightarrow> check P \\<sigma>\n  \\<not> (xcp \\<noteq> None \\<or> frs = []) \\<Longrightarrow>\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. check P \\<sigma>", "by blast"], ["proof (state)\nthis:\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", "thus \"exec_d P \\<sigma> \\<noteq> TypeError\""], ["proof (prove)\nusing this:\n  check P \\<sigma>\n\ngoal (1 subgoal):\n 1. exec_d P \\<sigma> \\<noteq> TypeError", ".."], ["proof (state)\nthis:\n  exec_d P \\<sigma> \\<noteq> TypeError\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "text \\<open>\n  The theorem above tells us that, in welltyped programs, the\n  defensive machine reaches the same result as the aggressive\n  one (after arbitrarily many steps).\n\\<close>"], ["", "theorem welltyped_aggressive_imp_defensive:\n  \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P \\<Longrightarrow> P,\\<Phi> \\<turnstile> \\<sigma> \\<surd> \\<Longrightarrow> P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n  \\<Longrightarrow> P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> (Normal \\<sigma>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P,\\<Phi> |- \\<sigma> [ok];\n     P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> Normal\n\\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P,\\<Phi> |- \\<sigma> [ok];\n     P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> Normal\n\\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'", "apply (simp only: exec_all_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P; P,\\<Phi> |- \\<sigma> [ok];\n     (\\<sigma>, \\<sigma>')\n     \\<in> {(\\<sigma>, \\<sigma>').\n            exec (P, \\<sigma>) =\n            \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> Normal\n\\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'", "apply (erule rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n     P,\\<Phi> |- \\<sigma> [ok]\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> Normal\n\\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>\n 2. \\<And>y z.\n       \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n        P,\\<Phi> |- \\<sigma> [ok];\n        (\\<sigma>, y)\n        \\<in> {(\\<sigma>, \\<sigma>').\n               exec (P, \\<sigma>) = \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*;\n        (y, z)\n        \\<in> {(\\<sigma>, \\<sigma>').\n               exec (P, \\<sigma>) = \\<lfloor>\\<sigma>'\\<rfloor>};\n        P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Normal\n   \\<sigma> -jvmd\\<rightarrow> Normal z", "apply (simp add: exec_all_d_def1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n        P,\\<Phi> |- \\<sigma> [ok];\n        (\\<sigma>, y)\n        \\<in> {(\\<sigma>, \\<sigma>').\n               exec (P, \\<sigma>) = \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*;\n        (y, z)\n        \\<in> {(\\<sigma>, \\<sigma>').\n               exec (P, \\<sigma>) = \\<lfloor>\\<sigma>'\\<rfloor>};\n        P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Normal\n   \\<sigma> -jvmd\\<rightarrow> Normal z", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n        P,\\<Phi> |- \\<sigma> [ok];\n        (\\<sigma>, y)\n        \\<in> {(\\<sigma>, \\<sigma>').\n               exec (P, \\<sigma>) = \\<lfloor>\\<sigma>'\\<rfloor>}\\<^sup>*;\n        exec (P, y) = \\<lfloor>z\\<rfloor>;\n        P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Normal\n   \\<sigma> -jvmd\\<rightarrow> Normal z", "apply (simp only: exec_all_def [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n        P,\\<Phi> |- \\<sigma> [ok];\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> y;\n        exec (P, y) = \\<lfloor>z\\<rfloor>;\n        P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal y\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Normal\n   \\<sigma> -jvmd\\<rightarrow> Normal z", "apply (frule BV_correct, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n        P,\\<Phi> |- \\<sigma> [ok];\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> y;\n        exec (P, y) = \\<lfloor>z\\<rfloor>;\n        P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal y;\n        P,\\<Phi> |- y [ok]\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Normal\n   \\<sigma> -jvmd\\<rightarrow> Normal z", "apply (drule no_type_error, assumption, drule no_type_error_commutes, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P,\\<Phi> |- \\<sigma> [ok];\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> y;\n        exec (P, y) = \\<lfloor>z\\<rfloor>;\n        P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal y;\n        P,\\<Phi> |- y [ok]; exec_d P y = Normal \\<lfloor>z\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> Normal\n   \\<sigma> -jvmd\\<rightarrow> Normal z", "apply (simp add: exec_all_d_def1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P,\\<Phi> |- \\<sigma> [ok];\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> y;\n        exec (P, y) = \\<lfloor>z\\<rfloor>;\n        (Normal \\<sigma>, Normal y) \\<in> (exec_1_d P)\\<^sup>*;\n        P,\\<Phi> |- y [ok]; exec_d P y = Normal \\<lfloor>z\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (Normal \\<sigma>, Normal z)\n                         \\<in> (exec_1_d P)\\<^sup>*", "apply (rule rtrancl_trans, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P,\\<Phi> |- \\<sigma> [ok];\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> y;\n        exec (P, y) = \\<lfloor>z\\<rfloor>;\n        (Normal \\<sigma>, Normal y) \\<in> (exec_1_d P)\\<^sup>*;\n        P,\\<Phi> |- y [ok]; exec_d P y = Normal \\<lfloor>z\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (Normal y, Normal z) \\<in> (exec_1_d P)\\<^sup>*", "apply (drule exec_1_d_NormalI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P,\\<Phi> |- \\<sigma> [ok];\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> y;\n        exec (P, y) = \\<lfloor>z\\<rfloor>;\n        (Normal \\<sigma>, Normal y) \\<in> (exec_1_d P)\\<^sup>*;\n        P,\\<Phi> |- y [ok];\n        P \\<turnstile> Normal y -jvmd\\<rightarrow>\\<^sub>1 Normal z\\<rbrakk>\n       \\<Longrightarrow> (Normal y, Normal z) \\<in> (exec_1_d P)\\<^sup>*", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text \\<open>\n  As corollary we get that the aggressive and the defensive machine\n  are equivalent for welltyped programs (if started in a conformant\n  state or in the canonical start state)\n\\<close>"], ["", "corollary welltyped_commutes:\n  fixes \\<sigma> :: jvm_state\n  assumes wf: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\" and conforms: \"P,\\<Phi> \\<turnstile> \\<sigma> \\<surd>\" \n  shows \"P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> (Normal \\<sigma>') = P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> Normal\n           \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\n 2. P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'", "apply (erule defensive_imp_aggressive)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>'", "apply (erule welltyped_aggressive_imp_defensive [OF wf conforms])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary welltyped_initial_commutes:\n  assumes wf: \"wf_jvm_prog P\"\n  assumes nstart: \"\\<not> is_class P Start\"\n  assumes meth: \"P \\<turnstile> C sees M,Static:[]\\<rightarrow>Void = b in C\" \n  assumes nclinit: \"M \\<noteq> clinit\"\n  assumes Obj_start_m:\n    \"(\\<And>b' Ts' T' m' D'. P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = m' in D'\n         \\<Longrightarrow> b' = Static \\<and> Ts' = [] \\<and> T' = Void)\"\n  defines start: \"\\<sigma> \\<equiv> start_state P\"\n  shows \"start_prog P C M \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> (Normal \\<sigma>') = start_prog P C M \\<turnstile> \\<sigma> -jvm\\<rightarrow> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "from wf"], ["proof (chain)\npicking this:\n  wf_jvm_prog P", "obtain \\<Phi> where wf': \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog P\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>.\n        wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: wf_jvm_prog_def)"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "let ?\\<Phi> = \"\\<Phi>_start \\<Phi>\""], ["proof (state)\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "from start_prog_wf_jvm_prog_phi[where \\<Phi>'=\"?\\<Phi>\", OF wf' nstart meth nclinit \\<Phi>_start Obj_start_m]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>C. C \\<noteq> Start \\<Longrightarrow> C \\<noteq> Start;\n   \\<And>b' Ts' T' m' D'.\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = m' in D' \\<Longrightarrow>\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = ?m'1 b'\n                                Ts' T' m'\n                                D' in ?D'1 b' Ts' T' m' D'\\<rbrakk>\n  \\<Longrightarrow> wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n                     (class_add P (start_class C M))", "have \"wf_jvm_prog\\<^bsub>?\\<Phi>\\<^esub>(start_prog P C M)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>C. C \\<noteq> Start \\<Longrightarrow> C \\<noteq> Start;\n   \\<And>b' Ts' T' m' D'.\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = m' in D' \\<Longrightarrow>\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = ?m'1 b'\n                                Ts' T' m'\n                                D' in ?D'1 b' Ts' T' m' D'\\<rbrakk>\n  \\<Longrightarrow> wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n                     (class_add P (start_class C M))\n\ngoal (1 subgoal):\n 1. wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n     (class_add P (start_class C M))", "by simp"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n   (class_add P (start_class C M))\n\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "moreover"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n   (class_add P (start_class C M))\n\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "from wf' nstart meth nclinit \\<Phi>_start(2)"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  \\<not> is_class P Start\n  P \\<turnstile> C sees M, Static :  []\\<rightarrow>Void = b in C\n  M \\<noteq> clinit\n  \\<Phi>_start ?\\<Phi> Start start_m = start_\\<phi>\\<^sub>m", "have \"start_prog P C M,?\\<Phi> \\<turnstile> \\<sigma> \\<surd>\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  \\<not> is_class P Start\n  P \\<turnstile> C sees M, Static :  []\\<rightarrow>Void = b in C\n  M \\<noteq> clinit\n  \\<Phi>_start ?\\<Phi> Start start_m = start_\\<phi>\\<^sub>m\n\ngoal (1 subgoal):\n 1. class_add P (start_class C M),\\<Phi>_start \\<Phi> |- \\<sigma> [ok]", "unfolding start"], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n  \\<not> is_class P Start\n  P \\<turnstile> C sees M, Static :  []\\<rightarrow>Void = b in C\n  M \\<noteq> clinit\n  \\<Phi>_start ?\\<Phi> Start start_m = start_\\<phi>\\<^sub>m\n\ngoal (1 subgoal):\n 1. class_add P (start_class C M),\\<Phi>_start \\<Phi> |- start_state P [ok]", "by (rule BV_correct_initial)"], ["proof (state)\nthis:\n  class_add P (start_class C M),\\<Phi>_start \\<Phi> |- \\<sigma> [ok]\n\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "ultimately"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n   (class_add P (start_class C M))\n  class_add P (start_class C M),\\<Phi>_start \\<Phi> |- \\<sigma> [ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n   (class_add P (start_class C M))\n  class_add P (start_class C M),\\<Phi>_start \\<Phi> |- \\<sigma> [ok]\n\ngoal (1 subgoal):\n 1. class_add P\n     (start_class C\n       M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n    class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n    \\<sigma>'", "by (rule welltyped_commutes)"], ["proof (state)\nthis:\n  class_add P\n   (start_class C\n     M) \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> Normal \\<sigma>' =\n  class_add P (start_class C M) \\<turnstile> \\<sigma> -jvm\\<rightarrow>\n  \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_TypeError_eq [iff]:\n  \"x \\<noteq> TypeError = (\\<exists>t. x = Normal t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<noteq> TypeError) = (\\<exists>t. x = Normal t)", "by (cases x) auto"], ["", "locale cnf =\n  fixes P and \\<Phi> and \\<sigma>\n  assumes wf: \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\"  \n  assumes cnf: \"correct_state P \\<Phi> \\<sigma>\""], ["", "theorem (in cnf) no_type_errors:\n  \"P \\<turnstile> (Normal \\<sigma>) -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow> \\<sigma>' \\<noteq> TypeError\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> Normal\n                    \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "apply (unfold exec_all_d_def1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Normal \\<sigma>, \\<sigma>')\n    \\<in> (exec_1_d P)\\<^sup>* \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "apply (erule rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Normal \\<sigma> \\<noteq> TypeError\n 2. \\<And>y z.\n       \\<lbrakk>(Normal \\<sigma>, y) \\<in> (exec_1_d P)\\<^sup>*;\n        P \\<turnstile> y -jvmd\\<rightarrow>\\<^sub>1 z;\n        y \\<noteq> TypeError\\<rbrakk>\n       \\<Longrightarrow> z \\<noteq> TypeError", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(Normal \\<sigma>, y) \\<in> (exec_1_d P)\\<^sup>*;\n        P \\<turnstile> y -jvmd\\<rightarrow>\\<^sub>1 z;\n        y \\<noteq> TypeError\\<rbrakk>\n       \\<Longrightarrow> z \\<noteq> TypeError", "apply (fold exec_all_d_def1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> y;\n        P \\<turnstile> y -jvmd\\<rightarrow>\\<^sub>1 z;\n        y \\<noteq> TypeError\\<rbrakk>\n       \\<Longrightarrow> z \\<noteq> TypeError", "apply (insert cnf wf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> Normal \\<sigma> -jvmd\\<rightarrow> y;\n        P \\<turnstile> y -jvmd\\<rightarrow>\\<^sub>1 z; y \\<noteq> TypeError;\n        P,\\<Phi> |- \\<sigma> [ok];\n        wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\\<rbrakk>\n       \\<Longrightarrow> z \\<noteq> TypeError", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a aa ab b.\n       \\<lbrakk>P \\<turnstile> Normal\n                                \\<sigma> -jvmd\\<rightarrow> Normal\n                       (a, aa, ab, b);\n        P \\<turnstile> Normal (a, aa, ab, b) -jvmd\\<rightarrow>\\<^sub>1 z;\n        P,\\<Phi> |- \\<sigma> [ok];\n        wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a aa ab b. z = Normal (a, aa, ab, b)", "apply (drule defensive_imp_aggressive)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a aa ab b.\n       \\<lbrakk>P \\<turnstile> Normal\n                                (a, aa, ab, b) -jvmd\\<rightarrow>\\<^sub>1 z;\n        P,\\<Phi> |- \\<sigma> [ok]; wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> (a, aa, ab, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a aa ab b. z = Normal (a, aa, ab, b)", "apply (frule (2) BV_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z a aa ab b.\n       \\<lbrakk>P \\<turnstile> Normal\n                                (a, aa, ab, b) -jvmd\\<rightarrow>\\<^sub>1 z;\n        P,\\<Phi> |- \\<sigma> [ok]; wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P;\n        P \\<turnstile> \\<sigma> -jvm\\<rightarrow> (a, aa, ab, b);\n        P,\\<Phi> |- (a, aa, ab, b) [ok]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a aa ab b. z = Normal (a, aa, ab, b)", "apply (auto simp add: exec_1_d_eq dest: no_type_error)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "locale start =\n  fixes P and C and M and \\<sigma> and T and b and P\\<^sub>0\n  assumes wf: \"wf_jvm_prog P\"\n  assumes nstart: \"\\<not> is_class P Start\"\n  assumes sees: \"P \\<turnstile> C sees M,Static:[]\\<rightarrow>Void = b in C\" \n  assumes nclinit: \"M \\<noteq> clinit\"\n  assumes Obj_start_m: \"(\\<And>b' Ts' T' m' D'. P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = m' in D'\n         \\<Longrightarrow> b' = Static \\<and> Ts' = [] \\<and> T' = Void)\"\n  defines \"\\<sigma> \\<equiv> Normal (start_state P)\"\n  defines [simp]: \"P\\<^sub>0 \\<equiv> start_prog P C M\""], ["", "corollary (in start) bv_no_type_error:\n  shows \"P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow> \\<sigma>' \\<noteq> TypeError\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "from wf"], ["proof (chain)\npicking this:\n  wf_jvm_prog P", "obtain \\<Phi> where wf': \"wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\""], ["proof (prove)\nusing this:\n  wf_jvm_prog P\n\ngoal (1 subgoal):\n 1. (\\<And>\\<Phi>.\n        wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: wf_jvm_prog_def)"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>\\<^esub> P\n\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "let ?\\<Phi> = \"\\<Phi>_start \\<Phi>\""], ["proof (state)\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "from start_prog_wf_jvm_prog_phi[where \\<Phi>'=\"?\\<Phi>\", OF wf' nstart sees nclinit \\<Phi>_start Obj_start_m]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>C. C \\<noteq> Start \\<Longrightarrow> C \\<noteq> Start;\n   \\<And>b' Ts' T' m' D'.\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = m' in D' \\<Longrightarrow>\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = ?m'1 b'\n                                Ts' T' m'\n                                D' in ?D'1 b' Ts' T' m' D'\\<rbrakk>\n  \\<Longrightarrow> wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n                     (class_add P (start_class C M))", "have \"wf_jvm_prog\\<^bsub>?\\<Phi>\\<^esub>P\\<^sub>0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>C. C \\<noteq> Start \\<Longrightarrow> C \\<noteq> Start;\n   \\<And>b' Ts' T' m' D'.\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = m' in D' \\<Longrightarrow>\n      P \\<turnstile> Object sees start_m, b' :  Ts'\\<rightarrow>T' = ?m'1 b'\n                                Ts' T' m'\n                                D' in ?D'1 b' Ts' T' m' D'\\<rbrakk>\n  \\<Longrightarrow> wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub>\n                     (class_add P (start_class C M))\n\ngoal (1 subgoal):\n 1. wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub> P\\<^sub>0", "by simp"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub> P\\<^sub>0\n\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "moreover"], ["proof (state)\nthis:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub> P\\<^sub>0\n\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "from BV_correct_initial[where \\<Phi>'=\"?\\<Phi>\", OF wf' nstart sees nclinit \\<Phi>_start(2)]"], ["proof (chain)\npicking this:\n  class_add P (start_class C M),\\<Phi>_start \\<Phi> |- start_state P [ok]", "have \"correct_state P\\<^sub>0 ?\\<Phi> (start_state P)\""], ["proof (prove)\nusing this:\n  class_add P (start_class C M),\\<Phi>_start \\<Phi> |- start_state P [ok]\n\ngoal (1 subgoal):\n 1. P\\<^sub>0,\\<Phi>_start \\<Phi> |- start_state P [ok]", "by simp"], ["proof (state)\nthis:\n  P\\<^sub>0,\\<Phi>_start \\<Phi> |- start_state P [ok]\n\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "ultimately"], ["proof (chain)\npicking this:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub> P\\<^sub>0\n  P\\<^sub>0,\\<Phi>_start \\<Phi> |- start_state P [ok]", "have \"cnf P\\<^sub>0 ?\\<Phi> (start_state P)\""], ["proof (prove)\nusing this:\n  wf_jvm_prog\\<^bsub>\\<Phi>_start \\<Phi>\\<^esub> P\\<^sub>0\n  P\\<^sub>0,\\<Phi>_start \\<Phi> |- start_state P [ok]\n\ngoal (1 subgoal):\n 1. cnf P\\<^sub>0 (\\<Phi>_start \\<Phi>) (start_state P)", "by (rule cnf.intro)"], ["proof (state)\nthis:\n  cnf P\\<^sub>0 (\\<Phi>_start \\<Phi>) (start_state P)\n\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "moreover"], ["proof (state)\nthis:\n  cnf P\\<^sub>0 (\\<Phi>_start \\<Phi>) (start_state P)\n\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "assume \"P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>'\""], ["proof (state)\nthis:\n  P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>'\n\ngoal (1 subgoal):\n 1. P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>' \\<Longrightarrow>\n    \\<sigma>' \\<noteq> TypeError", "ultimately"], ["proof (chain)\npicking this:\n  cnf P\\<^sub>0 (\\<Phi>_start \\<Phi>) (start_state P)\n  P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  cnf P\\<^sub>0 (\\<Phi>_start \\<Phi>) (start_state P)\n  P\\<^sub>0 \\<turnstile> \\<sigma> -jvmd\\<rightarrow> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<noteq> TypeError", "by (unfold \\<sigma>_def) (rule cnf.no_type_errors)"], ["proof (state)\nthis:\n  \\<sigma>' \\<noteq> TypeError\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}