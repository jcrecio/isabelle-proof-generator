{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/Common/Conform.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma conf_Null [simp]: \"P,h \\<turnstile> Null :\\<le> T  =  P \\<turnstile> NT \\<le> T\"", "lemma typeof_conf[simp]: \"typeof\\<^bsub>h\\<^esub> v = Some T \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T\"", "lemma typeof_lit_conf[simp]: \"typeof v = Some T \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T\"", "lemma defval_conf[simp]: \"P,h \\<turnstile> default_val T :\\<le> T\"", "lemma conf_upd_obj: \"h a = Some(C,fs) \\<Longrightarrow> (P,h(a\\<mapsto>(C,fs')) \\<turnstile> x :\\<le> T) = (P,h \\<turnstile> x :\\<le> T)\"", "lemma conf_widen: \"P,h \\<turnstile> v :\\<le> T \\<Longrightarrow> P \\<turnstile> T \\<le> T' \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T'\"", "lemma conf_hext: \"h \\<unlhd> h' \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T \\<Longrightarrow> P,h' \\<turnstile> v :\\<le> T\"", "lemma conf_ClassD: \"P,h \\<turnstile> v :\\<le> Class C \\<Longrightarrow>\n  v = Null \\<or> (\\<exists>a obj T. v = Addr a \\<and>  h a = Some obj \\<and> obj_ty obj = T \\<and>  P \\<turnstile> T \\<le> Class C)\"", "lemma conf_NT [iff]: \"P,h \\<turnstile> v :\\<le> NT = (v = Null)\"", "lemma non_npD: \"\\<lbrakk> v \\<noteq> Null; P,h \\<turnstile> v :\\<le> Class C \\<rbrakk>\n  \\<Longrightarrow> \\<exists>a C' fs. v = Addr a \\<and> h a = Some(C',fs) \\<and> P \\<turnstile> C' \\<preceq>\\<^sup>* C\"", "lemma confs_widens [trans]: \"\\<lbrakk>P,h \\<turnstile> vs [:\\<le>] Ts; P \\<turnstile> Ts [\\<le>] Ts'\\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> vs [:\\<le>] Ts'\"", "lemma confs_rev: \"P,h \\<turnstile> rev s [:\\<le>] t = (P,h \\<turnstile> s [:\\<le>] rev t)\"", "lemma confs_conv_map:\n  \"\\<And>Ts'. P,h \\<turnstile> vs [:\\<le>] Ts' = (\\<exists>Ts. map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and> P \\<turnstile> Ts [\\<le>] Ts')\"", "lemma confs_hext: \"P,h \\<turnstile> vs [:\\<le>] Ts \\<Longrightarrow> h \\<unlhd> h' \\<Longrightarrow> P,h' \\<turnstile> vs [:\\<le>] Ts\"", "lemma confs_Cons2: \"P,h \\<turnstile> xs [:\\<le>] y#ys = (\\<exists>z zs. xs = z#zs \\<and> P,h \\<turnstile> z :\\<le> y \\<and> P,h \\<turnstile> zs [:\\<le>] ys)\"", "lemma oconf_hext: \"P,h \\<turnstile> obj \\<surd> \\<Longrightarrow> h \\<unlhd> h' \\<Longrightarrow> P,h' \\<turnstile> obj \\<surd>\"", "lemma oconf_blank:\n \"P \\<turnstile> C has_fields FDTs \\<Longrightarrow> P,h \\<turnstile> blank P C \\<surd>\"", "lemma oconf_fupd [intro?]:\n  \"\\<lbrakk> P \\<turnstile> C has F,NonStatic:T in D; P,h \\<turnstile> v :\\<le> T; P,h \\<turnstile> (C,fs) \\<surd> \\<rbrakk> \n  \\<Longrightarrow> P,h \\<turnstile> (C, fs((F,D)\\<mapsto>v)) \\<surd>\"", "lemmas oconf_new = oconf_hext [OF _ hext_new]", "lemmas oconf_upd_obj = oconf_hext [OF _ hext_upd_obj]", "lemma soconf_hext: \"P,h,C \\<turnstile>\\<^sub>s obj \\<surd> \\<Longrightarrow> h \\<unlhd> h' \\<Longrightarrow> P,h',C \\<turnstile>\\<^sub>s obj \\<surd>\"", "lemma soconf_sblank:\n \"P \\<turnstile> C has_fields FDTs \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>\"", "lemma soconf_fupd [intro?]:\n  \"\\<lbrakk> P \\<turnstile> C has F,Static:T in C; P,h \\<turnstile> v :\\<le> T; P,h,C \\<turnstile>\\<^sub>s sfs \\<surd> \\<rbrakk> \n  \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs(F\\<mapsto>v) \\<surd>\"", "lemmas soconf_new = soconf_hext [OF _ hext_new]", "lemmas soconf_upd_obj = soconf_hext [OF _ hext_upd_obj]", "lemma hconfD: \"\\<lbrakk> P \\<turnstile> h \\<surd>; h a = Some obj \\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> obj \\<surd>\"", "lemma hconf_new: \"\\<lbrakk> P \\<turnstile> h \\<surd>; h a = None; P,h \\<turnstile> obj \\<surd> \\<rbrakk> \\<Longrightarrow> P \\<turnstile> h(a\\<mapsto>obj) \\<surd>\"", "lemma hconf_upd_obj: \"\\<lbrakk> P \\<turnstile> h\\<surd>; h a = Some(C,fs); P,h \\<turnstile> (C,fs')\\<surd> \\<rbrakk> \\<Longrightarrow> P \\<turnstile> h(a\\<mapsto>(C,fs'))\\<surd>\"", "lemma shconfD: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; sh C = Some(sfs,i) \\<rbrakk> \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs \\<surd>\"", "lemma shconf_upd_obj: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; P,h,C \\<turnstile>\\<^sub>s sfs' \\<surd> \\<rbrakk>\n \\<Longrightarrow> P,h \\<turnstile>\\<^sub>s sh(C\\<mapsto>(sfs',i'))\\<surd>\"", "lemma shconf_hnew: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; h a = None \\<rbrakk> \\<Longrightarrow> P,h(a\\<mapsto>obj) \\<turnstile>\\<^sub>s sh \\<surd>\"", "lemma shconf_hupd_obj: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; h a = Some(C,fs) \\<rbrakk> \\<Longrightarrow> P,h(a\\<mapsto>(C,fs')) \\<turnstile>\\<^sub>s sh \\<surd>\"", "lemma lconf_hext: \"\\<lbrakk> P,h \\<turnstile> l (:\\<le>) E; h \\<unlhd> h' \\<rbrakk> \\<Longrightarrow> P,h' \\<turnstile> l (:\\<le>) E\"", "lemma lconf_upd:\n  \"\\<lbrakk> P,h \\<turnstile> l (:\\<le>) E; P,h \\<turnstile> v :\\<le> T; E V = Some T \\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> l(V\\<mapsto>v) (:\\<le>) E\"", "lemma lconf_empty[iff]: \"P,h \\<turnstile> Map.empty (:\\<le>) E\"", "lemma lconf_upd2: \"\\<lbrakk>P,h \\<turnstile> l (:\\<le>) E; P,h \\<turnstile> v :\\<le> T\\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> l(V\\<mapsto>v) (:\\<le>) E(V\\<mapsto>T)\""], "translations": [["", "lemma conf_Null [simp]: \"P,h \\<turnstile> Null :\\<le> T  =  P \\<turnstile> NT \\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> Null :\\<le> T) = P \\<turnstile> NT \\<le> T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> Null :\\<le> T) = P \\<turnstile> NT \\<le> T", "by (simp (no_asm) add: conf_def)"], ["", "(*>*)"], ["", "lemma typeof_conf[simp]: \"typeof\\<^bsub>h\\<^esub> v = Some T \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    P,h \\<turnstile> v :\\<le> T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof\\<^bsub>h\\<^esub> v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    P,h \\<turnstile> v :\\<le> T", "by (induct v) (auto simp: conf_def)"], ["", "(*>*)"], ["", "lemma typeof_lit_conf[simp]: \"typeof v = Some T \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    P,h \\<turnstile> v :\\<le> T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. typeof v = \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    P,h \\<turnstile> v :\\<le> T", "by (rule typeof_conf[OF typeof_lit_typeof])"], ["", "(*>*)"], ["", "lemma defval_conf[simp]: \"P,h \\<turnstile> default_val T :\\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> default_val T :\\<le> T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> default_val T :\\<le> T", "by (cases T) (auto simp: conf_def)"], ["", "(*>*)"], ["", "lemma conf_upd_obj: \"h a = Some(C,fs) \\<Longrightarrow> (P,h(a\\<mapsto>(C,fs')) \\<turnstile> x :\\<le> T) = (P,h \\<turnstile> x :\\<le> T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = \\<lfloor>(C, fs)\\<rfloor> \\<Longrightarrow>\n    (P,h(a \\<mapsto> (C, fs')) \\<turnstile> x :\\<le> T) =\n    (P,h \\<turnstile> x :\\<le> T)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. h a = \\<lfloor>(C, fs)\\<rfloor> \\<Longrightarrow>\n    (P,h(a \\<mapsto> (C, fs')) \\<turnstile> x :\\<le> T) =\n    (P,h \\<turnstile> x :\\<le> T)", "by (rule val.induct) (auto simp:conf_def fun_upd_apply)"], ["", "(*>*)"], ["", "lemma conf_widen: \"P,h \\<turnstile> v :\\<le> T \\<Longrightarrow> P \\<turnstile> T \\<le> T' \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; P \\<turnstile> T \\<le> T'\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> v :\\<le> T; P \\<turnstile> T \\<le> T'\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T'", "by (induct v) (auto intro: widen_trans simp: conf_def)"], ["", "(*>*)"], ["", "lemma conf_hext: \"h \\<unlhd> h' \\<Longrightarrow> P,h \\<turnstile> v :\\<le> T \\<Longrightarrow> P,h' \\<turnstile> v :\\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h'; P,h \\<turnstile> v :\\<le> T\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> v :\\<le> T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>h \\<unlhd> h'; P,h \\<turnstile> v :\\<le> T\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> v :\\<le> T", "by (induct v) (auto dest: hext_objD simp: conf_def)"], ["", "(*>*)"], ["", "lemma conf_ClassD: \"P,h \\<turnstile> v :\\<le> Class C \\<Longrightarrow>\n  v = Null \\<or> (\\<exists>a obj T. v = Addr a \\<and>  h a = Some obj \\<and> obj_ty obj = T \\<and>  P \\<turnstile> T \\<le> Class C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> v :\\<le> Class C \\<Longrightarrow>\n    v = Null \\<or>\n    (\\<exists>a obj T.\n        v = Addr a \\<and>\n        h a = \\<lfloor>obj\\<rfloor> \\<and>\n        obj_ty obj = T \\<and> P \\<turnstile> T \\<le> Class C)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> v :\\<le> Class C \\<Longrightarrow>\n    v = Null \\<or>\n    (\\<exists>a obj T.\n        v = Addr a \\<and>\n        h a = \\<lfloor>obj\\<rfloor> \\<and>\n        obj_ty obj = T \\<and> P \\<turnstile> T \\<le> Class C)", "by(induct v) (auto simp: conf_def)"], ["", "(*>*)"], ["", "lemma conf_NT [iff]: \"P,h \\<turnstile> v :\\<le> NT = (v = Null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> v :\\<le> NT) = (v = Null)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> v :\\<le> NT) = (v = Null)", "by (auto simp add: conf_def)"], ["", "(*>*)"], ["", "lemma non_npD: \"\\<lbrakk> v \\<noteq> Null; P,h \\<turnstile> v :\\<le> Class C \\<rbrakk>\n  \\<Longrightarrow> \\<exists>a C' fs. v = Addr a \\<and> h a = Some(C',fs) \\<and> P \\<turnstile> C' \\<preceq>\\<^sup>* C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> Null; P,h \\<turnstile> v :\\<le> Class C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a C' fs.\n                         v = Addr a \\<and>\n                         h a = \\<lfloor>(C', fs)\\<rfloor> \\<and>\n                         P \\<turnstile> C' \\<preceq>\\<^sup>* C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<noteq> Null; P,h \\<turnstile> v :\\<le> Class C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a C' fs.\n                         v = Addr a \\<and>\n                         h a = \\<lfloor>(C', fs)\\<rfloor> \\<and>\n                         P \\<turnstile> C' \\<preceq>\\<^sup>* C", "by (auto dest: conf_ClassD)"], ["", "(*>*)"], ["", "subsection\\<open> Value list conformance @{text\"[:\\<le>]\"} \\<close>"], ["", "lemma confs_widens [trans]: \"\\<lbrakk>P,h \\<turnstile> vs [:\\<le>] Ts; P \\<turnstile> Ts [\\<le>] Ts'\\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> vs [:\\<le>] Ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> vs [:\\<le>] Ts;\n     P \\<turnstile> Ts [\\<le>] Ts'\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> vs [:\\<le>] Ts'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> vs [:\\<le>] Ts;\n     P \\<turnstile> Ts [\\<le>] Ts'\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> vs [:\\<le>] Ts'", "by(auto intro: list_all2_trans conf_widen)"], ["", "(*>*)"], ["", "lemma confs_rev: \"P,h \\<turnstile> rev s [:\\<le>] t = (P,h \\<turnstile> s [:\\<le>] rev t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> rev s [:\\<le>] t) =\n    (P,h \\<turnstile> s [:\\<le>] rev t)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> rev s [:\\<le>] t) =\n    (P,h \\<turnstile> s [:\\<le>] rev t)", "by (simp add: list_all2_rev1)"], ["", "(*>*)"], ["", "lemma confs_conv_map:\n  \"\\<And>Ts'. P,h \\<turnstile> vs [:\\<le>] Ts' = (\\<exists>Ts. map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and> P \\<turnstile> Ts [\\<le>] Ts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ts'.\n       (P,h \\<turnstile> vs [:\\<le>] Ts') =\n       (\\<exists>Ts.\n           map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts')", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ts'.\n       (P,h \\<turnstile> vs [:\\<le>] Ts') =\n       (\\<exists>Ts.\n           map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts')", "proof(induct vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Ts'.\n       (P,h \\<turnstile> [] [:\\<le>] Ts') =\n       (\\<exists>Ts.\n           map typeof\\<^bsub>h\\<^esub> [] = map Some Ts \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts')\n 2. \\<And>a vs Ts'.\n       (\\<And>Ts'.\n           (P,h \\<turnstile> vs [:\\<le>] Ts') =\n           (\\<exists>Ts.\n               map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts')) \\<Longrightarrow>\n       (P,h \\<turnstile> a # vs [:\\<le>] Ts') =\n       (\\<exists>Ts.\n           map typeof\\<^bsub>h\\<^esub> (a # vs) = map Some Ts \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts')", "case (Cons a vs)"], ["proof (state)\nthis:\n  (P,h \\<turnstile> vs [:\\<le>] ?Ts') =\n  (\\<exists>Ts.\n      map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and>\n      P \\<turnstile> Ts [\\<le>] ?Ts')\n\ngoal (2 subgoals):\n 1. \\<And>Ts'.\n       (P,h \\<turnstile> [] [:\\<le>] Ts') =\n       (\\<exists>Ts.\n           map typeof\\<^bsub>h\\<^esub> [] = map Some Ts \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts')\n 2. \\<And>a vs Ts'.\n       (\\<And>Ts'.\n           (P,h \\<turnstile> vs [:\\<le>] Ts') =\n           (\\<exists>Ts.\n               map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts')) \\<Longrightarrow>\n       (P,h \\<turnstile> a # vs [:\\<le>] Ts') =\n       (\\<exists>Ts.\n           map typeof\\<^bsub>h\\<^esub> (a # vs) = map Some Ts \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts')", "then"], ["proof (chain)\npicking this:\n  (P,h \\<turnstile> vs [:\\<le>] ?Ts') =\n  (\\<exists>Ts.\n      map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and>\n      P \\<turnstile> Ts [\\<le>] ?Ts')", "show ?case"], ["proof (prove)\nusing this:\n  (P,h \\<turnstile> vs [:\\<le>] ?Ts') =\n  (\\<exists>Ts.\n      map typeof\\<^bsub>h\\<^esub> vs = map Some Ts \\<and>\n      P \\<turnstile> Ts [\\<le>] ?Ts')\n\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> a # vs [:\\<le>] Ts') =\n    (\\<exists>Ts.\n        map typeof\\<^bsub>h\\<^esub> (a # vs) = map Some Ts \\<and>\n        P \\<turnstile> Ts [\\<le>] Ts')", "by(case_tac Ts') (auto simp add:conf_def)"], ["proof (state)\nthis:\n  (P,h \\<turnstile> a # vs [:\\<le>] Ts') =\n  (\\<exists>Ts.\n      map typeof\\<^bsub>h\\<^esub> (a # vs) = map Some Ts \\<and>\n      P \\<turnstile> Ts [\\<le>] Ts')\n\ngoal (1 subgoal):\n 1. \\<And>Ts'.\n       (P,h \\<turnstile> [] [:\\<le>] Ts') =\n       (\\<exists>Ts.\n           map typeof\\<^bsub>h\\<^esub> [] = map Some Ts \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts')", "qed simp"], ["", "(*>*)"], ["", "lemma confs_hext: \"P,h \\<turnstile> vs [:\\<le>] Ts \\<Longrightarrow> h \\<unlhd> h' \\<Longrightarrow> P,h' \\<turnstile> vs [:\\<le>] Ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> vs [:\\<le>] Ts; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> vs [:\\<le>] Ts", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> vs [:\\<le>] Ts; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> vs [:\\<le>] Ts", "by (erule list_all2_mono, erule conf_hext, assumption)"], ["", "(*>*)"], ["", "lemma confs_Cons2: \"P,h \\<turnstile> xs [:\\<le>] y#ys = (\\<exists>z zs. xs = z#zs \\<and> P,h \\<turnstile> z :\\<le> y \\<and> P,h \\<turnstile> zs [:\\<le>] ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> xs [:\\<le>] y # ys) =\n    (\\<exists>z zs.\n        xs = z # zs \\<and>\n        P,h \\<turnstile> z :\\<le> y \\<and> P,h \\<turnstile> zs [:\\<le>] ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P,h \\<turnstile> xs [:\\<le>] y # ys) =\n    (\\<exists>z zs.\n        xs = z # zs \\<and>\n        P,h \\<turnstile> z :\\<le> y \\<and> P,h \\<turnstile> zs [:\\<le>] ys)", "by (rule list_all2_Cons2)"], ["", "(*>*)"], ["", "subsection \"Object conformance\""], ["", "lemma oconf_hext: \"P,h \\<turnstile> obj \\<surd> \\<Longrightarrow> h \\<unlhd> h' \\<Longrightarrow> P,h' \\<turnstile> obj \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> obj \\<surd>; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> obj \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> obj \\<surd>; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> obj \\<surd>", "by (fastforce elim:conf_hext simp: oconf_def)"], ["", "(*>*)"], ["", "lemma oconf_blank:\n \"P \\<turnstile> C has_fields FDTs \\<Longrightarrow> P,h \\<turnstile> blank P C \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h \\<turnstile> blank P C \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h \\<turnstile> blank P C \\<surd>", "by(fastforce dest: has_fields_fun\n             simp: has_field_def oconf_def blank_def init_fields_def\n                   map_of_filtered_SomeD)"], ["", "(*>*)"], ["", "lemma oconf_fupd [intro?]:\n  \"\\<lbrakk> P \\<turnstile> C has F,NonStatic:T in D; P,h \\<turnstile> v :\\<le> T; P,h \\<turnstile> (C,fs) \\<surd> \\<rbrakk> \n  \\<Longrightarrow> P,h \\<turnstile> (C, fs((F,D)\\<mapsto>v)) \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has F,NonStatic:T in D;\n     P,h \\<turnstile> v :\\<le> T; P,h \\<turnstile> (C, fs) \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> (C, fs((F, D) \\<mapsto> v)) \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has F,NonStatic:T in D;\n     P,h \\<turnstile> v :\\<le> T; P,h \\<turnstile> (C, fs) \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> (C, fs((F, D) \\<mapsto> v)) \\<surd>", "by (auto dest: has_fields_fun simp add: oconf_def has_field_def fun_upd_apply)"], ["", "(*>*)\n\n(*<*)"], ["", "lemmas oconf_new = oconf_hext [OF _ hext_new]"], ["", "lemmas oconf_upd_obj = oconf_hext [OF _ hext_upd_obj]"], ["", "(*>*)"], ["", "subsection \"Static object conformance\""], ["", "lemma soconf_hext: \"P,h,C \\<turnstile>\\<^sub>s obj \\<surd> \\<Longrightarrow> h \\<unlhd> h' \\<Longrightarrow> P,h',C \\<turnstile>\\<^sub>s obj \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h,C \\<turnstile>\\<^sub>s obj \\<surd>; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h',C \\<turnstile>\\<^sub>s obj \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h,C \\<turnstile>\\<^sub>s obj \\<surd>; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h',C \\<turnstile>\\<^sub>s obj \\<surd>", "by (fastforce elim:conf_hext simp:soconf_def)"], ["", "(*>*)"], ["", "lemma soconf_sblank:\n \"P \\<turnstile> C has_fields FDTs \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>", "let ?sfs = \"sblank P C\""], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>", "assume FDTs: \"P \\<turnstile> C has_fields FDTs\""], ["proof (state)\nthis:\n  P \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C has_fields FDTs", "have \"\\<And>F T. P \\<turnstile> C has F,Static:T in C\n                 \\<Longrightarrow> \\<exists>v. ?sfs F = Some v \\<and> P,h \\<turnstile> v :\\<le> T\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<And>F T.\n       P \\<turnstile> C has F,Static:T in C \\<Longrightarrow>\n       \\<exists>v.\n          sblank P C F = \\<lfloor>v\\<rfloor> \\<and>\n          P,h \\<turnstile> v :\\<le> T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F T.\n       \\<lbrakk>P \\<turnstile> C has F,Static:T in C;\n        P \\<turnstile> C has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            sblank P C F = \\<lfloor>v\\<rfloor> \\<and>\n                            P,h \\<turnstile> v :\\<le> T", "fix F T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F T.\n       \\<lbrakk>P \\<turnstile> C has F,Static:T in C;\n        P \\<turnstile> C has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            sblank P C F = \\<lfloor>v\\<rfloor> \\<and>\n                            P,h \\<turnstile> v :\\<le> T", "assume has: \"P \\<turnstile> C has F,Static:T in C\""], ["proof (state)\nthis:\n  P \\<turnstile> C has F,Static:T in C\n\ngoal (1 subgoal):\n 1. \\<And>F T.\n       \\<lbrakk>P \\<turnstile> C has F,Static:T in C;\n        P \\<turnstile> C has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            sblank P C F = \\<lfloor>v\\<rfloor> \\<and>\n                            P,h \\<turnstile> v :\\<le> T", "with has_fields_fun[OF FDTs]"], ["proof (chain)\npicking this:\n  P \\<turnstile> C has_fields ?FDTs' \\<Longrightarrow> ?FDTs' = FDTs\n  P \\<turnstile> C has F,Static:T in C", "have map: \"map_of FDTs (F, C) = \\<lfloor>(Static, T)\\<rfloor>\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C has_fields ?FDTs' \\<Longrightarrow> ?FDTs' = FDTs\n  P \\<turnstile> C has F,Static:T in C\n\ngoal (1 subgoal):\n 1. map_of FDTs (F, C) = \\<lfloor>(Static, T)\\<rfloor>", "by(clarsimp simp: has_field_def)"], ["proof (state)\nthis:\n  map_of FDTs (F, C) = \\<lfloor>(Static, T)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>F T.\n       \\<lbrakk>P \\<turnstile> C has F,Static:T in C;\n        P \\<turnstile> C has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            sblank P C F = \\<lfloor>v\\<rfloor> \\<and>\n                            P,h \\<turnstile> v :\\<le> T", "then"], ["proof (chain)\npicking this:\n  map_of FDTs (F, C) = \\<lfloor>(Static, T)\\<rfloor>", "have \"map_of (map (\\<lambda>((F, D), b, T). (F, default_val T))\n          (filter (\\<lambda>((F, D), b, T). (case ((F, D), b, T) of (x, xa)\n               \\<Rightarrow> (case x of (F, D) \\<Rightarrow> \\<lambda>(b, T). b = Static) xa) \\<and> D = C) FDTs)) F\n         = \\<lfloor>default_val T\\<rfloor>\""], ["proof (prove)\nusing this:\n  map_of FDTs (F, C) = \\<lfloor>(Static, T)\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of\n     (map (\\<lambda>((F, D), b, T). (F, default_val T))\n       (filter\n         (\\<lambda>((F, D), b, T).\n             (case ((F, D), b, T) of\n              (x, xa) \\<Rightarrow>\n                (case x of (F, D) \\<Rightarrow> \\<lambda>(b, T). b = Static)\n                 xa) \\<and>\n             D = C)\n         FDTs))\n     F =\n    \\<lfloor>default_val T\\<rfloor>", "by(rule map_of_remove_filtered_SomeD[where P = \"default_val\"\n               and Q = \"\\<lambda>((F, D), b, T). b = Static\"]) simp"], ["proof (state)\nthis:\n  map_of\n   (map (\\<lambda>((F, D), b, T). (F, default_val T))\n     (filter\n       (\\<lambda>((F, D), b, T).\n           (case ((F, D), b, T) of\n            (x, xa) \\<Rightarrow>\n              (case x of (F, D) \\<Rightarrow> \\<lambda>(b, T). b = Static)\n               xa) \\<and>\n           D = C)\n       FDTs))\n   F =\n  \\<lfloor>default_val T\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>F T.\n       \\<lbrakk>P \\<turnstile> C has F,Static:T in C;\n        P \\<turnstile> C has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v.\n                            sblank P C F = \\<lfloor>v\\<rfloor> \\<and>\n                            P,h \\<turnstile> v :\\<le> T", "with FDTs"], ["proof (chain)\npicking this:\n  P \\<turnstile> C has_fields FDTs\n  map_of\n   (map (\\<lambda>((F, D), b, T). (F, default_val T))\n     (filter\n       (\\<lambda>((F, D), b, T).\n           (case ((F, D), b, T) of\n            (x, xa) \\<Rightarrow>\n              (case x of (F, D) \\<Rightarrow> \\<lambda>(b, T). b = Static)\n               xa) \\<and>\n           D = C)\n       FDTs))\n   F =\n  \\<lfloor>default_val T\\<rfloor>", "show \"\\<exists>v. ?sfs F = Some v \\<and> P,h \\<turnstile> v :\\<le> T\""], ["proof (prove)\nusing this:\n  P \\<turnstile> C has_fields FDTs\n  map_of\n   (map (\\<lambda>((F, D), b, T). (F, default_val T))\n     (filter\n       (\\<lambda>((F, D), b, T).\n           (case ((F, D), b, T) of\n            (x, xa) \\<Rightarrow>\n              (case x of (F, D) \\<Rightarrow> \\<lambda>(b, T). b = Static)\n               xa) \\<and>\n           D = C)\n       FDTs))\n   F =\n  \\<lfloor>default_val T\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>v.\n       sblank P C F = \\<lfloor>v\\<rfloor> \\<and> P,h \\<turnstile> v :\\<le> T", "by(clarsimp simp: sblank_def init_sfields_def)"], ["proof (state)\nthis:\n  \\<exists>v.\n     sblank P C F = \\<lfloor>v\\<rfloor> \\<and> P,h \\<turnstile> v :\\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<turnstile> C has ?F,Static:?T in C \\<Longrightarrow>\n  \\<exists>v.\n     sblank P C ?F = \\<lfloor>v\\<rfloor> \\<and> P,h \\<turnstile> v :\\<le> ?T\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C has_fields FDTs \\<Longrightarrow>\n    P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C has ?F,Static:?T in C \\<Longrightarrow>\n  \\<exists>v.\n     sblank P C ?F = \\<lfloor>v\\<rfloor> \\<and> P,h \\<turnstile> v :\\<le> ?T", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> C has ?F,Static:?T in C \\<Longrightarrow>\n  \\<exists>v.\n     sblank P C ?F = \\<lfloor>v\\<rfloor> \\<and> P,h \\<turnstile> v :\\<le> ?T\n\ngoal (1 subgoal):\n 1. P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>", "by(simp add: soconf_def)"], ["proof (state)\nthis:\n  P,h,C \\<turnstile>\\<^sub>s sblank P C \\<surd>\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma soconf_fupd [intro?]:\n  \"\\<lbrakk> P \\<turnstile> C has F,Static:T in C; P,h \\<turnstile> v :\\<le> T; P,h,C \\<turnstile>\\<^sub>s sfs \\<surd> \\<rbrakk> \n  \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs(F\\<mapsto>v) \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has F,Static:T in C;\n     P,h \\<turnstile> v :\\<le> T;\n     P,h,C \\<turnstile>\\<^sub>s sfs \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs(F \\<mapsto> v) \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has F,Static:T in C;\n     P,h \\<turnstile> v :\\<le> T;\n     P,h,C \\<turnstile>\\<^sub>s sfs \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs(F \\<mapsto> v) \\<surd>", "by (auto dest: has_fields_fun simp add: fun_upd_apply soconf_def has_field_def)"], ["", "(*>*)\n\n(*<*)"], ["", "lemmas soconf_new = soconf_hext [OF _ hext_new]"], ["", "lemmas soconf_upd_obj = soconf_hext [OF _ hext_upd_obj]"], ["", "(*>*)"], ["", "subsection \"Heap conformance\""], ["", "lemma hconfD: \"\\<lbrakk> P \\<turnstile> h \\<surd>; h a = Some obj \\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> obj \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> h \\<surd>; h a = \\<lfloor>obj\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> obj \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> h \\<surd>; h a = \\<lfloor>obj\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> obj \\<surd>", "by (unfold hconf_def) fast"], ["", "(*>*)"], ["", "lemma hconf_new: \"\\<lbrakk> P \\<turnstile> h \\<surd>; h a = None; P,h \\<turnstile> obj \\<surd> \\<rbrakk> \\<Longrightarrow> P \\<turnstile> h(a\\<mapsto>obj) \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> h \\<surd>; h a = None;\n     P,h \\<turnstile> obj \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> h(a \\<mapsto> obj) \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> h \\<surd>; h a = None;\n     P,h \\<turnstile> obj \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> h(a \\<mapsto> obj) \\<surd>", "by (unfold hconf_def) (auto intro: oconf_new preallocated_new)"], ["", "(*>*)"], ["", "lemma hconf_upd_obj: \"\\<lbrakk> P \\<turnstile> h\\<surd>; h a = Some(C,fs); P,h \\<turnstile> (C,fs')\\<surd> \\<rbrakk> \\<Longrightarrow> P \\<turnstile> h(a\\<mapsto>(C,fs'))\\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> h \\<surd>; h a = \\<lfloor>(C, fs)\\<rfloor>;\n     P,h \\<turnstile> (C, fs') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> h(a \\<mapsto> (C, fs')) \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> h \\<surd>; h a = \\<lfloor>(C, fs)\\<rfloor>;\n     P,h \\<turnstile> (C, fs') \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P \\<turnstile> h(a \\<mapsto> (C, fs')) \\<surd>", "by (unfold hconf_def) (auto intro: oconf_upd_obj preallocated_upd_obj)"], ["", "(*>*)"], ["", "subsection \"Class statics conformance\""], ["", "lemma shconfD: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; sh C = Some(sfs,i) \\<rbrakk> \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n     sh C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n     sh C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h,C \\<turnstile>\\<^sub>s sfs \\<surd>", "by (unfold shconf_def) fast"], ["", "(*>*)"], ["", "lemma shconf_upd_obj: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; P,h,C \\<turnstile>\\<^sub>s sfs' \\<surd> \\<rbrakk>\n \\<Longrightarrow> P,h \\<turnstile>\\<^sub>s sh(C\\<mapsto>(sfs',i'))\\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n     P,h,C \\<turnstile>\\<^sub>s sfs' \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile>\\<^sub>s sh(C \\<mapsto>\n                      (sfs', i')) \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n     P,h,C \\<turnstile>\\<^sub>s sfs' \\<surd>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile>\\<^sub>s sh(C \\<mapsto>\n                      (sfs', i')) \\<surd>", "by (unfold shconf_def) (auto intro: soconf_upd_obj preallocated_upd_obj)"], ["", "(*>*)"], ["", "lemma shconf_hnew: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; h a = None \\<rbrakk> \\<Longrightarrow> P,h(a\\<mapsto>obj) \\<turnstile>\\<^sub>s sh \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>; h a = None\\<rbrakk>\n    \\<Longrightarrow> P,h(a \\<mapsto> obj) \\<turnstile>\\<^sub>s sh \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>; h a = None\\<rbrakk>\n    \\<Longrightarrow> P,h(a \\<mapsto> obj) \\<turnstile>\\<^sub>s sh \\<surd>", "by (unfold shconf_def) (auto intro: soconf_new preallocated_new)"], ["", "(*>*)"], ["", "lemma shconf_hupd_obj: \"\\<lbrakk> P,h \\<turnstile>\\<^sub>s sh \\<surd>; h a = Some(C,fs) \\<rbrakk> \\<Longrightarrow> P,h(a\\<mapsto>(C,fs')) \\<turnstile>\\<^sub>s sh \\<surd>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n     h a = \\<lfloor>(C, fs)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h(a \\<mapsto>\n                      (C, fs')) \\<turnstile>\\<^sub>s sh \\<surd>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile>\\<^sub>s sh \\<surd>;\n     h a = \\<lfloor>(C, fs)\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h(a \\<mapsto>\n                      (C, fs')) \\<turnstile>\\<^sub>s sh \\<surd>", "by (unfold shconf_def) (auto intro: soconf_upd_obj preallocated_upd_obj)"], ["", "(*>*)"], ["", "subsection \"Local variable conformance\""], ["", "lemma lconf_hext: \"\\<lbrakk> P,h \\<turnstile> l (:\\<le>) E; h \\<unlhd> h' \\<rbrakk> \\<Longrightarrow> P,h' \\<turnstile> l (:\\<le>) E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> l (:\\<le>) E; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> l (:\\<le>) E", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> l (:\\<le>) E; h \\<unlhd> h'\\<rbrakk>\n    \\<Longrightarrow> P,h' \\<turnstile> l (:\\<le>) E", "by (unfold lconf_def) (fast elim: conf_hext)"], ["", "(*>*)"], ["", "lemma lconf_upd:\n  \"\\<lbrakk> P,h \\<turnstile> l (:\\<le>) E; P,h \\<turnstile> v :\\<le> T; E V = Some T \\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> l(V\\<mapsto>v) (:\\<le>) E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> l (:\\<le>) E; P,h \\<turnstile> v :\\<le> T;\n     E V = \\<lfloor>T\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> l(V \\<mapsto> v) (:\\<le>) E", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> l (:\\<le>) E; P,h \\<turnstile> v :\\<le> T;\n     E V = \\<lfloor>T\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> l(V \\<mapsto> v) (:\\<le>) E", "by (unfold lconf_def) auto"], ["", "(*>*)"], ["", "lemma lconf_empty[iff]: \"P,h \\<turnstile> Map.empty (:\\<le>) E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> Map.empty (:\\<le>) E", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P,h \\<turnstile> Map.empty (:\\<le>) E", "by(simp add:lconf_def)"], ["", "(*>*)"], ["", "lemma lconf_upd2: \"\\<lbrakk>P,h \\<turnstile> l (:\\<le>) E; P,h \\<turnstile> v :\\<le> T\\<rbrakk> \\<Longrightarrow> P,h \\<turnstile> l(V\\<mapsto>v) (:\\<le>) E(V\\<mapsto>T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> l (:\\<le>) E;\n     P,h \\<turnstile> v :\\<le> T\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> l(V \\<mapsto> v) (:\\<le>) E(V \n                      \\<mapsto> T)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P,h \\<turnstile> l (:\\<le>) E;\n     P,h \\<turnstile> v :\\<le> T\\<rbrakk>\n    \\<Longrightarrow> P,h \\<turnstile> l(V \\<mapsto> v) (:\\<le>) E(V \n                      \\<mapsto> T)", "by(simp add:lconf_def)"], ["", "(*>*)"], ["", "end"]]}