{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/JVM/JVMExecInstr.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma exec_instr_xcpts:\nassumes \"\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\"\n  and \"fst \\<sigma>' = Some a\"\nshows \"i = (JVMInstructions.Throw) \\<or> a \\<in> {a. \\<exists>x \\<in> sys_xcpts. a = addr_of_sys_xcpt x}\"", "lemma exec_instr_prealloc_pres:\nassumes \"preallocated h\"\n  and \"exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh = (xp',h',frs',sh')\"\nshows \"preallocated h'\""], "translations": [["", "lemma exec_instr_xcpts:\nassumes \"\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\"\n  and \"fst \\<sigma>' = Some a\"\nshows \"i = (JVMInstructions.Throw) \\<or> a \\<in> {a. \\<exists>x \\<in> sys_xcpts. a = addr_of_sys_xcpt x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using assms"], ["proof (prove)\nusing this:\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases i)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x4.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = New x4\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 18 subgoals...", "case (New C1)"], ["proof (state)\nthis:\n  i = New C1\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x4.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = New x4\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x51 x52.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<And>x101 x102.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = New C1", "show ?thesis"], ["proof (prove)\nusing this:\n  i = New C1\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using assms"], ["proof (prove)\nusing this:\n  i = New C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"sh C1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; sh C1 = None\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<And>aa.\n       \\<lbrakk>i = New C1;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        sh C1 = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "case (Some a)"], ["proof (state)\nthis:\n  sh C1 = \\<lfloor>a\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; sh C1 = None\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<And>aa.\n       \\<lbrakk>i = New C1;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        sh C1 = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  sh C1 = \\<lfloor>a\\<rfloor>", "obtain sfs i where sfsi: \"a = (sfs,i)\""], ["proof (prove)\nusing this:\n  sh C1 = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i. a = (sfs, i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (sfs, i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; sh C1 = None\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<And>aa.\n       \\<lbrakk>i = New C1;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        sh C1 = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  a = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = (sfs, i)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using Some New assms"], ["proof (prove)\nusing this:\n  a = (sfs, i)\n  sh C1 = \\<lfloor>a\\<rfloor>\n  i = New C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases i)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>a = (sfs, i); sh C1 = \\<lfloor>a\\<rfloor>; i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Done\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>a = (sfs, i); sh C1 = \\<lfloor>a\\<rfloor>; i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Processing\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 3. \\<lbrakk>a = (sfs, i); sh C1 = \\<lfloor>a\\<rfloor>; i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Prepared\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>a = (sfs, i); sh C1 = \\<lfloor>a\\<rfloor>; i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Error\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(cases ics', auto)+"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = New C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; sh C1 = None\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(cases ics', auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 17 subgoals...", "case (Getfield F1 C1)"], ["proof (state)\nthis:\n  i = Getfield F1 C1\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 17 subgoals...", "obtain D' b t where field: \"field P C1 F1 = (D',b,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D' b t.\n        field P C1 F1 = (D', b, t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"field P C1 F1\")"], ["proof (state)\nthis:\n  field P C1 F1 = (D', b, t)\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 17 subgoals...", "obtain D fs where addr: \"the (h (the_Addr (hd stk))) = (D,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D fs.\n        the (h (the_Addr (hd stk))) = (D, fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the (h (the_Addr (hd stk)))\")"], ["proof (state)\nthis:\n  the (h (the_Addr (hd stk))) = (D, fs)\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x51 x52.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 17 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using addr field Getfield assms"], ["proof (prove)\nusing this:\n  the (h (the_Addr (hd stk))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Getfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"hd stk = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case nNull:False"], ["proof (state)\nthis:\n  hd stk \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  hd stk \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  hd stk \\<noteq> Null\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using addr field Getfield assms"], ["proof (prove)\nusing this:\n  hd stk \\<noteq> Null\n  the (h (the_Addr (hd stk))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Getfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"\\<nexists>t b. P \\<turnstile> (cname_of h (the_Addr (hd stk))) has F1,b:t in C1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd stk \\<noteq> Null; the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b.\n        P \\<turnstile> cname_of h\n                        (the_Addr (hd stk)) has F1,b:t in C1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>hd stk \\<noteq> Null; the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b.\n                P \\<turnstile> cname_of h\n                                (the_Addr\n                                  (hd stk)) has F1,b:t in C1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case exists:False"], ["proof (state)\nthis:\n  \\<not> (\\<nexists>t b.\n             P \\<turnstile> cname_of h (the_Addr (hd stk)) has F1,b:t in C1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd stk \\<noteq> Null; the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b.\n        P \\<turnstile> cname_of h\n                        (the_Addr (hd stk)) has F1,b:t in C1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>hd stk \\<noteq> Null; the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b.\n                P \\<turnstile> cname_of h\n                                (the_Addr\n                                  (hd stk)) has F1,b:t in C1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"fst(snd(field P C1 F1))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (snd (field P C1 F1)) = Static \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n 2. fst (snd (field P C1 F1)) = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "case Static"], ["proof (state)\nthis:\n  fst (snd (field P C1 F1)) = Static\n\ngoal (2 subgoals):\n 1. fst (snd (field P C1 F1)) = Static \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n 2. fst (snd (field P C1 F1)) = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  fst (snd (field P C1 F1)) = Static", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (snd (field P C1 F1)) = Static\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists nNull addr field Getfield assms"], ["proof (prove)\nusing this:\n  fst (snd (field P C1 F1)) = Static\n  \\<not> (\\<nexists>t b.\n             P \\<turnstile> cname_of h (the_Addr (hd stk)) has F1,b:t in C1)\n  hd stk \\<noteq> Null\n  the (h (the_Addr (hd stk))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Getfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(auto simp: sys_xcpts_def split_beta split: staticb.splits)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. fst (snd (field P C1 F1)) = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst (snd (field P C1 F1)) = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "case NonStatic"], ["proof (state)\nthis:\n  fst (snd (field P C1 F1)) = NonStatic\n\ngoal (1 subgoal):\n 1. fst (snd (field P C1 F1)) = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  fst (snd (field P C1 F1)) = NonStatic", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (snd (field P C1 F1)) = NonStatic\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists nNull addr field Getfield assms"], ["proof (prove)\nusing this:\n  fst (snd (field P C1 F1)) = NonStatic\n  \\<not> (\\<nexists>t b.\n             P \\<turnstile> cname_of h (the_Addr (hd stk)) has F1,b:t in C1)\n  hd stk \\<noteq> Null\n  the (h (the_Addr (hd stk))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Getfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(auto simp: sys_xcpts_def split_beta split: staticb.splits)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd stk \\<noteq> Null; the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b.\n        P \\<turnstile> cname_of h\n                        (the_Addr (hd stk)) has F1,b:t in C1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>the (h (the_Addr (hd stk))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Getfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 16 subgoals...", "case (Getstatic C1 F1 D1)"], ["proof (state)\nthis:\n  i = Getstatic C1 F1 D1\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 16 subgoals...", "obtain D' b t where field: \"field P D1 F1 = (D',b,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D' b t.\n        field P D1 F1 = (D', b, t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"field P D1 F1\")"], ["proof (state)\nthis:\n  field P D1 F1 = (D', b, t)\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 16 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using field Getstatic assms"], ["proof (prove)\nusing this:\n  field P D1 F1 = (D', b, t)\n  i = Getstatic C1 F1 D1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case exists:False"], ["proof (state)\nthis:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using field Getstatic assms"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n  field P D1 F1 = (D', b, t)\n  i = Getstatic C1 F1 D1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"fst(snd(field P D1 F1))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (field P D1 F1)) = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (field P D1 F1)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case Static"], ["proof (state)\nthis:\n  fst (snd (field P D1 F1)) = Static\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (field P D1 F1)) = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (field P D1 F1)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  fst (snd (field P D1 F1)) = Static", "obtain sfs i where \"the(sh D') = (sfs, i)\""], ["proof (prove)\nusing this:\n  fst (snd (field P D1 F1)) = Static\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i.\n        the (sh D') = (sfs, i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the(sh D')\")"], ["proof (state)\nthis:\n  the (sh D') = (sfs, i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (field P D1 F1)) = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (field P D1 F1)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  the (sh D') = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (sh D') = (sfs, i)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists field Static Getstatic assms"], ["proof (prove)\nusing this:\n  the (sh D') = (sfs, i)\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n  field P D1 F1 = (D', b, t)\n  fst (snd (field P D1 F1)) = Static\n  i = Getstatic C1 F1 D1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(cases ics'; cases i, auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (field P D1 F1)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>field P D1 F1 = (D', b, t); i = Getstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 15 subgoals...", "case (Putfield F1 C1)"], ["proof (state)\nthis:\n  i = Putfield F1 C1\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 15 subgoals...", "let ?r = \"hd(tl stk)\""], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 15 subgoals...", "obtain D' b t where field: \"field P C1 F1 = (D',b,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D' b t.\n        field P C1 F1 = (D', b, t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"field P C1 F1\")"], ["proof (state)\nthis:\n  field P C1 F1 = (D', b, t)\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 15 subgoals...", "obtain D fs where addr: \"the (h (the_Addr ?r)) = (D,fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D fs.\n        the (h (the_Addr (hd (tl stk)))) = (D, fs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the (h (the_Addr ?r))\")"], ["proof (state)\nthis:\n  the (h (the_Addr (hd (tl stk)))) = (D, fs)\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x71 x72.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 15 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using addr field Putfield assms"], ["proof (prove)\nusing this:\n  the (h (the_Addr (hd (tl stk)))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Putfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"?r = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>the (h (the_Addr (hd (tl stk)))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd (tl stk) = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>the (h (the_Addr (hd (tl stk)))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd (tl stk) \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case nNull:False"], ["proof (state)\nthis:\n  hd (tl stk) \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>the (h (the_Addr (hd (tl stk)))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd (tl stk) = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>the (h (the_Addr (hd (tl stk)))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd (tl stk) \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  hd (tl stk) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  hd (tl stk) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using addr field Putfield assms"], ["proof (prove)\nusing this:\n  hd (tl stk) \\<noteq> Null\n  the (h (the_Addr (hd (tl stk)))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Putfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"\\<nexists>t b. P \\<turnstile> (cname_of h (the_Addr ?r)) has F1,b:t in C1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (tl stk) \\<noteq> Null;\n     the (h (the_Addr (hd (tl stk)))) = (D, fs); field P C1 F1 = (D', b, t);\n     i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b.\n        P \\<turnstile> cname_of h\n                        (the_Addr (hd (tl stk))) has F1,b:t in C1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>hd (tl stk) \\<noteq> Null;\n     the (h (the_Addr (hd (tl stk)))) = (D, fs); field P C1 F1 = (D', b, t);\n     i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b.\n                P \\<turnstile> cname_of h\n                                (the_Addr\n                                  (hd (tl stk))) has F1,b:t in C1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case exists:False"], ["proof (state)\nthis:\n  \\<not> (\\<nexists>t b.\n             P \\<turnstile> cname_of h\n                             (the_Addr (hd (tl stk))) has F1,b:t in C1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (tl stk) \\<noteq> Null;\n     the (h (the_Addr (hd (tl stk)))) = (D, fs); field P C1 F1 = (D', b, t);\n     i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b.\n        P \\<turnstile> cname_of h\n                        (the_Addr (hd (tl stk))) has F1,b:t in C1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>hd (tl stk) \\<noteq> Null;\n     the (h (the_Addr (hd (tl stk)))) = (D, fs); field P C1 F1 = (D', b, t);\n     i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b.\n                P \\<turnstile> cname_of h\n                                (the_Addr\n                                  (hd (tl stk))) has F1,b:t in C1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases b)"], ["proof (state)\ngoal (2 subgoals):\n 1. b = Static \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n 2. b = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "case Static"], ["proof (state)\nthis:\n  b = Static\n\ngoal (2 subgoals):\n 1. b = Static \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n 2. b = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  b = Static", "show ?thesis"], ["proof (prove)\nusing this:\n  b = Static\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists nNull addr field Putfield assms"], ["proof (prove)\nusing this:\n  b = Static\n  \\<not> (\\<nexists>t b.\n             P \\<turnstile> cname_of h\n                             (the_Addr (hd (tl stk))) has F1,b:t in C1)\n  hd (tl stk) \\<noteq> Null\n  the (h (the_Addr (hd (tl stk)))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Putfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(auto simp: sys_xcpts_def split_beta split: staticb.splits)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. b = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "case NonStatic"], ["proof (state)\nthis:\n  b = NonStatic\n\ngoal (1 subgoal):\n 1. b = NonStatic \\<Longrightarrow>\n    i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  b = NonStatic", "show ?thesis"], ["proof (prove)\nusing this:\n  b = NonStatic\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists nNull addr field Putfield assms"], ["proof (prove)\nusing this:\n  b = NonStatic\n  \\<not> (\\<nexists>t b.\n             P \\<turnstile> cname_of h\n                             (the_Addr (hd (tl stk))) has F1,b:t in C1)\n  hd (tl stk) \\<noteq> Null\n  the (h (the_Addr (hd (tl stk)))) = (D, fs)\n  field P C1 F1 = (D', b, t)\n  i = Putfield F1 C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(auto simp: sys_xcpts_def split_beta split: staticb.splits)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (tl stk) \\<noteq> Null;\n     the (h (the_Addr (hd (tl stk)))) = (D, fs); field P C1 F1 = (D', b, t);\n     i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b.\n        P \\<turnstile> cname_of h\n                        (the_Addr (hd (tl stk))) has F1,b:t in C1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>the (h (the_Addr (hd (tl stk)))) = (D, fs);\n     field P C1 F1 = (D', b, t); i = Putfield F1 C1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd (tl stk) = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 14 subgoals...", "case (Putstatic C1 F1 D1)"], ["proof (state)\nthis:\n  i = Putstatic C1 F1 D1\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 14 subgoals...", "obtain D' b t where field: \"field P D1 F1 = (D',b,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D' b t.\n        field P D1 F1 = (D', b, t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"field P D1 F1\")"], ["proof (state)\nthis:\n  field P D1 F1 = (D', b, t)\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 14 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using field Putstatic assms"], ["proof (prove)\nusing this:\n  field P D1 F1 = (D', b, t)\n  i = Putstatic C1 F1 D1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case exists:False"], ["proof (state)\nthis:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using field Putstatic assms"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n  field P D1 F1 = (D', b, t)\n  i = Putstatic C1 F1 D1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; b = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; b = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case Static"], ["proof (state)\nthis:\n  b = Static\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; b = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; b = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  b = Static", "obtain sfs i where \"the(sh D') = (sfs, i)\""], ["proof (prove)\nusing this:\n  b = Static\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i.\n        the (sh D') = (sfs, i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the(sh D')\")"], ["proof (state)\nthis:\n  the (sh D') = (sfs, i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; b = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; b = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  the (sh D') = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (sh D') = (sfs, i)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists field Static Putstatic assms"], ["proof (prove)\nusing this:\n  the (sh D') = (sfs, i)\n  \\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1)\n  field P D1 F1 = (D', b, t)\n  b = Static\n  i = Putstatic C1 F1 D1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(cases ics'; cases i, auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> (\\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1);\n     field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; b = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>field P D1 F1 = (D', b, t); i = Putstatic C1 F1 D1;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>t b. P \\<turnstile> C1 has F1,b:t in D1\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<And>x15.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<And>x15.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 13 subgoals...", "case (Checkcast C1)"], ["proof (state)\nthis:\n  i = Checkcast C1\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x9.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<And>x15.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = Checkcast C1", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Checkcast C1\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using assms"], ["proof (prove)\nusing this:\n  i = Checkcast C1\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(cases \"cast_ok P C1 h (hd stk)\", auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 12 subgoals...", "case (Invoke M n)"], ["proof (state)\nthis:\n  i = Invoke M n\n\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 12 subgoals...", "let ?r = \"stk!n\""], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 12 subgoals...", "let ?C = \"cname_of h (the_Addr ?r)\""], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x101 x102.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}\nA total of 12 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using Invoke assms"], ["proof (prove)\nusing this:\n  i = Invoke M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"?r = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; stk ! n = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; stk ! n \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case nNull:False"], ["proof (state)\nthis:\n  stk ! n \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; stk ! n = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; stk ! n \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  stk ! n \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  stk ! n \\<noteq> Null\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using Invoke assms"], ["proof (prove)\nusing this:\n  stk ! n \\<noteq> Null\n  i = Invoke M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"\\<not>(\\<exists>Ts T m D b. P \\<turnstile> ?C sees M,b:Ts \\<rightarrow> T = m in D)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>Ts T m D b.\n        P \\<turnstile> cname_of h\n                        (the_Addr\n                          (stk !\n                           n)) sees M, b :  Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>Ts T m D b.\n                P \\<turnstile> cname_of h\n                                (the_Addr\n                                  (stk !\n                                   n)) sees M, b :  Ts\\<rightarrow>T = m in D)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case exists:False"], ["proof (state)\nthis:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> cname_of h\n                             (the_Addr\n                               (stk !\n                                n)) sees M, b :  Ts\\<rightarrow>T = m in D)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>Ts T m D b.\n        P \\<turnstile> cname_of h\n                        (the_Addr\n                          (stk !\n                           n)) sees M, b :  Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>Ts T m D b.\n                P \\<turnstile> cname_of h\n                                (the_Addr\n                                  (stk !\n                                   n)) sees M, b :  Ts\\<rightarrow>T = m in D)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> cname_of h\n                             (the_Addr\n                               (stk !\n                                n)) sees M, b :  Ts\\<rightarrow>T = m in D)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> cname_of h\n                             (the_Addr\n                               (stk !\n                                n)) sees M, b :  Ts\\<rightarrow>T = m in D)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using nNull Invoke assms"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> cname_of h\n                             (the_Addr\n                               (stk !\n                                n)) sees M, b :  Ts\\<rightarrow>T = m in D)\n  stk ! n \\<noteq> Null\n  i = Invoke M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"fst(snd(method P ?C M))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> cname_of h\n  (the_Addr (stk ! n)) sees M, b :  Ts\\<rightarrow>T = m in D);\n     stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) =\n     Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> cname_of h\n  (the_Addr (stk ! n)) sees M, b :  Ts\\<rightarrow>T = m in D);\n     stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) =\n     NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case Static"], ["proof (state)\nthis:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = Static\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> cname_of h\n  (the_Addr (stk ! n)) sees M, b :  Ts\\<rightarrow>T = m in D);\n     stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) =\n     Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> cname_of h\n  (the_Addr (stk ! n)) sees M, b :  Ts\\<rightarrow>T = m in D);\n     stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) =\n     NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = Static", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = Static\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists nNull Invoke assms"], ["proof (prove)\nusing this:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = Static\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> cname_of h\n                             (the_Addr\n                               (stk !\n                                n)) sees M, b :  Ts\\<rightarrow>T = m in D)\n  stk ! n \\<noteq> Null\n  i = Invoke M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(auto simp: sys_xcpts_def split_beta split: staticb.splits)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> cname_of h\n  (the_Addr (stk ! n)) sees M, b :  Ts\\<rightarrow>T = m in D);\n     stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) =\n     NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> cname_of h\n  (the_Addr (stk ! n)) sees M, b :  Ts\\<rightarrow>T = m in D);\n     stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) =\n     NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case NonStatic"], ["proof (state)\nthis:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = NonStatic\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> cname_of h\n  (the_Addr (stk ! n)) sees M, b :  Ts\\<rightarrow>T = m in D);\n     stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) =\n     NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = NonStatic", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = NonStatic\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists nNull Invoke assms"], ["proof (prove)\nusing this:\n  fst (snd (method P (cname_of h (the_Addr (stk ! n))) M)) = NonStatic\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> cname_of h\n                             (the_Addr\n                               (stk !\n                                n)) sees M, b :  Ts\\<rightarrow>T = m in D)\n  stk ! n \\<noteq> Null\n  i = Invoke M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(auto simp: sys_xcpts_def split_beta split: staticb.splits)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>stk ! n \\<noteq> Null; i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>Ts T m D b.\n        P \\<turnstile> cname_of h\n                        (the_Addr\n                          (stk !\n                           n)) sees M, b :  Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = Invoke M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; stk ! n = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<And>x17.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<And>x17.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 11 subgoals...", "case (Invokestatic C1 M n)"], ["proof (state)\nthis:\n  i = Invokestatic C1 M n\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x111 x112 x113.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 10. \\<And>x17.\n        \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n         fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n        \\<Longrightarrow> i = Throw \\<or>\n                          a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n   a = addr_of_sys_xcpt x}\nA total of 11 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using Invokestatic assms"], ["proof (prove)\nusing this:\n  i = Invokestatic C1 M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"\\<not>(\\<exists>Ts T m D b. P \\<turnstile> C1 sees M,b:Ts \\<rightarrow> T = m in D)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>Ts T m D b.\n        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>Ts T m D b.\n                P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case exists:False"], ["proof (state)\nthis:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>Ts T m D b.\n        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<not> (\\<nexists>Ts T m D b.\n                P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D)\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using Invokestatic assms"], ["proof (prove)\nusing this:\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D)\n  i = Invokestatic C1 M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"fst(snd(method P C1 M))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D);\n     i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P C1 M)) = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D);\n     i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P C1 M)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case Static"], ["proof (state)\nthis:\n  fst (snd (method P C1 M)) = Static\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D);\n     i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P C1 M)) = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D);\n     i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P C1 M)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  fst (snd (method P C1 M)) = Static", "obtain sfs i where \"the(sh (fst(method P C1 M))) = (sfs, i)\""], ["proof (prove)\nusing this:\n  fst (snd (method P C1 M)) = Static\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i.\n        the (sh (fst (method P C1 M))) = (sfs, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the(sh (fst(method P C1 M)))\")"], ["proof (state)\nthis:\n  the (sh (fst (method P C1 M))) = (sfs, i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D);\n     i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P C1 M)) = Static\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D);\n     i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P C1 M)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  the (sh (fst (method P C1 M))) = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (sh (fst (method P C1 M))) = (sfs, i)\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using exists Static Invokestatic assms"], ["proof (prove)\nusing this:\n  the (sh (fst (method P C1 M))) = (sfs, i)\n  \\<not> (\\<nexists>Ts T m D b.\n             P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D)\n  fst (snd (method P C1 M)) = Static\n  i = Invokestatic C1 M n\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(auto split: init_call_status.splits init_state.splits)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> (\\<nexists>Ts T m D b.\n                        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D);\n     i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     fst (snd (method P C1 M)) = NonStatic\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = Invokestatic C1 M n;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>;\n     \\<nexists>Ts T m D b.\n        P \\<turnstile> C1 sees M, b :  Ts\\<rightarrow>T = m in D\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x17.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Throw\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x17.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Throw\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}", "case Return"], ["proof (state)\nthis:\n  i = Return\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Return\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 7. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 9. \\<And>x17.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 10. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n      fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Throw\\<rbrakk>\n     \\<Longrightarrow> i = Throw \\<or>\n                       a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\na = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  i = Return", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Return\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using assms"], ["proof (prove)\nusing this:\n  i = Return\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases frs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Return;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; frs = []\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<And>aa list.\n       \\<lbrakk>i = Return;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; frs = aa # list\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "case (Cons f frs')"], ["proof (state)\nthis:\n  frs = f # frs'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Return;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; frs = []\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<And>aa list.\n       \\<lbrakk>i = Return;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; frs = aa # list\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  frs = f # frs'", "show ?thesis"], ["proof (prove)\nusing this:\n  frs = f # frs'\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using Return assms"], ["proof (prove)\nusing this:\n  frs = f # frs'\n  i = Return\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(cases f, cases \"method P C M\", cases \"M=clinit\", auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = Return;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; frs = []\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (9 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<And>x17.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Throw\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<And>x17.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Throw\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "case (IfFalse x17)"], ["proof (state)\nthis:\n  i = IfFalse x17\n\ngoal (9 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<And>x17.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 9. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Throw\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  i = IfFalse x17", "show ?thesis"], ["proof (prove)\nusing this:\n  i = IfFalse x17\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using assms"], ["proof (prove)\nusing this:\n  i = IfFalse x17\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "proof(cases \"hd stk\")"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>i = IfFalse x17;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Unit\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>i = IfFalse x17;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Bool x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x4.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Intg x4\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x5.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Addr x5\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "case (Bool b)"], ["proof (state)\nthis:\n  hd stk = Bool b\n\ngoal (5 subgoals):\n 1. \\<lbrakk>i = IfFalse x17;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Unit\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>i = IfFalse x17;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Bool x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x4.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Intg x4\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 5. \\<And>x5.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Addr x5\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "then"], ["proof (chain)\npicking this:\n  hd stk = Bool b", "show ?thesis"], ["proof (prove)\nusing this:\n  hd stk = Bool b\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "using IfFalse assms"], ["proof (prove)\nusing this:\n  hd stk = Bool b\n  i = IfFalse x17\n  \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh\n  fst \\<sigma>' = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. i = Throw \\<or>\n    a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}", "by(cases b, auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = IfFalse x17;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Unit\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 2. \\<lbrakk>i = IfFalse x17;\n     \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 3. \\<And>x4.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Intg x4\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<And>x5.\n       \\<lbrakk>i = IfFalse x17;\n        \\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; hd stk = Addr x5\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}", "qed(auto)"], ["proof (state)\nthis:\n  i = Throw \\<or>\n  a \\<in> {a. \\<exists>x\\<in>sys_xcpts. a = addr_of_sys_xcpt x}\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Load x1\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 2. \\<And>x2.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Store x2\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 3. \\<And>x3.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Push x3\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 4. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Pop\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 5. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = IAdd\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 6. \\<And>x15.\n       \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n        fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> i = Throw \\<or>\n                         a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n  a = addr_of_sys_xcpt x}\n 7. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}\n 8. \\<lbrakk>\\<sigma>' = exec_instr i P h stk loc C M pc ics' frs sh;\n     fst \\<sigma>' = \\<lfloor>a\\<rfloor>; i = Throw\\<rbrakk>\n    \\<Longrightarrow> i = Throw \\<or>\n                      a \\<in> {a. \\<exists>x\\<in>sys_xcpts.\n                                     a = addr_of_sys_xcpt x}", "qed(auto)"], ["", "lemma exec_instr_prealloc_pres:\nassumes \"preallocated h\"\n  and \"exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh = (xp',h',frs',sh')\"\nshows \"preallocated h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preallocated h'", "using assms"], ["proof (prove)\nusing this:\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "proof(cases i)"], ["proof (state)\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x4.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x51 x52.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<And>x101 x102.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 18 subgoals...", "case (New C1)"], ["proof (state)\nthis:\n  i = New C1\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x4.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x51 x52.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<And>x101 x102.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = New C1", "obtain sfs i where sfsi: \"the(sh C1) = (sfs,i)\""], ["proof (prove)\nusing this:\n  i = New C1\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i.\n        the (sh C1) = (sfs, i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the(sh C1)\")"], ["proof (state)\nthis:\n  the (sh C1) = (sfs, i)\n\ngoal (18 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x4.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = New x4\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x51 x52.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<And>x101 x102.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Invoke x101 x102\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 18 subgoals...", "then"], ["proof (chain)\npicking this:\n  the (sh C1) = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (sh C1) = (sfs, i)\n\ngoal (1 subgoal):\n 1. preallocated h'", "using preallocated_new[of h] New assms"], ["proof (prove)\nusing this:\n  the (sh C1) = (sfs, i)\n  \\<lbrakk>preallocated h; h ?a = None\\<rbrakk>\n  \\<Longrightarrow> preallocated (h(?a \\<mapsto> ?x))\n  i = New C1\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"blank P C1\", auto dest: new_Addr_SomeD split: init_call_status.splits init_state.splits)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x51 x52.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 17 subgoals...", "next"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x51 x52.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 17 subgoals...", "case (Getfield F1 C1)"], ["proof (state)\nthis:\n  i = Getfield F1 C1\n\ngoal (17 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x51 x52.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getfield x51 x52\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<And>x111 x112 x113.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Invokestatic x111 x112 x113\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = Getfield F1 C1", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Getfield F1 C1\n\ngoal (1 subgoal):\n 1. preallocated h'", "using assms"], ["proof (prove)\nusing this:\n  i = Getfield F1 C1\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"the (h (the_Addr (hd stk)))\", cases \"field P C1 F1\", auto)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Return\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Return\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 16 subgoals...", "case (Getstatic C1 F1 D1)"], ["proof (state)\nthis:\n  i = Getstatic C1 F1 D1\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Return\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = Getstatic C1 F1 D1", "obtain sfs i where sfsi: \"the(sh (fst (field P D1 F1))) = (sfs, i)\""], ["proof (prove)\nusing this:\n  i = Getstatic C1 F1 D1\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i.\n        the (sh (fst (field P D1 F1))) = (sfs, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the(sh (fst (field P D1 F1)))\")"], ["proof (state)\nthis:\n  the (sh (fst (field P D1 F1))) = (sfs, i)\n\ngoal (16 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x61 x62 x63.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Getstatic x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Return\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  the (sh (fst (field P D1 F1))) = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (sh (fst (field P D1 F1))) = (sfs, i)\n\ngoal (1 subgoal):\n 1. preallocated h'", "using Getstatic assms"], ["proof (prove)\nusing this:\n  the (sh (fst (field P D1 F1))) = (sfs, i)\n  i = Getstatic C1 F1 D1\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"field P D1 F1\", auto split: init_call_status.splits init_state.splits)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Pop\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Pop\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 15 subgoals...", "case (Putfield F1 C1)"], ["proof (state)\nthis:\n  i = Putfield F1 C1\n\ngoal (15 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x71 x72.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putfield x71 x72\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Pop\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = Putfield F1 C1", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Putfield F1 C1\n\ngoal (1 subgoal):\n 1. preallocated h'", "using preallocated_new preallocated_upd_obj assms"], ["proof (prove)\nusing this:\n  i = Putfield F1 C1\n  \\<lbrakk>preallocated ?h; ?h ?a = None\\<rbrakk>\n  \\<Longrightarrow> preallocated (?h(?a \\<mapsto> ?x))\n  \\<lbrakk>preallocated ?h; ?h ?a = \\<lfloor>(?C, ?fs)\\<rfloor>\\<rbrakk>\n  \\<Longrightarrow> preallocated (?h(?a \\<mapsto> (?C, ?fs')))\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"the (h (the_Addr (hd (tl stk))))\", cases \"field P C1 F1\", auto, metis option.collapse)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = IAdd\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = IAdd\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 14 subgoals...", "case (Putstatic C1 F1 D1)"], ["proof (state)\nthis:\n  i = Putstatic C1 F1 D1\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = IAdd\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = Putstatic C1 F1 D1", "obtain sfs i where sfsi: \"the(sh (fst (field P D1 F1))) = (sfs, i)\""], ["proof (prove)\nusing this:\n  i = Putstatic C1 F1 D1\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i.\n        the (sh (fst (field P D1 F1))) = (sfs, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(cases \"the(sh (fst (field P D1 F1)))\")"], ["proof (state)\nthis:\n  the (sh (fst (field P D1 F1))) = (sfs, i)\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x81 x82 x83.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Putstatic x81 x82 x83\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = IAdd\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  the (sh (fst (field P D1 F1))) = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  the (sh (fst (field P D1 F1))) = (sfs, i)\n\ngoal (1 subgoal):\n 1. preallocated h'", "using Putstatic assms"], ["proof (prove)\nusing this:\n  the (sh (fst (field P D1 F1))) = (sfs, i)\n  i = Putstatic C1 F1 D1\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"field P D1 F1\", auto split: init_call_status.splits init_state.splits)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<And>x15.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Goto x15\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<And>x15.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Goto x15\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 13 subgoals...", "case (Checkcast C1)"], ["proof (state)\nthis:\n  i = Checkcast C1\n\ngoal (13 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x9.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Checkcast x9\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<And>x15.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = Goto x15\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = Checkcast C1", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Checkcast C1\n\ngoal (1 subgoal):\n 1. preallocated h'", "using assms"], ["proof (prove)\nusing this:\n  i = Checkcast C1\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "proof(cases \"hd stk = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Checkcast C1; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 2. \\<lbrakk>i = Checkcast C1; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     hd stk \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "case False"], ["proof (state)\nthis:\n  hd stk \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = Checkcast C1; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 2. \\<lbrakk>i = Checkcast C1; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     hd stk \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "then"], ["proof (chain)\npicking this:\n  hd stk \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  hd stk \\<noteq> Null\n\ngoal (1 subgoal):\n 1. preallocated h'", "using Checkcast assms"], ["proof (prove)\nusing this:\n  hd stk \\<noteq> Null\n  i = Checkcast C1\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"P \\<turnstile> cname_of h (the_Addr (hd stk)) \\<preceq>\\<^sup>* C1\", auto simp: cast_ok_def)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = Checkcast C1; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     hd stk = Null\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "qed(simp add: cast_ok_def)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 12 subgoals...", "case (Invoke M n)"], ["proof (state)\nthis:\n  i = Invoke M n\n\ngoal (12 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x101 x102.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invoke x101 x102\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = CmpEq\\<rbrakk>\n     \\<Longrightarrow> preallocated h'\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  i = Invoke M n", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Invoke M n\n\ngoal (1 subgoal):\n 1. preallocated h'", "using assms"], ["proof (prove)\nusing this:\n  i = Invoke M n\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"method P (cname_of h (the_Addr (stk ! n))) M\", auto)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<And>x17.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = IfFalse x17\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<And>x17.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = IfFalse x17\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 11 subgoals...", "case (Invokestatic C1 M n)"], ["proof (state)\nthis:\n  i = Invokestatic C1 M n\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<And>x111 x112 x113.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Invokestatic x111 x112 x113\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 10. \\<And>x17.\n        \\<lbrakk>preallocated h;\n         exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n         (xp', h', frs', sh');\n         i = IfFalse x17\\<rbrakk>\n        \\<Longrightarrow> preallocated h'\nA total of 11 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. preallocated h'", "proof(cases \"sh (fst (method P C1 M))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sh (fst (method P C1 M)) = None \\<Longrightarrow> preallocated h'\n 2. \\<And>a.\n       sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       preallocated h'", "case None"], ["proof (state)\nthis:\n  sh (fst (method P C1 M)) = None\n\ngoal (2 subgoals):\n 1. sh (fst (method P C1 M)) = None \\<Longrightarrow> preallocated h'\n 2. \\<And>a.\n       sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       preallocated h'", "then"], ["proof (chain)\npicking this:\n  sh (fst (method P C1 M)) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  sh (fst (method P C1 M)) = None\n\ngoal (1 subgoal):\n 1. preallocated h'", "using Invokestatic assms"], ["proof (prove)\nusing this:\n  sh (fst (method P C1 M)) = None\n  i = Invokestatic C1 M n\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"method P C1 M\", auto split: init_call_status.splits)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       preallocated h'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       preallocated h'", "case (Some a)"], ["proof (state)\nthis:\n  sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       preallocated h'", "then"], ["proof (chain)\npicking this:\n  sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>", "obtain sfs i where sfsi: \"a = (sfs, i)\""], ["proof (prove)\nusing this:\n  sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>sfs i. a = (sfs, i) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (sfs, i)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       preallocated h'", "then"], ["proof (chain)\npicking this:\n  a = (sfs, i)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = (sfs, i)\n\ngoal (1 subgoal):\n 1. preallocated h'", "using Some Invokestatic assms"], ["proof (prove)\nusing this:\n  a = (sfs, i)\n  sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>\n  i = Invokestatic C1 M n\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "proof(cases i)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>a = (sfs, i); sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>;\n     i = Invokestatic C1 M n; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Done\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 2. \\<lbrakk>a = (sfs, i); sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>;\n     i = Invokestatic C1 M n; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Processing\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 3. \\<lbrakk>a = (sfs, i); sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>;\n     i = Invokestatic C1 M n; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Prepared\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>a = (sfs, i); sh (fst (method P C1 M)) = \\<lfloor>a\\<rfloor>;\n     i = Invokestatic C1 M n; preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Error\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "qed(cases \"method P C1 M\", auto split: init_call_status.splits)+"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<And>x17.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Throw\\<rbrakk>\n     \\<Longrightarrow> preallocated h'", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<And>x17.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Throw\\<rbrakk>\n     \\<Longrightarrow> preallocated h'", "case Return"], ["proof (state)\nthis:\n  i = Return\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Return\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 7. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 9. \\<And>x17.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 10. \\<lbrakk>preallocated h;\n      exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n      (xp', h', frs', sh');\n      i = Throw\\<rbrakk>\n     \\<Longrightarrow> preallocated h'", "then"], ["proof (chain)\npicking this:\n  i = Return", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Return\n\ngoal (1 subgoal):\n 1. preallocated h'", "using assms"], ["proof (prove)\nusing this:\n  i = Return\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(cases \"method P C\\<^sub>0 M\\<^sub>0\", auto simp: split_beta split: list.splits)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (9 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<And>x17.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Throw\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<And>x17.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Throw\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "case (IfFalse x17)"], ["proof (state)\nthis:\n  i = IfFalse x17\n\ngoal (9 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<And>x17.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = IfFalse x17\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 9. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Throw\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "then"], ["proof (chain)\npicking this:\n  i = IfFalse x17", "show ?thesis"], ["proof (prove)\nusing this:\n  i = IfFalse x17\n\ngoal (1 subgoal):\n 1. preallocated h'", "using assms"], ["proof (prove)\nusing this:\n  i = IfFalse x17\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(auto split: val.splits bool.splits)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Throw\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Throw\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "case Throw"], ["proof (state)\nthis:\n  i = Throw\n\ngoal (8 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 8. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Throw\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "then"], ["proof (chain)\npicking this:\n  i = Throw", "show ?thesis"], ["proof (prove)\nusing this:\n  i = Throw\n\ngoal (1 subgoal):\n 1. preallocated h'", "using assms"], ["proof (prove)\nusing this:\n  i = Throw\n  preallocated h\n  exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n  (xp', h', frs', sh')\n\ngoal (1 subgoal):\n 1. preallocated h'", "by(auto split: val.splits)"], ["proof (state)\nthis:\n  preallocated h'\n\ngoal (7 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Load x1\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 2. \\<And>x2.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Store x2\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 3. \\<And>x3.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Push x3\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 4. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = Pop\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 5. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = IAdd\\<rbrakk>\n    \\<Longrightarrow> preallocated h'\n 6. \\<And>x15.\n       \\<lbrakk>preallocated h;\n        exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n        (xp', h', frs', sh');\n        i = Goto x15\\<rbrakk>\n       \\<Longrightarrow> preallocated h'\n 7. \\<lbrakk>preallocated h;\n     exec_instr i P h stk loc C\\<^sub>0 M\\<^sub>0 pc ics frs sh =\n     (xp', h', frs', sh');\n     i = CmpEq\\<rbrakk>\n    \\<Longrightarrow> preallocated h'", "qed(auto)"], ["", "end"]]}