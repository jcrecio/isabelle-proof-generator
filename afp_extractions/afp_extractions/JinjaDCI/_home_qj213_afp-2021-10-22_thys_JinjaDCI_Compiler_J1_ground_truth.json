{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/Compiler/J1.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemmas eval\\<^sub>1_evals\\<^sub>1_induct = eval\\<^sub>1_evals\\<^sub>1.induct [split_format (complete)]\n  and eval\\<^sub>1_evals\\<^sub>1_inducts = eval\\<^sub>1_evals\\<^sub>1.inducts [split_format (complete)]", "lemma eval\\<^sub>1_final: \"P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle> \\<Longrightarrow> final e'\"\n and evals\\<^sub>1_final: \"P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>] \\<langle>es',s'\\<rangle> \\<Longrightarrow> finals es'\"", "lemma eval\\<^sub>1_final_same: \"\\<lbrakk> P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>; final e \\<rbrakk> \\<Longrightarrow> e = e' \\<and> s = s'\"", "lemma eval\\<^sub>1_preserves_len:\n  \"P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>0,(h\\<^sub>0,ls\\<^sub>0,sh\\<^sub>0)\\<rangle> \\<Rightarrow> \\<langle>e\\<^sub>1,(h\\<^sub>1,ls\\<^sub>1,sh\\<^sub>1)\\<rangle> \\<Longrightarrow> length ls\\<^sub>0 = length ls\\<^sub>1\"\nand evals\\<^sub>1_preserves_len:\n  \"P \\<turnstile>\\<^sub>1 \\<langle>es\\<^sub>0,(h\\<^sub>0,ls\\<^sub>0,sh\\<^sub>0)\\<rangle> [\\<Rightarrow>] \\<langle>es\\<^sub>1,(h\\<^sub>1,ls\\<^sub>1,sh\\<^sub>1)\\<rangle> \\<Longrightarrow> length ls\\<^sub>0 = length ls\\<^sub>1\"", "lemma evals\\<^sub>1_preserves_elen:\n  \"\\<And>es' s s'. P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>] \\<langle>es',s'\\<rangle> \\<Longrightarrow> length es = length es'\"", "lemma clinit\\<^sub>1_loc_pres:\n \"P \\<turnstile>\\<^sub>1 \\<langle>C\\<^sub>0\\<bullet>\\<^sub>sclinit([]),(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle> \\<Longrightarrow> l = l'\"", "lemma\nshows init\\<^sub>1_ri\\<^sub>1_same_loc: \"P \\<turnstile>\\<^sub>1 \\<langle>e,(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle>\n   \\<Longrightarrow> (\\<And>C Cs b M a. e = INIT C (Cs,b) \\<leftarrow> unit \\<or> e = C\\<bullet>\\<^sub>sM([]) \\<or> e = RI (C,Throw a) ; Cs \\<leftarrow> unit\n          \\<or> e = RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\n           \\<Longrightarrow> l = l')\"\n  and \"P \\<turnstile>\\<^sub>1 \\<langle>es,(h,l,sh)\\<rangle> [\\<Rightarrow>] \\<langle>es',(h',l',sh')\\<rangle> \\<Longrightarrow> True\"", "lemma init\\<^sub>1_same_loc: \"P \\<turnstile>\\<^sub>1 \\<langle>INIT C (Cs,b) \\<leftarrow> unit,(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle> \\<Longrightarrow> l = l'\"", "theorem eval\\<^sub>1_hext: \"P \\<turnstile>\\<^sub>1 \\<langle>e,(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle> \\<Longrightarrow> h \\<unlhd> h'\"\nand evals\\<^sub>1_hext:  \"P \\<turnstile>\\<^sub>1 \\<langle>es,(h,l,sh)\\<rangle> [\\<Rightarrow>] \\<langle>es',(h',l',sh')\\<rangle> \\<Longrightarrow> h \\<unlhd> h'\"", "lemma rinit\\<^sub>1_throw:\n \"P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw xa) ; Cs \\<leftarrow> e,(h, l, sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h', l', sh')\\<rangle>\n    \\<Longrightarrow> e' = Throw xa\"", "lemma rinit\\<^sub>1_throwE:\n\"P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw e) ; Cs \\<leftarrow> e\\<^sub>0,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\n   \\<Longrightarrow> \\<exists>a s\\<^sub>t. e' = throw a \\<and> P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow> \\<langle>throw a,s\\<^sub>t\\<rangle>\""], "translations": [["", "lemmas eval\\<^sub>1_evals\\<^sub>1_induct = eval\\<^sub>1_evals\\<^sub>1.induct [split_format (complete)]\n  and eval\\<^sub>1_evals\\<^sub>1_inducts = eval\\<^sub>1_evals\\<^sub>1.inducts [split_format (complete)]"], ["", "(*>*)"], ["", "inductive_cases eval\\<^sub>1_cases [cases set]:\n \"P \\<turnstile>\\<^sub>1 \\<langle>new C,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>Cast C e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>Val v,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1 \\<guillemotleft>bop\\<guillemotright> e\\<^sub>2,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>Var v,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>V:=e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>e\\<bullet>F{D},s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>C\\<bullet>\\<^sub>sF{D},s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1\\<bullet>F{D}:=e\\<^sub>2,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>C\\<bullet>\\<^sub>sF{D}:=e\\<^sub>2,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>e\\<bullet>M(es),s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>C\\<bullet>\\<^sub>sM(es),s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>{V:T;e\\<^sub>1},s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1;;e\\<^sub>2,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>if (e) e\\<^sub>1 else e\\<^sub>2,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>while (b) c,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>try e\\<^sub>1 catch(C V) e\\<^sub>2,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>INIT C (Cs,b) \\<leftarrow> e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>RI (C,e);Cs \\<leftarrow> e\\<^sub>0,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\""], ["", "inductive_cases evals\\<^sub>1_cases [cases set]:\n \"P \\<turnstile>\\<^sub>1 \\<langle>[],s\\<rangle> [\\<Rightarrow>] \\<langle>e',s'\\<rangle>\"\n \"P \\<turnstile>\\<^sub>1 \\<langle>e#es,s\\<rangle> [\\<Rightarrow>] \\<langle>e',s'\\<rangle>\""], ["", "(*>*)"], ["", "lemma eval\\<^sub>1_final: \"P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle> \\<Longrightarrow> final e'\"\n and evals\\<^sub>1_final: \"P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>] \\<langle>es',s'\\<rangle> \\<Longrightarrow> finals es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n                            \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n     final e') &&&\n    (P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>]\n                            \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n     finals es')", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n                            \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n     final e') &&&\n    (P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>]\n                            \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n     finals es')", "by(induct rule:eval\\<^sub>1_evals\\<^sub>1.inducts, simp_all)"], ["", "(*>*)"], ["", "lemma eval\\<^sub>1_final_same: \"\\<lbrakk> P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>; final e \\<rbrakk> \\<Longrightarrow> e = e' \\<and> s = s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n                                    \\<langle>e',s'\\<rangle>;\n     final e\\<rbrakk>\n    \\<Longrightarrow> e = e' \\<and> s = s'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n                                    \\<langle>e',s'\\<rangle>;\n     final e\\<rbrakk>\n    \\<Longrightarrow> e = e' \\<and> s = s'", "apply(erule finalE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n \\<langle>e',s'\\<rangle>;\n        e = Val v\\<rbrakk>\n       \\<Longrightarrow> e = e' \\<and> s = s'\n 2. \\<And>a.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n \\<langle>e',s'\\<rangle>;\n        e = Throw a\\<rbrakk>\n       \\<Longrightarrow> e = e' \\<and> s = s'", "using eval\\<^sub>1_cases(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P \\<turnstile>\\<^sub>1 \\<langle>Val ?v,?s\\<rangle> \\<Rightarrow>\n                                   \\<langle>?e',?s'\\<rangle>;\n   \\<lbrakk>?e' = Val ?v; ?s' = ?s\\<rbrakk> \\<Longrightarrow> ?Pa\\<rbrakk>\n  \\<Longrightarrow> ?Pa\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n \\<langle>e',s'\\<rangle>;\n        e = Val v\\<rbrakk>\n       \\<Longrightarrow> e = e' \\<and> s = s'\n 2. \\<And>a.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n \\<langle>e',s'\\<rangle>;\n        e = Throw a\\<rbrakk>\n       \\<Longrightarrow> e = e' \\<and> s = s'", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,s\\<rangle> \\<Rightarrow>\n \\<langle>e',s'\\<rangle>;\n        e = Throw a\\<rbrakk>\n       \\<Longrightarrow> e = e' \\<and> s = s'", "by (metis eval\\<^sub>1_cases(3,17) exp.distinct(101) exp.inject(3) val.distinct(13))"], ["", "(*>*)"], ["", "subsection \"Property preservation\""], ["", "lemma eval\\<^sub>1_preserves_len:\n  \"P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>0,(h\\<^sub>0,ls\\<^sub>0,sh\\<^sub>0)\\<rangle> \\<Rightarrow> \\<langle>e\\<^sub>1,(h\\<^sub>1,ls\\<^sub>1,sh\\<^sub>1)\\<rangle> \\<Longrightarrow> length ls\\<^sub>0 = length ls\\<^sub>1\"\nand evals\\<^sub>1_preserves_len:\n  \"P \\<turnstile>\\<^sub>1 \\<langle>es\\<^sub>0,(h\\<^sub>0,ls\\<^sub>0,sh\\<^sub>0)\\<rangle> [\\<Rightarrow>] \\<langle>es\\<^sub>1,(h\\<^sub>1,ls\\<^sub>1,sh\\<^sub>1)\\<rangle> \\<Longrightarrow> length ls\\<^sub>0 = length ls\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>0,\n                             (h\\<^sub>0, ls\\<^sub>0,\n                              sh\\<^sub>0)\\<rangle> \\<Rightarrow>\n                            \\<langle>e\\<^sub>1,\n                             (h\\<^sub>1, ls\\<^sub>1,\n                              sh\\<^sub>1)\\<rangle> \\<Longrightarrow>\n     length ls\\<^sub>0 = length ls\\<^sub>1) &&&\n    (P \\<turnstile>\\<^sub>1 \\<langle>es\\<^sub>0,\n                             (h\\<^sub>0, ls\\<^sub>0,\n                              sh\\<^sub>0)\\<rangle> [\\<Rightarrow>]\n                            \\<langle>es\\<^sub>1,\n                             (h\\<^sub>1, ls\\<^sub>1,\n                              sh\\<^sub>1)\\<rangle> \\<Longrightarrow>\n     length ls\\<^sub>0 = length ls\\<^sub>1)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>0,\n                             (h\\<^sub>0, ls\\<^sub>0,\n                              sh\\<^sub>0)\\<rangle> \\<Rightarrow>\n                            \\<langle>e\\<^sub>1,\n                             (h\\<^sub>1, ls\\<^sub>1,\n                              sh\\<^sub>1)\\<rangle> \\<Longrightarrow>\n     length ls\\<^sub>0 = length ls\\<^sub>1) &&&\n    (P \\<turnstile>\\<^sub>1 \\<langle>es\\<^sub>0,\n                             (h\\<^sub>0, ls\\<^sub>0,\n                              sh\\<^sub>0)\\<rangle> [\\<Rightarrow>]\n                            \\<langle>es\\<^sub>1,\n                             (h\\<^sub>1, ls\\<^sub>1,\n                              sh\\<^sub>1)\\<rangle> \\<Longrightarrow>\n     length ls\\<^sub>0 = length ls\\<^sub>1)", "by (induct rule:eval\\<^sub>1_evals\\<^sub>1_inducts, simp_all)"], ["", "(*>*)"], ["", "lemma evals\\<^sub>1_preserves_elen:\n  \"\\<And>es' s s'. P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>] \\<langle>es',s'\\<rangle> \\<Longrightarrow> length es = length es'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>es' s s'.\n       P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>]\n                              \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n       length es = length es'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>es' s s'.\n       P \\<turnstile>\\<^sub>1 \\<langle>es,s\\<rangle> [\\<Rightarrow>]\n                              \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n       length es = length es'", "apply(induct es type:list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>es' s s'.\n       P \\<turnstile>\\<^sub>1 \\<langle>[],s\\<rangle> [\\<Rightarrow>]\n                              \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n       length [] = length es'\n 2. \\<And>a list es' s s'.\n       \\<lbrakk>\\<And>es' s s'.\n                   P \\<turnstile>\\<^sub>1 \\<langle>list,\n     s\\<rangle> [\\<Rightarrow>]\n    \\<langle>es',s'\\<rangle> \\<Longrightarrow>\n                   length list = length es';\n        P \\<turnstile>\\<^sub>1 \\<langle>a # list,s\\<rangle> [\\<Rightarrow>]\n                               \\<langle>es',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> length (a # list) = length es'", "apply (auto elim:evals\\<^sub>1.cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma clinit\\<^sub>1_loc_pres:\n \"P \\<turnstile>\\<^sub>1 \\<langle>C\\<^sub>0\\<bullet>\\<^sub>sclinit([]),(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle> \\<Longrightarrow> l = l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile>\\<^sub>1 \\<langle>C\\<^sub>0\\<bullet>\\<^sub>sclinit([]),\n                            (h, l, sh)\\<rangle> \\<Rightarrow>\n                           \\<langle>e',\n                            (h', l', sh')\\<rangle> \\<Longrightarrow>\n    l = l'", "by(auto elim!: eval\\<^sub>1_cases(12) evals\\<^sub>1_cases(1))"], ["", "lemma\nshows init\\<^sub>1_ri\\<^sub>1_same_loc: \"P \\<turnstile>\\<^sub>1 \\<langle>e,(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle>\n   \\<Longrightarrow> (\\<And>C Cs b M a. e = INIT C (Cs,b) \\<leftarrow> unit \\<or> e = C\\<bullet>\\<^sub>sM([]) \\<or> e = RI (C,Throw a) ; Cs \\<leftarrow> unit\n          \\<or> e = RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\n           \\<Longrightarrow> l = l')\"\n  and \"P \\<turnstile>\\<^sub>1 \\<langle>es,(h,l,sh)\\<rangle> [\\<Rightarrow>] \\<langle>es',(h',l',sh')\\<rangle> \\<Longrightarrow> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile>\\<^sub>1 \\<langle>e,(h, l, sh)\\<rangle> \\<Rightarrow>\n                            \\<langle>e',\n                             (h', l', sh')\\<rangle> \\<Longrightarrow>\n     (\\<And>C Cs b M a.\n         e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n         e = C\\<bullet>\\<^sub>sM([]) \\<or>\n         e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n         e =\n         RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n         l = l')) &&&\n    (P \\<turnstile>\\<^sub>1 \\<langle>es,(h, l, sh)\\<rangle> [\\<Rightarrow>]\n                            \\<langle>es',\n                             (h', l', sh')\\<rangle> \\<Longrightarrow>\n     True)", "proof(induct rule: eval\\<^sub>1_evals\\<^sub>1_inducts)"], ["proof (state)\ngoal (80 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l Ca Cs b M aa.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 2. \\<And>sh C sfs h l Ca Cs b M a.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>; new_Addr h = None;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h'' Ca Cs b M aa.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 4. \\<And>sh C h l v' h' l' sh' Ca Cs b M a.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = None; is_class P C;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 5. \\<And>sh C h l a aa ab b Ca Cs ba M ac.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = ab;\n        is_class P C;\n        new C = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = ab\n 6. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 7. \\<And>e a aa b ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 8. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 9. \\<And>e a aa b e' ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 10. \\<And>v a aa b C Cs ba M ab.\n        Val v = INIT C (Cs,ba) \\<leftarrow> unit \\<or>\n        Val v = C\\<bullet>\\<^sub>sM([]) \\<or>\n        Val v = RI (C,Throw ab) ; Cs \\<leftarrow> unit \\<or>\n        Val v =\n        RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n        aa = aa\nA total of 80 subgoals...", "case (RInitInitFail\\<^sub>1 e h l sh a')"], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>e,(h, l, sh)\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a',(h'_, l'_, sh'_)\\<rangle>\n  e = INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  e = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  e = RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  e =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l = l'_\n  sh'_ C_ = \\<lfloor>(sfs_, i_)\\<rfloor>\n  sh''_ = sh'_(C_ \\<mapsto> (sfs_, Error))\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D_,throw a') ; Cs_ \\<leftarrow> e'_,\n                          (h'_, l'_, sh''_)\\<rangle> \\<Rightarrow>\n                         \\<langle>e\\<^sub>1_,(a___, a_, b_)\\<rangle>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l'_ = a_\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  INIT C (Cs,b) \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ = C\\<bullet>\\<^sub>sM([]) \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\n\ngoal (80 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l Ca Cs b M aa.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 2. \\<And>sh C sfs h l Ca Cs b M a.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>; new_Addr h = None;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h'' Ca Cs b M aa.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 4. \\<And>sh C h l v' h' l' sh' Ca Cs b M a.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = None; is_class P C;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 5. \\<And>sh C h l a aa ab b Ca Cs ba M ac.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = ab;\n        is_class P C;\n        new C = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = ab\n 6. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 7. \\<And>e a aa b ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 8. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 9. \\<And>e a aa b e' ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 10. \\<And>v a aa b C Cs ba M ab.\n        Val v = INIT C (Cs,ba) \\<leftarrow> unit \\<or>\n        Val v = C\\<bullet>\\<^sub>sM([]) \\<or>\n        Val v = RI (C,Throw ab) ; Cs \\<leftarrow> unit \\<or>\n        Val v =\n        RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n        aa = aa\nA total of 80 subgoals...", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile>\\<^sub>1 \\<langle>e,(h, l, sh)\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a',(h'_, l'_, sh'_)\\<rangle>\n  e = INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  e = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  e = RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  e =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l = l'_\n  sh'_ C_ = \\<lfloor>(sfs_, i_)\\<rfloor>\n  sh''_ = sh'_(C_ \\<mapsto> (sfs_, Error))\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D_,throw a') ; Cs_ \\<leftarrow> e'_,\n                          (h'_, l'_, sh''_)\\<rangle> \\<Rightarrow>\n                         \\<langle>e\\<^sub>1_,(a___, a_, b_)\\<rangle>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l'_ = a_\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  INIT C (Cs,b) \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ = C\\<bullet>\\<^sub>sM([]) \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>e,(h, l, sh)\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a',(h'_, l'_, sh'_)\\<rangle>\n  e = INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  e = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  e = RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  e =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l = l'_\n  sh'_ C_ = \\<lfloor>(sfs_, i_)\\<rfloor>\n  sh''_ = sh'_(C_ \\<mapsto> (sfs_, Error))\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D_,throw a') ; Cs_ \\<leftarrow> e'_,\n                          (h'_, l'_, sh''_)\\<rangle> \\<Rightarrow>\n                         \\<langle>e\\<^sub>1_,(a___, a_, b_)\\<rangle>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l'_ = a_\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  INIT C (Cs,b) \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ = C\\<bullet>\\<^sub>sM([]) \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\n\ngoal (1 subgoal):\n 1. l = a_", "using eval\\<^sub>1_final[of _ _ _ \"throw a'\"]"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>e,(h, l, sh)\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a',(h'_, l'_, sh'_)\\<rangle>\n  e = INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  e = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  e = RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  e =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l = l'_\n  sh'_ C_ = \\<lfloor>(sfs_, i_)\\<rfloor>\n  sh''_ = sh'_(C_ \\<mapsto> (sfs_, Error))\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D_,throw a') ; Cs_ \\<leftarrow> e'_,\n                          (h'_, l'_, sh''_)\\<rangle> \\<Rightarrow>\n                         \\<langle>e\\<^sub>1_,(a___, a_, b_)\\<rangle>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  RI (D_,throw a') ; Cs_ \\<leftarrow> e'_ =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  l'_ = a_\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  INIT C (Cs,b) \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ = C\\<bullet>\\<^sub>sM([]) \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n  RI (C_,e) ; D_ # Cs_ \\<leftarrow> e'_ =\n  RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\n  ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                          \\<langle>throw a',?s'\\<rangle> \\<Longrightarrow>\n  final (throw a')\n\ngoal (1 subgoal):\n 1. l = a_", "by(fastforce dest: eval\\<^sub>1_final_same[of _ \"Throw a\"])"], ["proof (state)\nthis:\n  l = a_\n\ngoal (79 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l Ca Cs b M aa.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 2. \\<And>sh C sfs h l Ca Cs b M a.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>; new_Addr h = None;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h'' Ca Cs b M aa.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 4. \\<And>sh C h l v' h' l' sh' Ca Cs b M a.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = None; is_class P C;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 5. \\<And>sh C h l a aa ab b Ca Cs ba M ac.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = ab;\n        is_class P C;\n        new C = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = ab\n 6. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 7. \\<And>e a aa b ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 8. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 9. \\<And>e a aa b e' ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 10. \\<And>v a aa b C Cs ba M ab.\n        Val v = INIT C (Cs,ba) \\<leftarrow> unit \\<or>\n        Val v = C\\<bullet>\\<^sub>sM([]) \\<or>\n        Val v = RI (C,Throw ab) ; Cs \\<leftarrow> unit \\<or>\n        Val v =\n        RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n        aa = aa\nA total of 79 subgoals...", "next"], ["proof (state)\ngoal (79 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l Ca Cs b M aa.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 2. \\<And>sh C sfs h l Ca Cs b M a.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>; new_Addr h = None;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h'' Ca Cs b M aa.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 4. \\<And>sh C h l v' h' l' sh' Ca Cs b M a.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = None; is_class P C;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 5. \\<And>sh C h l a aa ab b Ca Cs ba M ac.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = ab;\n        is_class P C;\n        new C = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = ab\n 6. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 7. \\<And>e a aa b ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 8. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 9. \\<And>e a aa b e' ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 10. \\<And>v a aa b C Cs ba M ab.\n        Val v = INIT C (Cs,ba) \\<leftarrow> unit \\<or>\n        Val v = C\\<bullet>\\<^sub>sM([]) \\<or>\n        Val v = RI (C,Throw ab) ; Cs \\<leftarrow> unit \\<or>\n        Val v =\n        RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n        aa = aa\nA total of 79 subgoals...", "case RInitFailFinal\\<^sub>1"], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>e_,\n                          (a___, aa___, b_)\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a_,(h'_, l'_, sh'_)\\<rangle>\n  e_ = INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  e_ = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  e_ = RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  e_ =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  aa___ = l'_\n  sh'_ C_ = \\<lfloor>(sfs_, i_)\\<rfloor>\n  sh''_ = sh'_(C_ \\<mapsto> (sfs_, Error))\n  RI (C_,e_) ; [] \\<leftarrow> e'_ = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ = C\\<bullet>\\<^sub>sM([]) \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ =\n  RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ =\n  RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\n\ngoal (79 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l Ca Cs b M aa.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 2. \\<And>sh C sfs h l Ca Cs b M a.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>; new_Addr h = None;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h'' Ca Cs b M aa.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 4. \\<And>sh C h l v' h' l' sh' Ca Cs b M a.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = None; is_class P C;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 5. \\<And>sh C h l a aa ab b Ca Cs ba M ac.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = ab;\n        is_class P C;\n        new C = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = ab\n 6. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 7. \\<And>e a aa b ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 8. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 9. \\<And>e a aa b e' ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 10. \\<And>v a aa b C Cs ba M ab.\n        Val v = INIT C (Cs,ba) \\<leftarrow> unit \\<or>\n        Val v = C\\<bullet>\\<^sub>sM([]) \\<or>\n        Val v = RI (C,Throw ab) ; Cs \\<leftarrow> unit \\<or>\n        Val v =\n        RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n        aa = aa\nA total of 79 subgoals...", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile>\\<^sub>1 \\<langle>e_,\n                          (a___, aa___, b_)\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a_,(h'_, l'_, sh'_)\\<rangle>\n  e_ = INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  e_ = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  e_ = RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  e_ =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  aa___ = l'_\n  sh'_ C_ = \\<lfloor>(sfs_, i_)\\<rfloor>\n  sh''_ = sh'_(C_ \\<mapsto> (sfs_, Error))\n  RI (C_,e_) ; [] \\<leftarrow> e'_ = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ = C\\<bullet>\\<^sub>sM([]) \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ =\n  RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ =\n  RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>e_,\n                          (a___, aa___, b_)\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a_,(h'_, l'_, sh'_)\\<rangle>\n  e_ = INIT ?C (?Cs,?b) \\<leftarrow> unit \\<or>\n  e_ = ?C\\<bullet>\\<^sub>s?M([]) \\<or>\n  e_ = RI (?C,Throw ?a) ; ?Cs \\<leftarrow> unit \\<or>\n  e_ =\n  RI (?C,?C\\<bullet>\\<^sub>sclinit([])) ; ?Cs \\<leftarrow> unit \\<Longrightarrow>\n  aa___ = l'_\n  sh'_ C_ = \\<lfloor>(sfs_, i_)\\<rfloor>\n  sh''_ = sh'_(C_ \\<mapsto> (sfs_, Error))\n  RI (C_,e_) ; [] \\<leftarrow> e'_ = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ = C\\<bullet>\\<^sub>sM([]) \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ =\n  RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n  RI (C_,e_) ; [] \\<leftarrow> e'_ =\n  RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\n\ngoal (1 subgoal):\n 1. aa___ = l'_", "by(auto dest: eval\\<^sub>1_final_same)"], ["proof (state)\nthis:\n  aa___ = l'_\n\ngoal (78 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l Ca Cs b M aa.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 2. \\<And>sh C sfs h l Ca Cs b M a.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>; new_Addr h = None;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h'' Ca Cs b M aa.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C);\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw aa) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 4. \\<And>sh C h l v' h' l' sh' Ca Cs b M a.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = l';\n        new_Addr h' = None; is_class P C;\n        new C = INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = l'\n 5. \\<And>sh C h l a aa ab b Ca Cs ba M ac.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        \\<And>Ca Cs b M a.\n           INIT C ([C],False) \\<leftarrow> unit =\n           INIT Ca (Cs,b) \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           Ca\\<bullet>\\<^sub>sM([]) \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           INIT C ([C],False) \\<leftarrow> unit =\n           RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           l = ab;\n        is_class P C;\n        new C = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        new C = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        new C = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        new C =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> l = ab\n 6. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 7. \\<And>e a aa b ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 8. \\<And>e a aa b ab h l sh D fs C Ca Cs ba M ac.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = l;\n        h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*;\n        Cast C e = INIT Ca (Cs,ba) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ac) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = l\n 9. \\<And>e a aa b e' ab ac ba C Ca Cs bb M ad.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        \\<And>C Cs b M a.\n           e = INIT C (Cs,b) \\<leftarrow> unit \\<or>\n           e = C\\<bullet>\\<^sub>sM([]) \\<or>\n           e = RI (C,Throw a) ; Cs \\<leftarrow> unit \\<or>\n           e =\n           RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n           aa = ac;\n        Cast C e = INIT Ca (Cs,bb) \\<leftarrow> unit \\<or>\n        Cast C e = Ca\\<bullet>\\<^sub>sM([]) \\<or>\n        Cast C e = RI (Ca,Throw ad) ; Cs \\<leftarrow> unit \\<or>\n        Cast C e =\n        RI (Ca,Ca\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit\\<rbrakk>\n       \\<Longrightarrow> aa = ac\n 10. \\<And>v a aa b C Cs ba M ab.\n        Val v = INIT C (Cs,ba) \\<leftarrow> unit \\<or>\n        Val v = C\\<bullet>\\<^sub>sM([]) \\<or>\n        Val v = RI (C,Throw ab) ; Cs \\<leftarrow> unit \\<or>\n        Val v =\n        RI (C,C\\<bullet>\\<^sub>sclinit([])) ; Cs \\<leftarrow> unit \\<Longrightarrow>\n        aa = aa\nA total of 78 subgoals...", "qed(auto dest: evals\\<^sub>1_cases eval\\<^sub>1_cases(17) eval\\<^sub>1_final_same)"], ["", "lemma init\\<^sub>1_same_loc: \"P \\<turnstile>\\<^sub>1 \\<langle>INIT C (Cs,b) \\<leftarrow> unit,(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle> \\<Longrightarrow> l = l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile>\\<^sub>1 \\<langle>INIT C (Cs,b) \\<leftarrow> unit,\n                            (h, l, sh)\\<rangle> \\<Rightarrow>\n                           \\<langle>e',\n                            (h', l', sh')\\<rangle> \\<Longrightarrow>\n    l = l'", "by(simp add: init\\<^sub>1_ri\\<^sub>1_same_loc)"], ["", "theorem eval\\<^sub>1_hext: \"P \\<turnstile>\\<^sub>1 \\<langle>e,(h,l,sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h',l',sh')\\<rangle> \\<Longrightarrow> h \\<unlhd> h'\"\nand evals\\<^sub>1_hext:  \"P \\<turnstile>\\<^sub>1 \\<langle>es,(h,l,sh)\\<rangle> [\\<Rightarrow>] \\<langle>es',(h',l',sh')\\<rangle> \\<Longrightarrow> h \\<unlhd> h'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile>\\<^sub>1 \\<langle>e,(h, l, sh)\\<rangle> \\<Rightarrow>\n                            \\<langle>e',\n                             (h', l', sh')\\<rangle> \\<Longrightarrow>\n     h \\<unlhd> h') &&&\n    (P \\<turnstile>\\<^sub>1 \\<langle>es,(h, l, sh)\\<rangle> [\\<Rightarrow>]\n                            \\<langle>es',\n                             (h', l', sh')\\<rangle> \\<Longrightarrow>\n     h \\<unlhd> h')", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile>\\<^sub>1 \\<langle>e,(h, l, sh)\\<rangle> \\<Rightarrow>\n                            \\<langle>e',\n                             (h', l', sh')\\<rangle> \\<Longrightarrow>\n     h \\<unlhd> h') &&&\n    (P \\<turnstile>\\<^sub>1 \\<langle>es,(h, l, sh)\\<rangle> [\\<Rightarrow>]\n                            \\<langle>es',\n                             (h', l', sh')\\<rangle> \\<Longrightarrow>\n     h \\<unlhd> h')", "proof (induct rule: eval\\<^sub>1_evals\\<^sub>1_inducts)"], ["proof (state)\ngoal (80 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C)\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 2. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h''.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = \\<lfloor>a\\<rfloor>;\n        P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C)\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h''\n 4. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 5. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 6. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 7. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 8. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 9. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 10. \\<And>v a aa b. a \\<unlhd> a\nA total of 80 subgoals...", "case New\\<^sub>1"], ["proof (state)\nthis:\n  sh_ C_ = \\<lfloor>(sfs_, Done)\\<rfloor>\n  new_Addr h_ = \\<lfloor>a_\\<rfloor>\n  P \\<turnstile> C_ has_fields FDTs_\n  h'_ = h_(a_ \\<mapsto> blank P C_)\n\ngoal (80 subgoals):\n 1. \\<And>sh C sfs h a FDTs h' l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = \\<lfloor>a\\<rfloor>; P \\<turnstile> C has_fields FDTs;\n        h' = h(a \\<mapsto> blank P C)\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 2. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 3. \\<And>sh C h l v' h' l' sh' a FDTs h''.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = \\<lfloor>a\\<rfloor>;\n        P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C)\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h''\n 4. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 5. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 6. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 7. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 8. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 9. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 10. \\<And>v a aa b. a \\<unlhd> a\nA total of 80 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  sh_ C_ = \\<lfloor>(sfs_, Done)\\<rfloor>\n  new_Addr h_ = \\<lfloor>a_\\<rfloor>\n  P \\<turnstile> C_ has_fields FDTs_\n  h'_ = h_(a_ \\<mapsto> blank P C_)\n\ngoal (1 subgoal):\n 1. h_ \\<unlhd> h'_", "by(fastforce intro!: hext_new intro:LeastI simp:new_Addr_def\n                split:if_split_asm simp del:fun_upd_apply)"], ["proof (state)\nthis:\n  h_ \\<unlhd> h'_\n\ngoal (79 subgoals):\n 1. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 2. \\<And>sh C h l v' h' l' sh' a FDTs h''.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = \\<lfloor>a\\<rfloor>;\n        P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C)\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h''\n 3. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 4. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 5. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 6. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 7. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 8. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 9. \\<And>v a aa b. a \\<unlhd> a\n 10. \\<And>e\\<^sub>1 a aa b v\\<^sub>1 ab ac ba e\\<^sub>2 v\\<^sub>2 ad ae bb\n        bop v.\n        \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n   (a, aa, b)\\<rangle> \\<Rightarrow>\n  \\<langle>Val v\\<^sub>1,(ab, ac, ba)\\<rangle>;\n         a \\<unlhd> ab;\n         P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2,\n                                 (ab, ac, ba)\\<rangle> \\<Rightarrow>\n                                \\<langle>Val v\\<^sub>2,\n                                 (ad, ae, bb)\\<rangle>;\n         ab \\<unlhd> ad;\n         binop (bop, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> a \\<unlhd> ad\nA total of 79 subgoals...", "next"], ["proof (state)\ngoal (79 subgoals):\n 1. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 2. \\<And>sh C h l v' h' l' sh' a FDTs h''.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = \\<lfloor>a\\<rfloor>;\n        P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C)\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h''\n 3. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 4. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 5. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 6. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 7. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 8. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 9. \\<And>v a aa b. a \\<unlhd> a\n 10. \\<And>e\\<^sub>1 a aa b v\\<^sub>1 ab ac ba e\\<^sub>2 v\\<^sub>2 ad ae bb\n        bop v.\n        \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n   (a, aa, b)\\<rangle> \\<Rightarrow>\n  \\<langle>Val v\\<^sub>1,(ab, ac, ba)\\<rangle>;\n         a \\<unlhd> ab;\n         P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2,\n                                 (ab, ac, ba)\\<rangle> \\<Rightarrow>\n                                \\<langle>Val v\\<^sub>2,\n                                 (ad, ae, bb)\\<rangle>;\n         ab \\<unlhd> ad;\n         binop (bop, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> a \\<unlhd> ad\nA total of 79 subgoals...", "case NewInit\\<^sub>1"], ["proof (state)\nthis:\n  \\<nexists>sfs. sh_ C_ = \\<lfloor>(sfs, Done)\\<rfloor>\n  P \\<turnstile>\\<^sub>1 \\<langle>INIT C_ ([C_],False) \\<leftarrow> unit,\n                          (h_, l_, sh_)\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v'_,(h'_, l'_, sh'_)\\<rangle>\n  h_ \\<unlhd> h'_\n  new_Addr h'_ = \\<lfloor>a_\\<rfloor>\n  P \\<turnstile> C_ has_fields FDTs_\n  h''_ = h'_(a_ \\<mapsto> blank P C_)\n\ngoal (79 subgoals):\n 1. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 2. \\<And>sh C h l v' h' l' sh' a FDTs h''.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = \\<lfloor>a\\<rfloor>;\n        P \\<turnstile> C has_fields FDTs;\n        h'' = h'(a \\<mapsto> blank P C)\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h''\n 3. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 4. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 5. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 6. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 7. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 8. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 9. \\<And>v a aa b. a \\<unlhd> a\n 10. \\<And>e\\<^sub>1 a aa b v\\<^sub>1 ab ac ba e\\<^sub>2 v\\<^sub>2 ad ae bb\n        bop v.\n        \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n   (a, aa, b)\\<rangle> \\<Rightarrow>\n  \\<langle>Val v\\<^sub>1,(ab, ac, ba)\\<rangle>;\n         a \\<unlhd> ab;\n         P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2,\n                                 (ab, ac, ba)\\<rangle> \\<Rightarrow>\n                                \\<langle>Val v\\<^sub>2,\n                                 (ad, ae, bb)\\<rangle>;\n         ab \\<unlhd> ad;\n         binop (bop, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> a \\<unlhd> ad\nA total of 79 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<nexists>sfs. sh_ C_ = \\<lfloor>(sfs, Done)\\<rfloor>\n  P \\<turnstile>\\<^sub>1 \\<langle>INIT C_ ([C_],False) \\<leftarrow> unit,\n                          (h_, l_, sh_)\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v'_,(h'_, l'_, sh'_)\\<rangle>\n  h_ \\<unlhd> h'_\n  new_Addr h'_ = \\<lfloor>a_\\<rfloor>\n  P \\<turnstile> C_ has_fields FDTs_\n  h''_ = h'_(a_ \\<mapsto> blank P C_)\n\ngoal (1 subgoal):\n 1. h_ \\<unlhd> h''_", "by (meson hext_new hext_trans new_Addr_SomeD)"], ["proof (state)\nthis:\n  h_ \\<unlhd> h''_\n\ngoal (78 subgoals):\n 1. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 2. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 3. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 4. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 5. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 6. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 7. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 8. \\<And>v a aa b. a \\<unlhd> a\n 9. \\<And>e\\<^sub>1 a aa b v\\<^sub>1 ab ac ba e\\<^sub>2 v\\<^sub>2 ad ae bb\n       bop v.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>Val v\\<^sub>1,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab;\n        P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2,\n                                (ab, ac, ba)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v\\<^sub>2,(ad, ae, bb)\\<rangle>;\n        ab \\<unlhd> ad;\n        binop (bop, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ad\n 10. \\<And>e\\<^sub>1 a aa b e ab ac ba bop e\\<^sub>2.\n        \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n   (a, aa, b)\\<rangle> \\<Rightarrow>\n  \\<langle>throw e,(ab, ac, ba)\\<rangle>;\n         a \\<unlhd> ab\\<rbrakk>\n        \\<Longrightarrow> a \\<unlhd> ab\nA total of 78 subgoals...", "next"], ["proof (state)\ngoal (78 subgoals):\n 1. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 2. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 3. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 4. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 5. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 6. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 7. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 8. \\<And>v a aa b. a \\<unlhd> a\n 9. \\<And>e\\<^sub>1 a aa b v\\<^sub>1 ab ac ba e\\<^sub>2 v\\<^sub>2 ad ae bb\n       bop v.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>Val v\\<^sub>1,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab;\n        P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2,\n                                (ab, ac, ba)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v\\<^sub>2,(ad, ae, bb)\\<rangle>;\n        ab \\<unlhd> ad;\n        binop (bop, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ad\n 10. \\<And>e\\<^sub>1 a aa b e ab ac ba bop e\\<^sub>2.\n        \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n   (a, aa, b)\\<rangle> \\<Rightarrow>\n  \\<langle>throw e,(ab, ac, ba)\\<rangle>;\n         a \\<unlhd> ab\\<rbrakk>\n        \\<Longrightarrow> a \\<unlhd> ab\nA total of 78 subgoals...", "case FAss\\<^sub>1"], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1_,\n                          (a___, aa___, b___)\\<rangle> \\<Rightarrow>\n                         \\<langle>addr ab___,(ac___, a_, b_)\\<rangle>\n  a___ \\<unlhd> ac___\n  P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2_,\n                          (ac___, a_, b_)\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v_,\n                          (h\\<^sub>2_, l\\<^sub>2_, sh\\<^sub>2_)\\<rangle>\n  ac___ \\<unlhd> h\\<^sub>2_\n  h\\<^sub>2_ ab___ = \\<lfloor>(C_, fs_)\\<rfloor>\n  P \\<turnstile> C_ has F_,NonStatic:t_ in D_\n  fs'_ = fs_((F_, D_) \\<mapsto> v_)\n  h\\<^sub>2'_ = h\\<^sub>2_(ab___ \\<mapsto> (C_, fs'_))\n\ngoal (78 subgoals):\n 1. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 2. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 3. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 4. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 5. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 6. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 7. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 8. \\<And>v a aa b. a \\<unlhd> a\n 9. \\<And>e\\<^sub>1 a aa b v\\<^sub>1 ab ac ba e\\<^sub>2 v\\<^sub>2 ad ae bb\n       bop v.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>Val v\\<^sub>1,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab;\n        P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2,\n                                (ab, ac, ba)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v\\<^sub>2,(ad, ae, bb)\\<rangle>;\n        ab \\<unlhd> ad;\n        binop (bop, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ad\n 10. \\<And>e\\<^sub>1 a aa b e ab ac ba bop e\\<^sub>2.\n        \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n   (a, aa, b)\\<rangle> \\<Rightarrow>\n  \\<langle>throw e,(ab, ac, ba)\\<rangle>;\n         a \\<unlhd> ab\\<rbrakk>\n        \\<Longrightarrow> a \\<unlhd> ab\nA total of 78 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1_,\n                          (a___, aa___, b___)\\<rangle> \\<Rightarrow>\n                         \\<langle>addr ab___,(ac___, a_, b_)\\<rangle>\n  a___ \\<unlhd> ac___\n  P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2_,\n                          (ac___, a_, b_)\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v_,\n                          (h\\<^sub>2_, l\\<^sub>2_, sh\\<^sub>2_)\\<rangle>\n  ac___ \\<unlhd> h\\<^sub>2_\n  h\\<^sub>2_ ab___ = \\<lfloor>(C_, fs_)\\<rfloor>\n  P \\<turnstile> C_ has F_,NonStatic:t_ in D_\n  fs'_ = fs_((F_, D_) \\<mapsto> v_)\n  h\\<^sub>2'_ = h\\<^sub>2_(ab___ \\<mapsto> (C_, fs'_))\n\ngoal (1 subgoal):\n 1. a___ \\<unlhd> h\\<^sub>2'_", "by(auto simp:sym[THEN hext_upd_obj] simp del:fun_upd_apply\n            elim!: hext_trans)"], ["proof (state)\nthis:\n  a___ \\<unlhd> h\\<^sub>2'_\n\ngoal (77 subgoals):\n 1. \\<And>sh C sfs h l.\n       \\<lbrakk>sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        new_Addr h = None\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h\n 2. \\<And>sh C h l v' h' l' sh'.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v',(h', l', sh')\\<rangle>;\n        h \\<unlhd> h'; new_Addr h' = None; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> h'\n 3. \\<And>sh C h l a aa ab b.\n       \\<lbrakk>\\<nexists>sfs. sh C = \\<lfloor>(sfs, Done)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT C ([C],False) \\<leftarrow> unit,\n                                (h, l, sh)\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(aa, ab, b)\\<rangle>;\n        h \\<unlhd> aa; is_class P C\\<rbrakk>\n       \\<Longrightarrow> h \\<unlhd> aa\n 4. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        P \\<turnstile> D \\<preceq>\\<^sup>* C\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 5. \\<And>e a aa b ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>null,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 6. \\<And>e a aa b ab h l sh D fs C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>addr ab,(h, l, sh)\\<rangle>;\n        a \\<unlhd> h; h ab = \\<lfloor>(D, fs)\\<rfloor>;\n        (D, C) \\<notin> (subcls1 P)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> h\n 7. \\<And>e a aa b e' ab ac ba C.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>throw e',(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ab\n 8. \\<And>v a aa b. a \\<unlhd> a\n 9. \\<And>e\\<^sub>1 a aa b v\\<^sub>1 ab ac ba e\\<^sub>2 v\\<^sub>2 ad ae bb\n       bop v.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n  (a, aa, b)\\<rangle> \\<Rightarrow>\n \\<langle>Val v\\<^sub>1,(ab, ac, ba)\\<rangle>;\n        a \\<unlhd> ab;\n        P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>2,\n                                (ab, ac, ba)\\<rangle> \\<Rightarrow>\n                               \\<langle>Val v\\<^sub>2,(ad, ae, bb)\\<rangle>;\n        ab \\<unlhd> ad;\n        binop (bop, v\\<^sub>1, v\\<^sub>2) = \\<lfloor>v\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a \\<unlhd> ad\n 10. \\<And>e\\<^sub>1 a aa b e ab ac ba bop e\\<^sub>2.\n        \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>e\\<^sub>1,\n   (a, aa, b)\\<rangle> \\<Rightarrow>\n  \\<langle>throw e,(ab, ac, ba)\\<rangle>;\n         a \\<unlhd> ab\\<rbrakk>\n        \\<Longrightarrow> a \\<unlhd> ab\nA total of 77 subgoals...", "qed (auto elim!: hext_trans)"], ["", "(*>*)"], ["", "subsection \"Initialization\""], ["", "lemma rinit\\<^sub>1_throw:\n \"P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw xa) ; Cs \\<leftarrow> e,(h, l, sh)\\<rangle> \\<Rightarrow> \\<langle>e',(h', l', sh')\\<rangle>\n    \\<Longrightarrow> e' = Throw xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw\n             xa) ; Cs \\<leftarrow> e,\n                                    (h, l, sh)\\<rangle> \\<Rightarrow>\n                                   \\<langle>e',\n                                    (h', l', sh')\\<rangle> \\<Longrightarrow>\n    e' = Throw xa", "apply(induct Cs arbitrary: D h l sh h' l' sh')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D h l sh h' l' sh'.\n       P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw\n                xa) ; [] \\<leftarrow> e,\n (h, l, sh)\\<rangle> \\<Rightarrow>\n\\<langle>e',(h', l', sh')\\<rangle> \\<Longrightarrow>\n       e' = Throw xa\n 2. \\<And>a Cs D h l sh h' l' sh'.\n       \\<lbrakk>\\<And>D h l sh h' l' sh'.\n                   P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw\n                            xa) ; Cs \\<leftarrow> e,\n             (h, l, sh)\\<rangle> \\<Rightarrow>\n            \\<langle>e',(h', l', sh')\\<rangle> \\<Longrightarrow>\n                   e' = Throw xa;\n        P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw\n                 xa) ; a # Cs \\<leftarrow> e,\n  (h, l, sh)\\<rangle> \\<Rightarrow>\n \\<langle>e',(h', l', sh')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> e' = Throw xa", "apply(drule eval\\<^sub>1_cases(20), auto elim: eval\\<^sub>1_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a Cs D h l sh h' l' sh'.\n       \\<lbrakk>\\<And>D h l sh h' l' sh'.\n                   P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw\n                            xa) ; Cs \\<leftarrow> e,\n             (h, l, sh)\\<rangle> \\<Rightarrow>\n            \\<langle>e',(h', l', sh')\\<rangle> \\<Longrightarrow>\n                   e' = Throw xa;\n        P\\<^sub>1 \\<turnstile>\\<^sub>1 \\<langle>RI (D,Throw\n                 xa) ; a # Cs \\<leftarrow> e,\n  (h, l, sh)\\<rangle> \\<Rightarrow>\n \\<langle>e',(h', l', sh')\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> e' = Throw xa", "apply(drule eval\\<^sub>1_cases(20), auto elim: eval\\<^sub>1_cases dest: eval\\<^sub>1_final_same simp: final_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rinit\\<^sub>1_throwE:\n\"P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw e) ; Cs \\<leftarrow> e\\<^sub>0,s\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\n   \\<Longrightarrow> \\<exists>a s\\<^sub>t. e' = throw a \\<and> P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow> \\<langle>throw a,s\\<^sub>t\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n     e) ; Cs \\<leftarrow> e\\<^sub>0,\n                            s\\<rangle> \\<Rightarrow>\n                           \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n    \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "proof(induct Cs arbitrary: C e s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C e s.\n       P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n        e) ; [] \\<leftarrow> e\\<^sub>0,\n                               s\\<rangle> \\<Rightarrow>\n                              \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n       \\<exists>a s\\<^sub>t.\n          e' = throw a \\<and>\n          P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                                 \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a Cs C e s.\n       \\<lbrakk>\\<And>C e s.\n                   P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n                    e) ; Cs \\<leftarrow> e\\<^sub>0,\n     s\\<rangle> \\<Rightarrow>\n    \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n                   \\<exists>a s\\<^sub>t.\n                      e' = throw a \\<and>\n                      P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n        s\\<rangle> \\<Rightarrow>\n       \\<langle>throw a,s\\<^sub>t\\<rangle>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n         e) ; a # Cs \\<leftarrow> e\\<^sub>0,\n                                s\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "case Nil"], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n   e) ; [] \\<leftarrow> e\\<^sub>0,\n                          s\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>C e s.\n       P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n        e) ; [] \\<leftarrow> e\\<^sub>0,\n                               s\\<rangle> \\<Rightarrow>\n                              \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n       \\<exists>a s\\<^sub>t.\n          e' = throw a \\<and>\n          P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                                 \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a Cs C e s.\n       \\<lbrakk>\\<And>C e s.\n                   P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n                    e) ; Cs \\<leftarrow> e\\<^sub>0,\n     s\\<rangle> \\<Rightarrow>\n    \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n                   \\<exists>a s\\<^sub>t.\n                      e' = throw a \\<and>\n                      P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n        s\\<rangle> \\<Rightarrow>\n       \\<langle>throw a,s\\<^sub>t\\<rangle>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n         e) ; a # Cs \\<leftarrow> e\\<^sub>0,\n                                s\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n   e) ; [] \\<leftarrow> e\\<^sub>0,\n                          s\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n   e) ; [] \\<leftarrow> e\\<^sub>0,\n                          s\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "proof(rule eval\\<^sub>1_cases(20)) \\<comment> \\<open> RI \\<close>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v h' l' sh' sfs i.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n  s\\<rangle> \\<Rightarrow>\n \\<langle>Val v,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT (if [] = [] then C\n        else last []) ([],True) \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Done)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>[] = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 3. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>[] = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "fix v h' l' sh'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v h' l' sh' sfs i.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n  s\\<rangle> \\<Rightarrow>\n \\<langle>Val v,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT (if [] = [] then C\n        else last []) ([],True) \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Done)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>[] = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 3. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>[] = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "assume \"P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow> \\<langle>Val v,(h', l', sh')\\<rangle>\""], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>\n\ngoal (3 subgoals):\n 1. \\<And>v h' l' sh' sfs i.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n  s\\<rangle> \\<Rightarrow>\n \\<langle>Val v,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT (if [] = [] then C\n        else last []) ([],True) \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Done)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>[] = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 3. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>[] = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "using eval\\<^sub>1_cases(17)"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>\n  \\<lbrakk>?P \\<turnstile>\\<^sub>1 \\<langle>throw ?e,\n                                    ?s\\<rangle> \\<Rightarrow>\n                                   \\<langle>?e',?s'\\<rangle>;\n   \\<And>a.\n      \\<lbrakk>?e' = Throw a;\n       ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                               \\<langle>addr a,?s'\\<rangle>\\<rbrakk>\n      \\<Longrightarrow> ?Pa;\n   \\<lbrakk>?e' = THROW NullPointer;\n    ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                            \\<langle>null,?s'\\<rangle>\\<rbrakk>\n   \\<Longrightarrow> ?Pa;\n   \\<And>e'.\n      \\<lbrakk>?e' = throw e';\n       ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw e',?s'\\<rangle>\\<rbrakk>\n      \\<Longrightarrow> ?Pa\\<rbrakk>\n  \\<Longrightarrow> ?Pa\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "by blast"], ["proof (state)\nthis:\n  \\<exists>a s\\<^sub>t.\n     e' = throw a \\<and>\n     P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                            \\<langle>throw a,s\\<^sub>t\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>[] = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>[] = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "qed(auto)"], ["proof (state)\nthis:\n  \\<exists>a s\\<^sub>t.\n     e' = throw a \\<and>\n     P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                            \\<langle>throw a,s\\<^sub>t\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>a Cs C e s.\n       \\<lbrakk>\\<And>C e s.\n                   P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n                    e) ; Cs \\<leftarrow> e\\<^sub>0,\n     s\\<rangle> \\<Rightarrow>\n    \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n                   \\<exists>a s\\<^sub>t.\n                      e' = throw a \\<and>\n                      P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n        s\\<rangle> \\<Rightarrow>\n       \\<langle>throw a,s\\<^sub>t\\<rangle>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n         e) ; a # Cs \\<leftarrow> e\\<^sub>0,\n                                s\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Cs C e s.\n       \\<lbrakk>\\<And>C e s.\n                   P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n                    e) ; Cs \\<leftarrow> e\\<^sub>0,\n     s\\<rangle> \\<Rightarrow>\n    \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n                   \\<exists>a s\\<^sub>t.\n                      e' = throw a \\<and>\n                      P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n        s\\<rangle> \\<Rightarrow>\n       \\<langle>throw a,s\\<^sub>t\\<rangle>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n         e) ; a # Cs \\<leftarrow> e\\<^sub>0,\n                                s\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "case (Cons C' Cs')"], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (?C,throw\n    ?e) ; Cs' \\<leftarrow> e\\<^sub>0,\n                          ?s\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n  \\<exists>a s\\<^sub>t.\n     e' = throw a \\<and>\n     P \\<turnstile>\\<^sub>1 \\<langle>throw ?e,?s\\<rangle> \\<Rightarrow>\n                            \\<langle>throw a,s\\<^sub>t\\<rangle>\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n   e) ; C' # Cs' \\<leftarrow> e\\<^sub>0,\n                          s\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>a Cs C e s.\n       \\<lbrakk>\\<And>C e s.\n                   P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n                    e) ; Cs \\<leftarrow> e\\<^sub>0,\n     s\\<rangle> \\<Rightarrow>\n    \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n                   \\<exists>a s\\<^sub>t.\n                      e' = throw a \\<and>\n                      P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n        s\\<rangle> \\<Rightarrow>\n       \\<langle>throw a,s\\<^sub>t\\<rangle>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n         e) ; a # Cs \\<leftarrow> e\\<^sub>0,\n                                s\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (C,throw\n   e) ; C' # Cs' \\<leftarrow> e\\<^sub>0,\n                          s\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "proof(rule eval\\<^sub>1_cases(20)) \\<comment> \\<open> RI \\<close>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v h' l' sh' sfs i.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n  s\\<rangle> \\<Rightarrow>\n \\<langle>Val v,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT (if C' # Cs' = [] then C\n        else last (C' # Cs')) (C' # Cs',True) \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Done)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>C' # Cs' = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 3. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "fix v h' l' sh'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v h' l' sh' sfs i.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n  s\\<rangle> \\<Rightarrow>\n \\<langle>Val v,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT (if C' # Cs' = [] then C\n        else last (C' # Cs')) (C' # Cs',True) \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Done)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>C' # Cs' = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 3. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "assume \"P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow> \\<langle>Val v,(h', l', sh')\\<rangle>\""], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>\n\ngoal (3 subgoals):\n 1. \\<And>v h' l' sh' sfs i.\n       \\<lbrakk>P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n  s\\<rangle> \\<Rightarrow>\n \\<langle>Val v,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>INIT (if C' # Cs' = [] then C\n        else last (C' # Cs')) (C' # Cs',True) \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Done)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>C' # Cs' = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 3. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "using eval\\<^sub>1_cases(17)"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>Val v,(h', l', sh')\\<rangle>\n  \\<lbrakk>?P \\<turnstile>\\<^sub>1 \\<langle>throw ?e,\n                                    ?s\\<rangle> \\<Rightarrow>\n                                   \\<langle>?e',?s'\\<rangle>;\n   \\<And>a.\n      \\<lbrakk>?e' = Throw a;\n       ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                               \\<langle>addr a,?s'\\<rangle>\\<rbrakk>\n      \\<Longrightarrow> ?Pa;\n   \\<lbrakk>?e' = THROW NullPointer;\n    ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                            \\<langle>null,?s'\\<rangle>\\<rbrakk>\n   \\<Longrightarrow> ?Pa;\n   \\<And>e'.\n      \\<lbrakk>?e' = throw e';\n       ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw e',?s'\\<rangle>\\<rbrakk>\n      \\<Longrightarrow> ?Pa\\<rbrakk>\n  \\<Longrightarrow> ?Pa\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "by blast"], ["proof (state)\nthis:\n  \\<exists>a s\\<^sub>t.\n     e' = throw a \\<and>\n     P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                            \\<langle>throw a,s\\<^sub>t\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>C' # Cs' = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>C' # Cs' = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "fix a h' l' sh' sfs i D Cs''"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>C' # Cs' = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "assume e''step: \"P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow> \\<langle>throw a,(h', l', sh')\\<rangle>\"\n       and shC: \"sh' C = \\<lfloor>(sfs, i)\\<rfloor>\"\n       and riD: \"P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw a) ; Cs'' \\<leftarrow> e\\<^sub>0,(h', l', sh'(C \\<mapsto> (sfs, Error)))\\<rangle> \\<Rightarrow> \\<langle>e',s'\\<rangle>\"\n       and \"C' # Cs' = D # Cs''\""], ["proof (state)\nthis:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a,(h', l', sh')\\<rangle>\n  sh' C = \\<lfloor>(sfs, i)\\<rfloor>\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n   a) ; Cs'' \\<leftarrow> e\\<^sub>0,\n                          (h', l', sh'(C \\<mapsto>\n                           (sfs, Error)))\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n  C' # Cs' = D # Cs''\n\ngoal (2 subgoals):\n 1. \\<And>a h' l' sh' sfs i D Cs.\n       \\<lbrakk>C' # Cs' = D # Cs;\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>;\n        P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n         a) ; Cs \\<leftarrow> e\\<^sub>0,\n                                (h', l', sh'(C \\<mapsto>\n                                 (sfs, Error)))\\<rangle> \\<Rightarrow>\n                               \\<langle>e',s'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>\n 2. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a,(h', l', sh')\\<rangle>\n  sh' C = \\<lfloor>(sfs, i)\\<rfloor>\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n   a) ; Cs'' \\<leftarrow> e\\<^sub>0,\n                          (h', l', sh'(C \\<mapsto>\n                           (sfs, Error)))\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n  C' # Cs' = D # Cs''", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a,(h', l', sh')\\<rangle>\n  sh' C = \\<lfloor>(sfs, i)\\<rfloor>\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n   a) ; Cs'' \\<leftarrow> e\\<^sub>0,\n                          (h', l', sh'(C \\<mapsto>\n                           (sfs, Error)))\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n  C' # Cs' = D # Cs''\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "using Cons.hyps eval\\<^sub>1_final eval\\<^sub>1_final_same"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                         \\<langle>throw a,(h', l', sh')\\<rangle>\n  sh' C = \\<lfloor>(sfs, i)\\<rfloor>\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (D,throw\n   a) ; Cs'' \\<leftarrow> e\\<^sub>0,\n                          (h', l', sh'(C \\<mapsto>\n                           (sfs, Error)))\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle>\n  C' # Cs' = D # Cs''\n  P \\<turnstile>\\<^sub>1 \\<langle>RI (?C,throw\n    ?e) ; Cs' \\<leftarrow> e\\<^sub>0,\n                          ?s\\<rangle> \\<Rightarrow>\n                         \\<langle>e',s'\\<rangle> \\<Longrightarrow>\n  \\<exists>a s\\<^sub>t.\n     e' = throw a \\<and>\n     P \\<turnstile>\\<^sub>1 \\<langle>throw ?e,?s\\<rangle> \\<Rightarrow>\n                            \\<langle>throw a,s\\<^sub>t\\<rangle>\n  ?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                          \\<langle>?e',?s'\\<rangle> \\<Longrightarrow>\n  final ?e'\n  \\<lbrakk>?P \\<turnstile>\\<^sub>1 \\<langle>?e,?s\\<rangle> \\<Rightarrow>\n                                   \\<langle>?e',?s'\\<rangle>;\n   final ?e\\<rbrakk>\n  \\<Longrightarrow> ?e = ?e' \\<and> ?s = ?s'\n\ngoal (1 subgoal):\n 1. \\<exists>a s\\<^sub>t.\n       e' = throw a \\<and>\n       P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                              \\<langle>throw a,s\\<^sub>t\\<rangle>", "by blast"], ["proof (state)\nthis:\n  \\<exists>a s\\<^sub>t.\n     e' = throw a \\<and>\n     P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                            \\<langle>throw a,s\\<^sub>t\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>a h' l' sh' sfs i.\n       \\<lbrakk>C' # Cs' = []; e' = throw a;\n        s' = (h', l', sh'(C \\<mapsto> (sfs, Error)));\n        P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                               \\<langle>throw a,(h', l', sh')\\<rangle>;\n        sh' C = \\<lfloor>(sfs, i)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s\\<^sub>t.\n                            e' = throw a \\<and>\n                            P \\<turnstile>\\<^sub>1 \\<langle>throw e,\n              s\\<rangle> \\<Rightarrow>\n             \\<langle>throw a,s\\<^sub>t\\<rangle>", "qed(simp)"], ["proof (state)\nthis:\n  \\<exists>a s\\<^sub>t.\n     e' = throw a \\<and>\n     P \\<turnstile>\\<^sub>1 \\<langle>throw e,s\\<rangle> \\<Rightarrow>\n                            \\<langle>throw a,s\\<^sub>t\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}