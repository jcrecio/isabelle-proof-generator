{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/Common/WellForm.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma class_wf: \n  \"\\<lbrakk>class P C = Some c; wf_prog wf_md P\\<rbrakk> \\<Longrightarrow> wf_cdecl wf_md P (C,c)\"", "lemma class_Object [simp]: \n  \"wf_prog wf_md P \\<Longrightarrow> \\<exists>C fs ms. class P Object = Some (C,fs,ms)\"", "lemma is_class_Object [simp]:\n  \"wf_prog wf_md P \\<Longrightarrow> is_class P Object\"", "lemma is_class_supclass:\nassumes wf: \"wf_prog wf_md P\" and sub: \"P \\<turnstile> C \\<preceq>\\<^sup>* D\"\nshows \"is_class P C \\<Longrightarrow> is_class P D\"", "lemma is_class_xcpt:\n  \"\\<lbrakk> C \\<in> sys_xcpts; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_class P C\"", "lemma subcls1_wfD:\nassumes sub1: \"P \\<turnstile> C \\<prec>\\<^sup>1 D\" and wf: \"wf_prog wf_md P\"\nshows \"D \\<noteq> C \\<and> (D,C) \\<notin> (subcls1 P)\\<^sup>+\"", "lemma wf_cdecl_supD: \n  \"\\<lbrakk>wf_cdecl wf_md P (C,D,r); C \\<noteq> Object\\<rbrakk> \\<Longrightarrow> is_class P D\"", "lemma subcls_asym:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> (D,C) \\<notin> (subcls1 P)\\<^sup>+\"", "lemma subcls_irrefl:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> C \\<noteq> D\"", "lemma acyclic_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)\"", "lemma wf_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)\"", "lemma single_valued_subcls1:\n  \"wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)\"", "lemma subcls_induct: \n  \"\\<lbrakk> wf_prog wf_md P; \\<And>C. \\<forall>D. (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow> Q D \\<Longrightarrow> Q C \\<rbrakk> \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"?A \\<Longrightarrow> PROP ?P \\<Longrightarrow> _\")", "lemma subcls1_induct_aux:\nassumes \"is_class P C\" and wf: \"wf_prog wf_md P\" and QObj: \"Q Object\"\nshows\n \"\\<lbrakk> \\<And>C D fs ms.\n    \\<lbrakk> C \\<noteq> Object; is_class P C; class P C = Some (D,fs,ms) \\<and>\n      wf_cdecl wf_md P (C,D,fs,ms) \\<and> P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and> is_class P D \\<and> Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"PROP ?P \\<Longrightarrow> _\")", "lemma subcls1_induct [consumes 2, case_names Object Subcls]:\n  \"\\<lbrakk> wf_prog wf_md P; is_class P C; Q Object;\n    \\<And>C D. \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D; is_class P D; Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\"", "lemma subcls_C_Object:\nassumes \"class\": \"is_class P C\" and wf: \"wf_prog wf_md P\"\nshows \"P \\<turnstile> C \\<preceq>\\<^sup>* Object\"", "lemma is_type_pTs:\nassumes \"wf_prog wf_md P\" and \"(C,S,fs,ms) \\<in> set P\" and \"(M,b,Ts,T,m) \\<in> set ms\"\nshows \"set Ts \\<subseteq> types P\"", "lemma wf_supercls_distinct_app:\nassumes wf:\"wf_prog wf_md P\"\n  and nObj: \"C \\<noteq> Object\" and cls: \"class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\"\n  and super: \"supercls_lst P (C#Cs)\" and dist: \"distinct (C#Cs)\"\nshows \"distinct (D#C#Cs)\"", "lemma sees_wf_mdecl:\nassumes wf: \"wf_prog wf_md P\" and sees: \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D\"\nshows \"wf_mdecl wf_md P D (M,b,Ts,T,m)\"", "lemma sees_method_mono [rule_format (no_asm)]: \nassumes sub: \"P \\<turnstile> C' \\<preceq>\\<^sup>* C\" and wf: \"wf_prog wf_md P\"\nshows \"\\<forall>D b Ts T m. P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'. P \\<turnstile> C' sees M,b:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\"\n(*<*)\n  (is \"\\<forall>D b Ts T m. ?P C D b Ts T m \\<longrightarrow> ?Q C' D b Ts T m\")", "lemma sees_method_mono2:\n  \"\\<lbrakk> P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D; P \\<turnstile> C' sees M,b':Ts'\\<rightarrow>T' = m' in D' \\<rbrakk>\n  \\<Longrightarrow> b = b' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\"", "lemma mdecls_visible:\nassumes wf: \"wf_prog wf_md P\" and \"class\": \"is_class P C\"\nshows \"\\<And>D fs ms. class P C = Some(D,fs,ms)\n         \\<Longrightarrow> \\<exists>Mm. P \\<turnstile> C sees_methods Mm \\<and> (\\<forall>(M,b,Ts,T,m) \\<in> set ms. Mm M = Some((b,Ts,T,m),C))\"", "lemma mdecl_visible:\nassumes wf: \"wf_prog wf_md P\" and C: \"(C,S,fs,ms) \\<in> set P\" and  m: \"(M,b,Ts,T,m) \\<in> set ms\"\nshows \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in C\"", "lemma Call_lemma:\nassumes sees: \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D\" and sub: \"P \\<turnstile> C' \\<preceq>\\<^sup>* C\" and wf: \"wf_prog wf_md P\"\nshows \"\\<exists>D' Ts' T' m'.\n       P \\<turnstile> C' sees M,b:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T \\<and> P \\<turnstile> C' \\<preceq>\\<^sup>* D'\n       \\<and> is_type P T' \\<and> (\\<forall>T\\<in>set Ts'. is_type P T) \\<and> wf_md P D' (M,b,Ts',T',m')\"", "lemma wf_prog_lift:\n  assumes wf: \"wf_prog (\\<lambda>P C bd. A P C bd) P\"\n  and rule:\n  \"\\<And>wf_md C M b Ts C T m bd.\n   wf_prog wf_md P \\<Longrightarrow>\n   P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in C \\<Longrightarrow>\n   set Ts \\<subseteq>  types P \\<Longrightarrow>\n   bd = (M,b,Ts,T,m) \\<Longrightarrow>\n   A P C bd \\<Longrightarrow>\n   B P C bd\"\n  shows \"wf_prog (\\<lambda>P C bd. B P C bd) P\"", "lemma wf_sees_clinit:\nassumes wf:\"wf_prog wf_md P\" and ex: \"class P C = Some a\"\nshows \"\\<exists>m. P \\<turnstile> C sees clinit,Static:[] \\<rightarrow> Void = m in C\"", "lemma wf_sees_clinit1:\nassumes wf:\"wf_prog wf_md P\" and ex: \"class P C = Some a\"\nand \"P \\<turnstile> C sees clinit,b:Ts \\<rightarrow> T = m in D\"\nshows \"b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C\"", "lemma wf_NonStatic_nclinit:\nassumes wf: \"wf_prog wf_md P\" and meth: \"P \\<turnstile> C sees M,NonStatic:Ts\\<rightarrow>T=(mxs,mxl,ins,xt) in D\"\nshows \"M \\<noteq> clinit\"", "lemma wf_Fields_Ex:\nassumes wf: \"wf_prog wf_md P\" and \"is_class P C\"\nshows \"\\<exists>FDTs. P \\<turnstile> C has_fields FDTs\"", "lemma has_fields_types:\n  \"\\<lbrakk> P \\<turnstile> C has_fields FDTs; (FD,b,T) \\<in> set FDTs; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\"", "lemma sees_field_is_type:\n  \"\\<lbrakk> P \\<turnstile> C sees F,b:T in D; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\"", "lemma wf_syscls:\n  \"set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P\"", "lemma wf_subcls_nCls:\nassumes wf: \"wf_prog wf_md P\" and ns: \"\\<not> is_class P C\"\nshows \"\\<lbrakk> P \\<turnstile> D \\<preceq>\\<^sup>* D'; D \\<noteq> C \\<rbrakk> \\<Longrightarrow> D' \\<noteq> C\"", "lemma wf_subcls_nCls':\nassumes wf: \"wf_prog wf_md P\" and ns: \"\\<not>is_class P C\\<^sub>0\"\nshows \"\\<And>cd D'. cd \\<in> set P \\<Longrightarrow> \\<not>P \\<turnstile> fst cd \\<preceq>\\<^sup>* C\\<^sub>0\"", "lemma wf_nclass_nsub:\n \"\\<lbrakk> wf_prog wf_md P; is_class P C; \\<not>is_class P C' \\<rbrakk> \\<Longrightarrow> \\<not>P \\<turnstile> C \\<preceq>\\<^sup>* C'\"", "lemma wf_sys_xcpt_nsub_Start:\nassumes wf: \"wf_prog wf_md P\" and ns: \"\\<not>is_class P Start\" and sx: \"C \\<in> sys_xcpts\"\nshows \"\\<not>P \\<turnstile> C \\<preceq>\\<^sup>* Start\""], "translations": [["", "lemma class_wf: \n  \"\\<lbrakk>class P C = Some c; wf_prog wf_md P\\<rbrakk> \\<Longrightarrow> wf_cdecl wf_md P (C,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C = \\<lfloor>c\\<rfloor>; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> wf_cdecl wf_md P (C, c)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C = \\<lfloor>c\\<rfloor>; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> wf_cdecl wf_md P (C, c)", "by (unfold wf_prog_def class_def) (fast dest: map_of_SomeD)"], ["", "(*>*)"], ["", "lemma class_Object [simp]: \n  \"wf_prog wf_md P \\<Longrightarrow> \\<exists>C fs ms. class P Object = Some (C,fs,ms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow>\n    \\<exists>C fs ms. class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow>\n    \\<exists>C fs ms. class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>", "by (unfold wf_prog_def wf_syscls_def class_def)\n        (auto simp: map_of_SomeI)"], ["", "(*>*)"], ["", "lemma is_class_Object [simp]:\n  \"wf_prog wf_md P \\<Longrightarrow> is_class P Object\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> is_class P Object", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> is_class P Object", "by (simp add: is_class_def)"], ["", "(*>*)"], ["", "lemma is_class_supclass:\nassumes wf: \"wf_prog wf_md P\" and sub: \"P \\<turnstile> C \\<preceq>\\<^sup>* D\"\nshows \"is_class P C \\<Longrightarrow> is_class P D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P C \\<Longrightarrow> is_class P D", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P C \\<Longrightarrow> is_class P D", "using sub"], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* D\n\ngoal (1 subgoal):\n 1. is_class P C \\<Longrightarrow> is_class P D", "proof(induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_class P C \\<Longrightarrow> is_class P C\n 2. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        is_class P C \\<Longrightarrow> is_class P y; is_class P C\\<rbrakk>\n       \\<Longrightarrow> is_class P z", "case step"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<preceq>\\<^sup>* y_\n  P \\<turnstile> y_ \\<prec>\\<^sup>1 z_\n  is_class P C \\<Longrightarrow> is_class P y_\n  is_class P C\n\ngoal (2 subgoals):\n 1. is_class P C \\<Longrightarrow> is_class P C\n 2. \\<And>y z.\n       \\<lbrakk>P \\<turnstile> C \\<preceq>\\<^sup>* y;\n        P \\<turnstile> y \\<prec>\\<^sup>1 z;\n        is_class P C \\<Longrightarrow> is_class P y; is_class P C\\<rbrakk>\n       \\<Longrightarrow> is_class P z", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* y_\n  P \\<turnstile> y_ \\<prec>\\<^sup>1 z_\n  is_class P C \\<Longrightarrow> is_class P y_\n  is_class P C", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* y_\n  P \\<turnstile> y_ \\<prec>\\<^sup>1 z_\n  is_class P C \\<Longrightarrow> is_class P y_\n  is_class P C\n\ngoal (1 subgoal):\n 1. is_class P z_", "by(auto simp:wf_cdecl_def is_class_def dest!:class_wf[OF _ wf] subcls1D)"], ["proof (state)\nthis:\n  is_class P z_\n\ngoal (1 subgoal):\n 1. is_class P C \\<Longrightarrow> is_class P C", "qed simp"], ["", "(*>*)"], ["", "lemma is_class_xcpt:\n  \"\\<lbrakk> C \\<in> sys_xcpts; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_class P C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> sys_xcpts; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_class P C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> sys_xcpts; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_class P C", "by (fastforce intro!: map_of_SomeI\n              simp add: wf_prog_def wf_syscls_def is_class_def class_def)"], ["", "(*>*)"], ["", "lemma subcls1_wfD:\nassumes sub1: \"P \\<turnstile> C \\<prec>\\<^sup>1 D\" and wf: \"wf_prog wf_md P\"\nshows \"D \\<noteq> C \\<and> (D,C) \\<notin> (subcls1 P)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "obtain fs ms where \"C \\<noteq> Object\" and cls: \"class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fs ms.\n        \\<lbrakk>C \\<noteq> Object;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using subcls1D[OF sub1]"], ["proof (prove)\nusing this:\n  C \\<noteq> Object \\<and>\n  (\\<exists>fs ms. class P C = \\<lfloor>(D, fs, ms)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. (\\<And>fs ms.\n        \\<lbrakk>C \\<noteq> Object;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarify"], ["proof (state)\nthis:\n  C \\<noteq> Object\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "then"], ["proof (chain)\npicking this:\n  C \\<noteq> Object\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  C \\<noteq> Object\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "using wf class_wf[OF cls wf] r_into_trancl[OF sub1]"], ["proof (prove)\nusing this:\n  C \\<noteq> Object\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  wf_prog wf_md P\n  wf_cdecl wf_md P (C, D, fs, ms)\n  (C, D) \\<in> (subcls1 P)\\<^sup>+\n\ngoal (1 subgoal):\n 1. D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "by(force simp add: wf_cdecl_def reflcl_trancl [THEN sym]\n             simp del: reflcl_trancl)"], ["proof (state)\nthis:\n  D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma wf_cdecl_supD: \n  \"\\<lbrakk>wf_cdecl wf_md P (C,D,r); C \\<noteq> Object\\<rbrakk> \\<Longrightarrow> is_class P D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_cdecl wf_md P (C, D, r); C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> is_class P D", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_cdecl wf_md P (C, D, r); C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> is_class P D", "by (auto simp: wf_cdecl_def)"], ["", "(*>*)"], ["", "lemma subcls_asym:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> (D,C) \\<notin> (subcls1 P)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (D, C) \\<notin> (subcls1 P)\\<^sup>+", "by(erule tranclE; fast dest!: subcls1_wfD intro: trancl_trans)"], ["", "(*>*)"], ["", "lemma subcls_irrefl:\n  \"\\<lbrakk> wf_prog wf_md P; (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<rbrakk> \\<Longrightarrow> C \\<noteq> D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> C \\<noteq> D", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; (C, D) \\<in> (subcls1 P)\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> C \\<noteq> D", "by (erule trancl_trans_induct) (auto dest: subcls1_wfD subcls_asym)"], ["", "(*>*)"], ["", "lemma acyclic_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> acyclic (subcls1 P)", "by (unfold acyclic_def) (fast dest: subcls_irrefl)"], ["", "(*>*)"], ["", "lemma wf_subcls1:\n  \"wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "assume wf: \"wf_prog wf_md P\""], ["proof (state)\nthis:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "have \"finite (subcls1 P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (subcls1 P)", "by(rule finite_subcls1)"], ["proof (state)\nthis:\n  finite (subcls1 P)\n\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "then"], ["proof (chain)\npicking this:\n  finite (subcls1 P)", "have fin': \"finite ((subcls1 P)\\<inverse>)\""], ["proof (prove)\nusing this:\n  finite (subcls1 P)\n\ngoal (1 subgoal):\n 1. finite ((subcls1 P)\\<inverse>)", "by(subst finite_converse)"], ["proof (state)\nthis:\n  finite ((subcls1 P)\\<inverse>)\n\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "from wf"], ["proof (chain)\npicking this:\n  wf_prog wf_md P", "have \"acyclic (subcls1 P)\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. acyclic (subcls1 P)", "by(rule acyclic_subcls1)"], ["proof (state)\nthis:\n  acyclic (subcls1 P)\n\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "then"], ["proof (chain)\npicking this:\n  acyclic (subcls1 P)", "have acyc': \"acyclic ((subcls1 P)\\<inverse>)\""], ["proof (prove)\nusing this:\n  acyclic (subcls1 P)\n\ngoal (1 subgoal):\n 1. acyclic ((subcls1 P)\\<inverse>)", "by (subst acyclic_converse)"], ["proof (state)\nthis:\n  acyclic ((subcls1 P)\\<inverse>)\n\ngoal (1 subgoal):\n 1. wf_prog wf_md P \\<Longrightarrow> wf ((subcls1 P)\\<inverse>)", "from fin' acyc'"], ["proof (chain)\npicking this:\n  finite ((subcls1 P)\\<inverse>)\n  acyclic ((subcls1 P)\\<inverse>)", "show ?thesis"], ["proof (prove)\nusing this:\n  finite ((subcls1 P)\\<inverse>)\n  acyclic ((subcls1 P)\\<inverse>)\n\ngoal (1 subgoal):\n 1. wf ((subcls1 P)\\<inverse>)", "by (rule finite_acyclic_wf)"], ["proof (state)\nthis:\n  wf ((subcls1 P)\\<inverse>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma single_valued_subcls1:\n  \"wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog wf_md G \\<Longrightarrow> single_valued (subcls1 G)", "by(auto simp:wf_prog_def distinct_fst_def single_valued_def dest!:subcls1D)"], ["", "(*>*)"], ["", "lemma subcls_induct: \n  \"\\<lbrakk> wf_prog wf_md P; \\<And>C. \\<forall>D. (C,D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow> Q D \\<Longrightarrow> Q C \\<rbrakk> \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"?A \\<Longrightarrow> PROP ?P \\<Longrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "assume p: \"PROP ?P\""], ["proof (state)\nthis:\n  \\<forall>D.\n     (?C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n     Q D \\<Longrightarrow>\n  Q ?C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "assume ?A"], ["proof (state)\nthis:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "then"], ["proof (chain)\npicking this:\n  wf_prog wf_md P", "have wf: \"wf_prog wf_md P\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. wf_prog wf_md P", "by assumption"], ["proof (state)\nthis:\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "have wf':\"wf (((subcls1 P)\\<^sup>+)\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (((subcls1 P)\\<^sup>+)\\<inverse>)", "using wf_trancl[OF wf_subcls1[OF wf]]"], ["proof (prove)\nusing this:\n  wf (((subcls1 P)\\<inverse>)\\<^sup>+)\n\ngoal (1 subgoal):\n 1. wf (((subcls1 P)\\<^sup>+)\\<inverse>)", "by(simp only: trancl_converse)"], ["proof (state)\nthis:\n  wf (((subcls1 P)\\<^sup>+)\\<inverse>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<And>C.\n        \\<forall>D.\n           (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n           Q D \\<Longrightarrow>\n        Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q C", "using wf_induct[where a = C and P = Q, OF wf' p]"], ["proof (prove)\nusing this:\n  (\\<And>x.\n      \\<forall>y.\n         (y, x) \\<in> ((subcls1 P)\\<^sup>+)\\<inverse> \\<longrightarrow>\n         Q y \\<Longrightarrow>\n      \\<forall>D.\n         (x, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n         Q D) \\<Longrightarrow>\n  Q C\n\ngoal (1 subgoal):\n 1. Q C", "by simp"], ["proof (state)\nthis:\n  Q C\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma subcls1_induct_aux:\nassumes \"is_class P C\" and wf: \"wf_prog wf_md P\" and QObj: \"Q Object\"\nshows\n \"\\<lbrakk> \\<And>C D fs ms.\n    \\<lbrakk> C \\<noteq> Object; is_class P C; class P C = Some (D,fs,ms) \\<and>\n      wf_cdecl wf_md P (C,D,fs,ms) \\<and> P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and> is_class P D \\<and> Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\"\n(*<*)\n  (is \"PROP ?P \\<Longrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C) \\<Longrightarrow>\n    Q C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C) \\<Longrightarrow>\n    Q C", "assume p: \"PROP ?P\""], ["proof (state)\nthis:\n  \\<lbrakk>?C \\<noteq> Object; is_class P ?C;\n   class P ?C = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<and>\n   wf_cdecl wf_md P (?C, ?D, ?fs, ?ms) \\<and>\n   P \\<turnstile> ?C \\<prec>\\<^sup>1 ?D \\<and>\n   is_class P ?D \\<and> Q ?D\\<rbrakk>\n  \\<Longrightarrow> Q ?C\n\ngoal (1 subgoal):\n 1. (\\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C) \\<Longrightarrow>\n    Q C", "have \"class P C \\<noteq> None \\<longrightarrow> Q C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class P C \\<noteq> None \\<longrightarrow> Q C", "proof(induct rule: subcls_induct[OF wf])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<forall>D.\n          (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n          class P D \\<noteq> None \\<longrightarrow> Q D \\<Longrightarrow>\n       class P C \\<noteq> None \\<longrightarrow> Q C", "case (1 C)"], ["proof (state)\nthis:\n  \\<forall>D.\n     (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n     class P D \\<noteq> None \\<longrightarrow> Q D\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<forall>D.\n          (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n          class P D \\<noteq> None \\<longrightarrow> Q D \\<Longrightarrow>\n       class P C \\<noteq> None \\<longrightarrow> Q C", "have \"class P C \\<noteq> None \\<Longrightarrow> Q C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class P C \\<noteq> None \\<Longrightarrow> Q C", "proof(cases \"C = Object\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>class P C \\<noteq> None; C = Object\\<rbrakk>\n    \\<Longrightarrow> Q C\n 2. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "case True"], ["proof (state)\nthis:\n  C = Object\n\ngoal (2 subgoals):\n 1. \\<lbrakk>class P C \\<noteq> None; C = Object\\<rbrakk>\n    \\<Longrightarrow> Q C\n 2. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "then"], ["proof (chain)\npicking this:\n  C = Object", "show ?thesis"], ["proof (prove)\nusing this:\n  C = Object\n\ngoal (1 subgoal):\n 1. Q C", "using QObj"], ["proof (prove)\nusing this:\n  C = Object\n  Q Object\n\ngoal (1 subgoal):\n 1. Q C", "by fast"], ["proof (state)\nthis:\n  Q C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "case False"], ["proof (state)\nthis:\n  C \\<noteq> Object\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "assume nNone: \"class P C \\<noteq> None\""], ["proof (state)\nthis:\n  class P C \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "then"], ["proof (chain)\npicking this:\n  class P C \\<noteq> None", "have is_cls: \"is_class P C\""], ["proof (prove)\nusing this:\n  class P C \\<noteq> None\n\ngoal (1 subgoal):\n 1. is_class P C", "by(simp add: is_class_def)"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "obtain D fs ms where cls: \"class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D fs ms.\n        class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using nNone"], ["proof (prove)\nusing this:\n  class P C \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>D fs ms.\n        class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by safe"], ["proof (state)\nthis:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "also"], ["proof (state)\nthis:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "have wfC: \"wf_cdecl wf_md P (C, D, fs, ms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_cdecl wf_md P (C, D, fs, ms)", "by(rule class_wf[OF cls wf])"], ["proof (state)\nthis:\n  wf_cdecl wf_md P (C, D, fs, ms)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "moreover"], ["proof (state)\nthis:\n  wf_cdecl wf_md P (C, D, fs, ms)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "have D: \"is_class P D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_class P D", "by(rule wf_cdecl_supD[OF wfC False])"], ["proof (state)\nthis:\n  is_class P D\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "moreover"], ["proof (state)\nthis:\n  is_class P D\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "have \"P \\<turnstile> C \\<prec>\\<^sup>1 D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<prec>\\<^sup>1 D", "by(rule subcls1I[OF cls False])"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<prec>\\<^sup>1 D\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "moreover"], ["proof (state)\nthis:\n  P \\<turnstile> C \\<prec>\\<^sup>1 D\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "have \"class P D \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class P D \\<noteq> None", "using D"], ["proof (prove)\nusing this:\n  is_class P D\n\ngoal (1 subgoal):\n 1. class P D \\<noteq> None", "by(simp add: is_class_def)"], ["proof (state)\nthis:\n  class P D \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>class P C \\<noteq> None; C \\<noteq> Object\\<rbrakk>\n    \\<Longrightarrow> Q C", "ultimately"], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  wf_cdecl wf_md P (C, D, fs, ms)\n  is_class P D\n  P \\<turnstile> C \\<prec>\\<^sup>1 D\n  class P D \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  wf_cdecl wf_md P (C, D, fs, ms)\n  is_class P D\n  P \\<turnstile> C \\<prec>\\<^sup>1 D\n  class P D \\<noteq> None\n\ngoal (1 subgoal):\n 1. Q C", "using 1"], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  wf_cdecl wf_md P (C, D, fs, ms)\n  is_class P D\n  P \\<turnstile> C \\<prec>\\<^sup>1 D\n  class P D \\<noteq> None\n  \\<forall>D.\n     (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n     class P D \\<noteq> None \\<longrightarrow> Q D\n\ngoal (1 subgoal):\n 1. Q C", "by (auto intro: p[OF False is_cls])"], ["proof (state)\nthis:\n  Q C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  class P C \\<noteq> None \\<Longrightarrow> Q C\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<forall>D.\n          (C, D) \\<in> (subcls1 P)\\<^sup>+ \\<longrightarrow>\n          class P D \\<noteq> None \\<longrightarrow> Q D \\<Longrightarrow>\n       class P C \\<noteq> None \\<longrightarrow> Q C", "then"], ["proof (chain)\npicking this:\n  class P C \\<noteq> None \\<Longrightarrow> Q C", "show \"class P C \\<noteq> None \\<longrightarrow> Q C\""], ["proof (prove)\nusing this:\n  class P C \\<noteq> None \\<Longrightarrow> Q C\n\ngoal (1 subgoal):\n 1. class P C \\<noteq> None \\<longrightarrow> Q C", "by simp"], ["proof (state)\nthis:\n  class P C \\<noteq> None \\<longrightarrow> Q C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  class P C \\<noteq> None \\<longrightarrow> Q C\n\ngoal (1 subgoal):\n 1. (\\<And>C D fs ms.\n        \\<lbrakk>C \\<noteq> Object; is_class P C;\n         class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<and>\n         wf_cdecl wf_md P (C, D, fs, ms) \\<and>\n         P \\<turnstile> C \\<prec>\\<^sup>1 D \\<and>\n         is_class P D \\<and> Q D\\<rbrakk>\n        \\<Longrightarrow> Q C) \\<Longrightarrow>\n    Q C", "thus ?thesis"], ["proof (prove)\nusing this:\n  class P C \\<noteq> None \\<longrightarrow> Q C\n\ngoal (1 subgoal):\n 1. Q C", "using assms"], ["proof (prove)\nusing this:\n  class P C \\<noteq> None \\<longrightarrow> Q C\n  is_class P C\n  wf_prog wf_md P\n  Q Object\n\ngoal (1 subgoal):\n 1. Q C", "by(unfold is_class_def) simp"], ["proof (state)\nthis:\n  Q C\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)\n\n(* FIXME can't we prove this one directly?? *)"], ["", "lemma subcls1_induct [consumes 2, case_names Object Subcls]:\n  \"\\<lbrakk> wf_prog wf_md P; is_class P C; Q Object;\n    \\<And>C D. \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D; is_class P D; Q D\\<rbrakk> \\<Longrightarrow> Q C \\<rbrakk>\n  \\<Longrightarrow> Q C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C; Q Object;\n     \\<And>C D.\n        \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n         is_class P D; Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C; Q Object;\n     \\<And>C D.\n        \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n         is_class P D; Q D\\<rbrakk>\n        \\<Longrightarrow> Q C\\<rbrakk>\n    \\<Longrightarrow> Q C", "by (erule (2) subcls1_induct_aux) blast"], ["", "(*>*)"], ["", "lemma subcls_C_Object:\nassumes \"class\": \"is_class P C\" and wf: \"wf_prog wf_md P\"\nshows \"P \\<turnstile> C \\<preceq>\\<^sup>* Object\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* Object", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* Object", "using wf \"class\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  is_class P C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C \\<preceq>\\<^sup>* Object", "proof(induct rule: subcls1_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<turnstile> Object \\<preceq>\\<^sup>* Object\n 2. \\<And>C D.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D; P \\<turnstile> D \\<preceq>\\<^sup>* Object\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* Object", "case Subcls"], ["proof (state)\nthis:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  P \\<turnstile> D_ \\<preceq>\\<^sup>* Object\n\ngoal (2 subgoals):\n 1. P \\<turnstile> Object \\<preceq>\\<^sup>* Object\n 2. \\<And>C D.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D; P \\<turnstile> D \\<preceq>\\<^sup>* Object\\<rbrakk>\n       \\<Longrightarrow> P \\<turnstile> C \\<preceq>\\<^sup>* Object", "then"], ["proof (chain)\npicking this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  P \\<turnstile> D_ \\<preceq>\\<^sup>* Object", "show ?case"], ["proof (prove)\nusing this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  P \\<turnstile> D_ \\<preceq>\\<^sup>* Object\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C_ \\<preceq>\\<^sup>* Object", "by(simp add: converse_rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  P \\<turnstile> C_ \\<preceq>\\<^sup>* Object\n\ngoal (1 subgoal):\n 1. P \\<turnstile> Object \\<preceq>\\<^sup>* Object", "qed fast"], ["", "(*>*)"], ["", "lemma is_type_pTs:\nassumes \"wf_prog wf_md P\" and \"(C,S,fs,ms) \\<in> set P\" and \"(M,b,Ts,T,m) \\<in> set ms\"\nshows \"set Ts \\<subseteq> types P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Ts \\<subseteq> types P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set Ts \\<subseteq> types P", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "from assms"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, b, Ts, T, m) \\<in> set ms", "have \"wf_mdecl wf_md P C (M,b,Ts,T,m)\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, b, Ts, T, m) \\<in> set ms\n\ngoal (1 subgoal):\n 1. wf_mdecl wf_md P C (M, b, Ts, T, m)", "by (unfold wf_prog_def wf_cdecl_def) auto"], ["proof (state)\nthis:\n  wf_mdecl wf_md P C (M, b, Ts, T, m)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "hence \"\\<forall>t \\<in> set Ts. is_type P t\""], ["proof (prove)\nusing this:\n  wf_mdecl wf_md P C (M, b, Ts, T, m)\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set Ts. is_type P t", "by (unfold wf_mdecl_def) auto"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set Ts. is_type P t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "moreover"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set Ts. is_type P t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "assume \"t \\<in> set Ts\""], ["proof (state)\nthis:\n  t \\<in> set Ts\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>set Ts. is_type P t\n  t \\<in> set Ts", "have \"is_type P t\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set Ts. is_type P t\n  t \\<in> set Ts\n\ngoal (1 subgoal):\n 1. is_type P t", "by blast"], ["proof (state)\nthis:\n  is_type P t\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Ts \\<Longrightarrow> x \\<in> types P", "thus \"t \\<in> types P\""], ["proof (prove)\nusing this:\n  is_type P t\n\ngoal (1 subgoal):\n 1. t \\<in> types P", ".."], ["proof (state)\nthis:\n  t \\<in> types P\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma wf_supercls_distinct_app:\nassumes wf:\"wf_prog wf_md P\"\n  and nObj: \"C \\<noteq> Object\" and cls: \"class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\"\n  and super: \"supercls_lst P (C#Cs)\" and dist: \"distinct (C#Cs)\"\nshows \"distinct (D#C#Cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (D # C # Cs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct (D # C # Cs)", "have \"\\<not> P \\<turnstile> D \\<preceq>\\<^sup>* C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (D, C) \\<notin> (subcls1 P)\\<^sup>*", "using subcls1_wfD[OF subcls1I[OF cls nObj] wf]"], ["proof (prove)\nusing this:\n  D \\<noteq> C \\<and> (D, C) \\<notin> (subcls1 P)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (D, C) \\<notin> (subcls1 P)\\<^sup>*", "by (simp add: rtrancl_eq_or_trancl)"], ["proof (state)\nthis:\n  (D, C) \\<notin> (subcls1 P)\\<^sup>*\n\ngoal (1 subgoal):\n 1. distinct (D # C # Cs)", "then"], ["proof (chain)\npicking this:\n  (D, C) \\<notin> (subcls1 P)\\<^sup>*", "show ?thesis"], ["proof (prove)\nusing this:\n  (D, C) \\<notin> (subcls1 P)\\<^sup>*\n\ngoal (1 subgoal):\n 1. distinct (D # C # Cs)", "using assms"], ["proof (prove)\nusing this:\n  (D, C) \\<notin> (subcls1 P)\\<^sup>*\n  wf_prog wf_md P\n  C \\<noteq> Object\n  class P C = \\<lfloor>(D, fs, ms)\\<rfloor>\n  supercls_lst P (C # Cs)\n  distinct (C # Cs)\n\ngoal (1 subgoal):\n 1. distinct (D # C # Cs)", "by auto"], ["proof (state)\nthis:\n  distinct (D # C # Cs)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open> Well-formedness and method lookup \\<close>"], ["", "lemma sees_wf_mdecl:\nassumes wf: \"wf_prog wf_md P\" and sees: \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D\"\nshows \"wf_mdecl wf_md P D (M,b,Ts,T,m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_mdecl wf_md P D (M, b, Ts, T, m)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_mdecl wf_md P D (M, b, Ts, T, m)", "using wf visible_method_exists[OF sees]"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  \\<exists>D' fs ms.\n     class P D = \\<lfloor>(D', fs, ms)\\<rfloor> \\<and>\n     map_of ms M = \\<lfloor>(b, Ts, T, m)\\<rfloor>\n\ngoal (1 subgoal):\n 1. wf_mdecl wf_md P D (M, b, Ts, T, m)", "proof(cases b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_prog wf_md P;\n     \\<exists>D' fs ms.\n        class P D = \\<lfloor>(D', fs, ms)\\<rfloor> \\<and>\n        map_of ms M = \\<lfloor>(b, Ts, T, m)\\<rfloor>;\n     b = Static\\<rbrakk>\n    \\<Longrightarrow> wf_mdecl wf_md P D (M, b, Ts, T, m)\n 2. \\<lbrakk>wf_prog wf_md P;\n     \\<exists>D' fs ms.\n        class P D = \\<lfloor>(D', fs, ms)\\<rfloor> \\<and>\n        map_of ms M = \\<lfloor>(b, Ts, T, m)\\<rfloor>;\n     b = NonStatic\\<rbrakk>\n    \\<Longrightarrow> wf_mdecl wf_md P D (M, b, Ts, T, m)", "qed (fastforce simp:wf_cdecl_def dest!:class_wf dest:map_of_SomeD)+"], ["", "(*>*)"], ["", "lemma sees_method_mono [rule_format (no_asm)]: \nassumes sub: \"P \\<turnstile> C' \\<preceq>\\<^sup>* C\" and wf: \"wf_prog wf_md P\"\nshows \"\\<forall>D b Ts T m. P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'. P \\<turnstile> C' sees M,b:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\"\n(*<*)\n  (is \"\\<forall>D b Ts T m. ?P C D b Ts T m \\<longrightarrow> ?Q C' D b Ts T m\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "proof(rule disjE[OF rtranclD[OF sub]])"], ["proof (state)\ngoal (2 subgoals):\n 1. C' = C \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n 2. C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+ \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "assume \"C' = C\""], ["proof (state)\nthis:\n  C' = C\n\ngoal (2 subgoals):\n 1. C' = C \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n 2. C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+ \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "then"], ["proof (chain)\npicking this:\n  C' = C", "show ?thesis"], ["proof (prove)\nusing this:\n  C' = C\n\ngoal (1 subgoal):\n 1. \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "using assms"], ["proof (prove)\nusing this:\n  C' = C\n  P \\<turnstile> C' \\<preceq>\\<^sup>* C\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>D b Ts T m.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n\ngoal (1 subgoal):\n 1. C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+ \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+ \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "assume \"C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+\""], ["proof (state)\nthis:\n  C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+\n\ngoal (1 subgoal):\n 1. C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+ \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "then"], ["proof (chain)\npicking this:\n  C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+", "have neq: \"C' \\<noteq> C\" and subcls1: \"(C', C) \\<in> (subcls1 P)\\<^sup>+\""], ["proof (prove)\nusing this:\n  C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+\n\ngoal (1 subgoal):\n 1. C' \\<noteq> C &&& (C', C) \\<in> (subcls1 P)\\<^sup>+", "by simp+"], ["proof (state)\nthis:\n  C' \\<noteq> C\n  (C', C) \\<in> (subcls1 P)\\<^sup>+\n\ngoal (1 subgoal):\n 1. C' \\<noteq> C \\<and> (C', C) \\<in> (subcls1 P)\\<^sup>+ \\<Longrightarrow>\n    \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>D b Ts T m.\n       P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "proof(induct rule: trancl_trans_induct[OF subcls1])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)\n 2. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D b Ts T m.\n                            P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "case (2 x y z)"], ["proof (state)\nthis:\n  (x, y) \\<in> (subcls1 P)\\<^sup>+\n  \\<forall>D b Ts T m.\n     P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n  (y, z) \\<in> (subcls1 P)\\<^sup>+\n  \\<forall>D b Ts T m.\n     P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)\n 2. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D b Ts T m.\n                            P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> (subcls1 P)\\<^sup>+\n  \\<forall>D b Ts T m.\n     P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n  (y, z) \\<in> (subcls1 P)\\<^sup>+\n  \\<forall>D b Ts T m.\n     P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "have zy: \"\\<And>D b Ts T m. ?P z D b Ts T m \\<Longrightarrow> ?Q y D b Ts T m\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> (subcls1 P)\\<^sup>+\n  \\<forall>D b Ts T m.\n     P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n  (y, z) \\<in> (subcls1 P)\\<^sup>+\n  \\<forall>D b Ts T m.\n     P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "by blast"], ["proof (state)\nthis:\n  P \\<turnstile> z sees M, ?b :  ?Ts\\<rightarrow>?T = ?m in ?D \\<Longrightarrow>\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> y sees M, ?b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> ?Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> ?T\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)\n 2. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D b Ts T m.\n                            P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "have \"\\<And>D b Ts T m. ?P z D b Ts T m \\<Longrightarrow> ?Q x D b Ts T m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "fix D b Ts T m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "assume P: \"?P z D b Ts T m\""], ["proof (state)\nthis:\n  P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D", "show \"?Q x D b Ts T m\""], ["proof (prove)\nusing this:\n  P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "using zy[OF P] 2(2)"], ["proof (prove)\nusing this:\n  P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n  \\<forall>D b Ts T m.\n     P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "by(fast elim: widen_trans widens_trans)"], ["proof (state)\nthis:\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<turnstile> z sees M, ?b :  ?Ts\\<rightarrow>?T = ?m in ?D \\<Longrightarrow>\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, ?b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> ?Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> ?T\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)\n 2. \\<And>x y z.\n       \\<lbrakk>(x, y) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T);\n        (y, z) \\<in> (subcls1 P)\\<^sup>+;\n        \\<forall>D b Ts T m.\n           P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n           (\\<exists>D' Ts' T' m'.\n               P \\<turnstile> y sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n               P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n               P \\<turnstile> T' \\<le> T)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>D b Ts T m.\n                            P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n                            (\\<exists>D' Ts' T' m'.\n                                P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n                                P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                                P \\<turnstile> T' \\<le> T)", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> z sees M, ?b :  ?Ts\\<rightarrow>?T = ?m in ?D \\<Longrightarrow>\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, ?b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> ?Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> ?T", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile> z sees M, ?b :  ?Ts\\<rightarrow>?T = ?m in ?D \\<Longrightarrow>\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, ?b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> ?Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> ?T\n\ngoal (1 subgoal):\n 1. \\<forall>D b Ts T m.\n       P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "by blast"], ["proof (state)\nthis:\n  \\<forall>D b Ts T m.\n     P \\<turnstile> z sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)", "case (1 x y)"], ["proof (state)\nthis:\n  P \\<turnstile> x \\<prec>\\<^sup>1 y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)", "have \"\\<And>D b Ts T m. ?P y D b Ts T m \\<Longrightarrow> ?Q x D b Ts T m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "fix D b Ts T m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "assume P: \"?P y D b Ts T m\""], ["proof (state)\nthis:\n  P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D", "obtain Mm where sees: \"P \\<turnstile> y sees_methods Mm\" and\n                           M: \"Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>\""], ["proof (prove)\nusing this:\n  P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D\n\ngoal (1 subgoal):\n 1. (\\<And>Mm.\n        \\<lbrakk>P \\<turnstile> y sees_methods Mm;\n         Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp:Method_def)"], ["proof (state)\nthis:\n  P \\<turnstile> y sees_methods Mm\n  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "obtain fs ms where nObj: \"x \\<noteq> Object\" and\n                         cls: \"class P x = \\<lfloor>(y, fs, ms)\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fs ms.\n        \\<lbrakk>x \\<noteq> Object;\n         class P x = \\<lfloor>(y, fs, ms)\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using subcls1D[OF 1]"], ["proof (prove)\nusing this:\n  x \\<noteq> Object \\<and>\n  (\\<exists>fs ms. class P x = \\<lfloor>(y, fs, ms)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. (\\<And>fs ms.\n        \\<lbrakk>x \\<noteq> Object;\n         class P x = \\<lfloor>(y, fs, ms)\\<rfloor>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["proof (state)\nthis:\n  x \\<noteq> Object\n  class P x = \\<lfloor>(y, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "have x_meth: \"P \\<turnstile> x sees_methods Mm ++ (map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> x sees_methods Mm ++\n                                  (map_option (\\<lambda>m. (m, x)) \\<circ>\n                                   map_of ms)", "using sees_methods_rec[OF cls nObj sees]"], ["proof (prove)\nusing this:\n  ?Mm' =\n  Mm ++\n  (map_option (\\<lambda>m. (m, x)) \\<circ> map_of ms) \\<Longrightarrow>\n  P \\<turnstile> x sees_methods ?Mm'\n\ngoal (1 subgoal):\n 1. P \\<turnstile> x sees_methods Mm ++\n                                  (map_option (\\<lambda>m. (m, x)) \\<circ>\n                                   map_of ms)", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> x sees_methods Mm ++\n                                (map_option (\\<lambda>m. (m, x)) \\<circ>\n                                 map_of ms)\n\ngoal (1 subgoal):\n 1. \\<And>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "show \"?Q x D b Ts T m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "proof(cases \"map_of ms M\")"], ["proof (state)\ngoal (2 subgoals):\n 1. map_of ms M = None \\<Longrightarrow>\n    \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n 2. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "case None"], ["proof (state)\nthis:\n  map_of ms M = None\n\ngoal (2 subgoals):\n 1. map_of ms M = None \\<Longrightarrow>\n    \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n 2. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "then"], ["proof (chain)\npicking this:\n  map_of ms M = None", "have \"\\<exists>m'. P \\<turnstile> x sees M, b :  Ts\\<rightarrow>T = m' in D\""], ["proof (prove)\nusing this:\n  map_of ms M = None\n\ngoal (1 subgoal):\n 1. \\<exists>m'. P \\<turnstile> x sees M, b :  Ts\\<rightarrow>T = m' in D", "using M x_meth"], ["proof (prove)\nusing this:\n  map_of ms M = None\n  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>\n  P \\<turnstile> x sees_methods Mm ++\n                                (map_option (\\<lambda>m. (m, x)) \\<circ>\n                                 map_of ms)\n\ngoal (1 subgoal):\n 1. \\<exists>m'. P \\<turnstile> x sees M, b :  Ts\\<rightarrow>T = m' in D", "by(fastforce simp add:Method_def map_add_def split:option.split)"], ["proof (state)\nthis:\n  \\<exists>m'. P \\<turnstile> x sees M, b :  Ts\\<rightarrow>T = m' in D\n\ngoal (2 subgoals):\n 1. map_of ms M = None \\<Longrightarrow>\n    \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n 2. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "then"], ["proof (chain)\npicking this:\n  \\<exists>m'. P \\<turnstile> x sees M, b :  Ts\\<rightarrow>T = m' in D", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>m'. P \\<turnstile> x sees M, b :  Ts\\<rightarrow>T = m' in D\n\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "by auto"], ["proof (state)\nthis:\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "case (Some a)"], ["proof (state)\nthis:\n  map_of ms M = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "then"], ["proof (chain)\npicking this:\n  map_of ms M = \\<lfloor>a\\<rfloor>", "obtain b' Ts' T' m' where a: \"a = (b',Ts',T',m')\""], ["proof (prove)\nusing this:\n  map_of ms M = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>b' Ts' T' m'.\n        a = (b', Ts', T', m') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (b', Ts', T', m')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "then"], ["proof (chain)\npicking this:\n  a = (b', Ts', T', m')", "have \"(\\<exists>m' Mm. P \\<turnstile> y sees_methods Mm \\<and> Mm M = \\<lfloor>((b, Ts, T, m'), D)\\<rfloor>)\n              \\<longrightarrow> b' = b \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\""], ["proof (prove)\nusing this:\n  a = (b', Ts', T', m')\n\ngoal (1 subgoal):\n 1. (\\<exists>m' Mm.\n        P \\<turnstile> y sees_methods Mm \\<and>\n        Mm M = \\<lfloor>((b, Ts, T, m'), D)\\<rfloor>) \\<longrightarrow>\n    b' = b \\<and>\n    P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "using nObj class_wf[OF cls wf] map_of_SomeD[OF Some]"], ["proof (prove)\nusing this:\n  a = (b', Ts', T', m')\n  x \\<noteq> Object\n  wf_cdecl wf_md P (x, y, fs, ms)\n  (M, a) \\<in> set ms\n\ngoal (1 subgoal):\n 1. (\\<exists>m' Mm.\n        P \\<turnstile> y sees_methods Mm \\<and>\n        Mm M = \\<lfloor>((b, Ts, T, m'), D)\\<rfloor>) \\<longrightarrow>\n    b' = b \\<and>\n    P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "by(clarsimp simp: wf_cdecl_def Method_def) fast"], ["proof (state)\nthis:\n  (\\<exists>m' Mm.\n      P \\<turnstile> y sees_methods Mm \\<and>\n      Mm M = \\<lfloor>((b, Ts, T, m'), D)\\<rfloor>) \\<longrightarrow>\n  b' = b \\<and>\n  P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       map_of ms M = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       \\<exists>D' Ts' T' m'.\n          P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n          P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "then"], ["proof (chain)\npicking this:\n  (\\<exists>m' Mm.\n      P \\<turnstile> y sees_methods Mm \\<and>\n      Mm M = \\<lfloor>((b, Ts, T, m'), D)\\<rfloor>) \\<longrightarrow>\n  b' = b \\<and>\n  P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>m' Mm.\n      P \\<turnstile> y sees_methods Mm \\<and>\n      Mm M = \\<lfloor>((b, Ts, T, m'), D)\\<rfloor>) \\<longrightarrow>\n  b' = b \\<and>\n  P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "using Some a sees M x_meth"], ["proof (prove)\nusing this:\n  (\\<exists>m' Mm.\n      P \\<turnstile> y sees_methods Mm \\<and>\n      Mm M = \\<lfloor>((b, Ts, T, m'), D)\\<rfloor>) \\<longrightarrow>\n  b' = b \\<and>\n  P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n  map_of ms M = \\<lfloor>a\\<rfloor>\n  a = (b', Ts', T', m')\n  P \\<turnstile> y sees_methods Mm\n  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>\n  P \\<turnstile> x sees_methods Mm ++\n                                (map_option (\\<lambda>m. (m, x)) \\<circ>\n                                 map_of ms)\n\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T", "by(fastforce simp:Method_def map_add_def split:option.split)"], ["proof (state)\nthis:\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<turnstile> y sees M, ?b :  ?Ts\\<rightarrow>?T = ?m in ?D \\<Longrightarrow>\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, ?b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> ?Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> ?T\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       P \\<turnstile> x \\<prec>\\<^sup>1 y \\<Longrightarrow>\n       \\<forall>D b Ts T m.\n          P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n          (\\<exists>D' Ts' T' m'.\n              P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n              P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n              P \\<turnstile> T' \\<le> T)", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> y sees M, ?b :  ?Ts\\<rightarrow>?T = ?m in ?D \\<Longrightarrow>\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, ?b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> ?Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> ?T", "show ?case"], ["proof (prove)\nusing this:\n  P \\<turnstile> y sees M, ?b :  ?Ts\\<rightarrow>?T = ?m in ?D \\<Longrightarrow>\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> x sees M, ?b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> ?Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> ?T\n\ngoal (1 subgoal):\n 1. \\<forall>D b Ts T m.\n       P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n       (\\<exists>D' Ts' T' m'.\n           P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n           P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)", "by simp"], ["proof (state)\nthis:\n  \\<forall>D b Ts T m.\n     P \\<turnstile> y sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> x sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>D b Ts T m.\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D \\<longrightarrow>\n     (\\<exists>D' Ts' T' m'.\n         P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n         P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma sees_method_mono2:\n  \"\\<lbrakk> P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D; P \\<turnstile> C' sees M,b':Ts'\\<rightarrow>T' = m' in D' \\<rbrakk>\n  \\<Longrightarrow> b = b' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D;\n     P \\<turnstile> C' sees M, b' :  Ts'\\<rightarrow>T' = m' in D'\\<rbrakk>\n    \\<Longrightarrow> b = b' \\<and>\n                      P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                      P \\<turnstile> T' \\<le> T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C' \\<preceq>\\<^sup>* C; wf_prog wf_md P;\n     P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D;\n     P \\<turnstile> C' sees M, b' :  Ts'\\<rightarrow>T' = m' in D'\\<rbrakk>\n    \\<Longrightarrow> b = b' \\<and>\n                      P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n                      P \\<turnstile> T' \\<le> T", "by(blast dest:sees_method_mono sees_method_fun)"], ["", "(*>*)"], ["", "lemma mdecls_visible:\nassumes wf: \"wf_prog wf_md P\" and \"class\": \"is_class P C\"\nshows \"\\<And>D fs ms. class P C = Some(D,fs,ms)\n         \\<Longrightarrow> \\<exists>Mm. P \\<turnstile> C sees_methods Mm \\<and> (\\<forall>(M,b,Ts,T,m) \\<in> set ms. Mm M = Some((b,Ts,T,m),C))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D fs ms.\n       class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> C sees_methods Mm \\<and>\n          (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D fs ms.\n       class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> C sees_methods Mm \\<and>\n          (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "using wf \"class\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  is_class P C\n\ngoal (1 subgoal):\n 1. \\<And>D fs ms.\n       class P C = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> C sees_methods Mm \\<and>\n          (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "proof (induct rule:subcls1_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D fs ms.\n       class P Object = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> Object sees_methods Mm \\<and>\n          (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((b, Ts, T, m), Object)\\<rfloor>)\n 2. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "case Object"], ["proof (state)\nthis:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<And>D fs ms.\n       class P Object = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> Object sees_methods Mm \\<and>\n          (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((b, Ts, T, m), Object)\\<rfloor>)\n 2. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "with wf"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>", "have dfst:\"distinct_fst ms\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. distinct_fst ms", "by (unfold class_def wf_prog_def wf_cdecl_def) (fastforce dest:map_of_SomeD)"], ["proof (state)\nthis:\n  distinct_fst ms\n\ngoal (2 subgoals):\n 1. \\<And>D fs ms.\n       class P Object = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> Object sees_methods Mm \\<and>\n          (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((b, Ts, T, m), Object)\\<rfloor>)\n 2. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "with dfst"], ["proof (chain)\npicking this:\n  distinct_fst ms\n  distinct_fst ms", "have \"distinct_fst ms\""], ["proof (prove)\nusing this:\n  distinct_fst ms\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. distinct_fst ms", "by(blast dest: distinct_fst_appendD)"], ["proof (state)\nthis:\n  distinct_fst ms\n\ngoal (2 subgoals):\n 1. \\<And>D fs ms.\n       class P Object = \\<lfloor>(D, fs, ms)\\<rfloor> \\<Longrightarrow>\n       \\<exists>Mm.\n          P \\<turnstile> Object sees_methods Mm \\<and>\n          (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n              Mm M = \\<lfloor>((b, Ts, T, m), Object)\\<rfloor>)\n 2. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "with Object"], ["proof (chain)\npicking this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms", "show ?case"], ["proof (prove)\nusing this:\n  class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. \\<exists>Mm.\n       P \\<turnstile> Object sees_methods Mm \\<and>\n       (\\<forall>a\\<in>set ms.\n           case a of\n           (M, b, Ts, T, m) \\<Rightarrow>\n             Mm M = \\<lfloor>((b, Ts, T, m), Object)\\<rfloor>)", "by(fastforce intro!: sees_methods_Object map_of_SomeI)"], ["proof (state)\nthis:\n  \\<exists>Mm.\n     P \\<turnstile> Object sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ms.\n         case a of\n         (M, b, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((b, Ts, T, m), Object)\\<rfloor>)\n\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "case Subcls"], ["proof (state)\nthis:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, b, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((b, Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "with wf"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, b, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((b, Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>", "have dfst:\"distinct_fst ms\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, b, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((b, Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. distinct_fst ms", "by (unfold class_def wf_prog_def wf_cdecl_def) (fastforce dest:map_of_SomeD)"], ["proof (state)\nthis:\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "with dfst"], ["proof (chain)\npicking this:\n  distinct_fst ms\n  distinct_fst ms", "have \"distinct_fst ms\""], ["proof (prove)\nusing this:\n  distinct_fst ms\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. distinct_fst ms", "by(blast dest: distinct_fst_appendD)"], ["proof (state)\nthis:\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. \\<And>C D Da fs ms.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<And>Da fs ms.\n           class P D = \\<lfloor>(Da, fs, ms)\\<rfloor> \\<Longrightarrow>\n           \\<exists>Mm.\n              P \\<turnstile> D sees_methods Mm \\<and>\n              (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                  Mm M = \\<lfloor>((b, Ts, T, m), D)\\<rfloor>);\n        class P C = \\<lfloor>(Da, fs, ms)\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Mm.\n                            P \\<turnstile> C sees_methods Mm \\<and>\n                            (\\<forall>(M, b, Ts, T, m)\\<in>set ms.\n                                Mm M = \\<lfloor>((b, Ts, T, m), C)\\<rfloor>)", "with Subcls"], ["proof (chain)\npicking this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, b, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((b, Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms", "show ?case"], ["proof (prove)\nusing this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  class P D_ = \\<lfloor>(?D, ?fs, ?ms)\\<rfloor> \\<Longrightarrow>\n  \\<exists>Mm.\n     P \\<turnstile> D_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ?ms.\n         case a of\n         (M, b, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((b, Ts, T, m), D_)\\<rfloor>)\n  class P C_ = \\<lfloor>(D, fs, ms)\\<rfloor>\n  distinct_fst ms\n\ngoal (1 subgoal):\n 1. \\<exists>Mm.\n       P \\<turnstile> C_ sees_methods Mm \\<and>\n       (\\<forall>a\\<in>set ms.\n           case a of\n           (M, b, Ts, T, m) \\<Rightarrow>\n             Mm M = \\<lfloor>((b, Ts, T, m), C_)\\<rfloor>)", "by(fastforce elim:sees_methods_rec dest:subcls1D map_of_SomeI\n                simp:is_class_def)"], ["proof (state)\nthis:\n  \\<exists>Mm.\n     P \\<turnstile> C_ sees_methods Mm \\<and>\n     (\\<forall>a\\<in>set ms.\n         case a of\n         (M, b, Ts, T, m) \\<Rightarrow>\n           Mm M = \\<lfloor>((b, Ts, T, m), C_)\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma mdecl_visible:\nassumes wf: \"wf_prog wf_md P\" and C: \"(C,S,fs,ms) \\<in> set P\" and  m: \"(M,b,Ts,T,m) \\<in> set ms\"\nshows \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C", "from wf C"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P", "have \"class\": \"class P C = Some (S,fs,ms)\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n\ngoal (1 subgoal):\n 1. class P C = \\<lfloor>(S, fs, ms)\\<rfloor>", "by (auto simp add: wf_prog_def class_def is_class_def intro: map_of_SomeI)"], ["proof (state)\nthis:\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C", "from \"class\""], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>", "have \"is_class P C\""], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. is_class P C", "by(auto simp:is_class_def)"], ["proof (state)\nthis:\n  is_class P C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C", "with assms \"class\""], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, b, Ts, T, m) \\<in> set ms\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n  is_class P C", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  (C, S, fs, ms) \\<in> set P\n  (M, b, Ts, T, m) \\<in> set ms\n  class P C = \\<lfloor>(S, fs, ms)\\<rfloor>\n  is_class P C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C", "by(bestsimp simp:Method_def dest:mdecls_visible)"], ["proof (state)\nthis:\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in C\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma Call_lemma:\nassumes sees: \"P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in D\" and sub: \"P \\<turnstile> C' \\<preceq>\\<^sup>* C\" and wf: \"wf_prog wf_md P\"\nshows \"\\<exists>D' Ts' T' m'.\n       P \\<turnstile> C' sees M,b:Ts'\\<rightarrow>T' = m' in D' \\<and> P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T \\<and> P \\<turnstile> C' \\<preceq>\\<^sup>* D'\n       \\<and> is_type P T' \\<and> (\\<forall>T\\<in>set Ts'. is_type P T) \\<and> wf_md P D' (M,b,Ts',T',m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n       P \\<turnstile> T' \\<le> T \\<and>\n       P \\<turnstile> C' \\<preceq>\\<^sup>* D' \\<and>\n       is_type P T' \\<and>\n       (\\<forall>T\\<in>set Ts'. is_type P T) \\<and>\n       wf_md P D' (M, b, Ts', T', m')", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n       P \\<turnstile> T' \\<le> T \\<and>\n       P \\<turnstile> C' \\<preceq>\\<^sup>* D' \\<and>\n       is_type P T' \\<and>\n       (\\<forall>T\\<in>set Ts'. is_type P T) \\<and>\n       wf_md P D' (M, b, Ts', T', m')", "using assms sees_method_mono[OF sub wf sees]"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees M, b :  Ts\\<rightarrow>T = m in D\n  P \\<turnstile> C' \\<preceq>\\<^sup>* C\n  wf_prog wf_md P\n  \\<exists>D' Ts' T' m'.\n     P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n     P \\<turnstile> Ts [\\<le>] Ts' \\<and> P \\<turnstile> T' \\<le> T\n\ngoal (1 subgoal):\n 1. \\<exists>D' Ts' T' m'.\n       P \\<turnstile> C' sees M, b :  Ts'\\<rightarrow>T' = m' in D' \\<and>\n       P \\<turnstile> Ts [\\<le>] Ts' \\<and>\n       P \\<turnstile> T' \\<le> T \\<and>\n       P \\<turnstile> C' \\<preceq>\\<^sup>* D' \\<and>\n       is_type P T' \\<and>\n       (\\<forall>T\\<in>set Ts'. is_type P T) \\<and>\n       wf_md P D' (M, b, Ts', T', m')", "by(fastforce intro:sees_method_decl_above dest:sees_wf_mdecl\n             simp: wf_mdecl_def)"], ["", "(*>*)"], ["", "lemma wf_prog_lift:\n  assumes wf: \"wf_prog (\\<lambda>P C bd. A P C bd) P\"\n  and rule:\n  \"\\<And>wf_md C M b Ts C T m bd.\n   wf_prog wf_md P \\<Longrightarrow>\n   P \\<turnstile> C sees M,b:Ts\\<rightarrow>T = m in C \\<Longrightarrow>\n   set Ts \\<subseteq>  types P \\<Longrightarrow>\n   bd = (M,b,Ts,T,m) \\<Longrightarrow>\n   A P C bd \\<Longrightarrow>\n   B P C bd\"\n  shows \"wf_prog (\\<lambda>P C bd. B P C bd) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog B P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_prog B P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_prog B P", "have \"\\<And>c. c\\<in>set P \\<Longrightarrow> wf_cdecl A P c \\<Longrightarrow> wf_cdecl B P c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> set P; wf_cdecl A P c\\<rbrakk>\n       \\<Longrightarrow> wf_cdecl B P c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> set P; wf_cdecl A P c\\<rbrakk>\n       \\<Longrightarrow> wf_cdecl B P c", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> set P; wf_cdecl A P c\\<rbrakk>\n       \\<Longrightarrow> wf_cdecl B P c", "assume \"c\\<in>set P\" and \"wf_cdecl A P c\""], ["proof (state)\nthis:\n  c \\<in> set P\n  wf_cdecl A P c\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> set P; wf_cdecl A P c\\<rbrakk>\n       \\<Longrightarrow> wf_cdecl B P c", "then"], ["proof (chain)\npicking this:\n  c \\<in> set P\n  wf_cdecl A P c", "show \"wf_cdecl B P c\""], ["proof (prove)\nusing this:\n  c \\<in> set P\n  wf_cdecl A P c\n\ngoal (1 subgoal):\n 1. wf_cdecl B P c", "using rule[OF wf mdecl_visible[OF wf] is_type_pTs[OF wf]]"], ["proof (prove)\nusing this:\n  c \\<in> set P\n  wf_cdecl A P c\n  \\<lbrakk>(?Ca, ?S2, ?fs2, ?ms2) \\<in> set P;\n   (?M, ?b, ?Ts, ?T, ?m) \\<in> set ?ms2; (?C1, ?S1, ?fs1, ?ms1) \\<in> set P;\n   (?M1, ?b1, ?Ts, ?T1, ?m1) \\<in> set ?ms1; ?bd = (?M, ?b, ?Ts, ?T, ?m);\n   A P ?Ca ?bd\\<rbrakk>\n  \\<Longrightarrow> B P ?Ca ?bd\n\ngoal (1 subgoal):\n 1. wf_cdecl B P c", "by (auto simp: wf_cdecl_def wf_mdecl_def)"], ["proof (state)\nthis:\n  wf_cdecl B P c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?c \\<in> set P; wf_cdecl A P ?c\\<rbrakk>\n  \\<Longrightarrow> wf_cdecl B P ?c\n\ngoal (1 subgoal):\n 1. wf_prog B P", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?c \\<in> set P; wf_cdecl A P ?c\\<rbrakk>\n  \\<Longrightarrow> wf_cdecl B P ?c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<in> set P; wf_cdecl A P ?c\\<rbrakk>\n  \\<Longrightarrow> wf_cdecl B P ?c\n\ngoal (1 subgoal):\n 1. wf_prog B P", "using wf"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<in> set P; wf_cdecl A P ?c\\<rbrakk>\n  \\<Longrightarrow> wf_cdecl B P ?c\n  wf_prog A P\n\ngoal (1 subgoal):\n 1. wf_prog B P", "by (clarsimp simp: wf_prog_def)"], ["proof (state)\nthis:\n  wf_prog B P\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma wf_sees_clinit:\nassumes wf:\"wf_prog wf_md P\" and ex: \"class P C = Some a\"\nshows \"\\<exists>m. P \\<turnstile> C sees clinit,Static:[] \\<rightarrow> Void = m in C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "from ex"], ["proof (chain)\npicking this:\n  class P C = \\<lfloor>a\\<rfloor>", "obtain D fs ms where \"a = (D,fs,ms)\""], ["proof (prove)\nusing this:\n  class P C = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>D fs ms.\n        a = (D, fs, ms) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (D, fs, ms)\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "then"], ["proof (chain)\npicking this:\n  a = (D, fs, ms)", "have sP: \"(C, D, fs, ms) \\<in> set P\""], ["proof (prove)\nusing this:\n  a = (D, fs, ms)\n\ngoal (1 subgoal):\n 1. (C, D, fs, ms) \\<in> set P", "using ex map_of_SomeD[of P C a]"], ["proof (prove)\nusing this:\n  a = (D, fs, ms)\n  class P C = \\<lfloor>a\\<rfloor>\n  map_of P C = \\<lfloor>a\\<rfloor> \\<Longrightarrow> (C, a) \\<in> set P\n\ngoal (1 subgoal):\n 1. (C, D, fs, ms) \\<in> set P", "by(simp add: class_def)"], ["proof (state)\nthis:\n  (C, D, fs, ms) \\<in> set P\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "then"], ["proof (chain)\npicking this:\n  (C, D, fs, ms) \\<in> set P", "have \"wf_clinit ms\""], ["proof (prove)\nusing this:\n  (C, D, fs, ms) \\<in> set P\n\ngoal (1 subgoal):\n 1. wf_clinit ms", "using assms"], ["proof (prove)\nusing this:\n  (C, D, fs, ms) \\<in> set P\n  wf_prog wf_md P\n  class P C = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. wf_clinit ms", "by(unfold wf_prog_def wf_cdecl_def, auto)"], ["proof (state)\nthis:\n  wf_clinit ms\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "then"], ["proof (chain)\npicking this:\n  wf_clinit ms", "obtain m where sm: \"(clinit, Static, [], Void, m) \\<in> set ms\""], ["proof (prove)\nusing this:\n  wf_clinit ms\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        (clinit, Static, [], Void, m) \\<in> set ms \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson wf_clinit_def)"], ["proof (state)\nthis:\n  (clinit, Static, [], Void, m) \\<in> set ms\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "then"], ["proof (chain)\npicking this:\n  (clinit, Static, [], Void, m) \\<in> set ms", "have \"P \\<turnstile> C sees clinit,Static:[] \\<rightarrow> Void = m in C\""], ["proof (prove)\nusing this:\n  (clinit, Static, [], Void, m) \\<in> set ms\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "using mdecl_visible[OF wf sP sm]"], ["proof (prove)\nusing this:\n  (clinit, Static, [], Void, m) \\<in> set ms\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (1 subgoal):\n 1. P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "by simp"], ["proof (state)\nthis:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "by(rule exI)"], ["proof (state)\nthis:\n  \\<exists>m.\n     P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma wf_sees_clinit1:\nassumes wf:\"wf_prog wf_md P\" and ex: \"class P C = Some a\"\nand \"P \\<turnstile> C sees clinit,b:Ts \\<rightarrow> T = m in D\"\nshows \"b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C", "obtain m' where sees: \"P \\<turnstile> C sees clinit,Static:[] \\<rightarrow> Void = m' in C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m' in C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_sees_clinit[OF wf ex]"], ["proof (prove)\nusing this:\n  \\<exists>m.\n     P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m' in C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by clarify"], ["proof (state)\nthis:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m' in C\n\ngoal (1 subgoal):\n 1. b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C", "then"], ["proof (chain)\npicking this:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m' in C", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m' in C\n\ngoal (1 subgoal):\n 1. b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C", "using sees wf"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m' in C\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m' in C\n  wf_prog wf_md P\n\ngoal (1 subgoal):\n 1. b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C", "by (meson assms(3) sees_method_fun)"], ["proof (state)\nthis:\n  b = Static \\<and> Ts = [] \\<and> T = Void \\<and> D = C\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_NonStatic_nclinit:\nassumes wf: \"wf_prog wf_md P\" and meth: \"P \\<turnstile> C sees M,NonStatic:Ts\\<rightarrow>T=(mxs,mxl,ins,xt) in D\"\nshows \"M \\<noteq> clinit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<noteq> clinit", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<noteq> clinit", "from sees_method_is_class[OF meth]"], ["proof (chain)\npicking this:\n  is_class P C", "obtain a where cls: \"class P C = Some a\""], ["proof (prove)\nusing this:\n  is_class P C\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        class P C = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(clarsimp simp: is_class_def)"], ["proof (state)\nthis:\n  class P C = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. M \\<noteq> clinit", "with wf wf_sees_clinit[OF wf cls]"], ["proof (chain)\npicking this:\n  wf_prog wf_md P\n  \\<exists>m.\n     P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n  class P C = \\<lfloor>a\\<rfloor>", "obtain m where \"P \\<turnstile> C sees clinit,Static:[]\\<rightarrow>Void=m in C\""], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  \\<exists>m.\n     P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n  class P C = \\<lfloor>a\\<rfloor>\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["proof (state)\nthis:\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (1 subgoal):\n 1. M \\<noteq> clinit", "with meth"], ["proof (chain)\npicking this:\n  P \\<turnstile> C sees M, NonStatic :  Ts\\<rightarrow>T = (mxs, mxl, ins,\n                      xt) in D\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<turnstile> C sees M, NonStatic :  Ts\\<rightarrow>T = (mxs, mxl, ins,\n                      xt) in D\n  P \\<turnstile> C sees clinit, Static :  []\\<rightarrow>Void = m in C\n\ngoal (1 subgoal):\n 1. M \\<noteq> clinit", "by(auto dest: sees_method_fun)"], ["proof (state)\nthis:\n  M \\<noteq> clinit\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open> Well-formedness and field lookup \\<close>"], ["", "lemma wf_Fields_Ex:\nassumes wf: \"wf_prog wf_md P\" and \"is_class P C\"\nshows \"\\<exists>FDTs. P \\<turnstile> C has_fields FDTs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "using assms"], ["proof (prove)\nusing this:\n  wf_prog wf_md P\n  is_class P C\n\ngoal (1 subgoal):\n 1. \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "proof(induct rule:subcls1_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>FDTs. P \\<turnstile> Object has_fields FDTs\n 2. \\<And>C D.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<exists>FDTs. P \\<turnstile> D has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "case Object"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>FDTs. P \\<turnstile> Object has_fields FDTs\n 2. \\<And>C D.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<exists>FDTs. P \\<turnstile> D has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>FDTs. P \\<turnstile> Object has_fields FDTs", "using class_Object[OF wf]"], ["proof (prove)\nusing this:\n  \\<exists>C fs ms. class P Object = \\<lfloor>(C, fs, ms)\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<exists>FDTs. P \\<turnstile> Object has_fields FDTs", "by(blast intro:has_fields_Object)"], ["proof (state)\nthis:\n  \\<exists>FDTs. P \\<turnstile> Object has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<And>C D.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<exists>FDTs. P \\<turnstile> D has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C D.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<exists>FDTs. P \\<turnstile> D has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "case Subcls"], ["proof (state)\nthis:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  \\<exists>FDTs. P \\<turnstile> D_ has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<And>C D.\n       \\<lbrakk>C \\<noteq> Object; P \\<turnstile> C \\<prec>\\<^sup>1 D;\n        is_class P D;\n        \\<exists>FDTs. P \\<turnstile> D has_fields FDTs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>FDTs. P \\<turnstile> C has_fields FDTs", "then"], ["proof (chain)\npicking this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  \\<exists>FDTs. P \\<turnstile> D_ has_fields FDTs", "show ?case"], ["proof (prove)\nusing this:\n  C_ \\<noteq> Object\n  P \\<turnstile> C_ \\<prec>\\<^sup>1 D_\n  is_class P D_\n  \\<exists>FDTs. P \\<turnstile> D_ has_fields FDTs\n\ngoal (1 subgoal):\n 1. \\<exists>FDTs. P \\<turnstile> C_ has_fields FDTs", "by(blast intro:has_fields_rec dest:subcls1D)"], ["proof (state)\nthis:\n  \\<exists>FDTs. P \\<turnstile> C_ has_fields FDTs\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma has_fields_types:\n  \"\\<lbrakk> P \\<turnstile> C has_fields FDTs; (FD,b,T) \\<in> set FDTs; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has_fields FDTs; (FD, b, T) \\<in> set FDTs;\n     wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C has_fields FDTs; (FD, b, T) \\<in> set FDTs;\n     wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "proof(induct rule:Fields.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C D fs ms FDTs FDTs'.\n       \\<lbrakk>class P C = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        C \\<noteq> Object; P \\<turnstile> D has_fields FDTs;\n        \\<lbrakk>(FD, b, T) \\<in> set FDTs; wf_prog wf_md P\\<rbrakk>\n        \\<Longrightarrow> is_type P T;\n        FDTs' = map (\\<lambda>(F, b, T). ((F, C), b, T)) fs @ FDTs;\n        (FD, b, T) \\<in> set FDTs'; wf_prog wf_md P\\<rbrakk>\n       \\<Longrightarrow> is_type P T\n 2. \\<And>D fs ms FDTs.\n       \\<lbrakk>class P Object = \\<lfloor>(D, fs, ms)\\<rfloor>;\n        FDTs = map (\\<lambda>(F, b, T). ((F, Object), b, T)) fs;\n        (FD, b, T) \\<in> set FDTs; wf_prog wf_md P\\<rbrakk>\n       \\<Longrightarrow> is_type P T", "qed(fastforce dest!: class_wf simp: wf_cdecl_def wf_fdecl_def)+"], ["", "(*>*)"], ["", "lemma sees_field_is_type:\n  \"\\<lbrakk> P \\<turnstile> C sees F,b:T in D; wf_prog wf_md P \\<rbrakk> \\<Longrightarrow> is_type P T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees F,b:T in D; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> C sees F,b:T in D; wf_prog wf_md P\\<rbrakk>\n    \\<Longrightarrow> is_type P T", "by (meson has_field_def has_fields_types has_visible_field map_of_SomeD)"], ["", "(*>*)"], ["", "lemma wf_syscls:\n  \"set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set SystemClasses \\<subseteq> set P \\<Longrightarrow> wf_syscls P", "by (force simp: image_def SystemClasses_def wf_syscls_def sys_xcpts_def\n                ObjectC_def NullPointerC_def ClassCastC_def OutOfMemoryC_def\n                NoClassDefFoundC_def\n                IncompatibleClassChangeC_def NoSuchFieldC_def NoSuchMethodC_def)"], ["", "(*>*)"], ["", "subsection\\<open> Well-formedness and subclassing \\<close>"], ["", "lemma wf_subcls_nCls:\nassumes wf: \"wf_prog wf_md P\" and ns: \"\\<not> is_class P C\"\nshows \"\\<lbrakk> P \\<turnstile> D \\<preceq>\\<^sup>* D'; D \\<noteq> C \\<rbrakk> \\<Longrightarrow> D' \\<noteq> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<turnstile> D \\<preceq>\\<^sup>* D'; D \\<noteq> C\\<rbrakk>\n    \\<Longrightarrow> D' \\<noteq> C", "proof(induct rule: rtrancl.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. a \\<noteq> C \\<Longrightarrow> a \\<noteq> C\n 2. \\<And>a b c.\n       \\<lbrakk>P \\<turnstile> a \\<preceq>\\<^sup>* b;\n        a \\<noteq> C \\<Longrightarrow> b \\<noteq> C;\n        P \\<turnstile> b \\<prec>\\<^sup>1 c; a \\<noteq> C\\<rbrakk>\n       \\<Longrightarrow> c \\<noteq> C", "case (rtrancl_into_rtrancl a b c)"], ["proof (state)\nthis:\n  P \\<turnstile> a \\<preceq>\\<^sup>* b\n  a \\<noteq> C \\<Longrightarrow> b \\<noteq> C\n  P \\<turnstile> b \\<prec>\\<^sup>1 c\n  a \\<noteq> C\n\ngoal (2 subgoals):\n 1. \\<And>a. a \\<noteq> C \\<Longrightarrow> a \\<noteq> C\n 2. \\<And>a b c.\n       \\<lbrakk>P \\<turnstile> a \\<preceq>\\<^sup>* b;\n        a \\<noteq> C \\<Longrightarrow> b \\<noteq> C;\n        P \\<turnstile> b \\<prec>\\<^sup>1 c; a \\<noteq> C\\<rbrakk>\n       \\<Longrightarrow> c \\<noteq> C", "with ns"], ["proof (chain)\npicking this:\n  \\<not> is_class P C\n  P \\<turnstile> a \\<preceq>\\<^sup>* b\n  a \\<noteq> C \\<Longrightarrow> b \\<noteq> C\n  P \\<turnstile> b \\<prec>\\<^sup>1 c\n  a \\<noteq> C", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> is_class P C\n  P \\<turnstile> a \\<preceq>\\<^sup>* b\n  a \\<noteq> C \\<Longrightarrow> b \\<noteq> C\n  P \\<turnstile> b \\<prec>\\<^sup>1 c\n  a \\<noteq> C\n\ngoal (1 subgoal):\n 1. c \\<noteq> C", "by(clarsimp dest!: subcls1D wf_cdecl_supD[OF class_wf[OF _ wf]])"], ["proof (state)\nthis:\n  c \\<noteq> C\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<noteq> C \\<Longrightarrow> a \\<noteq> C", "qed(simp)"], ["", "lemma wf_subcls_nCls':\nassumes wf: \"wf_prog wf_md P\" and ns: \"\\<not>is_class P C\\<^sub>0\"\nshows \"\\<And>cd D'. cd \\<in> set P \\<Longrightarrow> \\<not>P \\<turnstile> fst cd \\<preceq>\\<^sup>* C\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cd D'.\n       cd \\<in> set P \\<Longrightarrow>\n       (fst cd, C\\<^sub>0) \\<notin> (subcls1 P)\\<^sup>*", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>cd D'.\n       cd \\<in> set P \\<Longrightarrow>\n       (fst cd, C\\<^sub>0) \\<notin> (subcls1 P)\\<^sup>*", "fix cd D'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>cd D'.\n       cd \\<in> set P \\<Longrightarrow>\n       (fst cd, C\\<^sub>0) \\<notin> (subcls1 P)\\<^sup>*", "assume cd: \"cd \\<in> set P\""], ["proof (state)\nthis:\n  cd \\<in> set P\n\ngoal (1 subgoal):\n 1. \\<And>cd D'.\n       cd \\<in> set P \\<Longrightarrow>\n       (fst cd, C\\<^sub>0) \\<notin> (subcls1 P)\\<^sup>*", "then"], ["proof (chain)\npicking this:\n  cd \\<in> set P", "have cls: \"is_class P (fst cd)\""], ["proof (prove)\nusing this:\n  cd \\<in> set P\n\ngoal (1 subgoal):\n 1. is_class P (fst cd)", "using class_exists_equiv is_class_def"], ["proof (prove)\nusing this:\n  cd \\<in> set P\n  (\\<exists>x. fst x = ?cn \\<and> x \\<in> set ?P) =\n  (class ?P ?cn \\<noteq> None)\n  is_class ?P ?C \\<equiv> class ?P ?C \\<noteq> None\n\ngoal (1 subgoal):\n 1. is_class P (fst cd)", "by blast"], ["proof (state)\nthis:\n  is_class P (fst cd)\n\ngoal (1 subgoal):\n 1. \\<And>cd D'.\n       cd \\<in> set P \\<Longrightarrow>\n       (fst cd, C\\<^sub>0) \\<notin> (subcls1 P)\\<^sup>*", "with wf_subcls_nCls[OF wf ns] ns"], ["proof (chain)\npicking this:\n  \\<lbrakk>P \\<turnstile> ?D \\<preceq>\\<^sup>* ?D';\n   ?D \\<noteq> C\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> ?D' \\<noteq> C\\<^sub>0\n  \\<not> is_class P C\\<^sub>0\n  is_class P (fst cd)", "show \"\\<not>P \\<turnstile> fst cd \\<preceq>\\<^sup>* C\\<^sub>0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>P \\<turnstile> ?D \\<preceq>\\<^sup>* ?D';\n   ?D \\<noteq> C\\<^sub>0\\<rbrakk>\n  \\<Longrightarrow> ?D' \\<noteq> C\\<^sub>0\n  \\<not> is_class P C\\<^sub>0\n  is_class P (fst cd)\n\ngoal (1 subgoal):\n 1. (fst cd, C\\<^sub>0) \\<notin> (subcls1 P)\\<^sup>*", "by(cases \"fst cd = D'\", auto)"], ["proof (state)\nthis:\n  (fst cd, C\\<^sub>0) \\<notin> (subcls1 P)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_nclass_nsub:\n \"\\<lbrakk> wf_prog wf_md P; is_class P C; \\<not>is_class P C' \\<rbrakk> \\<Longrightarrow> \\<not>P \\<turnstile> C \\<preceq>\\<^sup>* C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_prog wf_md P; is_class P C; \\<not> is_class P C'\\<rbrakk>\n    \\<Longrightarrow> (C, C') \\<notin> (subcls1 P)\\<^sup>*", "by(rule notI, auto dest: wf_subcls_nCls[where C=C' and D=C])"], ["", "lemma wf_sys_xcpt_nsub_Start:\nassumes wf: \"wf_prog wf_md P\" and ns: \"\\<not>is_class P Start\" and sx: \"C \\<in> sys_xcpts\"\nshows \"\\<not>P \\<turnstile> C \\<preceq>\\<^sup>* Start\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C, Start) \\<notin> (subcls1 P)\\<^sup>*", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (C, Start) \\<notin> (subcls1 P)\\<^sup>*", "have Cns: \"C \\<noteq> Start\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<noteq> Start", "using Start_nsys_xcpts sx"], ["proof (prove)\nusing this:\n  Start \\<notin> sys_xcpts\n  C \\<in> sys_xcpts\n\ngoal (1 subgoal):\n 1. C \\<noteq> Start", "by clarsimp"], ["proof (state)\nthis:\n  C \\<noteq> Start\n\ngoal (1 subgoal):\n 1. (C, Start) \\<notin> (subcls1 P)\\<^sup>*", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (C, Start) \\<notin> (subcls1 P)\\<^sup>*", "using wf_subcls_nCls[OF wf ns _ Cns]"], ["proof (prove)\nusing this:\n  P \\<turnstile> C \\<preceq>\\<^sup>* ?D' \\<Longrightarrow>\n  ?D' \\<noteq> Start\n\ngoal (1 subgoal):\n 1. (C, Start) \\<notin> (subcls1 P)\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (C, Start) \\<notin> (subcls1 P)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}