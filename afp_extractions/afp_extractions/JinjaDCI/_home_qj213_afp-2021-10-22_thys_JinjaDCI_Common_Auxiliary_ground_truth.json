{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/Common/Auxiliary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma nat_add_max_le[simp]:\n  \"((n::nat) + max i j \\<le> m) = (n + i \\<le> m \\<and> n + j \\<le> m)\"", "lemma Suc_add_max_le[simp]:\n  \"(Suc(n + max i j) \\<le> m) = (Suc(n + i) \\<le> m \\<and> Suc(n + j) \\<le> m)\"", "lemma distinct_fst_Nil [simp]:\n  \"distinct_fst []\"", "lemma distinct_fst_Cons [simp]:\n  \"distinct_fst ((k,x)#kxs) = (distinct_fst kxs \\<and> (\\<forall>y. (k,y) \\<notin> set kxs))\"", "lemma distinct_fst_appendD:\n \"distinct_fst(kxs @ kxs') \\<Longrightarrow> distinct_fst kxs \\<and> distinct_fst kxs'\"", "lemma map_of_SomeI:\n  \"\\<lbrakk> distinct_fst kxs; (k,x) \\<in> set kxs \\<rbrakk> \\<Longrightarrow> map_of kxs k = Some x\"", "lemma rel_list_all2_Cons [iff]:\n  \"list_all2 (fun_of S) (x#xs) (y#ys) = \n   ((x,y) \\<in> S \\<and> list_all2 (fun_of S) xs ys)\"", "lemma rel_list_all2_Cons1:\n  \"list_all2 (fun_of S) (x#xs) ys = \n  (\\<exists>z zs. ys = z#zs \\<and> (x,z) \\<in> S \\<and> list_all2 (fun_of S) xs zs)\"", "lemma rel_list_all2_Cons2:\n  \"list_all2 (fun_of S) xs (y#ys) = \n  (\\<exists>z zs. xs = z#zs \\<and> (z,y) \\<in> S \\<and> list_all2 (fun_of S) zs ys)\"", "lemma rel_list_all2_refl:\n  \"(\\<And>x. (x,x) \\<in> S) \\<Longrightarrow> list_all2 (fun_of S) xs xs\"", "lemma rel_list_all2_antisym:\n  \"\\<lbrakk> (\\<And>x y. \\<lbrakk>(x,y) \\<in> S; (y,x) \\<in> T\\<rbrakk> \\<Longrightarrow> x = y); \n     list_all2 (fun_of S) xs ys; list_all2 (fun_of T) ys xs \\<rbrakk> \\<Longrightarrow> xs = ys\"", "lemma rel_list_all2_trans: \n  \"\\<lbrakk> \\<And>a b c. \\<lbrakk>(a,b) \\<in> R; (b,c) \\<in> S\\<rbrakk> \\<Longrightarrow> (a,c) \\<in> T;\n    list_all2 (fun_of R) as bs; list_all2 (fun_of S) bs cs\\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of T) as cs\"", "lemma rel_list_all2_update_cong:\n  \"\\<lbrakk> i<size xs; list_all2 (fun_of S) xs ys; (x,y) \\<in> S \\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of S) (xs[i:=x]) (ys[i:=y])\"", "lemma rel_list_all2_nthD:\n  \"\\<lbrakk> list_all2 (fun_of S) xs ys; p < size xs \\<rbrakk> \\<Longrightarrow> (xs!p,ys!p) \\<in> S\"", "lemma rel_list_all2I:\n  \"\\<lbrakk> length a = length b; \\<And>n. n < length a \\<Longrightarrow> (a!n,b!n) \\<in> S \\<rbrakk> \\<Longrightarrow> list_all2 (fun_of S) a b\"", "lemma map_of_set_pcs_notin: \"C \\<notin> (\\<lambda>t. snd (fst t)) ` set FDTs \\<Longrightarrow> map_of FDTs (F, C) = None\"", "lemma map_of_insertmap_SomeD':\n  \"map_of fs F = Some y \\<Longrightarrow> map_of (map (\\<lambda>(F, y). (F, D, y)) fs) F = Some(D,y)\"", "lemma map_of_reinsert_neq_None:\n  \"Ca \\<noteq> D \\<Longrightarrow> map_of (map (\\<lambda>(F, y). ((F, Ca), y)) fs) (F, D) = None\"", "lemma map_of_remap_insertmap:\n  \"map_of (map ((\\<lambda>((F, D), b, T). (F, D, b, T)) \\<circ> (\\<lambda>(F, y). ((F, D), y))) fs)\n    = map_of (map (\\<lambda>(F, y). (F, D, y)) fs)\"", "lemma map_of_reinsert_SomeD:\n  \"map_of (map (\\<lambda>(F, y). ((F, D), y)) fs) (F, D) = Some T \\<Longrightarrow> map_of fs F = Some T\"", "lemma map_of_filtered_SomeD:\n\"map_of fs (F,D) = Some (a, T) \\<Longrightarrow> Q ((F,D),a,T) \\<Longrightarrow>\n       map_of (map (\\<lambda>((F,D), b, T). ((F,D), P T)) (filter Q fs))\n        (F,D) = Some (P T)\"", "lemma map_of_remove_filtered_SomeD:\n\"map_of fs (F,C) = Some (a, T) \\<Longrightarrow> Q ((F,C),a,T) \\<Longrightarrow>\n       map_of (map (\\<lambda>((F,D), b, T). (F, P T)) [((F, D), b, T)\\<leftarrow>fs . Q ((F, D), b, T) \\<and> D = C])\n        F = Some (P T)\"", "lemma map_of_Some_None_split:\nassumes \"t = map (\\<lambda>(F, y). ((F, C), y)) fs @ t'\" \"map_of t' (F, C) = None\" \"map_of t (F, C) = Some y\"\nshows \"map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F = Some (C, y)\""], "translations": [["", "lemma nat_add_max_le[simp]:\n  \"((n::nat) + max i j \\<le> m) = (n + i \\<le> m \\<and> n + j \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n + max i j \\<le> m) = (n + i \\<le> m \\<and> n + j \\<le> m)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (n + max i j \\<le> m) = (n + i \\<le> m \\<and> n + j \\<le> m)", "by arith"], ["", "(*>*)"], ["", "lemma Suc_add_max_le[simp]:\n  \"(Suc(n + max i j) \\<le> m) = (Suc(n + i) \\<le> m \\<and> Suc(n + j) \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc (n + max i j) \\<le> m) =\n    (Suc (n + i) \\<le> m \\<and> Suc (n + j) \\<le> m)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc (n + max i j) \\<le> m) =\n    (Suc (n + i) \\<le> m \\<and> Suc (n + j) \\<le> m)", "by arith"], ["", "(*>*)"], ["", "notation Some  (\"(\\<lfloor>_\\<rfloor>)\")"], ["", "(*<*)"], ["", "declare\n option.splits[split]\n Let_def[simp]\n subset_insertI2 [simp]\n Cons_eq_map_conv [iff]"], ["", "(*>*)"], ["", "subsection \\<open>@{text distinct_fst}\\<close>"], ["", "definition distinct_fst  :: \"('a \\<times> 'b) list \\<Rightarrow> bool\"\nwhere\n  \"distinct_fst  \\<equiv>  distinct \\<circ> map fst\""], ["", "lemma distinct_fst_Nil [simp]:\n  \"distinct_fst []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst []", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst []", "by (unfold distinct_fst_def) (simp (no_asm))"], ["", "(*>*)"], ["", "lemma distinct_fst_Cons [simp]:\n  \"distinct_fst ((k,x)#kxs) = (distinct_fst kxs \\<and> (\\<forall>y. (k,y) \\<notin> set kxs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst ((k, x) # kxs) =\n    (distinct_fst kxs \\<and> (\\<forall>y. (k, y) \\<notin> set kxs))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst ((k, x) # kxs) =\n    (distinct_fst kxs \\<and> (\\<forall>y. (k, y) \\<notin> set kxs))", "by (unfold distinct_fst_def) (auto simp:image_def)"], ["", "(*>*)"], ["", "lemma distinct_fst_appendD:\n \"distinct_fst(kxs @ kxs') \\<Longrightarrow> distinct_fst kxs \\<and> distinct_fst kxs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst (kxs @ kxs') \\<Longrightarrow>\n    distinct_fst kxs \\<and> distinct_fst kxs'", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_fst (kxs @ kxs') \\<Longrightarrow>\n    distinct_fst kxs \\<and> distinct_fst kxs'", "by(induct kxs, auto)"], ["", "(*>*)"], ["", "lemma map_of_SomeI:\n  \"\\<lbrakk> distinct_fst kxs; (k,x) \\<in> set kxs \\<rbrakk> \\<Longrightarrow> map_of kxs k = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct_fst kxs; (k, x) \\<in> set kxs\\<rbrakk>\n    \\<Longrightarrow> map_of kxs k = \\<lfloor>x\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct_fst kxs; (k, x) \\<in> set kxs\\<rbrakk>\n    \\<Longrightarrow> map_of kxs k = \\<lfloor>x\\<rfloor>", "by (induct kxs) (auto simp:fun_upd_apply)"], ["", "(*>*)"], ["", "subsection \\<open> Using @{term list_all2} for relations \\<close>"], ["", "definition fun_of :: \"('a \\<times> 'b) set \\<Rightarrow> 'a \\<Rightarrow> 'b \\<Rightarrow> bool\"\nwhere\n  \"fun_of S \\<equiv> \\<lambda>x y. (x,y) \\<in> S\""], ["", "text \\<open> Convenience lemmas \\<close>"], ["", "(*<*)"], ["", "declare fun_of_def [simp]"], ["", "(*>*)"], ["", "lemma rel_list_all2_Cons [iff]:\n  \"list_all2 (fun_of S) (x#xs) (y#ys) = \n   ((x,y) \\<in> S \\<and> list_all2 (fun_of S) xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) (x # xs) (y # ys) =\n    ((x, y) \\<in> S \\<and> list_all2 (fun_of S) xs ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) (x # xs) (y # ys) =\n    ((x, y) \\<in> S \\<and> list_all2 (fun_of S) xs ys)", "by simp"], ["", "(*>*)"], ["", "lemma rel_list_all2_Cons1:\n  \"list_all2 (fun_of S) (x#xs) ys = \n  (\\<exists>z zs. ys = z#zs \\<and> (x,z) \\<in> S \\<and> list_all2 (fun_of S) xs zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) (x # xs) ys =\n    (\\<exists>z zs.\n        ys = z # zs \\<and> (x, z) \\<in> S \\<and> list_all2 (fun_of S) xs zs)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) (x # xs) ys =\n    (\\<exists>z zs.\n        ys = z # zs \\<and> (x, z) \\<in> S \\<and> list_all2 (fun_of S) xs zs)", "by (cases ys) auto"], ["", "(*>*)"], ["", "lemma rel_list_all2_Cons2:\n  \"list_all2 (fun_of S) xs (y#ys) = \n  (\\<exists>z zs. xs = z#zs \\<and> (z,y) \\<in> S \\<and> list_all2 (fun_of S) zs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) xs (y # ys) =\n    (\\<exists>z zs.\n        xs = z # zs \\<and> (z, y) \\<in> S \\<and> list_all2 (fun_of S) zs ys)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (fun_of S) xs (y # ys) =\n    (\\<exists>z zs.\n        xs = z # zs \\<and> (z, y) \\<in> S \\<and> list_all2 (fun_of S) zs ys)", "by (cases xs) auto"], ["", "(*>*)"], ["", "lemma rel_list_all2_refl:\n  \"(\\<And>x. (x,x) \\<in> S) \\<Longrightarrow> list_all2 (fun_of S) xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. (x, x) \\<in> S) \\<Longrightarrow> list_all2 (fun_of S) xs xs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. (x, x) \\<in> S) \\<Longrightarrow> list_all2 (fun_of S) xs xs", "by (simp add: list_all2_refl)"], ["", "(*>*)"], ["", "lemma rel_list_all2_antisym:\n  \"\\<lbrakk> (\\<And>x y. \\<lbrakk>(x,y) \\<in> S; (y,x) \\<in> T\\<rbrakk> \\<Longrightarrow> x = y); \n     list_all2 (fun_of S) xs ys; list_all2 (fun_of T) ys xs \\<rbrakk> \\<Longrightarrow> xs = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y.\n                \\<lbrakk>(x, y) \\<in> S; (y, x) \\<in> T\\<rbrakk>\n                \\<Longrightarrow> x = y;\n     list_all2 (fun_of S) xs ys; list_all2 (fun_of T) ys xs\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x y.\n                \\<lbrakk>(x, y) \\<in> S; (y, x) \\<in> T\\<rbrakk>\n                \\<Longrightarrow> x = y;\n     list_all2 (fun_of S) xs ys; list_all2 (fun_of T) ys xs\\<rbrakk>\n    \\<Longrightarrow> xs = ys", "by (rule list_all2_antisym) auto"], ["", "(*>*)"], ["", "lemma rel_list_all2_trans: \n  \"\\<lbrakk> \\<And>a b c. \\<lbrakk>(a,b) \\<in> R; (b,c) \\<in> S\\<rbrakk> \\<Longrightarrow> (a,c) \\<in> T;\n    list_all2 (fun_of R) as bs; list_all2 (fun_of S) bs cs\\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of T) as cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b c.\n                \\<lbrakk>(a, b) \\<in> R; (b, c) \\<in> S\\<rbrakk>\n                \\<Longrightarrow> (a, c) \\<in> T;\n     list_all2 (fun_of R) as bs; list_all2 (fun_of S) bs cs\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of T) as cs", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a b c.\n                \\<lbrakk>(a, b) \\<in> R; (b, c) \\<in> S\\<rbrakk>\n                \\<Longrightarrow> (a, c) \\<in> T;\n     list_all2 (fun_of R) as bs; list_all2 (fun_of S) bs cs\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of T) as cs", "by (rule list_all2_trans) auto"], ["", "(*>*)"], ["", "lemma rel_list_all2_update_cong:\n  \"\\<lbrakk> i<size xs; list_all2 (fun_of S) xs ys; (x,y) \\<in> S \\<rbrakk> \n  \\<Longrightarrow> list_all2 (fun_of S) (xs[i:=x]) (ys[i:=y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; list_all2 (fun_of S) xs ys;\n     (x, y) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of S) (xs[i := x]) (ys[i := y])", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; list_all2 (fun_of S) xs ys;\n     (x, y) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of S) (xs[i := x]) (ys[i := y])", "by (simp add: list_all2_update_cong)"], ["", "(*>*)"], ["", "lemma rel_list_all2_nthD:\n  \"\\<lbrakk> list_all2 (fun_of S) xs ys; p < size xs \\<rbrakk> \\<Longrightarrow> (xs!p,ys!p) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all2 (fun_of S) xs ys; p < length xs\\<rbrakk>\n    \\<Longrightarrow> (xs ! p, ys ! p) \\<in> S", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all2 (fun_of S) xs ys; p < length xs\\<rbrakk>\n    \\<Longrightarrow> (xs ! p, ys ! p) \\<in> S", "by (drule list_all2_nthD) auto"], ["", "(*>*)"], ["", "lemma rel_list_all2I:\n  \"\\<lbrakk> length a = length b; \\<And>n. n < length a \\<Longrightarrow> (a!n,b!n) \\<in> S \\<rbrakk> \\<Longrightarrow> list_all2 (fun_of S) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length a = length b;\n     \\<And>n. n < length a \\<Longrightarrow> (a ! n, b ! n) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of S) a b", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length a = length b;\n     \\<And>n. n < length a \\<Longrightarrow> (a ! n, b ! n) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> list_all2 (fun_of S) a b", "by (erule list_all2_all_nthI) simp"], ["", "(*>*)\n\n(*<*)"], ["", "declare fun_of_def [simp del]"], ["", "(*>*)"], ["", "subsection \\<open> Auxiliary properties of @{text \"map_of\"} function \\<close>"], ["", "lemma map_of_set_pcs_notin: \"C \\<notin> (\\<lambda>t. snd (fst t)) ` set FDTs \\<Longrightarrow> map_of FDTs (F, C) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<notin> (\\<lambda>t. snd (fst t)) ` set FDTs \\<Longrightarrow>\n    map_of FDTs (F, C) = None", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<notin> (\\<lambda>t. snd (fst t)) ` set FDTs \\<Longrightarrow>\n    map_of FDTs (F, C) = None", "by (metis image_eqI image_image map_of_eq_None_iff snd_conv)"], ["", "(*>*)"], ["", "lemma map_of_insertmap_SomeD':\n  \"map_of fs F = Some y \\<Longrightarrow> map_of (map (\\<lambda>(F, y). (F, D, y)) fs) F = Some(D,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of fs F = \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    map_of (map (\\<lambda>(F, y). (F, D, y)) fs) F =\n    \\<lfloor>(D, y)\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of fs F = \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    map_of (map (\\<lambda>(F, y). (F, D, y)) fs) F =\n    \\<lfloor>(D, y)\\<rfloor>", "by (induct fs) (auto simp:fun_upd_apply split: if_split_asm)"], ["", "(*>*)"], ["", "lemma map_of_reinsert_neq_None:\n  \"Ca \\<noteq> D \\<Longrightarrow> map_of (map (\\<lambda>(F, y). ((F, Ca), y)) fs) (F, D) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ca \\<noteq> D \\<Longrightarrow>\n    map_of (map (\\<lambda>(F, y). ((F, Ca), y)) fs) (F, D) = None", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ca \\<noteq> D \\<Longrightarrow>\n    map_of (map (\\<lambda>(F, y). ((F, Ca), y)) fs) (F, D) = None", "by (induct fs) (auto simp:fun_upd_apply split: if_split_asm)"], ["", "(*>*)"], ["", "lemma map_of_remap_insertmap:\n  \"map_of (map ((\\<lambda>((F, D), b, T). (F, D, b, T)) \\<circ> (\\<lambda>(F, y). ((F, D), y))) fs)\n    = map_of (map (\\<lambda>(F, y). (F, D, y)) fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of\n     (map ((\\<lambda>((F, D), b, T). (F, D, b, T)) \\<circ>\n           (\\<lambda>(F, y). ((F, D), y)))\n       fs) =\n    map_of (map (\\<lambda>(F, y). (F, D, y)) fs)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of\n     (map ((\\<lambda>((F, D), b, T). (F, D, b, T)) \\<circ>\n           (\\<lambda>(F, y). ((F, D), y)))\n       fs) =\n    map_of (map (\\<lambda>(F, y). (F, D, y)) fs)", "by (induct fs) (auto simp:fun_upd_apply split: if_split_asm)"], ["", "(*>*)"], ["", "lemma map_of_reinsert_SomeD:\n  \"map_of (map (\\<lambda>(F, y). ((F, D), y)) fs) (F, D) = Some T \\<Longrightarrow> map_of fs F = Some T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>(F, y). ((F, D), y)) fs) (F, D) =\n    \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    map_of fs F = \\<lfloor>T\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>(F, y). ((F, D), y)) fs) (F, D) =\n    \\<lfloor>T\\<rfloor> \\<Longrightarrow>\n    map_of fs F = \\<lfloor>T\\<rfloor>", "by (induct fs) (auto simp:fun_upd_apply split: if_split_asm)"], ["", "(*>*)"], ["", "lemma map_of_filtered_SomeD:\n\"map_of fs (F,D) = Some (a, T) \\<Longrightarrow> Q ((F,D),a,T) \\<Longrightarrow>\n       map_of (map (\\<lambda>((F,D), b, T). ((F,D), P T)) (filter Q fs))\n        (F,D) = Some (P T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_of fs (F, D) = \\<lfloor>(a, T)\\<rfloor>;\n     Q ((F, D), a, T)\\<rbrakk>\n    \\<Longrightarrow> map_of\n                       (map (\\<lambda>((F, D), b, T). ((F, D), P T))\n                         (filter Q fs))\n                       (F, D) =\n                      \\<lfloor>P T\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_of fs (F, D) = \\<lfloor>(a, T)\\<rfloor>;\n     Q ((F, D), a, T)\\<rbrakk>\n    \\<Longrightarrow> map_of\n                       (map (\\<lambda>((F, D), b, T). ((F, D), P T))\n                         (filter Q fs))\n                       (F, D) =\n                      \\<lfloor>P T\\<rfloor>", "by (induct fs) (auto simp:fun_upd_apply split: if_split_asm)"], ["", "(*>*)"], ["", "lemma map_of_remove_filtered_SomeD:\n\"map_of fs (F,C) = Some (a, T) \\<Longrightarrow> Q ((F,C),a,T) \\<Longrightarrow>\n       map_of (map (\\<lambda>((F,D), b, T). (F, P T)) [((F, D), b, T)\\<leftarrow>fs . Q ((F, D), b, T) \\<and> D = C])\n        F = Some (P T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_of fs (F, C) = \\<lfloor>(a, T)\\<rfloor>;\n     Q ((F, C), a, T)\\<rbrakk>\n    \\<Longrightarrow> map_of\n                       (map (\\<lambda>((F, D), b, T). (F, P T))\n                         (filter\n                           (\\<lambda>((F, D), b, T).\n                               Q ((F, D), b, T) \\<and> D = C)\n                           fs))\n                       F =\n                      \\<lfloor>P T\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_of fs (F, C) = \\<lfloor>(a, T)\\<rfloor>;\n     Q ((F, C), a, T)\\<rbrakk>\n    \\<Longrightarrow> map_of\n                       (map (\\<lambda>((F, D), b, T). (F, P T))\n                         (filter\n                           (\\<lambda>((F, D), b, T).\n                               Q ((F, D), b, T) \\<and> D = C)\n                           fs))\n                       F =\n                      \\<lfloor>P T\\<rfloor>", "by (induct fs) (auto simp:fun_upd_apply split: if_split_asm)"], ["", "(*>*)"], ["", "lemma map_of_Some_None_split:\nassumes \"t = map (\\<lambda>(F, y). ((F, C), y)) fs @ t'\" \"map_of t' (F, C) = None\" \"map_of t (F, C) = Some y\"\nshows \"map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F = Some (C, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "have \"map_of (map (\\<lambda>(F, y). ((F, C), y)) fs) (F, C) = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>(F, y). ((F, C), y)) fs) (F, C) =\n    \\<lfloor>y\\<rfloor>", "using assms"], ["proof (prove)\nusing this:\n  t = map (\\<lambda>(F, y). ((F, C), y)) fs @ t'\n  map_of t' (F, C) = None\n  map_of t (F, C) = \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>(F, y). ((F, C), y)) fs) (F, C) =\n    \\<lfloor>y\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  map_of (map (\\<lambda>(F, y). ((F, C), y)) fs) (F, C) =\n  \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "then"], ["proof (chain)\npicking this:\n  map_of (map (\\<lambda>(F, y). ((F, C), y)) fs) (F, C) =\n  \\<lfloor>y\\<rfloor>", "have \"\\<forall>p. map_of fs F = Some p \\<or> Some y \\<noteq> Some p\""], ["proof (prove)\nusing this:\n  map_of (map (\\<lambda>(F, y). ((F, C), y)) fs) (F, C) =\n  \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       map_of fs F = \\<lfloor>p\\<rfloor> \\<or>\n       \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>", "by (metis map_of_reinsert_SomeD)"], ["proof (state)\nthis:\n  \\<forall>p.\n     map_of fs F = \\<lfloor>p\\<rfloor> \\<or>\n     \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "then"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     map_of fs F = \\<lfloor>p\\<rfloor> \\<or>\n     \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>", "have \"\\<forall>f b p pa. ((f ++ map_of (map (\\<lambda>(a, p). (a, b::'b, p)) fs)) F = Some p \\<or> Some (b, pa) \\<noteq> Some p)\n     \\<or> Some y \\<noteq> Some pa\""], ["proof (prove)\nusing this:\n  \\<forall>p.\n     map_of fs F = \\<lfloor>p\\<rfloor> \\<or>\n     \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<forall>f b p pa.\n       ((f ++ map_of (map (\\<lambda>(a, p). (a, b, p)) fs)) F =\n        \\<lfloor>p\\<rfloor> \\<or>\n        \\<lfloor>(b, pa)\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>) \\<or>\n       \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>pa\\<rfloor>", "by (metis (no_types) map_add_find_right map_of_insertmap_SomeD')"], ["proof (state)\nthis:\n  \\<forall>f b p pa.\n     ((f ++ map_of (map (\\<lambda>(a, p). (a, b, p)) fs)) F =\n      \\<lfloor>p\\<rfloor> \\<or>\n      \\<lfloor>(b, pa)\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>) \\<or>\n     \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>pa\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "then"], ["proof (chain)\npicking this:\n  \\<forall>f b p pa.\n     ((f ++ map_of (map (\\<lambda>(a, p). (a, b, p)) fs)) F =\n      \\<lfloor>p\\<rfloor> \\<or>\n      \\<lfloor>(b, pa)\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>) \\<or>\n     \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>pa\\<rfloor>", "have \"(map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t')\n                     ++ map_of (map (\\<lambda>(a, p). (a, C, p)) fs)) F = Some (C, y)\""], ["proof (prove)\nusing this:\n  \\<forall>f b p pa.\n     ((f ++ map_of (map (\\<lambda>(a, p). (a, b, p)) fs)) F =\n      \\<lfloor>p\\<rfloor> \\<or>\n      \\<lfloor>(b, pa)\\<rfloor> \\<noteq> \\<lfloor>p\\<rfloor>) \\<or>\n     \\<lfloor>y\\<rfloor> \\<noteq> \\<lfloor>pa\\<rfloor>\n\ngoal (1 subgoal):\n 1. (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n     map_of (map (\\<lambda>(a, p). (a, C, p)) fs))\n     F =\n    \\<lfloor>(C, y)\\<rfloor>", "by blast"], ["proof (state)\nthis:\n  (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n   map_of (map (\\<lambda>(a, p). (a, C, p)) fs))\n   F =\n  \\<lfloor>(C, y)\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "then"], ["proof (chain)\npicking this:\n  (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n   map_of (map (\\<lambda>(a, p). (a, C, p)) fs))\n   F =\n  \\<lfloor>(C, y)\\<rfloor>", "have \"(map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t')\n      ++ map_of (map ((\\<lambda>((a, b), c, d). (a, b, c, d)) \\<circ> (\\<lambda>(a, y). ((a, C), y))) fs)) F = Some (C, y)\""], ["proof (prove)\nusing this:\n  (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n   map_of (map (\\<lambda>(a, p). (a, C, p)) fs))\n   F =\n  \\<lfloor>(C, y)\\<rfloor>\n\ngoal (1 subgoal):\n 1. (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n     map_of\n      (map ((\\<lambda>((a, b), c, d). (a, b, c, d)) \\<circ>\n            (\\<lambda>(a, y). ((a, C), y)))\n        fs))\n     F =\n    \\<lfloor>(C, y)\\<rfloor>", "by (simp add: map_of_remap_insertmap)"], ["proof (state)\nthis:\n  (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n   map_of\n    (map ((\\<lambda>((a, b), c, d). (a, b, c, d)) \\<circ>\n          (\\<lambda>(a, y). ((a, C), y)))\n      fs))\n   F =\n  \\<lfloor>(C, y)\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "then"], ["proof (chain)\npicking this:\n  (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n   map_of\n    (map ((\\<lambda>((a, b), c, d). (a, b, c, d)) \\<circ>\n          (\\<lambda>(a, y). ((a, C), y)))\n      fs))\n   F =\n  \\<lfloor>(C, y)\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n   map_of\n    (map ((\\<lambda>((a, b), c, d). (a, b, c, d)) \\<circ>\n          (\\<lambda>(a, y). ((a, C), y)))\n      fs))\n   F =\n  \\<lfloor>(C, y)\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "using assms"], ["proof (prove)\nusing this:\n  (map_of (map (\\<lambda>((a, b), c, d). (a, b, c, d)) t') ++\n   map_of\n    (map ((\\<lambda>((a, b), c, d). (a, b, c, d)) \\<circ>\n          (\\<lambda>(a, y). ((a, C), y)))\n      fs))\n   F =\n  \\<lfloor>(C, y)\\<rfloor>\n  t = map (\\<lambda>(F, y). ((F, C), y)) fs @ t'\n  map_of t' (F, C) = None\n  map_of t (F, C) = \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n    \\<lfloor>(C, y)\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  map_of (map (\\<lambda>((F, D), b, T). (F, D, b, T)) t) F =\n  \\<lfloor>(C, y)\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "end"]]}