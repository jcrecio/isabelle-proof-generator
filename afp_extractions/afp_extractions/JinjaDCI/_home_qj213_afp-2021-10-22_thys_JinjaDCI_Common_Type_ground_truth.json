{"file_name": "/home/qj213/afp-2021-10-22/thys/JinjaDCI/Common/Type.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/JinjaDCI", "problem_names": ["lemma start_m_neq_clinit [simp]: \"start_m \\<noteq> clinit\"", "lemma Object_neq_Start [simp]: \"Object \\<noteq> Start\"", "lemma Start_neq_Object [simp]: \"Start \\<noteq> Object\"", "lemma [iff]: \"is_refT NT\"", "lemma [iff]: \"is_refT(Class C)\"", "lemma refTE:\n  \"\\<lbrakk>is_refT T; T = NT \\<Longrightarrow> P; \\<And>C. T = Class C \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma not_refTE:\n  \"\\<lbrakk> \\<not>is_refT T; T = Void \\<or> T = Boolean \\<or> T = Integer \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], "translations": [["", "lemma start_m_neq_clinit [simp]: \"start_m \\<noteq> clinit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. start_m \\<noteq> clinit", "by(simp add: start_m_def clinit_def)"], ["", "lemma Object_neq_Start [simp]: \"Object \\<noteq> Start\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Object \\<noteq> Start", "by(simp add: Object_def Start_def)"], ["", "lemma Start_neq_Object [simp]: \"Start \\<noteq> Object\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Start \\<noteq> Object", "by(simp add: Object_def Start_def)\n\n\\<comment> \\<open>field/method static flag\\<close>"], ["", "datatype staticb = Static | NonStatic\n\n\\<comment> \\<open>types\\<close>"], ["", "datatype ty\n  = Void          \\<comment> \\<open>type of statements\\<close>\n  | Boolean\n  | Integer\n  | NT            \\<comment> \\<open>null type\\<close>\n  | Class cname   \\<comment> \\<open>class type\\<close>"], ["", "definition is_refT :: \"ty \\<Rightarrow> bool\"\nwhere\n  \"is_refT T  \\<equiv>  T = NT \\<or> (\\<exists>C. T = Class C)\""], ["", "lemma [iff]: \"is_refT NT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_refT NT", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_refT NT", "by(simp add:is_refT_def)"], ["", "(*>*)"], ["", "lemma [iff]: \"is_refT(Class C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_refT (Class C)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_refT (Class C)", "by(simp add:is_refT_def)"], ["", "(*>*)"], ["", "lemma refTE:\n  \"\\<lbrakk>is_refT T; T = NT \\<Longrightarrow> P; \\<And>C. T = Class C \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_refT T; T = NT \\<Longrightarrow> P;\n     \\<And>C. T = Class C \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_refT T; T = NT \\<Longrightarrow> P;\n     \\<And>C. T = Class C \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto simp add: is_refT_def)"], ["", "(*>*)"], ["", "lemma not_refTE:\n  \"\\<lbrakk> \\<not>is_refT T; T = Void \\<or> T = Boolean \\<or> T = Integer \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> is_refT T;\n     T = Void \\<or> T = Boolean \\<or> T = Integer \\<Longrightarrow>\n     P\\<rbrakk>\n    \\<Longrightarrow> P", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> is_refT T;\n     T = Void \\<or> T = Boolean \\<or> T = Integer \\<Longrightarrow>\n     P\\<rbrakk>\n    \\<Longrightarrow> P", "by (cases T, auto simp add: is_refT_def)"], ["", "(*>*)"], ["", "end"]]}