{"file_name": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream/IL_AF_Stream_Exec.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream", "problem_names": ["lemma i_Exec_Stream_Pre_Post1_iAll: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream trans_fun input c;\n    \\<forall>x_n c_n. P1 x_n \\<and> P2 c_n \\<longrightarrow> Q (trans_fun x_n c_n) \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P1 (input t) \\<and> P2 (result\\<^bsup>\\<leftarrow> c\\<^esup> t) \\<longrightarrow> Q (result t))\"", "lemma i_Exec_Stream_Pre_Post2_iAll: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream trans_fun input c;\n    \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n) \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. P (result\\<^bsup>\\<leftarrow> c\\<^esup> t) \\<longrightarrow> Q (input t) (result t)\"", "lemma i_Exec_Stream_Pre_Post3_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream trans_fun input c;\n    \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. P (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (input t1) (result t1))\"", "lemma i_Exec_Stream_Init_Pre_Post1_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream_Init trans_fun input c;\n    \\<forall>x_n c_n. P1 x_n \\<and> P2 c_n \\<longrightarrow> Q (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P1 (input t) \\<and> P2 (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (result t1)))\"", "lemma i_Exec_Stream_Init_Pre_Post2_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream_Init trans_fun input c;\n    \\<forall>x_n c_n. P x_n c_n \\<longrightarrow> Q (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P (input t) (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (result t1)))\"", "lemma i_Exec_Stream_Init_Pre_Post3_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream_Init trans_fun input c;\n    \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (input\\<^bsup>\\<leftarrow> \\<NoMsg>\\<^esup> t1) (result t1)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv: \"\n  0 < k \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (\\<box> t1 [t * k\\<dots>,k - Suc 0]. (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) t1 = \\<NoMsg>)\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv2: \"\n  0 < k \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (\\<box> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) t1 = \\<NoMsg>)\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_conv: \"\n  0 < k \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (\\<box> t1 [Suc (t * k)\\<dots>,k - Suc 0]. (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) t1 = \\<NoMsg>)\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iEx_iAll_cut_greater_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (\\<diamond> t1 [t * k\\<dots>,k - Suc 0]. (s t1 = m \\<and>\n    (\\<box> t2 [t * k\\<dots>,k - Suc 0] \\<down>> t1 . s t2 = \\<NoMsg>)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iEx_iAll_cut_greater_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (\\<diamond> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). (s t1 = m \\<and>\n    (\\<box> t2 ([\\<dots>k - Suc 0] \\<oplus> (t * k)) \\<down>> t1 . s t2 = \\<NoMsg>)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m)\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). s t1 = m)\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iSince_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [Suc (t * k)\\<dots>,k - Suc 0]. s t1 = m)\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv: \"\n  \\<lbrakk> 0 < k; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((m = \\<NoMsg> \\<longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0]. s t1 = \\<NoMsg>)) \\<and>\n  ((m \\<noteq> \\<NoMsg> \\<longrightarrow> (s t2 = \\<NoMsg>. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv2: \"\n  \\<lbrakk> 0 < k; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((m = \\<NoMsg> \\<longrightarrow> (\\<box> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). s t1 = \\<NoMsg>)) \\<and>\n  ((m \\<noteq> \\<NoMsg> \\<longrightarrow> (s t2 = \\<NoMsg>. t2 \\<S> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). s t1 = m))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_start_event_conv: \"\n  \\<lbrakk> 0 < k; \\<And> t. event t = (t mod k = 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_start_event_conv: \"\n  \\<lbrakk> 0 < k; \\<And> t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_start_event2_conv: \"\n  \\<lbrakk> Suc 0 < k; \\<And> t. event t = (t mod k = Suc 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iUntil_start_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_start_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_start_event2_conv: \"\n  \\<lbrakk> Suc 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = Suc 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_finish_event_conv: \"\n  \\<lbrakk> Suc 0 < k; \\<And> t. event t = (t mod k = k - Suc 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2 \\<and> s t2 = \\<NoMsg>)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_finish_event_conv: \"\n  \\<lbrakk> Suc 0 < k; \\<And> t. event t = (t mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2 \\<and> s t2 = \\<NoMsg>)))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iUntil_finish_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And> t. event t = (t mod k = k - Suc 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). event t2 \\<and> s t2 = m) \\<or>\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\\<not> event t2 \\<and> s t2 = m \\<and> (\n    \\<circle> t' t2 [0\\<dots>]. (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t'). event t4 \\<and> s t4 = \\<NoMsg>)))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_finish_event_conv: \"\n  \\<lbrakk> Suc 0 < k; m \\<noteq> \\<NoMsg>; \\<And> t. event t = (t mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). event t2 \\<and> s t2 = m) \\<or>\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\\<not> event t2 \\<and> s t2 = m \\<and> (\n    \\<circle> t' t2 [0\\<dots>]. (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t'). event t4 \\<and> s t4 = \\<NoMsg>)))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_State_Idle_conv: \"\n  \\<lbrakk> 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = \\<NoMsg>) =\n  (output_fun (s t1) = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\n   output_fun (s t2) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t2))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_imp: \"\n  \\<lbrakk> 0 < k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t0 = t * k;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    State_Idle localState output_fun trans_fun (localState (s t1));\n    output_fun (s t1) \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = output_fun (s t1)\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv2: \"\n  \\<lbrakk> 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    State_Idle localState output_fun trans_fun (localState (s t1));\n    output_fun (s t1) \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv: \"\n  \\<lbrakk> 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    State_Idle localState output_fun trans_fun (localState (s t1));\n    output_fun (s t1) \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  ((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0. (\n      (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    output_fun (s t1) = m;\n    \\<circle> t2 t1 [0\\<dots>].\n     ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n      (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4))))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    \\<box> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. \\<not> (\n      State_Idle localState output_fun trans_fun (localState (s t1)) \\<and>\n      output_fun (s t1) \\<noteq> \\<NoMsg>) \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n     (output_fun (s t1) = m) \\<and>\n     (\\<circle> t2 t1 [0\\<dots>].\n      ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n      (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    (\\<not> State_Idle localState output_fun trans_fun (localState (s t1))). t1 \\<U> t2 [0\\<dots>] \\<oplus> t0. (\n    (output_fun (s t2) = m) \\<and>\n    (\\<circle> t3 t2 [0\\<dots>].\n      ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n       (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    \\<box> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. \\<not> (\n      State_Idle localState output_fun trans_fun (localState (s t1)) \\<and>\n      output_fun (s t1) \\<noteq> \\<NoMsg>) \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  ((\\<not> State_Idle localState output_fun trans_fun (localState (s t1))). t1 \\<U> t2 [0\\<dots>] \\<oplus> t0. (\n     (output_fun (s t2) = m) \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n       ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n        (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n    output_fun (s t1) = m \\<and>\n    (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n    (\\<circle> t2 t1 [0\\<dots>].\n      ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n       (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4)))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2': \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  ((\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))) \\<or>\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      ((output_fun (s t1) = m) \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n          ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n           (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4))))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iAll_iUntil_State_Idle_conv2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) = (\n  (m = \\<NoMsg> \\<longrightarrow>\n    (output_fun (s t1) = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\n     output_fun (s t2) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t2))))) \\<and>\n  (m \\<noteq> \\<NoMsg> \\<longrightarrow>\n    (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      output_fun (s t1) = m \\<and>\n      (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n      (\\<circle> t2 t1 [0\\<dots>].\n        ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n         (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4)))))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv': \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))) \\<or>\n  ((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n   (output_fun (s t1) = m \\<and>\n   (\\<circle> t3 t1 [0\\<dots>].\n     ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n      (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5)))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and>\n      (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n      (\\<circle> t3 t1 [0\\<dots>].\n          ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n           (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iUntil_State_Idle_conv: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) = (\n  (m = \\<NoMsg> \\<longrightarrow>\n    (output_fun (s t1) = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\n     output_fun (s t2) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t2))))) \\<and>\n  (m \\<noteq> \\<NoMsg> \\<longrightarrow>\n    (((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n      (output_fun (s t1) = m \\<and>\n        (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n        (\\<circle> t3 t1 [0\\<dots>].\n            ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n             (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))))))))\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iUntil_imp1: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    (\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\"", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iUntil_imp2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    (\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and>\n    (\\<circle> t3 t1 [0\\<dots>].\n      ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n       (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\""], "translations": [["", "lemma i_Exec_Stream_Pre_Post1_iAll: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream trans_fun input c;\n    \\<forall>x_n c_n. P1 x_n \\<and> P2 c_n \\<longrightarrow> Q (trans_fun x_n c_n) \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P1 (input t) \\<and> P2 (result\\<^bsup>\\<leftarrow> c\\<^esup> t) \\<longrightarrow> Q (result t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>result = i_Exec_Comp_Stream trans_fun input c;\n     \\<forall>x_n c_n.\n        P1 x_n \\<and> P2 c_n \\<longrightarrow>\n        Q (trans_fun x_n c_n)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I.\n                         P1 (input t) \\<and>\n                         P2 (result\\<^bsup>\\<leftarrow> c\\<^esup> t) \\<longrightarrow>\n                         Q (result t)", "by (simp add: i_Exec_Stream_Pre_Post1)"], ["", "text \\<open>Direct relation between input and result after transition\\<close>"], ["", "lemma i_Exec_Stream_Pre_Post2_iAll: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream trans_fun input c;\n    \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n) \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. P (result\\<^bsup>\\<leftarrow> c\\<^esup> t) \\<longrightarrow> Q (input t) (result t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>result = i_Exec_Comp_Stream trans_fun input c;\n     \\<forall>x_n c_n.\n        P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I.\n                         P (result\\<^bsup>\\<leftarrow> c\\<^esup> t) \\<longrightarrow>\n                         Q (input t) (result t)", "by (simp add: i_Exec_Stream_Pre_Post2)"], ["", "lemma i_Exec_Stream_Pre_Post3_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream trans_fun input c;\n    \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. P (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (input t1) (result t1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>result = i_Exec_Comp_Stream trans_fun input c;\n     \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n     \\<forall>t\\<in>I. inext t I' = Suc t\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I.\n                         P (result t) \\<longrightarrow>\n                         (\\<circle> t1 t I'. Q (input t1) (result t1))", "by (rule iallI, simp add: iNext_def i_Exec_Stream_Pre_Post2_Suc)"], ["", "lemma i_Exec_Stream_Init_Pre_Post1_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream_Init trans_fun input c;\n    \\<forall>x_n c_n. P1 x_n \\<and> P2 c_n \\<longrightarrow> Q (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P1 (input t) \\<and> P2 (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (result t1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>result = i_Exec_Comp_Stream_Init trans_fun input c;\n     \\<forall>x_n c_n.\n        P1 x_n \\<and> P2 c_n \\<longrightarrow> Q (trans_fun x_n c_n);\n     \\<forall>t\\<in>I. inext t I' = Suc t\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I.\n                         P1 (input t) \\<and> P2 (result t) \\<longrightarrow>\n                         (\\<circle> t1 t I'. Q (result t1))", "by (rule iallI, simp add: iNext_def i_Exec_Stream_Init_Pre_Post1)"], ["", "text \\<open>Direct relation between input and state before transition\\<close>"], ["", "lemma i_Exec_Stream_Init_Pre_Post2_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream_Init trans_fun input c;\n    \\<forall>x_n c_n. P x_n c_n \\<longrightarrow> Q (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P (input t) (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (result t1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>result = i_Exec_Comp_Stream_Init trans_fun input c;\n     \\<forall>x_n c_n. P x_n c_n \\<longrightarrow> Q (trans_fun x_n c_n);\n     \\<forall>t\\<in>I. inext t I' = Suc t\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I.\n                         P (input t) (result t) \\<longrightarrow>\n                         (\\<circle> t1 t I'. Q (result t1))", "by (rule iallI, simp add: iNext_def i_Exec_Stream_Init_Pre_Post2)"], ["", "text \\<open>Relation between input and output\\<close>"], ["", "lemma i_Exec_Stream_Init_Pre_Post3_iAll_iNext: \"\n  \\<lbrakk> result = i_Exec_Comp_Stream_Init trans_fun input c;\n    \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n    \\<forall>t\\<in>I. inext t I' = Suc t \\<rbrakk> \\<Longrightarrow>\n  \\<box> t I. (P (result t) \\<longrightarrow> (\\<circle> t1 t I'. Q (input\\<^bsup>\\<leftarrow> \\<NoMsg>\\<^esup> t1) (result t1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>result = i_Exec_Comp_Stream_Init trans_fun input c;\n     \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n     \\<forall>t\\<in>I. inext t I' = Suc t\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I.\n                         P (result t) \\<longrightarrow>\n                         (\\<circle> t1 t I'.\n                             Q (input\\<^bsup>\\<leftarrow> NoMsg\\<^esup> t1)\n                              (result t1))", "apply (rule iallI, unfold iNext_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>result = i_Exec_Comp_Stream_Init trans_fun input c;\n        \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n        \\<forall>t\\<in>I. inext t I' = Suc t; t \\<in> I\\<rbrakk>\n       \\<Longrightarrow> P (result t) \\<longrightarrow>\n                         Q (input\\<^bsup>\\<leftarrow> NoMsg\\<^esup> inext t\n                               I')\n                          (result (inext t I'))", "apply (simp add: ilist_Previous_Suc i_Exec_Stream_Init_nth_Suc_eq_i_Exec_Stream_nth i_Exec_Stream_Previous_i_Exec_Stream_Init)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>result = i_Exec_Comp_Stream_Init trans_fun input c;\n        \\<forall>x_n c_n. P c_n \\<longrightarrow> Q x_n (trans_fun x_n c_n);\n        \\<forall>t\\<in>I. inext t I' = Suc t; t \\<in> I\\<rbrakk>\n       \\<Longrightarrow> P ((i_Exec_Comp_Stream trans_fun input\n                              c)\\<^bsup>\\<leftarrow> c\\<^esup> t) \\<longrightarrow>\n                         Q (input t)\n                          (i_Exec_Comp_Stream trans_fun input c t)", "apply (blast dest: i_Exec_Stream_Pre_Post2_iAll[OF refl])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>\\<open>i_Exec_Comp_Stream_Acc_Output\\<close> and temporal operators with bounded intervals.\\<close>"], ["", "text \\<open>Temporal relation between uncompressed and compressed output of accelerated components.\\<close>"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv: \"\n  0 < k \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (\\<box> t1 [t * k\\<dots>,k - Suc 0]. (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) t1 = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n     NoMsg) =\n    (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n        (output_fun \\<circ>\n         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n         t1 =\n        NoMsg)", "by (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_NoMsg_iAll_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv2: \"\n  0 < k \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (\\<box> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) t1 = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n     NoMsg) =\n    (\\<box> t1 [\\<dots>k - Suc 0] \\<oplus> t * k.\n        (output_fun \\<circ>\n         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n         t1 =\n        NoMsg)", "by (simp add: iT_add i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_conv: \"\n  0 < k \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (\\<box> t1 [Suc (t * k)\\<dots>,k - Suc 0]. (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) t1 = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n     NoMsg) =\n    (\\<box> t1 [Suc (t * k)\\<dots>,k - Suc 0].\n        (output_fun \\<circ>\n         i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c)\n         t1 =\n        NoMsg)", "apply (unfold i_Exec_Comp_Stream_Acc_Output_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (((output_fun \\<circ>\n       i_Exec_Comp_Stream trans_fun (input \\<odot> k) c) \\<div>\n      k)\n      t =\n     NoMsg) =\n    (\\<box> t1 [Suc (t * k)\\<dots>,k - Suc 0].\n        (output_fun \\<circ>\n         i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c)\n         t1 =\n        NoMsg)", "apply (simp add: i_shrink_eq_NoMsg_iAll_conv i_Exec_Stream_Init_eq_i_Exec_Stream_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg) =\n    (\\<box> t1 [Suc (t * k)\\<dots>,k - Suc 0].\n        ([output_fun c] \\<frown>\n         (output_fun \\<circ>\n          i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n         t1 =\n        NoMsg)", "apply (rule_tac t=\"[Suc (t * k)\\<dots>,k - Suc 0]\" and s=\"[t * k\\<dots>,k - Suc 0] \\<oplus> 1\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < k \\<Longrightarrow>\n    [t * k\\<dots>,k - Suc 0] \\<oplus> 1 = [Suc (t * k)\\<dots>,k - Suc 0]\n 2. 0 < k \\<Longrightarrow>\n    (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg) =\n    (\\<box> t1 [t * k\\<dots>,k - Suc 0] \\<oplus> 1.\n        ([output_fun c] \\<frown>\n         (output_fun \\<circ>\n          i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n         t1 =\n        NoMsg)", "apply (simp add: iIN_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg) =\n    (\\<box> t1 [t * k\\<dots>,k - Suc 0] \\<oplus> 1.\n        ([output_fun c] \\<frown>\n         (output_fun \\<circ>\n          i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n         t1 =\n        NoMsg)", "apply (simp add: iT_Plus_iAll_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iEx_iAll_cut_greater_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (\\<diamond> t1 [t * k\\<dots>,k - Suc 0]. (s t1 = m \\<and>\n    (\\<box> t2 [t * k\\<dots>,k - Suc 0] \\<down>> t1 . s t2 = \\<NoMsg>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [t * k\\<dots>,k - Suc 0].\n                          s t1 = m \\<and>\n                          (\\<box> t2 [t * k\\<dots>,k - Suc 0] \\<down>> t1.\n                              s t2 = NoMsg))", "by (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_Msg_iEx_iAll_cut_greater_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iEx_iAll_cut_greater_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (\\<diamond> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). (s t1 = m \\<and>\n    (\\<box> t2 ([\\<dots>k - Suc 0] \\<oplus> (t * k)) \\<down>> t1 . s t2 = \\<NoMsg>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [\\<dots>k - Suc 0] \\<oplus> t * k.\n                          s t1 = m \\<and>\n                          (\\<box> t2 ([\\<dots>k - Suc 0] \\<oplus>\nt * k) \\<down>>\n                                     t1.\n                              s t2 = NoMsg))", "by (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_Msg_iEx_iAll_cut_greater_conv2)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (s t2 = NoMsg. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                       s t1 = m)", "by (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_Msg_iSince_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). s t1 = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (s t2 = NoMsg.\n                       t2 \\<S> t1 [\\<dots>k - Suc 0] \\<oplus> t * k.\n                       s t1 = m)", "by (simp add: i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv iT_add)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iSince_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [Suc (t * k)\\<dots>,k - Suc 0]. s t1 = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (s t2 = NoMsg.\n                       t2 \\<S> t1 [Suc (t * k)\\<dots>,k - Suc 0]. s t1 = m)", "apply (unfold i_Exec_Comp_Stream_Acc_Output_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (((output_fun \\<circ>\n                         i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                          c) \\<div>\n                        k)\n                        t =\n                       m) =\n                      (s t2 = NoMsg.\n                       t2 \\<S> t1 [Suc (t * k)\\<dots>,k - Suc 0]. s t1 = m)", "apply (simp add: i_shrink_eq_Msg_iSince_conv i_Exec_Stream_Init_eq_i_Exec_Stream_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t2) =\n                       NoMsg.\n                       t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       m) =\n                      (([output_fun c] \\<frown>\n                        (output_fun \\<circ>\n                         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n                        t2 =\n                       NoMsg.\n                       t2 \\<S> t1 [Suc (t * k)\\<dots>,k - Suc 0].\n                       ([output_fun c] \\<frown>\n                        (output_fun \\<circ>\n                         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n                        t1 =\n                       m)", "apply (rule_tac t=\"[Suc (t * k)\\<dots>,k - Suc 0]\" and s=\"[t * k\\<dots>,k - Suc 0] \\<oplus> 1\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> [t * k\\<dots>,k - Suc 0] \\<oplus> 1 =\n                      [Suc (t * k)\\<dots>,k - Suc 0]\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t2) =\n                       NoMsg.\n                       t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       m) =\n                      (([output_fun c] \\<frown>\n                        (output_fun \\<circ>\n                         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n                        t2 =\n                       NoMsg.\n                       t2 \\<S> t1 [t * k\\<dots>,k - Suc 0] \\<oplus> 1.\n                       ([output_fun c] \\<frown>\n                        (output_fun \\<circ>\n                         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n                        t1 =\n                       m)", "apply (simp add: iIN_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t2) =\n                       NoMsg.\n                       t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       m) =\n                      (([output_fun c] \\<frown>\n                        (output_fun \\<circ>\n                         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n                        t2 =\n                       NoMsg.\n                       t2 \\<S> t1 [t * k\\<dots>,k - Suc 0] \\<oplus> 1.\n                       ([output_fun c] \\<frown>\n                        (output_fun \\<circ>\n                         i_Exec_Comp_Stream trans_fun (input \\<odot> k) c))\n                        t1 =\n                       m)", "apply (simp add: iT_Plus_iSince_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv: \"\n  \\<lbrakk> 0 < k; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((m = \\<NoMsg> \\<longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0]. s t1 = \\<NoMsg>)) \\<and>\n  ((m \\<noteq> \\<NoMsg> \\<longrightarrow> (s t2 = \\<NoMsg>. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                            s t1 = NoMsg)) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (s t2 = NoMsg. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                         s t1 = m)))", "apply (case_tac \"m = \\<NoMsg>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k;\n     s =\n     output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m = NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                            s t1 = NoMsg)) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (s t2 = NoMsg. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                         s t1 = m)))\n 2. \\<lbrakk>0 < k;\n     s =\n     output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                            s t1 = NoMsg)) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (s t2 = NoMsg. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                         s t1 = m)))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     s =\n     output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                            s t1 = NoMsg)) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (s t2 = NoMsg. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                         s t1 = m)))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv2: \"\n  \\<lbrakk> 0 < k; s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((m = \\<NoMsg> \\<longrightarrow> (\\<box> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). s t1 = \\<NoMsg>)) \\<and>\n  ((m \\<noteq> \\<NoMsg> \\<longrightarrow> (s t2 = \\<NoMsg>. t2 \\<S> t1 [\\<dots>k - Suc 0] \\<oplus> (t * k). s t1 = m))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (\\<box> t1 [\\<dots>k - Suc 0] \\<oplus> t * k.\n                            s t1 = NoMsg)) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (s t2 = NoMsg.\n                         t2 \\<S> t1 [\\<dots>k - Suc 0] \\<oplus> t * k.\n                         s t1 = m)))", "by (simp add: i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv iT_add)"], ["", "subsection \\<open>\\<open>i_Exec_Comp_Stream_Acc_Output\\<close> and temporal operators with unbounded intervals and start/finish events.\\<close>"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_start_event_conv: \"\n  \\<lbrakk> 0 < k; \\<And> t. event t = (t mod k = 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))", "by (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_NoMsg_iAll_start_event_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_start_event_conv: \"\n  \\<lbrakk> 0 < k; \\<And> t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = ((t + k - Suc 0) mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_NoMsg_iAll_start_event_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = ((t + k - Suc 0) mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (\\<circle> t' t * k [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t1) =\n                           NoMsg.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           t2 mod k = 0)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k)\n                          c (Suc (t * k))) =\n                       NoMsg \\<and>\n                       (\\<circle> t' Suc (t * k) [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream_Init trans_fun\n                              (input \\<odot> k) c t1) =\n                           NoMsg.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           (t2 + k - Suc 0) mod k = 0))", "apply (simp add: iT_add iNext_def iFROM_inext iT_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = ((t + k - Suc 0) mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>]. t2 mod k = 0)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k)\n                          c (Suc (t * k))) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        (t2 + k - Suc 0) mod k = 0))", "apply (simp add: i_Exec_Stream_Init_eq_i_Exec_Stream_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = ((t + k - Suc 0) mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>]. t2 mod k = 0)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        (t2 + k - Suc 0) mod k = 0))", "apply (rule_tac t=\"[Suc (Suc (t*k))\\<dots>]\" and s=\"[Suc (t*k)\\<dots>] \\<oplus> Suc 0\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = ((t + k - Suc 0) mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> [Suc (t * k)\\<dots>] \\<oplus> Suc 0 =\n                      [Suc (Suc (t * k))\\<dots>]\n 2. \\<lbrakk>0 < k; \\<And>t. event t = ((t + k - Suc 0) mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>]. t2 mod k = 0)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>] \\<oplus> Suc 0.\n                        (t2 + k - Suc 0) mod k = 0))", "apply (simp add: iFROM_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = ((t + k - Suc 0) mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>]. t2 mod k = 0)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>] \\<oplus> Suc 0.\n                        (t2 + k - Suc 0) mod k = 0))", "apply (simp add: iT_Plus_iUntil_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_start_event2_conv: \"\n  \\<lbrakk> Suc 0 < k; \\<And> t. event t = (t mod k = Suc 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0);\n     t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))", "by (simp add: i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_start_event_conv mod_eq_Suc_0_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iUntil_start_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = t * k;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))", "by (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_Msg_iUntil_start_event_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_start_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_Msg_iUntil_start_event_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (\\<circle> t' t * k [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t1) =\n                           NoMsg.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           t2 mod k = 0) \\<or>\n                       (\\<circle> t' t * k [0\\<dots>].\n                           0 < t1 mod k. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t2) =\n                           m \\<and>\n                           0 < t2 mod k \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               output_fun\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t3) =\n                               NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               t4 mod k = 0))) =\n                      (output_fun\n                        (i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k)\n                          c (Suc (t * k))) =\n                       m \\<and>\n                       (\\<circle> t' Suc (t * k) [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream_Init trans_fun\n                              (input \\<odot> k) c t1) =\n                           NoMsg.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           (t2 + k - Suc 0) mod k = 0) \\<or>\n                       (\\<circle> t' Suc (t * k) [0\\<dots>].\n                           0 < (t1 + k - Suc 0) mod k.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           output_fun\n                            (i_Exec_Comp_Stream_Init trans_fun\n                              (input \\<odot> k) c t2) =\n                           m \\<and>\n                           0 < (t2 + k - Suc 0) mod k \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               output_fun\n                                (i_Exec_Comp_Stream_Init trans_fun\n                                  (input \\<odot> k) c t3) =\n                               NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               (t4 + k - Suc 0) mod k = 0)))", "apply (simp add: iNext_def iFROM_inext iFROM_iff iT_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>]. t2 mod k = 0) \\<or>\n                       (0 < t1 mod k. t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m \\<and>\n                        0 < t2 mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [Suc t2\\<dots>]. t4 mod k = 0))) =\n                      (output_fun\n                        (i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k)\n                          c (Suc (t * k))) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        (t2 + k - Suc 0) mod k = 0) \\<or>\n                       (0 < (t1 + k - Suc 0) mod k.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t2) =\n                        m \\<and>\n                        0 < (t2 + k - Suc 0) mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream_Init trans_fun\n                            (input \\<odot> k) c t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [Suc t2\\<dots>].\n                         (t4 + k - Suc 0) mod k = 0)))", "apply (simp add: i_Exec_Stream_Init_eq_i_Exec_Stream_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>]. t2 mod k = 0) \\<or>\n                       (0 < t1 mod k. t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m \\<and>\n                        0 < t2 mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [Suc t2\\<dots>]. t4 mod k = 0))) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        (t2 + k - Suc 0) mod k = 0) \\<or>\n                       (0 < (t1 + k - Suc 0) mod k.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t2) =\n                        m \\<and>\n                        0 < (t2 + k - Suc 0) mod k \\<and>\n                        (output_fun\n                          (([c] \\<frown>\n                            i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                             c)\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [Suc t2\\<dots>].\n                         (t4 + k - Suc 0) mod k = 0)))", "apply (simp only: Suc_eq_plus1 iFROM_add[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = ((t + k - (0 + 1)) mod k = 0); t0 = t * k + 1;\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [t * k\\<dots>] \\<oplus> 1.\n                        t2 mod k = 0) \\<or>\n                       (0 < t1 mod k. t1 \\<U> t2 [t * k\\<dots>] \\<oplus> 1.\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m \\<and>\n                        0 < t2 mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [t2\\<dots>] \\<oplus> 1.\n                         t4 mod k = 0))) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [t * k\\<dots>] \\<oplus> 1 \\<oplus> 1.\n                        (t2 + k - (0 + 1)) mod k = 0) \\<or>\n                       (0 < (t1 + k - (0 + 1)) mod k.\n                        t1 \\<U> t2 [t * k\\<dots>] \\<oplus> 1 \\<oplus> 1.\n                        output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t2) =\n                        m \\<and>\n                        0 < (t2 + k - (0 + 1)) mod k \\<and>\n                        (output_fun\n                          (([c] \\<frown>\n                            i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                             c)\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [t2\\<dots>] \\<oplus> 1.\n                         (t4 + k - (0 + 1)) mod k = 0)))", "apply (simp add: iT_Plus_iUntil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = ((t + k - Suc 0) mod k = 0); t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (Suc t1)) =\n                        NoMsg.\n                        t1 \\<U> t2 [t * k\\<dots>]. Suc t2 mod k = 0) \\<or>\n                       (0 < Suc t1 mod k. t1 \\<U> t2 [t * k\\<dots>].\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (Suc t2)) =\n                        m \\<and>\n                        0 < Suc t2 mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            (Suc t3)) =\n                         NoMsg.\n                         t3 \\<U> t4 [Suc t2\\<dots>]. Suc t4 mod k = 0))) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (Suc t1)) =\n                        NoMsg.\n                        t1 \\<U> t2 [t * k\\<dots>]. Suc t2 mod k = 0) \\<or>\n                       (0 < Suc t1 mod k. t1 \\<U> t2 [t * k\\<dots>].\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (Suc t2)) =\n                        m \\<and>\n                        0 < Suc t2 mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [Suc (Suc t2)\\<dots>]. t4 mod k = 0)))", "apply (simp only: Suc_eq_plus1 iFROM_add[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = ((t + k - (0 + 1)) mod k = 0); t0 = t * k + 1;\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t1 + 1)) =\n                        NoMsg.\n                        t1 \\<U> t2 [t * k\\<dots>]. (t2 + 1) mod k = 0) \\<or>\n                       (0 < (t1 + 1) mod k. t1 \\<U> t2 [t * k\\<dots>].\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t2 + 1)) =\n                        m \\<and>\n                        0 < (t2 + 1) mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            (t3 + 1)) =\n                         NoMsg.\n                         t3 \\<U> t4 [t2\\<dots>] \\<oplus> 1.\n                         (t4 + 1) mod k = 0))) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       m \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t1 + 1)) =\n                        NoMsg.\n                        t1 \\<U> t2 [t * k\\<dots>]. (t2 + 1) mod k = 0) \\<or>\n                       (0 < (t1 + 1) mod k. t1 \\<U> t2 [t * k\\<dots>].\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t2 + 1)) =\n                        m \\<and>\n                        0 < (t2 + 1) mod k \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [t2\\<dots>] \\<oplus> 1 \\<oplus> 1.\n                         t4 mod k = 0)))", "apply (simp add: iT_Plus_iUntil_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_start_event2_conv: \"\n  \\<lbrakk> Suc 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = Suc 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk> \\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = Suc 0); t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))", "by (simp add: i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_start_event_conv mod_eq_Suc_0_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_finish_event_conv: \"\n  \\<lbrakk> Suc 0 < k; \\<And> t. event t = (t mod k = k - Suc 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2 \\<and> s t2 = \\<NoMsg>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2 \\<and> s t2 = NoMsg))", "by (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_NoMsg_iAll_finish_event_conv)"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_finish_event_conv: \"\n  \\<lbrakk> Suc 0 < k; \\<And> t. event t = (t mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'. event t2 \\<and> s t2 = \\<NoMsg>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2 \\<and> s t2 = NoMsg))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_finish_event_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (\\<circle> t' t * k [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t1) =\n                           NoMsg.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           t2 mod k = k - Suc 0 \\<and>\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t2) =\n                           NoMsg)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k)\n                          c (Suc (t * k))) =\n                       NoMsg \\<and>\n                       (\\<circle> t' Suc (t * k) [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream_Init trans_fun\n                              (input \\<odot> k) c t1) =\n                           NoMsg.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           t2 mod k = 0 \\<and>\n                           output_fun\n                            (i_Exec_Comp_Stream_Init trans_fun\n                              (input \\<odot> k) c t2) =\n                           NoMsg))", "apply (simp add: iNext_def iFROM_inext iFROM_iff iT_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        NoMsg)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k)\n                          c (Suc (t * k))) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        t2 mod k = 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t2) =\n                        NoMsg))", "apply (simp add: i_Exec_Stream_Init_eq_i_Exec_Stream_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        NoMsg)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (Suc (t * k))\\<dots>].\n                        t2 mod k = 0 \\<and>\n                        output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t2) =\n                        NoMsg))", "apply (rule_tac t=\"[Suc (Suc (t * k))\\<dots>]\" and s=\"[Suc (t * k)\\<dots>] \\<oplus> 1\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> [Suc (t * k)\\<dots>] \\<oplus> 1 =\n                      [Suc (Suc (t * k))\\<dots>]\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        NoMsg)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>] \\<oplus> 1.\n                        t2 mod k = 0 \\<and>\n                        output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t2) =\n                        NoMsg))", "apply (simp add: iFROM_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        NoMsg)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>] \\<oplus> 1.\n                        t2 mod k = 0 \\<and>\n                        output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t2) =\n                        NoMsg))", "apply (simp add: iT_Plus_iUntil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = 0); t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        NoMsg)) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          (t * k)) =\n                       NoMsg \\<and>\n                       (output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        NoMsg.\n                        t1 \\<U> t2 [Suc (t * k)\\<dots>].\n                        Suc t2 mod k = 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        NoMsg))", "apply (simp add: mod_eq_divisor_minus_Suc_0_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_iUntil_finish_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And> t. event t = (t mod k = k - Suc 0); t0 = t * k;\n    s = (output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). event t2 \\<and> s t2 = m) \\<or>\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\\<not> event t2 \\<and> s t2 = m \\<and> (\n    \\<circle> t' t2 [0\\<dots>]. (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t'). event t4 \\<and> s t4 = \\<NoMsg>)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        event t2 \\<and> s t2 = m) \\<or>\n                       (\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        \\<not> event t2 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            event t4 \\<and> s t4 = NoMsg)))", "apply (case_tac \"k = Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     s =\n     output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k = Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        event t2 \\<and> s t2 = m) \\<or>\n                       (\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        \\<not> event t2 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            event t4 \\<and> s t4 = NoMsg)))\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     s =\n     output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        event t2 \\<and> s t2 = m) \\<or>\n                       (\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        \\<not> event t2 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            event t4 \\<and> s t4 = NoMsg)))", "apply (simp add: iT_add iT_not_empty iFROM_Min)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     s =\n     output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        event t2 \\<and> s t2 = m) \\<or>\n                       (\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        \\<not> event t2 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            event t4 \\<and> s t4 = NoMsg)))", "apply (drule neq_le_trans[OF not_sym], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     s =\n     output_fun \\<circ> i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        event t2 \\<and> s t2 = m) \\<or>\n                       (\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        \\<not> event t2 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            event t4 \\<and> s t4 = NoMsg)))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output_def i_shrink_eq_Msg_iUntil_finish_event_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_finish_event_conv: \"\n  \\<lbrakk> Suc 0 < k; m \\<noteq> \\<NoMsg>; \\<And> t. event t = (t mod k = 0); t0 = Suc (t * k);\n    s = (output_fun \\<circ> i_Exec_Comp_Stream_Init trans_fun (input \\<odot>\\<^sub>i k) c) \\<rbrakk>\\<Longrightarrow>\n  ((i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c) t = m) =\n  ((\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). event t2 \\<and> s t2 = m) \\<or>\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\\<not> event t2 \\<and> s t2 = m \\<and> (\n    \\<circle> t' t2 [0\\<dots>]. (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t'). event t4 \\<and> s t4 = \\<NoMsg>)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        event t2 \\<and> s t2 = m) \\<or>\n                       (\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        \\<not> event t2 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            event t4 \\<and> s t4 = NoMsg)))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_Msg_iUntil_finish_event_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> ((t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m) \\<or>\n                       (t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k \\<noteq> k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t3) =\n                            NoMsg.\n                            t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            t4 mod k = k - Suc 0 \\<and>\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t4) =\n                            NoMsg))) =\n                      ((0 < t1 mod k.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> Suc (t * k).\n                        t2 mod k = 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t2) =\n                        m) \\<or>\n                       (0 < t1 mod k.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> Suc (t * k).\n                        0 < t2 mod k \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t2) =\n                        m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            output_fun\n                             (i_Exec_Comp_Stream_Init trans_fun\n                               (input \\<odot> k) c t3) =\n                            NoMsg.\n                            t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            t4 mod k = 0 \\<and>\n                            output_fun\n                             (i_Exec_Comp_Stream_Init trans_fun\n                               (input \\<odot> k) c t4) =\n                            NoMsg)))", "apply (simp add: iNext_def iFROM_inext iT_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     output_fun \\<circ>\n     i_Exec_Comp_Stream_Init trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> ((t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m) \\<or>\n                       (t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k \\<noteq> k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t2.\n                         t4 mod k = k - Suc 0 \\<and>\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t4) =\n                         NoMsg))) =\n                      ((0 < t1 mod k.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> Suc (t * k).\n                        t2 mod k = 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t2) =\n                        m) \\<or>\n                       (0 < t1 mod k.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> Suc (t * k).\n                        0 < t2 mod k \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream_Init trans_fun\n                           (input \\<odot> k) c t2) =\n                        m \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream_Init trans_fun\n                            (input \\<odot> k) c t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t2.\n                         t4 mod k = 0 \\<and>\n                         output_fun\n                          (i_Exec_Comp_Stream_Init trans_fun\n                            (input \\<odot> k) c t4) =\n                         NoMsg)))", "apply (simp add: i_Exec_Stream_Init_eq_i_Exec_Stream_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> ((t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m) \\<or>\n                       (t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k \\<noteq> k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2) =\n                        m \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t2.\n                         t4 mod k = k - Suc 0 \\<and>\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t4) =\n                         NoMsg))) =\n                      ((0 < t1 mod k.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> Suc (t * k).\n                        t2 mod k = 0 \\<and>\n                        output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t2) =\n                        m) \\<or>\n                       (0 < t1 mod k.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> Suc (t * k).\n                        0 < t2 mod k \\<and>\n                        output_fun\n                         (([c] \\<frown>\n                           i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\n                           t2) =\n                        m \\<and>\n                        (output_fun\n                          (([c] \\<frown>\n                            i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                             c)\n                            t3) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t2.\n                         t4 mod k = 0 \\<and>\n                         output_fun\n                          (([c] \\<frown>\n                            i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                             c)\n                            t4) =\n                         NoMsg)))", "apply (simp add: iT_Plus_iUntil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = Suc (t * k);\n     s =\n     [output_fun c] \\<frown>\n     (output_fun \\<circ>\n      i_Exec_Comp_Stream trans_fun (input \\<odot> k) c)\\<rbrakk>\n    \\<Longrightarrow> ((t1 mod k \\<noteq> k - Suc 0. t1 \\<U> t2 [0\\<dots>].\n                        t2 mod k = k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t2 + t * k)) =\n                        m) \\<or>\n                       (t1 mod k \\<noteq> k - Suc 0. t1 \\<U> t2 [0\\<dots>].\n                        t2 mod k \\<noteq> k - Suc 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t2 + t * k)) =\n                        m \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            (Suc (t3 + (t2 + t * k)))) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>].\n                         Suc (t4 + (t2 + t * k)) mod k = k - Suc 0 \\<and>\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            (Suc (t4 + (t2 + t * k)))) =\n                         NoMsg))) =\n                      ((0 < Suc t1 mod k. t1 \\<U> t2 [0\\<dots>].\n                        Suc t2 mod k = 0 \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t2 + t * k)) =\n                        m) \\<or>\n                       (0 < Suc t1 mod k. t1 \\<U> t2 [0\\<dots>].\n                        0 < Suc t2 mod k \\<and>\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           (t2 + t * k)) =\n                        m \\<and>\n                        (output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            (Suc (t3 + (t2 + t * k)))) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>].\n                         Suc (Suc (t4 + (t2 + t * k))) mod k = 0 \\<and>\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            (Suc (t4 + (t2 + t * k)))) =\n                         NoMsg)))", "apply (simp add: mod_eq_divisor_minus_Suc_0_conv add_Suc[symmetric] del: add_Suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>\\<open>i_Exec_Comp_Stream_Acc_Output\\<close> and temporal operators with idle states.\\<close>"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_State_Idle_conv: \"\n  \\<lbrakk> 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = \\<NoMsg>) =\n  (output_fun (s t1) = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\n   output_fun (s t2) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (case_tac \"k = Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k = Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (simp add: iUntil_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0\\<rbrakk>\n    \\<Longrightarrow> (output_fun (i_Exec_Comp_Stream trans_fun input c t) =\n                       NoMsg) =\n                      (\\<diamond> ta [0\\<dots>] \\<oplus> t.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun input c ta) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun input c\n                               ta)) \\<and>\n                          (\\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< ta.\n                              output_fun\n                               (i_Exec_Comp_Stream trans_fun input c t') =\n                              NoMsg))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (rule iffI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     output_fun (i_Exec_Comp_Stream trans_fun input c t) = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t.\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun input c ta) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (i_Exec_Comp_Stream trans_fun input c\n                              ta)) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< ta.\n                             output_fun\n                              (i_Exec_Comp_Stream trans_fun input c t') =\n                             NoMsg)\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t.\n        output_fun (i_Exec_Comp_Stream trans_fun input c ta) = NoMsg \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c ta)) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< ta.\n            output_fun (i_Exec_Comp_Stream trans_fun input c t') =\n            NoMsg)\\<rbrakk>\n    \\<Longrightarrow> output_fun (i_Exec_Comp_Stream trans_fun input c t) =\n                      NoMsg\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (rule_tac t=t in iexI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     output_fun (i_Exec_Comp_Stream trans_fun input c t) = NoMsg\\<rbrakk>\n    \\<Longrightarrow> output_fun (i_Exec_Comp_Stream trans_fun input c t) =\n                      NoMsg \\<and>\n                      State_Idle localState output_fun trans_fun\n                       (localState\n                         (i_Exec_Comp_Stream trans_fun input c t)) \\<and>\n                      (\\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< t.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun input c t') =\n                          NoMsg)\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     output_fun (i_Exec_Comp_Stream trans_fun input c t) = NoMsg\\<rbrakk>\n    \\<Longrightarrow> t \\<in> [0\\<dots>] \\<oplus> t\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t.\n        output_fun (i_Exec_Comp_Stream trans_fun input c ta) = NoMsg \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c ta)) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< ta.\n            output_fun (i_Exec_Comp_Stream trans_fun input c t') =\n            NoMsg)\\<rbrakk>\n    \\<Longrightarrow> output_fun (i_Exec_Comp_Stream trans_fun input c t) =\n                      NoMsg\n 4. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (simp add: iT_add iT_cut_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     output_fun (i_Exec_Comp_Stream trans_fun input c t) = NoMsg\\<rbrakk>\n    \\<Longrightarrow> t \\<in> [0\\<dots>] \\<oplus> t\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t.\n        output_fun (i_Exec_Comp_Stream trans_fun input c ta) = NoMsg \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c ta)) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< ta.\n            output_fun (i_Exec_Comp_Stream trans_fun input c t') =\n            NoMsg)\\<rbrakk>\n    \\<Longrightarrow> output_fun (i_Exec_Comp_Stream trans_fun input c t) =\n                      NoMsg\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState (i_Exec_Comp_Stream trans_fun input c t));\n     t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t.\n        output_fun (i_Exec_Comp_Stream trans_fun input c ta) = NoMsg \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c ta)) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< ta.\n            output_fun (i_Exec_Comp_Stream trans_fun input c t') =\n            NoMsg)\\<rbrakk>\n    \\<Longrightarrow> output_fun (i_Exec_Comp_Stream trans_fun input c t) =\n                      NoMsg\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (clarify, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        t1 \\<in> [0\\<dots>] \\<oplus> t;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        \\<box> t' ([0\\<dots>] \\<oplus> t) \\<down>< t1.\n           output_fun (i_Exec_Comp_Stream trans_fun input c t') =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun input c t) =\n                         NoMsg\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (simp add: iT_add iT_iff iT_cut_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        t \\<le> t1;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        \\<box> t' if t1 = t then {} else [t\\<dots>,t1 - Suc t].\n           output_fun (i_Exec_Comp_Stream trans_fun input c t') =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun input c t) =\n                         NoMsg\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (drule order_le_less[THEN iffD1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        \\<box> t' if t1 = t then {} else [t\\<dots>,t1 - Suc t].\n           output_fun (i_Exec_Comp_Stream trans_fun input c t') = NoMsg;\n        t < t1 \\<or> t = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun input c t) =\n                         NoMsg\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        \\<box> t' if t1 = t then {} else [t\\<dots>,t1 - Suc t].\n           output_fun (i_Exec_Comp_Stream trans_fun input c t') = NoMsg;\n        t < t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun input c t) =\n                         NoMsg\n 2. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        \\<box> t' if t1 = t then {} else [t\\<dots>,t1 - Suc t].\n           output_fun (i_Exec_Comp_Stream trans_fun input c t') = NoMsg;\n        t = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun input c t) =\n                         NoMsg\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (drule_tac t=t in ispec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        t < t1\\<rbrakk>\n       \\<Longrightarrow> t \\<in> (if t1 = t then {}\n                                  else [t\\<dots>,t1 - Suc t])\n 2. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        t < t1;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun input c t) =\n                         NoMsg\n 3. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState (i_Exec_Comp_Stream trans_fun input c t));\n        t0 = t; s = i_Exec_Comp_Stream trans_fun input c; k = Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun input c t1) = NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun input c t1));\n        \\<box> t' if t1 = t then {} else [t\\<dots>,t1 - Suc t].\n           output_fun (i_Exec_Comp_Stream trans_fun input c t') = NoMsg;\n        t = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun input c t) =\n                         NoMsg\n 4. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun (s t1) = NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)))", "apply (simp add: iT_iff)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t2) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t2)))", "apply (drule order_neq_le_trans[OF not_sym Suc_leI], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       NoMsg) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t2) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t2)))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          NoMsg) =\n                      (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       NoMsg.\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t2) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t2)))", "apply (simp add: iT_add i_Exec_Stream_nth i_Exec_Stream_Acc_LocalState_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: i_take_Suc_conv_app_nth[of t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun\n                  (input \\<Down> t \\<odot> k @\n                   input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                  c));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: i_expand_i_take_mult[symmetric] f_Exec_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (subgoal_tac \"\\<forall>t1 \\<in> [t * k\\<dots>,k - Suc 0]. input \\<odot>\\<^sub>i k \\<Down> Suc t1 \\<up> (t * k) = input t # \\<NoMsg>\\<^bsup>t1 - t * k\\<^esup>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n                         input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n                         input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: i_expand_nth_interval_eq_nth_append_replicate_NoMsg iIN_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (case_tac \"output_fun (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc (t * k)) c) \\<noteq> \\<NoMsg>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (subgoal_tac \"\n   \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0]. output_fun (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc t1) c) = \\<NoMsg>)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg;\n     \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) =\n                NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                                 output_fun\n                                  (f_Exec_Comp trans_fun\n                                    (input \\<odot> k \\<Down> Suc t1) c) =\n                                 NoMsg)\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                                 output_fun\n                                  (f_Exec_Comp trans_fun\n                                    (input \\<odot> k \\<Down> Suc t1) c) =\n                                 NoMsg)\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg;\n     \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) =\n                NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n                         NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg;\n     \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) =\n                NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (rule_tac t=\"t * k\" in iexI, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg\\<rbrakk>\n    \\<Longrightarrow> t * k \\<in> [t * k\\<dots>,k - Suc 0]\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg;\n     \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) =\n                NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: iIN_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg;\n     \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) =\n                NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: not_iUntil del: not_iAll)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n        c) \\<noteq>\n     NoMsg;\n     \\<not> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) =\n                NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<box> ta [t * k\\<dots>].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc ta) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc ta)\n                              c)) \\<longrightarrow>\n                         (\\<diamond> t' [t * k\\<dots>] \\<down>< ta.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t') c) \\<noteq>\n                             NoMsg)\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (clarsimp simp: iT_iff, rename_tac t1 t2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n           c) \\<noteq>\n        NoMsg;\n        t * k \\<le> t1;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) \\<noteq>\n        NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        t * k \\<le> t2; t2 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t' [t * k\\<dots>] \\<down>< t1.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) \\<noteq>\n                            NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (case_tac \"t1 = t * k\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n           c) \\<noteq>\n        NoMsg;\n        t * k \\<le> t1;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) \\<noteq>\n        NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        t * k \\<le> t2; t2 \\<le> t * k + k - Suc 0;\n        t1 \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t' [t * k\\<dots>] \\<down>< t1.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) \\<noteq>\n                            NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (drule order_le_neq_trans[OF _ not_sym], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n           c) \\<noteq>\n        NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) \\<noteq>\n        NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        t * k \\<le> t2; t2 \\<le> t * k + k - Suc 0; t1 \\<noteq> t * k;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t' [t * k\\<dots>] \\<down>< t1.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) \\<noteq>\n                            NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (rule_tac t=\"t * k\" in iexI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n           c) \\<noteq>\n        NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) \\<noteq>\n        NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        t * k \\<le> t2; t2 \\<le> t * k + k - Suc 0; t1 \\<noteq> t * k;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> t * k \\<in> [t * k\\<dots>] \\<down>< t1\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: iFROM_cut_less1 iIN_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (case_tac \"\n  State_Idle localState output_fun trans_fun\n    (localState ((trans_fun (input t) (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> (t * k)) c))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n            c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (subgoal_tac \"\n   (\\<box> t1 [t * k\\<dots>,k - Suc 0]. output_fun (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc t1) c) = NoMsg)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n            c)))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n            c)))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (clarsimp simp: iIN_iff, rename_tac t1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (rule_tac m=\"t * k\" and n=\"Suc t1\" in subst[OF i_take_drop_append, rule_format], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k) @\n                             input \\<odot> k \\<Down> Suc t1 \\<up> (t * k))\n                            c) =\n                         NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (drule_tac x=t1 in bspec, simp add: iT_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k) @\n                             input \\<odot> k \\<Down> Suc t1 \\<up> (t * k))\n                            c) =\n                         NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: f_Exec_append del: i_take_drop_append)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> (t * k)) c))) =\n                         NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: i_take_Suc_conv_app_nth f_Exec_append i_expand_nth_mult)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        output_fun\n         (trans_fun (input t)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Down> t1 \\<up> (t * k) @ [(input \\<odot> k) t1] =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> (t * k)) c))) =\n                         NoMsg\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (rule f_Exec_State_Idle_replicate_NoMsg_output, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: iUntil_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n     NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [t * k\\<dots>].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc ta) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc ta) c)) \\<and>\n                         (\\<box> t' [t * k\\<dots>] \\<down>< ta.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t') c) =\n                             NoMsg)\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (rule_tac t=\"t * k\" in iexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n     NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> Suc (t * k)) c) =\n                      NoMsg \\<and>\n                      State_Idle localState output_fun trans_fun\n                       (localState\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> Suc (t * k)) c)) \\<and>\n                      (\\<box> t' [t * k\\<dots>] \\<down>< (t * k).\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t') c) =\n                          NoMsg)\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n     NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> t * k \\<in> [t * k\\<dots>]\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: i_take_Suc_conv_app_nth f_Exec_append i_expand_nth_mult iFROM_cut_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n     NoMsg;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (trans_fun (input t)\n          (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> t * k \\<in> [t * k\\<dots>]\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: iFROM_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (subgoal_tac \"\\<forall>i < k. input \\<odot>\\<^sub>i k \\<Up> Suc (t * k) \\<Down> i = NoMsg\\<^bsup>i\\<^esup>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<k.\n                         input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n                         NoMsg\\<^bsup>i\\<^esup>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<k.\n                         input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n                         NoMsg\\<^bsup>i\\<^esup>\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (simp add: list_eq_iff i_expand_nth_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0].\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t1) c) =\n                          NoMsg) =\n                      (output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t1) c) =\n                       NoMsg.\n                       t1 \\<U> t2 [t * k\\<dots>].\n                       output_fun\n                        (f_Exec_Comp trans_fun\n                          (input \\<odot> k \\<Down> Suc t2) c) =\n                       NoMsg \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c)))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> Suc t1) c) =\n                      NoMsg.\n                      t1 \\<U> t2 [t * k\\<dots>].\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> Suc t2) c) =\n                      NoMsg \\<and>\n                      State_Idle localState output_fun trans_fun\n                       (localState\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> Suc t2) c))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (frule State_Idle_imp_exists_state_change2, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     \\<box> t1 [t * k\\<dots>,k - Suc 0].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg;\n     \\<exists>i<k - Suc 0.\n        (\\<forall>j\\<le>i.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                        (trans_fun (input t)\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k)) c))))) \\<and>\n        (\\<forall>j\\<le>k - Suc 0.\n            i < j \\<longrightarrow>\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                 (trans_fun (input t)\n                   (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                     c)))))\\<rbrakk>\n    \\<Longrightarrow> output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> Suc t1) c) =\n                      NoMsg.\n                      t1 \\<U> t2 [t * k\\<dots>].\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> Suc t2) c) =\n                      NoMsg \\<and>\n                      State_Idle localState output_fun trans_fun\n                       (localState\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> Suc t2) c))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (elim exE conjE, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg.\n                         t1 \\<U> t2 [t * k\\<dots>].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (frule Suc_less_pred_conv[THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg.\n                         t1 \\<U> t2 [t * k\\<dots>].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t2) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (simp only: iUntil_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [t * k\\<dots>].\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc ta) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc ta)\n                                  c))) \\<and>\n                            (\\<box> t' [t * k\\<dots>] \\<down>< ta.\n                                output_fun\n                                 (f_Exec_Comp trans_fun\n                                   (input \\<odot> k \\<Down> Suc t') c) =\n                                NoMsg)\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (rule_tac t=\"Suc (t * k + i)\" in iexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc (Suc (t * k + i)))\n                             c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down>\n                                Suc (Suc (t * k + i)))\n                               c))) \\<and>\n                         (\\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t') c) =\n                             NoMsg)\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc (Suc (t * k + i)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (Suc (t * k + i)))\n                              c))\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule_tac t=\"Suc (t * k + i)\" in ispec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>,k - Suc 0]\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> Suc (Suc (t * k + i))) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc (Suc (t * k + i)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (Suc (t * k + i)))\n                              c))\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 4. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 5. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (simp add: iIN_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> Suc (Suc (t * k + i))) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc (Suc (t * k + i)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (Suc (t * k + i)))\n                              c))\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (rule conjI, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> Suc (Suc (t * k + i))) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (Suc (t * k + i)))\n                              c))\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (rule_tac t=\"Suc (Suc (t * k + i))\" and s=\"Suc (t * k) + Suc i\" in subst, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> Suc (Suc (t * k + i))) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               (Suc (t * k) + Suc i))\n                              c))\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (subst i_take_add)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> Suc (Suc (t * k + i))) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc (t * k) @\n                               input \\<odot> k \\<Up> Suc (t * k) \\<Down>\n                               Suc i)\n                              c))\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule_tac x=\"Suc i\" in spec)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        i < k - Suc 0; Suc i < k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> Suc (Suc (t * k + i))) c) =\n        NoMsg;\n        Suc i < k \\<longrightarrow>\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> Suc i =\n        NoMsg\\<^bsup>Suc i\\<^esup>;\n        Suc i \\<le> i \\<longrightarrow>\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> (t * k)) c))));\n        Suc i \\<le> k - Suc 0 \\<longrightarrow>\n        i < Suc i \\<longrightarrow>\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>Suc i\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                 c))))\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc (t * k) @\n                               input \\<odot> k \\<Up> Suc (t * k) \\<Down>\n                               Suc i)\n                              c))\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (simp add: i_take_Suc_conv_app_nth f_Exec_append i_expand_nth_mult)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' [t * k\\<dots>] \\<down>< Suc (t * k + i).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (rule iallI, rename_tac t1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k; t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule_tac t=t1 in ispec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k; t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i)\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> [t * k\\<dots>,k - Suc 0]\n 2. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k; t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule_tac m=\"Suc i\" in less_imp_le_pred)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i);\n        Suc i \\<le> k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> [t * k\\<dots>,k - Suc 0]\n 2. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k; t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (clarsimp simp: iIN_iff iFROM_cut_less1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t1.\n       \\<lbrakk>t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        (\\<exists>j. j \\<le> i) \\<longrightarrow>\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i \\<le> k - Suc 0; t * k \\<le> t1; t1 \\<le> t * k + i\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0\n 2. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k; t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (rule order_trans, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t1.\n       \\<lbrakk>t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        (\\<exists>j. j \\<le> i) \\<longrightarrow>\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i \\<le> k - Suc 0; t * k \\<le> t1; t1 \\<le> t * k + i\\<rbrakk>\n       \\<Longrightarrow> t * k + i \\<le> t * k + k - Suc 0\n 2. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k; t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 4. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t1.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k; t1 \\<in> [t * k\\<dots>] \\<down>< Suc (t * k + i);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 3. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>True; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        i < k - Suc 0;\n        \\<forall>j\\<le>i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                       (trans_fun (input t)\n                         (f_Exec_Comp trans_fun\n                           (input \\<odot> k \\<Down> (t * k)) c))));\n        \\<forall>j\\<le>k - Suc 0.\n           i < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (trans_fun (input t)\n                  (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                    c))));\n        Suc i < k\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + i) \\<in> [t * k\\<dots>]\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (simp add: iFROM_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (localState\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c))));\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     Suc 0 < k;\n     \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n        input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<not> output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n               c) \\<noteq>\n            NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                   c)));\n     \\<forall>i<k.\n        input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>;\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n     NoMsg.\n     t1 \\<U> t2 [t * k\\<dots>].\n     output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n     NoMsg \\<and>\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c))\\<rbrakk>\n    \\<Longrightarrow> \\<box> t1 [t * k\\<dots>,k - Suc 0].\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (rule iallI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg.\n        t1 \\<U> t2 [t * k\\<dots>].\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (unfold iUntil_def, elim iexE conjE, rename_tac t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2)\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (case_tac \"t1 < t2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 < t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<not> t1 < t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule_tac t=t1 in ispec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 < t2\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> [t * k\\<dots>] \\<down>< t2\n 2. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 < t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<not> t1 < t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (simp add: cut_less_mem_iff iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 < t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<not> t1 < t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        \\<not> output_fun\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k))\n                  c) \\<noteq>\n               NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<not> t1 < t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (case_tac \"t1 = t2\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t2 \\<le> t1; t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule le_neq_trans[OF _ not_sym], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 \\<noteq> t2; t2 < t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule_tac i=t2 in less_imp_add_positive, elim exE conjE, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 \\<noteq> t2; 0 < i; t2 + i = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (drule_tac t=t1 in sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t1 \\<in> [t * k\\<dots>,k - Suc 0]; t2 \\<in> [t * k\\<dots>];\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 \\<noteq> t2; 0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         NoMsg", "apply (simp del: add_Suc add: add_Suc[symmetric] i_take_add f_Exec_append iFROM_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Up> Suc t2 \\<Down> i)\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (rule_tac t=\"input \\<odot>\\<^sub>i k \\<Up> Suc t2 \\<Down> i\" and s=\"\\<NoMsg>\\<^bsup>i\\<^esup>\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> NoMsg\\<^bsup>i\\<^esup> =\n                         input \\<odot> k \\<Up> Suc t2 \\<Down> i\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (rule list_eq_iff[THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> length NoMsg\\<^bsup>i\\<^esup> =\n                         length\n                          (input \\<odot> k \\<Up> Suc t2 \\<Down> i) \\<and>\n                         (\\<forall>ia<length NoMsg\\<^bsup>i\\<^esup>.\n                             NoMsg\\<^bsup>i\\<^esup> ! ia =\n                             input \\<odot> k \\<Up> Suc t2 \\<Down> i ! ia)\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> \\<forall>ia<i.\n                            NoMsg = (input \\<odot> k) (Suc (t2 + ia))\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (intro allI impI, rename_tac i1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i; i1 < i\\<rbrakk>\n       \\<Longrightarrow> NoMsg = (input \\<odot> k) (Suc (t2 + i1))\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (simp add: i_expand_nth_if)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i\\<rbrakk>\n       \\<Longrightarrow> Suc (t2 + i1) mod k = 0 \\<longrightarrow>\n                         NoMsg = input (Suc (t2 + i1) div k)\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (subst imp_conv_disj, rule disjI1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i\\<rbrakk>\n       \\<Longrightarrow> Suc (t2 + i1) mod k \\<noteq> 0\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i\\<rbrakk>\n       \\<Longrightarrow> 0 < Suc (t2 + i1) mod k\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (subgoal_tac \"t * k < Suc (t2 + i1) \\<and> Suc (t2 + i1) < t * k + k\", elim conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i; t * k < Suc (t2 + i1);\n        Suc (t2 + i1) < t * k + k\\<rbrakk>\n       \\<Longrightarrow> 0 < Suc (t2 + i1) mod k\n 2. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i\\<rbrakk>\n       \\<Longrightarrow> t * k < Suc (t2 + i1) \\<and>\n                         Suc (t2 + i1) < t * k + k\n 3. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i\\<rbrakk>\n       \\<Longrightarrow> t * k < Suc (t2 + i1) \\<and>\n                         Suc (t2 + i1) < t * k + k\n 2. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i; t * k < Suc (t2 + i1);\n        Suc (t2 + i1) < t * k + k\\<rbrakk>\n       \\<Longrightarrow> 0 < Suc (t2 + i1) mod k\n 3. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (simp add: iIN_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i; t * k < Suc (t2 + i1);\n        Suc (t2 + i1) < t * k + k\\<rbrakk>\n       \\<Longrightarrow> 0 < Suc (t2 + i1) mod k\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (simp only: mult.commute[of _ k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 i i1.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (k * t)) c))));\n        t0 = k * t; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[k * t\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (k * t) =\n           input t # NoMsg\\<^bsup>t1 - k * t\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (k * t)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (k * t))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (k * t) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [k * t\\<dots>,k - Suc 0]; k * t \\<le> t2;\n        \\<box> t' [k * t\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        t1 = t2 + i; i1 < i; k * t < Suc (t2 + i1);\n        Suc (t2 + i1) < k * t + k\\<rbrakk>\n       \\<Longrightarrow> 0 < Suc (t2 + i1) mod k\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (rule between_imp_mod_gr0, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                     (trans_fun (input t)\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> (t * k)) c))));\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        Suc 0 < k;\n        \\<forall>t1\\<in>[t * k\\<dots>,k - Suc 0].\n           input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t * k)) c) =\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                      c)));\n        \\<forall>i<k.\n           input \\<odot> k \\<Up> Suc (t * k) \\<Down> i =\n           NoMsg\\<^bsup>i\\<^esup>;\n        t2 + i \\<in> [t * k\\<dots>,k - Suc 0]; t * k \\<le> t2;\n        \\<box> t' [t * k\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        0 < i; t1 = t2 + i\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t2) c)) =\n                         NoMsg", "apply (rule f_Exec_State_Idle_replicate_NoMsg_gr0_output, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_imp: \"\n  \\<lbrakk> 0 < k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t0 = t * k;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    State_Idle localState output_fun trans_fun (localState (s t1));\n    output_fun (s t1) \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = output_fun (s t1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k; t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      output_fun (s t1)", "apply (case_tac \"k = Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k; t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; k = Suc 0\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      output_fun (s t1)\n 2. \\<lbrakk>0 < k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k; t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      output_fun (s t1)", "apply (simp add: iIN_0 iT_Plus_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k; t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      output_fun (s t1)", "apply (drule order_neq_le_trans[OF not_sym], rule Suc_leI, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k; t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      output_fun (s t1)", "apply (simp add: iT_add iT_iff, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n     output_fun\n      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      output_fun\n                       (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)", "apply (simp only: i_Exec_Stream_Acc_Output_nth i_Exec_Stream_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down> Suc t1) c)", "apply (rule_tac t=\"Suc t1\" and s=\"t * k + (Suc t1 - t * k)\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Down>\n                          (t * k + (Suc t1 - t * k)))\n                         c)", "apply (simp only: i_take_add f_Exec_append i_expand_i_take_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Up> (t * k) \\<Down>\n                          (Suc t1 - t * k))\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c))", "apply (subgoal_tac \"input \\<odot>\\<^sub>i k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) = input t # \\<NoMsg>\\<^bsup>t1 - t * k\\<^esup>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Up> (t * k) \\<Down>\n                          (Suc t1 - t * k))\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c))\n 2. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> input \\<odot> k \\<Up> (t * k) \\<Down>\n                      (Suc t1 - t * k) =\n                      input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> input \\<odot> k \\<Up> (t * k) \\<Down>\n                      (Suc t1 - t * k) =\n                      input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Up> (t * k) \\<Down>\n                          (Suc t1 - t * k))\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c))", "apply (simp add: i_take_i_drop)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> input \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n                      input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Up> (t * k) \\<Down>\n                          (Suc t1 - t * k))\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c))", "apply (subst i_expand_nth_interval_eq_nth_append_replicate_NoMsg)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> 0 < k\n 2. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> t * k \\<le> t1\n 3. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0\n 4. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> input t # NoMsg\\<^bsup>t1 - t * k\\<^esup> =\n                      input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 5. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         (input \\<odot> k \\<Up> (t * k) \\<Down>\n                          (Suc t1 - t * k))\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c))", "apply (simp del: f_Exec_Comp_Stream.simps)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                         (trans_fun (input t)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c)))", "apply (subgoal_tac \"\\<exists>i. k - Suc 0 = t1 - t * k + i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<exists>i. k - Suc 0 = t1 - t * k + i\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                         (trans_fun (input t)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c)))\n 2. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. k - Suc 0 = t1 - t * k + i", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. k - Suc 0 = t1 - t * k + i\n 2. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<exists>i. k - Suc 0 = t1 - t * k + i\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                         (trans_fun (input t)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c)))", "apply (rule le_iff_add[THEN iffD1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> t1 - t * k \\<le> k - Suc 0\n 2. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<exists>i. k - Suc 0 = t1 - t * k + i\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                         (trans_fun (input t)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c)))", "apply (simp add: le_diff_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t0 = t * k;\n     State_Idle localState output_fun trans_fun\n      (localState\n        (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n     output_fun\n      (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n     NoMsg;\n     Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n     input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n     input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n     \\<exists>i. k - Suc 0 = t1 - t * k + i\\<rbrakk>\n    \\<Longrightarrow> last_message\n                       (map output_fun\n                         (f_Exec_Comp_Stream trans_fun\n                           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c))) =\n                      output_fun\n                       (f_Exec_Comp trans_fun\n                         NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                         (trans_fun (input t)\n                           (f_Exec_Comp trans_fun\n                             (input \\<Down> t \\<odot> k) c)))", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (simp only: replicate_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t #\n                               NoMsg\\<^bsup>t1 - t * k\\<^esup> @\n                               NoMsg\\<^bsup>i\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst append_Cons[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              ((input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>) @\n                               NoMsg\\<^bsup>i\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst State_Idle_append_replicate_NoMsg_output_last_message)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> State_Idle (?localState137 i) output_fun trans_fun\n                          (?localState137 i\n                            (f_Exec_Comp trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (simp only: f_Exec_append[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> State_Idle (?localState137 i) output_fun trans_fun\n                          (?localState137 i\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k @\n                               input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              c))\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (rule_tac t=\"input \\<Down> t \\<odot>\\<^sub>f k @ input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\" and s=\"input \\<odot>\\<^sub>i k \\<Down> Suc t1\" in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> Suc t1 =\n                         input \\<Down> t \\<odot> k @\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> State_Idle\n                          (?localState140 i\n                            (input \\<odot> k \\<Down> Suc t1))\n                          output_fun trans_fun\n                          (?localState139 i\n                            (input \\<odot> k \\<Down> Suc t1))\n 3. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))\nflex-flex pairs:\n  \\<lambda>i.\n     ?localState139 i\n      (input \\<Down> t \\<odot> k @\n       input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>) \\<equiv>\\<^sup>?\n    \\<lambda>i.\n       ?localState140 i\n        (input \\<Down> t \\<odot> k @\n         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n        (f_Exec_Comp trans_fun\n          (input \\<Down> t \\<odot> k @\n           input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n          c)", "apply (subst i_expand_i_take_mult[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> Suc t1 =\n                         input \\<odot> k \\<Down> (t * k) @\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> State_Idle\n                          (?localState140 i\n                            (input \\<odot> k \\<Down> Suc t1))\n                          output_fun trans_fun\n                          (?localState139 i\n                            (input \\<odot> k \\<Down> Suc t1))\n 3. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))\nflex-flex pairs:\n  \\<lambda>i.\n     ?localState140 i\n      (input \\<Down> t \\<odot> k @\n       input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n      (f_Exec_Comp trans_fun\n        (input \\<Down> t \\<odot> k @\n         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n        c) \\<equiv>\\<^sup>?\n    \\<lambda>i.\n       ?localState139 i\n        (input \\<Down> t \\<odot> k @\n         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)", "apply (drule_tac t=\"input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\" in sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        k - Suc 0 = t1 - t * k + i;\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup> =\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k)\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> Suc t1 =\n                         input \\<odot> k \\<Down> (t * k) @\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> State_Idle\n                          (?localState140 i\n                            (input \\<odot> k \\<Down> Suc t1))\n                          output_fun trans_fun\n                          (?localState139 i\n                            (input \\<odot> k \\<Down> Suc t1))\n 3. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))\nflex-flex pairs:\n  \\<lambda>i.\n     ?localState140 i\n      (input \\<Down> t \\<odot> k @\n       input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n      (f_Exec_Comp trans_fun\n        (input \\<Down> t \\<odot> k @\n         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n        c) \\<equiv>\\<^sup>?\n    \\<lambda>i.\n       ?localState139 i\n        (input \\<Down> t \\<odot> k @\n         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)", "apply (simp add: i_take_add[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> State_Idle\n                          (?localState140 i\n                            (input \\<odot> k \\<Down> Suc t1))\n                          output_fun trans_fun\n                          (?localState139 i\n                            (input \\<odot> k \\<Down> Suc t1))\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))\nflex-flex pairs:\n  \\<lambda>i.\n     ?localState140 i\n      (input \\<Down> t \\<odot> k @\n       input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n      (f_Exec_Comp trans_fun\n        (input \\<Down> t \\<odot> k @\n         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n        c) \\<equiv>\\<^sup>?\n    \\<lambda>i.\n       ?localState139 i\n        (input \\<Down> t \\<odot> k @\n         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subgoal_tac \"\n  f_Exec_Comp_Stream trans_fun (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot>\\<^sub>f k) c) \\<noteq> []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> f_Exec_Comp_Stream trans_fun\n                          (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                          (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                            c) \\<noteq>\n                         []", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i\\<rbrakk>\n       \\<Longrightarrow> f_Exec_Comp_Stream trans_fun\n                          (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                          (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                            c) \\<noteq>\n                         []\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (simp add: f_Exec_Stream_not_empty_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (rule ssubst[OF last_message_Msg_eq_last])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> map output_fun\n                          (f_Exec_Comp_Stream trans_fun\n                            (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) \\<noteq>\n                         []\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) \\<noteq>\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) \\<noteq>\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst map_last, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (last\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) \\<noteq>\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst f_Exec_eq_f_Exec_Stream_last2[symmetric], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) \\<noteq>\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst f_Exec_append[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<Down> t \\<odot> k @\n                             input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                            c) \\<noteq>\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (rule_tac t=\"input \\<Down> t \\<odot>\\<^sub>f k @ input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\" and s=\"input \\<odot>\\<^sub>i k \\<Down> Suc t1\" in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> Suc t1 =\n                         input \\<Down> t \\<odot> k @\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst i_expand_i_take_mult[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> Suc t1 =\n                         input \\<odot> k \\<Down> (t * k) @\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (rule_tac t=\"Suc t1\" and s=\"t * k + (Suc t1 - t * k)\" in subst, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down>\n                         (t * k + (Suc t1 - t * k)) =\n                         input \\<odot> k \\<Down> (t * k) @\n                         input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst i_take_add, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> last\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst map_last, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t0 = t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        input \\<odot> k \\<Up> (t * k) \\<Down> (Suc t1 - t * k) =\n        input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>;\n        k - Suc 0 = t1 - t * k + i;\n        f_Exec_Comp_Stream trans_fun\n         (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c) \\<noteq>\n        []\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (last\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 - t * k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))", "apply (subst f_Exec_eq_f_Exec_Stream_last2[symmetric], simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv2: \"\n  \\<lbrakk> 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    State_Idle localState output_fun trans_fun (localState (s t1));\n    output_fun (s t1) \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)))", "apply (case_tac \"k = Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; k = Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)))", "apply (simp add: iIN_0 iT_Plus_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)))", "apply (drule order_neq_le_trans[OF not_sym], rule Suc_leI, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg; Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n     State_Idle localState output_fun trans_fun\n      (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n     output_fun\n      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n     NoMsg;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1)))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n     State_Idle localState output_fun trans_fun\n      (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n     output_fun\n      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n     NoMsg;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1)))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n     State_Idle localState output_fun trans_fun\n      (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n     output_fun\n      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n     NoMsg;\n     Suc 0 < k;\n     output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n     m\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t1))\n 2. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n     State_Idle localState output_fun trans_fun\n      (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n     output_fun\n      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n     NoMsg;\n     Suc 0 < k;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1))\\<rbrakk>\n    \\<Longrightarrow> output_fun\n                       (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                         t1) =\n                      m", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>State_Idle localState output_fun trans_fun\n              (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n     State_Idle localState output_fun trans_fun\n      (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n     output_fun\n      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n     NoMsg;\n     Suc 0 < k;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1))\\<rbrakk>\n    \\<Longrightarrow> output_fun\n                       (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                         t1) =\n                      m", "apply (clarify, rename_tac t1')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1')\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (subgoal_tac \"t1' = t1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1')\\<rbrakk>\n       \\<Longrightarrow> t1' = t1", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1')\\<rbrakk>\n       \\<Longrightarrow> t1' = t1\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' \\<noteq> t1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (simp add: i_Exec_Stream_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (subgoal_tac \"\n   \\<And> n1 n2.\n   \\<lbrakk> n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k; n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n     State_Idle localState output_fun trans_fun (localState (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc n1) c));\n     output_fun (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc n2) c) \\<noteq> NoMsg \\<rbrakk> \\<Longrightarrow>\n   False\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1' n1 n2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 < n2;\n        n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2) c) \\<noteq>\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1' n1 n2.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 < n2;\n        n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2) c) \\<noteq>\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (drule_tac i=n1 in less_imp_add_positive, elim exE conjE, rename_tac i)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2) c) \\<noteq>\n        NoMsg;\n        0 < i; n1 + i = n2\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (drule_tac t=n2 in sym, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (n1 + i))\n           c) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (simp only: add_Suc[symmetric] i_take_add f_Exec_append)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (subgoal_tac \"input \\<odot>\\<^sub>i k \\<Up> Suc n1 \\<Down> i = \\<NoMsg>\\<^bsup>i\\<^esup>\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n                         NoMsg\\<^bsup>i\\<^esup>\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n                         NoMsg\\<^bsup>i\\<^esup>\n 2. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (subst i_take_i_drop)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> (i + Suc n1) \\<up> Suc n1 =\n                         NoMsg\\<^bsup>i\\<^esup>\n 2. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (rule_tac t=\"\\<NoMsg>\\<^bsup>i\\<^esup>\" and s=\"\\<NoMsg>\\<^bsup>i + Suc n1 - Suc n1\\<^esup>\" in subst, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> (i + Suc n1) \\<up> Suc n1 =\n                         NoMsg\\<^bsup>i + Suc n1 - Suc n1\\<^esup>\n 2. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (rule_tac t=t in i_expand_nth_interval_eq_replicate_NoMsg)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> 0 < k\n 2. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> t * k < Suc n1\n 3. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> Suc n1 \\<le> i + Suc n1\n 4. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i\\<rbrakk>\n       \\<Longrightarrow> i + Suc n1 \\<le> t * k + k\n 5. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        n1 + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc n1 \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (simp add: iT_add iT_iff)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t * k \\<le> t1 \\<and> t1 \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1' \\<and> t1' \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; t * k \\<le> n1; n1 + i \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (frule_tac c=\"f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc n1) c\" and n=i\n     in f_Exec_State_Idle_replicate_NoMsg_gr0_output)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t * k \\<le> t1 \\<and> t1 \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1' \\<and> t1' \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; t * k \\<le> n1; n1 + i \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> 0 < i\n 2. \\<And>t1' n1 n2 i.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t * k \\<le> t1 \\<and> t1 \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t * k \\<le> t1' \\<and> t1' \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1; t * k \\<le> n1; n1 + i \\<le> t * k + k - Suc 0;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1)\n             c)) \\<noteq>\n        NoMsg;\n        0 < i; n2 = n1 + i;\n        input \\<odot> k \\<Up> Suc n1 \\<Down> i = NoMsg\\<^bsup>i\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c)) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1')\n           c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c));\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1') c);\n        t1' \\<noteq> t1;\n        \\<And>n1 n2.\n           \\<lbrakk>n1 < n2; n1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            n2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n            State_Idle localState output_fun trans_fun\n             (localState\n               (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n1) c));\n            output_fun\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc n2)\n               c) \\<noteq>\n            NoMsg\\<rbrakk>\n           \\<Longrightarrow> False\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1') \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        Suc 0 < k; t1' \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1'));\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1');\n        t1' = t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1')", "apply (fastforce dest: linorder_neq_iff[THEN iffD1])+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Here the property to be checked uses only unbounded intervals suitable for LTL.\\<close>"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv: \"\n  \\<lbrakk> 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    State_Idle localState output_fun trans_fun (localState (s t1));\n    output_fun (s t1) \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  ((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0. (\n      (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<not> State_Idle localState output_fun trans_fun\n                               (localState (s t2)).\n                       t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t1) = m \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t1)))", "apply (subst i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv2, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1))) =\n                      (\\<not> State_Idle localState output_fun trans_fun\n                               (localState (s t2)).\n                       t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t1) = m \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t1)))", "apply (unfold iUntil_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1))) =\n                      (\\<diamond> t [0\\<dots>] \\<oplus> t0.\n                          (output_fun (s t) = m \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState (s t))) \\<and>\n                          (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n                              \\<not> State_Idle localState output_fun\ntrans_fun (localState (s t'))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (s t1))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t [0\\<dots>] \\<oplus> t0.\n                         (output_fun (s t) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun (localState (s t')))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (elim iexE conjE, rename_tac t2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t2) = m;\n        State_Idle localState output_fun trans_fun\n         (localState (s t2))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t [0\\<dots>] \\<oplus> t0.\n                            (output_fun (s t) = m \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState (s t))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n                                \\<not> State_Idle localState output_fun\n  trans_fun (localState (s t')))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (rule_tac t=t2 in iexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t2) = m;\n        State_Idle localState output_fun trans_fun\n         (localState (s t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun (s t2) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t2))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t2.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun (localState (s t')))\n 2. \\<And>t2.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t2) = m;\n        State_Idle localState output_fun trans_fun\n         (localState (s t2))\\<rbrakk>\n       \\<Longrightarrow> t2 \\<in> [0\\<dots>] \\<oplus> t0\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t2) = m;\n        State_Idle localState output_fun trans_fun\n         (localState (s t2))\\<rbrakk>\n       \\<Longrightarrow> t2 \\<in> [0\\<dots>] \\<oplus> t0\n 2. \\<And>t2.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t2) = m;\n        State_Idle localState output_fun trans_fun\n         (localState (s t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun (s t2) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t2))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t2.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun (localState (s t')))\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t2) = m;\n        State_Idle localState output_fun trans_fun\n         (localState (s t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun (s t2) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t2))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t2.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun (localState (s t')))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n                            \\<not> State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (rule iallI, rename_tac t2')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2'.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t2' \\<in> ([0\\<dots>] \\<oplus> t * k) \\<down>< t2\\<rbrakk>\n       \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                                 (localState\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t2'))\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2'.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t2' \\<in> ([0\\<dots>] \\<oplus> t * k) \\<down>< t2;\n        \\<not> \\<not> State_Idle localState output_fun trans_fun\n                       (localState\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t2'))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (simp add: cut_less_mem_iff iT_iff iT_add, elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2'.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<le> t * k + k - Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2'));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (frule_tac n=t2' in le_imp_less_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2'.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<le> t * k + k - Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2'));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2; t * k < Suc t2'\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (frule_tac i=t2' in less_imp_add_positive, elim exE conjE, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<le> t * k + k - Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2'));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2; t * k < Suc t2'; 0 < i; t2' + i = t2\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (drule_tac t=t2 in sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<le> t * k + k - Suc 0;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2'));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (simp only: i_Exec_Stream_nth add_Suc[symmetric] i_take_add f_Exec_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc t2' \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc t2' \\<Down> i)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (simp only: i_take_i_drop)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (subgoal_tac \"input \\<odot>\\<^sub>i k \\<Down> (i + Suc t2') \\<up> Suc t2' = \\<NoMsg>\\<^bsup>i\\<^esup>\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i;\n        input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2' =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> (i + Suc t2') \\<up>\n                         Suc t2' =\n                         NoMsg\\<^bsup>i\\<^esup>\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> (i + Suc t2') \\<up>\n                         Suc t2' =\n                         NoMsg\\<^bsup>i\\<^esup>\n 2. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i;\n        input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2' =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (rule_tac t=\"\\<NoMsg>\\<^bsup>i\\<^esup>\" and s=\"\\<NoMsg>\\<^bsup>i + Suc t2' - Suc t2'\\<^esup>\" in subst, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> input \\<odot> k \\<Down> (i + Suc t2') \\<up>\n                         Suc t2' =\n                         NoMsg\\<^bsup>i + Suc t2' - Suc t2'\\<^esup>\n 2. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i;\n        input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2' =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (rule_tac t=t in i_expand_nth_interval_eq_replicate_NoMsg)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> 0 < k\n 2. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> t * k < Suc t2'\n 3. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> Suc t2' \\<le> i + Suc t2'\n 4. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i\\<rbrakk>\n       \\<Longrightarrow> i + Suc t2' \\<le> t * k + k\n 5. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2')\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k \\<le> t2';\n        t2' < t2' + i; t * k < Suc t2'; 0 < i; t2 = t2' + i;\n        input \\<odot> k \\<Down> (i + Suc t2') \\<up> Suc t2' =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k < Suc t2'; 0 < i;\n        t2 = t2' + i;\n        input \\<odot> k \\<Down> Suc (i + t2') \\<up> Suc t2' =\n        NoMsg\\<^bsup>i\\<^esup>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (drule_tac c=\"(f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc t2') c)\" and n=i\n   in f_Exec_State_Idle_replicate_NoMsg_gr0_output, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t2' i.\n       \\<lbrakk>0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t2' + i \\<le> t * k + k - Suc 0;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)));\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t * k < Suc t2'; 0 < i;\n        t2 = t2' + i;\n        input \\<odot> k \\<Down> Suc (i + t2') \\<up> Suc t2' =\n        NoMsg\\<^bsup>i\\<^esup>;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2') c)) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n     State_Idle localState output_fun trans_fun (localState (s t1));\n     output_fun (s t1) \\<noteq> NoMsg;\n     \\<diamond> t [0\\<dots>] \\<oplus> t0.\n        (output_fun (s t) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t0) \\<down>< t.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState (s t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t1))", "apply (fastforce simp: iT_add iT_iff i_Exec_Stream_Acc_LocalState_nth i_Exec_Stream_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    t1 \\<in> [0\\<dots>, k - Suc 0] \\<oplus> t0;\n    output_fun (s t1) = m;\n    \\<circle> t2 t1 [0\\<dots>].\n     ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n      (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4))))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t1) = m;\n     \\<circle> t2 t1 [0\\<dots>].\n        output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n        output_fun (s t4) = NoMsg \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (s t4))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (clarsimp simp: iUntil_def iNext_def iT_inext iT_iff, rename_tac t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        m =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1)", "apply (simp only: i_Exec_Stream_Acc_Output_nth i_Exec_Stream_Acc_LocalState_nth i_Exec_Stream_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (map output_fun\n                            (f_Exec_Comp_Stream trans_fun\n                              (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c)", "apply (rule last_message_conv[THEN iffD2], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length\n                                     (map output_fun\n (f_Exec_Comp_Stream trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))).\n                            map output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c)) !\n                            i =\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) \\<and>\n                            (\\<forall>j<length\n   (map output_fun\n     (f_Exec_Comp_Stream trans_fun\n       (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n       (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))).\n                                i < j \\<longrightarrow>\n                                map output_fun\n                                 (f_Exec_Comp_Stream trans_fun\n                                   (input t #\n                                    NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<Down> t \\<odot> k) c)) !\n                                j =\n                                NoMsg)", "apply (clarsimp simp: iT_add iT_iff simp del: f_Exec_Comp_Stream.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<k.\n                            map output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c)) !\n                            i =\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) \\<and>\n                            (\\<forall>j<k.\n                                i < j \\<longrightarrow>\n                                output_fun\n                                 (f_Exec_Comp_Stream trans_fun\n                                   (input t #\n                                    NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<Down> t \\<odot> k) c) !\n                                  j) =\n                                NoMsg)", "apply (subgoal_tac \"t1 - t * k < k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<k.\n                            map output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c)) !\n                            i =\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) \\<and>\n                            (\\<forall>j<k.\n                                i < j \\<longrightarrow>\n                                output_fun\n                                 (f_Exec_Comp_Stream trans_fun\n                                   (input t #\n                                    NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<Down> t \\<odot> k) c) !\n                                  j) =\n                                NoMsg)\n 2. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 - t * k < k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 - t * k < k\n 2. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<k.\n                            map output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c)) !\n                            i =\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) \\<and>\n                            (\\<forall>j<k.\n                                i < j \\<longrightarrow>\n                                output_fun\n                                 (f_Exec_Comp_Stream trans_fun\n                                   (input t #\n                                    NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<Down> t \\<odot> k) c) !\n                                  j) =\n                                NoMsg)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<k.\n                            map output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c)) !\n                            i =\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) \\<and>\n                            (\\<forall>j<k.\n                                i < j \\<longrightarrow>\n                                output_fun\n                                 (f_Exec_Comp_Stream trans_fun\n                                   (input t #\n                                    NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<Down> t \\<odot> k) c) !\n                                  j) =\n                                NoMsg)", "apply (rule_tac x=\"t1 - t * k\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> t1 - t * k < k \\<and>\n                         map output_fun\n                          (f_Exec_Comp_Stream trans_fun\n                            (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) !\n                         (t1 - t * k) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) \\<and>\n                         (\\<forall>j<k.\n                             t1 - t * k < j \\<longrightarrow>\n                             output_fun\n                              (f_Exec_Comp_Stream trans_fun\n                                (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                                (f_Exec_Comp trans_fun\n                                  (input \\<Down> t \\<odot> k) c) !\n                               j) =\n                             NoMsg)", "apply (rule conjI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> map output_fun\n                          (f_Exec_Comp_Stream trans_fun\n                            (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) !\n                         (t1 - t * k) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) \\<and>\n                         (\\<forall>j<k.\n                             t1 - t * k < j \\<longrightarrow>\n                             output_fun\n                              (f_Exec_Comp_Stream trans_fun\n                                (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                                (f_Exec_Comp trans_fun\n                                  (input \\<Down> t \\<odot> k) c) !\n                               j) =\n                             NoMsg)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> map output_fun\n                          (f_Exec_Comp_Stream trans_fun\n                            (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) !\n                         (t1 - t * k) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c)\n 2. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j<k.\n                            t1 - t * k < j \\<longrightarrow>\n                            output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c) !\n                              j) =\n                            NoMsg", "apply (simp add: f_Exec_Stream_nth min_eqL del: f_Exec_Comp.simps f_Exec_Comp_Stream.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c)\n 2. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j<k.\n                            t1 - t * k < j \\<longrightarrow>\n                            output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c) !\n                              j) =\n                            NoMsg", "apply (simp only: f_Exec_append[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<Down> t \\<odot> k @\n                             input t # NoMsg\\<^bsup>t1 - t * k\\<^esup>)\n                            c) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c)\n 2. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j<k.\n                            t1 - t * k < j \\<longrightarrow>\n                            output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c) !\n                              j) =\n                            NoMsg", "apply (subst i_expand_i_take_mult_Suc[symmetric], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             (t * k + Suc (t1 - t * k)))\n                            c) =\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c)\n 2. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j<k.\n                            t1 - t * k < j \\<longrightarrow>\n                            output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c) !\n                              j) =\n                            NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j<k.\n                            t1 - t * k < j \\<longrightarrow>\n                            output_fun\n                             (f_Exec_Comp_Stream trans_fun\n                               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                               (f_Exec_Comp trans_fun\n                                 (input \\<Down> t \\<odot> k) c) !\n                              j) =\n                            NoMsg", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp_Stream trans_fun\n                            (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c) !\n                           j) =\n                         NoMsg", "apply (simp only: f_Exec_Stream_length length_Cons length_replicate Suc_pred\n  nth_map f_Exec_Stream_nth take_Suc_Cons take_replicate min_eqL[OF less_imp_le_pred])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input t # NoMsg\\<^bsup>j\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) =\n                         NoMsg", "apply (subst f_Exec_append[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<Down> t \\<odot> k @\n                             input t # NoMsg\\<^bsup>j\\<^esup>)\n                            c) =\n                         NoMsg", "apply (subst i_expand_i_take_mult_Suc[symmetric], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (case_tac \"t2 \\<le> t * k + j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 \\<le> t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; \\<not> t2 \\<le> t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; \\<not> t2 \\<le> t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 \\<le> t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 \\<le> t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (drule_tac x=t2 in order_le_less[THEN iffD1, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j \\<or> t2 = t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 = t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 = t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (subgoal_tac \"\n  State_Idle localState output_fun trans_fun\n    (localState (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> (t * k + Suc j)) c))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> (t * k + Suc j)) c))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> (t * k + Suc j)) c))\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (rule_tac t=\"t * k + Suc j\" and s=\"Suc t2 + (t * k + j - t2)\" in subst, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               (Suc t2 + (t * k + j - t2)))\n                              c))\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (simp only: i_take_add f_Exec_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Up> Suc t2 \\<Down>\n                               (t * k + j - t2))\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (simp only: i_take_i_drop)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               (t * k + j - t2 + Suc t2) \\<up>\n                               Suc t2)\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k)\n                     c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; j < k; t1 - t * k < j;\n        t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc (t * k + j) \\<up>\n                               Suc t2)\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (rule_tac t=t in ssubst[OF i_expand_nth_interval_eq_replicate_NoMsg, rule_format], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k)\n                     c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; j < k; t1 - t * k < j;\n        t2 < t * k + j\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              NoMsg\\<^bsup>t * k + j - t2\\<^esup>\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t2) c)))\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (simp add: f_Exec_State_Idle_replicate_NoMsg_state)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (subgoal_tac \"t1 div k = t \\<and> t2 div k = t\", elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c));\n        t1 div k = t; t2 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> t1 div k = t \\<and> t2 div k = t", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c))\\<rbrakk>\n       \\<Longrightarrow> t1 div k = t \\<and> t2 div k = t\n 2. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c));\n        t1 div k = t; t2 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (simp add: le_less_imp_div)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c);\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + Suc j))\n             c));\n        t1 div k = t; t2 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> (t * k + Suc j)) c) =\n                         NoMsg", "apply (simp only: i_expand_i_take_Suc i_expand_i_take_mult_Suc f_Exec_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k) c));\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t1 mod k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t1 mod k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c));\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t2 mod k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t2 mod k\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun\n              (input (t' div k) # NoMsg\\<^bsup>t' mod k\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> (t' div k) \\<odot> k)\n                c)) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; t1 - t * k < k; j < k;\n        t1 - t * k < j; t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        t1 div k = t; t2 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input t # NoMsg\\<^bsup>j\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) =\n                         NoMsg", "apply (simp add: f_Exec_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k)\n                     c));\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t1 mod k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n               c))) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t1 mod k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t2 mod k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>t2 mod k\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' mod k\\<^esup>\n              (trans_fun (input (t' div k))\n                (f_Exec_Comp trans_fun (input \\<Down> (t' div k) \\<odot> k)\n                  c))) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; j < k; t1 - t * k < j;\n        t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        t1 div k = t; t2 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         NoMsg", "apply (rule_tac m=\"t2 mod k\" in f_Exec_State_Idle_replicate_NoMsg_gr_output, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t2 j.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun (input \\<Down> Suc t \\<odot> k)\n                     c));\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t1 mod k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n               c))) \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t1 mod k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        Suc t1 \\<le> t2;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t2 mod k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>t2 mod k\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        \\<box> t' [Suc t1\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' mod k\\<^esup>\n              (trans_fun (input (t' div k))\n                (f_Exec_Comp trans_fun (input \\<Down> (t' div k) \\<odot> k)\n                  c))) =\n           NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; j < k; t1 - t * k < j;\n        t2 < t * k + j;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        t1 div k = t; t2 div k = t\\<rbrakk>\n       \\<Longrightarrow> t2 mod k < j", "apply (simp add: minus_div_mult_eq_mod [symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    \\<box> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. \\<not> (\n      State_Idle localState output_fun trans_fun (localState (s t1)) \\<and>\n      output_fun (s t1) \\<noteq> \\<NoMsg>) \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n     (output_fun (s t1) = m) \\<and>\n     (\\<circle> t2 t1 [0\\<dots>].\n      ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n      (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n     m\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         (\\<circle> t2 t1 [0\\<dots>].\n                             output_fun (s t3) = NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                             output_fun (s t4) = NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState (s t4)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_Exec_Stream_Acc_Output_nth i_Exec_Stream_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) \\<noteq>\n                NoMsg);\n     last_message\n      (map output_fun\n        (f_Exec_Comp_Stream trans_fun\n          (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n          (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n     m\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         m \\<and>\n                         (\\<circle> t2 t1 [0\\<dots>].\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: iNext_def iFROM_iff iFROM_inext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) \\<noteq>\n                NoMsg);\n     last_message\n      (map output_fun\n        (f_Exec_Comp_Stream trans_fun\n          (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n          (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n     m\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         m \\<and>\n                         (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t3) c) =\n                          NoMsg.\n                          t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t4) c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (frule last_message_conv[THEN iffD1], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                   c) \\<noteq>\n                NoMsg);\n     last_message\n      (map output_fun\n        (f_Exec_Comp_Stream trans_fun\n          (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n          (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n     m;\n     \\<exists>i<length\n                 (map output_fun\n                   (f_Exec_Comp_Stream trans_fun\n                     (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                     (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                       c))).\n        map output_fun\n         (f_Exec_Comp_Stream trans_fun\n           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) !\n        i =\n        m \\<and>\n        (\\<forall>j<length\n                     (map output_fun\n                       (f_Exec_Comp_Stream trans_fun\n                         (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c))).\n            i < j \\<longrightarrow>\n            map output_fun\n             (f_Exec_Comp_Stream trans_fun\n               (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) !\n            j =\n            NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t1) c) =\n                         m \\<and>\n                         (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t3) c) =\n                          NoMsg.\n                          t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t4) c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (elim exE conjE, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < length\n             (map output_fun\n               (f_Exec_Comp_Stream trans_fun\n                 (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                 (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        map output_fun\n         (f_Exec_Comp_Stream trans_fun\n           (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) !\n        i =\n        m;\n        \\<forall>j<length\n                    (map output_fun\n                      (f_Exec_Comp_Stream trans_fun\n                        (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c))).\n           i < j \\<longrightarrow>\n           map output_fun\n            (f_Exec_Comp_Stream trans_fun\n              (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) !\n           j =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: f_Exec_Stream_nth min_eqL del: f_Exec_Comp.simps f_Exec_Comp_Stream.simps de_Morgan_conj)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"\n   \\<box> t' ([0\\<dots>] \\<oplus> (Suc (t * k + i))) \\<down>< (t * k + k).\n   output_fun (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc t') c) = \\<NoMsg>\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + k).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + k).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule iallI, rename_tac t')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        t' \\<in> ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                 (t * k + k)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: iT_add iT_iff cut_less_mem_iff, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        0 + Suc (t * k + i) \\<le> t'; t' < t * k + k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac x=\"t' - t * k\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        0 + Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        t' - t * k < k \\<longrightarrow>\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t' - t * k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"t' - t * k < k\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        0 + Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        t' - t * k < k \\<longrightarrow>\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t' - t * k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        0 + Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        t' - t * k < k \\<longrightarrow>\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t' - t * k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> t' - t * k < k\n 3. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        0 + Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        t' - t * k < k \\<longrightarrow>\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t' - t * k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> t' - t * k < k\n 2. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        0 + Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        t' - t * k < k \\<longrightarrow>\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t' - t * k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        0 + Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        t' - t * k < k \\<longrightarrow>\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>t' - t * k\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: f_Exec_Stream_nth min_eqL del: f_Exec_Comp_Stream.simps de_Morgan_conj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"t * k \\<le> t'\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k; t * k \\<le> t'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t'\n 3. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t'\n 2. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k; t * k \\<le> t'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 3. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k; t * k \\<le> t'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule_tac t=\"Suc t'\" and s=\"t * k + (Suc t' - t * k)\" in subst, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k; t * k \\<le> t'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             (t * k + (Suc t' - t * k)))\n                            c) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_take_add f_Exec_append i_expand_i_take_mult)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k; t * k \\<le> t'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Up> (t * k) \\<Down>\n                             (Suc t' - t * k))\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: i_take_i_drop)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        (if last_message\n             (map output_fun\n               (f_Exec_Comp_Stream trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                 (trans_fun (input t)\n                   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                     c)))) =\n            NoMsg\n         then output_fun\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))\n         else last_message\n               (map output_fun\n                 (f_Exec_Comp_Stream trans_fun\n                   NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                       c))))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t' \\<up> (t * k))\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) =\n                         NoMsg\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule ssubst[OF i_expand_nth_interval_eq_nth_append_replicate_NoMsg])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        (if last_message\n             (map output_fun\n               (f_Exec_Comp_Stream trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                 (trans_fun (input t)\n                   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                     c)))) =\n            NoMsg\n         then output_fun\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))\n         else last_message\n               (map output_fun\n                 (f_Exec_Comp_Stream trans_fun\n                   NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                       c))))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> 0 < k\n 2. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        (if last_message\n             (map output_fun\n               (f_Exec_Comp_Stream trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                 (trans_fun (input t)\n                   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                     c)))) =\n            NoMsg\n         then output_fun\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))\n         else last_message\n               (map output_fun\n                 (f_Exec_Comp_Stream trans_fun\n                   NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                       c))))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t'\n 3. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        (if last_message\n             (map output_fun\n               (f_Exec_Comp_Stream trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                 (trans_fun (input t)\n                   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                     c)))) =\n            NoMsg\n         then output_fun\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))\n         else last_message\n               (map output_fun\n                 (f_Exec_Comp_Stream trans_fun\n                   NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                       c))))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> t' \\<le> t * k + k - Suc 0\n 4. \\<And>i t'.\n       \\<lbrakk>State_Idle localState output_fun trans_fun\n                 (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun\n                   input c t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        (if last_message\n             (map output_fun\n               (f_Exec_Comp_Stream trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                 (trans_fun (input t)\n                   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                     c)))) =\n            NoMsg\n         then output_fun\n               (trans_fun (input t)\n                 (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))\n         else last_message\n               (map output_fun\n                 (f_Exec_Comp_Stream trans_fun\n                   NoMsg\\<^bsup>k - Suc 0\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                       c))))) =\n        m;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        Suc (t * k + i) \\<le> t'; t' < t * k + k;\n        i < t' - t * k \\<longrightarrow>\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>t' - t * k\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        NoMsg;\n        t' - t * k < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input t # NoMsg\\<^bsup>t' - t * k\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) =\n                         NoMsg\n 5. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n           (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>j\\<^esup>)\n              (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 6. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp del: f_Exec_Comp_Stream.simps de_Morgan_conj)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t1) c) =\n                            m \\<and>\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t3) c) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc t1.\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t4) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule_tac t=\"t * k + i\" in iexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc (t * k + i)) c) =\n                         m \\<and>\n                         (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t3) c) =\n                          NoMsg.\n                          t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t4) c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc (t * k + i)) c) =\n                         m \\<and>\n                         (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t3) c) =\n                          NoMsg.\n                          t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t4) c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t4) c)))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc (t * k + i)) c) =\n                         m \\<and>\n                         (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t3) c) =\n                          NoMsg.\n                          t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                          output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down> Suc t4) c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t4) c)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc (t * k + i)) c) =\n                         m\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: add_Suc_right[symmetric] i_expand_i_take_mult_Suc f_Exec_append del: add_Suc_right)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_Exec_Stream_Acc_LocalState_nth i_expand_i_take_mult[symmetric] mult_Suc add.commute[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"\n   \\<not> State_Idle localState output_fun trans_fun\n       (localState (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> (t * k + Suc i)) c))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> (t * k + Suc i)) c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                                 (localState\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<odot> k \\<Down>\n(t * k + Suc i))\n                                     c))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                                 (localState\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<odot> k \\<Down>\n(t * k + Suc i))\n                                     c))\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> (t * k + Suc i)) c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac t=\"t * k + i\" in ispec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + i)) c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + i)) c) \\<noteq>\n                NoMsg)\\<rbrakk>\n       \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                                 (localState\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<odot> k \\<Down>\n(t * k + Suc i))\n                                     c))\n 3. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> (t * k + Suc i)) c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + i)) c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + i)) c) \\<noteq>\n                NoMsg)\\<rbrakk>\n       \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                                 (localState\n                                   (f_Exec_Comp trans_fun\n                                     (input \\<odot> k \\<Down>\n(t * k + Suc i))\n                                     c))\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> (t * k + Suc i)) c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: add_Suc_right[symmetric] i_expand_i_take_mult_Suc f_Exec_append i_expand_i_take_mult del: add_Suc_right)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        last_message\n         (map output_fun\n           (f_Exec_Comp_Stream trans_fun\n             (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> (t * k + Suc i)) c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (thin_tac \"last_message x = m\" for x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> (t * k + Suc i)) c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac\n   a=\"t * k + k\" and b=\"t * k + Suc (k - Suc 0)\" and\n   P=\"\\<lambda>x. State_Idle localState output_fun trans_fun\n          (localState (f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> x) c))\" in back_subst, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> (t * k + Suc i)) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun\n             (input \\<odot> k \\<Down> (t * k + Suc (k - Suc 0)))\n             c))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_expand_i_take_mult_Suc f_Exec_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n               c)))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (frule_tac n=\"k - Suc 0 - i\" in State_Idle_imp_exists_state_change)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n               c)))\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              NoMsg\\<^bsup>k - Suc 0 - i\\<^esup>\n                              (f_Exec_Comp trans_fun\n                                (input t # NoMsg\\<^bsup>i\\<^esup>)\n                                (f_Exec_Comp trans_fun\n                                  (input \\<Down> t \\<odot> k) c))))\n 2. \\<And>i.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        \\<exists>ia<k - Suc 0 - i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>ia\\<^esup>\n                       (f_Exec_Comp trans_fun\n                         (input t # NoMsg\\<^bsup>i\\<^esup>)\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c)))) \\<and>\n           (\\<forall>j\\<le>k - Suc 0 - i.\n               ia < j \\<longrightarrow>\n               State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c)))))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: f_Exec_append[symmetric] replicate_add[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        \\<exists>ia<k - Suc 0 - i.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun NoMsg\\<^bsup>ia\\<^esup>\n                       (f_Exec_Comp trans_fun\n                         (input t # NoMsg\\<^bsup>i\\<^esup>)\n                         (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                           c)))) \\<and>\n           (\\<forall>j\\<le>k - Suc 0 - i.\n               ia < j \\<longrightarrow>\n               State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c)))))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (elim exE conjE, rename_tac i1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                    c))))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (frule_tac i=i1 in less_diff_conv[THEN iffD1, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 + i < k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac a=i1 and P=\"\\<lambda>x. (x < k - Suc 0)\" in subst[OF add.commute, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (frule Suc_less_pred_conv[THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t3) c) =\n                         NoMsg.\n                         t3 \\<U> t4 [0\\<dots>] \\<oplus> Suc (t * k + i).\n                         output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t4) c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down> Suc t4) c))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: iUntil_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> Suc (t * k + i).\n                            (output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc ta) c) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (f_Exec_Comp trans_fun\n                                  (input \\<odot> k \\<Down> Suc ta)\n                                  c))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus>\n  Suc (t * k + i)) \\<down><\n ta.\n                                output_fun\n                                 (f_Exec_Comp trans_fun\n                                   (input \\<odot> k \\<Down> Suc t') c) =\n                                NoMsg)\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule_tac t=\"t * k + Suc (i + i1)\" in iexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down>\n                              Suc (t * k + Suc (i + i1)))\n                             c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down>\n                                Suc (t * k + Suc (i + i1)))\n                               c))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus>\n                                     Suc (t * k + i)) \\<down><\n                                    (t * k + Suc (i + i1)).\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t') c) =\n                             NoMsg)\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> t * k + Suc (i + i1)\n                         \\<in> [0\\<dots>] \\<oplus> Suc (t * k + i)\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> t * k + Suc (i + i1)\n                         \\<in> [0\\<dots>] \\<oplus> Suc (t * k + i)\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down>\n                              Suc (t * k + Suc (i + i1)))\n                             c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down>\n                                Suc (t * k + Suc (i + i1)))\n                               c))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus>\n                                     Suc (t * k + i)) \\<down><\n                                    (t * k + Suc (i + i1)).\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t') c) =\n                             NoMsg)\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (f_Exec_Comp trans_fun\n                             (input \\<odot> k \\<Down>\n                              Suc (t * k + Suc (i + i1)))\n                             c) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down>\n                                Suc (t * k + Suc (i + i1)))\n                               c))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus>\n                                     Suc (t * k + i)) \\<down><\n                                    (t * k + Suc (i + i1)).\n                             output_fun\n                              (f_Exec_Comp trans_fun\n                                (input \\<odot> k \\<Down> Suc t') c) =\n                             NoMsg)\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             Suc (t * k + Suc (i + i1)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (t * k + Suc (i + i1)))\n                              c))\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac t=\"t * k + Suc (i + i1)\" in ispec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> t * k + Suc (i + i1)\n                         \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                   c) \\<noteq>\n                NoMsg)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             Suc (t * k + Suc (i + i1)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (t * k + Suc (i + i1)))\n                              c))\n 3. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff cut_less_mem_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                   c) \\<noteq>\n                NoMsg)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             Suc (t * k + Suc (i + i1)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (t * k + Suc (i + i1)))\n                              c))\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"Suc (t * k + Suc (i + i1)) = t * k + Suc (Suc (i + i1))\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                   c) \\<noteq>\n                NoMsg);\n        Suc (t * k + Suc (i + i1)) = t * k + Suc (Suc (i + i1))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             Suc (t * k + Suc (i + i1)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (t * k + Suc (i + i1)))\n                              c))\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                   c) \\<noteq>\n                NoMsg)\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + Suc (i + i1)) =\n                         t * k + Suc (Suc (i + i1))\n 3. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                   c) \\<noteq>\n                NoMsg)\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k + Suc (i + i1)) =\n                         t * k + Suc (Suc (i + i1))\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                   c) \\<noteq>\n                NoMsg);\n        Suc (t * k + Suc (i + i1)) = t * k + Suc (Suc (i + i1))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             Suc (t * k + Suc (i + i1)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (t * k + Suc (i + i1)))\n                              c))\n 3. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                     c)) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input \\<odot> k \\<Down> Suc (t * k + Suc (i + i1)))\n                   c) \\<noteq>\n                NoMsg);\n        Suc (t * k + Suc (i + i1)) = t * k + Suc (Suc (i + i1))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down>\n                             Suc (t * k + Suc (i + i1)))\n                            c) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input \\<odot> k \\<Down>\n                               Suc (t * k + Suc (i + i1)))\n                              c))\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_expand_i_take_mult_Suc f_Exec_append)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c; i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (f_Exec_Comp trans_fun\n                     (input t # NoMsg\\<^bsup>Suc (i + i1)\\<^esup>)\n                     (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                       c))) \\<and>\n                output_fun\n                 (f_Exec_Comp trans_fun\n                   (input t # NoMsg\\<^bsup>Suc (i + i1)\\<^esup>)\n                   (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                     c)) \\<noteq>\n                NoMsg);\n        Suc (t * k + Suc (i + i1)) = t * k + Suc (Suc (i + i1))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input t # NoMsg\\<^bsup>Suc (i + i1)\\<^esup>)\n                            (f_Exec_Comp trans_fun\n                              (input \\<Down> t \\<odot> k) c)) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              (input t # NoMsg\\<^bsup>Suc (i + i1)\\<^esup>)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c)))\n 2. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: add_Suc_right[symmetric] replicate_add f_Exec_append del: add_Suc_right replicate.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (f_Exec_Comp trans_fun\n                        (input \\<odot> k \\<Down> Suc t1) c)) \\<and>\n                   output_fun\n                    (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                      c) \\<noteq>\n                   NoMsg);\n        i < k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c))) =\n        m;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t * k + i)) \\<down><\n                  (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>k - Suc 0\\<^esup>)\n             (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c)));\n        i1 < k - Suc 0 - i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun\n                      (input t # NoMsg\\<^bsup>i\\<^esup>)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        \\<forall>j\\<le>k - Suc 0 - i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun (input t # NoMsg\\<^bsup>i\\<^esup>)\n                  (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus>\n                                    Suc (t * k + i)) \\<down><\n                                   (t * k + Suc (i + i1)).\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc t') c) =\n                            NoMsg\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (clarsimp simp: cut_less_mem_iff iT_add iT_iff simp del: f_Exec_Comp_Stream.simps, rename_tac t')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"\\<exists>i'>i. t' = t * k + i'\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1));\n        \\<exists>i'>i. t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i'>i. t' = t * k + i'\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i'>i. t' = t * k + i'\n 2. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1));\n        \\<exists>i'>i. t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule_tac x=\"t' - t * k\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1))\\<rbrakk>\n       \\<Longrightarrow> i < t' - t * k \\<and> t' = t * k + (t' - t * k)\n 2. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1));\n        \\<exists>i'>i. t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<box> t' [Suc (t * k + i)\\<dots>] \\<down>< (t * k + k).\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1));\n        \\<exists>i'>i. t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (thin_tac \"iAll I P\" for I P)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1 t'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1));\n        \\<exists>i'>i. t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (elim exE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1 t' i'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1)); i < i';\n        t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"i' < k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1 t' i'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1)); i < i';\n        t' = t * k + i'; i' < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<And>i i1 t' i'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1)); i < i';\n        t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> i' < k\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1 t' i'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1)); i < i';\n        t' = t * k + i'\\<rbrakk>\n       \\<Longrightarrow> i' < k\n 2. \\<And>i i1 t' i'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1)); i < i';\n        t' = t * k + i'; i' < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1 t' i'.\n       \\<lbrakk>output_fun\n                 (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                   (trans_fun (input t)\n                     (f_Exec_Comp trans_fun\n                       (input \\<odot> k \\<Down> (t * k)) c))) \\<noteq>\n                NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<forall>j<k.\n           i < j \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n              (trans_fun (input t)\n                (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k))\n                  c))) =\n           NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                    (trans_fun (input t)\n                      (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                        c))));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun NoMsg\\<^bsup>k - Suc 0\\<^esup>\n             (trans_fun (input t)\n               (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k) c))));\n        i1 < k - Suc i;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun NoMsg\\<^bsup>i1\\<^esup>\n                    (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                      (trans_fun (input t)\n                        (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                          c)))));\n        \\<forall>j\\<le>k - Suc i.\n           i1 < j \\<longrightarrow>\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun NoMsg\\<^bsup>j\\<^esup>\n                (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n                  (trans_fun (input t)\n                    (f_Exec_Comp trans_fun (input \\<Down> t \\<odot> k)\n                      c)))));\n        i + i1 < k - Suc 0; Suc (i + i1) < k;\n        m =\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (trans_fun (input t)\n             (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k)) c)));\n        Suc (t * k + i) \\<le> t'; t' < Suc (t * k + (i + i1)); i < i';\n        t' = t * k + i'; i' < k\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            (input \\<odot> k \\<Down> Suc t') c) =\n                         NoMsg\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: add_Suc_right[symmetric] i_expand_i_take_mult_Suc f_Exec_append f_Exec_Stream_nth min_eqL i_expand_i_take_mult del: add_Suc_right f_Exec_Comp_Stream.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (elim iexE conjE, rename_tac t1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState (s t1)) \\<and>\n                   output_fun (s t1) \\<noteq> NoMsg);\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0; output_fun (s t1) = m;\n        \\<circle> t2 t1 [0\\<dots>].\n           output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n           output_fun (s t4) = NoMsg \\<and>\n           State_Idle localState output_fun trans_fun\n            (localState (s t4))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m", "apply (rule i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp2, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Here the property to be checked uses only unbounded intervals suitable for LTL.\\<close>"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    (\\<not> State_Idle localState output_fun trans_fun (localState (s t1))). t1 \\<U> t2 [0\\<dots>] \\<oplus> t0. (\n    (output_fun (s t2) = m) \\<and>\n    (\\<circle> t3 t2 [0\\<dots>].\n      ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n       (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (case_tac \"\n  \\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      State_Idle localState output_fun trans_fun (localState (s t1)) \\<and>\n      output_fun (s t1) \\<noteq> \\<NoMsg>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        State_Idle localState output_fun trans_fun\n         (localState (s t1)) \\<and>\n        output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (clarsimp, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)).\n        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m \\<and>\n        (\\<circle> t3 t2 [0\\<dots>].\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n            NoMsg.\n            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n            NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5)));\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (frule i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_imp[OF Suc_lessD refl refl], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)).\n        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m \\<and>\n        (\\<circle> t3 t2 [0\\<dots>].\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n            NoMsg.\n            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n            NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5)));\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: iNext_def iT_inext iT_iff iUntil_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n           (output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n            m \\<and>\n            (\\<diamond> t [0\\<dots>] \\<oplus> Suc ta.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> Suc ta) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n           (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n               \\<not> State_Idle localState output_fun trans_fun\n                       (localState\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t')));\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (elim iexE conjE, rename_tac t2 t3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"t2 \\<le> t1\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3))\\<rbrakk>\n       \\<Longrightarrow> t2 \\<le> t1\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3))\\<rbrakk>\n       \\<Longrightarrow> t2 \\<le> t1\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule ccontr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        \\<not> t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac t=t1 in ispec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        \\<not> t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> ([0\\<dots>] \\<oplus> t * k) \\<down>< t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        \\<not> t2 \\<le> t1;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                    t1))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: cut_less_mem_iff iT_add iT_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        \\<not> t2 \\<le> t1;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                    t1))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t2.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (thin_tac \"iAll I P\" for I P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"t1 \\<le> t2\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t2\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule ccontr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"t3 < t1 \\<longrightarrow> output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c t1) = \\<NoMsg>\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> t3 < t1 \\<longrightarrow>\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> t3 < t1 \\<longrightarrow>\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"t * k \\<le> t3\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t3\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 5. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t3\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 5. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"t1 div k = t \\<and> t3 div k = t\", elim conjE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3;\n        t1 div k = t; t3 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3\\<rbrakk>\n       \\<Longrightarrow> t1 div k = t \\<and> t3 div k = t\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 5. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3\\<rbrakk>\n       \\<Longrightarrow> t1 div k = t \\<and> t3 div k = t\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3;\n        t1 div k = t; t3 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 5. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff le_less_imp_div)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3;\n        t1 div k = t; t3 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp (no_asm_simp) add: i_Exec_Stream_nth i_expand_i_take_Suc f_Exec_append)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3;\n        t1 div k = t; t3 div k = t\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (f_Exec_Comp trans_fun\n                            NoMsg\\<^bsup>t1 mod k\\<^esup>\n                            (trans_fun (input t)\n                              (f_Exec_Comp trans_fun\n                                (input \\<Down> t \\<odot> k) c))) =\n                         NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule_tac m=\"t3 mod k\" in f_Exec_State_Idle_replicate_NoMsg_gr_output[of localState output_fun trans_fun])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3;\n        t1 div k = t; t3 div k = t\\<rbrakk>\n       \\<Longrightarrow> State_Idle localState output_fun trans_fun\n                          (localState\n                            (f_Exec_Comp trans_fun\n                              NoMsg\\<^bsup>t3 mod k\\<^esup>\n                              (trans_fun (input t)\n                                (f_Exec_Comp trans_fun\n                                  (input \\<Down> t \\<odot> k) c))))\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3;\n        t1 div k = t; t3 div k = t\\<rbrakk>\n       \\<Longrightarrow> t3 mod k < t1 mod k\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 5. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: i_Exec_Stream_nth i_expand_i_take_Suc f_Exec_append)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2; t3 < t1; t * k \\<le> t3;\n        t1 div k = t; t3 div k = t\\<rbrakk>\n       \\<Longrightarrow> t3 mod k < t1 mod k\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: minus_div_mult_eq_mod [symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (case_tac \"t1 < t3\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n        t1 < t3\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n        \\<not> t1 < t3\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac t=t1 in ispec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n        t1 < t3\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n        t1 < t3;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n        \\<not> t1 < t3\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 5. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: cut_less_mem_iff iT_add iT_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n        t1 < t3;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; \\<not> t1 \\<le> t2;\n        t3 < t1 \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n        \\<not> t1 < t3\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1);\n        t2 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m;\n        t3 \\<in> [0\\<dots>] \\<oplus> Suc t2;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t2) \\<down>< t3.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3));\n        t2 \\<le> t1; t1 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun (localState (s t5)));\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n     output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n     m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n         NoMsg.\n         t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n         NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5)));\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule ssubst[OF i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv2], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n     output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n     m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n         NoMsg.\n         t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n         NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5)));\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m \\<and>\n                         (\\<circle> t2 t1 [0\\<dots>].\n                             output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t3) =\n                             NoMsg.\n                             t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                             output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t4) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t4)))", "apply (simp only: iNext_def iT_inext iT_iff iUntil_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<diamond> t [0\\<dots>] \\<oplus> Suc ta.\n             (output_fun\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n              NoMsg \\<and>\n              State_Idle localState output_fun trans_fun\n               (localState\n                 (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                   t))) \\<and>\n             (\\<box> t' ([0\\<dots>] \\<oplus> Suc ta) \\<down>< t.\n                 output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                 NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')));\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                         output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m \\<and>\n                         (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                             (output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t) =\n                              NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t))) \\<and>\n                             (\\<box> t' ([0\\<dots>] \\<oplus>\n   Suc t1) \\<down><\n  t.\n                                 output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t') =\n                                 NoMsg))", "apply (elim iexE conjE, rename_tac t1 t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (subgoal_tac \"t1 \\<le> t * k + (k - Suc 0)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + (k - Suc 0)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + (k - Suc 0)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        \\<not> t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (simp add: i_Exec_Stream_Acc_LocalState_nth i_expand_i_take_mult[symmetric] add.commute[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (thin_tac \"iAll I P\" for I P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (drule_tac t=\"t * k + (k - Suc 0)\" in ispec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t * k + (k - Suc 0)\n                         \\<in> ([0\\<dots>] \\<oplus> t * k) \\<down>< t1\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        \\<not> t1 \\<le> t * k + k - Suc 0;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                    (t * k + (k - Suc 0))))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (simp add: cut_less_mem_iff iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (t * k + k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        \\<not> t1 \\<le> t * k + k - Suc 0;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                    (t * k + (k - Suc 0))))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (simp add: i_Exec_Stream_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                                (output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t) =\n                                 NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState\n                                    (i_Exec_Comp_Stream trans_fun\n(input \\<odot> k) c t))) \\<and>\n                                (\\<box> t' ([0\\<dots>] \\<oplus>\n      Suc t1) \\<down><\n     t.\n                                    output_fun\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t') =\n                                    NoMsg))", "apply (rule_tac t=t1 in iexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m \\<and>\n                         (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                             (output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t) =\n                              NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t))) \\<and>\n                             (\\<box> t' ([0\\<dots>] \\<oplus>\n   Suc t1) \\<down><\n  t.\n                                 output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t') =\n                                 NoMsg))\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m \\<and>\n                         (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                             (output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t) =\n                              NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t))) \\<and>\n                             (\\<box> t' ([0\\<dots>] \\<oplus>\n   Suc t1) \\<down><\n  t.\n                                 output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t') =\n                                 NoMsg))", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m \\<and>\n                         (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                             (output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t) =\n                              NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t))) \\<and>\n                             (\\<box> t' ([0\\<dots>] \\<oplus>\n   Suc t1) \\<down><\n  t.\n                                 output_fun\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t') =\n                                 NoMsg))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t) =\n                            NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t)) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down><\n t.\n                                output_fun\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t') =\n                                NoMsg)", "apply (rule_tac t=t2 in iexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t2) =\n                         NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t2)) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down><\n                                    t2.\n                             output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t') =\n                             NoMsg)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t2 \\<in> [0\\<dots>] \\<oplus> Suc t1", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    \\<box> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. \\<not> (\n      State_Idle localState output_fun trans_fun (localState (s t1)) \\<and>\n      output_fun (s t1) \\<noteq> \\<NoMsg>) \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  ((\\<not> State_Idle localState output_fun trans_fun (localState (s t1))). t1 \\<U> t2 [0\\<dots>] \\<oplus> t0. (\n     (output_fun (s t2) = m) \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n       ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n        (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<not> State_Idle localState output_fun trans_fun\n                               (localState (s t1)).\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = m \\<and>\n                       (\\<circle> t3 t2 [0\\<dots>].\n                           output_fun (s t4) = NoMsg.\n                           t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                           output_fun (s t5) = NoMsg \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState (s t5))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n     m\\<rbrakk>\n    \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                              (localState (s t1)).\n                      t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                      output_fun (s t2) = m \\<and>\n                      (\\<circle> t3 t2 [0\\<dots>].\n                          output_fun (s t4) = NoMsg.\n                          t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                          output_fun (s t5) = NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t5)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (frule subst[OF i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv2, where P=\"\\<lambda>x. x\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                              (localState (s t1)).\n                      t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                      output_fun (s t2) = m \\<and>\n                      (\\<circle> t3 t2 [0\\<dots>].\n                          output_fun (s t4) = NoMsg.\n                          t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                          output_fun (s t5) = NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t5)))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: iNext_def iT_inext iT_iff iUntil_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState\n                   (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                     t1)) \\<and>\n                output_fun\n                 (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                   t1) \\<noteq>\n                NoMsg);\n     i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m \\<and>\n        (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n            (output_fun\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n             NoMsg \\<and>\n             State_Idle localState output_fun trans_fun\n              (localState\n                (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                  t))) \\<and>\n            (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t.\n                output_fun\n                 (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                NoMsg))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<diamond> t [0\\<dots>] \\<oplus> Suc ta.\n                              (output_fun\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t) =\n                               NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t))) \\<and>\n                              (\\<box> t' ([0\\<dots>] \\<oplus>\n    Suc ta) \\<down><\n   t.\n                                  output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t') =\n                                  NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (elim iexE conjE, rename_tac t1 t2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<diamond> t [0\\<dots>] \\<oplus> Suc ta.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       Suc ta) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule_tac t=t1 in iexI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                              (output_fun\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t) =\n                               NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t))) \\<and>\n                              (\\<box> t' ([0\\<dots>] \\<oplus>\n    Suc t1) \\<down><\n   t.\n                                  output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t') =\n                                  NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> [0\\<dots>] \\<oplus> t * k\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> t1 \\<in> [0\\<dots>] \\<oplus> t * k\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                              (output_fun\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t) =\n                               NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t))) \\<and>\n                              (\\<box> t' ([0\\<dots>] \\<oplus>\n    Suc t1) \\<down><\n   t.\n                                  output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t') =\n                                  NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          (\\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                              (output_fun\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t) =\n                               NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t))) \\<and>\n                              (\\<box> t' ([0\\<dots>] \\<oplus>\n    Suc t1) \\<down><\n   t.\n                                  output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t') =\n                                  NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (intro conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> output_fun\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1) =\n                         m\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down><\n t.\n                                output_fun\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t') =\n                                NoMsg)\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                            \\<not> State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t [0\\<dots>] \\<oplus> Suc t1.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t) =\n                             NoMsg \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down><\n t.\n                                output_fun\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t') =\n                                NoMsg)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                            \\<not> State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule_tac t=t2 in iexI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t2) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t2))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down><\n                                    t2.\n                             output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t') =\n                             NoMsg)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> t2 \\<in> [0\\<dots>] \\<oplus> Suc t1\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                            \\<not> State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> t2 \\<in> [0\\<dots>] \\<oplus> Suc t1\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t2) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t2))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down><\n                                    t2.\n                             output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t') =\n                             NoMsg)\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                            \\<not> State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t2) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t2))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down><\n                                    t2.\n                             output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t') =\n                             NoMsg)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                            \\<not> State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n                            \\<not> State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule iallI, rename_tac t')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t' \\<in> ([0\\<dots>] \\<oplus> t * k) \\<down>< t1\\<rbrakk>\n       \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                                 (localState\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t'))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           \\<not> (State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t1)) \\<and>\n                   output_fun\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t1) \\<noteq>\n                   NoMsg);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        t' \\<in> ([0\\<dots>] \\<oplus> t * k) \\<down>< t1;\n        \\<not> \\<not> State_Idle localState output_fun trans_fun\n                       (localState\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t'))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (clarsimp simp: cut_less_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; t' < t1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac i=t' in less_imp_add_positive)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t'.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<exists>k>0. t' + k = t1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (elim exE conjE, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t' + i = t1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac t=t1 in sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t1;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t1) \\<down>< t2.\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n           NoMsg;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2));\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_Exec_Stream_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc (t' + i)) c) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc (t' + i);\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc (t' + i)) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: add_Suc[symmetric] i_take_add f_Exec_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Up> Suc t' \\<Down> i)\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t' + i;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t' + i) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_take_i_drop)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t') \\<up> Suc t')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t' + i;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t' + i) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (subgoal_tac \"i + Suc t' \\<le> t * k + k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t') \\<up> Suc t')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t' + i;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t' + i) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i;\n        i + Suc t' \\<le> t * k + k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t') \\<up> Suc t')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t' + i;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t' + i) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i\\<rbrakk>\n       \\<Longrightarrow> i + Suc t' \\<le> t * k + k\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t') \\<up> Suc t')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t' + i;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t' + i) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i\\<rbrakk>\n       \\<Longrightarrow> i + Suc t' \\<le> t * k + k\n 2. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t') \\<up> Suc t')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t' + i;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t' + i) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i;\n        i + Suc t' \\<le> t * k + k\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp add: iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t' + i \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t') \\<up> Suc t')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t2 \\<in> [0\\<dots>] \\<oplus> Suc t' + i;\n        \\<box> t' ([0\\<dots>] \\<oplus> Suc t' + i) \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        t' \\<in> [0\\<dots>] \\<oplus> t * k; 0 < i; t1 = t' + i;\n        i + Suc t' \\<le> t * k + k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: iT_add iT_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        0 + t * k \\<le> t' + i \\<and> t' + i \\<le> 0 + t * k + (k - Suc 0);\n        output_fun\n         (f_Exec_Comp trans_fun\n           (input \\<odot> k \\<Down> (i + Suc t') \\<up> Suc t')\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + (Suc t' + i) \\<le> t2;\n        \\<box> t' [0 + (Suc t' + i)\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + t * k \\<le> t'; 0 < i; t1 = t' + i;\n        i + Suc t' \\<le> t * k + k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (simp only: i_expand_nth_interval_eq_replicate_NoMsg[of k t, OF _ le_imp_less_Suc le_add2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        0 + t * k \\<le> t' + i \\<and> t' + i \\<le> 0 + t * k + (k - Suc 0);\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i + Suc t' - Suc t'\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + (Suc t' + i) \\<le> t2;\n        \\<box> t' [0 + (Suc t' + i)\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + t * k \\<le> t'; 0 < i; t1 = t' + i;\n        i + Suc t' \\<le> t * k + k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (drule_tac c=\"f_Exec_Comp trans_fun (input \\<odot>\\<^sub>i k \\<Down> Suc t') c\" and n=i in f_Exec_State_Idle_replicate_NoMsg_gr0_output)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        0 + t * k \\<le> t' + i \\<and> t' + i \\<le> 0 + t * k + (k - Suc 0);\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i + Suc t' - Suc t'\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + (Suc t' + i) \\<le> t2;\n        \\<box> t' [0 + (Suc t' + i)\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + t * k \\<le> t'; 0 < i; t1 = t' + i;\n        i + Suc t' \\<le> t * k + k\\<rbrakk>\n       \\<Longrightarrow> 0 < i\n 2. \\<And>t1 t2 t' i.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c\n         t \\<noteq>\n        NoMsg;\n        t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0 + t * k\\<dots>,k - Suc 0].\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        0 + t * k \\<le> t' + i \\<and> t' + i \\<le> 0 + t * k + (k - Suc 0);\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i + Suc t' - Suc t'\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + (Suc t' + i) \\<le> t2;\n        \\<box> t' [0 + (Suc t' + i)\\<dots>] \\<down>< t2.\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n           NoMsg;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c) =\n        NoMsg;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t2) c));\n        m = i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t;\n        0 + t * k \\<le> t'; 0 < i; t1 = t' + i; i + Suc t' \\<le> t * k + k;\n        output_fun\n         (f_Exec_Comp trans_fun NoMsg\\<^bsup>i\\<^esup>\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)) =\n        NoMsg\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        \\<not> (State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg);\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t2) = m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n     output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n     m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n         NoMsg.\n         t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n         NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "apply (rule i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n    output_fun (s t1) = m \\<and>\n    (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n    (\\<circle> t2 t1 [0\\<dots>].\n      ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n       (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4)))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          (State_Idle localState output_fun trans_fun\n                            (localState (s t1)) \\<or>\n                           (\\<circle> t2 t1 [0\\<dots>].\n                               output_fun (s t3) = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                               output_fun (s t4) = NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState (s t4)))))", "apply (subst conj_disj_distribL)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (case_tac \"\n  \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n    (State_Idle localState output_fun trans_fun (localState (s t1)) \\<and> output_fun (s t1) \\<noteq> \\<NoMsg>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        State_Idle localState output_fun trans_fun\n         (localState (s t1)) \\<and>\n        output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (elim iexE conjE, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun\n                           trans_fun input c t =\n                          m) =\n                         (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                             output_fun (s t1) = m \\<and>\n                             State_Idle localState output_fun trans_fun\n                              (localState (s t1)) \\<or>\n                             output_fun (s t1) = m \\<and>\n                             (\\<circle> t2 t1 [0\\<dots>].\n                                 output_fun (s t3) = NoMsg.\n                                 t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                                 output_fun (s t4) = NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState (s t4))))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (rule iffI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        m\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                            output_fun (s t1) = m \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t1)) \\<or>\n                            output_fun (s t1) = m \\<and>\n                            (\\<circle> t2 t1 [0\\<dots>].\n                                output_fun (s t3) = NoMsg.\n                                t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                                output_fun (s t4) = NoMsg \\<and>\n                                State_Idle localState output_fun trans_fun\n                                 (localState (s t4)))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n           output_fun (s t1) = m \\<and>\n           State_Idle localState output_fun trans_fun\n            (localState (s t1)) \\<or>\n           output_fun (s t1) = m \\<and>\n           (\\<circle> t2 t1 [0\\<dots>].\n               output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n               output_fun (s t4) = NoMsg \\<and>\n               State_Idle localState output_fun trans_fun\n                (localState (s t4)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (frule i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv2[THEN iffD1, OF Suc_lessD], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m;\n        \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n           output_fun (s t1) = m \\<and>\n           State_Idle localState output_fun trans_fun\n            (localState (s t1))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                            output_fun (s t1) = m \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t1)) \\<or>\n                            output_fun (s t1) = m \\<and>\n                            (\\<circle> t2 t1 [0\\<dots>].\n                                output_fun (s t3) = NoMsg.\n                                t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                                output_fun (s t4) = NoMsg \\<and>\n                                State_Idle localState output_fun trans_fun\n                                 (localState (s t4)))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n           output_fun (s t1) = m \\<and>\n           State_Idle localState output_fun trans_fun\n            (localState (s t1)) \\<or>\n           output_fun (s t1) = m \\<and>\n           (\\<circle> t2 t1 [0\\<dots>].\n               output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n               output_fun (s t4) = NoMsg \\<and>\n               State_Idle localState output_fun trans_fun\n                (localState (s t4)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n           output_fun (s t1) = m \\<and>\n           State_Idle localState output_fun trans_fun\n            (localState (s t1)) \\<or>\n           output_fun (s t1) = m \\<and>\n           (\\<circle> t2 t1 [0\\<dots>].\n               output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n               output_fun (s t4) = NoMsg \\<and>\n               State_Idle localState output_fun trans_fun\n                (localState (s t4)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (elim iexE conjI, rename_tac t2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        output_fun (s t2) = m \\<and>\n        State_Idle localState output_fun trans_fun (localState (s t2)) \\<or>\n        output_fun (s t2) = m \\<and>\n        (\\<circle> t2 t2 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        output_fun (s t2) = m \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (s t2))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        output_fun (s t2) = m \\<and>\n        (\\<circle> t2 t2 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (rule i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv2[THEN iffD2], simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1) =\n                            m \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t1))\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        output_fun (s t2) = m \\<and>\n        (\\<circle> t2 t2 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (rule_tac t=t2 in iexI, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        t2 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n        m \\<and>\n        (\\<circle> t2 t2 [0\\<dots>].\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t3) =\n            NoMsg.\n            t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n            NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                 t4)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun (s t3) = NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun (s t4) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t4))))", "apply (rule_tac ?t1.0=t2 in i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp2, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1)) \\<or>\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t3) =\n                              NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t4) =\n                              NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t4))))", "apply (rule ssubst[OF i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv2[OF _ _ _ refl refl]], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t3) =\n                              NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t4) =\n                              NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t4)))) =\n                      (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t1)) \\<or>\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1) =\n                          m \\<and>\n                          (\\<circle> t2 t1 [0\\<dots>].\n                              output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t3) =\n                              NoMsg.\n                              t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                              output_fun\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t4) =\n                              NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t4))))", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2': \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  ((\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))) \\<or>\n  (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      ((output_fun (s t1) = m) \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n          ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n           (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4))))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                           output_fun (s t1) = m \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState (s t1))) \\<or>\n                       (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                           output_fun (s t1) = m \\<and>\n                           (\\<circle> t2 t1 [0\\<dots>].\n                               output_fun (s t3) = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                               output_fun (s t4) = NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState (s t4)))))", "apply (subst i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          (State_Idle localState output_fun trans_fun\n                            (localState (s t1)) \\<or>\n                           (\\<circle> t2 t1 [0\\<dots>].\n                               output_fun (s t3) = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                               output_fun (s t4) = NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState (s t4))))) =\n                      ((\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                           output_fun (s t1) = m \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState (s t1))) \\<or>\n                       (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                           output_fun (s t1) = m \\<and>\n                           (\\<circle> t2 t1 [0\\<dots>].\n                               output_fun (s t3) = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                               output_fun (s t4) = NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState (s t4)))))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iAll_iUntil_State_Idle_conv2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) = (\n  (m = \\<NoMsg> \\<longrightarrow>\n    (output_fun (s t1) = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\n     output_fun (s t2) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t2))))) \\<and>\n  (m \\<noteq> \\<NoMsg> \\<longrightarrow>\n    (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n      output_fun (s t1) = m \\<and>\n      (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n      (\\<circle> t2 t1 [0\\<dots>].\n        ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n         (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4)))))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                            output_fun (s t1) = m \\<and>\n                            (State_Idle localState output_fun trans_fun\n                              (localState (s t1)) \\<or>\n                             (\\<circle> t2 t1 [0\\<dots>].\n                                 output_fun (s t3) = NoMsg.\n                                 t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                                 output_fun (s t4) = NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState (s t4)))))))", "apply (case_tac \"m = \\<NoMsg>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m = NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                            output_fun (s t1) = m \\<and>\n                            (State_Idle localState output_fun trans_fun\n                              (localState (s t1)) \\<or>\n                             (\\<circle> t2 t1 [0\\<dots>].\n                                 output_fun (s t3) = NoMsg.\n                                 t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                                 output_fun (s t4) = NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState (s t4)))))))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                            output_fun (s t1) = m \\<and>\n                            (State_Idle localState output_fun trans_fun\n                              (localState (s t1)) \\<or>\n                             (\\<circle> t2 t1 [0\\<dots>].\n                                 output_fun (s t3) = NoMsg.\n                                 t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                                 output_fun (s t4) = NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState (s t4)))))))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_State_Idle_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                            output_fun (s t1) = m \\<and>\n                            (State_Idle localState output_fun trans_fun\n                              (localState (s t1)) \\<or>\n                             (\\<circle> t2 t1 [0\\<dots>].\n                                 output_fun (s t3) = NoMsg.\n                                 t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n                                 output_fun (s t4) = NoMsg \\<and>\n                                 State_Idle localState output_fun trans_fun\n                                  (localState (s t4)))))))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv': \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))) \\<or>\n  ((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n   (output_fun (s t1) = m \\<and>\n   (\\<circle> t3 t1 [0\\<dots>].\n     ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n      (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5)))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (case_tac \"\n  \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n    (State_Idle localState output_fun trans_fun (localState (s t1)) \\<and> output_fun (s t1) \\<noteq> \\<NoMsg>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        State_Idle localState output_fun trans_fun\n         (localState (s t1)) \\<and>\n        output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (elim iexE conjE, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun\n                           trans_fun input c t =\n                          m) =\n                         ((\\<not> State_Idle localState output_fun trans_fun\n                                   (localState (s t2)).\n                           t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                           output_fun (s t1) = m \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState (s t1))) \\<or>\n                          (\\<not> State_Idle localState output_fun trans_fun\n                                   (localState (s t2)).\n                           t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                           output_fun (s t1) = m \\<and>\n                           (\\<circle> t3 t1 [0\\<dots>].\n                               output_fun (s t4) = NoMsg.\n                               t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                               output_fun (s t5) = NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState (s t5)))))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (rule iffI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t =\n        m\\<rbrakk>\n       \\<Longrightarrow> (\\<not> State_Idle localState output_fun trans_fun\n                                  (localState (s t2)).\n                          t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t1))) \\<or>\n                         (\\<not> State_Idle localState output_fun trans_fun\n                                  (localState (s t2)).\n                          t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                          output_fun (s t1) = m \\<and>\n                          (\\<circle> t3 t1 [0\\<dots>].\n                              output_fun (s t4) = NoMsg.\n                              t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                              output_fun (s t5) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t5))))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t0;\n        State_Idle localState output_fun trans_fun (localState (s t1));\n        output_fun (s t1) \\<noteq> NoMsg;\n        (\\<not> State_Idle localState output_fun trans_fun\n                 (localState (s t2)).\n         t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n         output_fun (s t1) = m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t1))) \\<or>\n        (\\<not> State_Idle localState output_fun trans_fun\n                 (localState (s t2)).\n         t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n         output_fun (s t1) = m \\<and>\n         (\\<circle> t3 t1 [0\\<dots>].\n             output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n             output_fun (s t5) = NoMsg \\<and>\n             State_Idle localState output_fun trans_fun\n              (localState (s t5))))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (frule i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv[THEN iffD1, OF Suc_lessD], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        (\\<not> State_Idle localState output_fun trans_fun\n                 (localState\n                   (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n         t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n         m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1))) \\<or>\n        (\\<not> State_Idle localState output_fun trans_fun\n                 (localState\n                   (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n         t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n         m \\<and>\n         (\\<circle> t3 t1 [0\\<dots>].\n             output_fun\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n             NoMsg.\n             t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n             output_fun\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n             NoMsg \\<and>\n             State_Idle localState output_fun trans_fun\n              (localState\n                (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                  t5))))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n        t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n        t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m \\<and>\n        (\\<circle> t3 t1 [0\\<dots>].\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n            NoMsg.\n            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n            NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                 t5)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (rule i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv[THEN iffD2], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>,k - Suc 0] \\<oplus> t * k;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        output_fun\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) \\<noteq>\n        NoMsg;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n        t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m \\<and>\n        (\\<circle> t3 t1 [0\\<dots>].\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n            NoMsg.\n            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n            output_fun\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n            NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                 t5)))\\<rbrakk>\n       \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun\n                          trans_fun input c t =\n                         m\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> (\\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n                State_Idle localState output_fun trans_fun\n                 (localState (s t1)) \\<and>\n                output_fun (s t1) \\<noteq> NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (rule_tac i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t4) =\n                            NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t5) =\n                            NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t5)))))", "apply (subst i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv[OF _ _ _ refl refl], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<not> State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t1)).\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t2) =\n                       m \\<and>\n                       (\\<circle> t3 t2 [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t4) =\n                           NoMsg.\n                           t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t5) =\n                           NoMsg \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t5)))) =\n                      ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState\n                                  (i_Exec_Comp_Stream trans_fun\n                                    (input \\<odot> k) c t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n                        output_fun\n                         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                           t1) =\n                        m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t4) =\n                            NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t5) =\n                            NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState\n                               (i_Exec_Comp_Stream trans_fun\n                                 (input \\<odot> k) c t5)))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<not> State_Idle localState output_fun trans_fun\n             (localState\n               (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1)).\n     t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n     output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2) =\n     m \\<and>\n     (\\<circle> t3 t2 [0\\<dots>].\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n         NoMsg.\n         t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n         NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5)))\\<rbrakk>\n    \\<Longrightarrow> (\\<not> State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t2)).\n                       t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       m \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState\n                          (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                            t1))) \\<or>\n                      (\\<not> State_Idle localState output_fun trans_fun\n                               (localState\n                                 (i_Exec_Comp_Stream trans_fun\n                                   (input \\<odot> k) c t2)).\n                       t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n                       output_fun\n                        (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                          t1) =\n                       m \\<and>\n                       (\\<circle> t3 t1 [0\\<dots>].\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t4) =\n                           NoMsg.\n                           t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                           output_fun\n                            (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                              c t5) =\n                           NoMsg \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c t5))))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     (\\<not> State_Idle localState output_fun trans_fun\n              (localState\n                (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n      t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n      output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n      m \\<and>\n      State_Idle localState output_fun trans_fun\n       (localState\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1))) \\<or>\n     (\\<not> State_Idle localState output_fun trans_fun\n              (localState\n                (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n      t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n      output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n      m \\<and>\n      (\\<circle> t3 t1 [0\\<dots>].\n          output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n          NoMsg.\n          t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n          output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n          NoMsg \\<and>\n          State_Idle localState output_fun trans_fun\n           (localState\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n               t5))))\\<rbrakk>\n    \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                              (localState\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t1)).\n                      t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                      output_fun\n                       (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                         t2) =\n                      m \\<and>\n                      (\\<circle> t3 t2 [0\\<dots>].\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t4) =\n                          NoMsg.\n                          t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t5) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t5)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     (\\<not> State_Idle localState output_fun trans_fun\n              (localState\n                (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n      t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n      output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n      m \\<and>\n      State_Idle localState output_fun trans_fun\n       (localState\n         (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1))) \\<or>\n     (\\<not> State_Idle localState output_fun trans_fun\n              (localState\n                (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t2)).\n      t2 \\<U> t1 [0\\<dots>] \\<oplus> t * k.\n      output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n      m \\<and>\n      (\\<circle> t3 t1 [0\\<dots>].\n          output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t4) =\n          NoMsg.\n          t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n          output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t5) =\n          NoMsg \\<and>\n          State_Idle localState output_fun trans_fun\n           (localState\n             (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n               t5))))\\<rbrakk>\n    \\<Longrightarrow> \\<not> State_Idle localState output_fun trans_fun\n                              (localState\n                                (i_Exec_Comp_Stream trans_fun\n                                  (input \\<odot> k) c t1)).\n                      t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                      output_fun\n                       (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                         t2) =\n                      m \\<and>\n                      (\\<circle> t3 t2 [0\\<dots>].\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t4) =\n                          NoMsg.\n                          t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                          output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             t5) =\n                          NoMsg \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState\n                             (i_Exec_Comp_Stream trans_fun (input \\<odot> k)\n                               c t5)))", "apply (unfold iUntil_def, erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (elim iexE conjE, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (case_tac \"t1 \\<le> t * k + (k - Suc 0)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        \\<not> t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        \\<not> t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (simp add: i_Exec_Stream_Acc_LocalState_nth i_Exec_Stream_nth i_expand_i_take_mult[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (k + t * k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1)\n                c)) \\<longrightarrow>\n           output_fun\n            (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t')\n                       c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc ta) c) =\n                            m \\<and>\n                            (\\<circle> t3 ta [0\\<dots>].\n                                \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                   output_fun\n                                    (f_Exec_Comp trans_fun\n(input \\<odot> k \\<Down> Suc t) c) =\n                                   NoMsg \\<and>\n                                   State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t) c)) \\<and>\n                                   (\\<box> t' ([0\\<dots>] \\<oplus>\n         t3) \\<down><\n        t.\n output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n NoMsg)) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (thin_tac \"iAll I P\" for I P)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (k + t * k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t')\n                       c));\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc ta) c) =\n                            m \\<and>\n                            (\\<circle> t3 ta [0\\<dots>].\n                                \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                   output_fun\n                                    (f_Exec_Comp trans_fun\n(input \\<odot> k \\<Down> Suc t) c) =\n                                   NoMsg \\<and>\n                                   State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t) c)) \\<and>\n                                   (\\<box> t' ([0\\<dots>] \\<oplus>\n         t3) \\<down><\n        t.\n output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n NoMsg)) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (drule_tac t=\"t * k + (k - Suc 0)\" in ispec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (k + t * k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t * k + (k - Suc 0)\n                         \\<in> ([0\\<dots>] \\<oplus> t * k) \\<down>< t1\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (k + t * k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        \\<not> t1 \\<le> t * k + k - Suc 0;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> Suc (t * k + (k - Suc 0)))\n                    c))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc ta) c) =\n                            m \\<and>\n                            (\\<circle> t3 ta [0\\<dots>].\n                                \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                   output_fun\n                                    (f_Exec_Comp trans_fun\n(input \\<odot> k \\<Down> Suc t) c) =\n                                   NoMsg \\<and>\n                                   State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t) c)) \\<and>\n                                   (\\<box> t' ([0\\<dots>] \\<oplus>\n         t3) \\<down><\n        t.\n output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n NoMsg)) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)))\n 3. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 4. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (simp add: cut_less_mem_iff iT_add iT_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> (k + t * k)) c));\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        output_fun\n         (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState\n           (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t1) c));\n        \\<not> t1 \\<le> t * k + k - Suc 0;\n        \\<not> State_Idle localState output_fun trans_fun\n                (localState\n                  (f_Exec_Comp trans_fun\n                    (input \\<odot> k \\<Down> Suc (t * k + (k - Suc 0)))\n                    c))\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            output_fun\n                             (f_Exec_Comp trans_fun\n                               (input \\<odot> k \\<Down> Suc ta) c) =\n                            m \\<and>\n                            (\\<circle> t3 ta [0\\<dots>].\n                                \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                   output_fun\n                                    (f_Exec_Comp trans_fun\n(input \\<odot> k \\<Down> Suc t) c) =\n                                   NoMsg \\<and>\n                                   State_Idle localState output_fun\n                                    trans_fun\n                                    (localState\n(f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t) c)) \\<and>\n                                   (\\<box> t' ([0\\<dots>] \\<oplus>\n         t3) \\<down><\n        t.\n output_fun (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c) =\n NoMsg)) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (f_Exec_Comp trans_fun (input \\<odot> k \\<Down> Suc t') c)))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 3. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (simp add: add.commute[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k;\n        State_Idle localState output_fun trans_fun\n         (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c\n           t);\n        m \\<noteq> NoMsg; t0 = t * k;\n        s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n        \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n           State_Idle localState output_fun trans_fun\n            (localState\n              (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                t1)) \\<longrightarrow>\n           output_fun\n            (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n           NoMsg;\n        t1 \\<in> [0\\<dots>] \\<oplus> t * k;\n        \\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< t1.\n           \\<not> State_Idle localState output_fun trans_fun\n                   (localState\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t'));\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        m;\n        State_Idle localState output_fun trans_fun\n         (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1));\n        t1 \\<le> t * k + (k - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                            (output_fun\n                              (i_Exec_Comp_Stream trans_fun\n                                (input \\<odot> k) c ta) =\n                             m \\<and>\n                             (\\<circle> t3 ta [0\\<dots>].\n                                 \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                    (output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                                     NoMsg \\<and>\n                                     State_Idle localState output_fun\ntrans_fun\n(localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t))) \\<and>\n                                    (\\<box> t' ([0\\<dots>] \\<oplus>\n          t3) \\<down><\n         t.\n  output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n  NoMsg))) \\<and>\n                            (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down><\n ta.\n                                \\<not> State_Idle localState output_fun\n  trans_fun\n  (localState (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<box> t1 [0\\<dots>,k - Suc 0] \\<oplus> t * k.\n        State_Idle localState output_fun trans_fun\n         (localState\n           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n             t1)) \\<longrightarrow>\n        output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t1) =\n        NoMsg;\n     \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n        (output_fun (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c ta) =\n         m \\<and>\n         (\\<circle> t3 ta [0\\<dots>].\n             \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                (output_fun\n                  (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t) =\n                 NoMsg \\<and>\n                 State_Idle localState output_fun trans_fun\n                  (localState\n                    (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                      t))) \\<and>\n                (\\<box> t' ([0\\<dots>] \\<oplus> t3) \\<down>< t.\n                    output_fun\n                     (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                    NoMsg))) \\<and>\n        (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n            \\<not> State_Idle localState output_fun trans_fun\n                    (localState\n                      (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                        t')))\\<rbrakk>\n    \\<Longrightarrow> \\<diamond> ta [0\\<dots>] \\<oplus> t * k.\n                         (output_fun\n                           (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\n                             ta) =\n                          m \\<and>\n                          (\\<circle> t3 ta [0\\<dots>].\n                              \\<diamond> t [0\\<dots>] \\<oplus> t3.\n                                 (output_fun\n                                   (i_Exec_Comp_Stream trans_fun\n                                     (input \\<odot> k) c t) =\n                                  NoMsg \\<and>\n                                  State_Idle localState output_fun trans_fun\n                                   (localState\n                                     (i_Exec_Comp_Stream trans_fun\n (input \\<odot> k) c t))) \\<and>\n                                 (\\<box> t' ([0\\<dots>] \\<oplus>\n       t3) \\<down><\n      t.\n                                     output_fun\n(i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t') =\n                                     NoMsg))) \\<and>\n                         (\\<box> t' ([0\\<dots>] \\<oplus> t * k) \\<down>< ta.\n                             \\<not> State_Idle localState output_fun\n                                     trans_fun\n                                     (localState\n (i_Exec_Comp_Stream trans_fun (input \\<odot> k) c t')))", "apply (fastforce simp: iT_add iT_iff)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) =\n  (((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and>\n      (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n      (\\<circle> t3 t1 [0\\<dots>].\n          ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n           (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      (\\<not> State_Idle localState output_fun trans_fun\n                               (localState (s t2)).\n                       t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t1) = m \\<and>\n                       (State_Idle localState output_fun trans_fun\n                         (localState (s t1)) \\<or>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (subst i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv', assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> ((\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        State_Idle localState output_fun trans_fun\n                         (localState (s t1))) \\<or>\n                       (\\<not> State_Idle localState output_fun trans_fun\n                                (localState (s t2)).\n                        t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                        output_fun (s t1) = m \\<and>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5))))) =\n                      (\\<not> State_Idle localState output_fun trans_fun\n                               (localState (s t2)).\n                       t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t1) = m \\<and>\n                       (State_Idle localState output_fun trans_fun\n                         (localState (s t1)) \\<or>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (subst iUntil_disj_distrib[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (\\<not> State_Idle localState output_fun trans_fun\n                               (localState (s t1)).\n                       t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t2) = m \\<and>\n                       State_Idle localState output_fun trans_fun\n                        (localState (s t2)) \\<or>\n                       output_fun (s t2) = m \\<and>\n                       (\\<circle> t3 t2 [0\\<dots>].\n                           output_fun (s t4) = NoMsg.\n                           t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                           output_fun (s t5) = NoMsg \\<and>\n                           State_Idle localState output_fun trans_fun\n                            (localState (s t5)))) =\n                      (\\<not> State_Idle localState output_fun trans_fun\n                               (localState (s t2)).\n                       t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                       output_fun (s t1) = m \\<and>\n                       (State_Idle localState output_fun trans_fun\n                         (localState (s t1)) \\<or>\n                        (\\<circle> t3 t1 [0\\<dots>].\n                            output_fun (s t4) = NoMsg.\n                            t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                            output_fun (s t5) = NoMsg \\<and>\n                            State_Idle localState output_fun trans_fun\n                             (localState (s t5)))))", "apply (rule iUntil_cong2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> \\<box> t [0\\<dots>] \\<oplus> t0.\n                         (output_fun (s t) = m \\<and>\n                          State_Idle localState output_fun trans_fun\n                           (localState (s t)) \\<or>\n                          output_fun (s t) = m \\<and>\n                          (\\<circle> t3 t [0\\<dots>].\n                              output_fun (s t4) = NoMsg.\n                              t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                              output_fun (s t5) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t5)))) =\n                         (output_fun (s t) = m \\<and>\n                          (State_Idle localState output_fun trans_fun\n                            (localState (s t)) \\<or>\n                           (\\<circle> t3 t [0\\<dots>].\n                               output_fun (s t4) = NoMsg.\n                               t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                               output_fun (s t5) = NoMsg \\<and>\n                               State_Idle localState output_fun trans_fun\n                                (localState (s t5)))))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_iUntil_State_Idle_conv: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c \\<rbrakk> \\<Longrightarrow>\n  (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m) = (\n  (m = \\<NoMsg> \\<longrightarrow>\n    (output_fun (s t1) = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\n     output_fun (s t2) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t2))))) \\<and>\n  (m \\<noteq> \\<NoMsg> \\<longrightarrow>\n    (((\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n      (output_fun (s t1) = m \\<and>\n        (State_Idle localState output_fun trans_fun (localState (s t1)) \\<or>\n        (\\<circle> t3 t1 [0\\<dots>].\n            ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n             (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<not> State_Idle localState output_fun trans_fun\n                                 (localState (s t2)).\n                         t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         (State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          (\\<circle> t3 t1 [0\\<dots>].\n                              output_fun (s t4) = NoMsg.\n                              t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                              output_fun (s t5) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t5)))))))", "apply (case_tac \"m = \\<NoMsg>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m = NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<not> State_Idle localState output_fun trans_fun\n                                 (localState (s t2)).\n                         t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         (State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          (\\<circle> t3 t1 [0\\<dots>].\n                              output_fun (s t4) = NoMsg.\n                              t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                              output_fun (s t5) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t5)))))))\n 2. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<not> State_Idle localState output_fun trans_fun\n                                 (localState (s t2)).\n                         t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         (State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          (\\<circle> t3 t1 [0\\<dots>].\n                              output_fun (s t4) = NoMsg.\n                              t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                              output_fun (s t5) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t5)))))))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_State_Idle_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     t0 = t * k; s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                        input c t =\n                       m) =\n                      ((m = NoMsg \\<longrightarrow>\n                        (output_fun (s t1) = NoMsg.\n                         t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t2) = NoMsg \\<and>\n                         State_Idle localState output_fun trans_fun\n                          (localState (s t2)))) \\<and>\n                       (m \\<noteq> NoMsg \\<longrightarrow>\n                        (\\<not> State_Idle localState output_fun trans_fun\n                                 (localState (s t2)).\n                         t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n                         output_fun (s t1) = m \\<and>\n                         (State_Idle localState output_fun trans_fun\n                           (localState (s t1)) \\<or>\n                          (\\<circle> t3 t1 [0\\<dots>].\n                              output_fun (s t4) = NoMsg.\n                              t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n                              output_fun (s t5) = NoMsg \\<and>\n                              State_Idle localState output_fun trans_fun\n                               (localState (s t5)))))))", "apply (simp add: i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Sufficient conditions for output messages.\\<close>"], ["", "corollary i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iEx_imp1: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    (\\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n       output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1)))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        State_Idle localState output_fun trans_fun\n         (localState (s t1))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "by (blast intro: i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2'[THEN iffD2])"], ["", "corollary i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iEx_imp2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    \\<diamond> t1 [0\\<dots>, k - Suc 0] \\<oplus> t0. (\n          ((output_fun (s t1) = m) \\<and>\n            (\\<circle> t2 t1 [0\\<dots>].\n              ((output_fun (s t3) = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t2).\n               (output_fun (s t4) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t4)))))))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<diamond> t1 [0\\<dots>,k - Suc 0] \\<oplus> t0.\n        output_fun (s t1) = m \\<and>\n        (\\<circle> t2 t1 [0\\<dots>].\n            output_fun (s t3) = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t2.\n            output_fun (s t4) = NoMsg \\<and>\n            State_Idle localState output_fun trans_fun\n             (localState (s t4)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "by (blast intro: i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2'[THEN iffD2])"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iUntil_imp1: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    (\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and> State_Idle localState output_fun trans_fun (localState (s t1))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t2)).\n     t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t1) = m \\<and>\n     State_Idle localState output_fun trans_fun (localState (s t1))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "by (blast intro: i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv'[THEN iffD2])"], ["", "lemma i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iUntil_imp2: \"\n  \\<lbrakk> Suc 0 < k;\n    State_Idle localState output_fun trans_fun (\n      i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n    m \\<noteq> \\<NoMsg>;\n    t0 = t * k;\n    s = i_Exec_Comp_Stream trans_fun (input \\<odot>\\<^sub>i k) c;\n    (\\<not> State_Idle localState output_fun trans_fun (localState (s t2))). t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n    (output_fun (s t1) = m \\<and>\n    (\\<circle> t3 t1 [0\\<dots>].\n      ((output_fun (s t4) = \\<NoMsg>. t4 \\<U> t5 ([0\\<dots>] \\<oplus> t3).\n       (output_fun (s t5) = \\<NoMsg> \\<and> State_Idle localState output_fun trans_fun (localState (s t5))))))) \\<rbrakk> \\<Longrightarrow>\n  i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun input c t = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k;\n     State_Idle localState output_fun trans_fun\n      (i_Exec_Comp_Stream_Acc_LocalState k localState trans_fun input c t);\n     m \\<noteq> NoMsg; t0 = t * k;\n     s = i_Exec_Comp_Stream trans_fun (input \\<odot> k) c;\n     \\<not> State_Idle localState output_fun trans_fun (localState (s t2)).\n     t2 \\<U> t1 [0\\<dots>] \\<oplus> t0.\n     output_fun (s t1) = m \\<and>\n     (\\<circle> t3 t1 [0\\<dots>].\n         output_fun (s t4) = NoMsg. t4 \\<U> t5 [0\\<dots>] \\<oplus> t3.\n         output_fun (s t5) = NoMsg \\<and>\n         State_Idle localState output_fun trans_fun\n          (localState (s t5)))\\<rbrakk>\n    \\<Longrightarrow> i_Exec_Comp_Stream_Acc_Output k output_fun trans_fun\n                       input c t =\n                      m", "by (blast intro: i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv'[THEN iffD2])"], ["", "text \\<open>List of selected lemmas about output of accelerated components.\\<close>"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_iEx_iAll_cut_greater_conv"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_State_Idle_conv"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2'"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv'"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_iAll_iUntil_State_Idle_conv2"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_iUntil_State_Idle_conv"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iEx_imp1"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iEx_imp2"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iUntil_imp1"], ["", "thm i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iUntil_imp2"], ["", "end"]]}